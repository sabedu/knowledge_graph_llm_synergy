[
    {
        "question": "how many commits happened in last month?",
        "number": 1,
        "category": 1,
        "response": "There were no commits made in the last month. Can I help with anything else?",
        "chain_of_thought": "To determine how many commits happened in the last month, we need to consider the current date, which is 2024-08-26T00:00:00Z. The last month would be from 2024-07-26T00:00:00Z to 2024-08-25T23:59:59Z.\n\nThe relevant nodes for this query are the Commit nodes, and we need to filter these nodes based on the `committedDate` property. The `committedDate` should be in the range of the last month.\n\nHere's the Cypher query to find the number of commits that happened in the last month:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n```\n\nThis query matches all commits and filters them based on the `committedDate` to ensure they fall within the specified date range, then returns the count of these commits.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n",
        "result": [
            {
                "numberOfCommits": 0
            }
        ],
        "isAmbiguous": true,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "what is the latest commit?",
        "number": 2,
        "category": 1,
        "response": "The latest commit is identified by the commit ID `73486cb5f5862a443b42c2aff68b82320218cbcd` and it was committed on June 14, 2024, at 12:52:12 UTC.",
        "chain_of_thought": "To determine the latest commit, we need to identify the Commit node with the most recent `committedDate`. The relevant property for this query is `committedDate` in the Commit node. We will sort the commits by `committedDate` in descending order and return the top result.\n\nThe query to find the latest commit is:\n\n```cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS committedDate\nORDER BY c.committedDate DESC\nLIMIT 1\n```",
        "query": "cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS committedDate\nORDER BY c.committedDate DESC\nLIMIT 1\n",
        "result": [
            {
                "commitId": "73486cb5f5862a443b42c2aff68b82320218cbcd",
                "committedDate": "2024-06-14T12:52:12Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "can you tell me the details of the commits between Dec 1st 2023 and Dec 7th 2023?",
        "number": 3,
        "category": 1,
        "response": "Here are the details of the commits made between December 1st, 2023, and December 7th, 2023:\n\n1. **Commit ID:** 947993f7e8e445b9032dd59d7f484593c3174452\n   - **Message:** \"chore: bump vitest to 1.0\"\n   - **Additions:** 323\n   - **Deletions:** 154\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:08:23Z\n\n2. **Commit ID:** 08382f008016c3b3b93f84594266f2e191fee91d\n   - **Message:** \"fix(props): should not unwrap props that are raw refs\\n\\nclose #12930\"\n   - **Additions:** 36\n   - **Deletions:** 12\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:10:49Z\n\n3. **Commit ID:** d30f6fd25f90973a84fadb43eef75a54c4b42ea2\n   - **Message:** \"test: fix tests\"\n   - **Additions:** 39\n   - **Deletions:** 39\n   - **Changed Files:** 4\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:21:00Z\n\n4. **Commit ID:** 0ad8e8d94f3a3bf4429f25850c85a6bbb2b81364\n   - **Message:** \"fix(shallowReactive): should track value if already reactive when set in shallowReactive\"\n   - **Additions:** 6\n   - **Deletions:** 5\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:45:15Z\n\n5. **Commit ID:** 45d6ad6645e960a3ee52ad9667520a1625f10dfd\n   - **Message:** \"chore(compiler-sfc): specify prettier version (#13053)\\n\\nclose: #13052\"\n   - **Additions:** 7\n   - **Deletions:** 1\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:49:41Z\n\n6. **Commit ID:** de0b97b3eadae120eda505b45df2de2115dcb6f0\n   - **Message:** \"fix(types): fix type augmentation and compiler-sfc types w/moduleResolution: bundler (#13107)\\n\\nclose #13106\"\n   - **Additions:** 4\n   - **Deletions:** 3\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:52:18Z\n\n7. **Commit ID:** ae3e4b1c706b8d61a4a312ca5d23441df021b4b4\n   - **Message:** \"fix(utils): unwrap refs when stringifying values in template\\n\\nclose #12884\\nclose #12888\"\n   - **Additions:** 20\n   - **Deletions:** 1\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T08:40:49Z\n\n8. **Commit ID:** 10c2a87c7038f2f80df23044c48a130bea253bf8\n   - **Message:** \"chore(deps): bump @babel/parser\"\n   - **Additions:** 673\n   - **Deletions:** 701\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T09:09:56Z\n\n9. **Commit ID:** 25f97a5033187372e7b8c591c79336197ee5c833\n   - **Message:** \"fix(compiler-sfc): fix rewriteDefault edge cases\\n\\nclose #13060\\nclose #12892\\nclose #12906\"\n   - **Additions:** 79\n   - **Deletions:** 7\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T09:25:12Z\n\n10. **Commit ID:** d6468c4c383184acd66f3c9091005e83836a43f3\n    - **Message:** \"chore(deps): bump esbuild\"\n    - **Additions:** 6\n    - **Deletions:** 234\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T09:29:47Z\n\n11. **Commit ID:** f5ef882a781b8a62c9ca00e95006d07636567c8e\n    - **Message:** \"fix(style): always set new styles\\n\\nclose #12901\\nclose #12946\"\n    - **Additions:** 17\n    - **Deletions:** 4\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T15:17:02Z\n\n12. **Commit ID:** a174c29dab2cf655b06f7870e0ac5a78ef35ec8a\n    - **Message:** \"fix(types): fix shallowRefs return type  (#12979)\\n\\nclose #12978\"\n    - **Additions:** 30\n    - **Deletions:** 8\n    - **Changed Files:** 3\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T15:51:56Z\n\n13. **Commit ID:** 6d857f5bee275dc98106e3b2cbc7722f5ec0cfc0\n    - **Message:** \"fix(watch): new property addition should trigger deep watcher with getter\\n\\nclose #12967\\nclose #12972\"\n    - **Additions:** 37\n    - **Deletions:** 2\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T16:13:31Z\n\n14. **Commit ID:** 24fcf69624a633d43dfc0aa5fa6b93d11de7fad5\n    - **Message:** \"fix(types): type VNodeChildren should allow type number  (#13067)\\n\\nclose #12973\"\n    - **Additions:** 2\n    - **Deletions:** 0\n    - **Changed Files:** 1\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T05:59:43Z\n\n15. **Commit ID:** 83d95351a9f809311d624fc3398e7f6829b72447\n    - **Message:** \"fix(compiler-sfc): check template `ref` usage,  (#12985)\\n\\nclose #12984\"\n    - **Additions:** 29\n    - **Deletions:** 0\n    - **Changed Files:** 3\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T06:14:27Z\n\n16. **Commit ID:** 3650c12f7d3a20f3155bc1fd2b068e84289e0d33\n    - **Message:** \"fix(types): provide types for built-in components\\n\\nclose #13002\"\n    - **Additions:** 65\n    - **Deletions:** 0\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T06:41:10Z\n\n17. **Commit ID:** 2632249925e632e56f6dfc8fdbcf682c82e4081b\n    - **Message:** \"fix(keep-alive): fix keep-alive memory leak\\n\\nclose #12827\"\n    - **Additions:** 2\n    - **Deletions:** 0\n    - **Changed Files:** 1\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T08:12:36Z\n\n18. **Commit ID:** e0747f40a879b4000a1959d21377b51d1f1ed988\n    - **Message:** \"fix(keep-alive): fix memory leak without breaking transition tests\"\n    - **Additions:** 8\n    - **Deletions:** 4\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T09:07:15Z\n\nThese commits cover various changes, including bug fixes, chore updates, and test adjustments within the specified date range.",
        "chain_of_thought": "To address the question, we need to find the details of commits made between December 1st, 2023, and December 7th, 2023. The relevant node for this query is the Commit node, and we will use the `committedDate` property to filter the commits within the specified date range.\n\nFirst, we need to format the dates in ISO format. The start date is \"2023-12-01T00:00:00Z\" and the end date is \"2023-12-07T23:59:59Z\" to include the entire day of December 7th.\n\nThe query will match all commits and filter them based on the `committedDate` property to fall within the specified range. We will then return the details of these commits.\n\nThe complete query is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2023-12-01T00:00:00Z\" AND c.committedDate <= \"2023-12-07T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n```\n\nThis query will return the details of the commits, including their ID, message, number of additions, deletions, changed files, comments count, and the committed date, all ordered by the committed date.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2023-12-01T00:00:00Z\" AND c.committedDate <= \"2023-12-07T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n",
        "result": [
            {
                "commitId": "947993f7e8e445b9032dd59d7f484593c3174452",
                "message": "\"chore: bump vitest to 1.0\"",
                "additions": 323,
                "deletions": 154,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:08:23Z"
            },
            {
                "commitId": "08382f008016c3b3b93f84594266f2e191fee91d",
                "message": "\"fix(props): should not unwrap props that are raw refs\n\nclose #12930\"",
                "additions": 36,
                "deletions": 12,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:10:49Z"
            },
            {
                "commitId": "d30f6fd25f90973a84fadb43eef75a54c4b42ea2",
                "message": "\"test: fix tests\"",
                "additions": 39,
                "deletions": 39,
                "changedFiles": 4,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:21:00Z"
            },
            {
                "commitId": "0ad8e8d94f3a3bf4429f25850c85a6bbb2b81364",
                "message": "\"fix(shallowReactive): should track value if already reactive when set in shallowReactive\"",
                "additions": 6,
                "deletions": 5,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:45:15Z"
            },
            {
                "commitId": "45d6ad6645e960a3ee52ad9667520a1625f10dfd",
                "message": "\"chore(compiler-sfc): specify prettier version (#13053)\n\nclose: #13052\"",
                "additions": 7,
                "deletions": 1,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:49:41Z"
            },
            {
                "commitId": "de0b97b3eadae120eda505b45df2de2115dcb6f0",
                "message": "\"fix(types): fix type augmentation and compiler-sfc types w/moduleResolution: bundler (#13107)\n\nclose #13106\"",
                "additions": 4,
                "deletions": 3,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:52:18Z"
            },
            {
                "commitId": "ae3e4b1c706b8d61a4a312ca5d23441df021b4b4",
                "message": "\"fix(utils): unwrap refs when stringifying values in template\n\nclose #12884\nclose #12888\"",
                "additions": 20,
                "deletions": 1,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T08:40:49Z"
            },
            {
                "commitId": "10c2a87c7038f2f80df23044c48a130bea253bf8",
                "message": "\"chore(deps): bump @babel/parser\"",
                "additions": 673,
                "deletions": 701,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:09:56Z"
            },
            {
                "commitId": "25f97a5033187372e7b8c591c79336197ee5c833",
                "message": "\"fix(compiler-sfc): fix rewriteDefault edge cases\n\nclose #13060\nclose #12892\nclose #12906\"",
                "additions": 79,
                "deletions": 7,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:25:12Z"
            },
            {
                "commitId": "d6468c4c383184acd66f3c9091005e83836a43f3",
                "message": "\"chore(deps): bump esbuild\"",
                "additions": 6,
                "deletions": 234,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:29:47Z"
            },
            {
                "commitId": "f5ef882a781b8a62c9ca00e95006d07636567c8e",
                "message": "\"fix(style): always set new styles\n\nclose #12901\nclose #12946\"",
                "additions": 17,
                "deletions": 4,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T15:17:02Z"
            },
            {
                "commitId": "a174c29dab2cf655b06f7870e0ac5a78ef35ec8a",
                "message": "\"fix(types): fix shallowRefs return type  (#12979)\n\nclose #12978\"",
                "additions": 30,
                "deletions": 8,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T15:51:56Z"
            },
            {
                "commitId": "6d857f5bee275dc98106e3b2cbc7722f5ec0cfc0",
                "message": "\"fix(watch): new property addition should trigger deep watcher with getter\n\nclose #12967\nclose #12972\"",
                "additions": 37,
                "deletions": 2,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T16:13:31Z"
            },
            {
                "commitId": "24fcf69624a633d43dfc0aa5fa6b93d11de7fad5",
                "message": "\"fix(types): type VNodeChildren should allow type number  (#13067)\n\nclose #12973\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-07T05:59:43Z"
            },
            {
                "commitId": "83d95351a9f809311d624fc3398e7f6829b72447",
                "message": "\"fix(compiler-sfc): check template `ref` usage,  (#12985)\n\nclose #12984\"",
                "additions": 29,
                "deletions": 0,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-07T06:14:27Z"
            },
            {
                "commitId": "3650c12f7d3a20f3155bc1fd2b068e84289e0d33",
                "message": "\"fix(types): provide types for built-in components\n\nclose #13002\"",
                "additions": 65,
                "deletions": 0,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-07T06:41:10Z"
            },
            {
                "commitId": "2632249925e632e56f6dfc8fdbcf682c82e4081b",
                "message": "\"fix(keep-alive): fix keep-alive memory leak\n\nclose #12827\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-07T08:12:36Z"
            },
            {
                "commitId": "e0747f40a879b4000a1959d21377b51d1f1ed988",
                "message": "\"fix(keep-alive): fix memory leak without breaking transition tests\"",
                "additions": 8,
                "deletions": 4,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-07T09:07:15Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "return a commit message on July 31?",
        "number": 4,
        "category": 1,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To address the question \"return a commit message on July 31,\" we need to interpret the query to find commit messages from a specific date, July 31. The schema provides us with the Commit node, which contains a `committedDate` property that we can use to filter commits by date. The `committedDate` is a string, and we need to format the date in ISO format as \"YYYY-MM-DD\" and use a regex to match the date without considering the time.\n\nSince the question does not specify a year, we will assume it refers to the current year, 2024. Therefore, the date we are interested in is \"2024-07-31\".\n\nThe query will involve:\n1. Matching the Commit nodes.\n2. Filtering the commits by the `committedDate` property using a regex to match the date \"2024-07-31\".\n3. Returning the commit messages.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31.*'\nRETURN c.message AS commitMessage\n```\n\nThis query will return the commit messages for all commits made on July 31, 2024.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31.*'\nRETURN c.message AS commitMessage\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "incorrect"
    },
    {
        "question": "show me the changes for render.js file?",
        "number": 5,
        "category": 2,
        "response": "Here are the changes for the `render.js` file, as per the context provided:\n\n1. Commit `f64765fa03c1eb1d37f3301ea5beb4d18e57158a`:\n   - Fixed a spelling error in a comment:\n     ```diff\n     -      // There's no need to maintain a stack becaues all render fns are called\n     +      // There's no need to maintain a stack because all render fns are called\n     ```\n\n2. Commit `099f3ba60085a089ff369442bdb835f3868e47c0`:\n   - Modified the handling of `vm.$slots` and `vm.$scopedSlots`:\n     ```diff\n     -        vm.$slots\n     +        vm.$slots,\n     +        vm.$scopedSlots\n     ```\n\n3. Commit `b9de23b1008b52deca7e7df40843e318a42f3f53`:\n   - Introduced `currentRenderingInstance` for testing:\n     ```diff\n     +export let currentRenderingInstance: Component | null = null\n     +// for testing only\n     +export function setCurrentRenderingInstance (vm: Component) {\n     +  currentRenderingInstance = vm\n     +}\n     ```\n\n4. Commit `42fdf3f8378e5dc379808a4fa67b39c4a74ae191`:\n   - Renamed a function for clarity:\n     ```diff\n     -function waitForSsrPrefetch (vm, resolve, reject) {\n     +function waitForServerPrefetch (vm, resolve, reject) {\n     ```\n\n5. Commit `6fe07ebf5ab3fea1860c59fe7cdd2ec1b760f9b0`:\n   - Added a function `waitForSsrPrefetch` to handle server-side rendering prefetching:\n     ```diff\n     +function waitForSsrPrefetch (vm, resolve, reject) {\n     +  let handlers = vm.$options.ssrPrefetch\n     ```\n\nThese changes involve updates to comments, function renaming, and the introduction of new variables and functions to improve readability and functionality related to rendering and server-side prefetching.",
        "chain_of_thought": "To address the question \"show me the changes for render.js file,\" we need to interpret the request as finding all the changes made to the file named \"render.js.\" This involves identifying the relevant nodes and relationships in the schema.\n\n1. **Identify the relevant nodes and relationships:**\n   - We are interested in the `File` node with the name \"render.js.\"\n   - We need to find the `Commit` nodes that have changed this file. The relevant relationship between `Commit` and `File` is the `changed` relationship.\n\n2. **Construct the query:**\n   - We will match the `File` node with the name \"render.js.\"\n   - We will then find all `Commit` nodes that have a `changed` relationship with this file.\n   - We will return the details of the changes, which can include the number of additions, deletions, and the patch details.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'render.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n```\n\nThis query will return the commit ID, the number of additions and deletions, and the patch details for each change made to the file \"render.js,\" ordered by the commit date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'render.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n",
        "result": [
            {
                "commitId": "f64765fa03c1eb1d37f3301ea5beb4d18e57158a",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -84,7 +84,7 @@ export function renderMixin (Vue: Class<Component>) {\n     // render self\n     let vnode\n     try {\n-      // There's no need to maintain a stack becaues all render fns are called\n+      // There's no need to maintain a stack because all render fns are called\n       // separately from one another. Nested component's render fns are called\n       // when parent component is patched.\n       currentRenderingInstance = vm"
            },
            {
                "commitId": "099f3ba60085a089ff369442bdb835f3868e47c0",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -73,7 +73,8 @@ export function renderMixin (Vue: Class<Component>) {\n     if (_parentVnode) {\n       vm.$scopedSlots = normalizeScopedSlots(\n         _parentVnode.data.scopedSlots,\n-        vm.$slots\n+        vm.$slots,\n+        vm.$scopedSlots\n       )\n     }\n "
            },
            {
                "commitId": "b9de23b1008b52deca7e7df40843e318a42f3f53",
                "additions": 13,
                "deletions": 0,
                "patch": "@@ -51,6 +51,13 @@ export function initRender (vm: Component) {\n   }\n }\n \n+export let currentRenderingInstance: Component | null = null\n+\n+// for testing only\n+export function setCurrentRenderingInstance (vm: Component) {\n+  currentRenderingInstance = vm\n+}\n+\n export function renderMixin (Vue: Class<Component>) {\n   // install runtime convenience helpers\n   installRenderHelpers(Vue.prototype)\n@@ -76,6 +83,10 @@ export function renderMixin (Vue: Class<Component>) {\n     // render self\n     let vnode\n     try {\n+      // There's no need to maintain a stack becaues all render fns are called\n+      // separately from one another. Nested component's render fns are called\n+      // when parent component is patched.\n+      currentRenderingInstance = vm\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n       handleError(e, vm, `render`)\n@@ -92,6 +103,8 @@ export function renderMixin (Vue: Class<Component>) {\n       } else {\n         vnode = vm._vnode\n       }\n+    } finally {\n+      currentRenderingInstance = null\n     }\n     // if the returned array contains only a single node, allow it\n     if (Array.isArray(vnode) && vnode.length === 1) {"
            },
            {
                "commitId": "42fdf3f8378e5dc379808a4fa67b39c4a74ae191",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -50,8 +50,8 @@ const normalizeRender = vm => {\n   }\n }\n \n-function waitForSsrPrefetch (vm, resolve, reject) {\n-  let handlers = vm.$options.ssrPrefetch\n+function waitForServerPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.serverPrefetch\n   if (isDef(handlers)) {\n     if (!Array.isArray(handlers)) handlers = [handlers]\n     try {\n@@ -206,7 +206,7 @@ function renderComponentInner (node, isRoot, context) {\n \n   const reject = context.done\n \n-  waitForSsrPrefetch(child, resolve, reject)\n+  waitForServerPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -432,6 +432,6 @@ export function createRenderFunction (\n     const resolve = () => {\n       renderNode(component._render(), true, context)\n     }\n-    waitForSsrPrefetch(component, resolve, done)\n+    waitForServerPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "6fe07ebf5ab3fea1860c59fe7cdd2ec1b760f9b0",
                "additions": 47,
                "deletions": 9,
                "patch": "@@ -19,6 +19,7 @@ let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n     warned[msg] = true\n+    // eslint-disable-next-line no-console\n     console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n   }\n }\n@@ -49,6 +50,27 @@ const normalizeRender = vm => {\n   }\n }\n \n+function waitForSsrPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.ssrPrefetch\n+  if (isDef(handlers)) {\n+    if (!Array.isArray(handlers)) handlers = [handlers]\n+    try {\n+      const promises = []\n+      for (let i = 0, j = handlers.length; i < j; i++) {\n+        const result = handlers[i].call(vm, vm)\n+        if (result && typeof result.then === 'function') {\n+          promises.push(result)\n+        }\n+      }\n+      Promise.all(promises).then(resolve).catch(reject)\n+      return\n+    } catch (e) {\n+      reject(e)\n+    }\n+  }\n+  resolve()\n+}\n+\n function renderNode (node, isRoot, context) {\n   if (node.isString) {\n     renderStringNode(node, context)\n@@ -92,7 +114,12 @@ function renderComponent (node, isRoot, context) {\n   const registerComponent = registerComponentForCache(Ctor.options, write)\n \n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const rawKey = getKey(node.componentOptions.propsData)\n+    if (rawKey === false) {\n+      renderComponentInner(node, isRoot, context)\n+      return\n+    }\n+    const key = name + '::' + rawKey\n     const { has, get } = context\n     if (isDef(has)) {\n       has(key, hit => {\n@@ -166,13 +193,20 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+\n+  const resolve = () => {\n+    const childNode = child._render()\n+    childNode.parent = node\n+    context.renderStates.push({\n+      type: 'Component',\n+      prevActive\n+    })\n+    renderNode(childNode, isRoot, context)\n+  }\n+\n+  const reject = context.done\n+\n+  waitForSsrPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -394,6 +428,10 @@ export function createRenderFunction (\n     })\n     installSSRHelpers(component)\n     normalizeRender(component)\n-    renderNode(component._render(), true, context)\n+\n+    const resolve = () => {\n+      renderNode(component._render(), true, context)\n+    }\n+    waitForSsrPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "5d52262f1ce56d080c3438c4773a81dc5c8397aa",
                "additions": 4,
                "deletions": 1,
                "patch": "@@ -64,7 +64,10 @@ export function renderMixin (Vue: Class<Component>) {\n     const { render, _parentVnode } = vm.$options\n \n     if (_parentVnode) {\n-      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots)\n+      vm.$scopedSlots = normalizeScopedSlots(\n+        _parentVnode.data.scopedSlots,\n+        vm.$slots\n+      )\n     }\n \n     // set parent vnode. this allows render functions to have access"
            },
            {
                "commitId": "c7c13c2a156269d29fd9c9f8f6a3e53a2f2cac3d",
                "additions": 6,
                "deletions": 1,
                "patch": "@@ -11,6 +11,7 @@ import {\n import { createElement } from '../vdom/create-element'\n import { installRenderHelpers } from './render-helpers/index'\n import { resolveSlots } from './render-helpers/resolve-slots'\n+import { normalizeScopedSlots } from '../vdom/helpers/normalize-scoped-slots'\n import VNode, { createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n@@ -63,7 +64,7 @@ export function renderMixin (Vue: Class<Component>) {\n     const { render, _parentVnode } = vm.$options\n \n     if (_parentVnode) {\n-      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n+      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots)\n     }\n \n     // set parent vnode. this allows render functions to have access\n@@ -89,6 +90,10 @@ export function renderMixin (Vue: Class<Component>) {\n         vnode = vm._vnode\n       }\n     }\n+    // if the returned array contains only a single node, allow it\n+    if (Array.isArray(vnode) && vnode.length === 1) {\n+      vnode = vnode[0]\n+    }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "ab24285458c98e25d5749beb4edebef73672de4b",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -114,7 +114,12 @@ function renderComponent (node, isRoot, context) {\n   const registerComponent = registerComponentForCache(Ctor.options, write)\n \n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const rawKey = getKey(node.componentOptions.propsData)\n+    if (rawKey === false) {\n+      renderComponentInner(node, isRoot, context)\n+      return\n+    }\n+    const key = name + '::' + rawKey\n     const { has, get } = context\n     if (isDef(has)) {\n       has(key, hit => {\n@@ -188,7 +193,7 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  \n+\n   const resolve = () => {\n     const childNode = child._render()\n     childNode.parent = node"
            },
            {
                "commitId": "d7a533d6f85aae52aed03202fa5ccb774f0cb2ec",
                "additions": 41,
                "deletions": 8,
                "patch": "@@ -19,6 +19,7 @@ let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n     warned[msg] = true\n+    // eslint-disable-next-line no-console\n     console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n   }\n }\n@@ -49,6 +50,27 @@ const normalizeRender = vm => {\n   }\n }\n \n+function waitForSsrPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.ssrPrefetch\n+  if (isDef(handlers)) {\n+    if (!Array.isArray(handlers)) handlers = [handlers]\n+    try {\n+      const promises = []\n+      for (let i = 0, j = handlers.length; i < j; i++) {\n+        const result = handlers[i].call(vm, vm)\n+        if (result && typeof result.then === 'function') {\n+          promises.push(result)\n+        }\n+      }\n+      Promise.all(promises).then(resolve).catch(reject)\n+      return\n+    } catch (e) {\n+      reject(e)\n+    }\n+  }\n+  resolve()\n+}\n+\n function renderNode (node, isRoot, context) {\n   if (node.isString) {\n     renderStringNode(node, context)\n@@ -166,13 +188,20 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+  \n+  const resolve = () => {\n+    const childNode = child._render()\n+    childNode.parent = node\n+    context.renderStates.push({\n+      type: 'Component',\n+      prevActive\n+    })\n+    renderNode(childNode, isRoot, context)\n+  }\n+\n+  const reject = context.done\n+\n+  waitForSsrPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -394,6 +423,10 @@ export function createRenderFunction (\n     })\n     installSSRHelpers(component)\n     normalizeRender(component)\n-    renderNode(component._render(), true, context)\n+\n+    const resolve = () => {\n+      renderNode(component._render(), true, context)\n+    }\n+    waitForSsrPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "780dac561b9cd6c3cec28f154f76e7d28352ebf3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -326,7 +326,7 @@ function renderStartingTag (node: VNode, context) {\n       for (let i = 0; i < dirs.length; i++) {\n         const name = dirs[i].name\n         if (name !== 'show') {\n-          const dirRenderer = resolveAsset(context, 'directives', name, true)\n+          const dirRenderer = resolveAsset(context, 'directives', name)\n           if (dirRenderer) {\n             // directives mutate the node's data\n             // which then gets rendered by modules"
            },
            {
                "commitId": "307835284a326569ea12c4a22c7dcb8f36d2d8ca",
                "additions": 8,
                "deletions": 5,
                "patch": "@@ -3,6 +3,7 @@\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n+import { resolveAsset } from 'core/util/options'\n import { generateComponentTrace } from 'core/util/debug'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n@@ -324,11 +325,13 @@ function renderStartingTag (node: VNode, context) {\n     if (dirs) {\n       for (let i = 0; i < dirs.length; i++) {\n         const name = dirs[i].name\n-        const dirRenderer = directives[name]\n-        if (dirRenderer && name !== 'show') {\n-          // directives mutate the node's data\n-          // which then gets rendered by modules\n-          dirRenderer(node, dirs[i])\n+        if (name !== 'show') {\n+          const dirRenderer = resolveAsset(context, 'directives', name, true)\n+          if (dirRenderer) {\n+            // directives mutate the node's data\n+            // which then gets rendered by modules\n+            dirRenderer(node, dirs[i])\n+          }\n         }\n       }\n     }"
            },
            {
                "commitId": "530ca1b2db315fbd0e360807b2031d26665c5d3d",
                "additions": 0,
                "deletions": 8,
                "patch": "@@ -62,14 +62,6 @@ export function renderMixin (Vue: Class<Component>) {\n     const vm: Component = this\n     const { render, _parentVnode } = vm.$options\n \n-    // reset _rendered flag on slots for duplicate slot check\n-    if (process.env.NODE_ENV !== 'production') {\n-      for (const key in vm.$slots) {\n-        // $flow-disable-line\n-        vm.$slots[key]._rendered = false\n-      }\n-    }\n-\n     if (_parentVnode) {\n       vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n     }"
            },
            {
                "commitId": "1129d184482720bb52fa61f0a309645b7caaddd9",
                "additions": 5,
                "deletions": 9,
                "patch": "@@ -86,15 +86,11 @@ export function renderMixin (Vue: Class<Component>) {\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n       /* istanbul ignore else */\n-      if (process.env.NODE_ENV !== 'production') {\n-        if (vm.$options.renderError) {\n-          try {\n-            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n-          } catch (e) {\n-            handleError(e, vm, `renderError`)\n-            vnode = vm._vnode\n-          }\n-        } else {\n+      if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n+        try {\n+          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+        } catch (e) {\n+          handleError(e, vm, `renderError`)\n           vnode = vm._vnode\n         }\n       } else {"
            },
            {
                "commitId": "702000971c5a355c937607edb930b67311c78f5d",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -191,7 +191,8 @@ function renderAsyncComponent (node, isRoot, context) {\n       tag\n     )\n     if (resolvedNode) {\n-      if (resolvedNode.componnetInstance) {\n+      if (resolvedNode.componentOptions) {\n+        // normal component\n         renderComponent(resolvedNode, isRoot, context)\n       } else if (!Array.isArray(resolvedNode)) {\n         // single return node from functional component"
            },
            {
                "commitId": "882e7199fd8eee039291c4b9f7f324dcf46f32fd",
                "additions": 19,
                "deletions": 3,
                "patch": "@@ -191,7 +191,21 @@ function renderAsyncComponent (node, isRoot, context) {\n       tag\n     )\n     if (resolvedNode) {\n-      renderComponent(resolvedNode, isRoot, context)\n+      if (resolvedNode.componnetInstance) {\n+        renderComponent(resolvedNode, isRoot, context)\n+      } else if (!Array.isArray(resolvedNode)) {\n+        // single return node from functional component\n+        renderNode(resolvedNode, isRoot, context)\n+      } else {\n+        // multiple return nodes from functional component\n+        context.renderStates.push({\n+          type: 'Fragment',\n+          children: resolvedNode,\n+          rendered: 0,\n+          total: resolvedNode.length\n+        })\n+        context.next()\n+      }\n     } else {\n       // invalid component, but this does not throw on the client\n       // so render empty comment node\n@@ -232,9 +246,10 @@ function renderStringNode (el, context) {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n       type: 'Element',\n+      children,\n       rendered: 0,\n       total: children.length,\n-      endTag: el.close, children\n+      endTag: el.close\n     })\n     write(el.open, next)\n   }\n@@ -263,9 +278,10 @@ function renderElement (el, isRoot, context) {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n       type: 'Element',\n+      children,\n       rendered: 0,\n       total: children.length,\n-      endTag, children\n+      endTag\n     })\n     write(startTag, next)\n   }"
            },
            {
                "commitId": "956756b1be7084daf8b6afb92ac0da7c24cde2a5",
                "additions": 8,
                "deletions": 11,
                "patch": "@@ -11,7 +11,7 @@ import {\n import { createElement } from '../vdom/create-element'\n import { installRenderHelpers } from './render-helpers/index'\n import { resolveSlots } from './render-helpers/resolve-slots'\n-import VNode, { cloneVNodes, createEmptyVNode } from '../vdom/vnode'\n+import VNode, { createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n \n@@ -62,20 +62,17 @@ export function renderMixin (Vue: Class<Component>) {\n     const vm: Component = this\n     const { render, _parentVnode } = vm.$options\n \n-    if (vm._isMounted) {\n-      // if the parent didn't update, the slot nodes will be the ones from\n-      // last render. They need to be cloned to ensure \"freshness\" for this render.\n+    // reset _rendered flag on slots for duplicate slot check\n+    if (process.env.NODE_ENV !== 'production') {\n       for (const key in vm.$slots) {\n-        const slot = vm.$slots[key]\n-        // _rendered is a flag added by renderSlot, but may not be present\n-        // if the slot is passed from manually written render functions\n-        if (slot._rendered || (slot[0] && slot[0].elm)) {\n-          vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n-        }\n+        // $flow-disable-line\n+        vm.$slots[key]._rendered = false\n       }\n     }\n \n-    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n+    if (_parentVnode) {\n+      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n+    }\n \n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node."
            },
            {
                "commitId": "8936b8d9c147441555fcfd4ac748d817ba5ff60e",
                "additions": 4,
                "deletions": 7,
                "patch": "@@ -193,21 +193,18 @@ function renderAsyncComponent (node, isRoot, context) {\n     if (resolvedNode) {\n       renderComponent(resolvedNode, isRoot, context)\n     } else {\n-      reject()\n+      // invalid component, but this does not throw on the client\n+      // so render empty comment node\n+      context.write(`<!---->`, context.next)\n     }\n   }\n \n-  const reject = err => {\n-    console.error(`[vue-server-renderer] error when rendering async component:\\n`)\n-    if (err) console.error(err.stack)\n-    context.write(`<!--${node.text}-->`, context.next)\n-  }\n-\n   if (factory.resolved) {\n     resolve(factory.resolved)\n     return\n   }\n \n+  const reject = context.done\n   let res\n   try {\n     res = factory(resolve, reject)"
            },
            {
                "commitId": "604e081d0456ed136b24b5f759c608d153dfae93",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -252,8 +252,8 @@ function renderElement (el, isRoot, context) {\n     el.data.attrs[SSR_ATTR] = 'true'\n   }\n \n-  if (el.functionalOptions) {\n-    registerComponentForCache(el.functionalOptions, write)\n+  if (el.fnOptions) {\n+    registerComponentForCache(el.fnOptions, write)\n   }\n \n   const startTag = renderStartingTag(el, context)"
            },
            {
                "commitId": "f5cd29e1d8197613c4dfb4013b240784c3b64e43",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -17,6 +17,7 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n+  vm._staticTrees = null // v-once cached trees\n   const options = vm.$options\n   const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context"
            },
            {
                "commitId": "13196b25b8a0a84b3936982177195d2e04f13f79",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -66,7 +66,9 @@ export function renderMixin (Vue: Class<Component>) {\n       // last render. They need to be cloned to ensure \"freshness\" for this render.\n       for (const key in vm.$slots) {\n         const slot = vm.$slots[key]\n-        if (slot._rendered) {\n+        // _rendered is a flag added by renderSlot, but may not be present\n+        // if the slot is passed from manually written render functions\n+        if (slot._rendered || (slot[0] && slot[0].elm)) {\n           vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n         }\n       }"
            },
            {
                "commitId": "12255ff220ac8cd0171aa0ed56ce630a6843b2bd",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -17,9 +17,10 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n-  const parentVnode = vm.$vnode = vm.$options._parentVnode // the placeholder node in parent tree\n+  const options = vm.$options\n+  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context\n-  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n+  vm.$slots = resolveSlots(options._renderChildren, renderContext)\n   vm.$scopedSlots = emptyObject\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -39,12 +40,12 @@ export function initRender (vm: Component) {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, () => {\n+    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true)\n+    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true)\n   }\n }\n "
            },
            {
                "commitId": "bb1d888d44ddc39f06de5232883c8e3766a47be0",
                "additions": 1,
                "deletions": 9,
                "patch": "@@ -17,7 +17,6 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n-  vm._staticTrees = null\n   const parentVnode = vm.$vnode = vm.$options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n@@ -59,11 +58,7 @@ export function renderMixin (Vue: Class<Component>) {\n \n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n-    const {\n-      render,\n-      staticRenderFns,\n-      _parentVnode\n-    } = vm.$options\n+    const { render, _parentVnode } = vm.$options\n \n     if (vm._isMounted) {\n       // if the parent didn't update, the slot nodes will be the ones from\n@@ -78,9 +73,6 @@ export function renderMixin (Vue: Class<Component>) {\n \n     vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n \n-    if (staticRenderFns && !vm._staticTrees) {\n-      vm._staticTrees = []\n-    }\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n     vm.$vnode = _parentVnode"
            },
            {
                "commitId": "050bb33f9b02589357c037623ea8cbf8ff13555b",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -342,11 +342,15 @@ function renderStartingTag (node: VNode, context) {\n   ) {\n     markup += ` ${(scopeId: any)}`\n   }\n-  while (isDef(node)) {\n-    if (isDef(scopeId = node.context.$options._scopeId)) {\n-      markup += ` ${scopeId}`\n+  if (isDef(node.fnScopeId)) {\n+    markup += ` ${node.fnScopeId}`\n+  } else {\n+    while (isDef(node)) {\n+      if (isDef(scopeId = node.context.$options._scopeId)) {\n+        markup += ` ${scopeId}`\n+      }\n+      node = node.parent\n     }\n-    node = node.parent\n   }\n   return markup + '>'\n }"
            },
            {
                "commitId": "ea0d227d2ddfa5fc5e1112acf9cd485b4eae62cb",
                "additions": 7,
                "deletions": 38,
                "patch": "@@ -3,33 +3,18 @@\n import {\n   warn,\n   nextTick,\n-  toNumber,\n-  toString,\n-  looseEqual,\n   emptyObject,\n   handleError,\n-  looseIndexOf,\n   defineReactive\n } from '../util/index'\n \n-import VNode, {\n-  cloneVNodes,\n-  createTextVNode,\n-  createEmptyVNode\n-} from '../vdom/vnode'\n+import { createElement } from '../vdom/create-element'\n+import { installRenderHelpers } from './render-helpers/index'\n+import { resolveSlots } from './render-helpers/resolve-slots'\n+import VNode, { cloneVNodes, createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n \n-import { createElement } from '../vdom/create-element'\n-import { renderList } from './render-helpers/render-list'\n-import { renderSlot } from './render-helpers/render-slot'\n-import { resolveFilter } from './render-helpers/resolve-filter'\n-import { checkKeyCodes } from './render-helpers/check-keycodes'\n-import { bindObjectProps } from './render-helpers/bind-object-props'\n-import { renderStatic, markOnce } from './render-helpers/render-static'\n-import { bindObjectListeners } from './render-helpers/bind-object-listeners'\n-import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n-\n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n@@ -65,6 +50,9 @@ export function initRender (vm: Component) {\n }\n \n export function renderMixin (Vue: Class<Component>) {\n+  // install runtime convenience helpers\n+  installRenderHelpers(Vue.prototype)\n+\n   Vue.prototype.$nextTick = function (fn: Function) {\n     return nextTick(fn, this)\n   }\n@@ -135,23 +123,4 @@ export function renderMixin (Vue: Class<Component>) {\n     vnode.parent = _parentVnode\n     return vnode\n   }\n-\n-  // internal render helpers.\n-  // these are exposed on the instance prototype to reduce generated render\n-  // code size.\n-  Vue.prototype._o = markOnce\n-  Vue.prototype._n = toNumber\n-  Vue.prototype._s = toString\n-  Vue.prototype._l = renderList\n-  Vue.prototype._t = renderSlot\n-  Vue.prototype._q = looseEqual\n-  Vue.prototype._i = looseIndexOf\n-  Vue.prototype._m = renderStatic\n-  Vue.prototype._f = resolveFilter\n-  Vue.prototype._k = checkKeyCodes\n-  Vue.prototype._b = bindObjectProps\n-  Vue.prototype._v = createTextVNode\n-  Vue.prototype._e = createEmptyVNode\n-  Vue.prototype._u = resolveScopedSlots\n-  Vue.prototype._g = bindObjectListeners\n }"
            },
            {
                "commitId": "dff85b230abda63839ed6b80d56ccfc6068b9ae0",
                "additions": 15,
                "deletions": 10,
                "patch": "@@ -1,18 +1,14 @@\n /* @flow */\n \n-import {\n-  isDef,\n-  isUndef,\n-  isTrue,\n-  extend\n-} from 'shared/util'\n-\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n+import { generateComponentTrace } from 'core/util/debug'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n \n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n import {\n   createComponent,\n   createComponentInstanceForVnode\n@@ -26,13 +22,22 @@ const warnOnce = msg => {\n   }\n }\n \n+const onCompilationError = (err, vm) => {\n+  const trace = vm ? generateComponentTrace(vm) : ''\n+  throw new Error(`\\n\\u001b[31m${err}${trace}\\u001b[39m\\n`)\n+}\n+\n const normalizeRender = vm => {\n   const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      extend(vm.$options, ssrCompileToFunctions(template, {\n-        scopeId: _scopeId\n-      }))\n+      const compiled = ssrCompileToFunctions(template, {\n+        scopeId: _scopeId,\n+        warn: onCompilationError\n+      }, vm)\n+\n+      vm.$options.render = compiled.render\n+      vm.$options.staticRenderFns = compiled.staticRenderFns\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${"
            },
            {
                "commitId": "b3cd9bc3940eb1e01da7081450929557d9c1651e",
                "additions": 11,
                "deletions": 4,
                "patch": "@@ -101,14 +101,21 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      handleError(e, vm, `render function`)\n+      handleError(e, vm, `render`)\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n       /* istanbul ignore else */\n       if (process.env.NODE_ENV !== 'production') {\n-        vnode = vm.$options.renderError\n-          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n-          : vm._vnode\n+        if (vm.$options.renderError) {\n+          try {\n+            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+          } catch (e) {\n+            handleError(e, vm, `renderError`)\n+            vnode = vm._vnode\n+          }\n+        } else {\n+          vnode = vm._vnode\n+        }\n       } else {\n         vnode = vm._vnode\n       }"
            },
            {
                "commitId": "e76e648bc8b6a9df64f0b44716f76a1e4b259ed6",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -3,7 +3,8 @@\n import {\n   isDef,\n   isUndef,\n-  isTrue\n+  isTrue,\n+  extend\n } from 'shared/util'\n \n import { escape } from 'web/server/util'\n@@ -29,7 +30,7 @@ const normalizeRender = vm => {\n   const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+      extend(vm.$options, ssrCompileToFunctions(template, {\n         scopeId: _scopeId\n       }))\n     } else {"
            },
            {
                "commitId": "0529040c17b8632032a43d142aac88386f6b4a1f",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -78,9 +78,13 @@ export function renderMixin (Vue: Class<Component>) {\n     } = vm.$options\n \n     if (vm._isMounted) {\n-      // clone slot nodes on re-renders\n+      // if the parent didn't update, the slot nodes will be the ones from\n+      // last render. They need to be cloned to ensure \"freshness\" for this render.\n       for (const key in vm.$slots) {\n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+        const slot = vm.$slots[key]\n+        if (slot._rendered) {\n+          vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n+        }\n       }\n     }\n "
            },
            {
                "commitId": "59dbd4a414394a3ce581f9fbd9554da9af9e4b1d",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -49,17 +49,18 @@ export function initRender (vm: Component) {\n   // $attrs & $listeners are exposed for easier HOC creation.\n   // they need to be reactive so that HOCs using them are always updated\n   const parentData = parentVnode && parentVnode.data\n+\n   /* istanbul ignore else */\n   if (process.env.NODE_ENV !== 'production') {\n-    defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners, () => {\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n-    defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners, null, true)\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true)\n   }\n }\n "
            },
            {
                "commitId": "17130611261fdbab70d0e5ab45036e4b612b17fe",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -54,12 +54,12 @@ export function initRender (vm: Component) {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', parentData && parentData.on, () => {\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n-    defineReactive(vm, '$listeners', parentData && parentData.on, null, true)\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners, null, true)\n   }\n }\n "
            },
            {
                "commitId": "e0ca894dfb465106094af440667c15f7eded0a25",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -49,6 +49,7 @@ export function initRender (vm: Component) {\n   // $attrs & $listeners are exposed for easier HOC creation.\n   // they need to be reactive so that HOCs using them are always updated\n   const parentData = parentVnode && parentVnode.data\n+  /* istanbul ignore else */\n   if (process.env.NODE_ENV !== 'production') {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)"
            },
            {
                "commitId": "61187596b9af48f1cb7b1848ad3eccc02ac2509d",
                "additions": 19,
                "deletions": 1,
                "patch": "@@ -8,7 +8,8 @@ import {\n   looseEqual,\n   emptyObject,\n   handleError,\n-  looseIndexOf\n+  looseIndexOf,\n+  defineReactive\n } from '../util/index'\n \n import VNode, {\n@@ -17,6 +18,8 @@ import VNode, {\n   createEmptyVNode\n } from '../vdom/vnode'\n \n+import { isUpdatingChildComponent } from './lifecycle'\n+\n import { createElement } from '../vdom/create-element'\n import { renderList } from './render-helpers/render-list'\n import { renderSlot } from './render-helpers/render-slot'\n@@ -42,6 +45,21 @@ export function initRender (vm: Component) {\n   // normalization is always applied for the public version, used in\n   // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n+\n+  // $attrs & $listeners are exposed for easier HOC creation.\n+  // they need to be reactive so that HOCs using them are always updated\n+  const parentData = parentVnode && parentVnode.data\n+  if (process.env.NODE_ENV !== 'production') {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n+      !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n+    }, true)\n+    defineReactive(vm, '$listeners', parentData && parentData.on, () => {\n+      !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n+    }, true)\n+  } else {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n+    defineReactive(vm, '$listeners', parentData && parentData.on, null, true)\n+  }\n }\n \n export function renderMixin (Vue: Class<Component>) {"
            },
            {
                "commitId": "11614d63b7862b68b11cc45c0891437c62a832d7",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -24,6 +24,7 @@ import { resolveFilter } from './render-helpers/resolve-filter'\n import { checkKeyCodes } from './render-helpers/check-keycodes'\n import { bindObjectProps } from './render-helpers/bind-object-props'\n import { renderStatic, markOnce } from './render-helpers/render-static'\n+import { bindObjectListeners } from './render-helpers/bind-object-listeners'\n import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n \n export function initRender (vm: Component) {\n@@ -121,4 +122,5 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._v = createTextVNode\n   Vue.prototype._e = createEmptyVNode\n   Vue.prototype._u = resolveScopedSlots\n+  Vue.prototype._g = bindObjectListeners\n }"
            },
            {
                "commitId": "0cd6ef321b3168d6c46c7a870c3d2a53fd9d4bde",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -172,6 +172,9 @@ function renderAsyncComponent (node, isRoot, context) {\n   const factory = node.asyncFactory\n \n   const resolve = comp => {\n+    if (comp.__esModule && comp.default) {\n+      comp = comp.default\n+    }\n     const { data, children, tag } = node.asyncMeta\n     const nodeContext = node.asyncMeta.context\n     const resolvedNode: any = createComponent("
            },
            {
                "commitId": "c994e5cf48a912d98c1a302375bb9964dba98113",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -343,7 +343,7 @@ function renderStartingTag (node: VNode, context) {\n }\n \n export function createRenderFunction (\n-  modules: Array<Function>,\n+  modules: Array<(node: VNode) => ?string>,\n   directives: Object,\n   isUnaryTag: Function,\n   cache: any"
            },
            {
                "commitId": "9cf6646f46ef3c13236677e58e72d2c6dd5c8abf",
                "additions": 72,
                "deletions": 14,
                "patch": "@@ -1,13 +1,21 @@\n /* @flow */\n \n+import {\n+  isDef,\n+  isUndef,\n+  isTrue\n+} from 'shared/util'\n+\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n-import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue } from 'shared/util'\n+import {\n+  createComponent,\n+  createComponentInstanceForVnode\n+} from 'core/vdom/create-component'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -39,20 +47,20 @@ function renderNode (node, isRoot, context) {\n     renderStringNode(node, context)\n   } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n-  } else {\n-    if (isDef(node.tag)) {\n-      renderElement(node, isRoot, context)\n-    } else if (isTrue(node.isComment)) {\n-      context.write(\n-        `<!--${node.text}-->`,\n-        context.next\n-      )\n+  } else if (isDef(node.tag)) {\n+    renderElement(node, isRoot, context)\n+  } else if (isTrue(node.isComment)) {\n+    if (isDef(node.asyncFactory)) {\n+      // async component\n+      renderAsyncComponent(node, isRoot, context)\n     } else {\n-      context.write(\n-        node.raw ? node.text : escape(String(node.text)),\n-        context.next\n-      )\n+      context.write(`<!--${node.text}-->`, context.next)\n     }\n+  } else {\n+    context.write(\n+      node.raw ? node.text : escape(String(node.text)),\n+      context.next\n+    )\n   }\n }\n \n@@ -160,6 +168,56 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderAsyncComponent (node, isRoot, context) {\n+  const factory = node.asyncFactory\n+\n+  const resolve = comp => {\n+    const { data, children, tag } = node.asyncMeta\n+    const nodeContext = node.asyncMeta.context\n+    const resolvedNode: any = createComponent(\n+      comp,\n+      data,\n+      nodeContext,\n+      children,\n+      tag\n+    )\n+    if (resolvedNode) {\n+      renderComponent(resolvedNode, isRoot, context)\n+    } else {\n+      reject()\n+    }\n+  }\n+\n+  const reject = err => {\n+    console.error(`[vue-server-renderer] error when rendering async component:\\n`)\n+    if (err) console.error(err.stack)\n+    context.write(`<!--${node.text}-->`, context.next)\n+  }\n+\n+  if (factory.resolved) {\n+    resolve(factory.resolved)\n+    return\n+  }\n+\n+  let res\n+  try {\n+    res = factory(resolve, reject)\n+  } catch (e) {\n+    reject(e)\n+  }\n+  if (res) {\n+    if (typeof res.then === 'function') {\n+      res.then(resolve, reject).catch(reject)\n+    } else {\n+      // new syntax in 2.3\n+      const comp = res.component\n+      if (comp && typeof comp.then === 'function') {\n+        comp.then(resolve, reject).catch(reject)\n+      }\n+    }\n+  }\n+}\n+\n function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {"
            },
            {
                "commitId": "43485fbc5b779e02122c3b7fc64296a2cfee31f6",
                "additions": 27,
                "deletions": 11,
                "patch": "@@ -1,10 +1,10 @@\n /* @flow */\n \n-const { escape } = require('he')\n-\n+import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n-import { compileToFunctions } from 'web/compiler/index'\n+import { ssrCompileToFunctions } from 'web/server/compiler'\n+import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n import { isDef, isUndef, isTrue } from 'shared/util'\n@@ -17,16 +17,13 @@ const warnOnce = msg => {\n   }\n }\n \n-const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n-  const { render, template } = vm.$options\n+  const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      const renderFns = (\n-        compilationCache[template] ||\n-        (compilationCache[template] = compileToFunctions(template))\n-      )\n-      Object.assign(vm.$options, renderFns)\n+      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+        scopeId: _scopeId\n+      }))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${\n@@ -38,7 +35,9 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (isDef(node.componentOptions)) {\n+  if (node.isString) {\n+    renderStringNode(node, context)\n+  } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n@@ -161,6 +160,22 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderStringNode (el, context) {\n+  const { write, next } = context\n+  if (isUndef(el.children) || el.children.length === 0) {\n+    write(el.open + (el.close || ''), next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag: el.close, children\n+    })\n+    write(el.open, next)\n+  }\n+}\n+\n function renderElement (el, isRoot, context) {\n   const { write, next } = context\n \n@@ -289,6 +304,7 @@ export function createRenderFunction (\n       isUnaryTag, modules, directives,\n       cache\n     })\n+    installSSRHelpers(component)\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "55d8bfd6fdda38f31b17cffa07e5ab743c9f2670",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -18,10 +18,12 @@ const warnOnce = msg => {\n }\n \n const normalizeRender = vm => {\n-  const { render, template } = vm.$options\n+  const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      Object.assign(vm.$options, ssrCompileToFunctions(template))\n+      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+        scopeId: _scopeId\n+      }))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${"
            },
            {
                "commitId": "c0b9b6d8300ded5a1ceb7f190ced92e4cd3f5870",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -1,7 +1,6 @@\n /* @flow */\n \n-const { escape } = require('he')\n-\n+import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'"
            },
            {
                "commitId": "9fbca0dc792e94eb775a8f08694a04963dc20e07",
                "additions": 2,
                "deletions": 8,
                "patch": "@@ -5,15 +5,11 @@ const { escape } = require('he')\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n+import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n import { isDef, isUndef, isTrue } from 'shared/util'\n \n-import {\n-  createStringNode,\n-  createStringList\n-} from './optimizing-compiler/runtime-helpers'\n-\n let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n@@ -23,9 +19,6 @@ const warnOnce = msg => {\n }\n \n const normalizeRender = vm => {\n-  vm._ssrEscape = escape\n-  vm._ssrNode = createStringNode\n-  vm._ssrList = createStringList\n   const { render, template } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n@@ -310,6 +303,7 @@ export function createRenderFunction (\n       isUnaryTag, modules, directives,\n       cache\n     })\n+    installSSRHelpers(component)\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "5b58526a525f67ed7a3dffcaf38a51ab2affd357",
                "additions": 13,
                "deletions": 48,
                "patch": "@@ -4,10 +4,15 @@ const { escape } = require('he')\n \n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n-import { compileToFunctions } from 'web/compiler/index'\n+import { ssrCompileToFunctions } from 'web/server/compiler'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue, isObject } from 'shared/util'\n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n+import {\n+  createStringNode,\n+  createStringList\n+} from './optimizing-compiler/runtime-helpers'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -17,16 +22,14 @@ const warnOnce = msg => {\n   }\n }\n \n-const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n+  vm._ssrEscape = escape\n+  vm._ssrNode = createStringNode\n+  vm._ssrList = createStringList\n   const { render, template } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      const renderFns = (\n-        compilationCache[template] ||\n-        (compilationCache[template] = compileToFunctions(template))\n-      )\n-      Object.assign(vm.$options, renderFns)\n+      Object.assign(vm.$options, ssrCompileToFunctions(template))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${\n@@ -145,39 +148,6 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   renderComponentInner(node, isRoot, context)\n }\n \n-function StringNode (open, close, children) {\n-  this.isString = true\n-  this.open = open\n-  this.close = close\n-  this.children = children\n-}\n-\n-function createStringNode (open, close, children) {\n-  return new StringNode(open, close, children)\n-}\n-\n-function createSSRList (val, render) {\n-  let ret = ''\n-  let i, l, keys, key\n-  if (Array.isArray(val) || typeof val === 'string') {\n-    for (i = 0, l = val.length; i < l; i++) {\n-      ret += render(val[i], i)\n-    }\n-  } else if (typeof val === 'number') {\n-    for (i = 0; i < val; i++) {\n-      ret += render(i + 1, i)\n-    }\n-  } else if (isObject(val)) {\n-    keys = Object.keys(val)\n-    ret = new Array(keys.length)\n-    for (i = 0, l = keys.length; i < l; i++) {\n-      key = keys[i]\n-      ret += render(val[key], key, i)\n-    }\n-  }\n-  return ret\n-}\n-\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -187,11 +157,6 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-\n-  child._ssrNode = createStringNode\n-  child._ssrEscape = escape\n-  child._ssrList = createSSRList\n-\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({\n@@ -204,7 +169,7 @@ function renderComponentInner (node, isRoot, context) {\n function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {\n-    write(el.open() + (el.close || ''), next)\n+    write(el.open + (el.close || ''), next)\n   } else {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n@@ -213,7 +178,7 @@ function renderStringNode (el, context) {\n       total: children.length,\n       endTag: el.close, children\n     })\n-    write(el.open(), next)\n+    write(el.open, next)\n   }\n }\n "
            },
            {
                "commitId": "8efa3a2b2245d534d042f109ad7fc9311f47fa27",
                "additions": 29,
                "deletions": 4,
                "patch": "@@ -7,7 +7,7 @@ import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue } from 'shared/util'\n+import { isDef, isUndef, isTrue, isObject } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -152,11 +152,32 @@ function StringNode (open, close, children) {\n   this.children = children\n }\n \n-function createStringNode (id, children) {\n-  const { open, close } = this.$options.stringRenderFns[id]\n+function createStringNode (open, close, children) {\n   return new StringNode(open, close, children)\n }\n \n+function createSSRList (val, render) {\n+  let ret = ''\n+  let i, l, keys, key\n+  if (Array.isArray(val) || typeof val === 'string') {\n+    for (i = 0, l = val.length; i < l; i++) {\n+      ret += render(val[i], i)\n+    }\n+  } else if (typeof val === 'number') {\n+    for (i = 0; i < val; i++) {\n+      ret += render(i + 1, i)\n+    }\n+  } else if (isObject(val)) {\n+    keys = Object.keys(val)\n+    ret = new Array(keys.length)\n+    for (i = 0, l = keys.length; i < l; i++) {\n+      key = keys[i]\n+      ret += render(val[key], key, i)\n+    }\n+  }\n+  return ret\n+}\n+\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -166,7 +187,11 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  child._ss = createStringNode\n+\n+  child._ssrNode = createStringNode\n+  child._ssrEscape = escape\n+  child._ssrList = createSSRList\n+\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({"
            },
            {
                "commitId": "85e24b3b31adc29ccd18b2159e84e4413f327fd9",
                "additions": 16,
                "deletions": 3,
                "patch": "@@ -38,8 +38,8 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (node.isTextNode) {\n-    renderTextNode(node, context)\n+  if (node.isString) {\n+    renderStringNode(node, context)\n   } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n@@ -145,6 +145,18 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   renderComponentInner(node, isRoot, context)\n }\n \n+function StringNode (open, close, children) {\n+  this.isString = true\n+  this.open = open\n+  this.close = close\n+  this.children = children\n+}\n+\n+function createStringNode (id, children) {\n+  const { open, close } = this.$options.stringRenderFns[id]\n+  return new StringNode(open, close, children)\n+}\n+\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -154,6 +166,7 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n+  child._ss = createStringNode\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({\n@@ -163,7 +176,7 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n-function renderTextNode (el, context) {\n+function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {\n     write(el.open() + (el.close || ''), next)"
            },
            {
                "commitId": "da1db7af31b397eab1608217d1f6dee26f753a59",
                "additions": 19,
                "deletions": 1,
                "patch": "@@ -38,7 +38,9 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (isDef(node.componentOptions)) {\n+  if (node.isTextNode) {\n+    renderTextNode(node, context)\n+  } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n@@ -161,6 +163,22 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderTextNode (el, context) {\n+  const { write, next } = context\n+  if (isUndef(el.children) || el.children.length === 0) {\n+    write(el.open() + (el.close || ''), next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag: el.close, children\n+    })\n+    write(el.open(), next)\n+  }\n+}\n+\n function renderElement (el, isRoot, context) {\n   const { write, next } = context\n "
            },
            {
                "commitId": "b5b1ac373a8f4d464454e7770a888fdd178891c4",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -255,8 +255,9 @@ function renderStartingTag (node: VNode, context) {\n   let scopeId\n   const activeInstance = context.activeInstance\n   if (isDef(activeInstance) &&\n-      activeInstance !== node.context &&\n-      isDef(scopeId = activeInstance.$options._scopeId)) {\n+    activeInstance !== node.context &&\n+    isDef(scopeId = activeInstance.$options._scopeId)\n+  ) {\n     markup += ` ${(scopeId: any)}`\n   }\n   while (isDef(node)) {"
            },
            {
                "commitId": "8dc4215994a8d4e4046b428b837863e96275de0e",
                "additions": 19,
                "deletions": 10,
                "patch": "@@ -57,22 +57,26 @@ function renderNode (node, isRoot, context) {\n   }\n }\n \n+function registerComponentForCache (options, write) {\n+  // exposed by vue-loader, need to call this if cache hit because\n+  // component lifecycle hooks will not be called.\n+  const register = options._ssrRegister\n+  if (write.caching && isDef(register)) {\n+    write.componentBuffer[write.componentBuffer.length - 1].add(register)\n+  }\n+  return register\n+}\n+\n function renderComponent (node, isRoot, context) {\n   const { write, next, userContext } = context\n \n   // check cache hit\n   const Ctor = node.componentOptions.Ctor\n   const getKey = Ctor.options.serverCacheKey\n   const name = Ctor.options.name\n-\n-  // exposed by vue-loader, need to call this if cache hit because\n-  // component lifecycle hooks will not be called.\n-  const registerComponent = Ctor.options._ssrRegister\n-  if (write.caching && isDef(registerComponent)) {\n-    write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n-  }\n-\n   const cache = context.cache\n+  const registerComponent = registerComponentForCache(Ctor.options, write)\n+\n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n     const key = name + '::' + getKey(node.componentOptions.propsData)\n     const { has, get } = context\n@@ -147,7 +151,6 @@ function renderComponentInner (node, isRoot, context) {\n     node,\n     context.activeInstance\n   )\n-  node.ssrContext = null\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node\n@@ -159,14 +162,20 @@ function renderComponentInner (node, isRoot, context) {\n }\n \n function renderElement (el, isRoot, context) {\n+  const { write, next } = context\n+\n   if (isTrue(isRoot)) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n     el.data.attrs[SSR_ATTR] = 'true'\n   }\n+\n+  if (el.functionalOptions) {\n+    registerComponentForCache(el.functionalOptions, write)\n+  }\n+\n   const startTag = renderStartingTag(el, context)\n   const endTag = `</${el.tag}>`\n-  const { write, next } = context\n   if (context.isUnaryTag(el.tag)) {\n     write(startTag, next)\n   } else if (isUndef(el.children) || el.children.length === 0) {"
            },
            {
                "commitId": "228f0f8f3b08312d926f99b3d57757fee40e4870",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -77,9 +77,9 @@ function renderComponent (node, isRoot, context) {\n     const key = name + '::' + getKey(node.componentOptions.propsData)\n     const { has, get } = context\n     if (isDef(has)) {\n-      (has: any)(key, hit => {\n+      has(key, hit => {\n         if (hit === true && isDef(get)) {\n-          (get: any)(key, res => {\n+          get(key, res => {\n             if (isDef(registerComponent)) {\n               registerComponent(userContext)\n             }\n@@ -91,7 +91,7 @@ function renderComponent (node, isRoot, context) {\n         }\n       })\n     } else if (isDef(get)) {\n-      (get: any)(key, res => {\n+      get(key, res => {\n         if (isDef(res)) {\n           if (isDef(registerComponent)) {\n             registerComponent(userContext)"
            },
            {
                "commitId": "9ca0c35a3fadd1f97c9b5c68b7b51d4f96b40a72",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -141,10 +141,13 @@ function renderComponentWithCache (node, isRoot, key, context) {\n \n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n+  // expose userContext on vnode\n+  node.ssrContext = context.userContext\n   const child = context.activeInstance = createComponentInstanceForVnode(\n     node,\n     context.activeInstance\n   )\n+  node.ssrContext = null\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node"
            },
            {
                "commitId": "914879f1ce61a67fb7b9f367e6caaaf002c18fe3",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n-import { escape } from 'he'\n+const { escape } = require('he')\n+\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'"
            },
            {
                "commitId": "3b04547c0c4fc56d786f5d03446c81b2d7501297",
                "additions": 89,
                "deletions": 74,
                "patch": "@@ -37,89 +37,88 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  const { write, next, userContext } = context\n   if (isDef(node.componentOptions)) {\n-    // check cache hit\n-    const Ctor = node.componentOptions.Ctor\n-    const getKey = Ctor.options.serverCacheKey\n-    const name = Ctor.options.name\n-\n-    // exposed by vue-loader, need to call this if cache hit because\n-    // component lifecycle hooks will not be called.\n-    const registerComponent = Ctor.options._ssrRegister\n-    if (write.caching && isDef(registerComponent)) {\n-      write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n-    }\n-\n-    const cache = context.cache\n-    if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-      const key = name + '::' + getKey(node.componentOptions.propsData)\n-      const { has, get } = context\n-      if (isDef(has)) {\n-        (has: any)(key, hit => {\n-          if (hit === true && isDef(get)) {\n-            (get: any)(key, res => {\n-              registerComponent && registerComponent(userContext)\n-              res.components.forEach(register => register(userContext))\n-              write(res.html, next)\n-            })\n-          } else {\n-            renderComponentWithCache(node, isRoot, key, context)\n-          }\n-        })\n-      } else if (isDef(get)) {\n-        (get: any)(key, res => {\n-          if (isDef(res)) {\n-            registerComponent && registerComponent(userContext)\n-            res.components.forEach(register => register(userContext))\n-            write(res.html, next)\n-          } else {\n-            renderComponentWithCache(node, isRoot, key, context)\n-          }\n-        })\n-      }\n-    } else {\n-      if (isDef(getKey) && isUndef(cache)) {\n-        warnOnce(\n-          `[vue-server-renderer] Component ${\n-            Ctor.options.name || '(anonymous)'\n-          } implemented serverCacheKey, ` +\n-          'but no cache was provided to the renderer.'\n-        )\n-      }\n-      if (isDef(getKey) && isUndef(name)) {\n-        warnOnce(\n-          `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n-          `must also define a unique \"name\" option.`\n-        )\n-      }\n-      renderComponent(node, isRoot, context)\n-    }\n+    renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n       renderElement(node, isRoot, context)\n     } else if (isTrue(node.isComment)) {\n-      write(`<!--${node.text}-->`, next)\n+      context.write(\n+        `<!--${node.text}-->`,\n+        context.next\n+      )\n     } else {\n-      write(node.raw ? node.text : escape(String(node.text)), next)\n+      context.write(\n+        node.raw ? node.text : escape(String(node.text)),\n+        context.next\n+      )\n     }\n   }\n }\n \n function renderComponent (node, isRoot, context) {\n-  const prevActive = context.activeInstance\n-  const child = context.activeInstance = createComponentInstanceForVnode(\n-    node,\n-    context.activeInstance\n-  )\n-  normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+  const { write, next, userContext } = context\n+\n+  // check cache hit\n+  const Ctor = node.componentOptions.Ctor\n+  const getKey = Ctor.options.serverCacheKey\n+  const name = Ctor.options.name\n+\n+  // exposed by vue-loader, need to call this if cache hit because\n+  // component lifecycle hooks will not be called.\n+  const registerComponent = Ctor.options._ssrRegister\n+  if (write.caching && isDef(registerComponent)) {\n+    write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n+  }\n+\n+  const cache = context.cache\n+  if (isDef(getKey) && isDef(cache) && isDef(name)) {\n+    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const { has, get } = context\n+    if (isDef(has)) {\n+      (has: any)(key, hit => {\n+        if (hit === true && isDef(get)) {\n+          (get: any)(key, res => {\n+            if (isDef(registerComponent)) {\n+              registerComponent(userContext)\n+            }\n+            res.components.forEach(register => register(userContext))\n+            write(res.html, next)\n+          })\n+        } else {\n+          renderComponentWithCache(node, isRoot, key, context)\n+        }\n+      })\n+    } else if (isDef(get)) {\n+      (get: any)(key, res => {\n+        if (isDef(res)) {\n+          if (isDef(registerComponent)) {\n+            registerComponent(userContext)\n+          }\n+          res.components.forEach(register => register(userContext))\n+          write(res.html, next)\n+        } else {\n+          renderComponentWithCache(node, isRoot, key, context)\n+        }\n+      })\n+    }\n+  } else {\n+    if (isDef(getKey) && isUndef(cache)) {\n+      warnOnce(\n+        `[vue-server-renderer] Component ${\n+          Ctor.options.name || '(anonymous)'\n+        } implemented serverCacheKey, ` +\n+        'but no cache was provided to the renderer.'\n+      )\n+    }\n+    if (isDef(getKey) && isUndef(name)) {\n+      warnOnce(\n+        `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+        `must also define a unique \"name\" option.`\n+      )\n+    }\n+    renderComponentInner(node, isRoot, context)\n+  }\n }\n \n function renderComponentWithCache (node, isRoot, key, context) {\n@@ -136,7 +135,23 @@ function renderComponentWithCache (node, isRoot, key, context) {\n     bufferIndex,\n     componentBuffer\n   })\n-  renderComponent(node, isRoot, context)\n+  renderComponentInner(node, isRoot, context)\n+}\n+\n+function renderComponentInner (node, isRoot, context) {\n+  const prevActive = context.activeInstance\n+  const child = context.activeInstance = createComponentInstanceForVnode(\n+    node,\n+    context.activeInstance\n+  )\n+  normalizeRender(child)\n+  const childNode = child._render()\n+  childNode.parent = node\n+  context.renderStates.push({\n+    type: 'Component',\n+    prevActive\n+  })\n+  renderNode(childNode, isRoot, context)\n }\n \n function renderElement (el, isRoot, context) {\n@@ -166,7 +181,7 @@ function renderElement (el, isRoot, context) {\n \n function hasAncestorData (node: VNode) {\n   const parentNode = node.parent\n-  return parentNode && (parentNode.data || hasAncestorData(parentNode))\n+  return isDef(parentNode) && (isDef(parentNode.data) || hasAncestorData(parentNode))\n }\n \n function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {"
            },
            {
                "commitId": "4e40666d53b13c292472dfd0c678c707ad39afd9",
                "additions": 25,
                "deletions": 8,
                "patch": "@@ -37,15 +37,20 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  const { write, next } = context\n+  const { write, next, userContext } = context\n   if (isDef(node.componentOptions)) {\n     // check cache hit\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+\n     // exposed by vue-loader, need to call this if cache hit because\n     // component lifecycle hooks will not be called.\n-    const injectStyles = Ctor.options._injectStyles\n+    const registerComponent = Ctor.options._ssrRegister\n+    if (write.caching && isDef(registerComponent)) {\n+      write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n+    }\n+\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n@@ -54,8 +59,9 @@ function renderNode (node, isRoot, context) {\n         (has: any)(key, hit => {\n           if (hit === true && isDef(get)) {\n             (get: any)(key, res => {\n-              injectStyles && injectStyles.call({})\n-              write(res, next)\n+              registerComponent && registerComponent(userContext)\n+              res.components.forEach(register => register(userContext))\n+              write(res.html, next)\n             })\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n@@ -64,8 +70,9 @@ function renderNode (node, isRoot, context) {\n       } else if (isDef(get)) {\n         (get: any)(key, res => {\n           if (isDef(res)) {\n-            injectStyles && injectStyles.call({})\n-            write(res, next)\n+            registerComponent && registerComponent(userContext)\n+            res.components.forEach(register => register(userContext))\n+            write(res.html, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n@@ -101,7 +108,10 @@ function renderNode (node, isRoot, context) {\n \n function renderComponent (node, isRoot, context) {\n   const prevActive = context.activeInstance\n-  const child = context.activeInstance = createComponentInstanceForVnode(node, context.activeInstance)\n+  const child = context.activeInstance = createComponentInstanceForVnode(\n+    node,\n+    context.activeInstance\n+  )\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node\n@@ -117,9 +127,14 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   write.caching = true\n   const buffer = write.cacheBuffer\n   const bufferIndex = buffer.push('') - 1\n+  const componentBuffer = write.componentBuffer\n+  componentBuffer.push(new Set())\n   context.renderStates.push({\n     type: 'ComponentWithCache',\n-    buffer, bufferIndex, key\n+    key,\n+    buffer,\n+    bufferIndex,\n+    componentBuffer\n   })\n   renderComponent(node, isRoot, context)\n }\n@@ -234,11 +249,13 @@ export function createRenderFunction (\n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n+    userContext: ?Object,\n     done: Function\n   ) {\n     warned = Object.create(null)\n     const context = new RenderContext({\n       activeInstance: component,\n+      userContext,\n       write, done, renderNode,\n       isUnaryTag, modules, directives,\n       cache"
            },
            {
                "commitId": "37fb98827141d95dc1f60c9ea0519d6c49e61fbc",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -43,6 +43,8 @@ function renderNode (node, isRoot, context) {\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+    // exposed by vue-loader, need to call this if cache hit because\n+    // component lifecycle hooks will not be called.\n     const injectStyles = Ctor.options._injectStyles\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {"
            },
            {
                "commitId": "5ec2a7b82cf1819b5e465c4c91f303ca75561e71",
                "additions": 6,
                "deletions": 1,
                "patch": "@@ -43,21 +43,26 @@ function renderNode (node, isRoot, context) {\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+    const injectStyles = Ctor.options._injectStyles\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n       const { has, get } = context\n       if (isDef(has)) {\n         (has: any)(key, hit => {\n           if (hit === true && isDef(get)) {\n-            (get: any)(key, res => write(res, next))\n+            (get: any)(key, res => {\n+              injectStyles && injectStyles.call({})\n+              write(res, next)\n+            })\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n       } else if (isDef(get)) {\n         (get: any)(key, res => {\n           if (isDef(res)) {\n+            injectStyles && injectStyles.call({})\n             write(res, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)"
            },
            {
                "commitId": "5213ec7bbf13928a389e566e99222fa1e77d2161",
                "additions": 26,
                "deletions": 24,
                "patch": "@@ -6,6 +6,8 @@ import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n@@ -17,7 +19,7 @@ const warnOnce = msg => {\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n-  if (!render) {\n+  if (isUndef(render)) {\n     if (template) {\n       const renderFns = (\n         compilationCache[template] ||\n@@ -36,42 +38,42 @@ const normalizeRender = vm => {\n \n function renderNode (node, isRoot, context) {\n   const { write, next } = context\n-  if (node.componentOptions) {\n+  if (isDef(node.componentOptions)) {\n     // check cache hit\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n     const cache = context.cache\n-    if (getKey && cache && name) {\n+    if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n       const { has, get } = context\n-      if (has) {\n-        has(key, hit => {\n-          if (hit && get) {\n-            get(key, res => write(res, next))\n+      if (isDef(has)) {\n+        (has: any)(key, hit => {\n+          if (hit === true && isDef(get)) {\n+            (get: any)(key, res => write(res, next))\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n-      } else if (get) {\n-        get(key, res => {\n-          if (res) {\n+      } else if (isDef(get)) {\n+        (get: any)(key, res => {\n+          if (isDef(res)) {\n             write(res, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n       }\n     } else {\n-      if (getKey && !cache) {\n+      if (isDef(getKey) && isUndef(cache)) {\n         warnOnce(\n           `[vue-server-renderer] Component ${\n             Ctor.options.name || '(anonymous)'\n           } implemented serverCacheKey, ` +\n           'but no cache was provided to the renderer.'\n         )\n       }\n-      if (getKey && !name) {\n+      if (isDef(getKey) && isUndef(name)) {\n         warnOnce(\n           `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n           `must also define a unique \"name\" option.`\n@@ -80,9 +82,9 @@ function renderNode (node, isRoot, context) {\n       renderComponent(node, isRoot, context)\n     }\n   } else {\n-    if (node.tag) {\n+    if (isDef(node.tag)) {\n       renderElement(node, isRoot, context)\n-    } else if (node.isComment) {\n+    } else if (isTrue(node.isComment)) {\n       write(`<!--${node.text}-->`, next)\n     } else {\n       write(node.raw ? node.text : escape(String(node.text)), next)\n@@ -116,7 +118,7 @@ function renderComponentWithCache (node, isRoot, key, context) {\n }\n \n function renderElement (el, isRoot, context) {\n-  if (isRoot) {\n+  if (isTrue(isRoot)) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n     el.data.attrs[SSR_ATTR] = 'true'\n@@ -126,7 +128,7 @@ function renderElement (el, isRoot, context) {\n   const { write, next } = context\n   if (context.isUnaryTag(el.tag)) {\n     write(startTag, next)\n-  } else if (!el.children || !el.children.length) {\n+  } else if (isUndef(el.children) || el.children.length === 0) {\n     write(startTag + endTag, next)\n   } else {\n     const children: Array<VNode> = el.children\n@@ -149,7 +151,7 @@ function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {\n   let dir: VNodeDirective\n   let tmp\n \n-  while (node) {\n+  while (isDef(node)) {\n     if (node.data && node.data.directives) {\n       tmp = node.data.directives.find(dir => dir.name === 'show')\n       if (tmp) {\n@@ -167,10 +169,10 @@ function renderStartingTag (node: VNode, context) {\n \n   // construct synthetic data for module processing\n   // because modules like style also produce code by parent VNode data\n-  if (!node.data && hasAncestorData(node)) {\n+  if (isUndef(node.data) && hasAncestorData(node)) {\n     node.data = {}\n   }\n-  if (node.data) {\n+  if (isDef(node.data)) {\n     // check directives\n     const dirs = node.data.directives\n     if (dirs) {\n@@ -202,13 +204,13 @@ function renderStartingTag (node: VNode, context) {\n   // attach scoped CSS ID\n   let scopeId\n   const activeInstance = context.activeInstance\n-  if (activeInstance &&\n+  if (isDef(activeInstance) &&\n       activeInstance !== node.context &&\n-      (scopeId = activeInstance.$options._scopeId)) {\n-    markup += ` ${scopeId}`\n+      isDef(scopeId = activeInstance.$options._scopeId)) {\n+    markup += ` ${(scopeId: any)}`\n   }\n-  while (node) {\n-    if ((scopeId = node.context.$options._scopeId)) {\n+  while (isDef(node)) {\n+    if (isDef(scopeId = node.context.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n     node = node.parent"
            },
            {
                "commitId": "69e62f0a74b6a6baab1d66dd0433cdfb410bdae7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import { escape } from 'he'\n-import { SSR_ATTR } from 'shared/util'\n+import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'"
            },
            {
                "commitId": "e0a7c1ac68fbfa5b0d7714db549569d5cefa2bd9",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n import { escape } from 'he'\n+import { SSR_ATTR } from 'shared/util'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n@@ -118,7 +119,7 @@ function renderElement (el, isRoot, context) {\n   if (isRoot) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n-    el.data.attrs['server-rendered'] = 'true'\n+    el.data.attrs[SSR_ATTR] = 'true'\n   }\n   const startTag = renderStartingTag(el, context)\n   const endTag = `</${el.tag}>`"
            },
            {
                "commitId": "e733e5cee8585fdf4a0c0e5e77e7816befa24ad4",
                "additions": 26,
                "deletions": 2,
                "patch": "@@ -144,6 +144,22 @@ function hasAncestorData (node: VNode) {\n   return parentNode && (parentNode.data || hasAncestorData(parentNode))\n }\n \n+function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {\n+  let dir: VNodeDirective\n+  let tmp\n+\n+  while (node) {\n+    if (node.data && node.data.directives) {\n+      tmp = node.data.directives.find(dir => dir.name === 'show')\n+      if (tmp) {\n+        dir = tmp\n+      }\n+    }\n+    node = node.parent\n+  }\n+  return dir\n+}\n+\n function renderStartingTag (node: VNode, context) {\n   let markup = `<${node.tag}`\n   const { directives, modules } = context\n@@ -158,14 +174,22 @@ function renderStartingTag (node: VNode, context) {\n     const dirs = node.data.directives\n     if (dirs) {\n       for (let i = 0; i < dirs.length; i++) {\n-        const dirRenderer = directives[dirs[i].name]\n-        if (dirRenderer) {\n+        const name = dirs[i].name\n+        const dirRenderer = directives[name]\n+        if (dirRenderer && name !== 'show') {\n           // directives mutate the node's data\n           // which then gets rendered by modules\n           dirRenderer(node, dirs[i])\n         }\n       }\n     }\n+\n+    // v-show directive needs to be merged from parent to child\n+    const vshowDirectiveInfo = getVShowDirectiveInfo(node)\n+    if (vshowDirectiveInfo) {\n+      directives.show(node, vshowDirectiveInfo)\n+    }\n+\n     // apply other modules\n     for (let i = 0; i < modules.length; i++) {\n       const res = modules[i](node)"
            },
            {
                "commitId": "29f6902d1959c35eb38ef110bee6c13124903442",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -80,6 +80,7 @@ export function renderMixin (Vue: Class<Component>) {\n       handleError(e, vm, `render function`)\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n+      /* istanbul ignore else */\n       if (process.env.NODE_ENV !== 'production') {\n         vnode = vm.$options.renderError\n           ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)"
            },
            {
                "commitId": "1861ee9570730149e01f225323c3a52392e5900f",
                "additions": 9,
                "deletions": 2,
                "patch": "@@ -78,8 +78,15 @@ export function renderMixin (Vue: Class<Component>) {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n       handleError(e, vm, `render function`)\n-      // return previous vnode to prevent render error causing blank component\n-      vnode = vm._vnode\n+      // return error render result,\n+      // or previous vnode to prevent render error causing blank component\n+      if (process.env.NODE_ENV !== 'production') {\n+        vnode = vm.$options.renderError\n+          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+          : vm._vnode\n+      } else {\n+        vnode = vm._vnode\n+      }\n     }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {"
            },
            {
                "commitId": "3c0cdb553590db84a3bdb2a299947e7424e23464",
                "additions": 3,
                "deletions": 13,
                "patch": "@@ -1,16 +1,14 @@\n /* @flow */\n \n-import config from '../config'\n-\n import {\n   warn,\n   nextTick,\n   toNumber,\n   _toString,\n   looseEqual,\n   emptyObject,\n-  looseIndexOf,\n-  formatComponentName\n+  handleError,\n+  looseIndexOf\n } from '../util/index'\n \n import VNode, {\n@@ -79,15 +77,7 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      /* istanbul ignore else */\n-      if (config.errorHandler) {\n-        config.errorHandler.call(null, e, vm)\n-      } else {\n-        if (process.env.NODE_ENV !== 'production') {\n-          warn(`Error when rendering ${formatComponentName(vm)}:`)\n-        }\n-        throw e\n-      }\n+      handleError(e, vm, `render function`)\n       // return previous vnode to prevent render error causing blank component\n       vnode = vm._vnode\n     }"
            },
            {
                "commitId": "e7083d09f1eec1d8853b65720f1a8c6e0f22836e",
                "additions": 5,
                "deletions": 5,
                "patch": "@@ -8,6 +8,7 @@ import {\n   toNumber,\n   _toString,\n   looseEqual,\n+  emptyObject,\n   looseIndexOf,\n   formatComponentName\n } from '../util/index'\n@@ -21,11 +22,11 @@ import VNode, {\n import { createElement } from '../vdom/create-element'\n import { renderList } from './render-helpers/render-list'\n import { renderSlot } from './render-helpers/render-slot'\n-import { resolveSlots } from './render-helpers/resolve-slots'\n import { resolveFilter } from './render-helpers/resolve-filter'\n import { checkKeyCodes } from './render-helpers/check-keycodes'\n import { bindObjectProps } from './render-helpers/bind-object-props'\n import { renderStatic, markOnce } from './render-helpers/render-static'\n+import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n \n export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n@@ -34,7 +35,7 @@ export function initRender (vm: Component) {\n   const parentVnode = vm.$options._parentVnode\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n-  vm.$scopedSlots = {}\n+  vm.$scopedSlots = emptyObject\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n   // args order: tag, data, children, normalizationType, alwaysNormalize\n@@ -65,9 +66,7 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n-    if (_parentVnode && _parentVnode.data.scopedSlots) {\n-      vm.$scopedSlots = _parentVnode.data.scopedSlots\n-    }\n+    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n \n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n@@ -124,4 +123,5 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._b = bindObjectProps\n   Vue.prototype._v = createTextVNode\n   Vue.prototype._e = createEmptyVNode\n+  Vue.prototype._u = resolveScopedSlots\n }"
            },
            {
                "commitId": "b1e66b489144ec31ad3d4f3298e3809f00d6c4e6",
                "additions": 27,
                "deletions": 211,
                "patch": "@@ -1,28 +1,31 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, {\n-  cloneVNode,\n-  cloneVNodes,\n-  createTextVNode,\n-  createEmptyVNode\n-} from '../vdom/vnode'\n+\n import {\n   warn,\n-  extend,\n-  identity,\n-  isObject,\n-  toObject,\n   nextTick,\n   toNumber,\n   _toString,\n   looseEqual,\n   looseIndexOf,\n-  resolveAsset,\n   formatComponentName\n } from '../util/index'\n \n+import VNode, {\n+  cloneVNodes,\n+  createTextVNode,\n+  createEmptyVNode\n+} from '../vdom/vnode'\n+\n import { createElement } from '../vdom/create-element'\n+import { renderList } from './render-helpers/render-list'\n+import { renderSlot } from './render-helpers/render-slot'\n+import { resolveSlots } from './render-helpers/resolve-slots'\n+import { resolveFilter } from './render-helpers/resolve-filter'\n+import { checkKeyCodes } from './render-helpers/check-keycodes'\n+import { bindObjectProps } from './render-helpers/bind-object-props'\n+import { renderStatic, markOnce } from './render-helpers/render-static'\n \n export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n@@ -105,207 +108,20 @@ export function renderMixin (Vue: Class<Component>) {\n     return vnode\n   }\n \n-  // toString for mustaches\n-  Vue.prototype._s = _toString\n-  // convert text to vnode\n-  Vue.prototype._v = createTextVNode\n-  // number conversion\n+  // internal render helpers.\n+  // these are exposed on the instance prototype to reduce generated render\n+  // code size.\n+  Vue.prototype._o = markOnce\n   Vue.prototype._n = toNumber\n-  // empty vnode\n-  Vue.prototype._e = createEmptyVNode\n-  // loose equal\n+  Vue.prototype._s = _toString\n+  Vue.prototype._l = renderList\n+  Vue.prototype._t = renderSlot\n   Vue.prototype._q = looseEqual\n-  // loose indexOf\n   Vue.prototype._i = looseIndexOf\n-\n-  // render static tree by index\n-  Vue.prototype._m = function renderStatic (\n-    index: number,\n-    isInFor?: boolean\n-  ): VNode | Array<VNode> {\n-    let tree = this._staticTrees[index]\n-    // if has already-rendered static tree and not inside v-for,\n-    // we can reuse the same tree by doing a shallow clone.\n-    if (tree && !isInFor) {\n-      return Array.isArray(tree)\n-        ? cloneVNodes(tree)\n-        : cloneVNode(tree)\n-    }\n-    // otherwise, render a fresh tree.\n-    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n-    markStatic(tree, `__static__${index}`, false)\n-    return tree\n-  }\n-\n-  // mark node as static (v-once)\n-  Vue.prototype._o = function markOnce (\n-    tree: VNode | Array<VNode>,\n-    index: number,\n-    key: string\n-  ) {\n-    markStatic(tree, `__once__${index}${key ? `_${key}` : ``}`, true)\n-    return tree\n-  }\n-\n-  function markStatic (tree, key, isOnce) {\n-    if (Array.isArray(tree)) {\n-      for (let i = 0; i < tree.length; i++) {\n-        if (tree[i] && typeof tree[i] !== 'string') {\n-          markStaticNode(tree[i], `${key}_${i}`, isOnce)\n-        }\n-      }\n-    } else {\n-      markStaticNode(tree, key, isOnce)\n-    }\n-  }\n-\n-  function markStaticNode (node, key, isOnce) {\n-    node.isStatic = true\n-    node.key = key\n-    node.isOnce = isOnce\n-  }\n-\n-  // filter resolution helper\n-  Vue.prototype._f = function resolveFilter (id) {\n-    return resolveAsset(this.$options, 'filters', id, true) || identity\n-  }\n-\n-  // render v-for\n-  Vue.prototype._l = function renderList (\n-    val: any,\n-    render: () => VNode\n-  ): ?Array<VNode> {\n-    let ret: ?Array<VNode>, i, l, keys, key\n-    if (Array.isArray(val) || typeof val === 'string') {\n-      ret = new Array(val.length)\n-      for (i = 0, l = val.length; i < l; i++) {\n-        ret[i] = render(val[i], i)\n-      }\n-    } else if (typeof val === 'number') {\n-      ret = new Array(val)\n-      for (i = 0; i < val; i++) {\n-        ret[i] = render(i + 1, i)\n-      }\n-    } else if (isObject(val)) {\n-      keys = Object.keys(val)\n-      ret = new Array(keys.length)\n-      for (i = 0, l = keys.length; i < l; i++) {\n-        key = keys[i]\n-        ret[i] = render(val[key], key, i)\n-      }\n-    }\n-    return ret\n-  }\n-\n-  // renderSlot\n-  Vue.prototype._t = function (\n-    name: string,\n-    fallback: ?Array<VNode>,\n-    props: ?Object,\n-    bindObject: ?Object\n-  ): ?Array<VNode> {\n-    const scopedSlotFn = this.$scopedSlots[name]\n-    if (scopedSlotFn) { // scoped slot\n-      props = props || {}\n-      if (bindObject) {\n-        extend(props, bindObject)\n-      }\n-      return scopedSlotFn(props) || fallback\n-    } else {\n-      const slotNodes = this.$slots[name]\n-      // warn duplicate slot usage\n-      if (slotNodes && process.env.NODE_ENV !== 'production') {\n-        slotNodes._rendered && warn(\n-          `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n-          `- this will likely cause render errors.`,\n-          this\n-        )\n-        slotNodes._rendered = true\n-      }\n-      return slotNodes || fallback\n-    }\n-  }\n-\n-  // apply v-bind object\n-  Vue.prototype._b = function bindProps (\n-    data: any,\n-    tag: string,\n-    value: any,\n-    asProp?: boolean\n-  ): VNodeData {\n-    if (value) {\n-      if (!isObject(value)) {\n-        process.env.NODE_ENV !== 'production' && warn(\n-          'v-bind without argument expects an Object or Array value',\n-          this\n-        )\n-      } else {\n-        if (Array.isArray(value)) {\n-          value = toObject(value)\n-        }\n-        for (const key in value) {\n-          if (key === 'class' || key === 'style') {\n-            data[key] = value[key]\n-          } else {\n-            const type = data.attrs && data.attrs.type\n-            const hash = asProp || config.mustUseProp(tag, type, key)\n-              ? data.domProps || (data.domProps = {})\n-              : data.attrs || (data.attrs = {})\n-            hash[key] = value[key]\n-          }\n-        }\n-      }\n-    }\n-    return data\n-  }\n-\n-  // check v-on keyCodes\n-  Vue.prototype._k = function checkKeyCodes (\n-    eventKeyCode: number,\n-    key: string,\n-    builtInAlias: number | Array<number> | void\n-  ): boolean {\n-    const keyCodes = config.keyCodes[key] || builtInAlias\n-    if (Array.isArray(keyCodes)) {\n-      return keyCodes.indexOf(eventKeyCode) === -1\n-    } else {\n-      return keyCodes !== eventKeyCode\n-    }\n-  }\n-}\n-\n-export function resolveSlots (\n-  children: ?Array<VNode>,\n-  context: ?Component\n-): { [key: string]: Array<VNode> } {\n-  const slots = {}\n-  if (!children) {\n-    return slots\n-  }\n-  const defaultSlot = []\n-  let name, child\n-  for (let i = 0, l = children.length; i < l; i++) {\n-    child = children[i]\n-    // named slots should only be respected if the vnode was rendered in the\n-    // same context.\n-    if ((child.context === context || child.functionalContext === context) &&\n-        child.data && (name = child.data.slot)) {\n-      const slot = (slots[name] || (slots[name] = []))\n-      if (child.tag === 'template') {\n-        slot.push.apply(slot, child.children)\n-      } else {\n-        slot.push(child)\n-      }\n-    } else {\n-      defaultSlot.push(child)\n-    }\n-  }\n-  // ignore single whitespace\n-  if (defaultSlot.length && !(\n-    defaultSlot.length === 1 &&\n-    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n-  )) {\n-    slots.default = defaultSlot\n-  }\n-  return slots\n+  Vue.prototype._m = renderStatic\n+  Vue.prototype._f = resolveFilter\n+  Vue.prototype._k = checkKeyCodes\n+  Vue.prototype._b = bindObjectProps\n+  Vue.prototype._v = createTextVNode\n+  Vue.prototype._e = createEmptyVNode\n }"
            },
            {
                "commitId": "05b070fd41b61a953388a34ff3374f301a9f7540",
                "additions": 5,
                "deletions": 68,
                "patch": "@@ -1,9 +1,9 @@\n /* @flow */\n \n import { escape } from 'he'\n+import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n-import { noop } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -13,17 +13,6 @@ const warnOnce = msg => {\n   }\n }\n \n-const normalizeAsync = (cache, method) => {\n-  const fn = cache[method]\n-  if (!fn) {\n-    return\n-  } else if (fn.length > 1) {\n-    return (key, cb) => fn.call(cache, key, cb)\n-  } else {\n-    return (key, cb) => cb(fn.call(cache, key))\n-  }\n-}\n-\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n@@ -202,76 +191,24 @@ function renderStartingTag (node: VNode, context) {\n   return markup + '>'\n }\n \n-const nextFactory = context => function next () {\n-  const lastState = context.renderStates.pop()\n-  if (!lastState) {\n-    context.done()\n-    // cleanup context, avoid leakage\n-    context = (null: any)\n-    return\n-  }\n-  switch (lastState.type) {\n-    case 'Component':\n-      context.activeInstance = lastState.prevActive\n-      next()\n-      break\n-    case 'Element':\n-      const { children, total } = lastState\n-      const rendered = lastState.rendered++\n-      if (rendered < total) {\n-        context.renderStates.push(lastState)\n-        renderNode(children[rendered], false, context)\n-      } else {\n-        context.write(lastState.endTag, next)\n-      }\n-      break\n-    case 'ComponentWithCache':\n-      const { buffer, bufferIndex, key } = lastState\n-      const result = buffer[bufferIndex]\n-      context.cache.set(key, result)\n-      if (bufferIndex === 0) {\n-        // this is a top-level cached component,\n-        // exit caching mode.\n-        context.write.caching = false\n-      } else {\n-        // parent component is also being cached,\n-        // merge self into parent's result\n-        buffer[bufferIndex - 1] += result\n-      }\n-      buffer.length = bufferIndex\n-      next()\n-      break\n-  }\n-}\n-\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n   isUnaryTag: Function,\n   cache: any\n ) {\n-  if (cache && (!cache.get || !cache.set)) {\n-    throw new Error('renderer cache must implement at least get & set.')\n-  }\n-\n-  const get = cache && normalizeAsync(cache, 'get')\n-  const has = cache && normalizeAsync(cache, 'has')\n-\n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n     warned = Object.create(null)\n-    const context = {\n+    const context = new RenderContext({\n       activeInstance: component,\n-      renderStates: [],\n-      next: noop, // for flow\n-      write, done,\n+      write, done, renderNode,\n       isUnaryTag, modules, directives,\n-      cache, get, has\n-    }\n-    context.next = nextFactory(context)\n+      cache\n+    })\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "08bd81f8c0bd39816b5b509c5132a12188b412d7",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -247,7 +247,8 @@ export function renderMixin (Vue: Class<Component>) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n           } else {\n-            const hash = asProp || config.mustUseProp(tag, key)\n+            const type = data.attrs && data.attrs.type\n+            const hash = asProp || config.mustUseProp(tag, type, key)\n               ? data.domProps || (data.domProps = {})\n               : data.attrs || (data.attrs = {})\n             hash[key] = value[key]"
            },
            {
                "commitId": "7131bc48155fb5224f4d6f0fb1c4b7eed6a79db4",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -40,9 +40,6 @@ export function initRender (vm: Component) {\n   // normalization is always applied for the public version, used in\n   // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n-  if (vm.$options.el) {\n-    vm.$mount(vm.$options.el)\n-  }\n }\n \n export function renderMixin (Vue: Class<Component>) {"
            },
            {
                "commitId": "b60182d996ed1e976ce1697a3017cb702ddc0920",
                "additions": 0,
                "deletions": 21,
                "patch": "@@ -262,7 +262,6 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n-    checkBuild(component)\n     warned = Object.create(null)\n     const context = {\n       activeInstance: component,\n@@ -277,23 +276,3 @@ export function createRenderFunction (\n     renderNode(component._render(), true, context)\n   }\n }\n-\n-function checkBuild (component) {\n-  let Vue: any = component.constructor\n-  while (Vue.super) {\n-    Vue = Vue.super\n-  }\n-  if (Vue.compile && Vue.config.devtools !== false) {\n-    console.error(\n-      red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n-      `server-side rendering. It is recommended to use the CommonJS build ` +\n-      `(vue/dist/vue.common.js) instead so that the code can run in ` +\n-      `production mode by setting NODE_ENV=production. The server renderer ` +\n-      `supports the template option regardless of what build you are using.\\n`)\n-    )\n-  }\n-}\n-\n-function red (str) {\n-  return '\\u001B[1m\\u001B[31m' + str + '\\u001B[39m\\u001B[22m'\n-}"
            },
            {
                "commitId": "0eb8cdc7f7cff484ebe0b12a781a4ab020f82b4a",
                "additions": 8,
                "deletions": 2,
                "patch": "@@ -9,6 +9,7 @@ import VNode, {\n } from '../vdom/vnode'\n import {\n   warn,\n+  extend,\n   identity,\n   isObject,\n   toObject,\n@@ -203,11 +204,16 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._t = function (\n     name: string,\n     fallback: ?Array<VNode>,\n-    props: ?Object\n+    props: ?Object,\n+    bindObject: ?Object\n   ): ?Array<VNode> {\n     const scopedSlotFn = this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n-      return scopedSlotFn(props || {}) || fallback\n+      props = props || {}\n+      if (bindObject) {\n+        extend(props, bindObject)\n+      }\n+      return scopedSlotFn(props) || fallback\n     } else {\n       const slotNodes = this.$slots[name]\n       // warn duplicate slot usage"
            },
            {
                "commitId": "974247fd8e6b57840c9b7686964ddb38bc6affc8",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -178,7 +178,7 @@ export function renderMixin (Vue: Class<Component>) {\n     render: () => VNode\n   ): ?Array<VNode> {\n     let ret: ?Array<VNode>, i, l, keys, key\n-    if (Array.isArray(val)) {\n+    if (Array.isArray(val) || typeof val === 'string') {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n         ret[i] = render(val[i], i)"
            },
            {
                "commitId": "f1c38674f28116e1e335873ecbc6716fb70448a3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -33,7 +33,7 @@ export function initRender (vm: Component) {\n   vm.$scopedSlots = {}\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  // args order: tag, data, children, needNormalization, alwaysNormalize\n+  // args order: tag, data, children, normalizationType, alwaysNormalize\n   // internal version is used by render functions compiled from templates\n   vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n   // normalization is always applied for the public version, used in"
            },
            {
                "commitId": "5fa45c3bf80100469039d3b9c160ddfdaf90f8ec",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -279,11 +279,11 @@ export function createRenderFunction (\n }\n \n function checkBuild (component) {\n-  let Vue = component.constructor\n+  let Vue: any = component.constructor\n   while (Vue.super) {\n     Vue = Vue.super\n   }\n-  if (Vue.compile) {\n+  if (Vue.compile && Vue.config.devtools !== false) {\n     console.error(\n       red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n       `server-side rendering. It is recommended to use the CommonJS build ` +"
            },
            {
                "commitId": "8567e7dcedfdf0d8fb21e2c2f7ee935229b6a9e9",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -9,6 +9,7 @@ import VNode, {\n } from '../vdom/vnode'\n import {\n   warn,\n+  identity,\n   isObject,\n   toObject,\n   nextTick,\n@@ -167,7 +168,6 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // filter resolution helper\n-  const identity = _ => _\n   Vue.prototype._f = function resolveFilter (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }"
            },
            {
                "commitId": "4b51ad048306367a6fb6fbee7445e086d855f31e",
                "additions": 5,
                "deletions": 3,
                "patch": "@@ -32,9 +32,11 @@ export function initRender (vm: Component) {\n   vm.$scopedSlots = {}\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  // args order: tag, data, children, needNormalization\n-  // the needNormalization flag is disabled for the public version.\n-  vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  // args order: tag, data, children, needNormalization, alwaysNormalize\n+  // internal version is used by render functions compiled from templates\n+  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  // normalization is always applied for the public version, used in\n+  // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)"
            },
            {
                "commitId": "207c18c47f8c94f6d92675b28bc67511b7897246",
                "additions": 3,
                "deletions": 5,
                "patch": "@@ -1,7 +1,6 @@\n /* @flow */\n \n import config from '../config'\n-import { normalizeChildren } from '../vdom/helpers/index'\n import VNode, {\n   cloneVNode,\n   cloneVNodes,\n@@ -34,7 +33,7 @@ export function initRender (vm: Component) {\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n   // args order: tag, data, children, needNormalization\n-  // the needNormalization flag is flipped and defaults to true for the public version.\n+  // the needNormalization flag is disabled for the public version.\n   vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n@@ -270,14 +269,13 @@ export function renderMixin (Vue: Class<Component>) {\n }\n \n export function resolveSlots (\n-  renderChildren: ?VNodeChildren,\n+  children: ?Array<VNode>,\n   context: ?Component\n ): { [key: string]: Array<VNode> } {\n   const slots = {}\n-  if (!renderChildren) {\n+  if (!children) {\n     return slots\n   }\n-  const children = normalizeChildren(renderChildren) || []\n   const defaultSlot = []\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {"
            },
            {
                "commitId": "79e1058799dcde0b7e341ef44b590ecbf1e3a722",
                "additions": 23,
                "deletions": 7,
                "patch": "@@ -1,11 +1,24 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { createEmptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n+import VNode, {\n+  cloneVNode,\n+  cloneVNodes,\n+  createTextVNode,\n+  createEmptyVNode\n+} from '../vdom/vnode'\n import {\n-  warn, formatComponentName, bind, isObject, toObject,\n-  nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n+  warn,\n+  isObject,\n+  toObject,\n+  nextTick,\n+  toNumber,\n+  _toString,\n+  looseEqual,\n+  looseIndexOf,\n+  resolveAsset,\n+  formatComponentName\n } from '../util/index'\n \n import { createElement } from '../vdom/create-element'\n@@ -18,9 +31,12 @@ export function initRender (vm: Component) {\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n   vm.$scopedSlots = {}\n-  // bind the public createElement fn to this instance\n+  // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(createElement, vm)\n+  // args order: tag, data, children, needNormalization\n+  // the needNormalization flag is flipped and defaults to true for the public version.\n+  vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -89,10 +105,10 @@ export function renderMixin (Vue: Class<Component>) {\n     return vnode\n   }\n \n-  // shorthands used in render functions\n-  Vue.prototype._h = createElement\n   // toString for mustaches\n   Vue.prototype._s = _toString\n+  // convert text to vnode\n+  Vue.prototype._v = createTextVNode\n   // number conversion\n   Vue.prototype._n = toNumber\n   // empty vnode"
            },
            {
                "commitId": "7431e4d16c92862ac74fdb3053de9295c809b586",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n+import VNode, { createEmptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n@@ -82,7 +82,7 @@ export function renderMixin (Vue: Class<Component>) {\n           vm\n         )\n       }\n-      vnode = emptyVNode()\n+      vnode = createEmptyVNode()\n     }\n     // set parent\n     vnode.parent = _parentVnode\n@@ -96,7 +96,7 @@ export function renderMixin (Vue: Class<Component>) {\n   // number conversion\n   Vue.prototype._n = toNumber\n   // empty vnode\n-  Vue.prototype._e = emptyVNode\n+  Vue.prototype._e = createEmptyVNode\n   // loose equal\n   Vue.prototype._q = looseEqual\n   // loose indexOf"
            },
            {
                "commitId": "e8d6bd9dc73cacbc665ce132d81a7b629bef764b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -242,9 +242,9 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._k = function checkKeyCodes (\n     eventKeyCode: number,\n     key: string,\n-    buildinAlias: number | Array<number> | void\n+    builtInAlias: number | Array<number> | void\n   ): boolean {\n-    const keyCodes = config.keyCodes[key] || buildinAlias\n+    const keyCodes = config.keyCodes[key] || builtInAlias\n     if (Array.isArray(keyCodes)) {\n       return keyCodes.indexOf(eventKeyCode) === -1\n     } else {"
            },
            {
                "commitId": "6ea9a4db4221b7264ee8ebad9cef4f076762d697",
                "additions": 12,
                "deletions": 3,
                "patch": "@@ -238,9 +238,18 @@ export function renderMixin (Vue: Class<Component>) {\n     return data\n   }\n \n-  // expose v-on keyCodes\n-  Vue.prototype._k = function getKeyCodes (key: string): any {\n-    return config.keyCodes[key]\n+  // check v-on keyCodes\n+  Vue.prototype._k = function checkKeyCodes (\n+    eventKeyCode: number,\n+    key: string,\n+    buildinAlias: number | Array<number> | void\n+  ): boolean {\n+    const keyCodes = config.keyCodes[key] || buildinAlias\n+    if (Array.isArray(keyCodes)) {\n+      return keyCodes.indexOf(eventKeyCode) === -1\n+    } else {\n+      return keyCodes !== eventKeyCode\n+    }\n   }\n }\n "
            },
            {
                "commitId": "c7147e3b60cb8b4147f0132f63b70a527a47b2b6",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -257,7 +257,6 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    debugger\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n     if ((child.context === context || child.functionalContext === context) &&"
            },
            {
                "commitId": "326aef4a6ab84d044d9ed807c5dc4326249aa856",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -14,8 +14,9 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n-  vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n+  const parentVnode = vm.$options._parentVnode\n+  const renderContext = parentVnode && parentVnode.context\n+  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n   vm.$scopedSlots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -256,6 +257,7 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n+    debugger\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n     if ((child.context === context || child.functionalContext === context) &&"
            },
            {
                "commitId": "16e3dae2455aa0f2955d95698c7dddb5b4c9440d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n import {\n-  warn, formatComponentName, bind, isObject, toObject, isServerRendering,\n+  warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n } from '../util/index'\n "
            },
            {
                "commitId": "a52a094befb0b1f660771db04deebaa37555e84e",
                "additions": 3,
                "deletions": 7,
                "patch": "@@ -60,18 +60,14 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      if (process.env.NODE_ENV !== 'production') {\n-        warn(`Error when rendering ${formatComponentName(vm)}:`)\n-      }\n       /* istanbul ignore else */\n       if (config.errorHandler) {\n         config.errorHandler.call(null, e, vm)\n       } else {\n-        if (isServerRendering()) {\n-          throw e\n-        } else {\n-          console.error(e)\n+        if (process.env.NODE_ENV !== 'production') {\n+          warn(`Error when rendering ${formatComponentName(vm)}:`)\n         }\n+        throw e\n       }\n       // return previous vnode to prevent render error causing blank component\n       vnode = vm._vnode"
            },
            {
                "commitId": "aa5f5d1198db2c9480a317b1db48c470c850949d",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -16,7 +16,7 @@ export function initRender (vm: Component) {\n   vm._staticTrees = null\n   vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n-  vm.$scopedSlots = null\n+  vm.$scopedSlots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -45,7 +45,7 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n-    if (_parentVnode) {\n+    if (_parentVnode && _parentVnode.data.scopedSlots) {\n       vm.$scopedSlots = _parentVnode.data.scopedSlots\n     }\n \n@@ -191,7 +191,7 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n+    const scopedSlotFn = this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n       return scopedSlotFn(props || {}) || fallback\n     } else {"
            },
            {
                "commitId": "303378f85b26934396e2f6dc0973f6982da2beb1",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -191,9 +191,6 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    if (process.env.NODE_ENV !== 'production' && name === 'default' && props) {\n-      warn(`Scoped slots must be named`, this)\n-    }\n     const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n       return scopedSlotFn(props || {}) || fallback"
            },
            {
                "commitId": "7f36f99f6c9bf6130f298fb79538f09fce7ef2fc",
                "additions": 7,
                "deletions": 6,
                "patch": "@@ -191,12 +191,13 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    if (props) { // scoped slot\n-      const scopedSlotFn = this.$scopedSlots[name]\n-      return scopedSlotFn\n-        ? scopedSlotFn(props) || fallback\n-        : fallback\n-    } else { // static slot\n+    if (process.env.NODE_ENV !== 'production' && name === 'default' && props) {\n+      warn(`Scoped slots must be named`, this)\n+    }\n+    const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n+    if (scopedSlotFn) { // scoped slot\n+      return scopedSlotFn(props || {}) || fallback\n+    } else {\n       const slotNodes = this.$slots[name]\n       // warn duplicate slot usage\n       if (slotNodes && process.env.NODE_ENV !== 'production') {"
            },
            {
                "commitId": "9ddbbcc340aa092699aca349492ffd50e18f1ba4",
                "additions": 24,
                "deletions": 11,
                "patch": "@@ -16,6 +16,7 @@ export function initRender (vm: Component) {\n   vm._staticTrees = null\n   vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n+  vm.$scopedSlots = null\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -44,6 +45,10 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n+    if (_parentVnode) {\n+      vm.$scopedSlots = _parentVnode.data.scopedSlots\n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -183,19 +188,27 @@ export function renderMixin (Vue: Class<Component>) {\n   // renderSlot\n   Vue.prototype._t = function (\n     name: string,\n-    fallback: ?Array<VNode>\n+    fallback: ?Array<VNode>,\n+    props: ?Object\n   ): ?Array<VNode> {\n-    const slotNodes = this.$slots[name]\n-    // warn duplicate slot usage\n-    if (slotNodes && process.env.NODE_ENV !== 'production') {\n-      slotNodes._rendered && warn(\n-        `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n-        `- this will likely cause render errors.`,\n-        this\n-      )\n-      slotNodes._rendered = true\n+    if (props) { // scoped slot\n+      const scopedSlotFn = this.$scopedSlots[name]\n+      return scopedSlotFn\n+        ? scopedSlotFn(props) || fallback\n+        : fallback\n+    } else { // static slot\n+      const slotNodes = this.$slots[name]\n+      // warn duplicate slot usage\n+      if (slotNodes && process.env.NODE_ENV !== 'production') {\n+        slotNodes._rendered && warn(\n+          `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n+          `- this will likely cause render errors.`,\n+          this\n+        )\n+        slotNodes._rendered = true\n+      }\n+      return slotNodes || fallback\n     }\n-    return slotNodes || fallback\n   }\n \n   // apply v-bind object"
            },
            {
                "commitId": "2dc2d062b1af826add087d832a3f68806e2ef2b1",
                "additions": 21,
                "deletions": 0,
                "patch": "@@ -262,6 +262,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    checkBuild(component)\n     warned = Object.create(null)\n     const context = {\n       activeInstance: component,\n@@ -276,3 +277,23 @@ export function createRenderFunction (\n     renderNode(component._render(), true, context)\n   }\n }\n+\n+function checkBuild (component) {\n+  let Vue = component.constructor\n+  while (Vue.super) {\n+    Vue = Vue.super\n+  }\n+  if (Vue.compile) {\n+    console.error(\n+      red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n+      `server-side rendering. It is recommended to use the CommonJS build ` +\n+      `(vue/dist/vue.common.js) instead so that the code can run in ` +\n+      `production mode by setting NODE_ENV=production. The server renderer ` +\n+      `supports the template option regardless of what build you are using.\\n`)\n+    )\n+  }\n+}\n+\n+function red (str) {\n+  return '\\u001B[1m\\u001B[31m' + str + '\\u001B[39m\\u001B[22m'\n+}"
            },
            {
                "commitId": "8bf26536d3b4b5d139070e1730fed7f9df59c9db",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -26,7 +26,7 @@ export function initRender (vm: Component) {\n \n export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype.$nextTick = function (fn: Function) {\n-    nextTick(fn, this)\n+    return nextTick(fn, this)\n   }\n \n   Vue.prototype._render = function (): VNode {"
            },
            {
                "commitId": "9a742cb423690acb29990bd38f5c17f7b21f12f8",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -201,6 +201,7 @@ export function renderMixin (Vue: Class<Component>) {\n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n     data: any,\n+    tag: string,\n     value: any,\n     asProp?: boolean\n   ): VNodeData {\n@@ -218,7 +219,7 @@ export function renderMixin (Vue: Class<Component>) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n           } else {\n-            const hash = asProp || config.mustUseProp(key)\n+            const hash = asProp || config.mustUseProp(tag, key)\n               ? data.domProps || (data.domProps = {})\n               : data.attrs || (data.attrs = {})\n             hash[key] = value[key]"
            },
            {
                "commitId": "6e3e989a90e8685c2cf0c029fa9c657354762b04",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -65,7 +65,7 @@ export function renderMixin (Vue: Class<Component>) {\n         if (config._isServer) {\n           throw e\n         } else {\n-          setTimeout(() => { throw e }, 0)\n+          console.error(e)\n         }\n       }\n       // return previous vnode to prevent render error causing blank component"
            },
            {
                "commitId": "240df147f11824db5811d23c8704225aa586b96b",
                "additions": 11,
                "deletions": 0,
                "patch": "@@ -150,9 +150,20 @@ function renderElement (el, isRoot, context) {\n   }\n }\n \n+function hasAncestorData (node: VNode) {\n+  const parentNode = node.parent\n+  return parentNode && (parentNode.data || hasAncestorData(parentNode))\n+}\n+\n function renderStartingTag (node: VNode, context) {\n   let markup = `<${node.tag}`\n   const { directives, modules } = context\n+\n+  // construct synthetic data for module processing\n+  // because modules like style also produce code by parent VNode data\n+  if (!node.data && hasAncestorData(node)) {\n+    node.data = {}\n+  }\n   if (node.data) {\n     // check directives\n     const dirs = node.data.directives"
            },
            {
                "commitId": "ec824be88e9bc71b31e5c4a43f80d921674dca66",
                "additions": 24,
                "deletions": 6,
                "patch": "@@ -115,18 +115,36 @@ export function renderMixin (Vue: Class<Component>) {\n     }\n     // otherwise, render a fresh tree.\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n+    markStatic(tree, `__static__${index}`, false)\n+    return tree\n+  }\n+\n+  // mark node as static (v-once)\n+  Vue.prototype._o = function markOnce (\n+    tree: VNode | Array<VNode>,\n+    index: number,\n+    key: string\n+  ) {\n+    markStatic(tree, `__once__${index}${key ? `_${key}` : ``}`, true)\n+    return tree\n+  }\n+\n+  function markStatic (tree, key, isOnce) {\n     if (Array.isArray(tree)) {\n       for (let i = 0; i < tree.length; i++) {\n-        if (typeof tree[i] !== 'string') {\n-          tree[i].isStatic = true\n-          tree[i].key = `__static__${index}_${i}`\n+        if (tree[i] && typeof tree[i] !== 'string') {\n+          markStaticNode(tree[i], `${key}_${i}`, isOnce)\n         }\n       }\n     } else {\n-      tree.isStatic = true\n-      tree.key = `__static__${index}`\n+      markStaticNode(tree, key, isOnce)\n     }\n-    return tree\n+  }\n+\n+  function markStaticNode (node, key, isOnce) {\n+    node.isStatic = true\n+    node.key = key\n+    node.isOnce = isOnce\n   }\n \n   // filter resolution helper"
            },
            {
                "commitId": "2ac581bb7f34b1ef0f35c3e6945acd630a92453e",
                "additions": 186,
                "deletions": 155,
                "patch": "@@ -3,6 +3,7 @@\n import { escape } from 'he'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n+import { noop } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -43,194 +44,224 @@ const normalizeRender = vm => {\n   }\n }\n \n-export function createRenderFunction (\n-  modules: Array<Function>,\n-  directives: Object,\n-  isUnaryTag: Function,\n-  cache: any\n-) {\n-  if (cache && (!cache.get || !cache.set)) {\n-    throw new Error('renderer cache must implement at least get & set.')\n+function renderNode (node, isRoot, context) {\n+  const { write, next } = context\n+  if (node.componentOptions) {\n+    // check cache hit\n+    const Ctor = node.componentOptions.Ctor\n+    const getKey = Ctor.options.serverCacheKey\n+    const name = Ctor.options.name\n+    const cache = context.cache\n+    if (getKey && cache && name) {\n+      const key = name + '::' + getKey(node.componentOptions.propsData)\n+      const { has, get } = context\n+      if (has) {\n+        has(key, hit => {\n+          if (hit && get) {\n+            get(key, res => write(res, next))\n+          } else {\n+            renderComponentWithCache(node, isRoot, key, context)\n+          }\n+        })\n+      } else if (get) {\n+        get(key, res => {\n+          if (res) {\n+            write(res, next)\n+          } else {\n+            renderComponentWithCache(node, isRoot, key, context)\n+          }\n+        })\n+      }\n+    } else {\n+      if (getKey && !cache) {\n+        warnOnce(\n+          `[vue-server-renderer] Component ${\n+            Ctor.options.name || '(anonymous)'\n+          } implemented serverCacheKey, ` +\n+          'but no cache was provided to the renderer.'\n+        )\n+      }\n+      if (getKey && !name) {\n+        warnOnce(\n+          `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+          `must also define a unique \"name\" option.`\n+        )\n+      }\n+      renderComponent(node, isRoot, context)\n+    }\n+  } else {\n+    if (node.tag) {\n+      renderElement(node, isRoot, context)\n+    } else if (node.isComment) {\n+      write(`<!--${node.text}-->`, next)\n+    } else {\n+      write(node.raw ? node.text : escape(String(node.text)), next)\n+    }\n   }\n+}\n \n-  const get = cache && normalizeAsync(cache, 'get')\n-  const has = cache && normalizeAsync(cache, 'has')\n+function renderComponent (node, isRoot, context) {\n+  const prevActive = context.activeInstance\n+  const child = context.activeInstance = createComponentInstanceForVnode(node, context.activeInstance)\n+  normalizeRender(child)\n+  const childNode = child._render()\n+  childNode.parent = node\n+  context.renderStates.push({\n+    type: 'Component',\n+    prevActive\n+  })\n+  renderNode(childNode, isRoot, context)\n+}\n \n-  // used to track and apply scope ids\n-  let activeInstance: any\n+function renderComponentWithCache (node, isRoot, key, context) {\n+  const write = context.write\n+  write.caching = true\n+  const buffer = write.cacheBuffer\n+  const bufferIndex = buffer.push('') - 1\n+  context.renderStates.push({\n+    type: 'ComponentWithCache',\n+    buffer, bufferIndex, key\n+  })\n+  renderComponent(node, isRoot, context)\n+}\n \n-  function renderNode (\n-    node: VNode,\n-    write: Function,\n-    next: Function,\n-    isRoot: boolean\n-  ) {\n-    if (node.componentOptions) {\n-      // check cache hit\n-      const Ctor = node.componentOptions.Ctor\n-      const getKey = Ctor.options.serverCacheKey\n-      const name = Ctor.options.name\n-      if (getKey && cache && name) {\n-        const key = name + '::' + getKey(node.componentOptions.propsData)\n-        if (has) {\n-          has(key, hit => {\n-            if (hit && get) {\n-              get(key, res => write(res, next))\n-            } else {\n-              renderComponentWithCache(node, write, next, isRoot, cache, key)\n-            }\n-          })\n-        } else if (get) {\n-          get(key, res => {\n-            if (res) {\n-              write(res, next)\n-            } else {\n-              renderComponentWithCache(node, write, next, isRoot, cache, key)\n-            }\n-          })\n-        }\n-      } else {\n-        if (getKey && !cache) {\n-          warnOnce(\n-            `[vue-server-renderer] Component ${\n-              Ctor.options.name || '(anonymous)'\n-            } implemented serverCacheKey, ` +\n-            'but no cache was provided to the renderer.'\n-          )\n-        }\n-        if (getKey && !name) {\n-          warnOnce(\n-            `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n-            `must also define a unique \"name\" option.`\n-          )\n+function renderElement (el, isRoot, context) {\n+  if (isRoot) {\n+    if (!el.data) el.data = {}\n+    if (!el.data.attrs) el.data.attrs = {}\n+    el.data.attrs['server-rendered'] = 'true'\n+  }\n+  const startTag = renderStartingTag(el, context)\n+  const endTag = `</${el.tag}>`\n+  const { write, next } = context\n+  if (context.isUnaryTag(el.tag)) {\n+    write(startTag, next)\n+  } else if (!el.children || !el.children.length) {\n+    write(startTag + endTag, next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag, children\n+    })\n+    write(startTag, next)\n+  }\n+}\n+\n+function renderStartingTag (node: VNode, context) {\n+  let markup = `<${node.tag}`\n+  const { directives, modules } = context\n+  if (node.data) {\n+    // check directives\n+    const dirs = node.data.directives\n+    if (dirs) {\n+      for (let i = 0; i < dirs.length; i++) {\n+        const dirRenderer = directives[dirs[i].name]\n+        if (dirRenderer) {\n+          // directives mutate the node's data\n+          // which then gets rendered by modules\n+          dirRenderer(node, dirs[i])\n         }\n-        renderComponent(node, write, next, isRoot)\n       }\n-    } else {\n-      if (node.tag) {\n-        renderElement(node, write, next, isRoot)\n-      } else if (node.isComment) {\n-        write(`<!--${node.text}-->`, next)\n-      } else {\n-        write(node.raw ? node.text : escape(String(node.text)), next)\n+    }\n+    // apply other modules\n+    for (let i = 0; i < modules.length; i++) {\n+      const res = modules[i](node)\n+      if (res) {\n+        markup += res\n       }\n     }\n   }\n-\n-  function renderComponent (node, write, next, isRoot) {\n-    const prevActive = activeInstance\n-    const child = activeInstance = createComponentInstanceForVnode(node, activeInstance)\n-    normalizeRender(child)\n-    const childNode = child._render()\n-    childNode.parent = node\n-    renderNode(childNode, write, () => {\n-      activeInstance = prevActive\n-      next()\n-    }, isRoot)\n+  // attach scoped CSS ID\n+  let scopeId\n+  const activeInstance = context.activeInstance\n+  if (activeInstance &&\n+      activeInstance !== node.context &&\n+      (scopeId = activeInstance.$options._scopeId)) {\n+    markup += ` ${scopeId}`\n   }\n+  while (node) {\n+    if ((scopeId = node.context.$options._scopeId)) {\n+      markup += ` ${scopeId}`\n+    }\n+    node = node.parent\n+  }\n+  return markup + '>'\n+}\n \n-  function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n-    write.caching = true\n-    const buffer = write.cacheBuffer\n-    const bufferIndex = buffer.push('') - 1\n-    renderComponent(node, write, () => {\n+const nextFactory = context => function next () {\n+  const lastState = context.renderStates.pop()\n+  if (!lastState) {\n+    context.done()\n+    // cleanup context, avoid leakage\n+    context = (null: any)\n+    return\n+  }\n+  switch (lastState.type) {\n+    case 'Component':\n+      context.activeInstance = lastState.prevActive\n+      next()\n+      break\n+    case 'Element':\n+      const { children, total } = lastState\n+      const rendered = lastState.rendered++\n+      if (rendered < total) {\n+        context.renderStates.push(lastState)\n+        renderNode(children[rendered], false, context)\n+      } else {\n+        context.write(lastState.endTag, next)\n+      }\n+      break\n+    case 'ComponentWithCache':\n+      const { buffer, bufferIndex, key } = lastState\n       const result = buffer[bufferIndex]\n-      cache.set(key, result)\n+      context.cache.set(key, result)\n       if (bufferIndex === 0) {\n         // this is a top-level cached component,\n         // exit caching mode.\n-        write.caching = false\n+        context.write.caching = false\n       } else {\n         // parent component is also being cached,\n         // merge self into parent's result\n         buffer[bufferIndex - 1] += result\n       }\n       buffer.length = bufferIndex\n       next()\n-    }, isRoot)\n+      break\n   }\n+}\n \n-  function renderElement (el, write, next, isRoot) {\n-    if (isRoot) {\n-      if (!el.data) el.data = {}\n-      if (!el.data.attrs) el.data.attrs = {}\n-      el.data.attrs['server-rendered'] = 'true'\n-    }\n-    const startTag = renderStartingTag(el)\n-    const endTag = `</${el.tag}>`\n-    if (isUnaryTag(el.tag)) {\n-      write(startTag, next)\n-    } else if (!el.children || !el.children.length) {\n-      write(startTag + endTag, next)\n-    } else {\n-      const children: Array<VNode> = el.children || []\n-      write(startTag, () => {\n-        const total = children.length\n-        let rendered = 0\n-\n-        function renderChild (child: VNode) {\n-          renderNode(child, write, () => {\n-            rendered++\n-            if (rendered < total) {\n-              renderChild(children[rendered])\n-            } else {\n-              write(endTag, next)\n-            }\n-          }, false)\n-        }\n-\n-        renderChild(children[0])\n-      })\n-    }\n+export function createRenderFunction (\n+  modules: Array<Function>,\n+  directives: Object,\n+  isUnaryTag: Function,\n+  cache: any\n+) {\n+  if (cache && (!cache.get || !cache.set)) {\n+    throw new Error('renderer cache must implement at least get & set.')\n   }\n \n-  function renderStartingTag (node: VNode) {\n-    let markup = `<${node.tag}`\n-    if (node.data) {\n-      // check directives\n-      const dirs = node.data.directives\n-      if (dirs) {\n-        for (let i = 0; i < dirs.length; i++) {\n-          const dirRenderer = directives[dirs[i].name]\n-          if (dirRenderer) {\n-            // directives mutate the node's data\n-            // which then gets rendered by modules\n-            dirRenderer(node, dirs[i])\n-          }\n-        }\n-      }\n-      // apply other modules\n-      for (let i = 0; i < modules.length; i++) {\n-        const res = modules[i](node)\n-        if (res) {\n-          markup += res\n-        }\n-      }\n-    }\n-    // attach scoped CSS ID\n-    let scopeId\n-    if (activeInstance &&\n-        activeInstance !== node.context &&\n-        (scopeId = activeInstance.$options._scopeId)) {\n-      markup += ` ${scopeId}`\n-    }\n-    while (node) {\n-      if ((scopeId = node.context.$options._scopeId)) {\n-        markup += ` ${scopeId}`\n-      }\n-      node = node.parent\n-    }\n-    return markup + '>'\n-  }\n+  const get = cache && normalizeAsync(cache, 'get')\n+  const has = cache && normalizeAsync(cache, 'has')\n \n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n     warned = Object.create(null)\n-    activeInstance = component\n+    const context = {\n+      activeInstance: component,\n+      renderStates: [],\n+      next: noop, // for flow\n+      write, done,\n+      isUnaryTag, modules, directives,\n+      cache, get, has\n+    }\n+    context.next = nextFactory(context)\n     normalizeRender(component)\n-    renderNode(component._render(), write, done, true)\n+    renderNode(component._render(), true, context)\n   }\n }"
            },
            {
                "commitId": "d362d64633f00f8cbf1613c424d8852fb45c7596",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import { encodeHTML } from 'entities'\n+import { escape } from 'he'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n@@ -112,7 +112,7 @@ export function createRenderFunction (\n       } else if (node.isComment) {\n         write(`<!--${node.text}-->`, next)\n       } else {\n-        write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n+        write(node.raw ? node.text : escape(String(node.text)), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "e774ce2353e28c813728f508a5a83d8236f5e36e",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -2,7 +2,7 @@\n \n import config from '../config'\n import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n-import { normalizeChildren } from '../vdom/helpers'\n+import { normalizeChildren } from '../vdom/helpers/index'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf"
            },
            {
                "commitId": "3446d1485d36b91ef42c53268cb69ecb047538a5",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -232,7 +232,7 @@ export function resolveSlots (\n     child = children[i]\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n-    if (child.context === context &&\n+    if ((child.context === context || child.functionalContext === context) &&\n         child.data && (name = child.data.slot)) {\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {"
            },
            {
                "commitId": "c835ce57ff4e0ba3617a189bb2736599f1ffb471",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -117,8 +117,10 @@ export function renderMixin (Vue: Class<Component>) {\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n     if (Array.isArray(tree)) {\n       for (let i = 0; i < tree.length; i++) {\n-        tree[i].isStatic = true\n-        tree[i].key = `__static__${index}_${i}`\n+        if (typeof tree[i] !== 'string') {\n+          tree[i].isStatic = true\n+          tree[i].key = `__static__${index}_${i}`\n+        }\n       }\n     } else {\n       tree.isStatic = true"
            },
            {
                "commitId": "99ea0f8229f108baa54f8791758315e2eda4f779",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -14,7 +14,8 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm.$slots = resolveSlots(vm.$options._renderChildren)\n+  vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n+  vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -215,7 +216,8 @@ export function renderMixin (Vue: Class<Component>) {\n }\n \n export function resolveSlots (\n-  renderChildren: ?VNodeChildren\n+  renderChildren: ?VNodeChildren,\n+  context: ?Component\n ): { [key: string]: Array<VNode> } {\n   const slots = {}\n   if (!renderChildren) {\n@@ -226,8 +228,10 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    if (child.data && (name = child.data.slot)) {\n-      delete child.data.slot\n+    // named slots should only be respected if the vnode was rendered in the\n+    // same context.\n+    if (child.context === context &&\n+        child.data && (name = child.data.slot)) {\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {\n         slot.push.apply(slot, child.children)"
            },
            {
                "commitId": "56960b5fbcf82d2160a7c9645ebddecc258bc0ec",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -5,7 +5,7 @@ import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n-  nextTick, resolveAsset, _toString, toNumber\n+  nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n } from '../util/index'\n \n import { createElement } from '../vdom/create-element'\n@@ -94,6 +94,10 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._n = toNumber\n   // empty vnode\n   Vue.prototype._e = emptyVNode\n+  // loose equal\n+  Vue.prototype._q = looseEqual\n+  // loose indexOf\n+  Vue.prototype._i = looseIndexOf\n \n   // render static tree by index\n   Vue.prototype._m = function renderStatic ("
            },
            {
                "commitId": "d6a7568891d0c3368471322de5d730172d92b9e4",
                "additions": 4,
                "deletions": 3,
                "patch": "@@ -175,9 +175,10 @@ export function renderMixin (Vue: Class<Component>) {\n \n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n-    vnode: VNodeWithData,\n+    data: any,\n     value: any,\n-    asProp?: boolean) {\n+    asProp?: boolean\n+  ): VNodeData {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -188,7 +189,6 @@ export function renderMixin (Vue: Class<Component>) {\n         if (Array.isArray(value)) {\n           value = toObject(value)\n         }\n-        const data: any = vnode.data\n         for (const key in value) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n@@ -201,6 +201,7 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n       }\n     }\n+    return data\n   }\n \n   // expose v-on keyCodes"
            },
            {
                "commitId": "673dec6040bcfc510866761b38439b9d34dd91f7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -164,7 +164,7 @@ export function renderMixin (Vue: Class<Component>) {\n     // warn duplicate slot usage\n     if (slotNodes && process.env.NODE_ENV !== 'production') {\n       slotNodes._rendered && warn(\n-        `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+        `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n         `- this will likely cause render errors.`,\n         this\n       )"
            },
            {
                "commitId": "179ec92019dd098487c720ba8d1667bbedb9c380",
                "additions": 6,
                "deletions": 6,
                "patch": "@@ -36,11 +36,11 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (vm._isMounted) {    \n-      // clone slot nodes on re-renders   \n-      for (const key in vm.$slots) {    \n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])    \n-      }   \n+    if (vm._isMounted) {\n+      // clone slot nodes on re-renders\n+      for (const key in vm.$slots) {\n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+      }\n     }\n \n     if (staticRenderFns && !vm._staticTrees) {\n@@ -160,7 +160,7 @@ export function renderMixin (Vue: Class<Component>) {\n     name: string,\n     fallback: ?Array<VNode>\n   ): ?Array<VNode> {\n-    let slotNodes = this.$slots[name]\n+    const slotNodes = this.$slots[name]\n     // warn duplicate slot usage\n     if (slotNodes && process.env.NODE_ENV !== 'production') {\n       slotNodes._rendered && warn("
            },
            {
                "commitId": "100a2969aa5c64bd71758c79881cf4531e9907be",
                "additions": 15,
                "deletions": 14,
                "patch": "@@ -36,6 +36,13 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n+    if (vm._isMounted) {    \n+      // clone slot nodes on re-renders   \n+      for (const key in vm.$slots) {    \n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])    \n+      }   \n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -154,20 +161,14 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>\n   ): ?Array<VNode> {\n     let slotNodes = this.$slots[name]\n-    if (slotNodes) {\n-      // warn duplicate slot usage\n-      if (process.env.NODE_ENV !== 'production') {\n-        slotNodes._rendered && warn(\n-          `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n-          `- this will likely cause render errors.`,\n-          this\n-        )\n-        slotNodes._rendered = true\n-      }\n-      // clone slot nodes on re-renders\n-      if (this._isMounted) {\n-        slotNodes = cloneVNodes(slotNodes)\n-      }\n+    // warn duplicate slot usage\n+    if (slotNodes && process.env.NODE_ENV !== 'production') {\n+      slotNodes._rendered && warn(\n+        `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+        `- this will likely cause render errors.`,\n+        this\n+      )\n+      slotNodes._rendered = true\n     }\n     return slotNodes || fallback\n   }"
            },
            {
                "commitId": "4afccc8eece43956f6f84189923a60d9a5a45e36",
                "additions": 24,
                "deletions": 7,
                "patch": "@@ -36,13 +36,6 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (vm._isMounted) {\n-      // clone slot nodes on re-renders\n-      for (const key in vm.$slots) {\n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n-      }\n-    }\n-\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -155,6 +148,30 @@ export function renderMixin (Vue: Class<Component>) {\n     return ret\n   }\n \n+  // renderSlot\n+  Vue.prototype._t = function (\n+    name: string,\n+    fallback: ?Array<VNode>\n+  ): ?Array<VNode> {\n+    let slotNodes = this.$slots[name]\n+    if (slotNodes) {\n+      // warn duplicate slot usage\n+      if (process.env.NODE_ENV !== 'production') {\n+        slotNodes._rendered && warn(\n+          `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+          `- this will likely cause render errors.`,\n+          this\n+        )\n+        slotNodes._rendered = true\n+      }\n+      // clone slot nodes on re-renders\n+      if (this._isMounted) {\n+        slotNodes = cloneVNodes(slotNodes)\n+      }\n+    }\n+    return slotNodes || fallback\n+  }\n+\n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n     vnode: VNodeWithData,"
            },
            {
                "commitId": "f6b1a51729f705bc49c6eaaf32ec095efd97401c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -102,7 +102,7 @@ export function renderMixin (Vue: Class<Component>) {\n   ): VNode | Array<VNode> {\n     let tree = this._staticTrees[index]\n     // if has already-rendered static tree and not inside v-for,\n-    // we can reuse the same tree by indentity.\n+    // we can reuse the same tree by doing a shallow clone.\n     if (tree && !isInFor) {\n       return Array.isArray(tree)\n         ? cloneVNodes(tree)"
            },
            {
                "commitId": "982913fb1e06916a782b2789916f0038c9dfd98b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -74,13 +74,13 @@ export function createRenderFunction (\n         const key = name + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n           has(key, hit => {\n-            if (hit) {\n+            if (hit && get) {\n               get(key, res => write(res, next))\n             } else {\n               renderComponentWithCache(node, write, next, isRoot, cache, key)\n             }\n           })\n-        } else {\n+        } else if (get) {\n           get(key, res => {\n             if (res) {\n               write(res, next)"
            },
            {
                "commitId": "4d640ce4d9fd638bcd0e4a61a8bb346458046ced",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -92,6 +92,8 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n+  // empty vnode\n+  Vue.prototype._e = emptyVNode\n \n   // render static tree by index\n   Vue.prototype._m = function renderStatic (\n@@ -216,7 +218,7 @@ export function resolveSlots (\n   // ignore single whitespace\n   if (defaultSlot.length && !(\n     defaultSlot.length === 1 &&\n-    defaultSlot[0].text === ' '\n+    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n   )) {\n     slots.default = defaultSlot\n   }"
            },
            {
                "commitId": "014d2f8599f9afc0754e603b1528a12e74bd209a",
                "additions": 12,
                "deletions": 3,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { emptyVNode } from '../vdom/vnode'\n+import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n@@ -36,6 +36,13 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n+    if (vm._isMounted) {\n+      // clone slot nodes on re-renders\n+      for (const key in vm.$slots) {\n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+      }\n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -90,12 +97,14 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._m = function renderStatic (\n     index: number,\n     isInFor?: boolean\n-  ): VNode | VNodeChildren {\n+  ): VNode | Array<VNode> {\n     let tree = this._staticTrees[index]\n     // if has already-rendered static tree and not inside v-for,\n     // we can reuse the same tree by indentity.\n     if (tree && !isInFor) {\n-      return tree\n+      return Array.isArray(tree)\n+        ? cloneVNodes(tree)\n+        : cloneVNode(tree)\n     }\n     // otherwise, render a fresh tree.\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)"
            },
            {
                "commitId": "0e75fb93df9fd83391959989836c120f2662adab",
                "additions": 20,
                "deletions": 4,
                "patch": "@@ -4,6 +4,14 @@ import { encodeHTML } from 'entities'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+let warned = Object.create(null)\n+const warnOnce = msg => {\n+  if (!warned[msg]) {\n+    warned[msg] = true\n+    console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n+  }\n+}\n+\n const normalizeAsync = (cache, method) => {\n   const fn = cache[method]\n   if (!fn) {\n@@ -61,8 +69,9 @@ export function createRenderFunction (\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n       const getKey = Ctor.options.serverCacheKey\n-      if (getKey && cache) {\n-        const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+      const name = Ctor.options.name\n+      if (getKey && cache && name) {\n+        const key = name + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n           has(key, hit => {\n             if (hit) {\n@@ -81,14 +90,20 @@ export function createRenderFunction (\n           })\n         }\n       } else {\n-        if (getKey) {\n-          console.error(\n+        if (getKey && !cache) {\n+          warnOnce(\n             `[vue-server-renderer] Component ${\n               Ctor.options.name || '(anonymous)'\n             } implemented serverCacheKey, ` +\n             'but no cache was provided to the renderer.'\n           )\n         }\n+        if (getKey && !name) {\n+          warnOnce(\n+            `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+            `must also define a unique \"name\" option.`\n+          )\n+        }\n         renderComponent(node, write, next, isRoot)\n       }\n     } else {\n@@ -213,6 +228,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    warned = Object.create(null)\n     activeInstance = component\n     normalizeRender(component)\n     renderNode(component._render(), write, done, true)"
            },
            {
                "commitId": "7c3db415a7e4e006f529b27123280ec7c2ae75d0",
                "additions": 14,
                "deletions": 6,
                "patch": "@@ -18,12 +18,20 @@ const normalizeAsync = (cache, method) => {\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n-  if (!render && template) {\n-    const renderFns = (\n-      compilationCache[template] ||\n-      (compilationCache[template] = compileToFunctions(template))\n-    )\n-    Object.assign(vm.$options, renderFns)\n+  if (!render) {\n+    if (template) {\n+      const renderFns = (\n+        compilationCache[template] ||\n+        (compilationCache[template] = compileToFunctions(template))\n+      )\n+      Object.assign(vm.$options, renderFns)\n+    } else {\n+      throw new Error(\n+        `render function or template not defined in component: ${\n+          vm.$options.name || vm.$options._componentTag || 'anonymous'\n+        }`\n+      )\n+    }\n   }\n }\n "
            },
            {
                "commitId": "18386c4cf4fe829f447687734a5bf03905d0db44",
                "additions": 18,
                "deletions": 5,
                "patch": "@@ -87,13 +87,26 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._n = toNumber\n \n   // render static tree by index\n-  Vue.prototype._m = function renderStatic (index?: number): Object | void {\n+  Vue.prototype._m = function renderStatic (\n+    index: number,\n+    isInFor?: boolean\n+  ): VNode | VNodeChildren {\n     let tree = this._staticTrees[index]\n-    if (!tree) {\n-      tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n-        this._renderProxy\n-      )\n+    // if has already-rendered static tree and not inside v-for,\n+    // we can reuse the same tree by indentity.\n+    if (tree && !isInFor) {\n+      return tree\n+    }\n+    // otherwise, render a fresh tree.\n+    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n+    if (Array.isArray(tree)) {\n+      for (let i = 0; i < tree.length; i++) {\n+        tree[i].isStatic = true\n+        tree[i].key = `__static__${index}_${i}`\n+      }\n+    } else {\n       tree.isStatic = true\n+      tree.key = `__static__${index}`\n     }\n     return tree\n   }"
            },
            {
                "commitId": "21908b7267a9ff6b425b8261f9a38a2a0df2b72d",
                "additions": 4,
                "deletions": 6,
                "patch": "@@ -14,7 +14,7 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm.$slots = {}\n+  vm.$slots = resolveSlots(vm.$options._renderChildren)\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -33,7 +33,6 @@ export function renderMixin (Vue: Class<Component>) {\n     const {\n       render,\n       staticRenderFns,\n-      _renderChildren,\n       _parentVnode\n     } = vm.$options\n \n@@ -43,9 +42,6 @@ export function renderMixin (Vue: Class<Component>) {\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n     vm.$vnode = _parentVnode\n-    // resolve slots. becaues slots are rendered in parent scope,\n-    // we set the activeInstance to parent.\n-    vm.$slots = resolveSlots(_renderChildren)\n     // render self\n     let vnode\n     try {\n@@ -171,7 +167,9 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-export function resolveSlots (renderChildren: ?VNodeChildren): Object {\n+export function resolveSlots (\n+  renderChildren: ?VNodeChildren\n+): { [key: string]: Array<VNode> } {\n   const slots = {}\n   if (!renderChildren) {\n     return slots"
            },
            {
                "commitId": "fe801b16e4da63513bce95bfa762a8a36d83fe59",
                "additions": 6,
                "deletions": 5,
                "patch": "@@ -95,14 +95,15 @@ export function createRenderFunction (\n   }\n \n   function renderComponent (node, write, next, isRoot) {\n-    const child = createComponentInstanceForVnode(node)\n+    const prevActive = activeInstance\n+    const child = activeInstance = createComponentInstanceForVnode(node, activeInstance)\n     normalizeRender(child)\n     const childNode = child._render()\n     childNode.parent = node\n-    const prevActive = activeInstance\n-    activeInstance = child\n-    renderNode(childNode, write, next, isRoot)\n-    activeInstance = prevActive\n+    renderNode(childNode, write, () => {\n+      activeInstance = prevActive\n+      next()\n+    }, isRoot)\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {"
            },
            {
                "commitId": "b5b963f51df1fa3124cd8a9846be5455408bc52a",
                "additions": 10,
                "deletions": 1,
                "patch": "@@ -40,6 +40,9 @@ export function createRenderFunction (\n   const get = cache && normalizeAsync(cache, 'get')\n   const has = cache && normalizeAsync(cache, 'has')\n \n+  // used to track and apply scope ids\n+  let activeInstance: any\n+\n   function renderNode (\n     node: VNode,\n     write: Function,\n@@ -96,7 +99,10 @@ export function createRenderFunction (\n     normalizeRender(child)\n     const childNode = child._render()\n     childNode.parent = node\n+    const prevActive = activeInstance\n+    activeInstance = child\n     renderNode(childNode, write, next, isRoot)\n+    activeInstance = prevActive\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n@@ -179,7 +185,9 @@ export function createRenderFunction (\n     }\n     // attach scoped CSS ID\n     let scopeId\n-    if (node.host && (scopeId = node.host.$options._scopeId)) {\n+    if (activeInstance &&\n+        activeInstance !== node.context &&\n+        (scopeId = activeInstance.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n     while (node) {\n@@ -196,6 +204,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    activeInstance = component\n     normalizeRender(component)\n     renderNode(component._render(), write, done, true)\n   }"
            },
            {
                "commitId": "c66b7566c682af653dc475fab1475db5484e40ee",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -163,7 +163,7 @@ export function renderMixin (Vue: Class<Component>) {\n         if (Array.isArray(value)) {\n           value = toObject(value)\n         }\n-        const data = vnode.data\n+        const data: any = vnode.data\n         for (const key in value) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]"
            },
            {
                "commitId": "59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -165,10 +165,14 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n         const data = vnode.data\n         for (const key in value) {\n-          const hash = asProp || config.mustUseProp(key)\n-            ? data.domProps || (data.domProps = {})\n-            : data.attrs || (data.attrs = {})\n-          hash[key] = value[key]\n+          if (key === 'class' || key === 'style') {\n+            data[key] = value[key]\n+          } else {\n+            const hash = asProp || config.mustUseProp(key)\n+              ? data.domProps || (data.domProps = {})\n+              : data.attrs || (data.attrs = {})\n+            hash[key] = value[key]\n+          }\n         }\n       }\n     }"
            },
            {
                "commitId": "351aef3cb4ada980f105f98f8b835876e8d4d689",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -83,6 +83,8 @@ export function createRenderFunction (\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n+      } else if (node.isComment) {\n+        write(`<!--${node.text}-->`, next)\n       } else {\n         write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n       }"
            },
            {
                "commitId": "74f8b98509d24487e1a8d1588b4128a7a1046a41",
                "additions": 7,
                "deletions": 4,
                "patch": "@@ -103,13 +103,16 @@ export function renderMixin (Vue: Class<Component>) {\n   // number conversion\n   Vue.prototype._n = toNumber\n \n-  //\n+  // render static tree by index\n   Vue.prototype._m = function renderStatic (index?: number): Object | void {\n-    return this._staticTrees[index] || (\n-      this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n+    let tree = this._staticTrees[index]\n+    if (!tree) {\n+      tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n         this._renderProxy\n       )\n-    )\n+      tree.isStatic = true\n+    }\n+    return tree\n   }\n \n   // filter resolution helper"
            },
            {
                "commitId": "65d4ae9d0f0f3c6b72c4c606d8066a2abca74db2",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -84,7 +84,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.raw ? node.text : encodeHTML(node.text), next)\n+        write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "0f5bcdfac81e5428d2029f86ecb6bb77aef82335",
                "additions": 1,
                "deletions": 3,
                "patch": "@@ -177,9 +177,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-export function resolveSlots (\n-  renderChildren?: Array<any> | () => Array<any> | string\n-): Object {\n+export function resolveSlots (renderChildren: any): Object {\n   const slots = {}\n   if (!renderChildren) {\n     return slots"
            },
            {
                "commitId": "23a22cbb44f8a6796e2489a101b6de4f997f4340",
                "additions": 9,
                "deletions": 8,
                "patch": "@@ -56,9 +56,7 @@ export function renderMixin (Vue: Class<Component>) {\n     vm.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n-    if (_renderChildren) {\n-      resolveSlots(vm, _renderChildren)\n-    }\n+    vm.$slots = resolveSlots(_renderChildren)\n     // render self\n     let vnode\n     try {\n@@ -179,11 +177,13 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-function resolveSlots (\n-  vm: Component,\n-  renderChildren: Array<any> | () => Array<any> | string\n-) {\n-  const slots = vm.$slots = {}\n+export function resolveSlots (\n+  renderChildren?: Array<any> | () => Array<any> | string\n+): Object {\n+  const slots = {}\n+  if (!renderChildren) {\n+    return slots\n+  }\n   const children = normalizeChildren(renderChildren) || []\n   const defaultSlot = []\n   let name, child\n@@ -208,4 +208,5 @@ function resolveSlots (\n   )) {\n     slots.default = defaultSlot\n   }\n+  return slots\n }"
            },
            {
                "commitId": "154e17abaed2f9c2d80507c28a474adea72337e6",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -148,7 +148,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // apply v-bind object\n-  Vue.prototype._b = function bindProps (vnode: VNodeWithData, value: any) {\n+  Vue.prototype._b = function bindProps (\n+    vnode: VNodeWithData,\n+    value: any,\n+    asProp?: boolean) {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -161,7 +164,7 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n         const data = vnode.data\n         for (const key in value) {\n-          const hash = config.mustUseProp(key)\n+          const hash = asProp || config.mustUseProp(key)\n             ? data.domProps || (data.domProps = {})\n             : data.attrs || (data.attrs = {})\n           hash[key] = value[key]"
            },
            {
                "commitId": "69ecdcb05e3f5db32af889962fe8253d49d7390d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -162,7 +162,7 @@ export function renderMixin (Vue: Class<Component>) {\n         const data = vnode.data\n         for (const key in value) {\n           const hash = config.mustUseProp(key)\n-            ? data.props || (data.props = {})\n+            ? data.domProps || (data.domProps = {})\n             : data.attrs || (data.attrs = {})\n           hash[key] = value[key]\n         }"
            },
            {
                "commitId": "2732fec59ed592c187b499b2ba5872d2242339cc",
                "additions": 24,
                "deletions": 5,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, isObject, toObject,\n+  warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n@@ -48,19 +48,38 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (staticRenderFns && !this._staticTrees) {\n-      this._staticTrees = []\n+    if (staticRenderFns && !vm._staticTrees) {\n+      vm._staticTrees = []\n     }\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n-    this.$vnode = _parentVnode\n+    vm.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    let vnode = render.call(vm._renderProxy, vm.$createElement)\n+    let vnode\n+    try {\n+      vnode = render.call(vm._renderProxy, vm.$createElement)\n+    } catch (e) {\n+      if (process.env.NODE_ENV !== 'production') {\n+        warn(`Error when rendering ${formatComponentName(vm)}:`)\n+      }\n+      /* istanbul ignore else */\n+      if (config.errorHandler) {\n+        config.errorHandler.call(null, e, vm)\n+      } else {\n+        if (config._isServer) {\n+          throw e\n+        } else {\n+          setTimeout(() => { throw e }, 0)\n+        }\n+      }\n+      // return previous vnode to prevent render error causing blank component\n+      vnode = vm._vnode\n+    }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "d0482a0faeeb79c250fc17e06de6c777e74bc618",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -167,7 +167,8 @@ function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    if ((name = child.data && child.data.slot)) {\n+    if (child.data && (name = child.data.slot)) {\n+      delete child.data.slot\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {\n         slot.push.apply(slot, child.children)"
            },
            {
                "commitId": "75a221e95fa797a7472ac8a25f97a8248a605737",
                "additions": 19,
                "deletions": 21,
                "patch": "@@ -162,29 +162,27 @@ function resolveSlots (\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n   const slots = vm.$slots = {}\n-  if (renderChildren) {\n-    const children = normalizeChildren(renderChildren) || []\n-    const defaultSlot = []\n-    let name, child\n-    for (let i = 0, l = children.length; i < l; i++) {\n-      child = children[i]\n-      if ((name = child.data && child.data.slot)) {\n-        const slot = (slots[name] || (slots[name] = []))\n-        if (child.tag === 'template') {\n-          slot.push.apply(slot, child.children)\n-        } else {\n-          slot.push(child)\n-        }\n+  const children = normalizeChildren(renderChildren) || []\n+  const defaultSlot = []\n+  let name, child\n+  for (let i = 0, l = children.length; i < l; i++) {\n+    child = children[i]\n+    if ((name = child.data && child.data.slot)) {\n+      const slot = (slots[name] || (slots[name] = []))\n+      if (child.tag === 'template') {\n+        slot.push.apply(slot, child.children)\n       } else {\n-        defaultSlot.push(child)\n+        slot.push(child)\n       }\n+    } else {\n+      defaultSlot.push(child)\n     }\n-    // ignore single whitespace\n-    if (defaultSlot.length && !(\n-      defaultSlot.length === 1 &&\n-      defaultSlot[0].text === ' '\n-    )) {\n-      slots.default = defaultSlot\n-    }\n+  }\n+  // ignore single whitespace\n+  if (defaultSlot.length && !(\n+    defaultSlot.length === 1 &&\n+    defaultSlot[0].text === ' '\n+  )) {\n+    slots.default = defaultSlot\n   }\n }"
            },
            {
                "commitId": "1a064a6dc94c9dd183963ebd00a6e25680786b96",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -161,9 +161,9 @@ function resolveSlots (\n   vm: Component,\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n+  const slots = vm.$slots = {}\n   if (renderChildren) {\n     const children = normalizeChildren(renderChildren) || []\n-    const slots = {}\n     const defaultSlot = []\n     let name, child\n     for (let i = 0, l = children.length; i < l; i++) {\n@@ -179,12 +179,12 @@ function resolveSlots (\n         defaultSlot.push(child)\n       }\n     }\n+    // ignore single whitespace\n     if (defaultSlot.length && !(\n       defaultSlot.length === 1 &&\n       defaultSlot[0].text === ' '\n     )) {\n-      slots['default'] = defaultSlot\n+      slots.default = defaultSlot\n     }\n-    vm.$slots = slots\n   }\n }"
            },
            {
                "commitId": "7630622689587b947c3ba03678a8f1d1e24ac71f",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -17,7 +17,8 @@ export const renderState: {\n }\n \n export function initRender (vm: Component) {\n-  vm._vnode = null\n+  vm.$vnode = null // the placeholder node in parent tree\n+  vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n@@ -50,7 +51,9 @@ export function renderMixin (Vue: Class<Component>) {\n     if (staticRenderFns && !this._staticTrees) {\n       this._staticTrees = []\n     }\n-\n+    // set parent vnode. this allows render functions to have access\n+    // to the data on the placeholder node.\n+    this.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {"
            },
            {
                "commitId": "5c6c8c7ed0b72461f1ed2e673c8f04cba300aaff",
                "additions": 19,
                "deletions": 3,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n import { encodeHTML } from 'entities'\n+import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const normalizeAsync = (cache, method) => {\n@@ -14,6 +15,18 @@ const normalizeAsync = (cache, method) => {\n   }\n }\n \n+const compilationCache = Object.create(null)\n+const normalizeRender = vm => {\n+  const { render, template } = vm.$options\n+  if (!render && template) {\n+    const renderFns = (\n+      compilationCache[template] ||\n+      (compilationCache[template] = compileToFunctions(template))\n+    )\n+    Object.assign(vm.$options, renderFns)\n+  }\n+}\n+\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n@@ -77,9 +90,11 @@ export function createRenderFunction (\n   }\n \n   function renderComponent (node, write, next, isRoot) {\n-    const child = createComponentInstanceForVnode(node)._render()\n-    child.parent = node\n-    renderNode(child, write, next, isRoot)\n+    const child = createComponentInstanceForVnode(node)\n+    normalizeRender(child)\n+    const childNode = child._render()\n+    childNode.parent = node\n+    renderNode(childNode, write, next, isRoot)\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n@@ -179,6 +194,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    normalizeRender(component)\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "e17f2ba20cdc44fabe9a6ca2baa6881debc1a992",
                "additions": 1,
                "deletions": 4,
                "patch": "@@ -1,11 +1,8 @@\n /* @flow */\n \n-import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-const encodeHTMLCached = cached(encodeHTML)\n-\n const normalizeAsync = (cache, method) => {\n   const fn = cache[method]\n   if (!fn) {\n@@ -74,7 +71,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.raw ? node.text : encodeHTMLCached(node.text), next)\n+        write(node.raw ? node.text : encodeHTML(node.text), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "bf9c46f435bad7fb8872febc03f577ee622e4df6",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -39,7 +39,7 @@ export function createRenderFunction (\n     if (node.componentOptions) {\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n-      const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+      const getKey = Ctor.options.serverCacheKey\n       if (getKey && cache) {\n         const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n@@ -62,7 +62,9 @@ export function createRenderFunction (\n       } else {\n         if (getKey) {\n           console.error(\n-            'Component implemented server.getCacheKey, ' +\n+            `[vue-server-renderer] Component ${\n+              Ctor.options.name || '(anonymous)'\n+            } implemented serverCacheKey, ` +\n             'but no cache was provided to the renderer.'\n           )\n         }"
            },
            {
                "commitId": "ba3bec824d9d12e7508291f788645c4b613b9fbe",
                "additions": 67,
                "deletions": 34,
                "patch": "@@ -2,21 +2,33 @@\n \n import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n-import LRU from 'lru-cache'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const encodeHTMLCached = cached(encodeHTML)\n-const defaultOptions = {\n-  max: 5000\n+\n+const normalizeAsync = (cache, method) => {\n+  const fn = cache[method]\n+  if (!fn) {\n+    return\n+  } else if (fn.length > 1) {\n+    return (key, cb) => fn.call(cache, key, cb)\n+  } else {\n+    return (key, cb) => cb(fn.call(cache, key))\n+  }\n }\n \n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n   isUnaryTag: Function,\n-  cacheOptions: Object\n+  cache: any\n ) {\n-  const cache = LRU(Object.assign({}, defaultOptions, cacheOptions))\n+  if (cache && (!cache.get || !cache.set)) {\n+    throw new Error('renderer cache must implement at least get & set.')\n+  }\n+\n+  const get = cache && normalizeAsync(cache, 'get')\n+  const has = cache && normalizeAsync(cache, 'has')\n \n   function renderNode (\n     node: VNode,\n@@ -28,35 +40,34 @@ export function createRenderFunction (\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n       const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n-      if (getKey) {\n+      if (getKey && cache) {\n         const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n-        if (cache.has(key)) {\n-          return write(cache.get(key), next)\n+        if (has) {\n+          has(key, hit => {\n+            if (hit) {\n+              get(key, res => write(res, next))\n+            } else {\n+              renderComponentWithCache(node, write, next, isRoot, cache, key)\n+            }\n+          })\n         } else {\n-          write.caching = true\n-          const buffer = write.cacheBuffer\n-          const bufferIndex = buffer.push('') - 1\n-          const _next = next\n-          next = () => {\n-            const result = buffer[bufferIndex]\n-            cache.set(key, result)\n-            if (bufferIndex === 0) {\n-              // this is a top-level cached component,\n-              // exit caching mode.\n-              write.caching = false\n+          get(key, res => {\n+            if (res) {\n+              write(res, next)\n             } else {\n-              // parent component is also being cached,\n-              // merge self into parent's result\n-              buffer[bufferIndex - 1] += result\n+              renderComponentWithCache(node, write, next, isRoot, cache, key)\n             }\n-            buffer.length = bufferIndex\n-            _next()\n-          }\n+          })\n         }\n+      } else {\n+        if (getKey) {\n+          console.error(\n+            'Component implemented server.getCacheKey, ' +\n+            'but no cache was provided to the renderer.'\n+          )\n+        }\n+        renderComponent(node, write, next, isRoot)\n       }\n-      const child = createComponentInstanceForVnode(node)._render()\n-      child.parent = node\n-      renderNode(child, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -66,12 +77,34 @@ export function createRenderFunction (\n     }\n   }\n \n-  function renderElement (\n-    el: VNode,\n-    write: Function,\n-    next: Function,\n-    isRoot: boolean\n-  ) {\n+  function renderComponent (node, write, next, isRoot) {\n+    const child = createComponentInstanceForVnode(node)._render()\n+    child.parent = node\n+    renderNode(child, write, next, isRoot)\n+  }\n+\n+  function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n+    write.caching = true\n+    const buffer = write.cacheBuffer\n+    const bufferIndex = buffer.push('') - 1\n+    renderComponent(node, write, () => {\n+      const result = buffer[bufferIndex]\n+      cache.set(key, result)\n+      if (bufferIndex === 0) {\n+        // this is a top-level cached component,\n+        // exit caching mode.\n+        write.caching = false\n+      } else {\n+        // parent component is also being cached,\n+        // merge self into parent's result\n+        buffer[bufferIndex - 1] += result\n+      }\n+      buffer.length = bufferIndex\n+      next()\n+    }, isRoot)\n+  }\n+\n+  function renderElement (el, write, next, isRoot) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}"
            },
            {
                "commitId": "1b3b19491fd47f3634e30d7fcce991881de16530",
                "additions": 19,
                "deletions": 21,
                "patch": "@@ -8,11 +8,7 @@ import {\n   nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n-import {\n-  renderElement,\n-  renderElementWithChildren,\n-  renderStatic\n-} from '../vdom/create-element'\n+import { createElement } from '../vdom/create-element'\n \n export const renderState: {\n   activeInstance: ?Component\n@@ -26,14 +22,7 @@ export function initRender (vm: Component) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(function (\n-    tag?: string | Class<Component> | Function | Object,\n-    data?: VNodeData,\n-    children?: VNodeChildren,\n-    namespace?: string\n-  ) {\n-    return this._h(this._e(tag, data, namespace), children)\n-  }, vm)\n+  vm.$createElement = bind(createElement, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -88,22 +77,29 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype._h = renderElementWithChildren\n-  Vue.prototype._e = renderElement\n-  Vue.prototype._m = renderStatic\n+  Vue.prototype._h = createElement\n   // toString for mustaches\n   Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n \n+  //\n+  Vue.prototype._m = function renderStatic (index?: number): Object | void {\n+    return this._staticTrees[index] || (\n+      this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n+        this._renderProxy\n+      )\n+    )\n+  }\n+\n   // filter resolution helper\n   const identity = _ => _\n-  Vue.prototype._f = function (id) {\n+  Vue.prototype._f = function resolveFilter (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }\n \n   // render v-for\n-  Vue.prototype._l = function (\n+  Vue.prototype._l = function renderList (\n     val: any,\n     render: () => VNode\n   ): ?Array<VNode> {\n@@ -130,7 +126,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // apply v-bind object\n-  Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n+  Vue.prototype._b = function bindProps (vnode: VNodeWithData, value: any) {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -153,15 +149,17 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // expose v-on keyCodes\n-  Vue.prototype._k = key => config.keyCodes[key]\n+  Vue.prototype._k = function getKeyCodes (key: string): any {\n+    return config.keyCodes[key]\n+  }\n }\n \n function resolveSlots (\n   vm: Component,\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n   if (renderChildren) {\n-    const children = normalizeChildren(renderChildren)\n+    const children = normalizeChildren(renderChildren) || []\n     const slots = {}\n     const defaultSlot = []\n     let name, child"
            },
            {
                "commitId": "cf8aeddc122dc13870ac07eff1574b2c172feb18",
                "additions": 2,
                "deletions": 5,
                "patch": "@@ -5,13 +5,12 @@ import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, bind, isObject, toObject,\n-  nextTick, resolveAsset, renderString, toNumber\n+  nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n import {\n   renderElement,\n   renderElementWithChildren,\n-  renderText,\n   renderStatic\n } from '../vdom/create-element'\n \n@@ -91,11 +90,9 @@ export function renderMixin (Vue: Class<Component>) {\n   // shorthands used in render functions\n   Vue.prototype._h = renderElementWithChildren\n   Vue.prototype._e = renderElement\n-  Vue.prototype._t = renderText\n   Vue.prototype._m = renderStatic\n-\n   // toString for mustaches\n-  Vue.prototype._s = renderString\n+  Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n "
            },
            {
                "commitId": "51db34103a8f76dc314578d202af0465177d30f8",
                "additions": 16,
                "deletions": 8,
                "patch": "@@ -33,16 +33,24 @@ export function createRenderFunction (\n         if (cache.has(key)) {\n           return write(cache.get(key), next)\n         } else {\n-          if (!write.caching) {\n-            // initialize if not already caching\n-            write.caching = true\n-            const _next = next\n-            next = () => {\n-              cache.set(key, write.buffer)\n+          write.caching = true\n+          const buffer = write.cacheBuffer\n+          const bufferIndex = buffer.push('') - 1\n+          const _next = next\n+          next = () => {\n+            const result = buffer[bufferIndex]\n+            cache.set(key, result)\n+            if (bufferIndex === 0) {\n+              // this is a top-level cached component,\n+              // exit caching mode.\n               write.caching = false\n-              write.buffer = ''\n-              _next()\n+            } else {\n+              // parent component is also being cached,\n+              // merge self into parent's result\n+              buffer[bufferIndex - 1] += result\n             }\n+            buffer.length = bufferIndex\n+            _next()\n           }\n         }\n       }"
            },
            {
                "commitId": "651263bb78bb4de3d0c9bfeda767a5290f6018c8",
                "additions": 26,
                "deletions": 26,
                "patch": "@@ -25,9 +25,28 @@ export function createRenderFunction (\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child =\n-        getCachedComponent(node) ||\n-        createComponentInstanceForVnode(node)._render()\n+      // check cache hit\n+      const Ctor = node.componentOptions.Ctor\n+      const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+      if (getKey) {\n+        const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+        if (cache.has(key)) {\n+          return write(cache.get(key), next)\n+        } else {\n+          if (!write.caching) {\n+            // initialize if not already caching\n+            write.caching = true\n+            const _next = next\n+            next = () => {\n+              cache.set(key, write.buffer)\n+              write.caching = false\n+              write.buffer = ''\n+              _next()\n+            }\n+          }\n+        }\n+      }\n+      const child = createComponentInstanceForVnode(node)._render()\n       child.parent = node\n       renderNode(child, write, next, isRoot)\n     } else {\n@@ -39,21 +58,6 @@ export function createRenderFunction (\n     }\n   }\n \n-  function getCachedComponent (node) {\n-    const Ctor = node.componentOptions.Ctor\n-    const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n-    if (getKey) {\n-      const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n-      if (cache.has(key)) {\n-        return cache.get(key)\n-      } else {\n-        const res = createComponentInstanceForVnode(node)._render()\n-        cache.set(key, res)\n-        return res\n-      }\n-    }\n-  }\n-\n   function renderElement (\n     el: VNode,\n     write: Function,\n@@ -94,9 +98,6 @@ export function createRenderFunction (\n   }\n \n   function renderStartingTag (node: VNode) {\n-    if (node._rendered) {\n-      return node._rendered\n-    }\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -124,14 +125,13 @@ export function createRenderFunction (\n     if (node.host && (scopeId = node.host.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n-    let _node = node\n-    while (_node) {\n-      if ((scopeId = _node.context.$options._scopeId)) {\n+    while (node) {\n+      if ((scopeId = node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n-      _node = _node.parent\n+      node = node.parent\n     }\n-    return (node._rendered = markup + '>')\n+    return markup + '>'\n   }\n \n   return function render ("
            },
            {
                "commitId": "c902e1f9ab91b3a8048f1a576396abdeeea41d20",
                "additions": 34,
                "deletions": 6,
                "patch": "@@ -2,23 +2,32 @@\n \n import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n+import LRU from 'lru-cache'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const encodeHTMLCached = cached(encodeHTML)\n+const defaultOptions = {\n+  max: 5000\n+}\n \n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n-  isUnaryTag: Function\n+  isUnaryTag: Function,\n+  cacheOptions: Object\n ) {\n+  const cache = LRU(Object.assign({}, defaultOptions, cacheOptions))\n+\n   function renderNode (\n     node: VNode,\n     write: Function,\n     next: Function,\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child = createComponentInstanceForVnode(node)._render()\n+      const child =\n+        getCachedComponent(node) ||\n+        createComponentInstanceForVnode(node)._render()\n       child.parent = node\n       renderNode(child, write, next, isRoot)\n     } else {\n@@ -30,6 +39,21 @@ export function createRenderFunction (\n     }\n   }\n \n+  function getCachedComponent (node) {\n+    const Ctor = node.componentOptions.Ctor\n+    const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+    if (getKey) {\n+      const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+      if (cache.has(key)) {\n+        return cache.get(key)\n+      } else {\n+        const res = createComponentInstanceForVnode(node)._render()\n+        cache.set(key, res)\n+        return res\n+      }\n+    }\n+  }\n+\n   function renderElement (\n     el: VNode,\n     write: Function,\n@@ -70,6 +94,9 @@ export function createRenderFunction (\n   }\n \n   function renderStartingTag (node: VNode) {\n+    if (node._rendered) {\n+      return node._rendered\n+    }\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -97,13 +124,14 @@ export function createRenderFunction (\n     if (node.host && (scopeId = node.host.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n-    while (node) {\n-      if ((scopeId = node.context.$options._scopeId)) {\n+    let _node = node\n+    while (_node) {\n+      if ((scopeId = _node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n-      node = node.parent\n+      _node = _node.parent\n     }\n-    return markup + '>'\n+    return (node._rendered = markup + '>')\n   }\n \n   return function render ("
            },
            {
                "commitId": "3fe127b05a0e12b5d05d4ddd0d2e5f85f223d475",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -5,7 +5,7 @@ import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, bind, isObject, toObject,\n-  nextTick, resolveAsset, renderString\n+  nextTick, resolveAsset, renderString, toNumber\n } from '../util/index'\n \n import {\n@@ -96,6 +96,8 @@ export function renderMixin (Vue: Class<Component>) {\n \n   // toString for mustaches\n   Vue.prototype._s = renderString\n+  // number conversion\n+  Vue.prototype._n = toNumber\n \n   // filter resolution helper\n   const identity = _ => _"
            },
            {
                "commitId": "f0efa9aad2f33c45ea8dfc5098cef86900b9ef98",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -154,7 +154,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // expose v-on keyCodes\n-  Vue.prototype._keyCode = key => config.keyCodes[key]\n+  Vue.prototype._k = key => config.keyCodes[key]\n }\n \n function resolveSlots ("
            },
            {
                "commitId": "4fe51a75a94464075055b45550a05e4680bb2b9f",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -152,6 +152,9 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n   }\n+\n+  // expose v-on keyCodes\n+  Vue.prototype._keyCode = key => config.keyCodes[key]\n }\n \n function resolveSlots ("
            },
            {
                "commitId": "41e46476a50c4fe08bd1de6423e84eef26e2b8f1",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -69,7 +69,7 @@ export function renderMixin (Vue: Class<Component>) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    let vnode = render.call(vm._renderProxy)\n+    let vnode = render.call(vm._renderProxy, vm.$createElement)\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -93,9 +93,12 @@ export function createRenderFunction (\n       }\n     }\n     // attach scoped CSS ID\n+    let scopeId\n+    if (node.host && (scopeId = node.host.$options._scopeId)) {\n+      markup += ` ${scopeId}`\n+    }\n     while (node) {\n-      const scopeId = node.context.$options._scopeId\n-      if (scopeId) {\n+      if ((scopeId = node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n       node = node.parent"
            },
            {
                "commitId": "b1351be073eda59724b3ede02753379fdc7d6829",
                "additions": 11,
                "deletions": 2,
                "patch": "@@ -18,8 +18,9 @@ export function createRenderFunction (\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child = createComponentInstanceForVnode(node)\n-      renderNode(child._render(), write, next, isRoot)\n+      const child = createComponentInstanceForVnode(node)._render()\n+      child.parent = node\n+      renderNode(child, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -91,6 +92,14 @@ export function createRenderFunction (\n         }\n       }\n     }\n+    // attach scoped CSS ID\n+    while (node) {\n+      const scopeId = node.context.$options._scopeId\n+      if (scopeId) {\n+        markup += ` ${scopeId}`\n+      }\n+      node = node.parent\n+    }\n     return markup + '>'\n   }\n "
            },
            {
                "commitId": "b0ad94fc876826a8ee3226320aacd40b8967f8dd",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,7 +1,11 @@\n /* @flow */\n \n+import { cached } from 'shared/util'\n+import { encodeHTML } from 'entities'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+const encodeHTMLCached = cached(encodeHTML)\n+\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n@@ -20,7 +24,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.text, next)\n+        write(node.raw ? node.text : encodeHTMLCached(node.text), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "cec833a9e8d71a9ed5deaecdccaceb1168641a2e",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -112,19 +112,19 @@ export function renderMixin (Vue: Class<Component>) {\n     if (Array.isArray(val)) {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n-        ret[i] = render(val[i], i, i)\n+        ret[i] = render(val[i], i)\n       }\n     } else if (typeof val === 'number') {\n       ret = new Array(val)\n       for (i = 0; i < val; i++) {\n-        ret[i] = render(i + 1, i, i)\n+        ret[i] = render(i + 1, i)\n       }\n     } else if (isObject(val)) {\n       keys = Object.keys(val)\n       ret = new Array(keys.length)\n       for (i = 0, l = keys.length; i < l; i++) {\n         key = keys[i]\n-        ret[i] = render(val[key], i, key)\n+        ret[i] = render(val[key], key, i)\n       }\n     }\n     return ret"
            },
            {
                "commitId": "894d214e9367be653bf22429085906682fcd874a",
                "additions": 16,
                "deletions": 10,
                "patch": "@@ -47,13 +47,22 @@ export function renderMixin (Vue: Class<Component>) {\n \n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n+\n+    // set current active instance\n     const prev = renderState.activeInstance\n     renderState.activeInstance = vm\n-    if (!vm._isMounted) {\n+\n+    const {\n+      render,\n+      staticRenderFns,\n+      _renderChildren,\n+      _parentVnode\n+    } = vm.$options\n+\n+    if (staticRenderFns && !vm._staticTrees) {\n       // render static sub-trees for once on initial render\n-      renderStaticTrees(vm)\n+      renderStaticTrees(vm, staticRenderFns)\n     }\n-    const { render, _renderChildren, _parentVnode } = vm.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n@@ -145,13 +154,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-function renderStaticTrees (vm: Component) {\n-  const staticRenderFns = vm.$options.staticRenderFns\n-  if (staticRenderFns) {\n-    const trees = vm._staticTrees = new Array(staticRenderFns.length)\n-    for (let i = 0; i < staticRenderFns.length; i++) {\n-      trees[i] = staticRenderFns[i].call(vm._renderProxy)\n-    }\n+function renderStaticTrees (vm: Component, fns: Array<Function>) {\n+  const trees = vm._staticTrees = new Array(fns.length)\n+  for (let i = 0; i < fns.length; i++) {\n+    trees[i] = fns[i].call(vm._renderProxy)\n   }\n }\n "
            },
            {
                "commitId": "a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -70,7 +70,7 @@ export function renderMixin (Vue: Class<Component>) {\n           vm\n         )\n       }\n-      vnode = emptyVNode\n+      vnode = emptyVNode()\n     }\n     // set parent\n     vnode.parent = _parentVnode"
            },
            {
                "commitId": "026198caf1545bf0f82831f19e1f18f1212e84d2",
                "additions": 1,
                "deletions": 15,
                "patch": "@@ -35,20 +35,6 @@ export function initRender (vm: Component) {\n   ) {\n     return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n-  // for abstract components, determine first non-abstract parent\n-  // so that the children of abstract components are considered children\n-  // of the first non-abstract parent.\n-  // this is used by internal abstract components like <keep-alive>.\n-  if (vm.$options._abstract) {\n-    let parent = vm.$parent\n-    /* istanbul ignore next */\n-    while (parent && parent.$options._abstract) {\n-      parent = parent.$parent\n-    }\n-    vm._renderParent = parent\n-  } else {\n-    vm._renderParent = vm\n-  }\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -62,7 +48,7 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n     const prev = renderState.activeInstance\n-    renderState.activeInstance = vm._renderParent\n+    renderState.activeInstance = vm\n     if (!vm._isMounted) {\n       // render static sub-trees for once on initial render\n       renderStaticTrees(vm)"
            },
            {
                "commitId": "2091c8525f5e0dca47c9672323f91449832688b7",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -41,6 +41,7 @@ export function initRender (vm: Component) {\n   // this is used by internal abstract components like <keep-alive>.\n   if (vm.$options._abstract) {\n     let parent = vm.$parent\n+    /* istanbul ignore next */\n     while (parent && parent.$options._abstract) {\n       parent = parent.$parent\n     }"
            },
            {
                "commitId": "cb67ffe4429ebfbdf42b5d18e1e1b168109d472e",
                "additions": 15,
                "deletions": 2,
                "patch": "@@ -16,7 +16,7 @@ import {\n } from '../vdom/create-element'\n \n export const renderState: {\n-  activeInstance: Component | null\n+  activeInstance: ?Component\n } = {\n   activeInstance: null\n }\n@@ -35,6 +35,19 @@ export function initRender (vm: Component) {\n   ) {\n     return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n+  // for abstract components, determine first non-abstract parent\n+  // so that the children of abstract components are considered children\n+  // of the first non-abstract parent.\n+  // this is used by internal abstract components like <keep-alive>.\n+  if (vm.$options._abstract) {\n+    let parent = vm.$parent\n+    while (parent && parent.$options._abstract) {\n+      parent = parent.$parent\n+    }\n+    vm._renderParent = parent\n+  } else {\n+    vm._renderParent = vm\n+  }\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -48,7 +61,7 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n     const prev = renderState.activeInstance\n-    renderState.activeInstance = vm\n+    renderState.activeInstance = vm._renderParent\n     if (!vm._isMounted) {\n       // render static sub-trees for once on initial render\n       renderStaticTrees(vm)"
            },
            {
                "commitId": "113232f960c359bdbe56fac59b6f9e3b7cc9290a",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -66,7 +66,8 @@ export function renderMixin (Vue: Class<Component>) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n         warn(\n           'Multiple root nodes returned from render function. Render function ' +\n-          'should return a single root node.'\n+          'should return a single root node.',\n+          vm\n         )\n       }\n       vnode = emptyVNode"
            },
            {
                "commitId": "060fab9ec1d7df09312fb301f092b6790cf1cd46",
                "additions": 1,
                "deletions": 29,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, remove, isObject, toObject,\n+  warn, bind, isObject, toObject,\n   nextTick, resolveAsset, renderString\n } from '../util/index'\n \n@@ -120,34 +120,6 @@ export function renderMixin (Vue: Class<Component>) {\n     return ret\n   }\n \n-  // register ref\n-  Vue.prototype._r = function (\n-    key: string,\n-    ref: Vue | Element,\n-    vFor: boolean,\n-    isRemoval: boolean\n-  ) {\n-    const vm: Component = this\n-    const refs = vm.$refs\n-    if (isRemoval) {\n-      if (Array.isArray(refs[key])) {\n-        remove(refs[key], ref)\n-      } else {\n-        refs[key] = undefined\n-      }\n-    } else {\n-      if (vFor) {\n-        if (Array.isArray(refs[key])) {\n-          refs[key].push(ref)\n-        } else {\n-          refs[key] = [ref]\n-        }\n-      } else {\n-        refs[key] = ref\n-      }\n-    }\n-  }\n-\n   // apply v-bind object\n   Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n     if (value) {"
            },
            {
                "commitId": "43da334ec164a83aafcaa475e10611dbf0d941db",
                "additions": 6,
                "deletions": 0,
                "patch": "@@ -63,6 +63,12 @@ export function renderMixin (Vue: Class<Component>) {\n     let vnode = render.call(vm._renderProxy)\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n+      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n+        warn(\n+          'Multiple root nodes returned from render function. Render function ' +\n+          'should return a single root node.'\n+        )\n+      }\n       vnode = emptyVNode\n     }\n     // set parent"
            },
            {
                "commitId": "3a0557a317d6e8fd96bf543e7b71d39e4e7c257b",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -184,9 +184,8 @@ function resolveSlots (\n     const children = normalizeChildren(renderChildren)\n     const slots = {}\n     const defaultSlot = []\n-    let i = children.length\n     let name, child\n-    while (i--) {\n+    for (let i = 0, l = children.length; i < l; i++) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n         const slot = (slots[name] || (slots[name] = []))"
            },
            {
                "commitId": "cb915d012074e79b9f81a758ed0253ba4d98ebc4",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, remove, extend, isObject, toObject,\n+  warn, bind, remove, isObject, toObject,\n   nextTick, resolveAsset, renderString\n } from '../util/index'\n "
            },
            {
                "commitId": "8d229b2442e8cc5b2801fa55a4ea8ea766721381",
                "additions": 28,
                "deletions": 2,
                "patch": "@@ -1,9 +1,12 @@\n /* @flow */\n \n+import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n-import { resolveAsset, nextTick } from '../util/index'\n-import { bind, remove, extend, isObject, renderString } from 'shared/util'\n+import {\n+  warn, bind, remove, extend, isObject, toObject,\n+  nextTick, resolveAsset, renderString\n+} from '../util/index'\n \n import {\n   renderElement,\n@@ -138,6 +141,29 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n   }\n+\n+  // apply v-bind object\n+  Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n+    if (value) {\n+      if (!isObject(value)) {\n+        process.env.NODE_ENV !== 'production' && warn(\n+          'v-bind without argument expects an Object or Array value',\n+          this\n+        )\n+      } else {\n+        if (Array.isArray(value)) {\n+          value = toObject(value)\n+        }\n+        const data = vnode.data\n+        for (const key in value) {\n+          const hash = config.mustUseProp(key)\n+            ? data.props || (data.props = {})\n+            : data.attrs || (data.attrs = {})\n+          hash[key] = value[key]\n+        }\n+      }\n+    }\n+  }\n }\n \n function renderStaticTrees (vm: Component) {"
            },
            {
                "commitId": "54e648e49f3ef6e671a23430047c5c40b75809a7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -2,8 +2,8 @@\n \n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n-import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n+import { bind, remove, extend, isObject, renderString } from 'shared/util'\n \n import {\n   renderElement,"
            },
            {
                "commitId": "0a15d9ee27a9314c0192c6174509a230279ed344",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import { emptyVNode } from '../vdom/vnode'\n+import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n@@ -57,7 +57,11 @@ export function renderMixin (Vue: Class<Component>) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(vm._renderProxy) || emptyVNode\n+    let vnode = render.call(vm._renderProxy)\n+    // return empty vnode in case the render function errored out\n+    if (!(vnode instanceof VNode)) {\n+      vnode = emptyVNode\n+    }\n     // set parent\n     vnode.parent = _parentVnode\n     // restore render state"
            },
            {
                "commitId": "6fe268874ca2ea9297ca64830b38f8179d51fce2",
                "additions": 9,
                "deletions": 9,
                "patch": "@@ -30,7 +30,7 @@ export function initRender (vm: Component) {\n     children?: VNodeChildren,\n     namespace?: string\n   ) {\n-    return this.__r__(this.__s__(tag, data, namespace), children)\n+    return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n@@ -66,22 +66,22 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__r__ = renderElementWithChildren\n-  Vue.prototype.__s__ = renderElement\n-  Vue.prototype.__t__ = renderText\n-  Vue.prototype.__m__ = renderStatic\n+  Vue.prototype._h = renderElementWithChildren\n+  Vue.prototype._e = renderElement\n+  Vue.prototype._t = renderText\n+  Vue.prototype._m = renderStatic\n \n   // toString for mustaches\n-  Vue.prototype.__toString__ = renderString\n+  Vue.prototype._s = renderString\n \n   // filter resolution helper\n   const identity = _ => _\n-  Vue.prototype.__resolveFilter__ = function (id) {\n+  Vue.prototype._f = function (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }\n \n   // render v-for\n-  Vue.prototype.__renderList__ = function (\n+  Vue.prototype._l = function (\n     val: any,\n     render: () => VNode\n   ): ?Array<VNode> {\n@@ -108,7 +108,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // register ref\n-  Vue.prototype.__registerRef__ = function (\n+  Vue.prototype._r = function (\n     key: string,\n     ref: Vue | Element,\n     vFor: boolean,"
            },
            {
                "commitId": "2dc5b1782871d87a7c795361eac0d49fd396c05f",
                "additions": 9,
                "deletions": 3,
                "patch": "@@ -1,11 +1,17 @@\n /* @flow */\n \n-import { renderElement, renderSelf, renderText, renderStatic } from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n \n+import {\n+  renderElement,\n+  renderElementWithChildren,\n+  renderText,\n+  renderStatic\n+} from '../vdom/create-element'\n+\n export const renderState: {\n   activeInstance: Component | null\n } = {\n@@ -60,8 +66,8 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__r__ = renderElement\n-  Vue.prototype.__s__ = renderSelf\n+  Vue.prototype.__r__ = renderElementWithChildren\n+  Vue.prototype.__s__ = renderElement\n   Vue.prototype.__t__ = renderText\n   Vue.prototype.__m__ = renderStatic\n "
            },
            {
                "commitId": "20fb79a1ea098bedda6fec8bebbb184ac51fce20",
                "additions": 13,
                "deletions": 3,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import createElement from '../vdom/create-element'\n+import { renderElement, renderSelf, renderText, renderStatic } from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n@@ -18,7 +18,14 @@ export function initRender (vm: Component) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(createElement, vm)\n+  vm.$createElement = bind(function (\n+    tag?: string | Class<Component> | Function | Object,\n+    data?: VNodeData,\n+    children?: VNodeChildren,\n+    namespace?: string\n+  ) {\n+    return this.__r__(this.__s__(tag, data, namespace), children)\n+  }, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -53,7 +60,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__h__ = createElement\n+  Vue.prototype.__r__ = renderElement\n+  Vue.prototype.__s__ = renderSelf\n+  Vue.prototype.__t__ = renderText\n+  Vue.prototype.__m__ = renderStatic\n \n   // toString for mustaches\n   Vue.prototype.__toString__ = renderString"
            },
            {
                "commitId": "ff16f7491f546c5acd40ee2290caa5d553eff3be",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -1,6 +1,5 @@\n /* @flow */\n \n-import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n export function createRenderFunction ("
            },
            {
                "commitId": "45d96c7dbc399696138c9d020e13f97cf94ce181",
                "additions": 17,
                "deletions": 3,
                "patch": "@@ -8,7 +8,12 @@ export function createRenderFunction (\n   directives: Object,\n   isUnaryTag: Function\n ) {\n-  function renderNode (node: VNode, write: Function, next: Function, isRoot: boolean) {\n+  function renderNode (\n+    node: VNode,\n+    write: Function,\n+    next: Function,\n+    isRoot: boolean\n+  ) {\n     if (node.componentOptions) {\n       const child = createComponentInstanceForVnode(node)\n       renderNode(child._render(), write, next, isRoot)\n@@ -21,7 +26,12 @@ export function createRenderFunction (\n     }\n   }\n \n-  function renderElement (el: VNode, write: Function, next: Function, isRoot: boolean) {\n+  function renderElement (\n+    el: VNode,\n+    write: Function,\n+    next: Function,\n+    isRoot: boolean\n+  ) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}\n@@ -81,7 +91,11 @@ export function createRenderFunction (\n     return markup + '>'\n   }\n \n-  return function render (component: Component, write: Function, done: Function) {\n+  return function render (\n+    component: Component,\n+    write: (text: string, next: Function) => void,\n+    done: Function\n+  ) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "1b7ab89a5deb49fbdaec8fb474108863714f99a7",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -1,6 +1,5 @@\n /* @flow */\n \n-import type Vue from 'core/instance/index'\n import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n@@ -82,7 +81,7 @@ export function createRenderFunction (\n     return markup + '>'\n   }\n \n-  return function render (component: Vue, write: Function, done: Function) {\n+  return function render (component: Component, write: Function, done: Function) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "a953bdeeb642fafb0a5426f54f68026d26fe345f",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,7 +5,7 @@ import type VNode from '../vdom/vnode'\n import createElement from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n-import { bind, remove, isArray, isObject, renderString } from 'shared/util'\n+import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n \n export const renderState = {\n@@ -69,7 +69,7 @@ export function renderMixin (Vue: Class<Vue>) {\n     render: () => VNode\n   ): ?Array<VNode> {\n     let ret: ?Array<VNode>, i, l, keys, key\n-    if (isArray(val)) {\n+    if (Array.isArray(val)) {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n         ret[i] = render(val[i], i, i)"
            },
            {
                "commitId": "354ea616b5ec4826e23a88465e404fd3b382d9f4",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -1,5 +1,7 @@\n /* @flow */\n \n+import type Vue from 'core/instance/index'\n+import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n export function createRenderFunction ("
            },
            {
                "commitId": "6d712753d8982d587d1dcfdbce2833f19f0b5a26",
                "additions": 17,
                "deletions": 10,
                "patch": "@@ -1,7 +1,13 @@\n+/* @flow */\n+\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-export function createRenderFunction (modules, directives, isUnaryTag) {\n-  function renderNode (node, write, next, isRoot) {\n+export function createRenderFunction (\n+  modules: Array<Function>,\n+  directives: Object,\n+  isUnaryTag: Function\n+) {\n+  function renderNode (node: VNode, write: Function, next: Function, isRoot: boolean) {\n     if (node.componentOptions) {\n       const child = createComponentInstanceForVnode(node)\n       renderNode(child._render(), write, next, isRoot)\n@@ -14,7 +20,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  function renderElement (el, write, next, isRoot) {\n+  function renderElement (el: VNode, write: Function, next: Function, isRoot: boolean) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}\n@@ -27,27 +33,28 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     } else if (!el.children || !el.children.length) {\n       write(startTag + endTag, next)\n     } else {\n+      const children: Array<VNode> = el.children || []\n       write(startTag, () => {\n-        const total = el.children.length\n+        const total = children.length\n         let rendered = 0\n \n-        function renderChild (child) {\n+        function renderChild (child: VNode) {\n           renderNode(child, write, () => {\n             rendered++\n             if (rendered < total) {\n-              renderChild(el.children[rendered])\n+              renderChild(children[rendered])\n             } else {\n               write(endTag, next)\n             }\n-          })\n+          }, false)\n         }\n \n-        renderChild(el.children[0])\n+        renderChild(children[0])\n       })\n     }\n   }\n \n-  function renderStartingTag (node) {\n+  function renderStartingTag (node: VNode) {\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -73,7 +80,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     return markup + '>'\n   }\n \n-  return function render (component, write, done) {\n+  return function render (component: Vue, write: Function, done: Function) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "76d06ba422e32303f906941fe0d4f19e51b30720",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -1,3 +1,4 @@\n+import config from '../config'\n import createElement from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n@@ -25,6 +26,12 @@ export function renderMixin (Vue) {\n     nextTick(fn, this)\n   }\n \n+  Object.defineProperty(Vue.prototype, '$isServer', {\n+    get () {\n+      return config._isServer\n+    }\n+  })\n+\n   Vue.prototype._render = function () {\n     if (!this._mounted) {\n       // render static sub-trees for once on initial render"
            },
            {
                "commitId": "6593be9f75ea229e71e5b0530bb0f27aeee57afc",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,4 +1,5 @@\n import createElement from '../vdom/create-element'\n+import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n@@ -38,7 +39,7 @@ export function renderMixin (Vue) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(this._renderProxy)\n+    const vnode = render.call(this._renderProxy) || emptyVNode\n     // set parent\n     vnode.parent = _parentVnode\n     // restore render state"
            },
            {
                "commitId": "8172e7e25728a696df32df063443cf3d7cc8029b",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -74,7 +74,6 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n   }\n \n   return function render (component, write, done) {\n-    component._renderStaticTrees()\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "8f5a32b91cca7901c47f27d983649d00eef35609",
                "additions": 4,
                "deletions": 19,
                "patch": "@@ -1,25 +1,10 @@\n+import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n+\n export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n-      const options = {\n-        parent,\n-        propsData,\n-        _parentVnode: node,\n-        _parentListeners: listeners,\n-        _renderChildren: children\n-      }\n-      // check inline-template render functions\n-      const inlineTemplate = node.data.inlineTemplate\n-      if (inlineTemplate) {\n-        options.render = inlineTemplate.render\n-        options.staticRenderFns = inlineTemplate.staticRenderFns\n-      }\n-      const child = new Ctor(options)\n-      child._renderStaticTrees()\n-      const childRoot = child._render()\n-      childRoot.parent = node\n-      renderNode(childRoot, write, next, isRoot)\n+      const child = createComponentInstanceForVnode(node)\n+      renderNode(child._render(), write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)"
            },
            {
                "commitId": "2b7c26d108b31e0cf91f4931fe5b19e77f75bb7e",
                "additions": 31,
                "deletions": 8,
                "patch": "@@ -1,5 +1,3 @@\n-import { renderStartingTag } from './render-starting-tag'\n-\n export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n@@ -18,11 +16,10 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n         options.staticRenderFns = inlineTemplate.staticRenderFns\n       }\n       const child = new Ctor(options)\n-      child._mount = () => {\n-        child._renderStaticTrees()\n-        renderNode(child._render(), write, next)\n-      }\n-      child.$mount(node.elm)\n+      child._renderStaticTrees()\n+      const childRoot = child._render()\n+      childRoot.parent = node\n+      renderNode(childRoot, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -38,7 +35,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n       if (!el.data.attrs) el.data.attrs = {}\n       el.data.attrs['server-rendered'] = 'true'\n     }\n-    const startTag = renderStartingTag(el, modules, directives)\n+    const startTag = renderStartingTag(el)\n     const endTag = `</${el.tag}>`\n     if (isUnaryTag(el.tag)) {\n       write(startTag, next)\n@@ -65,6 +62,32 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     }\n   }\n \n+  function renderStartingTag (node) {\n+    let markup = `<${node.tag}`\n+    if (node.data) {\n+      // check directives\n+      const dirs = node.data.directives\n+      if (dirs) {\n+        for (let i = 0; i < dirs.length; i++) {\n+          const dirRenderer = directives[dirs[i].name]\n+          if (dirRenderer) {\n+            // directives mutate the node's data\n+            // which then gets rendered by modules\n+            dirRenderer(node, dirs[i])\n+          }\n+        }\n+      }\n+      // apply other modules\n+      for (let i = 0; i < modules.length; i++) {\n+        const res = modules[i](node)\n+        if (res) {\n+          markup += res\n+        }\n+      }\n+    }\n+    return markup + '>'\n+  }\n+\n   return function render (component, write, done) {\n     component._renderStaticTrees()\n     renderNode(component._render(), write, done, true)"
            },
            {
                "commitId": "430fe64bb5907cefc21b8f670f86f268f68e5ad8",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,6 +1,6 @@\n import { renderStartingTag } from './render-starting-tag'\n \n-export function render (modules, directives, isUnaryTag) {\n+export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n       const { Ctor, propsData, listeners, parent, children } = node.componentOptions"
            },
            {
                "commitId": "270b0ac021ee5bfff6b2ed1eacaf91a09f2a9d5e",
                "additions": 24,
                "deletions": 13,
                "patch": "@@ -1,16 +1,28 @@\n-import RenderStream from './render-stream'\n import { renderStartingTag } from './render-starting-tag'\n \n-export function createStreamingRenderer (modules, directives, isUnaryTag) {\n-  function renderComponent (component, write, next, isRoot) {\n-    component.$mount()\n-    renderNode(component._vnode, write, next, isRoot)\n-  }\n-\n+export function render (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      node.data.hook.init(node)\n-      renderComponent(node.child, write, next, isRoot)\n+      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n+      const options = {\n+        parent,\n+        propsData,\n+        _parentVnode: node,\n+        _parentListeners: listeners,\n+        _renderChildren: children\n+      }\n+      // check inline-template render functions\n+      const inlineTemplate = node.data.inlineTemplate\n+      if (inlineTemplate) {\n+        options.render = inlineTemplate.render\n+        options.staticRenderFns = inlineTemplate.staticRenderFns\n+      }\n+      const child = new Ctor(options)\n+      child._mount = () => {\n+        child._renderStaticTrees()\n+        renderNode(child._render(), write, next)\n+      }\n+      child.$mount(node.elm)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -53,9 +65,8 @@ export function createStreamingRenderer (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  return function renderToStream (component) {\n-    return new RenderStream((write, done) => {\n-      renderComponent(component, write, done, true)\n-    })\n+  return function render (component, write, done) {\n+    component._renderStaticTrees()\n+    renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "96f02660a2f72cf2b2f4087f51a24942f55af7dd",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,7 +1,7 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n-import { resolveAsset } from '../util/options'\n+import { resolveAsset, nextTick } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -21,6 +21,10 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  Vue.prototype.$nextTick = function (fn) {\n+    nextTick(fn, this)\n+  }\n+\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this"
            },
            {
                "commitId": "d89c674cb53128f21bac25962760fff8bd5917b5",
                "additions": 22,
                "deletions": 8,
                "patch": "@@ -1,15 +1,28 @@\n import { renderStartingTag } from './render-starting-tag'\n \n export function render (modules, directives, isUnaryTag) {\n-  function renderComponent (component, write, next, isRoot) {\n-    component.$mount()\n-    renderNode(component._vnode, write, next, isRoot)\n-  }\n-\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      node.data.hook.init(node)\n-      renderComponent(node.child, write, next, isRoot)\n+      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n+      const options = {\n+        parent,\n+        propsData,\n+        _parentVnode: node,\n+        _parentListeners: listeners,\n+        _renderChildren: children\n+      }\n+      // check inline-template render functions\n+      const inlineTemplate = node.data.inlineTemplate\n+      if (inlineTemplate) {\n+        options.render = inlineTemplate.render\n+        options.staticRenderFns = inlineTemplate.staticRenderFns\n+      }\n+      const child = new Ctor(options)\n+      child._mount = () => {\n+        child._renderStaticTrees()\n+        renderNode(child._render(), write, next)\n+      }\n+      child.$mount(node.elm)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -53,6 +66,7 @@ export function render (modules, directives, isUnaryTag) {\n   }\n \n   return function render (component, write, done) {\n-    renderComponent(component, write, done, true)\n+    component._renderStaticTrees()\n+    renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "a233e4dbfae51173aefc4a1329aa0415d632ca25",
                "additions": 3,
                "deletions": 6,
                "patch": "@@ -1,7 +1,6 @@\n-import RenderStream from './render-stream'\n import { renderStartingTag } from './render-starting-tag'\n \n-export function createStreamingRenderer (modules, directives, isUnaryTag) {\n+export function render (modules, directives, isUnaryTag) {\n   function renderComponent (component, write, next, isRoot) {\n     component.$mount()\n     renderNode(component._vnode, write, next, isRoot)\n@@ -53,9 +52,7 @@ export function createStreamingRenderer (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  return function renderToStream (component) {\n-    return new RenderStream((write, done) => {\n-      renderComponent(component, write, done, true)\n-    })\n+  return function render (component, write, done) {\n+    renderComponent(component, write, done, true)\n   }\n }"
            },
            {
                "commitId": "9cc9393e73750943b9a254f80a02110144ee0288",
                "additions": 10,
                "deletions": 2,
                "patch": "@@ -99,7 +99,8 @@ export function renderMixin (Vue) {\n function resolveSlots (vm, renderChildren) {\n   if (renderChildren) {\n     const children = flatten(renderChildren())\n-    const slots = { default: children }\n+    const slots = {}\n+    const defaultSlot = []\n     let i = children.length\n     let name, child\n     while (i--) {\n@@ -111,9 +112,16 @@ function resolveSlots (vm, renderChildren) {\n         } else {\n           slot.push(child)\n         }\n-        children.splice(i, 1)\n+      } else {\n+        defaultSlot.push(child)\n       }\n     }\n+    if (defaultSlot.length && !(\n+      defaultSlot.length === 1 &&\n+      defaultSlot[0].text === ' '\n+    )) {\n+      slots['default'] = defaultSlot\n+    }\n     vm.$slots = slots\n   }\n }"
            },
            {
                "commitId": "3aa7503472d1a2fbfd789a7df309102de49f8fcf",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -105,7 +105,7 @@ function resolveSlots (vm, renderChildren) {\n     while (i--) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n-        let slot = (slots[name] || (slots[name] = []))\n+        const slot = (slots[name] || (slots[name] = []))\n         if (child.tag === 'template') {\n           slot.push.apply(slot, child.children)\n         } else {"
            },
            {
                "commitId": "9ff87a357eba00e40d44a2d5a25f6ac44fca70b9",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -1,6 +1,7 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n+import { resolveAsset } from '../util/options'\n \n export const renderState = {\n   activeInstance: null\n@@ -42,6 +43,12 @@ export function renderMixin (Vue) {\n   // toString for mustaches\n   Vue.prototype.__toString__ = renderString\n \n+  // filter resolution helper\n+  const identity = _ => _\n+  Vue.prototype.__resolveFilter__ = function (id) {\n+    return resolveAsset(this.$options, 'filters', id, true) || identity\n+  }\n+\n   // render v-for\n   Vue.prototype.__renderList__ = function (val, render) {\n     let ret, i, l, keys, key"
            },
            {
                "commitId": "6d889c011680f231ed5036b9233f23764c43e16a",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -89,9 +89,9 @@ export function renderMixin (Vue) {\n   }\n }\n \n-function resolveSlots (vm, children) {\n-  if (children) {\n-    children = flatten(isArray(children) ? children : children())\n+function resolveSlots (vm, renderChildren) {\n+  if (renderChildren) {\n+    const children = flatten(renderChildren())\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "a347820518388ae8c83cf8c665823daebfbd0da8",
                "additions": 2,
                "deletions": 8,
                "patch": "@@ -1,6 +1,6 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n-import { bind, isArray, isObject } from '../util/index'\n+import { bind, isArray, isObject, renderString } from 'shared/util'\n \n export const renderState = {\n   activeInstance: null\n@@ -40,13 +40,7 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = createElement\n \n   // toString for mustaches\n-  Vue.prototype.__toString__ = function (val) {\n-    return val == null\n-      ? ''\n-      : typeof val === 'object'\n-        ? JSON.stringify(val, null, 2)\n-        : val\n-  }\n+  Vue.prototype.__toString__ = renderString\n \n   // render v-for\n   Vue.prototype.__renderList__ = function (val, render) {"
            },
            {
                "commitId": "f4a2afb3b33991c1694e8fcb7d62641c30eeaf53",
                "additions": 1,
                "deletions": 18,
                "patch": "@@ -1,6 +1,6 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n-import { bind, resolveAsset, isArray, isObject } from '../util/index'\n+import { bind, isArray, isObject } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -39,23 +39,6 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n-  Vue.prototype.__static__ = function (id) {\n-    return this._staticTrees[id]\n-  }\n-\n-  // resolve directive\n-  Vue.prototype.__resolveDirective__ = function (id) {\n-    return resolveAsset(this.$options, 'directives', id, true)\n-  }\n-\n-  // resolve transition\n-  Vue.prototype.__resolveTransition__ = function (id, appear) {\n-    const definition = id && typeof id === 'string'\n-      ? resolveAsset(this.$options, 'transitions', id) || id\n-      : id\n-    return { definition, appear, context: this }\n-  }\n-\n   // toString for mustaches\n   Vue.prototype.__toString__ = function (val) {\n     return val == null"
            },
            {
                "commitId": "d6ce314c35bcc2a05d30ed14f18b21b5b81d928d",
                "additions": 0,
                "deletions": 7,
                "patch": "@@ -1,7 +0,0 @@\n-import attrs from './modules/attrs'\n-import style from './modules/style'\n-import klass from './modules/class'\n-\n-export function render () {\n-\n-}"
            },
            {
                "commitId": "1a21db9c9aef437122de86cb2dbc30c1feff8166",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -0,0 +1,7 @@\n+import attrs from './modules/attrs'\n+import style from './modules/style'\n+import klass from './modules/class'\n+\n+export function render () {\n+\n+}"
            },
            {
                "commitId": "955e2f839175fadbd0218f7b78c48ebbbcca6349",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "b882844f6ed8fb9e7d0ba493fcdd10a95d17b497",
                "additions": 5,
                "deletions": 0,
                "patch": "@@ -9,6 +9,7 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n+  vm._staticTrees = null\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -38,6 +39,10 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n+  Vue.prototype.__static__ = function (id) {\n+    return this._staticTrees[id]\n+  }\n+\n   // resolve directive\n   Vue.prototype.__resolveDirective__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)"
            },
            {
                "commitId": "6c8182ee4d3e60ee46d6fece9a21c7f59ae0e61c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -89,7 +89,7 @@ export function renderMixin (Vue) {\n     const refs = this.$refs\n     if (remove) {\n       if (vFor) {\n-        refs[key].$remove(ref)\n+        remove(refs[key], ref)\n       } else {\n         refs[key] = undefined\n       }"
            },
            {
                "commitId": "732c10a7e9559d26b0a54681d2bd90ddad63da52",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -44,10 +44,11 @@ export function renderMixin (Vue) {\n   }\n \n   // resolve transition\n-  Vue.prototype.__resolveTransition__ = function (id) {\n-    return id && typeof id === 'string'\n+  Vue.prototype.__resolveTransition__ = function (id, appear) {\n+    const definition = id && typeof id === 'string'\n       ? resolveAsset(this.$options, 'transitions', id) || id\n       : id\n+    return { definition, appear, context: this }\n   }\n \n   // toString for mustaches"
            },
            {
                "commitId": "7f7040c156951b392fb6ef75d15be65fd83007a0",
                "additions": 18,
                "deletions": 48,
                "patch": "@@ -1,13 +1,6 @@\n-import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten, updateListeners } from '../vdom/helpers'\n-import {\n-  bind,\n-  resolveAsset,\n-  isArray,\n-  isObject,\n-  validateProp\n-} from '../util/index'\n+import { flatten } from '../vdom/helpers'\n+import { bind, resolveAsset, isArray, isObject } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -26,6 +19,22 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  Vue.prototype._render = function () {\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const { render, _renderChildren } = this.$options\n+    // resolve slots. becaues slots are rendered in parent scope,\n+    // we set the activeInstance to parent.\n+    if (_renderChildren) {\n+      resolveSlots(this, _renderChildren)\n+    }\n+    // render self\n+    const vnode = render.call(this._renderProxy)\n+    // restore render state\n+    renderState.activeInstance = prev\n+    return vnode\n+  }\n+\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n@@ -95,45 +104,6 @@ export function renderMixin (Vue) {\n       }\n     }\n   }\n-\n-  Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, children) {\n-    this.$options._parentVnode = parentVnode\n-    this.$options._renderChildren = children\n-    // update props\n-    if (propsData && this.$options.props) {\n-      observerState.shouldConvert = false\n-      const propKeys = this.$options.propKeys\n-      for (let i = 0; i < propKeys.length; i++) {\n-        let key = propKeys[i]\n-        this[key] = validateProp(this, key, propsData)\n-      }\n-      observerState.shouldConvert = true\n-    }\n-    // update listeners\n-    if (listeners) {\n-      const oldListeners = this.$options._parentListeners\n-      this.$options._parentListeners = listeners\n-      updateListeners(listeners, oldListeners || {}, (event, handler) => {\n-        this.$on(event, handler)\n-      })\n-    }\n-  }\n-\n-  Vue.prototype._render = function () {\n-    const prev = renderState.activeInstance\n-    renderState.activeInstance = this\n-    const { render, _renderChildren } = this.$options\n-    // resolve slots. becaues slots are rendered in parent scope,\n-    // we set the activeInstance to parent.\n-    if (_renderChildren) {\n-      resolveSlots(this, _renderChildren)\n-    }\n-    // render self\n-    const vnode = render.call(this._renderProxy)\n-    // restore render state\n-    renderState.activeInstance = prev\n-    return vnode\n-  }\n }\n \n function resolveSlots (vm, children) {"
            },
            {
                "commitId": "23c253012f8f58848c33445f4f8ea045453029bf",
                "additions": 10,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten } from '../vdom/helpers'\n+import { flatten, updateListeners } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n@@ -96,7 +96,7 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._updateFromParent = function (propsData, parentVnode, children) {\n+  Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, children) {\n     this.$options._parentVnode = parentVnode\n     this.$options._renderChildren = children\n     // update props\n@@ -109,6 +109,14 @@ export function renderMixin (Vue) {\n       }\n       observerState.shouldConvert = true\n     }\n+    // update listeners\n+    if (listeners) {\n+      const oldListeners = this.$options._parentListeners\n+      this.$options._parentListeners = listeners\n+      updateListeners(listeners, oldListeners || {}, (event, handler) => {\n+        this.$on(event, handler)\n+      })\n+    }\n   }\n \n   Vue.prototype._render = function () {"
            },
            {
                "commitId": "1b9343f7e0d3930d85419b97a03998583297c083",
                "additions": 13,
                "deletions": 133,
                "patch": "@@ -1,12 +1,12 @@\n import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten, updateListeners } from '../vdom/helpers'\n+import { flatten } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n   isArray,\n   isObject,\n-  getPropValue\n+  validateProp\n } from '../util/index'\n \n export const renderState = {\n@@ -96,40 +96,32 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._updateFromParent = function (parentData, children, key) {\n-    const oldParentData = this.$options._renderData\n-    this.$options._renderData = parentData\n+  Vue.prototype._updateFromParent = function (propsData, parentVnode, children) {\n+    this.$options._parentVnode = parentVnode\n     this.$options._renderChildren = children\n-    // update props and listeners\n-    if (parentData) {\n-      updateEvents(this, parentData, oldParentData)\n-      // if any prop has changed it would trigger and queue an update,\n-      // but if no props changed, nothing happens\n-      const propsChanged = updateProps(this, parentData)\n-      // diff parent data (attrs on the placeholder) and queue update\n-      // if anything changed. only do this if props didn't change, because\n-      // if props changed then an update has already been queued.\n-      if (!propsChanged && parentDataChanged(parentData, oldParentData)) {\n-        this.$forceUpdate()\n+    // update props\n+    if (propsData && this.$options.props) {\n+      observerState.shouldConvert = false\n+      const propKeys = this.$options.propKeys\n+      for (let i = 0; i < propKeys.length; i++) {\n+        let key = propKeys[i]\n+        this[key] = validateProp(this, key, propsData)\n       }\n+      observerState.shouldConvert = true\n     }\n   }\n \n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const { render, _renderData, _renderChildren } = this.$options\n+    const { render, _renderChildren } = this.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n     const vnode = render.call(this._renderProxy)\n-    // update parent data\n-    if (_renderData) {\n-      mergeParentData(this, vnode.data, _renderData)\n-    }\n     // restore render state\n     renderState.activeInstance = prev\n     return vnode\n@@ -157,115 +149,3 @@ function resolveSlots (vm, children) {\n     vm.$slots = slots\n   }\n }\n-\n-const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives', 'transition']\n-function parentDataChanged (data, oldData) {\n-  let key, old, cur, i, l, j, k\n-  for (i = 0, l = keysToDiff.length; i < l; i++) {\n-    key = keysToDiff[i]\n-    cur = data[key]\n-    old = oldData[key]\n-    if (!old) {\n-      if (!cur) {\n-        continue\n-      } else {\n-        return true\n-      }\n-    }\n-    if (isArray(old)) {\n-      if (!isArray(cur)) return true\n-      if (cur.length !== old.length) return true\n-      for (j = 0, k = old.length; j < k; j++) {\n-        if (isObject(old[i])) {\n-          if (!isObject(cur[i])) return true\n-          if (diffObject(cur, old)) return true\n-        } else if (old[i] !== cur[i]) {\n-          return true\n-        }\n-      }\n-    } else if (diffObject(cur, old)) {\n-      return true\n-    }\n-  }\n-  return false\n-}\n-\n-function diffObject (cur, old) {\n-  for (let key in old) {\n-    if (cur[key] !== old[key]) return true\n-  }\n-}\n-\n-function mergeParentData (vm, data, parentData) {\n-  const props = vm.$options.props\n-  if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = {})\n-    for (let key in parentData.attrs) {\n-      if (!props || !props[key]) {\n-        attrs[key] = parentData.attrs[key]\n-      }\n-    }\n-  }\n-  if (parentData.props) {\n-    const props = data.props || (data.props = {})\n-    for (let key in parentData.props) {\n-      if (!props || !props[key]) {\n-        props[key] = parentData.props[key]\n-      }\n-    }\n-  }\n-  if (parentData.staticClass) {\n-    data.staticClass = data.staticClass\n-      ? data.staticClass + ' ' + parentData.staticClass\n-      : parentData.staticClass\n-  }\n-  if (parentData.class) {\n-    if (!data.class) {\n-      data.class = parentData.class\n-    } else {\n-      data.class = (isArray(data.class) ? data.class : []).concat(parentData.class)\n-    }\n-  }\n-  if (parentData.style) {\n-    if (!data.style) {\n-      data.style = parentData.style\n-    } else {\n-      data.style = (isArray(data.style) ? data.style : []).concat(parentData.style)\n-    }\n-  }\n-  if (parentData.directives) {\n-    data.directives = parentData.directives.concat(data.directives || [])\n-  }\n-  if (parentData.transition != null) {\n-    data.transition = parentData.transition\n-  }\n-}\n-\n-function updateProps (vm, data) {\n-  let changed = false\n-  if (data.attrs || data.props) {\n-    let keys = vm.$options.propKeys\n-    if (keys) {\n-      observerState.shouldConvert = false\n-      for (let i = 0; i < keys.length; i++) {\n-        let key = keys[i]\n-        let oldVal = vm[key]\n-        let newVal = getPropValue(data, key, vm)\n-        if (oldVal !== newVal) {\n-          vm[key] = newVal\n-          changed = true\n-        }\n-      }\n-      observerState.shouldConvert = true\n-    }\n-  }\n-  return changed\n-}\n-\n-function updateEvents (vm, data, oldData) {\n-  if (data.on) {\n-    updateListeners(data.on, oldData.on || {}, (event, handler) => {\n-      vm.$on(event, handler)\n-    })\n-  }\n-}"
            },
            {
                "commitId": "7b97d97e2fff49c84fc5048eda9d5ab8daf0ec7f",
                "additions": 4,
                "deletions": 1,
                "patch": "@@ -158,7 +158,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives']\n+const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives', 'transition']\n function parentDataChanged (data, oldData) {\n   let key, old, cur, i, l, j, k\n   for (i = 0, l = keysToDiff.length; i < l; i++) {\n@@ -236,6 +236,9 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.concat(data.directives || [])\n   }\n+  if (parentData.transition != null) {\n+    data.transition = parentData.transition\n+  }\n }\n \n function updateProps (vm, data) {"
            },
            {
                "commitId": "52ac04d2355a91957388a4bee336fa044d9ad57c",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -34,6 +34,13 @@ export function renderMixin (Vue) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  // resolve transition\n+  Vue.prototype.__resolveTransition__ = function (id) {\n+    return id && typeof id === 'string'\n+      ? resolveAsset(this.$options, 'transitions', id) || id\n+      : id\n+  }\n+\n   // toString for mustaches\n   Vue.prototype.__toString__ = function (val) {\n     return val == null"
            },
            {
                "commitId": "4512406f775a6c258fa13400358d25d8a37892c7",
                "additions": 3,
                "deletions": 27,
                "patch": "@@ -1,11 +1,6 @@\n-import { callHook } from './lifecycle'\n import { observerState } from '../observer/index'\n-import {\n-  createElement,\n-  patch,\n-  updateListeners,\n-  flatten\n-} from '../vdom/index'\n+import createElement from '../vdom/create-element'\n+import { flatten, updateListeners } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n@@ -24,7 +19,7 @@ export function initRender (vm) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(vm.__h__, vm)\n+  vm.$createElement = bind(createElement, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -94,21 +89,6 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._update = function (vnode) {\n-    if (this._mounted) {\n-      callHook(this, 'beforeUpdate')\n-    }\n-    if (!this._vnode) {\n-      this.$el = patch(this.$el, vnode)\n-    } else {\n-      this.$el = patch(this._vnode, vnode)\n-    }\n-    this._vnode = vnode\n-    if (this._mounted) {\n-      callHook(this, 'updated')\n-    }\n-  }\n-\n   Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n     this.$options._renderData = parentData\n@@ -147,10 +127,6 @@ export function renderMixin (Vue) {\n     renderState.activeInstance = prev\n     return vnode\n   }\n-\n-  Vue.prototype.$forceUpdate = function () {\n-    this._watcher.update()\n-  }\n }\n \n function resolveSlots (vm, children) {"
            },
            {
                "commitId": "a1ebdbbb7a34f842d090e208863be7168eaa9803",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -138,7 +138,7 @@ export function renderMixin (Vue) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(this)\n+    const vnode = render.call(this._renderProxy)\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)"
            },
            {
                "commitId": "c13bbcb32794fbb443a4f86d3b0526951ca3f7ba",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -251,7 +251,7 @@ function mergeParentData (vm, data, parentData) {\n     }\n   }\n   if (parentData.directives) {\n-    data.directives = parentData.directives.conact(data.directives || [])\n+    data.directives = parentData.directives.concat(data.directives || [])\n   }\n }\n "
            },
            {
                "commitId": "86bc00e0e57076a1a7a6d64ddb3f97d1a455be46",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -8,7 +8,6 @@ import {\n } from '../vdom/index'\n import {\n   bind,\n-  extend,\n   resolveAsset,\n   isArray,\n   isObject,\n@@ -248,7 +247,7 @@ function mergeParentData (vm, data, parentData) {\n     if (!data.style) {\n       data.style = parentData.style\n     } else {\n-      extend(data.style, parentData.style)\n+      data.style = (isArray(data.style) ? data.style : []).concat(parentData.style)\n     }\n   }\n   if (parentData.directives) {"
            },
            {
                "commitId": "24ef7f489a0f2452266974b1f01648e504e7bc96",
                "additions": 1,
                "deletions": 4,
                "patch": "@@ -209,10 +209,7 @@ function parentDataChanged (data, oldData) {\n }\n \n function diffObject (cur, old) {\n-  const keys = Object.keys(old)\n-  let i, l, key\n-  for (i = 0, l = keys.length; i < l; i++) {\n-    key = keys[i]\n+  for (let key in old) {\n     if (cur[key] !== old[key]) return true\n   }\n }"
            },
            {
                "commitId": "368b2ff03a61fa4879ea4c69ba4b9fa71387d298",
                "additions": 27,
                "deletions": 3,
                "patch": "@@ -36,21 +36,45 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = createElement\n \n   // resolve directive\n-  Vue.prototype.__d__ = function (id) {\n+  Vue.prototype.__resolveDirective__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n   // toString for mustaches\n-  Vue.prototype.__s__ = function (val) {\n+  Vue.prototype.__toString__ = function (val) {\n     return val == null\n       ? ''\n       : typeof val === 'object'\n         ? JSON.stringify(val, null, 2)\n         : val\n   }\n \n+  // render v-for\n+  Vue.prototype.__renderList__ = function (val, render) {\n+    let ret, i, l, keys, key\n+    if (isArray(val)) {\n+      ret = new Array(val.length)\n+      for (i = 0, l = val.length; i < l; i++) {\n+        ret[i] = render(val[i], i, i)\n+      }\n+    } else if (typeof val === 'number') {\n+      ret = new Array(val)\n+      for (i = 0; i < val; i++) {\n+        ret[i] = render(i + 1, i, i)\n+      }\n+    } else if (isObject(val)) {\n+      keys = Object.keys(val)\n+      ret = new Array(keys.length)\n+      for (i = 0, l = keys.length; i < l; i++) {\n+        key = keys[i]\n+        ret[i] = render(val[key], i, key)\n+      }\n+    }\n+    return ret\n+  }\n+\n   // register ref\n-  Vue.prototype.__r__ = function (key, ref, vFor, remove) {\n+  Vue.prototype.__registerRef__ = function (key, ref, vFor, remove) {\n     const refs = this.$refs\n     if (remove) {\n       if (vFor) {"
            },
            {
                "commitId": "d6bef7957541e38cec3051eb4d8c54bda3280eaf",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -1,4 +1,5 @@\n import { callHook } from './lifecycle'\n+import { observerState } from '../observer/index'\n import {\n   createElement,\n   patch,\n@@ -197,15 +198,15 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.attrs) {\n     const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n-      if (!props[key]) {\n+      if (!props || !props[key]) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n     const props = data.props || (data.props = {})\n     for (let key in parentData.props) {\n-      if (!props[key]) {\n+      if (!props || !props[key]) {\n         props[key] = parentData.props[key]\n       }\n     }\n@@ -239,6 +240,7 @@ function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n     let keys = vm.$options.propKeys\n     if (keys) {\n+      observerState.shouldConvert = false\n       for (let i = 0; i < keys.length; i++) {\n         let key = keys[i]\n         let oldVal = vm[key]\n@@ -248,6 +250,7 @@ function updateProps (vm, data) {\n           changed = true\n         }\n       }\n+      observerState.shouldConvert = true\n     }\n   }\n   return changed"
            },
            {
                "commitId": "7b2dc500b7a06381716639acea21d0fcf3b8b732",
                "additions": 22,
                "deletions": 0,
                "patch": "@@ -48,6 +48,28 @@ export function renderMixin (Vue) {\n         : val\n   }\n \n+  // register ref\n+  Vue.prototype.__r__ = function (key, ref, vFor, remove) {\n+    const refs = this.$refs\n+    if (remove) {\n+      if (vFor) {\n+        refs[key].$remove(ref)\n+      } else {\n+        refs[key] = undefined\n+      }\n+    } else {\n+      if (vFor) {\n+        if (refs[key]) {\n+          refs[key].push(ref)\n+        } else {\n+          refs[key] = [ref]\n+        }\n+      } else {\n+        refs[key] = ref\n+      }\n+    }\n+  }\n+\n   Vue.prototype._update = function (vnode) {\n     if (this._mounted) {\n       callHook(this, 'beforeUpdate')"
            },
            {
                "commitId": "c2ad444982541faa8b7e0a652e68d4d0f6ef4bc6",
                "additions": 6,
                "deletions": 18,
                "patch": "@@ -6,6 +6,7 @@ import {\n   flatten\n } from '../vdom/index'\n import {\n+  bind,\n   extend,\n   resolveAsset,\n   isArray,\n@@ -14,14 +15,16 @@ import {\n } from '../util/index'\n \n export const renderState = {\n-  activeInstance: null,\n-  context: null\n+  activeInstance: null\n }\n \n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm.$slots = {}\n+  // bind the public createElement fn to this instance\n+  // so that we get proper render context inside it.\n+  vm.$createElement = bind(vm.__h__, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -79,21 +82,6 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  /**\n-   * Call a render function with this instance as the context.\n-   * This is used to wrap all children thunks in codegen.\n-   */\n-\n-  Vue.prototype._renderWithContext = function (fn) {\n-    return () => {\n-      const prev = renderState.context\n-      renderState.context = this\n-      const children = flatten(fn())\n-      renderState.context = prev\n-      return children\n-    }\n-  }\n-\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n@@ -121,7 +109,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children()\n+    children = flatten(isArray(children) ? children : children())\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "78e82bb8e454fcac088f4b40ec66e424c84dab89",
                "additions": 14,
                "deletions": 3,
                "patch": "@@ -1,6 +1,17 @@\n-import { extend, resolveAsset, isArray, isObject, getPropValue } from '../util/index'\n-import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n+import {\n+  createElement,\n+  patch,\n+  updateListeners,\n+  flatten\n+} from '../vdom/index'\n+import {\n+  extend,\n+  resolveAsset,\n+  isArray,\n+  isObject,\n+  getPropValue\n+} from '../util/index'\n \n export const renderState = {\n   activeInstance: null,\n@@ -110,7 +121,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children().slice()\n+    children = children()\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "d3c64fa6a67faf610466277caf9c839dd11d1934",
                "additions": 13,
                "deletions": 5,
                "patch": "@@ -55,13 +55,14 @@ export function renderMixin (Vue) {\n     this.$options._renderChildren = children\n     // update props and listeners\n     if (parentData) {\n+      updateEvents(this, parentData, oldParentData)\n       // if any prop has changed it would trigger and queue an update,\n       // but if no props changed, nothing happens\n-      updateProps(this, parentData)\n-      updateEvents(this, parentData, oldParentData)\n+      const propsChanged = updateProps(this, parentData)\n       // diff parent data (attrs on the placeholder) and queue update\n-      // if anything changed\n-      if (parentDataChanged(parentData, oldParentData)) {\n+      // if anything changed. only do this if props didn't change, because\n+      // if props changed then an update has already been queued.\n+      if (!propsChanged && parentDataChanged(parentData, oldParentData)) {\n         this.$forceUpdate()\n       }\n     }\n@@ -213,15 +214,22 @@ function mergeParentData (vm, data, parentData) {\n }\n \n function updateProps (vm, data) {\n+  let changed = false\n   if (data.attrs || data.props) {\n     let keys = vm.$options.propKeys\n     if (keys) {\n       for (let i = 0; i < keys.length; i++) {\n         let key = keys[i]\n-        vm[key] = getPropValue(data, key, vm)\n+        let oldVal = vm[key]\n+        let newVal = getPropValue(data, key, vm)\n+        if (oldVal !== newVal) {\n+          vm[key] = newVal\n+          changed = true\n+        }\n       }\n     }\n   }\n+  return changed\n }\n \n function updateEvents (vm, data, oldData) {"
            },
            {
                "commitId": "d2ca5c5e8ad7b10b1a886c3acc50f4936bffa102",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,4 +1,4 @@\n-import { extend, resolveAsset, hasOwn, isArray, isObject, getPropValue } from '../util/index'\n+import { extend, resolveAsset, isArray, isObject, getPropValue } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n "
            },
            {
                "commitId": "91455a6618c4c34e5d8b3f8299f427d3b612c142",
                "additions": 14,
                "deletions": 11,
                "patch": "@@ -1,7 +1,6 @@\n-import { extend, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n+import { extend, resolveAsset, hasOwn, isArray, isObject, getPropValue } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n-import { getPropValue } from './state'\n \n export const renderState = {\n   activeInstance: null,\n@@ -60,11 +59,11 @@ export function renderMixin (Vue) {\n       // but if no props changed, nothing happens\n       updateProps(this, parentData)\n       updateEvents(this, parentData, oldParentData)\n-    }\n-    // diff parent data (attrs on the placeholder) and queue update\n-    // if anything changed\n-    if (parentDataChanged(parentData, oldParentData)) {\n-      this.$forceUpdate()\n+      // diff parent data (attrs on the placeholder) and queue update\n+      // if anything changed\n+      if (parentDataChanged(parentData, oldParentData)) {\n+        this.$forceUpdate()\n+      }\n     }\n   }\n \n@@ -176,15 +175,15 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.attrs) {\n     const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n-      if (!hasOwn(props, key)) {\n+      if (!props[key]) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n     const props = data.props || (data.props = {})\n     for (let key in parentData.props) {\n-      if (!hasOwn(props, key)) {\n+      if (!props[key]) {\n         props[key] = parentData.props[key]\n       }\n     }\n@@ -215,8 +214,12 @@ function mergeParentData (vm, data, parentData) {\n \n function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n-    for (let key in vm.$options.props) {\n-      vm[key] = getPropValue(data, key)\n+    let keys = vm.$options.propKeys\n+    if (keys) {\n+      for (let i = 0; i < keys.length; i++) {\n+        let key = keys[i]\n+        vm[key] = getPropValue(data, key, vm)\n+      }\n     }\n   }\n }"
            },
            {
                "commitId": "403e2380b8d3c430ac67e6a072f159bcf8c00b5e",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -21,13 +21,18 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n+  // resolve directive\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  // toString for mustaches\n   Vue.prototype.__s__ = function (val) {\n-    console.log(val)\n-    return typeof val === 'string' ? val : JSON.stringify(val)\n+    return val == null\n+      ? ''\n+      : typeof val === 'object'\n+        ? JSON.stringify(val, null, 2)\n+        : val\n   }\n \n   Vue.prototype._update = function (vnode) {"
            },
            {
                "commitId": "09a4ba84a9e4a0219423c85599fea87c1d34737d",
                "additions": 6,
                "deletions": 4,
                "patch": "@@ -25,6 +25,11 @@ export function renderMixin (Vue) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  Vue.prototype.__s__ = function (val) {\n+    console.log(val)\n+    return typeof val === 'string' ? val : JSON.stringify(val)\n+  }\n+\n   Vue.prototype._update = function (vnode) {\n     if (this._mounted) {\n       callHook(this, 'beforeUpdate')\n@@ -42,7 +47,6 @@ export function renderMixin (Vue) {\n \n   Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n-    this.$options._renderKey = key\n     this.$options._renderData = parentData\n     this.$options._renderChildren = children\n     // update props and listeners\n@@ -77,16 +81,14 @@ export function renderMixin (Vue) {\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const { render, _renderKey, _renderData, _renderChildren } = this.$options\n+    const { render, _renderData, _renderChildren } = this.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n     const vnode = render.call(this)\n-    // set key\n-    vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)"
            },
            {
                "commitId": "e666fb4ee1ee8e15f94d3065ead7a213fed98253",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -12,15 +12,15 @@ export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm.$slots = {}\n-  const el = vm.$options.el\n-  if (el) {\n-    vm.$mount(el)\n+  if (vm.$options.el) {\n+    vm.$mount(vm.$options.el)\n   }\n }\n \n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n+\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }"
            },
            {
                "commitId": "2ef8d1028be7b9e80c4f3b53c8c8993599c28a9e",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -130,8 +130,13 @@ function parentDataChanged (data, oldData) {\n     key = keysToDiff[i]\n     cur = data[key]\n     old = oldData[key]\n-    if (key === 'on') continue\n-    if (!cur) return true\n+    if (!old) {\n+      if (!cur) {\n+        continue\n+      } else {\n+        return true\n+      }\n+    }\n     if (isArray(old)) {\n       if (!isArray(cur)) return true\n       if (cur.length !== old.length) return true"
            },
            {
                "commitId": "32ca8e7722cc46e0e24b812c893c5c7dc2108b8f",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -123,11 +123,11 @@ function resolveSlots (vm, children) {\n   }\n }\n \n+const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives']\n function parentDataChanged (data, oldData) {\n-  const keys = Object.keys(oldData)\n   let key, old, cur, i, l, j, k\n-  for (i = 0, l = keys.length; i < l; i++) {\n-    key = keys[i]\n+  for (i = 0, l = keysToDiff.length; i < l; i++) {\n+    key = keysToDiff[i]\n     cur = data[key]\n     old = oldData[key]\n     if (key === 'on') continue"
            },
            {
                "commitId": "0c6c748d9df45341b5c787e9401c32536161feca",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -40,7 +40,7 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._tryUpdate = function (parentData, children, key) {\n+  Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n     this.$options._renderKey = key\n     this.$options._renderData = parentData\n@@ -54,7 +54,7 @@ export function renderMixin (Vue) {\n     }\n     // diff parent data (attrs on the placeholder) and queue update\n     // if anything changed\n-    if (diffParentData(parentData, oldParentData)) {\n+    if (parentDataChanged(parentData, oldParentData)) {\n       this.$forceUpdate()\n     }\n   }\n@@ -123,7 +123,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function diffParentData (data, oldData) {\n+function parentDataChanged (data, oldData) {\n   const keys = Object.keys(oldData)\n   let key, old, cur, i, l, j, k\n   for (i = 0, l = keys.length; i < l; i++) {"
            },
            {
                "commitId": "8ff21757a1a3eb10c9c239b2b92eff9711aa7b21",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -212,7 +212,6 @@ function updateProps (vm, data) {\n function updateEvents (vm, data, oldData) {\n   if (data.on) {\n     updateListeners(data.on, oldData.on || {}, (event, handler) => {\n-      console.log(11)\n       vm.$on(event, handler)\n     })\n   }"
            },
            {
                "commitId": "4d508dcbfa440459fb6bc331537c0c90278aa3a8",
                "additions": 1,
                "deletions": 22,
                "patch": "@@ -1,5 +1,4 @@\n-import Watcher from '../observer/watcher'\n-import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n+import { extend, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -97,26 +96,6 @@ export function renderMixin (Vue) {\n     return vnode\n   }\n \n-  Vue.prototype.$mount = function (el) {\n-    callHook(this, 'beforeMount')\n-    el = this.$el = el && query(el)\n-    if (el) {\n-      // clean element\n-      el.innerHTML = ''\n-      if (el.hasAttributes()) {\n-        const attrs = el.attributes\n-        for (let i = 0, l = attrs.length; i < l; i++) {\n-          el.removeAttribute(attrs[i].name)\n-        }\n-      }\n-    }\n-    this._watcher = new Watcher(this, this._render, this._update)\n-    this._update(this._watcher.value)\n-    callHook(this, 'mounted')\n-    this._mounted = true\n-    return this\n-  }\n-\n   Vue.prototype.$forceUpdate = function () {\n     this._watcher.update()\n   }"
            },
            {
                "commitId": "af1f1d349f8276d3fe0c38af34eafab2b0c50424",
                "additions": 8,
                "deletions": 7,
                "patch": "@@ -1,6 +1,6 @@\n import Watcher from '../observer/watcher'\n import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n-import { createElement, patch, updateListeners } from '../vdom/index'\n+import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n \n@@ -48,13 +48,14 @@ export function renderMixin (Vue) {\n     this.$options._renderChildren = children\n     // update props and listeners\n     if (parentData) {\n+      // if any prop has changed it would trigger and queue an update,\n+      // but if no props changed, nothing happens\n       updateProps(this, parentData)\n       updateEvents(this, parentData, oldParentData)\n     }\n-    // for now, if the component has content it always updates\n-    // because we don't know whether the children have changed.\n-    // need to optimize in the future.\n-    if (children || diffParentData(parentData, oldParentData)) {\n+    // diff parent data (attrs on the placeholder) and queue update\n+    // if anything changed\n+    if (diffParentData(parentData, oldParentData)) {\n       this.$forceUpdate()\n     }\n   }\n@@ -64,11 +65,11 @@ export function renderMixin (Vue) {\n    * This is used to wrap all children thunks in codegen.\n    */\n \n-  Vue.prototype._withContext = function (fn) {\n+  Vue.prototype._renderWithContext = function (fn) {\n     return () => {\n       const prev = renderState.context\n       renderState.context = this\n-      const children = fn()\n+      const children = flatten(fn())\n       renderState.context = prev\n       return children\n     }"
            },
            {
                "commitId": "61a5249a0e71008d7560d188b62efe36788619c1",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -68,8 +68,9 @@ export function renderMixin (Vue) {\n     return () => {\n       const prev = renderState.context\n       renderState.context = this\n-      return fn()\n+      const children = fn()\n       renderState.context = prev\n+      return children\n     }\n   }\n "
            },
            {
                "commitId": "c16fc2c427b221510b51d98c1051460d2ffbe02e",
                "additions": 24,
                "deletions": 12,
                "patch": "@@ -5,7 +5,8 @@ import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n \n export const renderState = {\n-  activeInstance: null\n+  activeInstance: null,\n+  context: null\n }\n \n export function initRender (vm) {\n@@ -58,28 +59,39 @@ export function renderMixin (Vue) {\n     }\n   }\n \n+  /**\n+   * Call a render function with this instance as the context.\n+   * This is used to wrap all children thunks in codegen.\n+   */\n+\n+  Vue.prototype._withContext = function (fn) {\n+    return () => {\n+      const prev = renderState.context\n+      renderState.context = this\n+      return fn()\n+      renderState.context = prev\n+    }\n+  }\n+\n   Vue.prototype._render = function () {\n-    const {\n-      render,\n-      _renderKey,\n-      _renderData,\n-      _renderChildren\n-    } = this.$options\n-    // resolve slots\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const { render, _renderKey, _renderData, _renderChildren } = this.$options\n+    // resolve slots. becaues slots are rendered in parent scope,\n+    // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n-    // render\n-    const prev = renderState.activeInstance\n-    renderState.activeInstance = this\n+    // render self\n     const vnode = render.call(this)\n-    renderState.activeInstance = prev\n     // set key\n     vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)\n     }\n+    // restore render state\n+    renderState.activeInstance = prev\n     return vnode\n   }\n "
            },
            {
                "commitId": "1df748d57d366ff426604e58a46897a2f49424aa",
                "additions": 11,
                "deletions": 4,
                "patch": "@@ -85,9 +85,16 @@ export function renderMixin (Vue) {\n \n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n-    this.$el = el && query(el)\n-    if (this.$el) {\n-      this.$el.innerHTML = ''\n+    el = this.$el = el && query(el)\n+    if (el) {\n+      // clean element\n+      el.innerHTML = ''\n+      if (el.hasAttributes()) {\n+        const attrs = el.attributes\n+        for (let i = 0, l = attrs.length; i < l; i++) {\n+          el.removeAttribute(attrs[i].name)\n+        }\n+      }\n     }\n     this._watcher = new Watcher(this, this._render, this._update)\n     this._update(this._watcher.value)\n@@ -103,7 +110,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children.slice()\n+    children = children().slice()\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "38204b747dad3c05c63401e2a27ef846bcb998bc",
                "additions": 4,
                "deletions": 3,
                "patch": "@@ -48,7 +48,7 @@ export function renderMixin (Vue) {\n     // update props and listeners\n     if (parentData) {\n       updateProps(this, parentData)\n-      updateEvents(this, parentData)\n+      updateEvents(this, parentData, oldParentData)\n     }\n     // for now, if the component has content it always updates\n     // because we don't know whether the children have changed.\n@@ -209,9 +209,10 @@ function updateProps (vm, data) {\n   }\n }\n \n-function updateEvents (vm, data) {\n+function updateEvents (vm, data, oldData) {\n   if (data.on) {\n-    updateListeners(data.on, vm._vnode.data.on || {}, (event, handler) => {\n+    updateListeners(data.on, oldData.on || {}, (event, handler) => {\n+      console.log(11)\n       vm.$on(event, handler)\n     })\n   }"
            },
            {
                "commitId": "542035f3c1550bf4d733a7b9c161cdb8db63740f",
                "additions": 10,
                "deletions": 4,
                "patch": "@@ -124,16 +124,18 @@ function resolveSlots (vm, children) {\n }\n \n function diffParentData (data, oldData) {\n-  let key, old, cur\n-  for (key in oldData) {\n+  const keys = Object.keys(oldData)\n+  let key, old, cur, i, l, j, k\n+  for (i = 0, l = keys.length; i < l; i++) {\n+    key = keys[i]\n     cur = data[key]\n     old = oldData[key]\n     if (key === 'on') continue\n     if (!cur) return true\n     if (isArray(old)) {\n       if (!isArray(cur)) return true\n       if (cur.length !== old.length) return true\n-      for (let i = 0; i < old.length; i++) {\n+      for (j = 0, k = old.length; j < k; j++) {\n         if (isObject(old[i])) {\n           if (!isObject(cur[i])) return true\n           if (diffObject(cur, old)) return true\n@@ -145,10 +147,14 @@ function diffParentData (data, oldData) {\n       return true\n     }\n   }\n+  return false\n }\n \n function diffObject (cur, old) {\n-  for (var key in old) {\n+  const keys = Object.keys(old)\n+  let i, l, key\n+  for (i = 0, l = keys.length; i < l; i++) {\n+    key = keys[i]\n     if (cur[key] !== old[key]) return true\n   }\n }"
            },
            {
                "commitId": "0257afbb7f8a6a4c986a577e904225cef13e67ec",
                "additions": 119,
                "deletions": 81,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { extend, query, resolveAsset, hasOwn } from '../util/index'\n+import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -18,78 +18,6 @@ export function initRender (vm) {\n   }\n }\n \n-function resolveSlots (vm, children) {\n-  if (children) {\n-    children = children.slice()\n-    const slots = { default: children }\n-    let i = children.length\n-    let name, child\n-    while (i--) {\n-      child = children[i]\n-      if ((name = child.data && child.data.slot)) {\n-        let slot = (slots[name] || (slots[name] = []))\n-        if (child.tag === 'template') {\n-          slot.push.apply(slot, child.children)\n-        } else {\n-          slot.push(child)\n-        }\n-        children.splice(i, 1)\n-      }\n-    }\n-    vm.$slots = slots\n-  }\n-}\n-\n-function mergeParentData (vm, data, parentData) {\n-  const props = vm.$options.props\n-  if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = {})\n-    for (let key in parentData.attrs) {\n-      if (!hasOwn(props, key)) {\n-        attrs[key] = parentData.attrs[key]\n-      }\n-    }\n-  }\n-  if (parentData.props) {\n-    const props = data.props || (data.props = {})\n-    for (let key in parentData.props) {\n-      if (!hasOwn(props, key)) {\n-        props[key] = parentData.props[key]\n-      }\n-    }\n-  }\n-  if (parentData.staticClass) {\n-    data.staticClass = data.staticClass\n-      ? data.staticClass + ' ' + parentData.staticClass\n-      : parentData.staticClass\n-  }\n-  if (parentData.class) {\n-    extend((data.class || (data.class = {})), parentData.class)\n-  }\n-  if (parentData.style) {\n-    extend((data.style || (data.style = {})), parentData.style)\n-  }\n-  if (parentData.directives) {\n-    data.directives = parentData.directives.conact(data.directives || [])\n-  }\n-  if (parentData.on) {\n-    updateListeners(parentData.on, data.on || {}, (event, handler) => {\n-      vm.$on(event, handler)\n-    })\n-  }\n-}\n-\n-function updateProps (vm, data) {\n-  if (data.attrs || data.props) {\n-    for (let key in vm.$options.props) {\n-      let newVal = getPropValue(data, key)\n-      if (vm[key] !== newVal) {\n-        vm[key] = newVal\n-      }\n-    }\n-  }\n-}\n-\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -112,21 +40,21 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._tryUpdate = function (data, children, key) {\n+  Vue.prototype._tryUpdate = function (parentData, children, key) {\n+    const oldParentData = this.$options._renderData\n     this.$options._renderKey = key\n-    this.$options._renderData = data\n+    this.$options._renderData = parentData\n     this.$options._renderChildren = children\n-    // set props - this will trigger update if any of them changed\n-    // but not guaranteed\n-    if (data) {\n-      updateProps(this, data)\n+    // update props and listeners\n+    if (parentData) {\n+      updateProps(this, parentData)\n+      updateEvents(this, parentData)\n     }\n     // for now, if the component has content it always updates\n     // because we don't know whether the children have changed.\n     // need to optimize in the future.\n-    if (children) {\n+    if (children || diffParentData(parentData, oldParentData)) {\n       this.$forceUpdate()\n-      return\n     }\n   }\n \n@@ -172,3 +100,113 @@ export function renderMixin (Vue) {\n     this._watcher.update()\n   }\n }\n+\n+function resolveSlots (vm, children) {\n+  if (children) {\n+    children = children.slice()\n+    const slots = { default: children }\n+    let i = children.length\n+    let name, child\n+    while (i--) {\n+      child = children[i]\n+      if ((name = child.data && child.data.slot)) {\n+        let slot = (slots[name] || (slots[name] = []))\n+        if (child.tag === 'template') {\n+          slot.push.apply(slot, child.children)\n+        } else {\n+          slot.push(child)\n+        }\n+        children.splice(i, 1)\n+      }\n+    }\n+    vm.$slots = slots\n+  }\n+}\n+\n+function diffParentData (data, oldData) {\n+  let key, old, cur\n+  for (key in oldData) {\n+    cur = data[key]\n+    old = oldData[key]\n+    if (key === 'on') continue\n+    if (!cur) return true\n+    if (isArray(old)) {\n+      if (!isArray(cur)) return true\n+      if (cur.length !== old.length) return true\n+      for (let i = 0; i < old.length; i++) {\n+        if (isObject(old[i])) {\n+          if (!isObject(cur[i])) return true\n+          if (diffObject(cur, old)) return true\n+        } else if (old[i] !== cur[i]) {\n+          return true\n+        }\n+      }\n+    } else if (diffObject(cur, old)) {\n+      return true\n+    }\n+  }\n+}\n+\n+function diffObject (cur, old) {\n+  for (var key in old) {\n+    if (cur[key] !== old[key]) return true\n+  }\n+}\n+\n+function mergeParentData (vm, data, parentData) {\n+  const props = vm.$options.props\n+  if (parentData.attrs) {\n+    const attrs = data.attrs || (data.attrs = {})\n+    for (let key in parentData.attrs) {\n+      if (!hasOwn(props, key)) {\n+        attrs[key] = parentData.attrs[key]\n+      }\n+    }\n+  }\n+  if (parentData.props) {\n+    const props = data.props || (data.props = {})\n+    for (let key in parentData.props) {\n+      if (!hasOwn(props, key)) {\n+        props[key] = parentData.props[key]\n+      }\n+    }\n+  }\n+  if (parentData.staticClass) {\n+    data.staticClass = data.staticClass\n+      ? data.staticClass + ' ' + parentData.staticClass\n+      : parentData.staticClass\n+  }\n+  if (parentData.class) {\n+    if (!data.class) {\n+      data.class = parentData.class\n+    } else {\n+      data.class = (isArray(data.class) ? data.class : []).concat(parentData.class)\n+    }\n+  }\n+  if (parentData.style) {\n+    if (!data.style) {\n+      data.style = parentData.style\n+    } else {\n+      extend(data.style, parentData.style)\n+    }\n+  }\n+  if (parentData.directives) {\n+    data.directives = parentData.directives.conact(data.directives || [])\n+  }\n+}\n+\n+function updateProps (vm, data) {\n+  if (data.attrs || data.props) {\n+    for (let key in vm.$options.props) {\n+      vm[key] = getPropValue(data, key)\n+    }\n+  }\n+}\n+\n+function updateEvents (vm, data) {\n+  if (data.on) {\n+    updateListeners(data.on, vm._vnode.data.on || {}, (event, handler) => {\n+      vm.$on(event, handler)\n+    })\n+  }\n+}"
            },
            {
                "commitId": "d1fc82dbba86a91704269e62699f63d645dd8baf",
                "additions": 21,
                "deletions": 14,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hasOwn } from '../util/index'\n+import { extend, query, resolveAsset, hasOwn } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -40,28 +40,38 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function mergeParentAttrs (vm, data, parentData) {\n+function mergeParentData (vm, data, parentData) {\n   const props = vm.$options.props\n   if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = [])\n+    const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n-\n+    const props = data.props || (data.props = {})\n+    for (let key in parentData.props) {\n+      if (!hasOwn(props, key)) {\n+        props[key] = parentData.props[key]\n+      }\n+    }\n+  }\n+  if (parentData.staticClass) {\n+    data.staticClass = data.staticClass\n+      ? data.staticClass + ' ' + parentData.staticClass\n+      : parentData.staticClass\n+  }\n+  if (parentData.class) {\n+    extend((data.class || (data.class = {})), parentData.class)\n+  }\n+  if (parentData.style) {\n+    extend((data.style || (data.style = {})), parentData.style)\n   }\n-}\n-\n-function mergeParentDirectives (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.conact(data.directives || [])\n   }\n-}\n-\n-function updateParentCallbacks (vm, data, parentData) {\n   if (parentData.on) {\n     updateListeners(parentData.on, data.on || {}, (event, handler) => {\n       vm.$on(event, handler)\n@@ -140,10 +150,7 @@ export function renderMixin (Vue) {\n     vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n-      const data = vnode.data\n-      mergeParentAttrs(this, data, _renderData)\n-      mergeParentDirectives(this, data, _renderData)\n-      updateParentCallbacks(this, data, _renderData)\n+      mergeParentData(this, vnode.data, _renderData)\n     }\n     return vnode\n   }"
            },
            {
                "commitId": "2fa6e6f73f81439374c02008fb4169b7df2f7b98",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -106,14 +106,18 @@ export function renderMixin (Vue) {\n     this.$options._renderKey = key\n     this.$options._renderData = data\n     this.$options._renderChildren = children\n-    if (children) {\n-      this.$forceUpdate()\n-      return\n-    }\n     // set props - this will trigger update if any of them changed\n+    // but not guaranteed\n     if (data) {\n       updateProps(this, data)\n     }\n+    // for now, if the component has content it always updates\n+    // because we don't know whether the children have changed.\n+    // need to optimize in the future.\n+    if (children) {\n+      this.$forceUpdate()\n+      return\n+    }\n   }\n \n   Vue.prototype._render = function () {"
            },
            {
                "commitId": "0e940ac5af072e1c85b6346c43c20d0a66c75393",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -72,7 +72,7 @@ function updateParentCallbacks (vm, data, parentData) {\n function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n     for (let key in vm.$options.props) {\n-      let newVal = getPropValue(data)\n+      let newVal = getPropValue(data, key)\n       if (vm[key] !== newVal) {\n         vm[key] = newVal\n       }"
            },
            {
                "commitId": "fdfcb9319970298e0c2f4318e6360db1b8dd3d8e",
                "additions": 4,
                "deletions": 16,
                "patch": "@@ -1,7 +1,8 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n+import { query, resolveAsset, hasOwn } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n+import { getPropValue } from './state'\n \n export const renderState = {\n   activeInstance: null\n@@ -69,29 +70,16 @@ function updateParentCallbacks (vm, data, parentData) {\n }\n \n function updateProps (vm, data) {\n-  const attrs = data.attrs\n-  const props = data.props\n-  if (attrs || props) {\n+  if (data.attrs || data.props) {\n     for (let key in vm.$options.props) {\n-      let altKey = hyphenate(key)\n-      let newVal =\n-        getPropValue(attrs, key, altKey) ||\n-        getPropValue(props, key, altKey)\n+      let newVal = getPropValue(data)\n       if (vm[key] !== newVal) {\n         vm[key] = newVal\n       }\n     }\n   }\n }\n \n-function getPropValue (hash, key, altKey) {\n-  return hash\n-    ? hasOwn(hash, key)\n-      ? hash[key]\n-      : hash[altKey]\n-    : undefined\n-}\n-\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement"
            },
            {
                "commitId": "57bb93ef02de063dc12d375b0fc2ca25063b5fc8",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -100,14 +100,18 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._update = function (vnode) {\n-    callHook(this, 'beforeUpdate')\n+    if (this._mounted) {\n+      callHook(this, 'beforeUpdate')\n+    }\n     if (!this._vnode) {\n       this.$el = patch(this.$el, vnode)\n     } else {\n       this.$el = patch(this._vnode, vnode)\n     }\n     this._vnode = vnode\n-    callHook(this, 'updated')\n+    if (this._mounted) {\n+      callHook(this, 'updated')\n+    }\n   }\n \n   Vue.prototype._tryUpdate = function (data, children, key) {"
            },
            {
                "commitId": "c12ddd9ab9f66bdbad8d5f91c2796f6cfe0a659c",
                "additions": 30,
                "deletions": 11,
                "patch": "@@ -40,15 +40,18 @@ function resolveSlots (vm, children) {\n }\n \n function mergeParentAttrs (vm, data, parentData) {\n+  const props = vm.$options.props\n   if (parentData.attrs) {\n-    const props = vm.$options.props\n     const attrs = data.attrs || (data.attrs = [])\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n+  if (parentData.props) {\n+\n+  }\n }\n \n function mergeParentDirectives (vm, data, parentData) {\n@@ -65,6 +68,30 @@ function updateParentCallbacks (vm, data, parentData) {\n   }\n }\n \n+function updateProps (vm, data) {\n+  const attrs = data.attrs\n+  const props = data.props\n+  if (attrs || props) {\n+    for (let key in vm.$options.props) {\n+      let altKey = hyphenate(key)\n+      let newVal =\n+        getPropValue(attrs, key, altKey) ||\n+        getPropValue(props, key, altKey)\n+      if (vm[key] !== newVal) {\n+        vm[key] = newVal\n+      }\n+    }\n+  }\n+}\n+\n+function getPropValue (hash, key, altKey) {\n+  return hash\n+    ? hasOwn(hash, key)\n+      ? hash[key]\n+      : hash[altKey]\n+    : undefined\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -92,16 +119,8 @@ export function renderMixin (Vue) {\n       return\n     }\n     // set props - this will trigger update if any of them changed\n-    const attrs = data && data.attrs\n-    if (attrs) {\n-      for (let key in this.$options.props) {\n-        let newVal = hasOwn(attrs, key)\n-          ? attrs[key]\n-          : attrs[hyphenate(key)]\n-        if (this[key] !== newVal) {\n-          this[key] = newVal\n-        }\n-      }\n+    if (data) {\n+      updateProps(this, data)\n     }\n   }\n "
            },
            {
                "commitId": "054c2c3de2976c8f87b7a52980bc89c12d3d90ee",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -42,9 +42,10 @@ function resolveSlots (vm, children) {\n function mergeParentAttrs (vm, data, parentData) {\n   if (parentData.attrs) {\n     const props = vm.$options.props\n+    const attrs = data.attrs || (data.attrs = [])\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n-        data.attrs[key] = parentData.attrs[key]\n+        attrs[key] = parentData.attrs[key]\n       }\n     }\n   }"
            },
            {
                "commitId": "1a35cf4a21e8c8e897c2d6f291b99376b12b9fac",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -19,13 +19,19 @@ export function initRender (vm) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n+    children = children.slice()\n     const slots = { default: children }\n     let i = children.length\n     let name, child\n     while (i--) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n-        (slots[name] || (slots[name] = [])).push(child)\n+        let slot = (slots[name] || (slots[name] = []))\n+        if (child.tag === 'template') {\n+          slot.push.apply(slot, child.children)\n+        } else {\n+          slot.push(child)\n+        }\n         children.splice(i, 1)\n       }\n     }\n@@ -123,7 +129,6 @@ export function renderMixin (Vue) {\n       mergeParentDirectives(this, data, _renderData)\n       updateParentCallbacks(this, data, _renderData)\n     }\n-    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "e9ae8187c2be7e03da425a23545b4523eca70c45",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -123,6 +123,7 @@ export function renderMixin (Vue) {\n       mergeParentDirectives(this, data, _renderData)\n       updateParentCallbacks(this, data, _renderData)\n     }\n+    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "4e86d3aba9d734bf2b50327933d221f3ceb522f2",
                "additions": 26,
                "deletions": 15,
                "patch": "@@ -10,10 +10,7 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n-  vm._renderData = vm.$options._renderData\n   vm.$slots = {}\n-  // props are set in initState\n-  resolveSlots(vm, vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -79,14 +76,15 @@ export function renderMixin (Vue) {\n     callHook(this, 'updated')\n   }\n \n-  Vue.prototype._tryUpdate = function (data, children) {\n-    this._renderData = data\n+  Vue.prototype._tryUpdate = function (data, children, key) {\n+    this.$options._renderKey = key\n+    this.$options._renderData = data\n+    this.$options._renderChildren = children\n     if (children) {\n-      resolveSlots(this, children)\n       this.$forceUpdate()\n       return\n     }\n-    // set props if they have changed.\n+    // set props - this will trigger update if any of them changed\n     const attrs = data && data.attrs\n     if (attrs) {\n       for (let key in this.$options.props) {\n@@ -101,17 +99,30 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._render = function () {\n+    const {\n+      render,\n+      _renderKey,\n+      _renderData,\n+      _renderChildren\n+    } = this.$options\n+    // resolve slots\n+    if (_renderChildren) {\n+      resolveSlots(this, _renderChildren)\n+    }\n+    // render\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const vnode = this.$options.render.call(this)\n-    const data = vnode.data\n-    const parentData = this._renderData\n-    if (parentData) {\n-      mergeParentAttrs(this, data, parentData)\n-      mergeParentDirectives(this, data, parentData)\n-      updateParentCallbacks(this, data, parentData)\n-    }\n+    const vnode = render.call(this)\n     renderState.activeInstance = prev\n+    // set key\n+    vnode.key = _renderKey\n+    // update parent data\n+    if (_renderData) {\n+      const data = vnode.data\n+      mergeParentAttrs(this, data, _renderData)\n+      mergeParentDirectives(this, data, _renderData)\n+      updateParentCallbacks(this, data, _renderData)\n+    }\n     return vnode\n   }\n "
            },
            {
                "commitId": "be9e16e20fce0d6c9b5ab72be02894dc05a2734f",
                "additions": 16,
                "deletions": 5,
                "patch": "@@ -1,6 +1,6 @@\n import Watcher from '../observer/watcher'\n import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n-import { createElement, patch } from '../vdom/index'\n+import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export const renderState = {\n@@ -36,8 +36,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function mergeParentData (vm, data, parentData) {\n-  // attrs\n+function mergeParentAttrs (vm, data, parentData) {\n   if (parentData.attrs) {\n     const props = vm.$options.props\n     for (let key in parentData.attrs) {\n@@ -46,12 +45,22 @@ function mergeParentData (vm, data, parentData) {\n       }\n     }\n   }\n-  // directives\n+}\n+\n+function mergeParentDirectives (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.conact(data.directives || [])\n   }\n }\n \n+function updateParentCallbacks (vm, data, parentData) {\n+  if (parentData.on) {\n+    updateListeners(parentData.on, data.on || {}, (event, handler) => {\n+      vm.$on(event, handler)\n+    })\n+  }\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -98,7 +107,9 @@ export function renderMixin (Vue) {\n     const data = vnode.data\n     const parentData = this._renderData\n     if (parentData) {\n-      mergeParentData(this, data, parentData)\n+      mergeParentAttrs(this, data, parentData)\n+      mergeParentDirectives(this, data, parentData)\n+      updateParentCallbacks(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n     return vnode"
            },
            {
                "commitId": "56073ca8532d90706cd50b8a3177011093b01675",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -77,14 +77,16 @@ export function renderMixin (Vue) {\n       this.$forceUpdate()\n       return\n     }\n-    // set props. because props are reactive,\n-    // if any of them has changed it will trigger an update.\n+    // set props if they have changed.\n     const attrs = data && data.attrs\n     if (attrs) {\n       for (let key in this.$options.props) {\n-        this[key] = hasOwn(attrs, key)\n+        let newVal = hasOwn(attrs, key)\n           ? attrs[key]\n           : attrs[hyphenate(key)]\n+        if (this[key] !== newVal) {\n+          this[key] = newVal\n+        }\n       }\n     }\n   }\n@@ -99,7 +101,6 @@ export function renderMixin (Vue) {\n       mergeParentData(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n-    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "48f328bcaf2ebcc256d1c9114cf9cc2da54f15ae",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -99,6 +99,7 @@ export function renderMixin (Vue) {\n       mergeParentData(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n+    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "5c1063a5e4167d1938febc4d4fd4f4edee260505",
                "additions": 7,
                "deletions": 12,
                "patch": "@@ -77,19 +77,14 @@ export function renderMixin (Vue) {\n       this.$forceUpdate()\n       return\n     }\n-    // check props\n-    if (data && data.attrs) {\n-      let changed = false\n+    // set props. because props are reactive,\n+    // if any of them has changed it will trigger an update.\n+    const attrs = data && data.attrs\n+    if (attrs) {\n       for (let key in this.$options.props) {\n-        let oldVal = this[key]\n-        let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n-        if (oldVal !== newVal) {\n-          this[key] = newVal\n-          changed = true\n-        }\n-      }\n-      if (changed) {\n-        this.$forceUpdate()\n+        this[key] = hasOwn(attrs, key)\n+          ? attrs[key]\n+          : attrs[hyphenate(key)]\n       }\n     }\n   }"
            },
            {
                "commitId": "5970dbd2f5694efb1328789f4f0f83d89a5e4beb",
                "additions": 6,
                "deletions": 12,
                "patch": "@@ -20,16 +20,6 @@ export function initRender (vm) {\n   }\n }\n \n-export function setProps (vm, data) {\n-  const attrs = (data && data.attrs) || {}\n-  const props = vm.$options.props\n-  if (props) {\n-    for (let key in props) {\n-      vm[key] = attrs[key]\n-    }\n-  }\n-}\n-\n function resolveSlots (vm, children) {\n   if (children) {\n     const slots = { default: children }\n@@ -89,14 +79,18 @@ export function renderMixin (Vue) {\n     }\n     // check props\n     if (data && data.attrs) {\n-      setProps(this, data)\n+      let changed = false\n       for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n         if (oldVal !== newVal) {\n-          this.$forceUpdate()\n+          this[key] = newVal\n+          changed = true\n         }\n       }\n+      if (changed) {\n+        this.$forceUpdate()\n+      }\n     }\n   }\n "
            },
            {
                "commitId": "8218eae1f91ab3d777b594821c55a687f647ca9b",
                "additions": 39,
                "deletions": 9,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hyphenate } from '../util/index'\n+import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n@@ -11,18 +11,28 @@ export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm._renderData = vm.$options._renderData\n-  vm.$slots = resolveSlots(vm.$options._renderChildren)\n+  vm.$slots = {}\n+  // props are set in initState\n+  resolveSlots(vm, vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n   }\n }\n \n-function resolveSlots (children) {\n-  const slots = {\n-    default: children\n+export function setProps (vm, data) {\n+  const attrs = (data && data.attrs) || {}\n+  const props = vm.$options.props\n+  if (props) {\n+    for (let key in props) {\n+      vm[key] = attrs[key]\n+    }\n   }\n+}\n+\n+function resolveSlots (vm, children) {\n   if (children) {\n+    const slots = { default: children }\n     let i = children.length\n     let name, child\n     while (i--) {\n@@ -32,8 +42,24 @@ function resolveSlots (children) {\n         children.splice(i, 1)\n       }\n     }\n+    vm.$slots = slots\n+  }\n+}\n+\n+function mergeParentData (vm, data, parentData) {\n+  // attrs\n+  if (parentData.attrs) {\n+    const props = vm.$options.props\n+    for (let key in parentData.attrs) {\n+      if (!hasOwn(props, key)) {\n+        data.attrs[key] = parentData.attrs[key]\n+      }\n+    }\n+  }\n+  // directives\n+  if (parentData.directives) {\n+    data.directives = parentData.directives.conact(data.directives || [])\n   }\n-  return slots\n }\n \n export function renderMixin (Vue) {\n@@ -56,13 +82,14 @@ export function renderMixin (Vue) {\n \n   Vue.prototype._tryUpdate = function (data, children) {\n     this._renderData = data\n-    this.$slots = resolveSlots(children)\n     if (children) {\n+      resolveSlots(this, children)\n       this.$forceUpdate()\n       return\n     }\n     // check props\n     if (data && data.attrs) {\n+      setProps(this, data)\n       for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n@@ -77,8 +104,11 @@ export function renderMixin (Vue) {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n     const vnode = this.$options.render.call(this)\n-    // merge parent data\n-    // TODO\n+    const data = vnode.data\n+    const parentData = this._renderData\n+    if (parentData) {\n+      mergeParentData(this, data, parentData)\n+    }\n     renderState.activeInstance = prev\n     return vnode\n   }"
            },
            {
                "commitId": "d6c5abbf35af32ee6a166fc3e63e2b25343a0a61",
                "additions": 33,
                "deletions": 10,
                "patch": "@@ -10,13 +10,32 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n-  // TODO: handle _renderData and _renderChildren\n+  vm._renderData = vm.$options._renderData\n+  vm.$slots = resolveSlots(vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n   }\n }\n \n+function resolveSlots (children) {\n+  const slots = {\n+    default: children\n+  }\n+  if (children) {\n+    let i = children.length\n+    let name, child\n+    while (i--) {\n+      child = children[i]\n+      if ((name = child.data && child.data.slot)) {\n+        (slots[name] || (slots[name] = [])).push(child)\n+        children.splice(i, 1)\n+      }\n+    }\n+  }\n+  return slots\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -36,8 +55,9 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._tryUpdate = function (data, children) {\n+    this._renderData = data\n+    this.$slots = resolveSlots(children)\n     if (children) {\n-      // TODO: handle content slots\n       this.$forceUpdate()\n       return\n     }\n@@ -53,20 +73,23 @@ export function renderMixin (Vue) {\n     }\n   }\n \n+  Vue.prototype._render = function () {\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const vnode = this.$options.render.call(this)\n+    // merge parent data\n+    // TODO\n+    renderState.activeInstance = prev\n+    return vnode\n+  }\n+\n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n     this.$el = el && query(el)\n     if (this.$el) {\n       this.$el.innerHTML = ''\n     }\n-    const render = this.$options.render\n-    this._watcher = new Watcher(this, () => {\n-      const prev = renderState.activeInstance\n-      renderState.activeInstance = this\n-      const vnode = render.call(this)\n-      renderState.activeInstance = prev\n-      return vnode\n-    }, this._update)\n+    this._watcher = new Watcher(this, this._render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true"
            },
            {
                "commitId": "84ce91df72928f622ba993ee89e41a642eb92fb0",
                "additions": 6,
                "deletions": 4,
                "patch": "@@ -3,7 +3,9 @@ import { query, resolveAsset, hyphenate } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n-export const target = { _: null }\n+export const renderState = {\n+  activeInstance: null\n+}\n \n export function initRender (vm) {\n   vm._vnode = null\n@@ -59,10 +61,10 @@ export function renderMixin (Vue) {\n     }\n     const render = this.$options.render\n     this._watcher = new Watcher(this, () => {\n-      const prev = target._\n-      target._ = this\n+      const prev = renderState.activeInstance\n+      renderState.activeInstance = this\n       const vnode = render.call(this)\n-      target._ = prev\n+      renderState.activeInstance = prev\n       return vnode\n     }, this._update)\n     this._update(this._watcher.value)"
            },
            {
                "commitId": "8bc6915ce129b7642121c8462222d375343b9d3a",
                "additions": 10,
                "deletions": 1,
                "patch": "@@ -3,6 +3,8 @@ import { query, resolveAsset, hyphenate } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n+export const target = { _: null }\n+\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n@@ -55,7 +57,14 @@ export function renderMixin (Vue) {\n     if (this.$el) {\n       this.$el.innerHTML = ''\n     }\n-    this._watcher = new Watcher(this, this.$options.render, this._update)\n+    const render = this.$options.render\n+    this._watcher = new Watcher(this, () => {\n+      const prev = target._\n+      target._ = this\n+      const vnode = render.call(this)\n+      target._ = prev\n+      return vnode\n+    }, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true"
            },
            {
                "commitId": "058c555dac875d1c979b92ccaeb36412d6912c82",
                "additions": 2,
                "deletions": 3,
                "patch": "@@ -38,9 +38,8 @@ export function renderMixin (Vue) {\n       return\n     }\n     // check props\n-    const props = this.$options.props\n-    if (props && data && data.attrs) {\n-      for (let key in props) {\n+    if (data && data.attrs) {\n+      for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n         if (oldVal !== newVal) {"
            },
            {
                "commitId": "5c3edf850bcf7dacf0fd4d6b625fce2e937ebe93",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -39,7 +39,7 @@ export function renderMixin (Vue) {\n     }\n     // check props\n     const props = this.$options.props\n-    if (props && data.attrs) {\n+    if (props && data && data.attrs) {\n       for (let key in props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]"
            },
            {
                "commitId": "f2c8880041bd845b4af28ed20e2f67c2e2c8d6ff",
                "additions": 35,
                "deletions": 11,
                "patch": "@@ -1,10 +1,12 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset } from '../util/index'\n-import { h, patch } from '../vdom/index'\n+import { query, resolveAsset, hyphenate } from '../util/index'\n+import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n+  vm._vnode = null\n   vm._mounted = false\n+  // TODO: handle _renderData and _renderChildren\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -13,33 +15,55 @@ export function initRender (vm) {\n \n export function renderMixin (Vue) {\n   // shorthands used in render functions\n-  Vue.prototype.__h__ = h\n+  Vue.prototype.__h__ = createElement\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n-  Vue.prototype._update = function (vtree) {\n+  Vue.prototype._update = function (vnode) {\n     callHook(this, 'beforeUpdate')\n-    if (!this._tree) {\n-      this.$el = patch(this.$el, vtree)\n+    if (!this._vnode) {\n+      this.$el = patch(this.$el, vnode)\n     } else {\n-      this.$el = patch(this._tree, vtree)\n+      this.$el = patch(this._vnode, vnode)\n     }\n-    this._tree = vtree\n+    this._vnode = vnode\n     callHook(this, 'updated')\n   }\n \n+  Vue.prototype._tryUpdate = function (data, children) {\n+    if (children) {\n+      // TODO: handle content slots\n+      this.$forceUpdate()\n+      return\n+    }\n+    // check props\n+    const props = this.$options.props\n+    if (props && data.attrs) {\n+      for (let key in props) {\n+        let oldVal = this[key]\n+        let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n+        if (oldVal !== newVal) {\n+          this.$forceUpdate()\n+        }\n+      }\n+    }\n+  }\n+\n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n-    this.$el = el ? query(el) : document.createElement('div')\n-    this.$el.innerHTML = ''\n+    this.$el = el && query(el)\n+    if (this.$el) {\n+      this.$el.innerHTML = ''\n+    }\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true\n+    return this\n   }\n \n   Vue.prototype.$forceUpdate = function () {\n-    this._watcher.run()\n+    this._watcher.update()\n   }\n }"
            },
            {
                "commitId": "0b5e962943e88d6b5bc7b5c06851b2983d6201be",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -4,6 +4,7 @@ import { h, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n+  vm._mounted = false\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -35,6 +36,7 @@ export function renderMixin (Vue) {\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n+    this._mounted = true\n   }\n \n   Vue.prototype.$forceUpdate = function () {"
            },
            {
                "commitId": "8cf836f2ecb876a17305287cb18e7009555c11f3",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query } from '../util/index'\n+import { query, resolveAsset } from '../util/index'\n import { h, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n@@ -11,7 +11,11 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  // shorthands used in render functions\n   Vue.prototype.__h__ = h\n+  Vue.prototype.__d__ = function (id) {\n+    return resolveAsset(this.$options, 'directives', id, true)\n+  }\n \n   Vue.prototype._update = function (vtree) {\n     callHook(this, 'beforeUpdate')"
            },
            {
                "commitId": "914da492bf456de05205d0a0f82ecc4aa8719f6b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -16,9 +16,9 @@ export function renderMixin (Vue) {\n   Vue.prototype._update = function (vtree) {\n     callHook(this, 'beforeUpdate')\n     if (!this._tree) {\n-      patch(this.$el, vtree)\n+      this.$el = patch(this.$el, vtree)\n     } else {\n-      patch(this._tree, vtree)\n+      this.$el = patch(this._tree, vtree)\n     }\n     this._tree = vtree\n     callHook(this, 'updated')"
            },
            {
                "commitId": "0694a9bfb63350d2cb7ed992fee82e6a632ec74a",
                "additions": 5,
                "deletions": 0,
                "patch": "@@ -1,6 +1,7 @@\n import Watcher from '../observer/watcher'\n import { query } from '../util/index'\n import { h, patch } from '../vdom/index'\n+import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n   const el = vm.$options.el\n@@ -13,19 +14,23 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = h\n \n   Vue.prototype._update = function (vtree) {\n+    callHook(this, 'beforeUpdate')\n     if (!this._tree) {\n       patch(this.$el, vtree)\n     } else {\n       patch(this._tree, vtree)\n     }\n     this._tree = vtree\n+    callHook(this, 'updated')\n   }\n \n   Vue.prototype.$mount = function (el) {\n+    callHook(this, 'beforeMount')\n     this.$el = el ? query(el) : document.createElement('div')\n     this.$el.innerHTML = ''\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n+    callHook(this, 'mounted')\n   }\n \n   Vue.prototype.$forceUpdate = function () {"
            },
            {
                "commitId": "0e1ac079198044f22ea6c92d669a9a5f2336e9e0",
                "additions": 12,
                "deletions": 6,
                "patch": "@@ -3,25 +3,31 @@ import { query } from '../util/index'\n import { h, patch } from '../vdom/index'\n \n export function initRender (vm) {\n-  const options = vm.$options\n-  vm._el = query(options.el)\n-  vm._el.innerHTML = ''\n-  vm._watcher = new Watcher(vm, options.render, vm._update)\n-  vm._update(vm._watcher.value)\n+  const el = vm.$options.el\n+  if (el) {\n+    vm.$mount(el)\n+  }\n }\n \n export function renderMixin (Vue) {\n   Vue.prototype.__h__ = h\n \n   Vue.prototype._update = function (vtree) {\n     if (!this._tree) {\n-      patch(this._el, vtree)\n+      patch(this.$el, vtree)\n     } else {\n       patch(this._tree, vtree)\n     }\n     this._tree = vtree\n   }\n \n+  Vue.prototype.$mount = function (el) {\n+    this.$el = el ? query(el) : document.createElement('div')\n+    this.$el.innerHTML = ''\n+    this._watcher = new Watcher(this, this.$options.render, this._update)\n+    this._update(this._watcher.value)\n+  }\n+\n   Vue.prototype.$forceUpdate = function () {\n     this._watcher.run()\n   }"
            },
            {
                "commitId": "b5800b274c472897e64184ea716566422b3046cb",
                "additions": 28,
                "deletions": 0,
                "patch": "@@ -0,0 +1,28 @@\n+import Watcher from '../observer/watcher'\n+import { query } from '../util/index'\n+import { h, patch } from '../vdom/index'\n+\n+export function initRender (vm) {\n+  const options = vm.$options\n+  vm._el = query(options.el)\n+  vm._el.innerHTML = ''\n+  vm._watcher = new Watcher(vm, options.render, vm._update)\n+  vm._update(vm._watcher.value)\n+}\n+\n+export function renderMixin (Vue) {\n+  Vue.prototype.__h__ = h\n+\n+  Vue.prototype._update = function (vtree) {\n+    if (!this._tree) {\n+      patch(this._el, vtree)\n+    } else {\n+      patch(this._tree, vtree)\n+    }\n+    this._tree = vtree\n+  }\n+\n+  Vue.prototype.$forceUpdate = function () {\n+    this._watcher.run()\n+  }\n+}"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "give me all the commits for vnode.js file?",
        "number": 6,
        "category": 2,
        "response": "Here are all the commits for the file `vnode.js`, listed from the most recent to the oldest:\n\n1. **Commit ID:** 9949ab5d14e3620f40b876cffbc710a33d0237b2\n   - **Message:** \"Merge pull request #3 from dwelch2344/move_to_typescript\\n\\nWIP: typescript love on the tests\"\n   - **Date:** 2022-05-04T21:25:34Z\n\n2. **Commit ID:** 40dccfedd1d92ef9d61ee350ed8fbd7fc525b5b9\n   - **Message:** \"chore: fix test harness; most of the tooling + test harness is happy; coverage still needs fixing\"\n   - **Date:** 2022-05-03T17:04:55Z\n\n3. **Commit ID:** 982d5a492fb95577217e2dacaa044eabe78a8601\n   - **Message:** \"fix(types): support string type for style in VNode data (#9728)\\n\\nfix #9727\"\n   - **Date:** 2019-03-18T07:47:43Z\n\n4. **Commit ID:** dbc0582587f90e78867809bb6ae683301cd0626b\n   - **Message:** \"feat: dynamic directive arguments for v-on, v-bind and custom directives (#9373)\"\n   - **Date:** 2019-01-26T04:22:44Z\n\n5. **Commit ID:** 097f6229dffc34af452b106ad2a3b58845588807\n   - **Message:** \"fix(core): avoid mutating original children when cloning vnode\\n\\nThe on-demand clone strategy introduced in 956756b mutates the owner\\narray of the cloned vnode. This causes the newly cloned vnode to be\\ndestroyed when the parent node is destroyed. This is fixed by cloning\\nthe children array when cloning a vnode.\\n\\nfix #7975\"\n   - **Date:** 2018-12-01T22:05:36Z\n\n6. **Commit ID:** 4ecc21c29ec12bb33d3b426cb4d42c579e9b0f2d\n   - **Message:** \"feat(devtools): store functional render context on vnode in development (#8586)\"\n   - **Date:** 2018-11-30T22:31:44Z\n\n7. **Commit ID:** 8227fb35240ab1f301c30a6ad5d4d25071fa7996\n   - **Message:** \"fix: add missing `asyncMeta` during VNode cloning (#7861)\"\n   - **Date:** 2018-03-23T23:13:10Z\n\n8. **Commit ID:** d7d9b002fd60d246b1ef65f71b55b45f46563b4d\n   - **Message:** \"chore: fix typo (#7781)\"\n   - **Date:** 2018-03-09T13:54:55Z\n\n9. **Commit ID:** 956756b1be7084daf8b6afb92ac0da7c24cde2a5\n   - **Message:** \"refactor: use more efficient on-demand clone to handle reused node edge cases\\n\\nremoves unnecessary slot/static node clones, fix #7292\"\n   - **Date:** 2017-12-21T00:44:24Z\n\n10. **Commit ID:** 604e081d0456ed136b24b5f759c608d153dfae93\n    - **Message:** \"fix: ensure functionalContext is cloned during slot clones\\n\\nfix #7106\"\n    - **Date:** 2017-11-22T21:37:24Z\n\n11. **Commit ID:** 1cf02efda206185cb72bbaafb00037fa6269e3f3\n    - **Message:** \"fix: also clone component slot children during deepClone\\n\\nfix #6891, fix #6915\"\n    - **Date:** 2017-10-26T16:00:19Z\n\n12. **Commit ID:** 53431c63a9033bb9a73c915bca8525f0d7988c26\n    - **Message:** \"types: fix flow typing\"\n    - **Date:** 2017-10-11T15:24:39Z\n\n13. **Commit ID:** 421658884f7ca786747abf9b89e00925fdfdfba8\n    - **Message:** \"fix: fix scoped CSS for nested nodes in functional components\"\n    - **Date:** 2017-10-11T15:17:46Z\n\n14. **Commit ID:** 050bb33f9b02589357c037623ea8cbf8ff13555b\n    - **Message:** \"feat: scoped CSS support for functional components\"\n    - **Date:** 2017-10-11T14:38:46Z\n\n15. **Commit ID:** 53463619e5d19d35dfad1a4245a8dc583681feb3\n    - **Message:** \"perf: deep clone slot vnodes on re-render (#6478)\\n\\navoid unnecessary assignment.\"\n    - **Date:** 2017-09-01T16:14:55Z\n\n16. **Commit ID:** 0529040c17b8632032a43d142aac88386f6b4a1f\n    - **Message:** \"fix: deep clone slot vnodes on re-render\\n\\nfix #6372\"\n    - **Date:** 2017-08-29T22:47:10Z\n\n17. **Commit ID:** 11614d63b7862b68b11cc45c0891437c62a832d7\n    - **Message:** \"feat(v-on): support v-on object syntax with no arguments\\n\\nNote this does not support modifiers and is meant to be used for handling\\nevents proxying in higher-order-components.\"\n    - **Date:** 2017-07-11T08:36:04Z\n\n18. **Commit ID:** fed602b90be89a43b4ec41b5a2e0a526d3a5f4a2\n    - **Message:** \"refactor: also clone vnode.asyncFactory\"\n    - **Date:** 2017-07-11T05:06:23Z\n\n19. **Commit ID:** e4da249ab8ef32a0b8156c840c9d2b9773090f8a\n    - **Message:** \"feat: add `comments` option to allow preserving comments in template  (#5951)\\n\\nclose #5392\"\n    - **Date:** 2017-06-30T00:56:23Z\n\n20. **Commit ID:** d33c1250ee77dd337eb4979851ade331f177b890\n    - **Message:** \"fix:when using object syntax in v-bind, special attribute have no effect\"\n    - **Date:** 2017-06-16T18:02:37Z\n\n21. **Commit ID:** 9cf6646f46ef3c13236677e58e72d2c6dd5c8abf\n    - **Message:** \"support directly rendering async components in SSR\"\n    - **Date:** 2017-05-24T08:50:17Z\n\n22. **Commit ID:** 7404091896fda2c87ecac64efc24324ff1885e2c\n    - **Message:** \"support async hydration\"\n    - **Date:** 2017-05-24T08:50:17Z\n\n23. **Commit ID:** 43485fbc5b779e02122c3b7fc64296a2cfee31f6\n    - **Message:** \"Merge branch ssr-optimize into dev\"\n    - **Date:** 2017-05-18T08:56:05Z\n\n24. **Commit ID:** 26953f5cacc03440df394ebbc74023efd364b7e0\n    - **Message:** \"add semis to flow decls for better syntax highlighting\"\n    - **Date:** 2017-05-15T08:01:30Z\n\n25. **Commit ID:** 0ccefff794c5fe73b80b9faf5ae5bfd8ec1a500f\n    - **Message:** \"support v-for on scoped slots (fix #5615)\"\n    - **Date:** 2017-05-09T15:22:55Z\n\n26. **Commit ID:** 5d965d5b3bbe0e76cdb97e41e01a704322253e09\n    - **Message:** \"clone `isComment` when cloneVNode (#5633)\"\n    - **Date:** 2017-05-09T13:12:59Z\n\n27. **Commit ID:** 1073035164b809872bf35a3b007848979f86f48a\n    - **Message:** \"fix activate hook call timing (fix vue-router#1212)\"\n    - **Date:** 2017-04-07T07:30:37Z\n\n28. **Commit ID:** a12d32a56df2519c9cdf8d2da9d9425876263f89\n    - **Message:** \"fix style diffing on cached/slot elements (fix #5318)\"\n    - **Date:** 2017-04-03T06:13:57Z\n\n29. **Commit ID:** 2afaac2b397b4b04713488aeb62e5e222e5dc121\n    - **Message:** \"cache vnodes length (#5125)\"\n    - **Date:** 2017-03-08T02:24:25Z\n\n30. **Commit ID:** 9d6c8ec268f659a715e3b38c97a1e03964961703\n    - **Message:** \"feat: allow customization of component v-model prop/event via model option (close #4515)\"\n    - **Date:** 2017-01-22T19:31:43Z\n\n31. **Commit ID:** fe02bc3a27b3b33f9467980f61126edf97105287\n    - **Message:** \"ignore deprecated alias\"\n    - **Date:** 2017-01-12T23:24:37Z\n\n32. **Commit ID:** ced2dfc8f704b07cd59467eca38c58c590d0c012\n    - **Message:** \"expose vnode.child for backwards compat, update .flowconfig & ts types\"\n    - **Date:** 2017-01-12T23:04:36Z\n\n33. **Commit ID:** 30258a9a60b96c25c95685cb17ee35838830ee4c\n    - **Message:** \"rename vnode.child -> vnode.componentInstance\"\n    - **Date:** 2017-01-12T22:44:19Z\n\n34. **Commit ID:** 207c18c47f8c94f6d92675b28bc67511b7897246\n    - **Message:** \"further reduce normalizeChildren usage\"\n    - **Date:** 2016-12-05T01:36:40Z\n\n35. **Commit ID:** 7c3c86f36044ada983c09e7733841cb4c55de9d1\n    - **Message:** \"fix namespace hoisting\"\n    - **Date:** 2016-12-05T01:36:40Z\n\n36. **Commit ID:** 79e1058799dcde0b7e341ef44b590ecbf1e3a722\n    - **Message:** \"wip: refactor compiler to skip normalization when possible\\n\\nwip fix\\n\\nwip fix\\n\\nwip fix\"\n    - **Date:** 2016-12-05T01:36:40Z\n\n37. **Commit ID:** 7431e4d16c92862ac74fdb3053de9295c809b586\n    - **Message:** \"emptyVNode -> createEmptyVNode\"\n    - **Date:** 2016-12-05T01:36:40Z\n\n38. **Commit ID:** 7b389bc34e12442663de1939882b523345a9e46d\n    - **Message:** \"avoid warning unknown custom elements in v-pre\"\n    - **Date:** 2016-11-24T17:47:27Z\n\n39. **Commit ID:** 303378f85b26934396e2f6dc0973f6982da2beb1\n    - **Message:** \"support default scoped slot + function children as scoped slot\"\n    - **Date:** 2016-11-20T17:03:43Z\n\n40. **Commit ID:** ff551029bf872ad067ac7c5ba7c6311fdde7c674\n    - **Message:** \"wip: fix flow type for weex merge\"\n    - **Date:** 2016-11-07T21:26:06Z\n\n41. **Commit ID:** b69b4a4eeff204488c3eb60cac951f9808581e1c\n    - **Message:** \"tweak style merge for performance\"\n    - **Date:** 2016-11-07T21:20:10Z\n\n42. **Commit ID:** e960cd104e67e8e410956fa589090fe171382528\n    - **Message:** \"enable style merge behavior between parent-child components (fix #3997) (#4138)\\n\\n* merge style between components\\r\\n\\r\\n* update test case\\r\\n\\r\\n* update style compiler\\r\\n\\r\\n* add paren to style binding code\\r\\n\\r\\n* update background property parsing\\r\\n\\r\\n* introduce interpolation warning and refactor var to const\"\n    - **Date:** 2016-11-07T21:19:48Z\n\n43. **Commit ID:** ec824be88e9bc71b31e5c4a43f80d921674dca66\n    - **Message:** \"fix v-once inside v-for (fix #3964)\"\n    - **Date:** 2016-11-03T02:34:36Z\n\n44. **Commit ID:** 0cd1489e68891e4ca532ce7299d09e8af5ae3f52\n    - **Message:** \".number modifier should work with select, radio, checkbox (fix #4018) (#4022)\\n\\n* support number modifier in select, radio, checkbox\\r\\n\\r\\n* add test case\\r\\n\\r\\n* add ASTModifier type to specify modifiers type\\r\\n\\r\\n* fix typo\\r\\n\\r\\n* keep code consistent\"\n    - **Date:** 2016-11-01T15:50:22Z\n\n45. **Commit ID:** 1a8720d6ead500eed5d40457a3e7f59fe8972472\n    - **Message:** \"Fix typo in component (#3978)\"\n    - **Date:** 2016-10-19T14:33:17Z\n\n46. **Commit ID:** 1fa3844dc26745b4cb855b0934bd1b132ba33d9b\n    - **Message:** \"refactor directive update implementation\"\n    - **Date:** 2016-10-12T00:31:13Z\n\n47. **Commit ID:** 3446d1485d36b91ef42c53268cb69ecb047538a5\n    - **Message:** \"support functional components as named slot (fix #3872)\"\n    - **Date:** 2016-10-11T02:41:14Z\n\n48. **Commit ID:** d6a7568891d0c3368471322de5d730172d92b9e4\n    - **Message:** \"improve v-bind implementation and make it work on components (fix #3670)\"\n    - **Date:** 2016-09-14T14:14:45Z\n\n49. **Commit ID:** f6b1a51729f705bc49c6eaaf32ec095efd97401c\n    - **Message:** \"fix hot-reload not updating static nodes\"\n    - **Date:** 2016-08-29T15:45:08Z\n\n50. **Commit ID:** 014d2f8599f9afc0754e603b1528a12e74bd209a\n    - **Message:** \"fix vdom patch edge case for static nodes being reused and as insertion reference node (fix #3533)\"\n    - **Date:** 2016-08-27T20:29:07Z\n\n51. **Commit ID:** ed2085974b2a385ca1fd8cd696917d6cda8322e7\n    - **Message:** \"ensure mergeVNodeHook does not inject duplicate hooks\"\n    - **Date:** 2016-08-26T23:19:51Z\n\n52. **Commit ID:** d2df58e547a7e1018c72a52714be7dee4ad06922\n    - **Message:** \"move v-show marker to runtime so that render functions work as expected (fix #3488)\"\n    - **Date:** 2016-08-20T15:14:41Z\n\n53. **Commit ID:** ba5fb31188467c9f07cdcfa94e9469e172098ec5\n    - **Message:** \"fix transition insert hook duplicate invocation on slot nodes (fix #3474)\"\n    - **Date:** 2016-08-18T16:00:31Z\n\n54. **Commit ID:** 18386c4cf4fe829f447687734a5bf03905d0db44\n    - **Message:** \"fix static nodes optimization inside v-for (fix #3406)\"\n    - **Date:** 2016-08-08T23:03:00Z\n\n55. **Commit ID:** fe801b16e4da63513bce95bfa762a8a36d83fe59\n    - **Message:** \"wip: fix $parent after children change\"\n    - **Date:** 2016-08-05T16:43:35Z\n\n56. **Commit ID:** b5b963f51df1fa3124cd8a9846be5455408bc52a\n    - **Message:** \"wip: refactor children resolution (remove thunk mechanism)\"\n    - **Date:** 2016-08-05T16:10:13Z\n\n57. **Commit ID:** c66b7566c682af653dc475fab1475db5484e40ee\n    - **Message:** \"fix flow\"\n    - **Date:** 2016-08-05T07:10:40Z\n\n58. **Commit ID:** 59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8\n    - **Message:** \"support class/style in v-bind object\"\n    - **Date:** 2016-08-05T06:59:33Z\n\n59. **Commit ID:** 351aef3cb4ada980f105f98f8b835876e8d4d689\n    - **Message:** \"use comment node as empty placeholder (fix <transition> SSR hydration)\"\n    - **Date:** 2016-08-05T05:52:09Z\n\n60. **Commit ID:** 40b93e6527d9ecdb308925114bf14cb60b36eae0\n    - **Message:** \"avoid unnecessary enter transitions on nested inserted elements\"\n    - **Date:** 2016-08-05T02:17:59Z\n\n61. **Commit ID:** 35ee5b105e8a517571b9bb9a87160c6ffbdad779\n    - **Message:** \"remove staticAttrs\"\n    - **Date:** 2016-07-29T14:45:43Z\n\n62. **Commit ID:** 74f8b98509d24487e1a8d1588b4128a7a1046a41\n    - **Message:** \"handle static vnodes properly during patch (fix #3325)\"\n    - **Date:** 2016-07-26T19:49:40Z\n\n63. **Commit ID:** 3ce450b6dc5f2135266c8a38818371e9d4f1f460\n    - **Message:** \"use more proper flow type syntax\"\n    - **Date:** 2016-07-26T01:28:46Z\n\n64. **Commit ID:** ea9c6c37c3ef0ef3706afa94070b89a7464c559c\n    - **Message:** \"support v-on .native modifier on components\"\n    - **Date:** 2016-07-19T22:56:10Z\n\n65. **Commit ID:** 69ecdcb05e3f5db32af889962fe8253d49d7390d\n    - **Message:** \"rename vnode.data.props -> domProps\"\n    - **Date:** 2016-07-19T21:52:10Z\n\n66. **Commit ID:** e6871a33c17fd7dfd58fba6c7c6b6182f0ff2f0e\n    - **Message:** \"update flow annotations\"\n    - **Date:** 2016-07-15T21:48:42Z\n\n67. **Commit ID:** 9421bd48066906e20052e04cf88c4ae623080a95\n    - **Message:** \"extract getRealChild for abstract components\"\n    - **Date:** 2016-07-06T21:07:46Z\n\n68. **Commit ID:** 06b470369a7bde2a7f36468191e424b4c455db67\n    - **Message:** \"element namespace should be resolved at runtime for render function / jsx usage\"\n    - **Date:** 2016-06-27T18:02:14Z\n\n69. **Commit ID:** 1b3b19491fd47f3634e30d7fcce991881de16530\n    - **Message:** \"merge renderElement and renderElementWithChildren\"\n    - **Date:** 2016-06-27T16:25:02Z\n\n70. **Commit ID:** cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9\n    - **Message:** \"apply scopeId to slot contents too\"\n    - **Date:** 2016-06-15T17:33:12Z\n\n71. **Commit ID:** b0ad94fc876826a8ee3226320aacd40b8967f8dd\n    - **Message:** \"properly encode HTML in server-side rendering (fix #3078)\"\n    - **Date:** 2016-06-14T18:15:41Z\n\n72. **Commit ID:** a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6\n    - **Message:** \"fix whitespace vnode identity breaking patch (fix #3043)\"\n    - **Date:** 2016-06-08T17:28:55Z\n\n73. **Commit ID:** a5a9dc9b694da007a13bd5adfd64b0ab0750ad57\n    - **Message:** \"support keep-alive\"\n    - **Date:** 2016-06-04T14:53:05Z\n\n74. **Commit ID:** 4bcdce895c5dc0403b6a94b0ad71b2bc57734234\n    - **Message:** \"record original tag name on vnode for components using is attribute\"\n    - **Date:** 2016-06-02T22:18:32Z\n\n75. **Commit ID:** d40ab0ca8760b9d8ec8be630e2360e6927ba8b3e\n    - **Message:** \"fix component client-side hydration\"\n    - **Date:** 2016-06-01T22:20:13Z\n\n76. **Commit ID:** f8cfc81826715b23dac054b6d1727594d2caeebd\n    - **Message:** \"remove unnecessary v-pre related code\"\n    - **Date:** 2016-06-01T19:03:09Z\n\n77. **Commit ID:** 8d229b2442e8cc5b2801fa55a4ea8ea766721381\n    - **Message:** \"support v-bind on objects\"\n    - **Date:** 2016-05-25T00:41:06Z\n\n78. **Commit ID:** 7f85acb4e5c28052e07d5e2c4cf2903cac0e4bd5\n    - **Message:** \"expose oldValue on directive bindings\"\n    - **Date:** 2016-05-24T22:28:17Z\n\n79. **Commit ID:** 48f22c9b17a9def00dcfa4899fee9e60c8933dbc\n    - **Message:** \"fix flow error\"\n    - **Date:** 2016-05-24T04:27:18Z\n\n80. **Commit ID:** 837853d95ad1224ed12ba2454b791591884caf2e\n    - **Message:** \"better inferring of component names in warnings\"\n    - **Date:** 2016-05-19T17:58:11Z\n\n81. **Commit ID:** 20fb79a1ea098bedda6fec8bebbb184ac51fce20\n    - **Message:** \"new render mechanism (#2857)\\n\\n* updated compiler with new render functions\\r\\n\\r\\n* separated createElement into renderSelf & renderElement\\r\\nsupported getters for text node & static root\\r\\n\\r\\n* adapted new element creator into render call\\r\\n\\r\\n* improved \\\\$createElement\\r\\n\\r\\n* fixed by flow check\\r\\n\\r\\n* fixed ssr bugs for $createElement\"\n    - **Date:** 2016-05-14T19:49:18Z\n\n82. **Commit ID:** 750bec1024478022453277a4d175cff5a8445672\n    - **Message:** \"annotate platforms/web\"\n    - **Date:** 2016-05-14T11:40:56Z\n\n83. **Commit ID:** 59fcd4e7a749561ad6acf3ec50c32c24b33d8ec4\n    - **Message:** \"finish annotating vdom\"\n    - **Date:** 2016-05-14T07:38:41Z\n\n84. **Commit ID:** 45d96c7dbc399696138c9d020e13f97cf94ce181\n    - **Message:** \"annotation for vdom (wip)\"\n    - **Date:** 2016-05-14T07:08:21Z\n\n85. **Commit ID:** 354ea616b5ec4826e23a88465e404fd3b382d9f4\n    - **Message:** \"annotate Vue class\"\n    - **Date:** 2016-05-12T23:13:38Z\n\n86. **Commit ID:** 6593be9f75ea229e71e5b0530bb0f27aeee57afc\n    - **Message:** \"update unit tests convention + basic component tests\"\n    - **Date:** 2016-05-09T22:08:18Z\n\n87. **Commit ID:** f4a2afb3b33991c1694e8fcb7d62641c30eeaf53\n    - **Message:** \"expose context on vnode, simplify render methods\"\n    - **Date:** 2016-04-25T03:31:07Z\n\n88. **Commit ID:** 955e2f839175fadbd0218f7b78c48ebbbcca6349\n    - **Message:** \"restructure (build pass)\"\n    - **Date:** 2016-04-23T20:12:19Z\n\n89. **Commit ID:** ec5bcefca73160e6d283b8a0c4e1457f42f87081\n    - **Message:** \"tweak namespace changes\"\n    - **Date:** 2016-04-23T17:37:47Z\n\n90. **Commit ID:** 6e251e0721b4dbb4896999df78450d912dcba30d\n    - **Message:** \"Change svg parameter to namespace (#3)\\n\\n* change svg parameter into namespace\\r\\n\\r\\n* fixed svg to namespace bug\\r\\n\\r\\n* change svg detecting into namespace detecting in parser\\r\\n\\r\\n* fixed eslint error\"\n    - **Date:** 2016-04-23T17:29:31Z\n\n91. **Commit ID:** 9a347e02b4b1fd8ddc51db6c2ba08a1831f4dfd0\n    - **Message:** \"allow data to be undefined\"\n    - **Date:** 2016-04-21T16:37:12Z\n\n92. **Commit ID:** d87987780a208fe3c65415a4a1cab58250ffa9a3\n    - **Message:** \"rename\"\n    - **Date:** 2016-04-21T08:24:26Z\n\n93. **Commit ID:** 1a35cf4a21e8c8e897c2d6f291b99376b12b9fac\n    - **Message:** \"support template slot\"\n    - **Date:** 2016-04-15T02:55:29Z\n\n94. **Commit ID:** 0ab0600599dcc593695560382af1c1a8119ce848\n    - **Message:** \"restructure\"\n    - **Date:** 2016-04-12T23:42:15Z\n\n95. **Commit ID:** 69e94eb453ee0da21f9a0506d2f01269865a4776\n    - **Message:** \"move flatten into vdom implementation\"\n    - **Date:** 2016-04-11T03:54:53Z\n\n96. **Commit ID:** a879ec06ef9504db8df2a19aac0d07609fe36131\n    - **Message:** \"init\"\n    - **Date:** 2016-04-11T02:47:28Z",
        "chain_of_thought": "To address the question, we need to find all the commits associated with the file named \"vnode.js\". The schema indicates that the relevant nodes are the File and Commit nodes, and the relationship between them is the changed relationship. We need to identify the file by its name and then find all the commits that have modified this file.\n\nHere's the step-by-step breakdown of the query:\n\n1. Identify the File node with the name \"vnode.js\".\n2. Use the changed relationship to find all Commit nodes that have modified this file.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'vnode.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\nORDER BY committedDate DESC\n```\n\nThis query will return the commit ID, message, and committed date for each commit that has modified the file \"vnode.js\", ordered by the committed date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'vnode.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\nORDER BY committedDate DESC\n",
        "result": [
            {
                "commitId": "9949ab5d14e3620f40b876cffbc710a33d0237b2",
                "commitMessage": "\"Merge pull request #3 from dwelch2344/move_to_typescript\n\nWIP: typescript love on the tests\"",
                "committedDate": "2022-05-04T21:25:34Z"
            },
            {
                "commitId": "40dccfedd1d92ef9d61ee350ed8fbd7fc525b5b9",
                "commitMessage": "\"chore: fix test harness; most of the tooling + test harness is happy; coverage still needs fixing\"",
                "committedDate": "2022-05-03T17:04:55Z"
            },
            {
                "commitId": "982d5a492fb95577217e2dacaa044eabe78a8601",
                "commitMessage": "\"fix(types): support string type for style in VNode data (#9728)\n\nfix #9727\"",
                "committedDate": "2019-03-18T07:47:43Z"
            },
            {
                "commitId": "dbc0582587f90e78867809bb6ae683301cd0626b",
                "commitMessage": "\"feat: dynamic directive arguments for v-on, v-bind and custom directives (#9373)\"",
                "committedDate": "2019-01-26T04:22:44Z"
            },
            {
                "commitId": "097f6229dffc34af452b106ad2a3b58845588807",
                "commitMessage": "\"fix(core): avoid mutating original children when cloning vnode\n\nThe on-demand clone strategy introduced in 956756b mutates the owner\narray of the cloned vnode. This causes the newly cloned vnode to be\ndestroyed when the parent node is destroyed. This is fixed by cloning\nthe children array when cloning a vnode.\n\nfix #7975\"",
                "committedDate": "2018-12-01T22:05:36Z"
            },
            {
                "commitId": "4ecc21c29ec12bb33d3b426cb4d42c579e9b0f2d",
                "commitMessage": "\"feat(devtools): store functional render context on vnode in development (#8586)\"",
                "committedDate": "2018-11-30T22:31:44Z"
            },
            {
                "commitId": "8227fb35240ab1f301c30a6ad5d4d25071fa7996",
                "commitMessage": "\"fix: add missing `asyncMeta` during VNode cloning (#7861)\"",
                "committedDate": "2018-03-23T23:13:10Z"
            },
            {
                "commitId": "d7d9b002fd60d246b1ef65f71b55b45f46563b4d",
                "commitMessage": "\"chore: fix typo (#7781)\"",
                "committedDate": "2018-03-09T13:54:55Z"
            },
            {
                "commitId": "956756b1be7084daf8b6afb92ac0da7c24cde2a5",
                "commitMessage": "\"refactor: use more efficient on-demand clone to handle reused node edge cases\n\nremoves unnecessary slot/static node clones, fix #7292\"",
                "committedDate": "2017-12-21T00:44:24Z"
            },
            {
                "commitId": "604e081d0456ed136b24b5f759c608d153dfae93",
                "commitMessage": "\"fix: ensure functionalContext is cloned during slot clones\n\nfix #7106\"",
                "committedDate": "2017-11-22T21:37:24Z"
            },
            {
                "commitId": "1cf02efda206185cb72bbaafb00037fa6269e3f3",
                "commitMessage": "\"fix: also clone component slot children during deepClone\n\nfix #6891, fix #6915\"",
                "committedDate": "2017-10-26T16:00:19Z"
            },
            {
                "commitId": "53431c63a9033bb9a73c915bca8525f0d7988c26",
                "commitMessage": "\"types: fix flow typing\"",
                "committedDate": "2017-10-11T15:24:39Z"
            },
            {
                "commitId": "421658884f7ca786747abf9b89e00925fdfdfba8",
                "commitMessage": "\"fix: fix scoped CSS for nested nodes in functional components\"",
                "committedDate": "2017-10-11T15:17:46Z"
            },
            {
                "commitId": "050bb33f9b02589357c037623ea8cbf8ff13555b",
                "commitMessage": "\"feat: scoped CSS support for functional components\"",
                "committedDate": "2017-10-11T14:38:46Z"
            },
            {
                "commitId": "53463619e5d19d35dfad1a4245a8dc583681feb3",
                "commitMessage": "\"perf: deep clone slot vnodes on re-render (#6478)\n\navoid unnecessary assignment.\"",
                "committedDate": "2017-09-01T16:14:55Z"
            },
            {
                "commitId": "0529040c17b8632032a43d142aac88386f6b4a1f",
                "commitMessage": "\"fix: deep clone slot vnodes on re-render\n\nfix #6372\"",
                "committedDate": "2017-08-29T22:47:10Z"
            },
            {
                "commitId": "11614d63b7862b68b11cc45c0891437c62a832d7",
                "commitMessage": "\"feat(v-on): support v-on object syntax with no arguments\n\nNote this does not support modifiers and is meant to be used for handling\nevents proxying in higher-order-components.\"",
                "committedDate": "2017-07-11T08:36:04Z"
            },
            {
                "commitId": "fed602b90be89a43b4ec41b5a2e0a526d3a5f4a2",
                "commitMessage": "\"refactor: also clone vnode.asyncFactory\"",
                "committedDate": "2017-07-11T05:06:23Z"
            },
            {
                "commitId": "e4da249ab8ef32a0b8156c840c9d2b9773090f8a",
                "commitMessage": "\"feat: add `comments` option to allow preserving comments in template  (#5951)\n\nclose #5392\"",
                "committedDate": "2017-06-30T00:56:23Z"
            },
            {
                "commitId": "d33c1250ee77dd337eb4979851ade331f177b890",
                "commitMessage": "\"fix:when using object syntax in v-bind, special attribute have no effect\"",
                "committedDate": "2017-06-16T18:02:37Z"
            },
            {
                "commitId": "9cf6646f46ef3c13236677e58e72d2c6dd5c8abf",
                "commitMessage": "\"support directly rendering async components in SSR\"",
                "committedDate": "2017-05-24T08:50:17Z"
            },
            {
                "commitId": "7404091896fda2c87ecac64efc24324ff1885e2c",
                "commitMessage": "\"support async hydration\"",
                "committedDate": "2017-05-24T08:50:17Z"
            },
            {
                "commitId": "43485fbc5b779e02122c3b7fc64296a2cfee31f6",
                "commitMessage": "\"Merge branch ssr-optimize into dev\"",
                "committedDate": "2017-05-18T08:56:05Z"
            },
            {
                "commitId": "26953f5cacc03440df394ebbc74023efd364b7e0",
                "commitMessage": "\"add semis to flow decls for better syntax highlighting\"",
                "committedDate": "2017-05-15T08:01:30Z"
            },
            {
                "commitId": "0ccefff794c5fe73b80b9faf5ae5bfd8ec1a500f",
                "commitMessage": "\"support v-for on scoped slots (fix #5615)\"",
                "committedDate": "2017-05-09T15:22:55Z"
            },
            {
                "commitId": "5d965d5b3bbe0e76cdb97e41e01a704322253e09",
                "commitMessage": "\"clone `isComment` when cloneVNode (#5633)\"",
                "committedDate": "2017-05-09T13:12:59Z"
            },
            {
                "commitId": "1073035164b809872bf35a3b007848979f86f48a",
                "commitMessage": "\"fix activate hook call timing (fix vue-router#1212)\"",
                "committedDate": "2017-04-07T07:30:37Z"
            },
            {
                "commitId": "a12d32a56df2519c9cdf8d2da9d9425876263f89",
                "commitMessage": "\"fix style diffing on cached/slot elements (fix #5318)\"",
                "committedDate": "2017-04-03T06:13:57Z"
            },
            {
                "commitId": "2afaac2b397b4b04713488aeb62e5e222e5dc121",
                "commitMessage": "\"cache vnodes length (#5125)\"",
                "committedDate": "2017-03-08T02:24:25Z"
            },
            {
                "commitId": "9d6c8ec268f659a715e3b38c97a1e03964961703",
                "commitMessage": "\"feat: allow customization of component v-model prop/event via model option (close #4515)\"",
                "committedDate": "2017-01-22T19:31:43Z"
            },
            {
                "commitId": "fe02bc3a27b3b33f9467980f61126edf97105287",
                "commitMessage": "\"ignore deprecated alias\"",
                "committedDate": "2017-01-12T23:24:37Z"
            },
            {
                "commitId": "ced2dfc8f704b07cd59467eca38c58c590d0c012",
                "commitMessage": "\"expose vnode.child for backwards compat, update .flowconfig & ts types\"",
                "committedDate": "2017-01-12T23:04:36Z"
            },
            {
                "commitId": "30258a9a60b96c25c95685cb17ee35838830ee4c",
                "commitMessage": "\"rename vnode.child -> vnode.componentInstance\"",
                "committedDate": "2017-01-12T22:44:19Z"
            },
            {
                "commitId": "207c18c47f8c94f6d92675b28bc67511b7897246",
                "commitMessage": "\"further reduce normalizeChildren usage\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7c3c86f36044ada983c09e7733841cb4c55de9d1",
                "commitMessage": "\"fix namespace hoisting\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "79e1058799dcde0b7e341ef44b590ecbf1e3a722",
                "commitMessage": "\"wip: refactor compiler to skip normalization when possible\n\nwip fix\n\nwip fix\n\nwip fix\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7431e4d16c92862ac74fdb3053de9295c809b586",
                "commitMessage": "\"emptyVNode -> createEmptyVNode\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7b389bc34e12442663de1939882b523345a9e46d",
                "commitMessage": "\"avoid warning unknown custom elements in v-pre\"",
                "committedDate": "2016-11-24T17:47:27Z"
            },
            {
                "commitId": "303378f85b26934396e2f6dc0973f6982da2beb1",
                "commitMessage": "\"support default scoped slot + function children as scoped slot\"",
                "committedDate": "2016-11-20T17:03:43Z"
            },
            {
                "commitId": "ff551029bf872ad067ac7c5ba7c6311fdde7c674",
                "commitMessage": "\"wip: fix flow type for weex merge\"",
                "committedDate": "2016-11-07T21:26:06Z"
            },
            {
                "commitId": "b69b4a4eeff204488c3eb60cac951f9808581e1c",
                "commitMessage": "\"tweak style merge for performance\"",
                "committedDate": "2016-11-07T21:20:10Z"
            },
            {
                "commitId": "e960cd104e67e8e410956fa589090fe171382528",
                "commitMessage": "\"enable style merge behavior between parent-child components (fix #3997) (#4138)\n\n* merge style between components\r\n\r\n* update test case\r\n\r\n* update style compiler\r\n\r\n* add paren to style binding code\r\n\r\n* update background property parsing\r\n\r\n* introduce interpolation warning and refactor var to const\"",
                "committedDate": "2016-11-07T21:19:48Z"
            },
            {
                "commitId": "ec824be88e9bc71b31e5c4a43f80d921674dca66",
                "commitMessage": "\"fix v-once inside v-for (fix #3964)\"",
                "committedDate": "2016-11-03T02:34:36Z"
            },
            {
                "commitId": "0cd1489e68891e4ca532ce7299d09e8af5ae3f52",
                "commitMessage": "\".number modifier should work with select, radio, checkbox (fix #4018) (#4022)\n\n* support number modifier in select, radio, checkbox\r\n\r\n* add test case\r\n\r\n* add ASTModifier type to specify modifiers type\r\n\r\n* fix typo\r\n\r\n* keep code consistent\"",
                "committedDate": "2016-11-01T15:50:22Z"
            },
            {
                "commitId": "1a8720d6ead500eed5d40457a3e7f59fe8972472",
                "commitMessage": "\"Fix typo in component (#3978)\"",
                "committedDate": "2016-10-19T14:33:17Z"
            },
            {
                "commitId": "1fa3844dc26745b4cb855b0934bd1b132ba33d9b",
                "commitMessage": "\"refactor directive update implementation\"",
                "committedDate": "2016-10-12T00:31:13Z"
            },
            {
                "commitId": "3446d1485d36b91ef42c53268cb69ecb047538a5",
                "commitMessage": "\"support functional components as named slot (fix #3872)\"",
                "committedDate": "2016-10-11T02:41:14Z"
            },
            {
                "commitId": "d6a7568891d0c3368471322de5d730172d92b9e4",
                "commitMessage": "\"improve v-bind implementation and make it work on components (fix #3670)\"",
                "committedDate": "2016-09-14T14:14:45Z"
            },
            {
                "commitId": "f6b1a51729f705bc49c6eaaf32ec095efd97401c",
                "commitMessage": "\"fix hot-reload not updating static nodes\"",
                "committedDate": "2016-08-29T15:45:08Z"
            },
            {
                "commitId": "014d2f8599f9afc0754e603b1528a12e74bd209a",
                "commitMessage": "\"fix vdom patch edge case for static nodes being reused and as insertion reference node (fix #3533)\"",
                "committedDate": "2016-08-27T20:29:07Z"
            },
            {
                "commitId": "ed2085974b2a385ca1fd8cd696917d6cda8322e7",
                "commitMessage": "\"ensure mergeVNodeHook does not inject duplicate hooks\"",
                "committedDate": "2016-08-26T23:19:51Z"
            },
            {
                "commitId": "d2df58e547a7e1018c72a52714be7dee4ad06922",
                "commitMessage": "\"move v-show marker to runtime so that render functions work as expected (fix #3488)\"",
                "committedDate": "2016-08-20T15:14:41Z"
            },
            {
                "commitId": "ba5fb31188467c9f07cdcfa94e9469e172098ec5",
                "commitMessage": "\"fix transition insert hook duplicate invocation on slot nodes (fix #3474)\"",
                "committedDate": "2016-08-18T16:00:31Z"
            },
            {
                "commitId": "18386c4cf4fe829f447687734a5bf03905d0db44",
                "commitMessage": "\"fix static nodes optimization inside v-for (fix #3406)\"",
                "committedDate": "2016-08-08T23:03:00Z"
            },
            {
                "commitId": "fe801b16e4da63513bce95bfa762a8a36d83fe59",
                "commitMessage": "\"wip: fix $parent after children change\"",
                "committedDate": "2016-08-05T16:43:35Z"
            },
            {
                "commitId": "b5b963f51df1fa3124cd8a9846be5455408bc52a",
                "commitMessage": "\"wip: refactor children resolution (remove thunk mechanism)\"",
                "committedDate": "2016-08-05T16:10:13Z"
            },
            {
                "commitId": "c66b7566c682af653dc475fab1475db5484e40ee",
                "commitMessage": "\"fix flow\"",
                "committedDate": "2016-08-05T07:10:40Z"
            },
            {
                "commitId": "59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8",
                "commitMessage": "\"support class/style in v-bind object\"",
                "committedDate": "2016-08-05T06:59:33Z"
            },
            {
                "commitId": "351aef3cb4ada980f105f98f8b835876e8d4d689",
                "commitMessage": "\"use comment node as empty placeholder (fix <transition> SSR hydration)\"",
                "committedDate": "2016-08-05T05:52:09Z"
            },
            {
                "commitId": "40b93e6527d9ecdb308925114bf14cb60b36eae0",
                "commitMessage": "\"avoid unnecessary enter transitions on nested inserted elements\"",
                "committedDate": "2016-08-05T02:17:59Z"
            },
            {
                "commitId": "35ee5b105e8a517571b9bb9a87160c6ffbdad779",
                "commitMessage": "\"remove staticAttrs\"",
                "committedDate": "2016-07-29T14:45:43Z"
            },
            {
                "commitId": "74f8b98509d24487e1a8d1588b4128a7a1046a41",
                "commitMessage": "\"handle static vnodes properly during patch (fix #3325)\"",
                "committedDate": "2016-07-26T19:49:40Z"
            },
            {
                "commitId": "3ce450b6dc5f2135266c8a38818371e9d4f1f460",
                "commitMessage": "\"use more proper flow type syntax\"",
                "committedDate": "2016-07-26T01:28:46Z"
            },
            {
                "commitId": "ea9c6c37c3ef0ef3706afa94070b89a7464c559c",
                "commitMessage": "\"support v-on .native modifier on components\"",
                "committedDate": "2016-07-19T22:56:10Z"
            },
            {
                "commitId": "69ecdcb05e3f5db32af889962fe8253d49d7390d",
                "commitMessage": "\"rename vnode.data.props -> domProps\"",
                "committedDate": "2016-07-19T21:52:10Z"
            },
            {
                "commitId": "e6871a33c17fd7dfd58fba6c7c6b6182f0ff2f0e",
                "commitMessage": "\"update flow annotations\"",
                "committedDate": "2016-07-15T21:48:42Z"
            },
            {
                "commitId": "9421bd48066906e20052e04cf88c4ae623080a95",
                "commitMessage": "\"extract getRealChild for abstract components\"",
                "committedDate": "2016-07-06T21:07:46Z"
            },
            {
                "commitId": "06b470369a7bde2a7f36468191e424b4c455db67",
                "commitMessage": "\"element namespace should be resolved at runtime for render function / jsx usage\"",
                "committedDate": "2016-06-27T18:02:14Z"
            },
            {
                "commitId": "1b3b19491fd47f3634e30d7fcce991881de16530",
                "commitMessage": "\"merge renderElement and renderElementWithChildren\"",
                "committedDate": "2016-06-27T16:25:02Z"
            },
            {
                "commitId": "cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9",
                "commitMessage": "\"apply scopeId to slot contents too\"",
                "committedDate": "2016-06-15T17:33:12Z"
            },
            {
                "commitId": "b0ad94fc876826a8ee3226320aacd40b8967f8dd",
                "commitMessage": "\"properly encode HTML in server-side rendering (fix #3078)\"",
                "committedDate": "2016-06-14T18:15:41Z"
            },
            {
                "commitId": "a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6",
                "commitMessage": "\"fix whitespace vnode identity breaking patch (fix #3043)\"",
                "committedDate": "2016-06-08T17:28:55Z"
            },
            {
                "commitId": "a5a9dc9b694da007a13bd5adfd64b0ab0750ad57",
                "commitMessage": "\"support keep-alive\"",
                "committedDate": "2016-06-04T14:53:05Z"
            },
            {
                "commitId": "4bcdce895c5dc0403b6a94b0ad71b2bc57734234",
                "commitMessage": "\"record original tag name on vnode for components using is attribute\"",
                "committedDate": "2016-06-02T22:18:32Z"
            },
            {
                "commitId": "d40ab0ca8760b9d8ec8be630e2360e6927ba8b3e",
                "commitMessage": "\"fix component client-side hydration\"",
                "committedDate": "2016-06-01T22:20:13Z"
            },
            {
                "commitId": "f8cfc81826715b23dac054b6d1727594d2caeebd",
                "commitMessage": "\"remove unnecessary v-pre related code\"",
                "committedDate": "2016-06-01T19:03:09Z"
            },
            {
                "commitId": "8d229b2442e8cc5b2801fa55a4ea8ea766721381",
                "commitMessage": "\"support v-bind on objects\"",
                "committedDate": "2016-05-25T00:41:06Z"
            },
            {
                "commitId": "7f85acb4e5c28052e07d5e2c4cf2903cac0e4bd5",
                "commitMessage": "\"expose oldValue on directive bindings\"",
                "committedDate": "2016-05-24T22:28:17Z"
            },
            {
                "commitId": "48f22c9b17a9def00dcfa4899fee9e60c8933dbc",
                "commitMessage": "\"fix flow error\"",
                "committedDate": "2016-05-24T04:27:18Z"
            },
            {
                "commitId": "837853d95ad1224ed12ba2454b791591884caf2e",
                "commitMessage": "\"better inferring of component names in warnings\"",
                "committedDate": "2016-05-19T17:58:11Z"
            },
            {
                "commitId": "20fb79a1ea098bedda6fec8bebbb184ac51fce20",
                "commitMessage": "\"new render mechanism (#2857)\n\n* updated compiler with new render functions\r\n\r\n* separated createElement into renderSelf & renderElement\r\nsupported getters for text node & static root\r\n\r\n* adapted new element creator into render call\r\n\r\n* improved \\$createElement\r\n\r\n* fixed by flow check\r\n\r\n* fixed ssr bugs for $createElement\"",
                "committedDate": "2016-05-14T19:49:18Z"
            },
            {
                "commitId": "750bec1024478022453277a4d175cff5a8445672",
                "commitMessage": "\"annotate platforms/web\"",
                "committedDate": "2016-05-14T11:40:56Z"
            },
            {
                "commitId": "59fcd4e7a749561ad6acf3ec50c32c24b33d8ec4",
                "commitMessage": "\"finish annotating vdom\"",
                "committedDate": "2016-05-14T07:38:41Z"
            },
            {
                "commitId": "45d96c7dbc399696138c9d020e13f97cf94ce181",
                "commitMessage": "\"annotation for vdom (wip)\"",
                "committedDate": "2016-05-14T07:08:21Z"
            },
            {
                "commitId": "354ea616b5ec4826e23a88465e404fd3b382d9f4",
                "commitMessage": "\"annotate Vue class\"",
                "committedDate": "2016-05-12T23:13:38Z"
            },
            {
                "commitId": "6593be9f75ea229e71e5b0530bb0f27aeee57afc",
                "commitMessage": "\"update unit tests convention + basic component tests\"",
                "committedDate": "2016-05-09T22:08:18Z"
            },
            {
                "commitId": "f4a2afb3b33991c1694e8fcb7d62641c30eeaf53",
                "commitMessage": "\"expose context on vnode, simplify render methods\"",
                "committedDate": "2016-04-25T03:31:07Z"
            },
            {
                "commitId": "955e2f839175fadbd0218f7b78c48ebbbcca6349",
                "commitMessage": "\"restructure (build pass)\"",
                "committedDate": "2016-04-23T20:12:19Z"
            },
            {
                "commitId": "ec5bcefca73160e6d283b8a0c4e1457f42f87081",
                "commitMessage": "\"tweak namespace changes\"",
                "committedDate": "2016-04-23T17:37:47Z"
            },
            {
                "commitId": "6e251e0721b4dbb4896999df78450d912dcba30d",
                "commitMessage": "\"Change svg parameter to namespace (#3)\n\n* change svg parameter into namespace\r\n\r\n* fixed svg to namespace bug\r\n\r\n* change svg detecting into namespace detecting in parser\r\n\r\n* fixed eslint error\"",
                "committedDate": "2016-04-23T17:29:31Z"
            },
            {
                "commitId": "9a347e02b4b1fd8ddc51db6c2ba08a1831f4dfd0",
                "commitMessage": "\"allow data to be undefined\"",
                "committedDate": "2016-04-21T16:37:12Z"
            },
            {
                "commitId": "d87987780a208fe3c65415a4a1cab58250ffa9a3",
                "commitMessage": "\"rename\"",
                "committedDate": "2016-04-21T08:24:26Z"
            },
            {
                "commitId": "1a35cf4a21e8c8e897c2d6f291b99376b12b9fac",
                "commitMessage": "\"support template slot\"",
                "committedDate": "2016-04-15T02:55:29Z"
            },
            {
                "commitId": "0ab0600599dcc593695560382af1c1a8119ce848",
                "commitMessage": "\"restructure\"",
                "committedDate": "2016-04-12T23:42:15Z"
            },
            {
                "commitId": "69e94eb453ee0da21f9a0506d2f01269865a4776",
                "commitMessage": "\"move flatten into vdom implementation\"",
                "committedDate": "2016-04-11T03:54:53Z"
            },
            {
                "commitId": "a879ec06ef9504db8df2a19aac0d07609fe36131",
                "commitMessage": "\"init\"",
                "committedDate": "2016-04-11T02:47:28Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "Determine the developers that had the most unfixed bugs?",
        "number": 7,
        "category": 2,
        "response": "The developer with the most unfixed bugs is 'yyx990803', with a total of 2 unfixed bugs.",
        "chain_of_thought": "To determine the developers that had the most unfixed bugs, we need to interpret the question. The most probable interpretation is to find the developers who have introduced the most issues that are still open (unfixed). \n\nHere's how we can construct the query:\n\n1. **Identify the relevant nodes and relationships**:\n   - We need the `User` node to identify developers.\n   - The `Commit` node is needed to find the commits authored by the developers.\n   - The `Issue` node is needed to find the issues introduced by these commits.\n   - The relevant relationships are `author` (between `User` and `Commit`) and `introduced` (between `Commit` and `Issue`).\n\n2. **Filter for unfixed issues**:\n   - We need to filter issues that are still open. This can be done by checking the `state` property of the `Issue` node, which should be \"open\".\n\n3. **Aggregate the number of unfixed issues introduced by each developer**:\n   - Count the number of open issues introduced by each developer.\n\n4. **Sort the results**:\n   - Sort the developers by the number of unfixed issues in descending order to find those with the most unfixed bugs.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n```\n\nThis query will return a list of developers along with the count of unfixed bugs they have introduced, sorted by the number of unfixed bugs in descending order.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n",
        "result": [
            {
                "developer": "yyx990803",
                "unfixed_bugs": 2
            },
            {
                "developer": "shortdiv",
                "unfixed_bugs": 1
            },
            {
                "developer": "Justineo",
                "unfixed_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 0,
        "label": "partial"
    },
    {
        "question": "which developer has most number of bugs yet to be fixed?",
        "number": 8,
        "category": 2,
        "response": "The developer with the most number of bugs yet to be fixed is 'yyx990803', with 1 open bug.",
        "chain_of_thought": "To determine which developer has the most number of bugs yet to be fixed, we need to consider the following:\n\n1. **Identify Bugs**: Bugs are represented by issues in the schema. We need to find issues that are still open, which means their `state` property is not \"closed\".\n\n2. **Link Bugs to Developers**: We need to find the developers who are responsible for these open issues. This can be interpreted in a few ways:\n   - Developers who have been assigned to these issues.\n   - Developers who have created these issues.\n   - Developers who have participated in these issues.\n\nThe most probable interpretation for \"developer with the most number of bugs yet to be fixed\" is the developer who has been assigned the most open issues, as being assigned typically indicates responsibility for fixing the issue.\n\nTherefore, the query should focus on finding users who are assigned to open issues and count the number of such issues for each user.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (u:User)-[:assigned]->(i:Issue)\nWHERE i.state <> 'closed'\nRETURN u.login AS developer, COUNT(i) AS open_bugs\nORDER BY open_bugs DESC\nLIMIT 1\n```\n\nThis query matches users assigned to issues, filters for issues that are not closed, counts the number of such open issues for each user, and orders the results to find the developer with the most open bugs.",
        "query": "cypher\nMATCH (u:User)-[:assigned]->(i:Issue)\nWHERE i.state <> 'closed'\nRETURN u.login AS developer, COUNT(i) AS open_bugs\nORDER BY open_bugs DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "yyx990803",
                "open_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "Determine the developers that fixed the most bugs in helpers.js?",
        "number": 9,
        "category": 3,
        "response": "The developer who fixed the most bugs in `helpers.js` is Evan You, with a total of 11 bugs fixed. Can I help with anything else?",
        "chain_of_thought": "To determine the developers who fixed the most bugs in the file `helpers.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**:\n   - We are interested in the `User`, `Commit`, `Issue`, and `File` nodes.\n   - The `User` node is connected to the `Commit` node via the `author` relationship.\n   - The `Commit` node is connected to the `Issue` node via the `fixed` relationship, indicating that the commit fixed a bug.\n   - The `Issue` node is connected to the `File` node via the `impacted` relationship, indicating that the file was impacted by the issue.\n\n2. **Filter for the specific file**:\n   - We need to filter the `File` node to find the file named `helpers.js`.\n\n3. **Aggregate the number of bugs fixed by each developer**:\n   - We need to count the number of issues fixed by each developer for the file `helpers.js`.\n\nThe Cypher query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'helpers.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n```\n\nThis query will return a list of developers and the number of bugs they have fixed in `helpers.js`, sorted in descending order by the number of bugs fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'helpers.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n",
        "result": [
            {
                "developer": "Evan You",
                "bugs_fixed": 11
            },
            {
                "developer": "chengchao",
                "bugs_fixed": 2
            },
            {
                "developer": "Jason",
                "bugs_fixed": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "who did most fixed bugs in client.js?",
        "number": 10,
        "category": 3,
        "response": "The developer who fixed the most bugs in \"client.js\" is Xin Du (Clark), with a total of 1 fixed bug.",
        "chain_of_thought": "To determine who fixed the most bugs in the file `client.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We need to find the `File` node with the name `client.js`.\n   - We need to find the `Commit` nodes that have a `changed` relationship with this `File`.\n   - We need to find the `User` nodes that have an `author` relationship with these `Commit` nodes.\n   - We also need to ensure that these commits have a `fixed` relationship with an `Issue`, indicating that the commit fixed a bug.\n\n2. **Construct the query**:\n   - Match the `File` node with the name `client.js`.\n   - Traverse the `changed` relationship to find the `Commit` nodes.\n   - Ensure these commits have a `fixed` relationship with an `Issue`.\n   - Traverse the `author` relationship to find the `User` nodes who authored these commits.\n   - Count the number of such commits for each user to determine who fixed the most bugs.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:changed]->(f:File {name: 'client.js'})\nMATCH (c)-[:fixed]->(:Issue)\nRETURN u.name AS developer, COUNT(c) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n```\n\nThis query will return the user who has fixed the most bugs in `client.js`.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:changed]->(f:File {name: 'client.js'})\nMATCH (c)-[:fixed]->(:Issue)\nRETURN u.name AS developer, COUNT(c) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "Xin Du (Clark)",
                "fixed_bugs": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "Determine the files that introduce the most bugs?",
        "number": 11,
        "category": 2,
        "response": "The file that introduces the most bugs is \"index.js\" with a total of 166 bugs.",
        "chain_of_thought": "To determine the files that introduce the most bugs, we need to identify the files that are associated with the most issues introduced by commits. The schema provides a relationship between Commit and Issue through the introduced relationship, and between Commit and File through the changed relationship. Therefore, we can trace from File to Issue via Commit.\n\nHere's the step-by-step breakdown of the query:\n\n1. Identify the relevant nodes and relationships:\n   - File nodes represent the files.\n   - Commit nodes are connected to File nodes via the changed relationship.\n   - Commit nodes are also connected to Issue nodes via the introduced relationship.\n\n2. We need to count the number of issues introduced by each file. This involves traversing from File to Commit to Issue.\n\n3. Aggregate the number of issues introduced by each file.\n\n4. Sort the files by the number of issues in descending order to find the files that introduce the most bugs.\n\n5. Limit the results to the top files if necessary.\n\nThe complete Cypher query is as follows:\n\n```cypher\nMATCH (f:File)<-[:changed]-(c:Commit)-[:introduced]->(i:Issue)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\n```\n\nThis query will return the files that have introduced the most bugs, sorted by the number of bugs in descending order.",
        "query": "cypher\nMATCH (f:File)<-[:changed]-(c:Commit)-[:introduced]->(i:Issue)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\n",
        "result": [
            {
                "file": "index.js",
                "bug_count": 166
            },
            {
                "file": "render.js",
                "bug_count": 88
            },
            {
                "file": "events.js",
                "bug_count": 69
            },
            {
                "file": "patch.js",
                "bug_count": 69
            },
            {
                "file": "lifecycle.js",
                "bug_count": 64
            },
            {
                "file": "model.js",
                "bug_count": 61
            },
            {
                "file": "vnode.js",
                "bug_count": 58
            },
            {
                "file": "create-component.js",
                "bug_count": 50
            },
            {
                "file": "component.js",
                "bug_count": 49
            },
            {
                "file": "compiler.js",
                "bug_count": 46
            },
            {
                "file": "codegen.spec.js",
                "bug_count": 45
            },
            {
                "file": "transition.js",
                "bug_count": 44
            },
            {
                "file": "props.js",
                "bug_count": 44
            },
            {
                "file": "package.json",
                "bug_count": 43
            },
            {
                "file": "helpers.js",
                "bug_count": 41
            },
            {
                "file": "util.js",
                "bug_count": 37
            },
            {
                "file": "options.js",
                "bug_count": 37
            },
            {
                "file": "config.js",
                "bug_count": 35
            },
            {
                "file": "attrs.js",
                "bug_count": 35
            },
            {
                "file": "state.js",
                "bug_count": 35
            },
            {
                "file": "html-parser.js",
                "bug_count": 34
            },
            {
                "file": "style.js",
                "bug_count": 33
            },
            {
                "file": "index.ts",
                "bug_count": 31
            },
            {
                "file": "class.js",
                "bug_count": 31
            },
            {
                "file": "env.js",
                "bug_count": 29
            },
            {
                "file": "codegen.js",
                "bug_count": 29
            },
            {
                "file": "watcher.js",
                "bug_count": 26
            },
            {
                "file": "create-element.js",
                "bug_count": 24
            },
            {
                "file": "vnode.d.ts",
                "bug_count": 23
            },
            {
                "file": "component-scoped-slot.spec.js",
                "bug_count": 22
            },
            {
                "file": "dom-props.js",
                "bug_count": 22
            },
            {
                "file": "options.d.ts",
                "bug_count": 21
            },
            {
                "file": "lang.js",
                "bug_count": 21
            },
            {
                "file": "web-runtime-with-compiler.js",
                "bug_count": 21
            },
            {
                "file": "index.d.ts",
                "bug_count": 20
            },
            {
                "file": "directives.js",
                "bug_count": 20
            },
            {
                "file": "dep.js",
                "bug_count": 19
            },
            {
                "file": "text-parser.js",
                "bug_count": 18
            },
            {
                "file": "vue.d.ts",
                "bug_count": 17
            },
            {
                "file": "parser.spec.js",
                "bug_count": 17
            },
            {
                "file": "array.js",
                "bug_count": 17
            },
            {
                "file": "debug.js",
                "bug_count": 17
            },
            {
                "file": "init.js",
                "bug_count": 17
            },
            {
                "file": "watcher.ts",
                "bug_count": 16
            },
            {
                "file": "on.spec.js",
                "bug_count": 16
            },
            {
                "file": "ref.js",
                "bug_count": 16
            },
            {
                "file": "build.js",
                "bug_count": 16
            },
            {
                "file": "ssr-string.spec.js",
                "bug_count": 15
            },
            {
                "file": "transition.spec.js",
                "bug_count": 15
            },
            {
                "file": "extend.js",
                "bug_count": 15
            },
            {
                "file": "transition-util.js",
                "bug_count": 15
            },
            {
                "file": "show.js",
                "bug_count": 15
            },
            {
                "file": "lifecycle.ts",
                "bug_count": 14
            },
            {
                "file": "node-ops.js",
                "bug_count": 14
            },
            {
                "file": "scheduler.js",
                "bug_count": 14
            },
            {
                "file": "create-renderer.js",
                "bug_count": 14
            },
            {
                "file": "keep-alive.js",
                "bug_count": 14
            },
            {
                "file": "tsconfig.json",
                "bug_count": 13
            },
            {
                "file": "ref.ts",
                "bug_count": 13
            },
            {
                "file": "model-select.spec.js",
                "bug_count": 13
            },
            {
                "file": "apiWatch.ts",
                "bug_count": 12
            },
            {
                "file": "render-static.js",
                "bug_count": 12
            },
            {
                "file": "model-text.spec.js",
                "bug_count": 12
            },
            {
                "file": "component-slot.spec.js",
                "bug_count": 12
            },
            {
                "file": "optimizer.js",
                "bug_count": 12
            },
            {
                "file": "batcher.js",
                "bug_count": 12
            },
            {
                "file": "state.ts",
                "bug_count": 11
            },
            {
                "file": "next-tick.ts",
                "bug_count": 11
            },
            {
                "file": "options-test.ts",
                "bug_count": 11
            },
            {
                "file": "normalize-scoped-slots.js",
                "bug_count": 11
            },
            {
                "file": "edge-cases.spec.js",
                "bug_count": 11
            },
            {
                "file": "resolve-slots.js",
                "bug_count": 11
            },
            {
                "file": "update-listeners.js",
                "bug_count": 11
            },
            {
                "file": "transition-group.js",
                "bug_count": 11
            },
            {
                "file": "component-keep-alive.spec.js",
                "bug_count": 11
            },
            {
                "file": "traverse.ts",
                "bug_count": 10
            },
            {
                "file": "functional.spec.js",
                "bug_count": 10
            },
            {
                "file": "model-checkbox.spec.js",
                "bug_count": 10
            },
            {
                "file": "class-util.js",
                "bug_count": 10
            },
            {
                "file": "init.ts",
                "bug_count": 9
            },
            {
                "file": "reactive.ts",
                "bug_count": 9
            },
            {
                "file": "define-component-test.tsx",
                "bug_count": 9
            },
            {
                "file": "apiWatch.spec.ts",
                "bug_count": 9
            },
            {
                "file": "pnpm-lock.yaml",
                "bug_count": 9
            },
            {
                "file": ".gitignore",
                "bug_count": 9
            },
            {
                "file": "scheduler.ts",
                "bug_count": 9
            },
            {
                "file": "plugin.d.ts",
                "bug_count": 9
            },
            {
                "file": "error.js",
                "bug_count": 9
            },
            {
                "file": "normalize-children.js",
                "bug_count": 9
            },
            {
                "file": "use.js",
                "bug_count": 9
            },
            {
                "file": "model-radio.spec.js",
                "bug_count": 9
            },
            {
                "file": "dom.js",
                "bug_count": 9
            },
            {
                "file": "util.ts",
                "bug_count": 8
            },
            {
                "file": "compiler.ts",
                "bug_count": 8
            },
            {
                "file": "debug.ts",
                "bug_count": 8
            },
            {
                "file": "effect.ts",
                "bug_count": 8
            },
            {
                "file": "render.ts",
                "bug_count": 8
            },
            {
                "file": "component.d.ts",
                "bug_count": 8
            },
            {
                "file": "vue-test.ts",
                "bug_count": 8
            },
            {
                "file": "element.js",
                "bug_count": 8
            },
            {
                "file": "check-keycodes.js",
                "bug_count": 8
            },
            {
                "file": "assets.js",
                "bug_count": 8
            },
            {
                "file": "element.spec.js",
                "bug_count": 8
            },
            {
                "file": "style.spec.js",
                "bug_count": 8
            },
            {
                "file": ".babelrc",
                "bug_count": 8
            },
            {
                "file": "webpack.config.js",
                "bug_count": 8
            },
            {
                "file": "h.js",
                "bug_count": 8
            },
            {
                "file": "index.umd.js",
                "bug_count": 8
            },
            {
                "file": "v3-component-public-instance.d.ts",
                "bug_count": 7
            },
            {
                "file": "jsx.d.ts",
                "bug_count": 7
            },
            {
                "file": "helpers.ts",
                "bug_count": 7
            },
            {
                "file": "events.ts",
                "bug_count": 7
            },
            {
                "file": "create-functional-component.ts",
                "bug_count": 7
            },
            {
                "file": "plugin-test.ts",
                "bug_count": 7
            },
            {
                "file": "create-bundle-runner.js",
                "bug_count": 7
            },
            {
                "file": "resolve-async-component.js",
                "bug_count": 7
            },
            {
                "file": "next-tick.js",
                "bug_count": 7
            },
            {
                "file": "create-functional-component.js",
                "bug_count": 7
            },
            {
                "file": "inject.js",
                "bug_count": 7
            },
            {
                "file": "transition-mode.spec.js",
                "bug_count": 7
            },
            {
                "file": "ref.spec.js",
                "bug_count": 7
            },
            {
                "file": "create-element.spec.js",
                "bug_count": 7
            },
            {
                "file": "children.spec.js",
                "bug_count": 7
            },
            {
                "file": "mixin.js",
                "bug_count": 7
            },
            {
                "file": "v3-component-options.d.ts",
                "bug_count": 6
            },
            {
                "file": "augmentation-test.ts",
                "bug_count": 6
            },
            {
                "file": "v3-define-component.d.ts",
                "bug_count": 6
            },
            {
                "file": "parseComponent.ts",
                "bug_count": 6
            },
            {
                "file": "codegen.spec.ts",
                "bug_count": 6
            },
            {
                "file": "entry-compiler.ts",
                "bug_count": 6
            },
            {
                "file": "options.ts",
                "bug_count": 6
            },
            {
                "file": "normalize-scoped-slots.ts",
                "bug_count": 6
            },
            {
                "file": "create-component.ts",
                "bug_count": 6
            },
            {
                "file": "inject.spec.js",
                "bug_count": 6
            },
            {
                "file": "error-handling.spec.js",
                "bug_count": 6
            },
            {
                "file": "bind-object-props.js",
                "bug_count": 6
            },
            {
                "file": "text.js",
                "bug_count": 6
            },
            {
                "file": "props.spec.js",
                "bug_count": 6
            },
            {
                "file": "component-async.spec.js",
                "bug_count": 6
            },
            {
                "file": "error-detector.js",
                "bug_count": 6
            },
            {
                "file": "create-bundle-renderer.js",
                "bug_count": 6
            },
            {
                "file": "optimizer.spec.js",
                "bug_count": 6
            },
            {
                "file": "web-server-renderer.js",
                "bug_count": 6
            },
            {
                "file": "merge-hook.js",
                "bug_count": 6
            },
            {
                "file": ".eslintrc",
                "bug_count": 6
            },
            {
                "file": "web-runtime.js",
                "bug_count": 6
            },
            {
                "file": ".flowconfig",
                "bug_count": 6
            },
            {
                "file": "html.js",
                "bug_count": 6
            },
            {
                "file": "apiSetup.spec.ts",
                "bug_count": 5
            },
            {
                "file": "common.d.ts",
                "bug_count": 5
            },
            {
                "file": "v3-setup-context.d.ts",
                "bug_count": 5
            },
            {
                "file": "v3-component-props.d.ts",
                "bug_count": 5
            },
            {
                "file": "v3-component-proxy.d.ts",
                "bug_count": 5
            },
            {
                "file": "directives.ts",
                "bug_count": 5
            },
            {
                "file": "compileScript.ts",
                "bug_count": 5
            },
            {
                "file": "compileScript.spec.ts",
                "bug_count": 5
            },
            {
                "file": "parse.ts",
                "bug_count": 5
            },
            {
                "file": "style.ts",
                "bug_count": 5
            },
            {
                "file": "dep.ts",
                "bug_count": 5
            },
            {
                "file": "vnode.ts",
                "bug_count": 5
            },
            {
                "file": "setup-test.ts",
                "bug_count": 5
            },
            {
                "file": "config.ts",
                "bug_count": 5
            },
            {
                "file": "parser.ts",
                "bug_count": 5
            },
            {
                "file": "model.ts",
                "bug_count": 5
            },
            {
                "file": "class.ts",
                "bug_count": 5
            },
            {
                "file": "codegen.ts",
                "bug_count": 5
            },
            {
                "file": "modules.ts",
                "bug_count": 5
            },
            {
                "file": "optimizer.ts",
                "bug_count": 5
            },
            {
                "file": "create-compiler.ts",
                "bug_count": 5
            },
            {
                "file": "bind.ts",
                "bug_count": 5
            },
            {
                "file": "on.ts",
                "bug_count": 5
            },
            {
                "file": "error-detector.ts",
                "bug_count": 5
            },
            {
                "file": "to-function.ts",
                "bug_count": 5
            },
            {
                "file": "html.ts",
                "bug_count": 5
            },
            {
                "file": "text.ts",
                "bug_count": 5
            },
            {
                "file": "computed.ts",
                "bug_count": 5
            },
            {
                "file": "v3.d.ts",
                "bug_count": 5
            },
            {
                "file": "inject.ts",
                "bug_count": 5
            },
            {
                "file": "computed.spec.ts",
                "bug_count": 5
            },
            {
                "file": "extract-props.ts",
                "bug_count": 5
            },
            {
                "file": "resolve-async-component.ts",
                "bug_count": 5
            },
            {
                "file": "attrs.ts",
                "bug_count": 5
            },
            {
                "file": "dom-props.ts",
                "bug_count": 5
            },
            {
                "file": "ref.spec.ts",
                "bug_count": 5
            },
            {
                "file": "entry-runtime.ts",
                "bug_count": 5
            },
            {
                "file": "keep-alive.ts",
                "bug_count": 5
            },
            {
                "file": "patch.ts",
                "bug_count": 5
            },
            {
                "file": "bind-object-props.ts",
                "bug_count": 5
            },
            {
                "file": "resolve-scoped-slots.ts",
                "bug_count": 5
            },
            {
                "file": "props.ts",
                "bug_count": 5
            },
            {
                "file": "update-listeners.ts",
                "bug_count": 5
            },
            {
                "file": "check-keycodes.ts",
                "bug_count": 5
            },
            {
                "file": "render-list.ts",
                "bug_count": 5
            },
            {
                "file": "get-first-component-child.ts",
                "bug_count": 5
            },
            {
                "file": "normalize-children.ts",
                "bug_count": 5
            },
            {
                "file": "test.ts",
                "bug_count": 5
            },
            {
                "file": "yarn.lock",
                "bug_count": 5
            },
            {
                "file": "bind.spec.js",
                "bug_count": 5
            },
            {
                "file": "README.md",
                "bug_count": 5
            },
            {
                "file": "component.spec.js",
                "bug_count": 5
            },
            {
                "file": "methods.spec.js",
                "bug_count": 5
            },
            {
                "file": "global-api.js",
                "bug_count": 5
            },
            {
                "file": "mixin.spec.js",
                "bug_count": 5
            },
            {
                "file": "web-compiler.js",
                "bug_count": 5
            },
            {
                "file": "render-slot.js",
                "bug_count": 5
            },
            {
                "file": "render-list.js",
                "bug_count": 5
            },
            {
                "file": "resolve-filter.js",
                "bug_count": 5
            },
            {
                "file": "apiSetup.ts",
                "bug_count": 4
            },
            {
                "file": "compileTemplate.ts",
                "bug_count": 4
            },
            {
                "file": "utils.ts",
                "bug_count": 4
            },
            {
                "file": "create-element.ts",
                "bug_count": 4
            },
            {
                "file": "methods-lifecycle.spec.ts",
                "bug_count": 4
            },
            {
                "file": "class.spec.ts",
                "bug_count": 4
            },
            {
                "file": "async-component-test.ts",
                "bug_count": 4
            },
            {
                "file": "ssr-test.ts",
                "bug_count": 4
            },
            {
                "file": "umd-test.ts",
                "bug_count": 4
            },
            {
                "file": "umd.d.ts",
                "bug_count": 4
            },
            {
                "file": "render-context.ts",
                "bug_count": 4
            },
            {
                "file": "html-parser.ts",
                "bug_count": 4
            },
            {
                "file": "element.ts",
                "bug_count": 4
            },
            {
                "file": "proxy.ts",
                "bug_count": 4
            },
            {
                "file": "extend.ts",
                "bug_count": 4
            },
            {
                "file": "transition-group.ts",
                "bug_count": 4
            },
            {
                "file": "constants.ts",
                "bug_count": 4
            },
            {
                "file": "show.ts",
                "bug_count": 4
            },
            {
                "file": "runtime-helpers.ts",
                "bug_count": 4
            },
            {
                "file": "create-basic-renderer.ts",
                "bug_count": 4
            },
            {
                "file": "create-renderer.ts",
                "bug_count": 4
            },
            {
                "file": "assets.ts",
                "bug_count": 4
            },
            {
                "file": "mixin.ts",
                "bug_count": 4
            },
            {
                "file": "use.ts",
                "bug_count": 4
            },
            {
                "file": "bind-object-listeners.ts",
                "bug_count": 4
            },
            {
                "file": "resolve-slots.ts",
                "bug_count": 4
            },
            {
                "file": "transition.ts",
                "bug_count": 4
            },
            {
                "file": "perf.ts",
                "bug_count": 4
            },
            {
                "file": "create-bundle-renderer.ts",
                "bug_count": 4
            },
            {
                "file": "create-bundle-runner.ts",
                "bug_count": 4
            },
            {
                "file": "source-map-support.ts",
                "bug_count": 4
            },
            {
                "file": "render-stream.ts",
                "bug_count": 4
            },
            {
                "file": "create-async-file-mapper.ts",
                "bug_count": 4
            },
            {
                "file": "parse-template.ts",
                "bug_count": 4
            },
            {
                "file": "template-stream.ts",
                "bug_count": 4
            },
            {
                "file": "client.ts",
                "bug_count": 4
            },
            {
                "file": "server.ts",
                "bug_count": 4
            },
            {
                "file": "write.ts",
                "bug_count": 4
            },
            {
                "file": "array.ts",
                "bug_count": 4
            },
            {
                "file": "render-slot.ts",
                "bug_count": 4
            },
            {
                "file": "error.ts",
                "bug_count": 4
            },
            {
                "file": "entry-runtime-with-compiler.ts",
                "bug_count": 4
            },
            {
                "file": "bind-dynamic-keys.ts",
                "bug_count": 4
            },
            {
                "file": "codeframe.ts",
                "bug_count": 4
            },
            {
                "file": "entity-decoder.ts",
                "bug_count": 4
            },
            {
                "file": "filter-parser.ts",
                "bug_count": 4
            },
            {
                "file": "text-parser.ts",
                "bug_count": 4
            },
            {
                "file": "lang.ts",
                "bug_count": 4
            },
            {
                "file": "is-async-placeholder.ts",
                "bug_count": 4
            },
            {
                "file": "merge-hook.ts",
                "bug_count": 4
            },
            {
                "file": "entry-server-basic-renderer.ts",
                "bug_count": 4
            },
            {
                "file": "entry-server-renderer.ts",
                "bug_count": 4
            },
            {
                "file": "class-util.ts",
                "bug_count": 4
            },
            {
                "file": "node-ops.ts",
                "bug_count": 4
            },
            {
                "file": "transition-util.ts",
                "bug_count": 4
            },
            {
                "file": "compat.ts",
                "bug_count": 4
            },
            {
                "file": "component-async.spec.ts",
                "bug_count": 4
            },
            {
                "file": "karma.base.config.js",
                "bug_count": 4
            },
            {
                "file": "parser.js",
                "bug_count": 4
            },
            {
                "file": "sfc-parser.spec.js",
                "bug_count": 4
            },
            {
                "file": "ssr-template.spec.js",
                "bug_count": 4
            },
            {
                "file": "ssr-bundle-render.spec.js",
                "bug_count": 4
            },
            {
                "file": "hydration.spec.js",
                "bug_count": 4
            },
            {
                "file": "compat.js",
                "bug_count": 4
            },
            {
                "file": "scheduler.spec.js",
                "bug_count": 4
            },
            {
                "file": "perf.js",
                "bug_count": 4
            },
            {
                "file": "template.spec.js",
                "bug_count": 4
            },
            {
                "file": "model-parse.spec.js",
                "bug_count": 4
            },
            {
                "file": "filter-parser.js",
                "bug_count": 4
            },
            {
                "file": "render-stream.js",
                "bug_count": 4
            },
            {
                "file": "el.spec.js",
                "bug_count": 4
            },
            {
                "file": "declarations.js",
                "bug_count": 4
            },
            {
                "file": "tsx-test.tsx",
                "bug_count": 3
            },
            {
                "file": "parseComponent.spec.ts",
                "bug_count": 3
            },
            {
                "file": "prefixIdentifiers.ts",
                "bug_count": 3
            },
            {
                "file": "compileStyle.ts",
                "bug_count": 3
            },
            {
                "file": "types.ts",
                "bug_count": 3
            },
            {
                "file": "api-extractor.tsconfig.json",
                "bug_count": 3
            },
            {
                "file": "api-extractor.json",
                "bug_count": 3
            },
            {
                "file": "apiLifecycle.ts",
                "bug_count": 3
            },
            {
                "file": "currentInstance.ts",
                "bug_count": 3
            },
            {
                "file": "operations.ts",
                "bug_count": 3
            },
            {
                "file": "style.spec.ts",
                "bug_count": 3
            },
            {
                "file": "config.spec.ts",
                "bug_count": 3
            },
            {
                "file": "props.spec.ts",
                "bug_count": 3
            },
            {
                "file": "edge-cases.spec.ts",
                "bug_count": 3
            },
            {
                "file": "ssr-basic-renderer.spec.ts",
                "bug_count": 3
            },
            {
                "file": "ssr-bundle-render.spec.ts",
                "bug_count": 3
            },
            {
                "file": "ssr-stream.spec.ts",
                "bug_count": 3
            },
            {
                "file": "ssr-string.spec.ts",
                "bug_count": 3
            },
            {
                "file": "parser.spec.ts",
                "bug_count": 3
            },
            {
                "file": "inject.spec.ts",
                "bug_count": 3
            },
            {
                "file": "functional.spec.ts",
                "bug_count": 3
            },
            {
                "file": "global.d.ts",
                "bug_count": 3
            },
            {
                "file": "component-slot.spec.ts",
                "bug_count": 3
            },
            {
                "file": "compiler-options.spec.ts",
                "bug_count": 3
            },
            {
                "file": "compile-with-webpack.ts",
                "bug_count": 3
            },
            {
                "file": "ssr-template.spec.ts",
                "bug_count": 3
            },
            {
                "file": "client-plugin.d.ts",
                "bug_count": 3
            },
            {
                "file": "server-plugin.d.ts",
                "bug_count": 3
            },
            {
                "file": "commits.spec.ts",
                "bug_count": 3
            },
            {
                "file": "e2eUtils.ts",
                "bug_count": 3
            },
            {
                "file": "svg.spec.ts",
                "bug_count": 3
            },
            {
                "file": "to-have-warned.ts",
                "bug_count": 3
            },
            {
                "file": ".babelrc.js",
                "bug_count": 3
            },
            {
                "file": ".eslintignore",
                "bug_count": 3
            },
            {
                "file": ".eslintrc.js",
                "bug_count": 3
            },
            {
                "file": ".prettierrc",
                "bug_count": 3
            },
            {
                "file": ".eslintrc.json",
                "bug_count": 3
            },
            {
                "file": "commits.mock.ts",
                "bug_count": 3
            },
            {
                "file": "test-object-option.ts",
                "bug_count": 3
            },
            {
                "file": "trigger-event.ts",
                "bug_count": 3
            },
            {
                "file": "wait-for-update.ts",
                "bug_count": 3
            },
            {
                "file": "transition-group.spec.ts",
                "bug_count": 3
            },
            {
                "file": "transition-mode.spec.ts",
                "bug_count": 3
            },
            {
                "file": "transition-with-keep-alive.spec.ts",
                "bug_count": 3
            },
            {
                "file": "transition.spec.ts",
                "bug_count": 3
            },
            {
                "file": "component-keep-alive.spec.ts",
                "bug_count": 3
            },
            {
                "file": "component-scoped-slot.spec.ts",
                "bug_count": 3
            },
            {
                "file": "component.spec.ts",
                "bug_count": 3
            },
            {
                "file": "debug.spec.ts",
                "bug_count": 3
            },
            {
                "file": "bind.spec.ts",
                "bug_count": 3
            },
            {
                "file": "for.spec.ts",
                "bug_count": 3
            },
            {
                "file": "html.spec.ts",
                "bug_count": 3
            },
            {
                "file": "if.spec.ts",
                "bug_count": 3
            },
            {
                "file": "model-checkbox.spec.ts",
                "bug_count": 3
            },
            {
                "file": "model-component.spec.ts",
                "bug_count": 3
            },
            {
                "file": "model-dynamic.spec.ts",
                "bug_count": 3
            },
            {
                "file": "model-radio.spec.ts",
                "bug_count": 3
            },
            {
                "file": "model-select.spec.ts",
                "bug_count": 3
            },
            {
                "file": "model-text.spec.ts",
                "bug_count": 3
            },
            {
                "file": "on.spec.ts",
                "bug_count": 3
            },
            {
                "file": "once.spec.ts",
                "bug_count": 3
            },
            {
                "file": "show.spec.ts",
                "bug_count": 3
            },
            {
                "file": "static-style-parser.spec.ts",
                "bug_count": 3
            },
            {
                "file": "text.spec.ts",
                "bug_count": 3
            },
            {
                "file": "error-handling.spec.ts",
                "bug_count": 3
            },
            {
                "file": "filter.spec.ts",
                "bug_count": 3
            },
            {
                "file": "extend.spec.ts",
                "bug_count": 3
            },
            {
                "file": "mixin.spec.ts",
                "bug_count": 3
            },
            {
                "file": "observable.spec.ts",
                "bug_count": 3
            },
            {
                "file": "set-delete.spec.ts",
                "bug_count": 3
            },
            {
                "file": "init.spec.ts",
                "bug_count": 3
            },
            {
                "file": "methods-data.spec.ts",
                "bug_count": 3
            },
            {
                "file": "properties.spec.ts",
                "bug_count": 3
            },
            {
                "file": "render-proxy.spec.ts",
                "bug_count": 3
            },
            {
                "file": "_scopeId.spec.ts",
                "bug_count": 3
            },
            {
                "file": "comments.spec.ts",
                "bug_count": 3
            },
            {
                "file": "components.spec.ts",
                "bug_count": 3
            },
            {
                "file": "data.spec.ts",
                "bug_count": 3
            },
            {
                "file": "directives.spec.ts",
                "bug_count": 3
            },
            {
                "file": "el.spec.ts",
                "bug_count": 3
            },
            {
                "file": "errorCaptured.spec.ts",
                "bug_count": 3
            },
            {
                "file": "extends.spec.ts",
                "bug_count": 3
            },
            {
                "file": "lifecycle.spec.ts",
                "bug_count": 3
            },
            {
                "file": "methods.spec.ts",
                "bug_count": 3
            },
            {
                "file": "mixins.spec.ts",
                "bug_count": 3
            },
            {
                "file": "name.spec.ts",
                "bug_count": 3
            },
            {
                "file": "parent.spec.ts",
                "bug_count": 3
            },
            {
                "file": "propsData.spec.ts",
                "bug_count": 3
            },
            {
                "file": "render.spec.ts",
                "bug_count": 3
            },
            {
                "file": "renderError.spec.ts",
                "bug_count": 3
            },
            {
                "file": "template.spec.ts",
                "bug_count": 3
            },
            {
                "file": "watch.spec.ts",
                "bug_count": 3
            },
            {
                "file": "codeframe.spec.ts",
                "bug_count": 3
            },
            {
                "file": "optimizer.spec.ts",
                "bug_count": 3
            },
            {
                "file": "observer.spec.ts",
                "bug_count": 3
            },
            {
                "file": "scheduler.spec.ts",
                "bug_count": 3
            },
            {
                "file": "watcher.spec.ts",
                "bug_count": 3
            },
            {
                "file": "sfc-parser.spec.ts",
                "bug_count": 3
            },
            {
                "file": "error.spec.ts",
                "bug_count": 3
            },
            {
                "file": "create-component.spec.ts",
                "bug_count": 3
            },
            {
                "file": "create-element.spec.ts",
                "bug_count": 3
            },
            {
                "file": "attrs.spec.ts",
                "bug_count": 3
            },
            {
                "file": "directive.spec.ts",
                "bug_count": 3
            },
            {
                "file": "dom-props.spec.ts",
                "bug_count": 3
            },
            {
                "file": "events.spec.ts",
                "bug_count": 3
            },
            {
                "file": "children.spec.ts",
                "bug_count": 3
            },
            {
                "file": "element.spec.ts",
                "bug_count": 3
            },
            {
                "file": "hooks.spec.ts",
                "bug_count": 3
            },
            {
                "file": "hydration.spec.ts",
                "bug_count": 3
            },
            {
                "file": "client.js",
                "bug_count": 3
            },
            {
                "file": "resolve-scoped-slots.js",
                "bug_count": 3
            },
            {
                "file": "create-component.spec.js",
                "bug_count": 3
            },
            {
                "file": "modules.js",
                "bug_count": 3
            },
            {
                "file": "lifecycle.spec.js",
                "bug_count": 3
            },
            {
                "file": "data.spec.js",
                "bug_count": 3
            },
            {
                "file": "package-lock.json",
                "bug_count": 3
            },
            {
                "file": "v-for.js",
                "bug_count": 3
            },
            {
                "file": "computed.spec.js",
                "bug_count": 3
            },
            {
                "file": "properties.spec.js",
                "bug_count": 3
            },
            {
                "file": "observer.spec.js",
                "bug_count": 3
            },
            {
                "file": "v-model.spec.js",
                "bug_count": 3
            },
            {
                "file": "directive.spec.js",
                "bug_count": 3
            },
            {
                "file": "append.js",
                "bug_count": 3
            },
            {
                "file": "if.spec.js",
                "bug_count": 3
            },
            {
                "file": "ssr-stream.spec.js",
                "bug_count": 3
            },
            {
                "file": "class.spec.js",
                "bug_count": 3
            },
            {
                "file": "webpack.ssr.dev.config.js",
                "bug_count": 3
            },
            {
                "file": "hooks.spec.js",
                "bug_count": 3
            },
            {
                "file": "render.spec.js",
                "bug_count": 3
            },
            {
                "file": "readonly.ts",
                "bug_count": 2
            },
            {
                "file": "readonly.spec.ts",
                "bug_count": 2
            },
            {
                "file": "rewriteDefault.ts",
                "bug_count": 2
            },
            {
                "file": "rewriteDefault.spec.ts",
                "bug_count": 2
            },
            {
                "file": "ssr-reactivity.spec.ts",
                "bug_count": 2
            },
            {
                "file": "vitest.config.ts",
                "bug_count": 2
            },
            {
                "file": "compileScript.spec.ts.snap",
                "bug_count": 2
            },
            {
                "file": "ci.yml",
                "bug_count": 2
            },
            {
                "file": "scoped.ts",
                "bug_count": 2
            },
            {
                "file": "srcset.ts",
                "bug_count": 2
            },
            {
                "file": "compileTemplate.spec.ts",
                "bug_count": 2
            },
            {
                "file": "compileStyle.spec.ts",
                "bug_count": 2
            },
            {
                "file": "assetUrl.ts",
                "bug_count": 2
            },
            {
                "file": "trim.ts",
                "bug_count": 2
            },
            {
                "file": "stylePreprocessors.ts",
                "bug_count": 2
            },
            {
                "file": "warn.ts",
                "bug_count": 2
            },
            {
                "file": "stylePluginScoped.spec.ts",
                "bug_count": 2
            },
            {
                "file": "entry-compiler-sfc.ts",
                "bug_count": 2
            },
            {
                "file": "effectScope.ts",
                "bug_count": 2
            },
            {
                "file": "component.ts",
                "bug_count": 2
            },
            {
                "file": "apiInject.ts",
                "bug_count": 2
            },
            {
                "file": "global-api.d.ts",
                "bug_count": 2
            },
            {
                "file": "render-static.ts",
                "bug_count": 2
            },
            {
                "file": "CONTRIBUTING.md",
                "bug_count": 2
            },
            {
                "file": "directives.spec.js",
                "bug_count": 2
            },
            {
                "file": "async-edge-cases.js",
                "bug_count": 2
            },
            {
                "file": "write.js",
                "bug_count": 2
            },
            {
                "file": "render-context.js",
                "bug_count": 2
            },
            {
                "file": "for.spec.js",
                "bug_count": 2
            },
            {
                "file": "v-bind.js",
                "bug_count": 2
            },
            {
                "file": "v-on.js",
                "bug_count": 2
            },
            {
                "file": "v-if.js",
                "bug_count": 2
            },
            {
                "file": "compiler-options.spec.js",
                "bug_count": 2
            },
            {
                "file": "debug.spec.js",
                "bug_count": 2
            },
            {
                "file": "delimiters.spec.js",
                "bug_count": 2
            },
            {
                "file": "promise-rejection.js",
                "bug_count": 2
            },
            {
                "file": "runtime-helpers.js",
                "bug_count": 2
            },
            {
                "file": "bind-object-listeners.js",
                "bug_count": 2
            },
            {
                "file": "to-have-been-warned.js",
                "bug_count": 2
            },
            {
                "file": "config.spec.js",
                "bug_count": 2
            },
            {
                "file": "wait-for-update.js",
                "bug_count": 2
            },
            {
                "file": "model-component.spec.js",
                "bug_count": 2
            },
            {
                "file": "events.spec.js",
                "bug_count": 2
            },
            {
                "file": "transition-group.spec.js",
                "bug_count": 2
            },
            {
                "file": "filter.spec.js",
                "bug_count": 2
            },
            {
                "file": "methods-lifecycle.spec.js",
                "bug_count": 2
            },
            {
                "file": "bind.js",
                "bug_count": 2
            },
            {
                "file": "typings.json",
                "bug_count": 2
            },
            {
                "file": "alias.js",
                "bug_count": 2
            },
            {
                "file": "webpack.dist.dev.config.js",
                "bug_count": 2
            },
            {
                "file": "proxy.js",
                "bug_count": 2
            },
            {
                "file": "entity-decoder.js",
                "bug_count": 2
            },
            {
                "file": "assets.spec.js",
                "bug_count": 2
            },
            {
                "file": "name.spec.js",
                "bug_count": 2
            },
            {
                "file": "mixins.spec.js",
                "bug_count": 2
            },
            {
                "file": "parent.spec.js",
                "bug_count": 2
            },
            {
                "file": "trigger-event.js",
                "bug_count": 2
            },
            {
                "file": "model-text.js",
                "bug_count": 2
            },
            {
                "file": "reactive.spec.ts",
                "bug_count": 1
            },
            {
                "file": "vue.runtime.mjs",
                "bug_count": 1
            },
            {
                "file": "cssVars.spec.ts.snap",
                "bug_count": 1
            },
            {
                "file": "prefixIdentifiers.spec.ts",
                "bug_count": 1
            },
            {
                "file": "todomvc.html",
                "bug_count": 1
            },
            {
                "file": "cssVars.ts",
                "bug_count": 1
            },
            {
                "file": "cssVars.spec.ts",
                "bug_count": 1
            },
            {
                "file": "useCssVars.ts",
                "bug_count": 1
            },
            {
                "file": "useCssVars.spec.ts",
                "bug_count": 1
            },
            {
                "file": "index.mjs",
                "bug_count": 1
            },
            {
                "file": "reactivity-test.ts",
                "bug_count": 1
            },
            {
                "file": "watch-test.ts",
                "bug_count": 1
            },
            {
                "file": "global-api.ts",
                "bug_count": 1
            },
            {
                "file": "ssr.ts",
                "bug_count": 1
            },
            {
                "file": "h.ts",
                "bug_count": 1
            },
            {
                "file": "inject-test.ts",
                "bug_count": 1
            },
            {
                "file": "template-ref.ts",
                "bug_count": 1
            },
            {
                "file": "setupTemplateRef.spec.ts",
                "bug_count": 1
            },
            {
                "file": "template-ref.spec.ts",
                "bug_count": 1
            },
            {
                "file": "apiInject.spec.ts",
                "bug_count": 1
            },
            {
                "file": "apiLifecycle.spec.ts",
                "bug_count": 1
            },
            {
                "file": "effectScope.spec.ts",
                "bug_count": 1
            },
            {
                "file": "shallowReactive.spec.ts",
                "bug_count": 1
            },
            {
                "file": "shallowReadonly.spec.ts",
                "bug_count": 1
            },
            {
                "file": "entry-runtime-esm.ts",
                "bug_count": 1
            },
            {
                "file": "entry-runtime-with-compiler-esm.ts",
                "bug_count": 1
            },
            {
                "file": "modules.d.ts",
                "bug_count": 1
            },
            {
                "file": "compiler.d.ts",
                "bug_count": 1
            },
            {
                "file": "ssr.d.ts",
                "bug_count": 1
            },
            {
                "file": "env.ts",
                "bug_count": 1
            },
            {
                "file": "append.ts",
                "bug_count": 1
            },
            {
                "file": "component-root.ts",
                "bug_count": 1
            },
            {
                "file": "recycle-list.ts",
                "bug_count": 1
            },
            {
                "file": "v-bind.ts",
                "bug_count": 1
            },
            {
                "file": "v-for.ts",
                "bug_count": 1
            },
            {
                "file": "v-if.ts",
                "bug_count": 1
            },
            {
                "file": "v-on.ts",
                "bug_count": 1
            },
            {
                "file": "v-once.ts",
                "bug_count": 1
            },
            {
                "file": "entry-framework.ts",
                "bug_count": 1
            },
            {
                "file": "entry-runtime-factory.ts",
                "bug_count": 1
            },
            {
                "file": "richtext.ts",
                "bug_count": 1
            },
            {
                "file": "render-component-template.ts",
                "bug_count": 1
            },
            {
                "file": "virtual-component.ts",
                "bug_count": 1
            },
            {
                "file": "text-node.ts",
                "bug_count": 1
            },
            {
                "file": "weex.d.ts",
                "bug_count": 1
            },
            {
                "file": "resolve-filter.ts",
                "bug_count": 1
            },
            {
                "file": "is-async-placeholder.js",
                "bug_count": 1
            },
            {
                "file": "entry-server-renderer.js",
                "bug_count": 1
            },
            {
                "file": "richtext.js",
                "bug_count": 1
            },
            {
                "file": "invoke-with-error-handling.spec.js",
                "bug_count": 1
            },
            {
                "file": "bind-dynamic-keys.js",
                "bug_count": 1
            },
            {
                "file": "feature-flags.js",
                "bug_count": 1
            },
            {
                "file": "watch.spec.js",
                "bug_count": 1
            },
            {
                "file": "jasmine.js",
                "bug_count": 1
            },
            {
                "file": "extend.spec.js",
                "bug_count": 1
            },
            {
                "file": "weex.js",
                "bug_count": 1
            },
            {
                "file": "entry-framework.js",
                "bug_count": 1
            },
            {
                "file": "create-inline-computed.js",
                "bug_count": 1
            },
            {
                "file": "test-object-option.js",
                "bug_count": 1
            },
            {
                "file": "components.spec.js",
                "bug_count": 1
            },
            {
                "file": "extends.spec.js",
                "bug_count": 1
            },
            {
                "file": "_scopeId.spec.js",
                "bug_count": 1
            },
            {
                "file": "model-dynamic.spec.js",
                "bug_count": 1
            },
            {
                "file": "catchError.spec.js",
                "bug_count": 1
            },
            {
                "file": "renderError.spec.js",
                "bug_count": 1
            },
            {
                "file": "async-edge-cases.html",
                "bug_count": 1
            },
            {
                "file": "inheritAttrs.spec.js",
                "bug_count": 1
            },
            {
                "file": "on.js",
                "bug_count": 1
            },
            {
                "file": "entry-runtime-with-compiler.js",
                "bug_count": 1
            },
            {
                "file": "comments.spec.js",
                "bug_count": 1
            },
            {
                "file": "set-delete.spec.js",
                "bug_count": 1
            },
            {
                "file": "use.spec.js",
                "bug_count": 1
            },
            {
                "file": "server.js",
                "bug_count": 1
            },
            {
                "file": "constants.js",
                "bug_count": 1
            },
            {
                "file": "create-async-file-mapper.js",
                "bug_count": 1
            },
            {
                "file": "template-stream.js",
                "bug_count": 1
            },
            {
                "file": "source-map-support.js",
                "bug_count": 1
            },
            {
                "file": "framework.js",
                "bug_count": 1
            },
            {
                "file": "vue.common.js",
                "bug_count": 1
            },
            {
                "file": "vue.runtime.common.js",
                "bug_count": 1
            },
            {
                "file": "factory.js",
                "bug_count": 1
            },
            {
                "file": "vue.js",
                "bug_count": 1
            },
            {
                "file": "vue.min.js",
                "bug_count": 1
            },
            {
                "file": "vue.runtime.js",
                "bug_count": 1
            },
            {
                "file": "vue.runtime.min.js",
                "bug_count": 1
            },
            {
                "file": "once.spec.js",
                "bug_count": 1
            },
            {
                "file": "app.js",
                "bug_count": 1
            },
            {
                "file": "renderToStream.js",
                "bug_count": 1
            },
            {
                "file": "renderToString.js",
                "bug_count": 1
            },
            {
                "file": "cache.js",
                "bug_count": 1
            },
            {
                "file": "ssr-env.spec.js",
                "bug_count": 1
            },
            {
                "file": "next-tick.spec.js",
                "bug_count": 1
            },
            {
                "file": "ssr.js",
                "bug_count": 1
            },
            {
                "file": "nightwatch.config.js",
                "bug_count": 1
            },
            {
                "file": "rollup-plugin-flow.js",
                "bug_count": 1
            },
            {
                "file": "webpack.compiler.dev.config.js",
                "bug_count": 1
            },
            {
                "file": "webpack.dist.dev.entry.js",
                "bug_count": 1
            },
            {
                "file": "show.spec.js",
                "bug_count": 1
            },
            {
                "file": "dom-props.spec.js",
                "bug_count": 1
            },
            {
                "file": "LICENSE",
                "bug_count": 1
            },
            {
                "file": "html.spec.js",
                "bug_count": 1
            },
            {
                "file": "run-in-vm.js",
                "bug_count": 1
            },
            {
                "file": "webpack.ssr.dev.entry.js",
                "bug_count": 1
            },
            {
                "file": "module.js",
                "bug_count": 1
            },
            {
                "file": "sfc-parser.js",
                "bug_count": 1
            },
            {
                "file": "transition-control.js",
                "bug_count": 1
            },
            {
                "file": "to-equal.js",
                "bug_count": 1
            },
            {
                "file": "attrs.spec.js",
                "bug_count": 1
            },
            {
                "file": "patch.spec.js",
                "bug_count": 1
            },
            {
                "file": "test.js",
                "bug_count": 1
            },
            {
                "file": "jasmine.json",
                "bug_count": 1
            },
            {
                "file": "webpack.ssr.test.config.js",
                "bug_count": 1
            },
            {
                "file": "ssr.spec.js",
                "bug_count": 1
            },
            {
                "file": "global-api.spec.js",
                "bug_count": 1
            },
            {
                "file": "global-observer-api.spec.js",
                "bug_count": 1
            },
            {
                "file": "global-assets-api.spec.js",
                "bug_count": 1
            },
            {
                "file": "render-to-stream.js",
                "bug_count": 1
            },
            {
                "file": "render-to-string.js",
                "bug_count": 1
            },
            {
                "file": "dist.dev.entry.js",
                "bug_count": 1
            },
            {
                "file": "ssr.dev.entry.js",
                "bug_count": 1
            },
            {
                "file": "cloak.js",
                "bug_count": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 0,
        "label": "partial"
    },
    {
        "question": "What are the most buggy files?",
        "number": 12,
        "category": 2,
        "response": "The most buggy files are as follows: \n\n1. `index.js` with 105 issues.\n2. `model.js` with 46 issues.\n3. `render.js` with 42 issues.\n4. `events.js` with 38 issues.\n5. `lifecycle.js` with 37 issues.\n6. `patch.js` with 32 issues.\n7. `transition.js` with 32 issues.\n8. `component.js` with 29 issues.\n9. `codegen.spec.js` with 24 issues.\n10. `options.js` with 24 issues.",
        "chain_of_thought": "To determine the most buggy files, we need to identify files that have been impacted by the most issues. In the given schema, the relevant nodes are the Issue and File nodes. The relationship that connects these nodes is the impacted relationship, which indicates that changes in the file are related to a bug.\n\nHere's how we can construct the query:\n\n1. Identify the files that have been impacted by issues:\n   - Use the impacted relationship between Issue and File nodes.\n\n2. Aggregate the number of issues impacting each file:\n   - Count the number of issues associated with each file.\n\n3. Sort the files in descending order to find the ones impacted by the most issues:\n   - Order the results by the count of issues in descending order.\n\n4. Limit the results to the top files if necessary (e.g., top 10 most buggy files).\n\nTherefore, the complete Cypher query to find the most buggy files is:\n\n```cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n```\n\nThis query will return the names of the files and the number of issues impacting them, sorted by the number of issues in descending order, showing the top 10 most buggy files.",
        "query": "cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "index.js",
                "issue_count": 105
            },
            {
                "file": "model.js",
                "issue_count": 46
            },
            {
                "file": "render.js",
                "issue_count": 42
            },
            {
                "file": "events.js",
                "issue_count": 38
            },
            {
                "file": "lifecycle.js",
                "issue_count": 37
            },
            {
                "file": "patch.js",
                "issue_count": 32
            },
            {
                "file": "transition.js",
                "issue_count": 32
            },
            {
                "file": "component.js",
                "issue_count": 29
            },
            {
                "file": "codegen.spec.js",
                "issue_count": 24
            },
            {
                "file": "options.js",
                "issue_count": 24
            }
        ],
        "isAmbiguous": true,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "what are the buggy commits that happened on August 18, 2022?",
        "number": 13,
        "category": 2,
        "response": "The buggy commits that happened on August 18, 2022, are identified by the commit IDs '5221d4d3b6049c87d196d99dbb64bcd3f3b07279' and 'b4bf4c52ad31e02307cfd4d643dc5610c893e3ba'.",
        "chain_of_thought": "To determine the buggy commits that happened on August 18, 2022, we need to identify commits that introduced issues on that specific date. The schema provides a relationship between Commit and Issue through the introduced relationship, which indicates that a commit introduced a bug. We also need to filter these commits by the committedDate property to match the specified date.\n\nHere's the step-by-step breakdown of the query:\n\n1. Identify the relevant nodes and relationships:\n   - Commit nodes, which have a committedDate property.\n   - Issue nodes, which are connected to Commit nodes via the introduced relationship.\n\n2. Filter the commits by the specified date, August 18, 2022. The date should be formatted in ISO format as \"2022-08-18\" and matched using a regex to account for any time component.\n\n3. Return the commit IDs and any other relevant information.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-08-18.*'\nRETURN c.id AS commitId, c.committedDate AS date\n```\n\nThis query finds all commits that introduced issues on August 18, 2022, and returns their IDs and committed dates.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-08-18.*'\nRETURN c.id AS commitId, c.committedDate AS date\n",
        "result": [
            {
                "commitId": "5221d4d3b6049c87d196d99dbb64bcd3f3b07279",
                "date": "2022-08-18T08:01:00Z"
            },
            {
                "commitId": "5221d4d3b6049c87d196d99dbb64bcd3f3b07279",
                "date": "2022-08-18T08:01:00Z"
            },
            {
                "commitId": "b4bf4c52ad31e02307cfd4d643dc5610c893e3ba",
                "date": "2022-08-18T07:32:12Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "what commits were buggy on May 24, 2022?",
        "number": 14,
        "category": 2,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To determine which commits were buggy on May 24, 2022, we need to identify the commits that introduced issues on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship. We also need to filter the issues based on their creation date, which is represented by the created_at property in the Issue node.\n\nFirst, we need to match the commits that introduced issues:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\n```\n\nNext, we filter the issues to only include those created on May 24, 2022. We use the created_at property and format the date in ISO format:\n```cypher\nWHERE i.created_at =~ '2022-05-24T.*'\n```\n\nFinally, we return the commit IDs that introduced these issues:\n```cypher\nRETURN c.id AS buggy_commit\n```\n\nTherefore, the complete query is:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2022-05-24T.*'\nRETURN c.id AS buggy_commit\n```",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2022-05-24T.*'\nRETURN c.id AS buggy_commit\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "incorrect"
    },
    {
        "question": "commit(s) that fixed the bug ticket 12892?",
        "number": 15,
        "category": 2,
        "response": "The commit that fixed the bug ticket 12892 is identified by the commit ID: 25f97a5033187372e7b8c591c79336197ee5c833.",
        "chain_of_thought": "To find the commit(s) that fixed the bug ticket with the number 12892, we need to identify the relevant nodes and relationships. The bug ticket is represented by the Issue node, and the commit that fixed the bug is represented by the Commit node. The relevant relationship between Commit and Issue for this question is the fixed relationship, which indicates that a commit fixed a particular issue.\n\nFirst, we need to match the Issue node with the specific number 12892. Then, we find the Commit nodes that have a fixed relationship with this Issue node.\n\nThe query to find the commit(s) that fixed the bug ticket 12892 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 12892})\nRETURN c.id AS commit_id\n```\n\nThis query will return the ID(s) of the commit(s) that fixed the specified bug ticket.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 12892})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "25f97a5033187372e7b8c591c79336197ee5c833"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "which commit fixed the bug ticket 11575?",
        "number": 16,
        "category": 2,
        "response": "The commit with the ID 'af5e05d87ecd218f73302a1b08dcaedd2b46814a' fixed the bug ticket 11575.",
        "chain_of_thought": "To determine which commit fixed the bug associated with ticket 11575, we need to identify the relevant nodes and relationships. The ticket number corresponds to an Issue node, and we are interested in finding the Commit node that has a fixed relationship with this Issue node.\n\nHere's the step-by-step breakdown:\n\n1. **Identify the Issue Node**: We need to find the Issue node with the number 11575.\n2. **Find the Commit Node**: We need to find the Commit node that has a fixed relationship with the identified Issue node.\n\nThe relevant relationship between Commit and Issue for this question is the fixed relationship.\n\nTherefore, the query to find the commit that fixed the bug ticket 11575 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 11575})\nRETURN c.id AS commit_id\n```\n\nThis query will return the ID of the commit that fixed the bug associated with ticket number 11575.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 11575})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "af5e05d87ecd218f73302a1b08dcaedd2b46814a"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "Determine the bug(s) that were introduced because of commit hash fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be?",
        "number": 17,
        "category": 2,
        "response": "The commit with hash fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be introduced the following bugs:\n\n1. Issue ID 12608: \"implement and export defineAsyncComponent compatible version in 2.7.x\" - [View Issue](https://github.com/vuejs/vue/issues/12608)\n2. Issue ID 12622: \"Vue.component(id, component) mismatch type of DefineComponent\" - [View Issue](https://github.com/vuejs/vue/issues/12622)\n3. Issue ID 12748: \"Export type `DefineComponent`\" - [View Issue](https://github.com/vuejs/vue/issues/12748)\n4. Issue ID 13078: \"import type { CSSProperties } from vue is error\" - [View Issue](https://github.com/vuejs/vue/issues/13078)\n5. Issue ID 13128: \"Vue 2.7.16 bug: Some types has not export\" - [View Issue](https://github.com/vuejs/vue/issues/13128)",
        "chain_of_thought": "To determine the bug(s) that were introduced because of a specific commit, we need to identify the relevant nodes and relationships. The commit in question is identified by its hash, which corresponds to the `Commit` node. We are interested in finding the `Issue` nodes that were introduced by this commit. The relevant relationship between `Commit` and `Issue` for this question is the `introduced` relationship.\n\nTherefore, the query to find the bug(s) introduced by the commit with hash `fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be` is:\n\n```cypher\nMATCH (c:Commit {id: 'fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query matches the specific commit by its ID and finds all issues that were introduced by this commit, returning the issue ID, title, and URL for each issue.",
        "query": "cypher\nMATCH (c:Commit {id: 'fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [
            {
                "issue_id": 12608,
                "issue_title": "\"implement and export defineAsyncComponent compatible version in 2.7.x\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12608"
            },
            {
                "issue_id": 12622,
                "issue_title": "\"Vue.component(id, component) mismatch type of DefineComponent\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12622"
            },
            {
                "issue_id": 12748,
                "issue_title": "\"Export type `DefineComponent`\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12748"
            },
            {
                "issue_id": 13078,
                "issue_title": "\"import type { CSSProperties } from vue is error\"",
                "issue_url": "https://github.com/vuejs/vue/issues/13078"
            },
            {
                "issue_id": 13128,
                "issue_title": "\"Vue 2.7.16 bug: Some types has not export\"",
                "issue_url": "https://github.com/vuejs/vue/issues/13128"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "what are the bugs caused by commit c678e3134b927645f79270b52d4d660a7e3654ce?",
        "number": 18,
        "category": 2,
        "response": "The commit with ID c678e3134b927645f79270b52d4d660a7e3654ce caused the following bugs:\n\n1. Issue ID 12758: \"[2.7.x] Here is a type error when using ref() on attribute ref in TSX\". You can view more details at the following URL: [https://github.com/vuejs/vue/issues/12758](https://github.com/vuejs/vue/issues/12758).\n\n2. Issue ID 12832: \"EventHandlers type error, DOMs Event was tainted by `@types/node`\". More details are available at this URL: [https://github.com/vuejs/vue/issues/12832](https://github.com/vuejs/vue/issues/12832).",
        "chain_of_thought": "To determine the bugs caused by a specific commit, we need to identify the relevant nodes and relationships in the schema. The commit in question is identified by its ID, which corresponds to the Commit node. We are interested in finding the issues (bugs) that this commit has introduced, which is represented by the introduced relationship between the Commit and Issue nodes.\n\nHere's the step-by-step breakdown of the query:\n\n1. Identify the Commit node with the specified ID.\n2. Use the introduced relationship to find the Issue nodes (bugs) that were introduced by this commit.\n3. Return the relevant information about these issues, such as their ID, title, and URL.\n\nThe complete Cypher query to find the bugs caused by the specified commit is:\n\n```cypher\nMATCH (c:Commit {id: 'c678e3134b927645f79270b52d4d660a7e3654ce'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS title, i.url AS url\n```\n\nThis query will return the ID, title, and URL of the issues that were introduced by the commit with the specified ID.",
        "query": "cypher\nMATCH (c:Commit {id: 'c678e3134b927645f79270b52d4d660a7e3654ce'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS title, i.url AS url\n",
        "result": [
            {
                "issue_id": 12758,
                "title": "\"[2.7.x] Here is a type error when using ref() on attribute ref in TSX\"",
                "url": "https://github.com/vuejs/vue/issues/12758"
            },
            {
                "issue_id": 12832,
                "title": "\"EventHandlers type error, DOMs Event  was tainted by `@types/node`\"",
                "url": "https://github.com/vuejs/vue/issues/12832"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "Determine the percentage of the fixing commits that introduced bugs on Oct 2017?",
        "number": 19,
        "category": 3,
        "response": "The percentage of the fixing commits that also introduced bugs in October 2017 is approximately 17.14%.",
        "chain_of_thought": "To determine the percentage of fixing commits that introduced bugs in October 2017, we need to interpret the question and identify the relevant nodes and relationships in the schema.\n\n### Interpretation:\n1. **Fixing Commits**: These are commits that have a `fixed` relationship with an `Issue`.\n2. **Introduced Bugs**: These are commits that have an `introduced` relationship with an `Issue`.\n3. **Time Frame**: We are interested in commits from October 2017.\n\n### Steps to Construct the Query:\n1. **Identify Fixing Commits in October 2017**:\n   - Use the `fixed` relationship to find commits that fixed issues.\n   - Filter these commits by the `committedDate` property to only include those from October 2017.\n\n2. **Identify Commits that Introduced Bugs in October 2017**:\n   - Use the `introduced` relationship to find commits that introduced issues.\n   - Similarly, filter these by the `committedDate` property for October 2017.\n\n3. **Calculate the Percentage**:\n   - Count the total number of fixing commits in October 2017.\n   - Count the number of fixing commits that also introduced bugs in October 2017.\n   - Calculate the percentage of fixing commits that introduced bugs.\n\n### Cypher Query:\n```cypher\n// Find all fixing commits in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\nWITH COLLECT(c.id) AS fixingCommits\n\n// Find all commits that introduced bugs in October 2017\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\nWITH fixingCommits, COLLECT(c.id) AS introducingCommits\n\n// Calculate the intersection of fixing and introducing commits\nWITH fixingCommits, introducingCommits, \n     [x IN fixingCommits WHERE x IN introducingCommits] AS bothFixingAndIntroducing\n\n// Calculate the percentage\nRETURN \n  SIZE(bothFixingAndIntroducing) * 100.0 / SIZE(fixingCommits) AS percentage\n```\n\n### Explanation:\n- The query first collects the IDs of all fixing commits and introducing commits in October 2017.\n- It then calculates the intersection of these two sets to find commits that both fixed and introduced issues.\n- Finally, it calculates the percentage of fixing commits that also introduced bugs by dividing the size of the intersection by the total number of fixing commits and multiplying by 100.",
        "query": "cypher\n// Find all fixing commits in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\nWITH COLLECT(c.id) AS fixingCommits\n\n// Find all commits that introduced bugs in October 2017\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\nWITH fixingCommits, COLLECT(c.id) AS introducingCommits\n\n// Calculate the intersection of fixing and introducing commits\nWITH fixingCommits, introducingCommits, \n     [x IN fixingCommits WHERE x IN introducingCommits] AS bothFixingAndIntroducing\n\n// Calculate the percentage\nRETURN \n  SIZE(bothFixingAndIntroducing) * 100.0 / SIZE(fixingCommits) AS percentage\n",
        "result": [
            {
                "percentage": 17.142857142857142
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "incorrect"
    },
    {
        "question": "How many fixing commits caused bugs on Oct 2017?",
        "number": 20,
        "category": 3,
        "response": "In October 2017, there were 7 fixing commits that caused bugs.",
        "chain_of_thought": "To address the question, we need to determine the number of commits that both fixed an issue and introduced a bug in October 2017. The schema provides us with the necessary relationships and properties to achieve this.\n\n1. **Identify the relevant nodes and relationships:**\n   - We need to consider the `Commit` nodes.\n   - The `fixed` relationship indicates that a commit fixed an issue.\n   - The `introduced` relationship indicates that a commit introduced a bug.\n\n2. **Filter commits by date:**\n   - We need to filter commits based on the `committedDate` property to only include those from October 2017. The date format should be in ISO format, and since the time is not specified, we will use a regex to match any time on the specified date.\n\n3. **Construct the query:**\n   - We will match commits that have both `fixed` and `introduced` relationships.\n   - We will filter these commits to only include those from October 2017.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n```\n\nThis query matches commits that have both fixed and introduced relationships, filters them to those committed in October 2017, and returns the count of such commits.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n",
        "result": [
            {
                "fixing_commits_causing_bugs": 7
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "how many commits happened in last month?",
        "number": 1,
        "category": 1,
        "response": "There were no commits that happened last month. Can I help with anything else?",
        "chain_of_thought": "To determine how many commits happened in the last month, we need to consider the current date, which is 2024-08-26T00:00:00Z. The last month would be from 2024-07-01T00:00:00Z to 2024-07-31T23:59:59Z. We need to query the Commit nodes and filter them based on the `committedDate` property to find those that fall within this date range.\n\nThe relevant node is the Commit node, and the relevant property is `committedDate`. We will use a date range filter to count the commits that occurred in July 2024.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-01T00:00:00Z\" AND c.committedDate <= \"2024-07-31T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n```\n\nThis query matches all Commit nodes, filters them by the `committedDate` to include only those within July 2024, and returns the count of such commits.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-01T00:00:00Z\" AND c.committedDate <= \"2024-07-31T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n",
        "result": [
            {
                "numberOfCommits": 0
            }
        ],
        "isAmbiguous": true,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "what is the latest commit?",
        "number": 2,
        "category": 1,
        "response": "The latest commit has the ID `73486cb5f5862a443b42c2aff68b82320218cbcd` and was made on June 14, 2024, at 12:52:12 UTC.",
        "chain_of_thought": "To determine the latest commit, we need to identify the Commit node with the most recent committedDate. The relevant property for this query is committedDate, which is a string representing the date and time when the commit was made. We will sort the commits by this date in descending order and return the top result.\n\nThe query to find the latest commit is as follows:\n\n```cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n```\n\nThis query matches all Commit nodes, orders them by the committedDate in descending order, and returns the ID and date of the latest commit.",
        "query": "cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n",
        "result": [
            {
                "commitId": "73486cb5f5862a443b42c2aff68b82320218cbcd",
                "commitDate": "2024-06-14T12:52:12Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "can you tell me the details of the commits between Dec 1st 2023 and Dec 7th 2023?",
        "number": 3,
        "category": 1,
        "response": "Here are the details of the commits made between December 1st, 2023, and December 7th, 2023:\n\n1. **Commit ID:** 947993f7e8e445b9032dd59d7f484593c3174452\n   - **Message:** \"chore: bump vitest to 1.0\"\n   - **Additions:** 323\n   - **Deletions:** 154\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:08:23Z\n\n2. **Commit ID:** 08382f008016c3b3b93f84594266f2e191fee91d\n   - **Message:** \"fix(props): should not unwrap props that are raw refs\\n\\nclose #12930\"\n   - **Additions:** 36\n   - **Deletions:** 12\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:10:49Z\n\n3. **Commit ID:** d30f6fd25f90973a84fadb43eef75a54c4b42ea2\n   - **Message:** \"test: fix tests\"\n   - **Additions:** 39\n   - **Deletions:** 39\n   - **Changed Files:** 4\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:21:00Z\n\n4. **Commit ID:** 0ad8e8d94f3a3bf4429f25850c85a6bbb2b81364\n   - **Message:** \"fix(shallowReactive): should track value if already reactive when set in shallowReactive\"\n   - **Additions:** 6\n   - **Deletions:** 5\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:45:15Z\n\n5. **Commit ID:** 45d6ad6645e960a3ee52ad9667520a1625f10dfd\n   - **Message:** \"chore(compiler-sfc): specify prettier version (#13053)\\n\\nclose: #13052\"\n   - **Additions:** 7\n   - **Deletions:** 1\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:49:41Z\n\n6. **Commit ID:** de0b97b3eadae120eda505b45df2de2115dcb6f0\n   - **Message:** \"fix(types): fix type augmentation and compiler-sfc types w/moduleResolution: bundler (#13107)\\n\\nclose #13106\"\n   - **Additions:** 4\n   - **Deletions:** 3\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:52:18Z\n\n7. **Commit ID:** ae3e4b1c706b8d61a4a312ca5d23441df021b4b4\n   - **Message:** \"fix(utils): unwrap refs when stringifying values in template\\n\\nclose #12884\\nclose #12888\"\n   - **Additions:** 20\n   - **Deletions:** 1\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T08:40:49Z\n\n8. **Commit ID:** 10c2a87c7038f2f80df23044c48a130bea253bf8\n   - **Message:** \"chore(deps): bump @babel/parser\"\n   - **Additions:** 673\n   - **Deletions:** 701\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T09:09:56Z\n\n9. **Commit ID:** 25f97a5033187372e7b8c591c79336197ee5c833\n   - **Message:** \"fix(compiler-sfc): fix rewriteDefault edge cases\\n\\nclose #13060\\nclose #12892\\nclose #12906\"\n   - **Additions:** 79\n   - **Deletions:** 7\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T09:25:12Z\n\n10. **Commit ID:** d6468c4c383184acd66f3c9091005e83836a43f3\n    - **Message:** \"chore(deps): bump esbuild\"\n    - **Additions:** 6\n    - **Deletions:** 234\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T09:29:47Z\n\n11. **Commit ID:** f5ef882a781b8a62c9ca00e95006d07636567c8e\n    - **Message:** \"fix(style): always set new styles\\n\\nclose #12901\\nclose #12946\"\n    - **Additions:** 17\n    - **Deletions:** 4\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T15:17:02Z\n\n12. **Commit ID:** a174c29dab2cf655b06f7870e0ac5a78ef35ec8a\n    - **Message:** \"fix(types): fix shallowRefs return type  (#12979)\\n\\nclose #12978\"\n    - **Additions:** 30\n    - **Deletions:** 8\n    - **Changed Files:** 3\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T15:51:56Z\n\n13. **Commit ID:** 6d857f5bee275dc98106e3b2cbc7722f5ec0cfc0\n    - **Message:** \"fix(watch): new property addition should trigger deep watcher with getter\\n\\nclose #12967\\nclose #12972\"\n    - **Additions:** 37\n    - **Deletions:** 2\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T16:13:31Z\n\n14. **Commit ID:** 24fcf69624a633d43dfc0aa5fa6b93d11de7fad5\n    - **Message:** \"fix(types): type VNodeChildren should allow type number  (#13067)\\n\\nclose #12973\"\n    - **Additions:** 2\n    - **Deletions:** 0\n    - **Changed Files:** 1\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T05:59:43Z\n\n15. **Commit ID:** 83d95351a9f809311d624fc3398e7f6829b72447\n    - **Message:** \"fix(compiler-sfc): check template `ref` usage,  (#12985)\\n\\nclose #12984\"\n    - **Additions:** 29\n    - **Deletions:** 0\n    - **Changed Files:** 3\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T06:14:27Z\n\n16. **Commit ID:** 3650c12f7d3a20f3155bc1fd2b068e84289e0d33\n    - **Message:** \"fix(types): provide types for built-in components\\n\\nclose #13002\"\n    - **Additions:** 65\n    - **Deletions:** 0\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T06:41:10Z\n\n17. **Commit ID:** 2632249925e632e56f6dfc8fdbcf682c82e4081b\n    - **Message:** \"fix(keep-alive): fix keep-alive memory leak\\n\\nclose #12827\"\n    - **Additions:** 2\n    - **Deletions:** 0\n    - **Changed Files:** 1\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T08:12:36Z\n\n18. **Commit ID:** e0747f40a879b4000a1959d21377b51d1f1ed988\n    - **Message:** \"fix(keep-alive): fix memory leak without breaking transition tests\"\n    - **Additions:** 8\n    - **Deletions:** 4\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T09:07:15Z\n\nThese commits detail various fixes, chores, and test modifications within the specified date range.",
        "chain_of_thought": "To address the question about retrieving the details of commits between December 1st, 2023, and December 7th, 2023, we need to focus on the `Commit` nodes and their `committedDate` property. The task is to filter commits based on their committed date falling within the specified range.\n\nThe `committedDate` property is a string, and we need to ensure that the dates are formatted in ISO format. The date range provided in the question is from December 1st, 2023, to December 7th, 2023. We will use the ISO format for these dates: \"2023-12-01T00:00:00Z\" to \"2023-12-07T23:59:59Z\".\n\nHere's the Cypher query to retrieve the details of the commits within the specified date range:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2023-12-01T00:00:00Z\" AND c.committedDate <= \"2023-12-07T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n```\n\nThis query matches all `Commit` nodes and filters them based on the `committedDate` property to ensure they fall within the specified date range. It then returns the details of each commit, including the commit ID, message, number of additions, deletions, changed files, comments count, and the committed date, ordered by the committed date.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2023-12-01T00:00:00Z\" AND c.committedDate <= \"2023-12-07T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n",
        "result": [
            {
                "commitId": "947993f7e8e445b9032dd59d7f484593c3174452",
                "message": "\"chore: bump vitest to 1.0\"",
                "additions": 323,
                "deletions": 154,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:08:23Z"
            },
            {
                "commitId": "08382f008016c3b3b93f84594266f2e191fee91d",
                "message": "\"fix(props): should not unwrap props that are raw refs\n\nclose #12930\"",
                "additions": 36,
                "deletions": 12,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:10:49Z"
            },
            {
                "commitId": "d30f6fd25f90973a84fadb43eef75a54c4b42ea2",
                "message": "\"test: fix tests\"",
                "additions": 39,
                "deletions": 39,
                "changedFiles": 4,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:21:00Z"
            },
            {
                "commitId": "0ad8e8d94f3a3bf4429f25850c85a6bbb2b81364",
                "message": "\"fix(shallowReactive): should track value if already reactive when set in shallowReactive\"",
                "additions": 6,
                "deletions": 5,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:45:15Z"
            },
            {
                "commitId": "45d6ad6645e960a3ee52ad9667520a1625f10dfd",
                "message": "\"chore(compiler-sfc): specify prettier version (#13053)\n\nclose: #13052\"",
                "additions": 7,
                "deletions": 1,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:49:41Z"
            },
            {
                "commitId": "de0b97b3eadae120eda505b45df2de2115dcb6f0",
                "message": "\"fix(types): fix type augmentation and compiler-sfc types w/moduleResolution: bundler (#13107)\n\nclose #13106\"",
                "additions": 4,
                "deletions": 3,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:52:18Z"
            },
            {
                "commitId": "ae3e4b1c706b8d61a4a312ca5d23441df021b4b4",
                "message": "\"fix(utils): unwrap refs when stringifying values in template\n\nclose #12884\nclose #12888\"",
                "additions": 20,
                "deletions": 1,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T08:40:49Z"
            },
            {
                "commitId": "10c2a87c7038f2f80df23044c48a130bea253bf8",
                "message": "\"chore(deps): bump @babel/parser\"",
                "additions": 673,
                "deletions": 701,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:09:56Z"
            },
            {
                "commitId": "25f97a5033187372e7b8c591c79336197ee5c833",
                "message": "\"fix(compiler-sfc): fix rewriteDefault edge cases\n\nclose #13060\nclose #12892\nclose #12906\"",
                "additions": 79,
                "deletions": 7,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:25:12Z"
            },
            {
                "commitId": "d6468c4c383184acd66f3c9091005e83836a43f3",
                "message": "\"chore(deps): bump esbuild\"",
                "additions": 6,
                "deletions": 234,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:29:47Z"
            },
            {
                "commitId": "f5ef882a781b8a62c9ca00e95006d07636567c8e",
                "message": "\"fix(style): always set new styles\n\nclose #12901\nclose #12946\"",
                "additions": 17,
                "deletions": 4,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T15:17:02Z"
            },
            {
                "commitId": "a174c29dab2cf655b06f7870e0ac5a78ef35ec8a",
                "message": "\"fix(types): fix shallowRefs return type  (#12979)\n\nclose #12978\"",
                "additions": 30,
                "deletions": 8,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T15:51:56Z"
            },
            {
                "commitId": "6d857f5bee275dc98106e3b2cbc7722f5ec0cfc0",
                "message": "\"fix(watch): new property addition should trigger deep watcher with getter\n\nclose #12967\nclose #12972\"",
                "additions": 37,
                "deletions": 2,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T16:13:31Z"
            },
            {
                "commitId": "24fcf69624a633d43dfc0aa5fa6b93d11de7fad5",
                "message": "\"fix(types): type VNodeChildren should allow type number  (#13067)\n\nclose #12973\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-07T05:59:43Z"
            },
            {
                "commitId": "83d95351a9f809311d624fc3398e7f6829b72447",
                "message": "\"fix(compiler-sfc): check template `ref` usage,  (#12985)\n\nclose #12984\"",
                "additions": 29,
                "deletions": 0,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-07T06:14:27Z"
            },
            {
                "commitId": "3650c12f7d3a20f3155bc1fd2b068e84289e0d33",
                "message": "\"fix(types): provide types for built-in components\n\nclose #13002\"",
                "additions": 65,
                "deletions": 0,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-07T06:41:10Z"
            },
            {
                "commitId": "2632249925e632e56f6dfc8fdbcf682c82e4081b",
                "message": "\"fix(keep-alive): fix keep-alive memory leak\n\nclose #12827\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-07T08:12:36Z"
            },
            {
                "commitId": "e0747f40a879b4000a1959d21377b51d1f1ed988",
                "message": "\"fix(keep-alive): fix memory leak without breaking transition tests\"",
                "additions": 8,
                "deletions": 4,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-07T09:07:15Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "return a commit message on July 31?",
        "number": 4,
        "category": 1,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To address the question \"return a commit message on July 31,\" we need to interpret the query to find commit messages from a specific date, July 31. The schema provides us with the Commit node, which contains the `committedDate` and `message` properties. The `committedDate` property will be used to filter commits from July 31.\n\nSince the question does not specify a year, we will assume it refers to the most recent July 31, which would be July 31, 2024, given the current date is August 26, 2024.\n\nThe relevant relationship is not needed here as we are only querying the Commit node based on the date. We will use a regular expression to match the date part of the `committedDate` property to \"2024-07-31\".\n\nThe query to find the commit messages from July 31, 2024, is as follows:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31.*'\nRETURN c.message AS commitMessage\n```\n\nThis query matches all commits with a `committedDate` on July 31, 2024, and returns their `message` property.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31.*'\nRETURN c.message AS commitMessage\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "incorrect"
    },
    {
        "question": "show me the changes for render.js file?",
        "number": 5,
        "category": 2,
        "response": "Here are the changes made to the `render.js` file across various commits:\n\n1. **Commit ID: f64765fa03c1eb1d37f3301ea5beb4d18e57158a**\n   - Corrected a typo in a comment:\n     ```diff\n     - // There's no need to maintain a stack becaues all render fns are called\n     + // There's no need to maintain a stack because all render fns are called\n     ```\n\n2. **Commit ID: 099f3ba60085a089ff369442bdb835f3868e47c0**\n   - Added `vm.$scopedSlots` normalization:\n     ```diff\n     +        vm.$scopedSlots\n     ```\n\n3. **Commit ID: b9de23b1008b52deca7e7df40843e318a42f3f53**\n   - Introduced `currentRenderingInstance` and related utility functions for testing.\n   - Added multiple lines of comments and logic related to rendering functions and error handling.\n\n4. **Commit ID: 42fdf3f8378e5dc379808a4fa67b39c4a74ae191**\n   - Renamed functions and variables related to server prefetching:\n     ```diff\n     - function waitForSsrPrefetch (vm, resolve, reject) {\n     + function waitForServerPrefetch (vm, resolve, reject) {\n     ```\n\n5. **Commit ID: 6fe07ebf5ab3fea1860c59fe7cdd2ec1b760f9b0**\n   - Added a function `waitForSsrPrefetch` and updated logic regarding asynchronous rendering and handling promises.\n\n6. **Commit ID: 5d52262f1ce56d080c3438c4773a81dc5c8397aa**\n   - Adjusted scoped slots normalization:\n     ```diff\n     +      vm.$slots\n     ```\n\n7. **Commit ID: c7c13c2a156269d29fd9c9f8f6a3e53a2f2cac3d**\n   - Added import for `normalizeScopedSlots` and adjusted its usage:\n     ```diff\n     +import { normalizeScopedSlots } from '../vdom/helpers/normalize-scoped-slots'\n     ```\n\nThese changes reflect various improvements and adjustments to the rendering logic within the `render.js` file, focusing on scoped slots, error handling, and server-side rendering optimizations.",
        "chain_of_thought": "To address the question \"show me the changes for render.js file,\" we need to identify the relevant nodes and relationships in the schema. The file in question is \"render.js,\" which corresponds to the File node. We want to find the changes made to this file, which involves the Commit node and the changed relationship.\n\nHere's the step-by-step breakdown:\n\n1. **Identify the File Node**: We need to find the File node with the name \"render.js.\"\n\n2. **Find the Related Commits**: We need to find all commits that have changed this file. This involves the changed relationship between Commit and File.\n\n3. **Retrieve the Changes**: We want to retrieve the details of the changes, which can include additions, deletions, and the patch.\n\nThe query to achieve this is as follows:\n\n```cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'render.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n```\n\nThis query will return the commit ID, the number of additions and deletions, and the patch details for each commit that modified the \"render.js\" file, ordered by the commit date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'render.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n",
        "result": [
            {
                "commitId": "f64765fa03c1eb1d37f3301ea5beb4d18e57158a",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -84,7 +84,7 @@ export function renderMixin (Vue: Class<Component>) {\n     // render self\n     let vnode\n     try {\n-      // There's no need to maintain a stack becaues all render fns are called\n+      // There's no need to maintain a stack because all render fns are called\n       // separately from one another. Nested component's render fns are called\n       // when parent component is patched.\n       currentRenderingInstance = vm"
            },
            {
                "commitId": "099f3ba60085a089ff369442bdb835f3868e47c0",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -73,7 +73,8 @@ export function renderMixin (Vue: Class<Component>) {\n     if (_parentVnode) {\n       vm.$scopedSlots = normalizeScopedSlots(\n         _parentVnode.data.scopedSlots,\n-        vm.$slots\n+        vm.$slots,\n+        vm.$scopedSlots\n       )\n     }\n "
            },
            {
                "commitId": "b9de23b1008b52deca7e7df40843e318a42f3f53",
                "additions": 13,
                "deletions": 0,
                "patch": "@@ -51,6 +51,13 @@ export function initRender (vm: Component) {\n   }\n }\n \n+export let currentRenderingInstance: Component | null = null\n+\n+// for testing only\n+export function setCurrentRenderingInstance (vm: Component) {\n+  currentRenderingInstance = vm\n+}\n+\n export function renderMixin (Vue: Class<Component>) {\n   // install runtime convenience helpers\n   installRenderHelpers(Vue.prototype)\n@@ -76,6 +83,10 @@ export function renderMixin (Vue: Class<Component>) {\n     // render self\n     let vnode\n     try {\n+      // There's no need to maintain a stack becaues all render fns are called\n+      // separately from one another. Nested component's render fns are called\n+      // when parent component is patched.\n+      currentRenderingInstance = vm\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n       handleError(e, vm, `render`)\n@@ -92,6 +103,8 @@ export function renderMixin (Vue: Class<Component>) {\n       } else {\n         vnode = vm._vnode\n       }\n+    } finally {\n+      currentRenderingInstance = null\n     }\n     // if the returned array contains only a single node, allow it\n     if (Array.isArray(vnode) && vnode.length === 1) {"
            },
            {
                "commitId": "42fdf3f8378e5dc379808a4fa67b39c4a74ae191",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -50,8 +50,8 @@ const normalizeRender = vm => {\n   }\n }\n \n-function waitForSsrPrefetch (vm, resolve, reject) {\n-  let handlers = vm.$options.ssrPrefetch\n+function waitForServerPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.serverPrefetch\n   if (isDef(handlers)) {\n     if (!Array.isArray(handlers)) handlers = [handlers]\n     try {\n@@ -206,7 +206,7 @@ function renderComponentInner (node, isRoot, context) {\n \n   const reject = context.done\n \n-  waitForSsrPrefetch(child, resolve, reject)\n+  waitForServerPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -432,6 +432,6 @@ export function createRenderFunction (\n     const resolve = () => {\n       renderNode(component._render(), true, context)\n     }\n-    waitForSsrPrefetch(component, resolve, done)\n+    waitForServerPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "6fe07ebf5ab3fea1860c59fe7cdd2ec1b760f9b0",
                "additions": 47,
                "deletions": 9,
                "patch": "@@ -19,6 +19,7 @@ let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n     warned[msg] = true\n+    // eslint-disable-next-line no-console\n     console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n   }\n }\n@@ -49,6 +50,27 @@ const normalizeRender = vm => {\n   }\n }\n \n+function waitForSsrPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.ssrPrefetch\n+  if (isDef(handlers)) {\n+    if (!Array.isArray(handlers)) handlers = [handlers]\n+    try {\n+      const promises = []\n+      for (let i = 0, j = handlers.length; i < j; i++) {\n+        const result = handlers[i].call(vm, vm)\n+        if (result && typeof result.then === 'function') {\n+          promises.push(result)\n+        }\n+      }\n+      Promise.all(promises).then(resolve).catch(reject)\n+      return\n+    } catch (e) {\n+      reject(e)\n+    }\n+  }\n+  resolve()\n+}\n+\n function renderNode (node, isRoot, context) {\n   if (node.isString) {\n     renderStringNode(node, context)\n@@ -92,7 +114,12 @@ function renderComponent (node, isRoot, context) {\n   const registerComponent = registerComponentForCache(Ctor.options, write)\n \n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const rawKey = getKey(node.componentOptions.propsData)\n+    if (rawKey === false) {\n+      renderComponentInner(node, isRoot, context)\n+      return\n+    }\n+    const key = name + '::' + rawKey\n     const { has, get } = context\n     if (isDef(has)) {\n       has(key, hit => {\n@@ -166,13 +193,20 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+\n+  const resolve = () => {\n+    const childNode = child._render()\n+    childNode.parent = node\n+    context.renderStates.push({\n+      type: 'Component',\n+      prevActive\n+    })\n+    renderNode(childNode, isRoot, context)\n+  }\n+\n+  const reject = context.done\n+\n+  waitForSsrPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -394,6 +428,10 @@ export function createRenderFunction (\n     })\n     installSSRHelpers(component)\n     normalizeRender(component)\n-    renderNode(component._render(), true, context)\n+\n+    const resolve = () => {\n+      renderNode(component._render(), true, context)\n+    }\n+    waitForSsrPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "5d52262f1ce56d080c3438c4773a81dc5c8397aa",
                "additions": 4,
                "deletions": 1,
                "patch": "@@ -64,7 +64,10 @@ export function renderMixin (Vue: Class<Component>) {\n     const { render, _parentVnode } = vm.$options\n \n     if (_parentVnode) {\n-      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots)\n+      vm.$scopedSlots = normalizeScopedSlots(\n+        _parentVnode.data.scopedSlots,\n+        vm.$slots\n+      )\n     }\n \n     // set parent vnode. this allows render functions to have access"
            },
            {
                "commitId": "c7c13c2a156269d29fd9c9f8f6a3e53a2f2cac3d",
                "additions": 6,
                "deletions": 1,
                "patch": "@@ -11,6 +11,7 @@ import {\n import { createElement } from '../vdom/create-element'\n import { installRenderHelpers } from './render-helpers/index'\n import { resolveSlots } from './render-helpers/resolve-slots'\n+import { normalizeScopedSlots } from '../vdom/helpers/normalize-scoped-slots'\n import VNode, { createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n@@ -63,7 +64,7 @@ export function renderMixin (Vue: Class<Component>) {\n     const { render, _parentVnode } = vm.$options\n \n     if (_parentVnode) {\n-      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n+      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots)\n     }\n \n     // set parent vnode. this allows render functions to have access\n@@ -89,6 +90,10 @@ export function renderMixin (Vue: Class<Component>) {\n         vnode = vm._vnode\n       }\n     }\n+    // if the returned array contains only a single node, allow it\n+    if (Array.isArray(vnode) && vnode.length === 1) {\n+      vnode = vnode[0]\n+    }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "ab24285458c98e25d5749beb4edebef73672de4b",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -114,7 +114,12 @@ function renderComponent (node, isRoot, context) {\n   const registerComponent = registerComponentForCache(Ctor.options, write)\n \n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const rawKey = getKey(node.componentOptions.propsData)\n+    if (rawKey === false) {\n+      renderComponentInner(node, isRoot, context)\n+      return\n+    }\n+    const key = name + '::' + rawKey\n     const { has, get } = context\n     if (isDef(has)) {\n       has(key, hit => {\n@@ -188,7 +193,7 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  \n+\n   const resolve = () => {\n     const childNode = child._render()\n     childNode.parent = node"
            },
            {
                "commitId": "d7a533d6f85aae52aed03202fa5ccb774f0cb2ec",
                "additions": 41,
                "deletions": 8,
                "patch": "@@ -19,6 +19,7 @@ let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n     warned[msg] = true\n+    // eslint-disable-next-line no-console\n     console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n   }\n }\n@@ -49,6 +50,27 @@ const normalizeRender = vm => {\n   }\n }\n \n+function waitForSsrPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.ssrPrefetch\n+  if (isDef(handlers)) {\n+    if (!Array.isArray(handlers)) handlers = [handlers]\n+    try {\n+      const promises = []\n+      for (let i = 0, j = handlers.length; i < j; i++) {\n+        const result = handlers[i].call(vm, vm)\n+        if (result && typeof result.then === 'function') {\n+          promises.push(result)\n+        }\n+      }\n+      Promise.all(promises).then(resolve).catch(reject)\n+      return\n+    } catch (e) {\n+      reject(e)\n+    }\n+  }\n+  resolve()\n+}\n+\n function renderNode (node, isRoot, context) {\n   if (node.isString) {\n     renderStringNode(node, context)\n@@ -166,13 +188,20 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+  \n+  const resolve = () => {\n+    const childNode = child._render()\n+    childNode.parent = node\n+    context.renderStates.push({\n+      type: 'Component',\n+      prevActive\n+    })\n+    renderNode(childNode, isRoot, context)\n+  }\n+\n+  const reject = context.done\n+\n+  waitForSsrPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -394,6 +423,10 @@ export function createRenderFunction (\n     })\n     installSSRHelpers(component)\n     normalizeRender(component)\n-    renderNode(component._render(), true, context)\n+\n+    const resolve = () => {\n+      renderNode(component._render(), true, context)\n+    }\n+    waitForSsrPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "780dac561b9cd6c3cec28f154f76e7d28352ebf3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -326,7 +326,7 @@ function renderStartingTag (node: VNode, context) {\n       for (let i = 0; i < dirs.length; i++) {\n         const name = dirs[i].name\n         if (name !== 'show') {\n-          const dirRenderer = resolveAsset(context, 'directives', name, true)\n+          const dirRenderer = resolveAsset(context, 'directives', name)\n           if (dirRenderer) {\n             // directives mutate the node's data\n             // which then gets rendered by modules"
            },
            {
                "commitId": "307835284a326569ea12c4a22c7dcb8f36d2d8ca",
                "additions": 8,
                "deletions": 5,
                "patch": "@@ -3,6 +3,7 @@\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n+import { resolveAsset } from 'core/util/options'\n import { generateComponentTrace } from 'core/util/debug'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n@@ -324,11 +325,13 @@ function renderStartingTag (node: VNode, context) {\n     if (dirs) {\n       for (let i = 0; i < dirs.length; i++) {\n         const name = dirs[i].name\n-        const dirRenderer = directives[name]\n-        if (dirRenderer && name !== 'show') {\n-          // directives mutate the node's data\n-          // which then gets rendered by modules\n-          dirRenderer(node, dirs[i])\n+        if (name !== 'show') {\n+          const dirRenderer = resolveAsset(context, 'directives', name, true)\n+          if (dirRenderer) {\n+            // directives mutate the node's data\n+            // which then gets rendered by modules\n+            dirRenderer(node, dirs[i])\n+          }\n         }\n       }\n     }"
            },
            {
                "commitId": "530ca1b2db315fbd0e360807b2031d26665c5d3d",
                "additions": 0,
                "deletions": 8,
                "patch": "@@ -62,14 +62,6 @@ export function renderMixin (Vue: Class<Component>) {\n     const vm: Component = this\n     const { render, _parentVnode } = vm.$options\n \n-    // reset _rendered flag on slots for duplicate slot check\n-    if (process.env.NODE_ENV !== 'production') {\n-      for (const key in vm.$slots) {\n-        // $flow-disable-line\n-        vm.$slots[key]._rendered = false\n-      }\n-    }\n-\n     if (_parentVnode) {\n       vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n     }"
            },
            {
                "commitId": "1129d184482720bb52fa61f0a309645b7caaddd9",
                "additions": 5,
                "deletions": 9,
                "patch": "@@ -86,15 +86,11 @@ export function renderMixin (Vue: Class<Component>) {\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n       /* istanbul ignore else */\n-      if (process.env.NODE_ENV !== 'production') {\n-        if (vm.$options.renderError) {\n-          try {\n-            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n-          } catch (e) {\n-            handleError(e, vm, `renderError`)\n-            vnode = vm._vnode\n-          }\n-        } else {\n+      if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n+        try {\n+          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+        } catch (e) {\n+          handleError(e, vm, `renderError`)\n           vnode = vm._vnode\n         }\n       } else {"
            },
            {
                "commitId": "702000971c5a355c937607edb930b67311c78f5d",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -191,7 +191,8 @@ function renderAsyncComponent (node, isRoot, context) {\n       tag\n     )\n     if (resolvedNode) {\n-      if (resolvedNode.componnetInstance) {\n+      if (resolvedNode.componentOptions) {\n+        // normal component\n         renderComponent(resolvedNode, isRoot, context)\n       } else if (!Array.isArray(resolvedNode)) {\n         // single return node from functional component"
            },
            {
                "commitId": "882e7199fd8eee039291c4b9f7f324dcf46f32fd",
                "additions": 19,
                "deletions": 3,
                "patch": "@@ -191,7 +191,21 @@ function renderAsyncComponent (node, isRoot, context) {\n       tag\n     )\n     if (resolvedNode) {\n-      renderComponent(resolvedNode, isRoot, context)\n+      if (resolvedNode.componnetInstance) {\n+        renderComponent(resolvedNode, isRoot, context)\n+      } else if (!Array.isArray(resolvedNode)) {\n+        // single return node from functional component\n+        renderNode(resolvedNode, isRoot, context)\n+      } else {\n+        // multiple return nodes from functional component\n+        context.renderStates.push({\n+          type: 'Fragment',\n+          children: resolvedNode,\n+          rendered: 0,\n+          total: resolvedNode.length\n+        })\n+        context.next()\n+      }\n     } else {\n       // invalid component, but this does not throw on the client\n       // so render empty comment node\n@@ -232,9 +246,10 @@ function renderStringNode (el, context) {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n       type: 'Element',\n+      children,\n       rendered: 0,\n       total: children.length,\n-      endTag: el.close, children\n+      endTag: el.close\n     })\n     write(el.open, next)\n   }\n@@ -263,9 +278,10 @@ function renderElement (el, isRoot, context) {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n       type: 'Element',\n+      children,\n       rendered: 0,\n       total: children.length,\n-      endTag, children\n+      endTag\n     })\n     write(startTag, next)\n   }"
            },
            {
                "commitId": "956756b1be7084daf8b6afb92ac0da7c24cde2a5",
                "additions": 8,
                "deletions": 11,
                "patch": "@@ -11,7 +11,7 @@ import {\n import { createElement } from '../vdom/create-element'\n import { installRenderHelpers } from './render-helpers/index'\n import { resolveSlots } from './render-helpers/resolve-slots'\n-import VNode, { cloneVNodes, createEmptyVNode } from '../vdom/vnode'\n+import VNode, { createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n \n@@ -62,20 +62,17 @@ export function renderMixin (Vue: Class<Component>) {\n     const vm: Component = this\n     const { render, _parentVnode } = vm.$options\n \n-    if (vm._isMounted) {\n-      // if the parent didn't update, the slot nodes will be the ones from\n-      // last render. They need to be cloned to ensure \"freshness\" for this render.\n+    // reset _rendered flag on slots for duplicate slot check\n+    if (process.env.NODE_ENV !== 'production') {\n       for (const key in vm.$slots) {\n-        const slot = vm.$slots[key]\n-        // _rendered is a flag added by renderSlot, but may not be present\n-        // if the slot is passed from manually written render functions\n-        if (slot._rendered || (slot[0] && slot[0].elm)) {\n-          vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n-        }\n+        // $flow-disable-line\n+        vm.$slots[key]._rendered = false\n       }\n     }\n \n-    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n+    if (_parentVnode) {\n+      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n+    }\n \n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node."
            },
            {
                "commitId": "8936b8d9c147441555fcfd4ac748d817ba5ff60e",
                "additions": 4,
                "deletions": 7,
                "patch": "@@ -193,21 +193,18 @@ function renderAsyncComponent (node, isRoot, context) {\n     if (resolvedNode) {\n       renderComponent(resolvedNode, isRoot, context)\n     } else {\n-      reject()\n+      // invalid component, but this does not throw on the client\n+      // so render empty comment node\n+      context.write(`<!---->`, context.next)\n     }\n   }\n \n-  const reject = err => {\n-    console.error(`[vue-server-renderer] error when rendering async component:\\n`)\n-    if (err) console.error(err.stack)\n-    context.write(`<!--${node.text}-->`, context.next)\n-  }\n-\n   if (factory.resolved) {\n     resolve(factory.resolved)\n     return\n   }\n \n+  const reject = context.done\n   let res\n   try {\n     res = factory(resolve, reject)"
            },
            {
                "commitId": "604e081d0456ed136b24b5f759c608d153dfae93",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -252,8 +252,8 @@ function renderElement (el, isRoot, context) {\n     el.data.attrs[SSR_ATTR] = 'true'\n   }\n \n-  if (el.functionalOptions) {\n-    registerComponentForCache(el.functionalOptions, write)\n+  if (el.fnOptions) {\n+    registerComponentForCache(el.fnOptions, write)\n   }\n \n   const startTag = renderStartingTag(el, context)"
            },
            {
                "commitId": "f5cd29e1d8197613c4dfb4013b240784c3b64e43",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -17,6 +17,7 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n+  vm._staticTrees = null // v-once cached trees\n   const options = vm.$options\n   const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context"
            },
            {
                "commitId": "13196b25b8a0a84b3936982177195d2e04f13f79",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -66,7 +66,9 @@ export function renderMixin (Vue: Class<Component>) {\n       // last render. They need to be cloned to ensure \"freshness\" for this render.\n       for (const key in vm.$slots) {\n         const slot = vm.$slots[key]\n-        if (slot._rendered) {\n+        // _rendered is a flag added by renderSlot, but may not be present\n+        // if the slot is passed from manually written render functions\n+        if (slot._rendered || (slot[0] && slot[0].elm)) {\n           vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n         }\n       }"
            },
            {
                "commitId": "12255ff220ac8cd0171aa0ed56ce630a6843b2bd",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -17,9 +17,10 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n-  const parentVnode = vm.$vnode = vm.$options._parentVnode // the placeholder node in parent tree\n+  const options = vm.$options\n+  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context\n-  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n+  vm.$slots = resolveSlots(options._renderChildren, renderContext)\n   vm.$scopedSlots = emptyObject\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -39,12 +40,12 @@ export function initRender (vm: Component) {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, () => {\n+    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true)\n+    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true)\n   }\n }\n "
            },
            {
                "commitId": "bb1d888d44ddc39f06de5232883c8e3766a47be0",
                "additions": 1,
                "deletions": 9,
                "patch": "@@ -17,7 +17,6 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n-  vm._staticTrees = null\n   const parentVnode = vm.$vnode = vm.$options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n@@ -59,11 +58,7 @@ export function renderMixin (Vue: Class<Component>) {\n \n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n-    const {\n-      render,\n-      staticRenderFns,\n-      _parentVnode\n-    } = vm.$options\n+    const { render, _parentVnode } = vm.$options\n \n     if (vm._isMounted) {\n       // if the parent didn't update, the slot nodes will be the ones from\n@@ -78,9 +73,6 @@ export function renderMixin (Vue: Class<Component>) {\n \n     vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n \n-    if (staticRenderFns && !vm._staticTrees) {\n-      vm._staticTrees = []\n-    }\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n     vm.$vnode = _parentVnode"
            },
            {
                "commitId": "050bb33f9b02589357c037623ea8cbf8ff13555b",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -342,11 +342,15 @@ function renderStartingTag (node: VNode, context) {\n   ) {\n     markup += ` ${(scopeId: any)}`\n   }\n-  while (isDef(node)) {\n-    if (isDef(scopeId = node.context.$options._scopeId)) {\n-      markup += ` ${scopeId}`\n+  if (isDef(node.fnScopeId)) {\n+    markup += ` ${node.fnScopeId}`\n+  } else {\n+    while (isDef(node)) {\n+      if (isDef(scopeId = node.context.$options._scopeId)) {\n+        markup += ` ${scopeId}`\n+      }\n+      node = node.parent\n     }\n-    node = node.parent\n   }\n   return markup + '>'\n }"
            },
            {
                "commitId": "ea0d227d2ddfa5fc5e1112acf9cd485b4eae62cb",
                "additions": 7,
                "deletions": 38,
                "patch": "@@ -3,33 +3,18 @@\n import {\n   warn,\n   nextTick,\n-  toNumber,\n-  toString,\n-  looseEqual,\n   emptyObject,\n   handleError,\n-  looseIndexOf,\n   defineReactive\n } from '../util/index'\n \n-import VNode, {\n-  cloneVNodes,\n-  createTextVNode,\n-  createEmptyVNode\n-} from '../vdom/vnode'\n+import { createElement } from '../vdom/create-element'\n+import { installRenderHelpers } from './render-helpers/index'\n+import { resolveSlots } from './render-helpers/resolve-slots'\n+import VNode, { cloneVNodes, createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n \n-import { createElement } from '../vdom/create-element'\n-import { renderList } from './render-helpers/render-list'\n-import { renderSlot } from './render-helpers/render-slot'\n-import { resolveFilter } from './render-helpers/resolve-filter'\n-import { checkKeyCodes } from './render-helpers/check-keycodes'\n-import { bindObjectProps } from './render-helpers/bind-object-props'\n-import { renderStatic, markOnce } from './render-helpers/render-static'\n-import { bindObjectListeners } from './render-helpers/bind-object-listeners'\n-import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n-\n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n@@ -65,6 +50,9 @@ export function initRender (vm: Component) {\n }\n \n export function renderMixin (Vue: Class<Component>) {\n+  // install runtime convenience helpers\n+  installRenderHelpers(Vue.prototype)\n+\n   Vue.prototype.$nextTick = function (fn: Function) {\n     return nextTick(fn, this)\n   }\n@@ -135,23 +123,4 @@ export function renderMixin (Vue: Class<Component>) {\n     vnode.parent = _parentVnode\n     return vnode\n   }\n-\n-  // internal render helpers.\n-  // these are exposed on the instance prototype to reduce generated render\n-  // code size.\n-  Vue.prototype._o = markOnce\n-  Vue.prototype._n = toNumber\n-  Vue.prototype._s = toString\n-  Vue.prototype._l = renderList\n-  Vue.prototype._t = renderSlot\n-  Vue.prototype._q = looseEqual\n-  Vue.prototype._i = looseIndexOf\n-  Vue.prototype._m = renderStatic\n-  Vue.prototype._f = resolveFilter\n-  Vue.prototype._k = checkKeyCodes\n-  Vue.prototype._b = bindObjectProps\n-  Vue.prototype._v = createTextVNode\n-  Vue.prototype._e = createEmptyVNode\n-  Vue.prototype._u = resolveScopedSlots\n-  Vue.prototype._g = bindObjectListeners\n }"
            },
            {
                "commitId": "dff85b230abda63839ed6b80d56ccfc6068b9ae0",
                "additions": 15,
                "deletions": 10,
                "patch": "@@ -1,18 +1,14 @@\n /* @flow */\n \n-import {\n-  isDef,\n-  isUndef,\n-  isTrue,\n-  extend\n-} from 'shared/util'\n-\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n+import { generateComponentTrace } from 'core/util/debug'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n \n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n import {\n   createComponent,\n   createComponentInstanceForVnode\n@@ -26,13 +22,22 @@ const warnOnce = msg => {\n   }\n }\n \n+const onCompilationError = (err, vm) => {\n+  const trace = vm ? generateComponentTrace(vm) : ''\n+  throw new Error(`\\n\\u001b[31m${err}${trace}\\u001b[39m\\n`)\n+}\n+\n const normalizeRender = vm => {\n   const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      extend(vm.$options, ssrCompileToFunctions(template, {\n-        scopeId: _scopeId\n-      }))\n+      const compiled = ssrCompileToFunctions(template, {\n+        scopeId: _scopeId,\n+        warn: onCompilationError\n+      }, vm)\n+\n+      vm.$options.render = compiled.render\n+      vm.$options.staticRenderFns = compiled.staticRenderFns\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${"
            },
            {
                "commitId": "b3cd9bc3940eb1e01da7081450929557d9c1651e",
                "additions": 11,
                "deletions": 4,
                "patch": "@@ -101,14 +101,21 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      handleError(e, vm, `render function`)\n+      handleError(e, vm, `render`)\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n       /* istanbul ignore else */\n       if (process.env.NODE_ENV !== 'production') {\n-        vnode = vm.$options.renderError\n-          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n-          : vm._vnode\n+        if (vm.$options.renderError) {\n+          try {\n+            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+          } catch (e) {\n+            handleError(e, vm, `renderError`)\n+            vnode = vm._vnode\n+          }\n+        } else {\n+          vnode = vm._vnode\n+        }\n       } else {\n         vnode = vm._vnode\n       }"
            },
            {
                "commitId": "e76e648bc8b6a9df64f0b44716f76a1e4b259ed6",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -3,7 +3,8 @@\n import {\n   isDef,\n   isUndef,\n-  isTrue\n+  isTrue,\n+  extend\n } from 'shared/util'\n \n import { escape } from 'web/server/util'\n@@ -29,7 +30,7 @@ const normalizeRender = vm => {\n   const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+      extend(vm.$options, ssrCompileToFunctions(template, {\n         scopeId: _scopeId\n       }))\n     } else {"
            },
            {
                "commitId": "0529040c17b8632032a43d142aac88386f6b4a1f",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -78,9 +78,13 @@ export function renderMixin (Vue: Class<Component>) {\n     } = vm.$options\n \n     if (vm._isMounted) {\n-      // clone slot nodes on re-renders\n+      // if the parent didn't update, the slot nodes will be the ones from\n+      // last render. They need to be cloned to ensure \"freshness\" for this render.\n       for (const key in vm.$slots) {\n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+        const slot = vm.$slots[key]\n+        if (slot._rendered) {\n+          vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n+        }\n       }\n     }\n "
            },
            {
                "commitId": "59dbd4a414394a3ce581f9fbd9554da9af9e4b1d",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -49,17 +49,18 @@ export function initRender (vm: Component) {\n   // $attrs & $listeners are exposed for easier HOC creation.\n   // they need to be reactive so that HOCs using them are always updated\n   const parentData = parentVnode && parentVnode.data\n+\n   /* istanbul ignore else */\n   if (process.env.NODE_ENV !== 'production') {\n-    defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners, () => {\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n-    defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners, null, true)\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true)\n   }\n }\n "
            },
            {
                "commitId": "17130611261fdbab70d0e5ab45036e4b612b17fe",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -54,12 +54,12 @@ export function initRender (vm: Component) {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', parentData && parentData.on, () => {\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n-    defineReactive(vm, '$listeners', parentData && parentData.on, null, true)\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners, null, true)\n   }\n }\n "
            },
            {
                "commitId": "e0ca894dfb465106094af440667c15f7eded0a25",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -49,6 +49,7 @@ export function initRender (vm: Component) {\n   // $attrs & $listeners are exposed for easier HOC creation.\n   // they need to be reactive so that HOCs using them are always updated\n   const parentData = parentVnode && parentVnode.data\n+  /* istanbul ignore else */\n   if (process.env.NODE_ENV !== 'production') {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)"
            },
            {
                "commitId": "61187596b9af48f1cb7b1848ad3eccc02ac2509d",
                "additions": 19,
                "deletions": 1,
                "patch": "@@ -8,7 +8,8 @@ import {\n   looseEqual,\n   emptyObject,\n   handleError,\n-  looseIndexOf\n+  looseIndexOf,\n+  defineReactive\n } from '../util/index'\n \n import VNode, {\n@@ -17,6 +18,8 @@ import VNode, {\n   createEmptyVNode\n } from '../vdom/vnode'\n \n+import { isUpdatingChildComponent } from './lifecycle'\n+\n import { createElement } from '../vdom/create-element'\n import { renderList } from './render-helpers/render-list'\n import { renderSlot } from './render-helpers/render-slot'\n@@ -42,6 +45,21 @@ export function initRender (vm: Component) {\n   // normalization is always applied for the public version, used in\n   // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n+\n+  // $attrs & $listeners are exposed for easier HOC creation.\n+  // they need to be reactive so that HOCs using them are always updated\n+  const parentData = parentVnode && parentVnode.data\n+  if (process.env.NODE_ENV !== 'production') {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n+      !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n+    }, true)\n+    defineReactive(vm, '$listeners', parentData && parentData.on, () => {\n+      !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n+    }, true)\n+  } else {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n+    defineReactive(vm, '$listeners', parentData && parentData.on, null, true)\n+  }\n }\n \n export function renderMixin (Vue: Class<Component>) {"
            },
            {
                "commitId": "11614d63b7862b68b11cc45c0891437c62a832d7",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -24,6 +24,7 @@ import { resolveFilter } from './render-helpers/resolve-filter'\n import { checkKeyCodes } from './render-helpers/check-keycodes'\n import { bindObjectProps } from './render-helpers/bind-object-props'\n import { renderStatic, markOnce } from './render-helpers/render-static'\n+import { bindObjectListeners } from './render-helpers/bind-object-listeners'\n import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n \n export function initRender (vm: Component) {\n@@ -121,4 +122,5 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._v = createTextVNode\n   Vue.prototype._e = createEmptyVNode\n   Vue.prototype._u = resolveScopedSlots\n+  Vue.prototype._g = bindObjectListeners\n }"
            },
            {
                "commitId": "0cd6ef321b3168d6c46c7a870c3d2a53fd9d4bde",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -172,6 +172,9 @@ function renderAsyncComponent (node, isRoot, context) {\n   const factory = node.asyncFactory\n \n   const resolve = comp => {\n+    if (comp.__esModule && comp.default) {\n+      comp = comp.default\n+    }\n     const { data, children, tag } = node.asyncMeta\n     const nodeContext = node.asyncMeta.context\n     const resolvedNode: any = createComponent("
            },
            {
                "commitId": "c994e5cf48a912d98c1a302375bb9964dba98113",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -343,7 +343,7 @@ function renderStartingTag (node: VNode, context) {\n }\n \n export function createRenderFunction (\n-  modules: Array<Function>,\n+  modules: Array<(node: VNode) => ?string>,\n   directives: Object,\n   isUnaryTag: Function,\n   cache: any"
            },
            {
                "commitId": "9cf6646f46ef3c13236677e58e72d2c6dd5c8abf",
                "additions": 72,
                "deletions": 14,
                "patch": "@@ -1,13 +1,21 @@\n /* @flow */\n \n+import {\n+  isDef,\n+  isUndef,\n+  isTrue\n+} from 'shared/util'\n+\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n-import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue } from 'shared/util'\n+import {\n+  createComponent,\n+  createComponentInstanceForVnode\n+} from 'core/vdom/create-component'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -39,20 +47,20 @@ function renderNode (node, isRoot, context) {\n     renderStringNode(node, context)\n   } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n-  } else {\n-    if (isDef(node.tag)) {\n-      renderElement(node, isRoot, context)\n-    } else if (isTrue(node.isComment)) {\n-      context.write(\n-        `<!--${node.text}-->`,\n-        context.next\n-      )\n+  } else if (isDef(node.tag)) {\n+    renderElement(node, isRoot, context)\n+  } else if (isTrue(node.isComment)) {\n+    if (isDef(node.asyncFactory)) {\n+      // async component\n+      renderAsyncComponent(node, isRoot, context)\n     } else {\n-      context.write(\n-        node.raw ? node.text : escape(String(node.text)),\n-        context.next\n-      )\n+      context.write(`<!--${node.text}-->`, context.next)\n     }\n+  } else {\n+    context.write(\n+      node.raw ? node.text : escape(String(node.text)),\n+      context.next\n+    )\n   }\n }\n \n@@ -160,6 +168,56 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderAsyncComponent (node, isRoot, context) {\n+  const factory = node.asyncFactory\n+\n+  const resolve = comp => {\n+    const { data, children, tag } = node.asyncMeta\n+    const nodeContext = node.asyncMeta.context\n+    const resolvedNode: any = createComponent(\n+      comp,\n+      data,\n+      nodeContext,\n+      children,\n+      tag\n+    )\n+    if (resolvedNode) {\n+      renderComponent(resolvedNode, isRoot, context)\n+    } else {\n+      reject()\n+    }\n+  }\n+\n+  const reject = err => {\n+    console.error(`[vue-server-renderer] error when rendering async component:\\n`)\n+    if (err) console.error(err.stack)\n+    context.write(`<!--${node.text}-->`, context.next)\n+  }\n+\n+  if (factory.resolved) {\n+    resolve(factory.resolved)\n+    return\n+  }\n+\n+  let res\n+  try {\n+    res = factory(resolve, reject)\n+  } catch (e) {\n+    reject(e)\n+  }\n+  if (res) {\n+    if (typeof res.then === 'function') {\n+      res.then(resolve, reject).catch(reject)\n+    } else {\n+      // new syntax in 2.3\n+      const comp = res.component\n+      if (comp && typeof comp.then === 'function') {\n+        comp.then(resolve, reject).catch(reject)\n+      }\n+    }\n+  }\n+}\n+\n function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {"
            },
            {
                "commitId": "43485fbc5b779e02122c3b7fc64296a2cfee31f6",
                "additions": 27,
                "deletions": 11,
                "patch": "@@ -1,10 +1,10 @@\n /* @flow */\n \n-const { escape } = require('he')\n-\n+import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n-import { compileToFunctions } from 'web/compiler/index'\n+import { ssrCompileToFunctions } from 'web/server/compiler'\n+import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n import { isDef, isUndef, isTrue } from 'shared/util'\n@@ -17,16 +17,13 @@ const warnOnce = msg => {\n   }\n }\n \n-const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n-  const { render, template } = vm.$options\n+  const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      const renderFns = (\n-        compilationCache[template] ||\n-        (compilationCache[template] = compileToFunctions(template))\n-      )\n-      Object.assign(vm.$options, renderFns)\n+      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+        scopeId: _scopeId\n+      }))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${\n@@ -38,7 +35,9 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (isDef(node.componentOptions)) {\n+  if (node.isString) {\n+    renderStringNode(node, context)\n+  } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n@@ -161,6 +160,22 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderStringNode (el, context) {\n+  const { write, next } = context\n+  if (isUndef(el.children) || el.children.length === 0) {\n+    write(el.open + (el.close || ''), next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag: el.close, children\n+    })\n+    write(el.open, next)\n+  }\n+}\n+\n function renderElement (el, isRoot, context) {\n   const { write, next } = context\n \n@@ -289,6 +304,7 @@ export function createRenderFunction (\n       isUnaryTag, modules, directives,\n       cache\n     })\n+    installSSRHelpers(component)\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "55d8bfd6fdda38f31b17cffa07e5ab743c9f2670",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -18,10 +18,12 @@ const warnOnce = msg => {\n }\n \n const normalizeRender = vm => {\n-  const { render, template } = vm.$options\n+  const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      Object.assign(vm.$options, ssrCompileToFunctions(template))\n+      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+        scopeId: _scopeId\n+      }))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${"
            },
            {
                "commitId": "c0b9b6d8300ded5a1ceb7f190ced92e4cd3f5870",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -1,7 +1,6 @@\n /* @flow */\n \n-const { escape } = require('he')\n-\n+import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'"
            },
            {
                "commitId": "9fbca0dc792e94eb775a8f08694a04963dc20e07",
                "additions": 2,
                "deletions": 8,
                "patch": "@@ -5,15 +5,11 @@ const { escape } = require('he')\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n+import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n import { isDef, isUndef, isTrue } from 'shared/util'\n \n-import {\n-  createStringNode,\n-  createStringList\n-} from './optimizing-compiler/runtime-helpers'\n-\n let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n@@ -23,9 +19,6 @@ const warnOnce = msg => {\n }\n \n const normalizeRender = vm => {\n-  vm._ssrEscape = escape\n-  vm._ssrNode = createStringNode\n-  vm._ssrList = createStringList\n   const { render, template } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n@@ -310,6 +303,7 @@ export function createRenderFunction (\n       isUnaryTag, modules, directives,\n       cache\n     })\n+    installSSRHelpers(component)\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "5b58526a525f67ed7a3dffcaf38a51ab2affd357",
                "additions": 13,
                "deletions": 48,
                "patch": "@@ -4,10 +4,15 @@ const { escape } = require('he')\n \n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n-import { compileToFunctions } from 'web/compiler/index'\n+import { ssrCompileToFunctions } from 'web/server/compiler'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue, isObject } from 'shared/util'\n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n+import {\n+  createStringNode,\n+  createStringList\n+} from './optimizing-compiler/runtime-helpers'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -17,16 +22,14 @@ const warnOnce = msg => {\n   }\n }\n \n-const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n+  vm._ssrEscape = escape\n+  vm._ssrNode = createStringNode\n+  vm._ssrList = createStringList\n   const { render, template } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      const renderFns = (\n-        compilationCache[template] ||\n-        (compilationCache[template] = compileToFunctions(template))\n-      )\n-      Object.assign(vm.$options, renderFns)\n+      Object.assign(vm.$options, ssrCompileToFunctions(template))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${\n@@ -145,39 +148,6 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   renderComponentInner(node, isRoot, context)\n }\n \n-function StringNode (open, close, children) {\n-  this.isString = true\n-  this.open = open\n-  this.close = close\n-  this.children = children\n-}\n-\n-function createStringNode (open, close, children) {\n-  return new StringNode(open, close, children)\n-}\n-\n-function createSSRList (val, render) {\n-  let ret = ''\n-  let i, l, keys, key\n-  if (Array.isArray(val) || typeof val === 'string') {\n-    for (i = 0, l = val.length; i < l; i++) {\n-      ret += render(val[i], i)\n-    }\n-  } else if (typeof val === 'number') {\n-    for (i = 0; i < val; i++) {\n-      ret += render(i + 1, i)\n-    }\n-  } else if (isObject(val)) {\n-    keys = Object.keys(val)\n-    ret = new Array(keys.length)\n-    for (i = 0, l = keys.length; i < l; i++) {\n-      key = keys[i]\n-      ret += render(val[key], key, i)\n-    }\n-  }\n-  return ret\n-}\n-\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -187,11 +157,6 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-\n-  child._ssrNode = createStringNode\n-  child._ssrEscape = escape\n-  child._ssrList = createSSRList\n-\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({\n@@ -204,7 +169,7 @@ function renderComponentInner (node, isRoot, context) {\n function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {\n-    write(el.open() + (el.close || ''), next)\n+    write(el.open + (el.close || ''), next)\n   } else {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n@@ -213,7 +178,7 @@ function renderStringNode (el, context) {\n       total: children.length,\n       endTag: el.close, children\n     })\n-    write(el.open(), next)\n+    write(el.open, next)\n   }\n }\n "
            },
            {
                "commitId": "8efa3a2b2245d534d042f109ad7fc9311f47fa27",
                "additions": 29,
                "deletions": 4,
                "patch": "@@ -7,7 +7,7 @@ import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue } from 'shared/util'\n+import { isDef, isUndef, isTrue, isObject } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -152,11 +152,32 @@ function StringNode (open, close, children) {\n   this.children = children\n }\n \n-function createStringNode (id, children) {\n-  const { open, close } = this.$options.stringRenderFns[id]\n+function createStringNode (open, close, children) {\n   return new StringNode(open, close, children)\n }\n \n+function createSSRList (val, render) {\n+  let ret = ''\n+  let i, l, keys, key\n+  if (Array.isArray(val) || typeof val === 'string') {\n+    for (i = 0, l = val.length; i < l; i++) {\n+      ret += render(val[i], i)\n+    }\n+  } else if (typeof val === 'number') {\n+    for (i = 0; i < val; i++) {\n+      ret += render(i + 1, i)\n+    }\n+  } else if (isObject(val)) {\n+    keys = Object.keys(val)\n+    ret = new Array(keys.length)\n+    for (i = 0, l = keys.length; i < l; i++) {\n+      key = keys[i]\n+      ret += render(val[key], key, i)\n+    }\n+  }\n+  return ret\n+}\n+\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -166,7 +187,11 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  child._ss = createStringNode\n+\n+  child._ssrNode = createStringNode\n+  child._ssrEscape = escape\n+  child._ssrList = createSSRList\n+\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({"
            },
            {
                "commitId": "85e24b3b31adc29ccd18b2159e84e4413f327fd9",
                "additions": 16,
                "deletions": 3,
                "patch": "@@ -38,8 +38,8 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (node.isTextNode) {\n-    renderTextNode(node, context)\n+  if (node.isString) {\n+    renderStringNode(node, context)\n   } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n@@ -145,6 +145,18 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   renderComponentInner(node, isRoot, context)\n }\n \n+function StringNode (open, close, children) {\n+  this.isString = true\n+  this.open = open\n+  this.close = close\n+  this.children = children\n+}\n+\n+function createStringNode (id, children) {\n+  const { open, close } = this.$options.stringRenderFns[id]\n+  return new StringNode(open, close, children)\n+}\n+\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -154,6 +166,7 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n+  child._ss = createStringNode\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({\n@@ -163,7 +176,7 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n-function renderTextNode (el, context) {\n+function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {\n     write(el.open() + (el.close || ''), next)"
            },
            {
                "commitId": "da1db7af31b397eab1608217d1f6dee26f753a59",
                "additions": 19,
                "deletions": 1,
                "patch": "@@ -38,7 +38,9 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (isDef(node.componentOptions)) {\n+  if (node.isTextNode) {\n+    renderTextNode(node, context)\n+  } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n@@ -161,6 +163,22 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderTextNode (el, context) {\n+  const { write, next } = context\n+  if (isUndef(el.children) || el.children.length === 0) {\n+    write(el.open() + (el.close || ''), next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag: el.close, children\n+    })\n+    write(el.open(), next)\n+  }\n+}\n+\n function renderElement (el, isRoot, context) {\n   const { write, next } = context\n "
            },
            {
                "commitId": "b5b1ac373a8f4d464454e7770a888fdd178891c4",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -255,8 +255,9 @@ function renderStartingTag (node: VNode, context) {\n   let scopeId\n   const activeInstance = context.activeInstance\n   if (isDef(activeInstance) &&\n-      activeInstance !== node.context &&\n-      isDef(scopeId = activeInstance.$options._scopeId)) {\n+    activeInstance !== node.context &&\n+    isDef(scopeId = activeInstance.$options._scopeId)\n+  ) {\n     markup += ` ${(scopeId: any)}`\n   }\n   while (isDef(node)) {"
            },
            {
                "commitId": "8dc4215994a8d4e4046b428b837863e96275de0e",
                "additions": 19,
                "deletions": 10,
                "patch": "@@ -57,22 +57,26 @@ function renderNode (node, isRoot, context) {\n   }\n }\n \n+function registerComponentForCache (options, write) {\n+  // exposed by vue-loader, need to call this if cache hit because\n+  // component lifecycle hooks will not be called.\n+  const register = options._ssrRegister\n+  if (write.caching && isDef(register)) {\n+    write.componentBuffer[write.componentBuffer.length - 1].add(register)\n+  }\n+  return register\n+}\n+\n function renderComponent (node, isRoot, context) {\n   const { write, next, userContext } = context\n \n   // check cache hit\n   const Ctor = node.componentOptions.Ctor\n   const getKey = Ctor.options.serverCacheKey\n   const name = Ctor.options.name\n-\n-  // exposed by vue-loader, need to call this if cache hit because\n-  // component lifecycle hooks will not be called.\n-  const registerComponent = Ctor.options._ssrRegister\n-  if (write.caching && isDef(registerComponent)) {\n-    write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n-  }\n-\n   const cache = context.cache\n+  const registerComponent = registerComponentForCache(Ctor.options, write)\n+\n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n     const key = name + '::' + getKey(node.componentOptions.propsData)\n     const { has, get } = context\n@@ -147,7 +151,6 @@ function renderComponentInner (node, isRoot, context) {\n     node,\n     context.activeInstance\n   )\n-  node.ssrContext = null\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node\n@@ -159,14 +162,20 @@ function renderComponentInner (node, isRoot, context) {\n }\n \n function renderElement (el, isRoot, context) {\n+  const { write, next } = context\n+\n   if (isTrue(isRoot)) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n     el.data.attrs[SSR_ATTR] = 'true'\n   }\n+\n+  if (el.functionalOptions) {\n+    registerComponentForCache(el.functionalOptions, write)\n+  }\n+\n   const startTag = renderStartingTag(el, context)\n   const endTag = `</${el.tag}>`\n-  const { write, next } = context\n   if (context.isUnaryTag(el.tag)) {\n     write(startTag, next)\n   } else if (isUndef(el.children) || el.children.length === 0) {"
            },
            {
                "commitId": "228f0f8f3b08312d926f99b3d57757fee40e4870",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -77,9 +77,9 @@ function renderComponent (node, isRoot, context) {\n     const key = name + '::' + getKey(node.componentOptions.propsData)\n     const { has, get } = context\n     if (isDef(has)) {\n-      (has: any)(key, hit => {\n+      has(key, hit => {\n         if (hit === true && isDef(get)) {\n-          (get: any)(key, res => {\n+          get(key, res => {\n             if (isDef(registerComponent)) {\n               registerComponent(userContext)\n             }\n@@ -91,7 +91,7 @@ function renderComponent (node, isRoot, context) {\n         }\n       })\n     } else if (isDef(get)) {\n-      (get: any)(key, res => {\n+      get(key, res => {\n         if (isDef(res)) {\n           if (isDef(registerComponent)) {\n             registerComponent(userContext)"
            },
            {
                "commitId": "9ca0c35a3fadd1f97c9b5c68b7b51d4f96b40a72",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -141,10 +141,13 @@ function renderComponentWithCache (node, isRoot, key, context) {\n \n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n+  // expose userContext on vnode\n+  node.ssrContext = context.userContext\n   const child = context.activeInstance = createComponentInstanceForVnode(\n     node,\n     context.activeInstance\n   )\n+  node.ssrContext = null\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node"
            },
            {
                "commitId": "914879f1ce61a67fb7b9f367e6caaaf002c18fe3",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n-import { escape } from 'he'\n+const { escape } = require('he')\n+\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'"
            },
            {
                "commitId": "3b04547c0c4fc56d786f5d03446c81b2d7501297",
                "additions": 89,
                "deletions": 74,
                "patch": "@@ -37,89 +37,88 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  const { write, next, userContext } = context\n   if (isDef(node.componentOptions)) {\n-    // check cache hit\n-    const Ctor = node.componentOptions.Ctor\n-    const getKey = Ctor.options.serverCacheKey\n-    const name = Ctor.options.name\n-\n-    // exposed by vue-loader, need to call this if cache hit because\n-    // component lifecycle hooks will not be called.\n-    const registerComponent = Ctor.options._ssrRegister\n-    if (write.caching && isDef(registerComponent)) {\n-      write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n-    }\n-\n-    const cache = context.cache\n-    if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-      const key = name + '::' + getKey(node.componentOptions.propsData)\n-      const { has, get } = context\n-      if (isDef(has)) {\n-        (has: any)(key, hit => {\n-          if (hit === true && isDef(get)) {\n-            (get: any)(key, res => {\n-              registerComponent && registerComponent(userContext)\n-              res.components.forEach(register => register(userContext))\n-              write(res.html, next)\n-            })\n-          } else {\n-            renderComponentWithCache(node, isRoot, key, context)\n-          }\n-        })\n-      } else if (isDef(get)) {\n-        (get: any)(key, res => {\n-          if (isDef(res)) {\n-            registerComponent && registerComponent(userContext)\n-            res.components.forEach(register => register(userContext))\n-            write(res.html, next)\n-          } else {\n-            renderComponentWithCache(node, isRoot, key, context)\n-          }\n-        })\n-      }\n-    } else {\n-      if (isDef(getKey) && isUndef(cache)) {\n-        warnOnce(\n-          `[vue-server-renderer] Component ${\n-            Ctor.options.name || '(anonymous)'\n-          } implemented serverCacheKey, ` +\n-          'but no cache was provided to the renderer.'\n-        )\n-      }\n-      if (isDef(getKey) && isUndef(name)) {\n-        warnOnce(\n-          `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n-          `must also define a unique \"name\" option.`\n-        )\n-      }\n-      renderComponent(node, isRoot, context)\n-    }\n+    renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n       renderElement(node, isRoot, context)\n     } else if (isTrue(node.isComment)) {\n-      write(`<!--${node.text}-->`, next)\n+      context.write(\n+        `<!--${node.text}-->`,\n+        context.next\n+      )\n     } else {\n-      write(node.raw ? node.text : escape(String(node.text)), next)\n+      context.write(\n+        node.raw ? node.text : escape(String(node.text)),\n+        context.next\n+      )\n     }\n   }\n }\n \n function renderComponent (node, isRoot, context) {\n-  const prevActive = context.activeInstance\n-  const child = context.activeInstance = createComponentInstanceForVnode(\n-    node,\n-    context.activeInstance\n-  )\n-  normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+  const { write, next, userContext } = context\n+\n+  // check cache hit\n+  const Ctor = node.componentOptions.Ctor\n+  const getKey = Ctor.options.serverCacheKey\n+  const name = Ctor.options.name\n+\n+  // exposed by vue-loader, need to call this if cache hit because\n+  // component lifecycle hooks will not be called.\n+  const registerComponent = Ctor.options._ssrRegister\n+  if (write.caching && isDef(registerComponent)) {\n+    write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n+  }\n+\n+  const cache = context.cache\n+  if (isDef(getKey) && isDef(cache) && isDef(name)) {\n+    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const { has, get } = context\n+    if (isDef(has)) {\n+      (has: any)(key, hit => {\n+        if (hit === true && isDef(get)) {\n+          (get: any)(key, res => {\n+            if (isDef(registerComponent)) {\n+              registerComponent(userContext)\n+            }\n+            res.components.forEach(register => register(userContext))\n+            write(res.html, next)\n+          })\n+        } else {\n+          renderComponentWithCache(node, isRoot, key, context)\n+        }\n+      })\n+    } else if (isDef(get)) {\n+      (get: any)(key, res => {\n+        if (isDef(res)) {\n+          if (isDef(registerComponent)) {\n+            registerComponent(userContext)\n+          }\n+          res.components.forEach(register => register(userContext))\n+          write(res.html, next)\n+        } else {\n+          renderComponentWithCache(node, isRoot, key, context)\n+        }\n+      })\n+    }\n+  } else {\n+    if (isDef(getKey) && isUndef(cache)) {\n+      warnOnce(\n+        `[vue-server-renderer] Component ${\n+          Ctor.options.name || '(anonymous)'\n+        } implemented serverCacheKey, ` +\n+        'but no cache was provided to the renderer.'\n+      )\n+    }\n+    if (isDef(getKey) && isUndef(name)) {\n+      warnOnce(\n+        `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+        `must also define a unique \"name\" option.`\n+      )\n+    }\n+    renderComponentInner(node, isRoot, context)\n+  }\n }\n \n function renderComponentWithCache (node, isRoot, key, context) {\n@@ -136,7 +135,23 @@ function renderComponentWithCache (node, isRoot, key, context) {\n     bufferIndex,\n     componentBuffer\n   })\n-  renderComponent(node, isRoot, context)\n+  renderComponentInner(node, isRoot, context)\n+}\n+\n+function renderComponentInner (node, isRoot, context) {\n+  const prevActive = context.activeInstance\n+  const child = context.activeInstance = createComponentInstanceForVnode(\n+    node,\n+    context.activeInstance\n+  )\n+  normalizeRender(child)\n+  const childNode = child._render()\n+  childNode.parent = node\n+  context.renderStates.push({\n+    type: 'Component',\n+    prevActive\n+  })\n+  renderNode(childNode, isRoot, context)\n }\n \n function renderElement (el, isRoot, context) {\n@@ -166,7 +181,7 @@ function renderElement (el, isRoot, context) {\n \n function hasAncestorData (node: VNode) {\n   const parentNode = node.parent\n-  return parentNode && (parentNode.data || hasAncestorData(parentNode))\n+  return isDef(parentNode) && (isDef(parentNode.data) || hasAncestorData(parentNode))\n }\n \n function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {"
            },
            {
                "commitId": "4e40666d53b13c292472dfd0c678c707ad39afd9",
                "additions": 25,
                "deletions": 8,
                "patch": "@@ -37,15 +37,20 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  const { write, next } = context\n+  const { write, next, userContext } = context\n   if (isDef(node.componentOptions)) {\n     // check cache hit\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+\n     // exposed by vue-loader, need to call this if cache hit because\n     // component lifecycle hooks will not be called.\n-    const injectStyles = Ctor.options._injectStyles\n+    const registerComponent = Ctor.options._ssrRegister\n+    if (write.caching && isDef(registerComponent)) {\n+      write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n+    }\n+\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n@@ -54,8 +59,9 @@ function renderNode (node, isRoot, context) {\n         (has: any)(key, hit => {\n           if (hit === true && isDef(get)) {\n             (get: any)(key, res => {\n-              injectStyles && injectStyles.call({})\n-              write(res, next)\n+              registerComponent && registerComponent(userContext)\n+              res.components.forEach(register => register(userContext))\n+              write(res.html, next)\n             })\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n@@ -64,8 +70,9 @@ function renderNode (node, isRoot, context) {\n       } else if (isDef(get)) {\n         (get: any)(key, res => {\n           if (isDef(res)) {\n-            injectStyles && injectStyles.call({})\n-            write(res, next)\n+            registerComponent && registerComponent(userContext)\n+            res.components.forEach(register => register(userContext))\n+            write(res.html, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n@@ -101,7 +108,10 @@ function renderNode (node, isRoot, context) {\n \n function renderComponent (node, isRoot, context) {\n   const prevActive = context.activeInstance\n-  const child = context.activeInstance = createComponentInstanceForVnode(node, context.activeInstance)\n+  const child = context.activeInstance = createComponentInstanceForVnode(\n+    node,\n+    context.activeInstance\n+  )\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node\n@@ -117,9 +127,14 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   write.caching = true\n   const buffer = write.cacheBuffer\n   const bufferIndex = buffer.push('') - 1\n+  const componentBuffer = write.componentBuffer\n+  componentBuffer.push(new Set())\n   context.renderStates.push({\n     type: 'ComponentWithCache',\n-    buffer, bufferIndex, key\n+    key,\n+    buffer,\n+    bufferIndex,\n+    componentBuffer\n   })\n   renderComponent(node, isRoot, context)\n }\n@@ -234,11 +249,13 @@ export function createRenderFunction (\n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n+    userContext: ?Object,\n     done: Function\n   ) {\n     warned = Object.create(null)\n     const context = new RenderContext({\n       activeInstance: component,\n+      userContext,\n       write, done, renderNode,\n       isUnaryTag, modules, directives,\n       cache"
            },
            {
                "commitId": "37fb98827141d95dc1f60c9ea0519d6c49e61fbc",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -43,6 +43,8 @@ function renderNode (node, isRoot, context) {\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+    // exposed by vue-loader, need to call this if cache hit because\n+    // component lifecycle hooks will not be called.\n     const injectStyles = Ctor.options._injectStyles\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {"
            },
            {
                "commitId": "5ec2a7b82cf1819b5e465c4c91f303ca75561e71",
                "additions": 6,
                "deletions": 1,
                "patch": "@@ -43,21 +43,26 @@ function renderNode (node, isRoot, context) {\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+    const injectStyles = Ctor.options._injectStyles\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n       const { has, get } = context\n       if (isDef(has)) {\n         (has: any)(key, hit => {\n           if (hit === true && isDef(get)) {\n-            (get: any)(key, res => write(res, next))\n+            (get: any)(key, res => {\n+              injectStyles && injectStyles.call({})\n+              write(res, next)\n+            })\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n       } else if (isDef(get)) {\n         (get: any)(key, res => {\n           if (isDef(res)) {\n+            injectStyles && injectStyles.call({})\n             write(res, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)"
            },
            {
                "commitId": "5213ec7bbf13928a389e566e99222fa1e77d2161",
                "additions": 26,
                "deletions": 24,
                "patch": "@@ -6,6 +6,8 @@ import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n@@ -17,7 +19,7 @@ const warnOnce = msg => {\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n-  if (!render) {\n+  if (isUndef(render)) {\n     if (template) {\n       const renderFns = (\n         compilationCache[template] ||\n@@ -36,42 +38,42 @@ const normalizeRender = vm => {\n \n function renderNode (node, isRoot, context) {\n   const { write, next } = context\n-  if (node.componentOptions) {\n+  if (isDef(node.componentOptions)) {\n     // check cache hit\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n     const cache = context.cache\n-    if (getKey && cache && name) {\n+    if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n       const { has, get } = context\n-      if (has) {\n-        has(key, hit => {\n-          if (hit && get) {\n-            get(key, res => write(res, next))\n+      if (isDef(has)) {\n+        (has: any)(key, hit => {\n+          if (hit === true && isDef(get)) {\n+            (get: any)(key, res => write(res, next))\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n-      } else if (get) {\n-        get(key, res => {\n-          if (res) {\n+      } else if (isDef(get)) {\n+        (get: any)(key, res => {\n+          if (isDef(res)) {\n             write(res, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n       }\n     } else {\n-      if (getKey && !cache) {\n+      if (isDef(getKey) && isUndef(cache)) {\n         warnOnce(\n           `[vue-server-renderer] Component ${\n             Ctor.options.name || '(anonymous)'\n           } implemented serverCacheKey, ` +\n           'but no cache was provided to the renderer.'\n         )\n       }\n-      if (getKey && !name) {\n+      if (isDef(getKey) && isUndef(name)) {\n         warnOnce(\n           `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n           `must also define a unique \"name\" option.`\n@@ -80,9 +82,9 @@ function renderNode (node, isRoot, context) {\n       renderComponent(node, isRoot, context)\n     }\n   } else {\n-    if (node.tag) {\n+    if (isDef(node.tag)) {\n       renderElement(node, isRoot, context)\n-    } else if (node.isComment) {\n+    } else if (isTrue(node.isComment)) {\n       write(`<!--${node.text}-->`, next)\n     } else {\n       write(node.raw ? node.text : escape(String(node.text)), next)\n@@ -116,7 +118,7 @@ function renderComponentWithCache (node, isRoot, key, context) {\n }\n \n function renderElement (el, isRoot, context) {\n-  if (isRoot) {\n+  if (isTrue(isRoot)) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n     el.data.attrs[SSR_ATTR] = 'true'\n@@ -126,7 +128,7 @@ function renderElement (el, isRoot, context) {\n   const { write, next } = context\n   if (context.isUnaryTag(el.tag)) {\n     write(startTag, next)\n-  } else if (!el.children || !el.children.length) {\n+  } else if (isUndef(el.children) || el.children.length === 0) {\n     write(startTag + endTag, next)\n   } else {\n     const children: Array<VNode> = el.children\n@@ -149,7 +151,7 @@ function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {\n   let dir: VNodeDirective\n   let tmp\n \n-  while (node) {\n+  while (isDef(node)) {\n     if (node.data && node.data.directives) {\n       tmp = node.data.directives.find(dir => dir.name === 'show')\n       if (tmp) {\n@@ -167,10 +169,10 @@ function renderStartingTag (node: VNode, context) {\n \n   // construct synthetic data for module processing\n   // because modules like style also produce code by parent VNode data\n-  if (!node.data && hasAncestorData(node)) {\n+  if (isUndef(node.data) && hasAncestorData(node)) {\n     node.data = {}\n   }\n-  if (node.data) {\n+  if (isDef(node.data)) {\n     // check directives\n     const dirs = node.data.directives\n     if (dirs) {\n@@ -202,13 +204,13 @@ function renderStartingTag (node: VNode, context) {\n   // attach scoped CSS ID\n   let scopeId\n   const activeInstance = context.activeInstance\n-  if (activeInstance &&\n+  if (isDef(activeInstance) &&\n       activeInstance !== node.context &&\n-      (scopeId = activeInstance.$options._scopeId)) {\n-    markup += ` ${scopeId}`\n+      isDef(scopeId = activeInstance.$options._scopeId)) {\n+    markup += ` ${(scopeId: any)}`\n   }\n-  while (node) {\n-    if ((scopeId = node.context.$options._scopeId)) {\n+  while (isDef(node)) {\n+    if (isDef(scopeId = node.context.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n     node = node.parent"
            },
            {
                "commitId": "69e62f0a74b6a6baab1d66dd0433cdfb410bdae7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import { escape } from 'he'\n-import { SSR_ATTR } from 'shared/util'\n+import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'"
            },
            {
                "commitId": "e0a7c1ac68fbfa5b0d7714db549569d5cefa2bd9",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n import { escape } from 'he'\n+import { SSR_ATTR } from 'shared/util'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n@@ -118,7 +119,7 @@ function renderElement (el, isRoot, context) {\n   if (isRoot) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n-    el.data.attrs['server-rendered'] = 'true'\n+    el.data.attrs[SSR_ATTR] = 'true'\n   }\n   const startTag = renderStartingTag(el, context)\n   const endTag = `</${el.tag}>`"
            },
            {
                "commitId": "e733e5cee8585fdf4a0c0e5e77e7816befa24ad4",
                "additions": 26,
                "deletions": 2,
                "patch": "@@ -144,6 +144,22 @@ function hasAncestorData (node: VNode) {\n   return parentNode && (parentNode.data || hasAncestorData(parentNode))\n }\n \n+function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {\n+  let dir: VNodeDirective\n+  let tmp\n+\n+  while (node) {\n+    if (node.data && node.data.directives) {\n+      tmp = node.data.directives.find(dir => dir.name === 'show')\n+      if (tmp) {\n+        dir = tmp\n+      }\n+    }\n+    node = node.parent\n+  }\n+  return dir\n+}\n+\n function renderStartingTag (node: VNode, context) {\n   let markup = `<${node.tag}`\n   const { directives, modules } = context\n@@ -158,14 +174,22 @@ function renderStartingTag (node: VNode, context) {\n     const dirs = node.data.directives\n     if (dirs) {\n       for (let i = 0; i < dirs.length; i++) {\n-        const dirRenderer = directives[dirs[i].name]\n-        if (dirRenderer) {\n+        const name = dirs[i].name\n+        const dirRenderer = directives[name]\n+        if (dirRenderer && name !== 'show') {\n           // directives mutate the node's data\n           // which then gets rendered by modules\n           dirRenderer(node, dirs[i])\n         }\n       }\n     }\n+\n+    // v-show directive needs to be merged from parent to child\n+    const vshowDirectiveInfo = getVShowDirectiveInfo(node)\n+    if (vshowDirectiveInfo) {\n+      directives.show(node, vshowDirectiveInfo)\n+    }\n+\n     // apply other modules\n     for (let i = 0; i < modules.length; i++) {\n       const res = modules[i](node)"
            },
            {
                "commitId": "29f6902d1959c35eb38ef110bee6c13124903442",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -80,6 +80,7 @@ export function renderMixin (Vue: Class<Component>) {\n       handleError(e, vm, `render function`)\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n+      /* istanbul ignore else */\n       if (process.env.NODE_ENV !== 'production') {\n         vnode = vm.$options.renderError\n           ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)"
            },
            {
                "commitId": "1861ee9570730149e01f225323c3a52392e5900f",
                "additions": 9,
                "deletions": 2,
                "patch": "@@ -78,8 +78,15 @@ export function renderMixin (Vue: Class<Component>) {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n       handleError(e, vm, `render function`)\n-      // return previous vnode to prevent render error causing blank component\n-      vnode = vm._vnode\n+      // return error render result,\n+      // or previous vnode to prevent render error causing blank component\n+      if (process.env.NODE_ENV !== 'production') {\n+        vnode = vm.$options.renderError\n+          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+          : vm._vnode\n+      } else {\n+        vnode = vm._vnode\n+      }\n     }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {"
            },
            {
                "commitId": "3c0cdb553590db84a3bdb2a299947e7424e23464",
                "additions": 3,
                "deletions": 13,
                "patch": "@@ -1,16 +1,14 @@\n /* @flow */\n \n-import config from '../config'\n-\n import {\n   warn,\n   nextTick,\n   toNumber,\n   _toString,\n   looseEqual,\n   emptyObject,\n-  looseIndexOf,\n-  formatComponentName\n+  handleError,\n+  looseIndexOf\n } from '../util/index'\n \n import VNode, {\n@@ -79,15 +77,7 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      /* istanbul ignore else */\n-      if (config.errorHandler) {\n-        config.errorHandler.call(null, e, vm)\n-      } else {\n-        if (process.env.NODE_ENV !== 'production') {\n-          warn(`Error when rendering ${formatComponentName(vm)}:`)\n-        }\n-        throw e\n-      }\n+      handleError(e, vm, `render function`)\n       // return previous vnode to prevent render error causing blank component\n       vnode = vm._vnode\n     }"
            },
            {
                "commitId": "e7083d09f1eec1d8853b65720f1a8c6e0f22836e",
                "additions": 5,
                "deletions": 5,
                "patch": "@@ -8,6 +8,7 @@ import {\n   toNumber,\n   _toString,\n   looseEqual,\n+  emptyObject,\n   looseIndexOf,\n   formatComponentName\n } from '../util/index'\n@@ -21,11 +22,11 @@ import VNode, {\n import { createElement } from '../vdom/create-element'\n import { renderList } from './render-helpers/render-list'\n import { renderSlot } from './render-helpers/render-slot'\n-import { resolveSlots } from './render-helpers/resolve-slots'\n import { resolveFilter } from './render-helpers/resolve-filter'\n import { checkKeyCodes } from './render-helpers/check-keycodes'\n import { bindObjectProps } from './render-helpers/bind-object-props'\n import { renderStatic, markOnce } from './render-helpers/render-static'\n+import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n \n export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n@@ -34,7 +35,7 @@ export function initRender (vm: Component) {\n   const parentVnode = vm.$options._parentVnode\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n-  vm.$scopedSlots = {}\n+  vm.$scopedSlots = emptyObject\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n   // args order: tag, data, children, normalizationType, alwaysNormalize\n@@ -65,9 +66,7 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n-    if (_parentVnode && _parentVnode.data.scopedSlots) {\n-      vm.$scopedSlots = _parentVnode.data.scopedSlots\n-    }\n+    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n \n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n@@ -124,4 +123,5 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._b = bindObjectProps\n   Vue.prototype._v = createTextVNode\n   Vue.prototype._e = createEmptyVNode\n+  Vue.prototype._u = resolveScopedSlots\n }"
            },
            {
                "commitId": "b1e66b489144ec31ad3d4f3298e3809f00d6c4e6",
                "additions": 27,
                "deletions": 211,
                "patch": "@@ -1,28 +1,31 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, {\n-  cloneVNode,\n-  cloneVNodes,\n-  createTextVNode,\n-  createEmptyVNode\n-} from '../vdom/vnode'\n+\n import {\n   warn,\n-  extend,\n-  identity,\n-  isObject,\n-  toObject,\n   nextTick,\n   toNumber,\n   _toString,\n   looseEqual,\n   looseIndexOf,\n-  resolveAsset,\n   formatComponentName\n } from '../util/index'\n \n+import VNode, {\n+  cloneVNodes,\n+  createTextVNode,\n+  createEmptyVNode\n+} from '../vdom/vnode'\n+\n import { createElement } from '../vdom/create-element'\n+import { renderList } from './render-helpers/render-list'\n+import { renderSlot } from './render-helpers/render-slot'\n+import { resolveSlots } from './render-helpers/resolve-slots'\n+import { resolveFilter } from './render-helpers/resolve-filter'\n+import { checkKeyCodes } from './render-helpers/check-keycodes'\n+import { bindObjectProps } from './render-helpers/bind-object-props'\n+import { renderStatic, markOnce } from './render-helpers/render-static'\n \n export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n@@ -105,207 +108,20 @@ export function renderMixin (Vue: Class<Component>) {\n     return vnode\n   }\n \n-  // toString for mustaches\n-  Vue.prototype._s = _toString\n-  // convert text to vnode\n-  Vue.prototype._v = createTextVNode\n-  // number conversion\n+  // internal render helpers.\n+  // these are exposed on the instance prototype to reduce generated render\n+  // code size.\n+  Vue.prototype._o = markOnce\n   Vue.prototype._n = toNumber\n-  // empty vnode\n-  Vue.prototype._e = createEmptyVNode\n-  // loose equal\n+  Vue.prototype._s = _toString\n+  Vue.prototype._l = renderList\n+  Vue.prototype._t = renderSlot\n   Vue.prototype._q = looseEqual\n-  // loose indexOf\n   Vue.prototype._i = looseIndexOf\n-\n-  // render static tree by index\n-  Vue.prototype._m = function renderStatic (\n-    index: number,\n-    isInFor?: boolean\n-  ): VNode | Array<VNode> {\n-    let tree = this._staticTrees[index]\n-    // if has already-rendered static tree and not inside v-for,\n-    // we can reuse the same tree by doing a shallow clone.\n-    if (tree && !isInFor) {\n-      return Array.isArray(tree)\n-        ? cloneVNodes(tree)\n-        : cloneVNode(tree)\n-    }\n-    // otherwise, render a fresh tree.\n-    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n-    markStatic(tree, `__static__${index}`, false)\n-    return tree\n-  }\n-\n-  // mark node as static (v-once)\n-  Vue.prototype._o = function markOnce (\n-    tree: VNode | Array<VNode>,\n-    index: number,\n-    key: string\n-  ) {\n-    markStatic(tree, `__once__${index}${key ? `_${key}` : ``}`, true)\n-    return tree\n-  }\n-\n-  function markStatic (tree, key, isOnce) {\n-    if (Array.isArray(tree)) {\n-      for (let i = 0; i < tree.length; i++) {\n-        if (tree[i] && typeof tree[i] !== 'string') {\n-          markStaticNode(tree[i], `${key}_${i}`, isOnce)\n-        }\n-      }\n-    } else {\n-      markStaticNode(tree, key, isOnce)\n-    }\n-  }\n-\n-  function markStaticNode (node, key, isOnce) {\n-    node.isStatic = true\n-    node.key = key\n-    node.isOnce = isOnce\n-  }\n-\n-  // filter resolution helper\n-  Vue.prototype._f = function resolveFilter (id) {\n-    return resolveAsset(this.$options, 'filters', id, true) || identity\n-  }\n-\n-  // render v-for\n-  Vue.prototype._l = function renderList (\n-    val: any,\n-    render: () => VNode\n-  ): ?Array<VNode> {\n-    let ret: ?Array<VNode>, i, l, keys, key\n-    if (Array.isArray(val) || typeof val === 'string') {\n-      ret = new Array(val.length)\n-      for (i = 0, l = val.length; i < l; i++) {\n-        ret[i] = render(val[i], i)\n-      }\n-    } else if (typeof val === 'number') {\n-      ret = new Array(val)\n-      for (i = 0; i < val; i++) {\n-        ret[i] = render(i + 1, i)\n-      }\n-    } else if (isObject(val)) {\n-      keys = Object.keys(val)\n-      ret = new Array(keys.length)\n-      for (i = 0, l = keys.length; i < l; i++) {\n-        key = keys[i]\n-        ret[i] = render(val[key], key, i)\n-      }\n-    }\n-    return ret\n-  }\n-\n-  // renderSlot\n-  Vue.prototype._t = function (\n-    name: string,\n-    fallback: ?Array<VNode>,\n-    props: ?Object,\n-    bindObject: ?Object\n-  ): ?Array<VNode> {\n-    const scopedSlotFn = this.$scopedSlots[name]\n-    if (scopedSlotFn) { // scoped slot\n-      props = props || {}\n-      if (bindObject) {\n-        extend(props, bindObject)\n-      }\n-      return scopedSlotFn(props) || fallback\n-    } else {\n-      const slotNodes = this.$slots[name]\n-      // warn duplicate slot usage\n-      if (slotNodes && process.env.NODE_ENV !== 'production') {\n-        slotNodes._rendered && warn(\n-          `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n-          `- this will likely cause render errors.`,\n-          this\n-        )\n-        slotNodes._rendered = true\n-      }\n-      return slotNodes || fallback\n-    }\n-  }\n-\n-  // apply v-bind object\n-  Vue.prototype._b = function bindProps (\n-    data: any,\n-    tag: string,\n-    value: any,\n-    asProp?: boolean\n-  ): VNodeData {\n-    if (value) {\n-      if (!isObject(value)) {\n-        process.env.NODE_ENV !== 'production' && warn(\n-          'v-bind without argument expects an Object or Array value',\n-          this\n-        )\n-      } else {\n-        if (Array.isArray(value)) {\n-          value = toObject(value)\n-        }\n-        for (const key in value) {\n-          if (key === 'class' || key === 'style') {\n-            data[key] = value[key]\n-          } else {\n-            const type = data.attrs && data.attrs.type\n-            const hash = asProp || config.mustUseProp(tag, type, key)\n-              ? data.domProps || (data.domProps = {})\n-              : data.attrs || (data.attrs = {})\n-            hash[key] = value[key]\n-          }\n-        }\n-      }\n-    }\n-    return data\n-  }\n-\n-  // check v-on keyCodes\n-  Vue.prototype._k = function checkKeyCodes (\n-    eventKeyCode: number,\n-    key: string,\n-    builtInAlias: number | Array<number> | void\n-  ): boolean {\n-    const keyCodes = config.keyCodes[key] || builtInAlias\n-    if (Array.isArray(keyCodes)) {\n-      return keyCodes.indexOf(eventKeyCode) === -1\n-    } else {\n-      return keyCodes !== eventKeyCode\n-    }\n-  }\n-}\n-\n-export function resolveSlots (\n-  children: ?Array<VNode>,\n-  context: ?Component\n-): { [key: string]: Array<VNode> } {\n-  const slots = {}\n-  if (!children) {\n-    return slots\n-  }\n-  const defaultSlot = []\n-  let name, child\n-  for (let i = 0, l = children.length; i < l; i++) {\n-    child = children[i]\n-    // named slots should only be respected if the vnode was rendered in the\n-    // same context.\n-    if ((child.context === context || child.functionalContext === context) &&\n-        child.data && (name = child.data.slot)) {\n-      const slot = (slots[name] || (slots[name] = []))\n-      if (child.tag === 'template') {\n-        slot.push.apply(slot, child.children)\n-      } else {\n-        slot.push(child)\n-      }\n-    } else {\n-      defaultSlot.push(child)\n-    }\n-  }\n-  // ignore single whitespace\n-  if (defaultSlot.length && !(\n-    defaultSlot.length === 1 &&\n-    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n-  )) {\n-    slots.default = defaultSlot\n-  }\n-  return slots\n+  Vue.prototype._m = renderStatic\n+  Vue.prototype._f = resolveFilter\n+  Vue.prototype._k = checkKeyCodes\n+  Vue.prototype._b = bindObjectProps\n+  Vue.prototype._v = createTextVNode\n+  Vue.prototype._e = createEmptyVNode\n }"
            },
            {
                "commitId": "05b070fd41b61a953388a34ff3374f301a9f7540",
                "additions": 5,
                "deletions": 68,
                "patch": "@@ -1,9 +1,9 @@\n /* @flow */\n \n import { escape } from 'he'\n+import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n-import { noop } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -13,17 +13,6 @@ const warnOnce = msg => {\n   }\n }\n \n-const normalizeAsync = (cache, method) => {\n-  const fn = cache[method]\n-  if (!fn) {\n-    return\n-  } else if (fn.length > 1) {\n-    return (key, cb) => fn.call(cache, key, cb)\n-  } else {\n-    return (key, cb) => cb(fn.call(cache, key))\n-  }\n-}\n-\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n@@ -202,76 +191,24 @@ function renderStartingTag (node: VNode, context) {\n   return markup + '>'\n }\n \n-const nextFactory = context => function next () {\n-  const lastState = context.renderStates.pop()\n-  if (!lastState) {\n-    context.done()\n-    // cleanup context, avoid leakage\n-    context = (null: any)\n-    return\n-  }\n-  switch (lastState.type) {\n-    case 'Component':\n-      context.activeInstance = lastState.prevActive\n-      next()\n-      break\n-    case 'Element':\n-      const { children, total } = lastState\n-      const rendered = lastState.rendered++\n-      if (rendered < total) {\n-        context.renderStates.push(lastState)\n-        renderNode(children[rendered], false, context)\n-      } else {\n-        context.write(lastState.endTag, next)\n-      }\n-      break\n-    case 'ComponentWithCache':\n-      const { buffer, bufferIndex, key } = lastState\n-      const result = buffer[bufferIndex]\n-      context.cache.set(key, result)\n-      if (bufferIndex === 0) {\n-        // this is a top-level cached component,\n-        // exit caching mode.\n-        context.write.caching = false\n-      } else {\n-        // parent component is also being cached,\n-        // merge self into parent's result\n-        buffer[bufferIndex - 1] += result\n-      }\n-      buffer.length = bufferIndex\n-      next()\n-      break\n-  }\n-}\n-\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n   isUnaryTag: Function,\n   cache: any\n ) {\n-  if (cache && (!cache.get || !cache.set)) {\n-    throw new Error('renderer cache must implement at least get & set.')\n-  }\n-\n-  const get = cache && normalizeAsync(cache, 'get')\n-  const has = cache && normalizeAsync(cache, 'has')\n-\n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n     warned = Object.create(null)\n-    const context = {\n+    const context = new RenderContext({\n       activeInstance: component,\n-      renderStates: [],\n-      next: noop, // for flow\n-      write, done,\n+      write, done, renderNode,\n       isUnaryTag, modules, directives,\n-      cache, get, has\n-    }\n-    context.next = nextFactory(context)\n+      cache\n+    })\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "08bd81f8c0bd39816b5b509c5132a12188b412d7",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -247,7 +247,8 @@ export function renderMixin (Vue: Class<Component>) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n           } else {\n-            const hash = asProp || config.mustUseProp(tag, key)\n+            const type = data.attrs && data.attrs.type\n+            const hash = asProp || config.mustUseProp(tag, type, key)\n               ? data.domProps || (data.domProps = {})\n               : data.attrs || (data.attrs = {})\n             hash[key] = value[key]"
            },
            {
                "commitId": "7131bc48155fb5224f4d6f0fb1c4b7eed6a79db4",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -40,9 +40,6 @@ export function initRender (vm: Component) {\n   // normalization is always applied for the public version, used in\n   // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n-  if (vm.$options.el) {\n-    vm.$mount(vm.$options.el)\n-  }\n }\n \n export function renderMixin (Vue: Class<Component>) {"
            },
            {
                "commitId": "b60182d996ed1e976ce1697a3017cb702ddc0920",
                "additions": 0,
                "deletions": 21,
                "patch": "@@ -262,7 +262,6 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n-    checkBuild(component)\n     warned = Object.create(null)\n     const context = {\n       activeInstance: component,\n@@ -277,23 +276,3 @@ export function createRenderFunction (\n     renderNode(component._render(), true, context)\n   }\n }\n-\n-function checkBuild (component) {\n-  let Vue: any = component.constructor\n-  while (Vue.super) {\n-    Vue = Vue.super\n-  }\n-  if (Vue.compile && Vue.config.devtools !== false) {\n-    console.error(\n-      red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n-      `server-side rendering. It is recommended to use the CommonJS build ` +\n-      `(vue/dist/vue.common.js) instead so that the code can run in ` +\n-      `production mode by setting NODE_ENV=production. The server renderer ` +\n-      `supports the template option regardless of what build you are using.\\n`)\n-    )\n-  }\n-}\n-\n-function red (str) {\n-  return '\\u001B[1m\\u001B[31m' + str + '\\u001B[39m\\u001B[22m'\n-}"
            },
            {
                "commitId": "0eb8cdc7f7cff484ebe0b12a781a4ab020f82b4a",
                "additions": 8,
                "deletions": 2,
                "patch": "@@ -9,6 +9,7 @@ import VNode, {\n } from '../vdom/vnode'\n import {\n   warn,\n+  extend,\n   identity,\n   isObject,\n   toObject,\n@@ -203,11 +204,16 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._t = function (\n     name: string,\n     fallback: ?Array<VNode>,\n-    props: ?Object\n+    props: ?Object,\n+    bindObject: ?Object\n   ): ?Array<VNode> {\n     const scopedSlotFn = this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n-      return scopedSlotFn(props || {}) || fallback\n+      props = props || {}\n+      if (bindObject) {\n+        extend(props, bindObject)\n+      }\n+      return scopedSlotFn(props) || fallback\n     } else {\n       const slotNodes = this.$slots[name]\n       // warn duplicate slot usage"
            },
            {
                "commitId": "974247fd8e6b57840c9b7686964ddb38bc6affc8",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -178,7 +178,7 @@ export function renderMixin (Vue: Class<Component>) {\n     render: () => VNode\n   ): ?Array<VNode> {\n     let ret: ?Array<VNode>, i, l, keys, key\n-    if (Array.isArray(val)) {\n+    if (Array.isArray(val) || typeof val === 'string') {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n         ret[i] = render(val[i], i)"
            },
            {
                "commitId": "f1c38674f28116e1e335873ecbc6716fb70448a3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -33,7 +33,7 @@ export function initRender (vm: Component) {\n   vm.$scopedSlots = {}\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  // args order: tag, data, children, needNormalization, alwaysNormalize\n+  // args order: tag, data, children, normalizationType, alwaysNormalize\n   // internal version is used by render functions compiled from templates\n   vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n   // normalization is always applied for the public version, used in"
            },
            {
                "commitId": "5fa45c3bf80100469039d3b9c160ddfdaf90f8ec",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -279,11 +279,11 @@ export function createRenderFunction (\n }\n \n function checkBuild (component) {\n-  let Vue = component.constructor\n+  let Vue: any = component.constructor\n   while (Vue.super) {\n     Vue = Vue.super\n   }\n-  if (Vue.compile) {\n+  if (Vue.compile && Vue.config.devtools !== false) {\n     console.error(\n       red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n       `server-side rendering. It is recommended to use the CommonJS build ` +"
            },
            {
                "commitId": "8567e7dcedfdf0d8fb21e2c2f7ee935229b6a9e9",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -9,6 +9,7 @@ import VNode, {\n } from '../vdom/vnode'\n import {\n   warn,\n+  identity,\n   isObject,\n   toObject,\n   nextTick,\n@@ -167,7 +168,6 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // filter resolution helper\n-  const identity = _ => _\n   Vue.prototype._f = function resolveFilter (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }"
            },
            {
                "commitId": "4b51ad048306367a6fb6fbee7445e086d855f31e",
                "additions": 5,
                "deletions": 3,
                "patch": "@@ -32,9 +32,11 @@ export function initRender (vm: Component) {\n   vm.$scopedSlots = {}\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  // args order: tag, data, children, needNormalization\n-  // the needNormalization flag is disabled for the public version.\n-  vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  // args order: tag, data, children, needNormalization, alwaysNormalize\n+  // internal version is used by render functions compiled from templates\n+  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  // normalization is always applied for the public version, used in\n+  // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)"
            },
            {
                "commitId": "207c18c47f8c94f6d92675b28bc67511b7897246",
                "additions": 3,
                "deletions": 5,
                "patch": "@@ -1,7 +1,6 @@\n /* @flow */\n \n import config from '../config'\n-import { normalizeChildren } from '../vdom/helpers/index'\n import VNode, {\n   cloneVNode,\n   cloneVNodes,\n@@ -34,7 +33,7 @@ export function initRender (vm: Component) {\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n   // args order: tag, data, children, needNormalization\n-  // the needNormalization flag is flipped and defaults to true for the public version.\n+  // the needNormalization flag is disabled for the public version.\n   vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n@@ -270,14 +269,13 @@ export function renderMixin (Vue: Class<Component>) {\n }\n \n export function resolveSlots (\n-  renderChildren: ?VNodeChildren,\n+  children: ?Array<VNode>,\n   context: ?Component\n ): { [key: string]: Array<VNode> } {\n   const slots = {}\n-  if (!renderChildren) {\n+  if (!children) {\n     return slots\n   }\n-  const children = normalizeChildren(renderChildren) || []\n   const defaultSlot = []\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {"
            },
            {
                "commitId": "79e1058799dcde0b7e341ef44b590ecbf1e3a722",
                "additions": 23,
                "deletions": 7,
                "patch": "@@ -1,11 +1,24 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { createEmptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n+import VNode, {\n+  cloneVNode,\n+  cloneVNodes,\n+  createTextVNode,\n+  createEmptyVNode\n+} from '../vdom/vnode'\n import {\n-  warn, formatComponentName, bind, isObject, toObject,\n-  nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n+  warn,\n+  isObject,\n+  toObject,\n+  nextTick,\n+  toNumber,\n+  _toString,\n+  looseEqual,\n+  looseIndexOf,\n+  resolveAsset,\n+  formatComponentName\n } from '../util/index'\n \n import { createElement } from '../vdom/create-element'\n@@ -18,9 +31,12 @@ export function initRender (vm: Component) {\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n   vm.$scopedSlots = {}\n-  // bind the public createElement fn to this instance\n+  // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(createElement, vm)\n+  // args order: tag, data, children, needNormalization\n+  // the needNormalization flag is flipped and defaults to true for the public version.\n+  vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -89,10 +105,10 @@ export function renderMixin (Vue: Class<Component>) {\n     return vnode\n   }\n \n-  // shorthands used in render functions\n-  Vue.prototype._h = createElement\n   // toString for mustaches\n   Vue.prototype._s = _toString\n+  // convert text to vnode\n+  Vue.prototype._v = createTextVNode\n   // number conversion\n   Vue.prototype._n = toNumber\n   // empty vnode"
            },
            {
                "commitId": "7431e4d16c92862ac74fdb3053de9295c809b586",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n+import VNode, { createEmptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n@@ -82,7 +82,7 @@ export function renderMixin (Vue: Class<Component>) {\n           vm\n         )\n       }\n-      vnode = emptyVNode()\n+      vnode = createEmptyVNode()\n     }\n     // set parent\n     vnode.parent = _parentVnode\n@@ -96,7 +96,7 @@ export function renderMixin (Vue: Class<Component>) {\n   // number conversion\n   Vue.prototype._n = toNumber\n   // empty vnode\n-  Vue.prototype._e = emptyVNode\n+  Vue.prototype._e = createEmptyVNode\n   // loose equal\n   Vue.prototype._q = looseEqual\n   // loose indexOf"
            },
            {
                "commitId": "e8d6bd9dc73cacbc665ce132d81a7b629bef764b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -242,9 +242,9 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._k = function checkKeyCodes (\n     eventKeyCode: number,\n     key: string,\n-    buildinAlias: number | Array<number> | void\n+    builtInAlias: number | Array<number> | void\n   ): boolean {\n-    const keyCodes = config.keyCodes[key] || buildinAlias\n+    const keyCodes = config.keyCodes[key] || builtInAlias\n     if (Array.isArray(keyCodes)) {\n       return keyCodes.indexOf(eventKeyCode) === -1\n     } else {"
            },
            {
                "commitId": "6ea9a4db4221b7264ee8ebad9cef4f076762d697",
                "additions": 12,
                "deletions": 3,
                "patch": "@@ -238,9 +238,18 @@ export function renderMixin (Vue: Class<Component>) {\n     return data\n   }\n \n-  // expose v-on keyCodes\n-  Vue.prototype._k = function getKeyCodes (key: string): any {\n-    return config.keyCodes[key]\n+  // check v-on keyCodes\n+  Vue.prototype._k = function checkKeyCodes (\n+    eventKeyCode: number,\n+    key: string,\n+    buildinAlias: number | Array<number> | void\n+  ): boolean {\n+    const keyCodes = config.keyCodes[key] || buildinAlias\n+    if (Array.isArray(keyCodes)) {\n+      return keyCodes.indexOf(eventKeyCode) === -1\n+    } else {\n+      return keyCodes !== eventKeyCode\n+    }\n   }\n }\n "
            },
            {
                "commitId": "c7147e3b60cb8b4147f0132f63b70a527a47b2b6",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -257,7 +257,6 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    debugger\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n     if ((child.context === context || child.functionalContext === context) &&"
            },
            {
                "commitId": "326aef4a6ab84d044d9ed807c5dc4326249aa856",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -14,8 +14,9 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n-  vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n+  const parentVnode = vm.$options._parentVnode\n+  const renderContext = parentVnode && parentVnode.context\n+  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n   vm.$scopedSlots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -256,6 +257,7 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n+    debugger\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n     if ((child.context === context || child.functionalContext === context) &&"
            },
            {
                "commitId": "16e3dae2455aa0f2955d95698c7dddb5b4c9440d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n import {\n-  warn, formatComponentName, bind, isObject, toObject, isServerRendering,\n+  warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n } from '../util/index'\n "
            },
            {
                "commitId": "a52a094befb0b1f660771db04deebaa37555e84e",
                "additions": 3,
                "deletions": 7,
                "patch": "@@ -60,18 +60,14 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      if (process.env.NODE_ENV !== 'production') {\n-        warn(`Error when rendering ${formatComponentName(vm)}:`)\n-      }\n       /* istanbul ignore else */\n       if (config.errorHandler) {\n         config.errorHandler.call(null, e, vm)\n       } else {\n-        if (isServerRendering()) {\n-          throw e\n-        } else {\n-          console.error(e)\n+        if (process.env.NODE_ENV !== 'production') {\n+          warn(`Error when rendering ${formatComponentName(vm)}:`)\n         }\n+        throw e\n       }\n       // return previous vnode to prevent render error causing blank component\n       vnode = vm._vnode"
            },
            {
                "commitId": "aa5f5d1198db2c9480a317b1db48c470c850949d",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -16,7 +16,7 @@ export function initRender (vm: Component) {\n   vm._staticTrees = null\n   vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n-  vm.$scopedSlots = null\n+  vm.$scopedSlots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -45,7 +45,7 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n-    if (_parentVnode) {\n+    if (_parentVnode && _parentVnode.data.scopedSlots) {\n       vm.$scopedSlots = _parentVnode.data.scopedSlots\n     }\n \n@@ -191,7 +191,7 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n+    const scopedSlotFn = this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n       return scopedSlotFn(props || {}) || fallback\n     } else {"
            },
            {
                "commitId": "303378f85b26934396e2f6dc0973f6982da2beb1",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -191,9 +191,6 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    if (process.env.NODE_ENV !== 'production' && name === 'default' && props) {\n-      warn(`Scoped slots must be named`, this)\n-    }\n     const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n       return scopedSlotFn(props || {}) || fallback"
            },
            {
                "commitId": "7f36f99f6c9bf6130f298fb79538f09fce7ef2fc",
                "additions": 7,
                "deletions": 6,
                "patch": "@@ -191,12 +191,13 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    if (props) { // scoped slot\n-      const scopedSlotFn = this.$scopedSlots[name]\n-      return scopedSlotFn\n-        ? scopedSlotFn(props) || fallback\n-        : fallback\n-    } else { // static slot\n+    if (process.env.NODE_ENV !== 'production' && name === 'default' && props) {\n+      warn(`Scoped slots must be named`, this)\n+    }\n+    const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n+    if (scopedSlotFn) { // scoped slot\n+      return scopedSlotFn(props || {}) || fallback\n+    } else {\n       const slotNodes = this.$slots[name]\n       // warn duplicate slot usage\n       if (slotNodes && process.env.NODE_ENV !== 'production') {"
            },
            {
                "commitId": "9ddbbcc340aa092699aca349492ffd50e18f1ba4",
                "additions": 24,
                "deletions": 11,
                "patch": "@@ -16,6 +16,7 @@ export function initRender (vm: Component) {\n   vm._staticTrees = null\n   vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n+  vm.$scopedSlots = null\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -44,6 +45,10 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n+    if (_parentVnode) {\n+      vm.$scopedSlots = _parentVnode.data.scopedSlots\n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -183,19 +188,27 @@ export function renderMixin (Vue: Class<Component>) {\n   // renderSlot\n   Vue.prototype._t = function (\n     name: string,\n-    fallback: ?Array<VNode>\n+    fallback: ?Array<VNode>,\n+    props: ?Object\n   ): ?Array<VNode> {\n-    const slotNodes = this.$slots[name]\n-    // warn duplicate slot usage\n-    if (slotNodes && process.env.NODE_ENV !== 'production') {\n-      slotNodes._rendered && warn(\n-        `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n-        `- this will likely cause render errors.`,\n-        this\n-      )\n-      slotNodes._rendered = true\n+    if (props) { // scoped slot\n+      const scopedSlotFn = this.$scopedSlots[name]\n+      return scopedSlotFn\n+        ? scopedSlotFn(props) || fallback\n+        : fallback\n+    } else { // static slot\n+      const slotNodes = this.$slots[name]\n+      // warn duplicate slot usage\n+      if (slotNodes && process.env.NODE_ENV !== 'production') {\n+        slotNodes._rendered && warn(\n+          `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n+          `- this will likely cause render errors.`,\n+          this\n+        )\n+        slotNodes._rendered = true\n+      }\n+      return slotNodes || fallback\n     }\n-    return slotNodes || fallback\n   }\n \n   // apply v-bind object"
            },
            {
                "commitId": "2dc2d062b1af826add087d832a3f68806e2ef2b1",
                "additions": 21,
                "deletions": 0,
                "patch": "@@ -262,6 +262,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    checkBuild(component)\n     warned = Object.create(null)\n     const context = {\n       activeInstance: component,\n@@ -276,3 +277,23 @@ export function createRenderFunction (\n     renderNode(component._render(), true, context)\n   }\n }\n+\n+function checkBuild (component) {\n+  let Vue = component.constructor\n+  while (Vue.super) {\n+    Vue = Vue.super\n+  }\n+  if (Vue.compile) {\n+    console.error(\n+      red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n+      `server-side rendering. It is recommended to use the CommonJS build ` +\n+      `(vue/dist/vue.common.js) instead so that the code can run in ` +\n+      `production mode by setting NODE_ENV=production. The server renderer ` +\n+      `supports the template option regardless of what build you are using.\\n`)\n+    )\n+  }\n+}\n+\n+function red (str) {\n+  return '\\u001B[1m\\u001B[31m' + str + '\\u001B[39m\\u001B[22m'\n+}"
            },
            {
                "commitId": "8bf26536d3b4b5d139070e1730fed7f9df59c9db",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -26,7 +26,7 @@ export function initRender (vm: Component) {\n \n export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype.$nextTick = function (fn: Function) {\n-    nextTick(fn, this)\n+    return nextTick(fn, this)\n   }\n \n   Vue.prototype._render = function (): VNode {"
            },
            {
                "commitId": "9a742cb423690acb29990bd38f5c17f7b21f12f8",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -201,6 +201,7 @@ export function renderMixin (Vue: Class<Component>) {\n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n     data: any,\n+    tag: string,\n     value: any,\n     asProp?: boolean\n   ): VNodeData {\n@@ -218,7 +219,7 @@ export function renderMixin (Vue: Class<Component>) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n           } else {\n-            const hash = asProp || config.mustUseProp(key)\n+            const hash = asProp || config.mustUseProp(tag, key)\n               ? data.domProps || (data.domProps = {})\n               : data.attrs || (data.attrs = {})\n             hash[key] = value[key]"
            },
            {
                "commitId": "6e3e989a90e8685c2cf0c029fa9c657354762b04",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -65,7 +65,7 @@ export function renderMixin (Vue: Class<Component>) {\n         if (config._isServer) {\n           throw e\n         } else {\n-          setTimeout(() => { throw e }, 0)\n+          console.error(e)\n         }\n       }\n       // return previous vnode to prevent render error causing blank component"
            },
            {
                "commitId": "240df147f11824db5811d23c8704225aa586b96b",
                "additions": 11,
                "deletions": 0,
                "patch": "@@ -150,9 +150,20 @@ function renderElement (el, isRoot, context) {\n   }\n }\n \n+function hasAncestorData (node: VNode) {\n+  const parentNode = node.parent\n+  return parentNode && (parentNode.data || hasAncestorData(parentNode))\n+}\n+\n function renderStartingTag (node: VNode, context) {\n   let markup = `<${node.tag}`\n   const { directives, modules } = context\n+\n+  // construct synthetic data for module processing\n+  // because modules like style also produce code by parent VNode data\n+  if (!node.data && hasAncestorData(node)) {\n+    node.data = {}\n+  }\n   if (node.data) {\n     // check directives\n     const dirs = node.data.directives"
            },
            {
                "commitId": "ec824be88e9bc71b31e5c4a43f80d921674dca66",
                "additions": 24,
                "deletions": 6,
                "patch": "@@ -115,18 +115,36 @@ export function renderMixin (Vue: Class<Component>) {\n     }\n     // otherwise, render a fresh tree.\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n+    markStatic(tree, `__static__${index}`, false)\n+    return tree\n+  }\n+\n+  // mark node as static (v-once)\n+  Vue.prototype._o = function markOnce (\n+    tree: VNode | Array<VNode>,\n+    index: number,\n+    key: string\n+  ) {\n+    markStatic(tree, `__once__${index}${key ? `_${key}` : ``}`, true)\n+    return tree\n+  }\n+\n+  function markStatic (tree, key, isOnce) {\n     if (Array.isArray(tree)) {\n       for (let i = 0; i < tree.length; i++) {\n-        if (typeof tree[i] !== 'string') {\n-          tree[i].isStatic = true\n-          tree[i].key = `__static__${index}_${i}`\n+        if (tree[i] && typeof tree[i] !== 'string') {\n+          markStaticNode(tree[i], `${key}_${i}`, isOnce)\n         }\n       }\n     } else {\n-      tree.isStatic = true\n-      tree.key = `__static__${index}`\n+      markStaticNode(tree, key, isOnce)\n     }\n-    return tree\n+  }\n+\n+  function markStaticNode (node, key, isOnce) {\n+    node.isStatic = true\n+    node.key = key\n+    node.isOnce = isOnce\n   }\n \n   // filter resolution helper"
            },
            {
                "commitId": "2ac581bb7f34b1ef0f35c3e6945acd630a92453e",
                "additions": 186,
                "deletions": 155,
                "patch": "@@ -3,6 +3,7 @@\n import { escape } from 'he'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n+import { noop } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -43,194 +44,224 @@ const normalizeRender = vm => {\n   }\n }\n \n-export function createRenderFunction (\n-  modules: Array<Function>,\n-  directives: Object,\n-  isUnaryTag: Function,\n-  cache: any\n-) {\n-  if (cache && (!cache.get || !cache.set)) {\n-    throw new Error('renderer cache must implement at least get & set.')\n+function renderNode (node, isRoot, context) {\n+  const { write, next } = context\n+  if (node.componentOptions) {\n+    // check cache hit\n+    const Ctor = node.componentOptions.Ctor\n+    const getKey = Ctor.options.serverCacheKey\n+    const name = Ctor.options.name\n+    const cache = context.cache\n+    if (getKey && cache && name) {\n+      const key = name + '::' + getKey(node.componentOptions.propsData)\n+      const { has, get } = context\n+      if (has) {\n+        has(key, hit => {\n+          if (hit && get) {\n+            get(key, res => write(res, next))\n+          } else {\n+            renderComponentWithCache(node, isRoot, key, context)\n+          }\n+        })\n+      } else if (get) {\n+        get(key, res => {\n+          if (res) {\n+            write(res, next)\n+          } else {\n+            renderComponentWithCache(node, isRoot, key, context)\n+          }\n+        })\n+      }\n+    } else {\n+      if (getKey && !cache) {\n+        warnOnce(\n+          `[vue-server-renderer] Component ${\n+            Ctor.options.name || '(anonymous)'\n+          } implemented serverCacheKey, ` +\n+          'but no cache was provided to the renderer.'\n+        )\n+      }\n+      if (getKey && !name) {\n+        warnOnce(\n+          `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+          `must also define a unique \"name\" option.`\n+        )\n+      }\n+      renderComponent(node, isRoot, context)\n+    }\n+  } else {\n+    if (node.tag) {\n+      renderElement(node, isRoot, context)\n+    } else if (node.isComment) {\n+      write(`<!--${node.text}-->`, next)\n+    } else {\n+      write(node.raw ? node.text : escape(String(node.text)), next)\n+    }\n   }\n+}\n \n-  const get = cache && normalizeAsync(cache, 'get')\n-  const has = cache && normalizeAsync(cache, 'has')\n+function renderComponent (node, isRoot, context) {\n+  const prevActive = context.activeInstance\n+  const child = context.activeInstance = createComponentInstanceForVnode(node, context.activeInstance)\n+  normalizeRender(child)\n+  const childNode = child._render()\n+  childNode.parent = node\n+  context.renderStates.push({\n+    type: 'Component',\n+    prevActive\n+  })\n+  renderNode(childNode, isRoot, context)\n+}\n \n-  // used to track and apply scope ids\n-  let activeInstance: any\n+function renderComponentWithCache (node, isRoot, key, context) {\n+  const write = context.write\n+  write.caching = true\n+  const buffer = write.cacheBuffer\n+  const bufferIndex = buffer.push('') - 1\n+  context.renderStates.push({\n+    type: 'ComponentWithCache',\n+    buffer, bufferIndex, key\n+  })\n+  renderComponent(node, isRoot, context)\n+}\n \n-  function renderNode (\n-    node: VNode,\n-    write: Function,\n-    next: Function,\n-    isRoot: boolean\n-  ) {\n-    if (node.componentOptions) {\n-      // check cache hit\n-      const Ctor = node.componentOptions.Ctor\n-      const getKey = Ctor.options.serverCacheKey\n-      const name = Ctor.options.name\n-      if (getKey && cache && name) {\n-        const key = name + '::' + getKey(node.componentOptions.propsData)\n-        if (has) {\n-          has(key, hit => {\n-            if (hit && get) {\n-              get(key, res => write(res, next))\n-            } else {\n-              renderComponentWithCache(node, write, next, isRoot, cache, key)\n-            }\n-          })\n-        } else if (get) {\n-          get(key, res => {\n-            if (res) {\n-              write(res, next)\n-            } else {\n-              renderComponentWithCache(node, write, next, isRoot, cache, key)\n-            }\n-          })\n-        }\n-      } else {\n-        if (getKey && !cache) {\n-          warnOnce(\n-            `[vue-server-renderer] Component ${\n-              Ctor.options.name || '(anonymous)'\n-            } implemented serverCacheKey, ` +\n-            'but no cache was provided to the renderer.'\n-          )\n-        }\n-        if (getKey && !name) {\n-          warnOnce(\n-            `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n-            `must also define a unique \"name\" option.`\n-          )\n+function renderElement (el, isRoot, context) {\n+  if (isRoot) {\n+    if (!el.data) el.data = {}\n+    if (!el.data.attrs) el.data.attrs = {}\n+    el.data.attrs['server-rendered'] = 'true'\n+  }\n+  const startTag = renderStartingTag(el, context)\n+  const endTag = `</${el.tag}>`\n+  const { write, next } = context\n+  if (context.isUnaryTag(el.tag)) {\n+    write(startTag, next)\n+  } else if (!el.children || !el.children.length) {\n+    write(startTag + endTag, next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag, children\n+    })\n+    write(startTag, next)\n+  }\n+}\n+\n+function renderStartingTag (node: VNode, context) {\n+  let markup = `<${node.tag}`\n+  const { directives, modules } = context\n+  if (node.data) {\n+    // check directives\n+    const dirs = node.data.directives\n+    if (dirs) {\n+      for (let i = 0; i < dirs.length; i++) {\n+        const dirRenderer = directives[dirs[i].name]\n+        if (dirRenderer) {\n+          // directives mutate the node's data\n+          // which then gets rendered by modules\n+          dirRenderer(node, dirs[i])\n         }\n-        renderComponent(node, write, next, isRoot)\n       }\n-    } else {\n-      if (node.tag) {\n-        renderElement(node, write, next, isRoot)\n-      } else if (node.isComment) {\n-        write(`<!--${node.text}-->`, next)\n-      } else {\n-        write(node.raw ? node.text : escape(String(node.text)), next)\n+    }\n+    // apply other modules\n+    for (let i = 0; i < modules.length; i++) {\n+      const res = modules[i](node)\n+      if (res) {\n+        markup += res\n       }\n     }\n   }\n-\n-  function renderComponent (node, write, next, isRoot) {\n-    const prevActive = activeInstance\n-    const child = activeInstance = createComponentInstanceForVnode(node, activeInstance)\n-    normalizeRender(child)\n-    const childNode = child._render()\n-    childNode.parent = node\n-    renderNode(childNode, write, () => {\n-      activeInstance = prevActive\n-      next()\n-    }, isRoot)\n+  // attach scoped CSS ID\n+  let scopeId\n+  const activeInstance = context.activeInstance\n+  if (activeInstance &&\n+      activeInstance !== node.context &&\n+      (scopeId = activeInstance.$options._scopeId)) {\n+    markup += ` ${scopeId}`\n   }\n+  while (node) {\n+    if ((scopeId = node.context.$options._scopeId)) {\n+      markup += ` ${scopeId}`\n+    }\n+    node = node.parent\n+  }\n+  return markup + '>'\n+}\n \n-  function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n-    write.caching = true\n-    const buffer = write.cacheBuffer\n-    const bufferIndex = buffer.push('') - 1\n-    renderComponent(node, write, () => {\n+const nextFactory = context => function next () {\n+  const lastState = context.renderStates.pop()\n+  if (!lastState) {\n+    context.done()\n+    // cleanup context, avoid leakage\n+    context = (null: any)\n+    return\n+  }\n+  switch (lastState.type) {\n+    case 'Component':\n+      context.activeInstance = lastState.prevActive\n+      next()\n+      break\n+    case 'Element':\n+      const { children, total } = lastState\n+      const rendered = lastState.rendered++\n+      if (rendered < total) {\n+        context.renderStates.push(lastState)\n+        renderNode(children[rendered], false, context)\n+      } else {\n+        context.write(lastState.endTag, next)\n+      }\n+      break\n+    case 'ComponentWithCache':\n+      const { buffer, bufferIndex, key } = lastState\n       const result = buffer[bufferIndex]\n-      cache.set(key, result)\n+      context.cache.set(key, result)\n       if (bufferIndex === 0) {\n         // this is a top-level cached component,\n         // exit caching mode.\n-        write.caching = false\n+        context.write.caching = false\n       } else {\n         // parent component is also being cached,\n         // merge self into parent's result\n         buffer[bufferIndex - 1] += result\n       }\n       buffer.length = bufferIndex\n       next()\n-    }, isRoot)\n+      break\n   }\n+}\n \n-  function renderElement (el, write, next, isRoot) {\n-    if (isRoot) {\n-      if (!el.data) el.data = {}\n-      if (!el.data.attrs) el.data.attrs = {}\n-      el.data.attrs['server-rendered'] = 'true'\n-    }\n-    const startTag = renderStartingTag(el)\n-    const endTag = `</${el.tag}>`\n-    if (isUnaryTag(el.tag)) {\n-      write(startTag, next)\n-    } else if (!el.children || !el.children.length) {\n-      write(startTag + endTag, next)\n-    } else {\n-      const children: Array<VNode> = el.children || []\n-      write(startTag, () => {\n-        const total = children.length\n-        let rendered = 0\n-\n-        function renderChild (child: VNode) {\n-          renderNode(child, write, () => {\n-            rendered++\n-            if (rendered < total) {\n-              renderChild(children[rendered])\n-            } else {\n-              write(endTag, next)\n-            }\n-          }, false)\n-        }\n-\n-        renderChild(children[0])\n-      })\n-    }\n+export function createRenderFunction (\n+  modules: Array<Function>,\n+  directives: Object,\n+  isUnaryTag: Function,\n+  cache: any\n+) {\n+  if (cache && (!cache.get || !cache.set)) {\n+    throw new Error('renderer cache must implement at least get & set.')\n   }\n \n-  function renderStartingTag (node: VNode) {\n-    let markup = `<${node.tag}`\n-    if (node.data) {\n-      // check directives\n-      const dirs = node.data.directives\n-      if (dirs) {\n-        for (let i = 0; i < dirs.length; i++) {\n-          const dirRenderer = directives[dirs[i].name]\n-          if (dirRenderer) {\n-            // directives mutate the node's data\n-            // which then gets rendered by modules\n-            dirRenderer(node, dirs[i])\n-          }\n-        }\n-      }\n-      // apply other modules\n-      for (let i = 0; i < modules.length; i++) {\n-        const res = modules[i](node)\n-        if (res) {\n-          markup += res\n-        }\n-      }\n-    }\n-    // attach scoped CSS ID\n-    let scopeId\n-    if (activeInstance &&\n-        activeInstance !== node.context &&\n-        (scopeId = activeInstance.$options._scopeId)) {\n-      markup += ` ${scopeId}`\n-    }\n-    while (node) {\n-      if ((scopeId = node.context.$options._scopeId)) {\n-        markup += ` ${scopeId}`\n-      }\n-      node = node.parent\n-    }\n-    return markup + '>'\n-  }\n+  const get = cache && normalizeAsync(cache, 'get')\n+  const has = cache && normalizeAsync(cache, 'has')\n \n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n     warned = Object.create(null)\n-    activeInstance = component\n+    const context = {\n+      activeInstance: component,\n+      renderStates: [],\n+      next: noop, // for flow\n+      write, done,\n+      isUnaryTag, modules, directives,\n+      cache, get, has\n+    }\n+    context.next = nextFactory(context)\n     normalizeRender(component)\n-    renderNode(component._render(), write, done, true)\n+    renderNode(component._render(), true, context)\n   }\n }"
            },
            {
                "commitId": "d362d64633f00f8cbf1613c424d8852fb45c7596",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import { encodeHTML } from 'entities'\n+import { escape } from 'he'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n@@ -112,7 +112,7 @@ export function createRenderFunction (\n       } else if (node.isComment) {\n         write(`<!--${node.text}-->`, next)\n       } else {\n-        write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n+        write(node.raw ? node.text : escape(String(node.text)), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "e774ce2353e28c813728f508a5a83d8236f5e36e",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -2,7 +2,7 @@\n \n import config from '../config'\n import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n-import { normalizeChildren } from '../vdom/helpers'\n+import { normalizeChildren } from '../vdom/helpers/index'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf"
            },
            {
                "commitId": "3446d1485d36b91ef42c53268cb69ecb047538a5",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -232,7 +232,7 @@ export function resolveSlots (\n     child = children[i]\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n-    if (child.context === context &&\n+    if ((child.context === context || child.functionalContext === context) &&\n         child.data && (name = child.data.slot)) {\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {"
            },
            {
                "commitId": "c835ce57ff4e0ba3617a189bb2736599f1ffb471",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -117,8 +117,10 @@ export function renderMixin (Vue: Class<Component>) {\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n     if (Array.isArray(tree)) {\n       for (let i = 0; i < tree.length; i++) {\n-        tree[i].isStatic = true\n-        tree[i].key = `__static__${index}_${i}`\n+        if (typeof tree[i] !== 'string') {\n+          tree[i].isStatic = true\n+          tree[i].key = `__static__${index}_${i}`\n+        }\n       }\n     } else {\n       tree.isStatic = true"
            },
            {
                "commitId": "99ea0f8229f108baa54f8791758315e2eda4f779",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -14,7 +14,8 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm.$slots = resolveSlots(vm.$options._renderChildren)\n+  vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n+  vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -215,7 +216,8 @@ export function renderMixin (Vue: Class<Component>) {\n }\n \n export function resolveSlots (\n-  renderChildren: ?VNodeChildren\n+  renderChildren: ?VNodeChildren,\n+  context: ?Component\n ): { [key: string]: Array<VNode> } {\n   const slots = {}\n   if (!renderChildren) {\n@@ -226,8 +228,10 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    if (child.data && (name = child.data.slot)) {\n-      delete child.data.slot\n+    // named slots should only be respected if the vnode was rendered in the\n+    // same context.\n+    if (child.context === context &&\n+        child.data && (name = child.data.slot)) {\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {\n         slot.push.apply(slot, child.children)"
            },
            {
                "commitId": "56960b5fbcf82d2160a7c9645ebddecc258bc0ec",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -5,7 +5,7 @@ import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n-  nextTick, resolveAsset, _toString, toNumber\n+  nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n } from '../util/index'\n \n import { createElement } from '../vdom/create-element'\n@@ -94,6 +94,10 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._n = toNumber\n   // empty vnode\n   Vue.prototype._e = emptyVNode\n+  // loose equal\n+  Vue.prototype._q = looseEqual\n+  // loose indexOf\n+  Vue.prototype._i = looseIndexOf\n \n   // render static tree by index\n   Vue.prototype._m = function renderStatic ("
            },
            {
                "commitId": "d6a7568891d0c3368471322de5d730172d92b9e4",
                "additions": 4,
                "deletions": 3,
                "patch": "@@ -175,9 +175,10 @@ export function renderMixin (Vue: Class<Component>) {\n \n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n-    vnode: VNodeWithData,\n+    data: any,\n     value: any,\n-    asProp?: boolean) {\n+    asProp?: boolean\n+  ): VNodeData {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -188,7 +189,6 @@ export function renderMixin (Vue: Class<Component>) {\n         if (Array.isArray(value)) {\n           value = toObject(value)\n         }\n-        const data: any = vnode.data\n         for (const key in value) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n@@ -201,6 +201,7 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n       }\n     }\n+    return data\n   }\n \n   // expose v-on keyCodes"
            },
            {
                "commitId": "673dec6040bcfc510866761b38439b9d34dd91f7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -164,7 +164,7 @@ export function renderMixin (Vue: Class<Component>) {\n     // warn duplicate slot usage\n     if (slotNodes && process.env.NODE_ENV !== 'production') {\n       slotNodes._rendered && warn(\n-        `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+        `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n         `- this will likely cause render errors.`,\n         this\n       )"
            },
            {
                "commitId": "179ec92019dd098487c720ba8d1667bbedb9c380",
                "additions": 6,
                "deletions": 6,
                "patch": "@@ -36,11 +36,11 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (vm._isMounted) {    \n-      // clone slot nodes on re-renders   \n-      for (const key in vm.$slots) {    \n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])    \n-      }   \n+    if (vm._isMounted) {\n+      // clone slot nodes on re-renders\n+      for (const key in vm.$slots) {\n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+      }\n     }\n \n     if (staticRenderFns && !vm._staticTrees) {\n@@ -160,7 +160,7 @@ export function renderMixin (Vue: Class<Component>) {\n     name: string,\n     fallback: ?Array<VNode>\n   ): ?Array<VNode> {\n-    let slotNodes = this.$slots[name]\n+    const slotNodes = this.$slots[name]\n     // warn duplicate slot usage\n     if (slotNodes && process.env.NODE_ENV !== 'production') {\n       slotNodes._rendered && warn("
            },
            {
                "commitId": "100a2969aa5c64bd71758c79881cf4531e9907be",
                "additions": 15,
                "deletions": 14,
                "patch": "@@ -36,6 +36,13 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n+    if (vm._isMounted) {    \n+      // clone slot nodes on re-renders   \n+      for (const key in vm.$slots) {    \n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])    \n+      }   \n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -154,20 +161,14 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>\n   ): ?Array<VNode> {\n     let slotNodes = this.$slots[name]\n-    if (slotNodes) {\n-      // warn duplicate slot usage\n-      if (process.env.NODE_ENV !== 'production') {\n-        slotNodes._rendered && warn(\n-          `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n-          `- this will likely cause render errors.`,\n-          this\n-        )\n-        slotNodes._rendered = true\n-      }\n-      // clone slot nodes on re-renders\n-      if (this._isMounted) {\n-        slotNodes = cloneVNodes(slotNodes)\n-      }\n+    // warn duplicate slot usage\n+    if (slotNodes && process.env.NODE_ENV !== 'production') {\n+      slotNodes._rendered && warn(\n+        `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+        `- this will likely cause render errors.`,\n+        this\n+      )\n+      slotNodes._rendered = true\n     }\n     return slotNodes || fallback\n   }"
            },
            {
                "commitId": "4afccc8eece43956f6f84189923a60d9a5a45e36",
                "additions": 24,
                "deletions": 7,
                "patch": "@@ -36,13 +36,6 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (vm._isMounted) {\n-      // clone slot nodes on re-renders\n-      for (const key in vm.$slots) {\n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n-      }\n-    }\n-\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -155,6 +148,30 @@ export function renderMixin (Vue: Class<Component>) {\n     return ret\n   }\n \n+  // renderSlot\n+  Vue.prototype._t = function (\n+    name: string,\n+    fallback: ?Array<VNode>\n+  ): ?Array<VNode> {\n+    let slotNodes = this.$slots[name]\n+    if (slotNodes) {\n+      // warn duplicate slot usage\n+      if (process.env.NODE_ENV !== 'production') {\n+        slotNodes._rendered && warn(\n+          `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+          `- this will likely cause render errors.`,\n+          this\n+        )\n+        slotNodes._rendered = true\n+      }\n+      // clone slot nodes on re-renders\n+      if (this._isMounted) {\n+        slotNodes = cloneVNodes(slotNodes)\n+      }\n+    }\n+    return slotNodes || fallback\n+  }\n+\n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n     vnode: VNodeWithData,"
            },
            {
                "commitId": "f6b1a51729f705bc49c6eaaf32ec095efd97401c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -102,7 +102,7 @@ export function renderMixin (Vue: Class<Component>) {\n   ): VNode | Array<VNode> {\n     let tree = this._staticTrees[index]\n     // if has already-rendered static tree and not inside v-for,\n-    // we can reuse the same tree by indentity.\n+    // we can reuse the same tree by doing a shallow clone.\n     if (tree && !isInFor) {\n       return Array.isArray(tree)\n         ? cloneVNodes(tree)"
            },
            {
                "commitId": "982913fb1e06916a782b2789916f0038c9dfd98b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -74,13 +74,13 @@ export function createRenderFunction (\n         const key = name + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n           has(key, hit => {\n-            if (hit) {\n+            if (hit && get) {\n               get(key, res => write(res, next))\n             } else {\n               renderComponentWithCache(node, write, next, isRoot, cache, key)\n             }\n           })\n-        } else {\n+        } else if (get) {\n           get(key, res => {\n             if (res) {\n               write(res, next)"
            },
            {
                "commitId": "4d640ce4d9fd638bcd0e4a61a8bb346458046ced",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -92,6 +92,8 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n+  // empty vnode\n+  Vue.prototype._e = emptyVNode\n \n   // render static tree by index\n   Vue.prototype._m = function renderStatic (\n@@ -216,7 +218,7 @@ export function resolveSlots (\n   // ignore single whitespace\n   if (defaultSlot.length && !(\n     defaultSlot.length === 1 &&\n-    defaultSlot[0].text === ' '\n+    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n   )) {\n     slots.default = defaultSlot\n   }"
            },
            {
                "commitId": "014d2f8599f9afc0754e603b1528a12e74bd209a",
                "additions": 12,
                "deletions": 3,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { emptyVNode } from '../vdom/vnode'\n+import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n@@ -36,6 +36,13 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n+    if (vm._isMounted) {\n+      // clone slot nodes on re-renders\n+      for (const key in vm.$slots) {\n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+      }\n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -90,12 +97,14 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._m = function renderStatic (\n     index: number,\n     isInFor?: boolean\n-  ): VNode | VNodeChildren {\n+  ): VNode | Array<VNode> {\n     let tree = this._staticTrees[index]\n     // if has already-rendered static tree and not inside v-for,\n     // we can reuse the same tree by indentity.\n     if (tree && !isInFor) {\n-      return tree\n+      return Array.isArray(tree)\n+        ? cloneVNodes(tree)\n+        : cloneVNode(tree)\n     }\n     // otherwise, render a fresh tree.\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)"
            },
            {
                "commitId": "0e75fb93df9fd83391959989836c120f2662adab",
                "additions": 20,
                "deletions": 4,
                "patch": "@@ -4,6 +4,14 @@ import { encodeHTML } from 'entities'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+let warned = Object.create(null)\n+const warnOnce = msg => {\n+  if (!warned[msg]) {\n+    warned[msg] = true\n+    console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n+  }\n+}\n+\n const normalizeAsync = (cache, method) => {\n   const fn = cache[method]\n   if (!fn) {\n@@ -61,8 +69,9 @@ export function createRenderFunction (\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n       const getKey = Ctor.options.serverCacheKey\n-      if (getKey && cache) {\n-        const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+      const name = Ctor.options.name\n+      if (getKey && cache && name) {\n+        const key = name + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n           has(key, hit => {\n             if (hit) {\n@@ -81,14 +90,20 @@ export function createRenderFunction (\n           })\n         }\n       } else {\n-        if (getKey) {\n-          console.error(\n+        if (getKey && !cache) {\n+          warnOnce(\n             `[vue-server-renderer] Component ${\n               Ctor.options.name || '(anonymous)'\n             } implemented serverCacheKey, ` +\n             'but no cache was provided to the renderer.'\n           )\n         }\n+        if (getKey && !name) {\n+          warnOnce(\n+            `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+            `must also define a unique \"name\" option.`\n+          )\n+        }\n         renderComponent(node, write, next, isRoot)\n       }\n     } else {\n@@ -213,6 +228,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    warned = Object.create(null)\n     activeInstance = component\n     normalizeRender(component)\n     renderNode(component._render(), write, done, true)"
            },
            {
                "commitId": "7c3db415a7e4e006f529b27123280ec7c2ae75d0",
                "additions": 14,
                "deletions": 6,
                "patch": "@@ -18,12 +18,20 @@ const normalizeAsync = (cache, method) => {\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n-  if (!render && template) {\n-    const renderFns = (\n-      compilationCache[template] ||\n-      (compilationCache[template] = compileToFunctions(template))\n-    )\n-    Object.assign(vm.$options, renderFns)\n+  if (!render) {\n+    if (template) {\n+      const renderFns = (\n+        compilationCache[template] ||\n+        (compilationCache[template] = compileToFunctions(template))\n+      )\n+      Object.assign(vm.$options, renderFns)\n+    } else {\n+      throw new Error(\n+        `render function or template not defined in component: ${\n+          vm.$options.name || vm.$options._componentTag || 'anonymous'\n+        }`\n+      )\n+    }\n   }\n }\n "
            },
            {
                "commitId": "18386c4cf4fe829f447687734a5bf03905d0db44",
                "additions": 18,
                "deletions": 5,
                "patch": "@@ -87,13 +87,26 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._n = toNumber\n \n   // render static tree by index\n-  Vue.prototype._m = function renderStatic (index?: number): Object | void {\n+  Vue.prototype._m = function renderStatic (\n+    index: number,\n+    isInFor?: boolean\n+  ): VNode | VNodeChildren {\n     let tree = this._staticTrees[index]\n-    if (!tree) {\n-      tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n-        this._renderProxy\n-      )\n+    // if has already-rendered static tree and not inside v-for,\n+    // we can reuse the same tree by indentity.\n+    if (tree && !isInFor) {\n+      return tree\n+    }\n+    // otherwise, render a fresh tree.\n+    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n+    if (Array.isArray(tree)) {\n+      for (let i = 0; i < tree.length; i++) {\n+        tree[i].isStatic = true\n+        tree[i].key = `__static__${index}_${i}`\n+      }\n+    } else {\n       tree.isStatic = true\n+      tree.key = `__static__${index}`\n     }\n     return tree\n   }"
            },
            {
                "commitId": "21908b7267a9ff6b425b8261f9a38a2a0df2b72d",
                "additions": 4,
                "deletions": 6,
                "patch": "@@ -14,7 +14,7 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm.$slots = {}\n+  vm.$slots = resolveSlots(vm.$options._renderChildren)\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -33,7 +33,6 @@ export function renderMixin (Vue: Class<Component>) {\n     const {\n       render,\n       staticRenderFns,\n-      _renderChildren,\n       _parentVnode\n     } = vm.$options\n \n@@ -43,9 +42,6 @@ export function renderMixin (Vue: Class<Component>) {\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n     vm.$vnode = _parentVnode\n-    // resolve slots. becaues slots are rendered in parent scope,\n-    // we set the activeInstance to parent.\n-    vm.$slots = resolveSlots(_renderChildren)\n     // render self\n     let vnode\n     try {\n@@ -171,7 +167,9 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-export function resolveSlots (renderChildren: ?VNodeChildren): Object {\n+export function resolveSlots (\n+  renderChildren: ?VNodeChildren\n+): { [key: string]: Array<VNode> } {\n   const slots = {}\n   if (!renderChildren) {\n     return slots"
            },
            {
                "commitId": "fe801b16e4da63513bce95bfa762a8a36d83fe59",
                "additions": 6,
                "deletions": 5,
                "patch": "@@ -95,14 +95,15 @@ export function createRenderFunction (\n   }\n \n   function renderComponent (node, write, next, isRoot) {\n-    const child = createComponentInstanceForVnode(node)\n+    const prevActive = activeInstance\n+    const child = activeInstance = createComponentInstanceForVnode(node, activeInstance)\n     normalizeRender(child)\n     const childNode = child._render()\n     childNode.parent = node\n-    const prevActive = activeInstance\n-    activeInstance = child\n-    renderNode(childNode, write, next, isRoot)\n-    activeInstance = prevActive\n+    renderNode(childNode, write, () => {\n+      activeInstance = prevActive\n+      next()\n+    }, isRoot)\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {"
            },
            {
                "commitId": "b5b963f51df1fa3124cd8a9846be5455408bc52a",
                "additions": 10,
                "deletions": 1,
                "patch": "@@ -40,6 +40,9 @@ export function createRenderFunction (\n   const get = cache && normalizeAsync(cache, 'get')\n   const has = cache && normalizeAsync(cache, 'has')\n \n+  // used to track and apply scope ids\n+  let activeInstance: any\n+\n   function renderNode (\n     node: VNode,\n     write: Function,\n@@ -96,7 +99,10 @@ export function createRenderFunction (\n     normalizeRender(child)\n     const childNode = child._render()\n     childNode.parent = node\n+    const prevActive = activeInstance\n+    activeInstance = child\n     renderNode(childNode, write, next, isRoot)\n+    activeInstance = prevActive\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n@@ -179,7 +185,9 @@ export function createRenderFunction (\n     }\n     // attach scoped CSS ID\n     let scopeId\n-    if (node.host && (scopeId = node.host.$options._scopeId)) {\n+    if (activeInstance &&\n+        activeInstance !== node.context &&\n+        (scopeId = activeInstance.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n     while (node) {\n@@ -196,6 +204,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    activeInstance = component\n     normalizeRender(component)\n     renderNode(component._render(), write, done, true)\n   }"
            },
            {
                "commitId": "c66b7566c682af653dc475fab1475db5484e40ee",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -163,7 +163,7 @@ export function renderMixin (Vue: Class<Component>) {\n         if (Array.isArray(value)) {\n           value = toObject(value)\n         }\n-        const data = vnode.data\n+        const data: any = vnode.data\n         for (const key in value) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]"
            },
            {
                "commitId": "59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -165,10 +165,14 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n         const data = vnode.data\n         for (const key in value) {\n-          const hash = asProp || config.mustUseProp(key)\n-            ? data.domProps || (data.domProps = {})\n-            : data.attrs || (data.attrs = {})\n-          hash[key] = value[key]\n+          if (key === 'class' || key === 'style') {\n+            data[key] = value[key]\n+          } else {\n+            const hash = asProp || config.mustUseProp(key)\n+              ? data.domProps || (data.domProps = {})\n+              : data.attrs || (data.attrs = {})\n+            hash[key] = value[key]\n+          }\n         }\n       }\n     }"
            },
            {
                "commitId": "351aef3cb4ada980f105f98f8b835876e8d4d689",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -83,6 +83,8 @@ export function createRenderFunction (\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n+      } else if (node.isComment) {\n+        write(`<!--${node.text}-->`, next)\n       } else {\n         write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n       }"
            },
            {
                "commitId": "74f8b98509d24487e1a8d1588b4128a7a1046a41",
                "additions": 7,
                "deletions": 4,
                "patch": "@@ -103,13 +103,16 @@ export function renderMixin (Vue: Class<Component>) {\n   // number conversion\n   Vue.prototype._n = toNumber\n \n-  //\n+  // render static tree by index\n   Vue.prototype._m = function renderStatic (index?: number): Object | void {\n-    return this._staticTrees[index] || (\n-      this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n+    let tree = this._staticTrees[index]\n+    if (!tree) {\n+      tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n         this._renderProxy\n       )\n-    )\n+      tree.isStatic = true\n+    }\n+    return tree\n   }\n \n   // filter resolution helper"
            },
            {
                "commitId": "65d4ae9d0f0f3c6b72c4c606d8066a2abca74db2",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -84,7 +84,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.raw ? node.text : encodeHTML(node.text), next)\n+        write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "0f5bcdfac81e5428d2029f86ecb6bb77aef82335",
                "additions": 1,
                "deletions": 3,
                "patch": "@@ -177,9 +177,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-export function resolveSlots (\n-  renderChildren?: Array<any> | () => Array<any> | string\n-): Object {\n+export function resolveSlots (renderChildren: any): Object {\n   const slots = {}\n   if (!renderChildren) {\n     return slots"
            },
            {
                "commitId": "23a22cbb44f8a6796e2489a101b6de4f997f4340",
                "additions": 9,
                "deletions": 8,
                "patch": "@@ -56,9 +56,7 @@ export function renderMixin (Vue: Class<Component>) {\n     vm.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n-    if (_renderChildren) {\n-      resolveSlots(vm, _renderChildren)\n-    }\n+    vm.$slots = resolveSlots(_renderChildren)\n     // render self\n     let vnode\n     try {\n@@ -179,11 +177,13 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-function resolveSlots (\n-  vm: Component,\n-  renderChildren: Array<any> | () => Array<any> | string\n-) {\n-  const slots = vm.$slots = {}\n+export function resolveSlots (\n+  renderChildren?: Array<any> | () => Array<any> | string\n+): Object {\n+  const slots = {}\n+  if (!renderChildren) {\n+    return slots\n+  }\n   const children = normalizeChildren(renderChildren) || []\n   const defaultSlot = []\n   let name, child\n@@ -208,4 +208,5 @@ function resolveSlots (\n   )) {\n     slots.default = defaultSlot\n   }\n+  return slots\n }"
            },
            {
                "commitId": "154e17abaed2f9c2d80507c28a474adea72337e6",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -148,7 +148,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // apply v-bind object\n-  Vue.prototype._b = function bindProps (vnode: VNodeWithData, value: any) {\n+  Vue.prototype._b = function bindProps (\n+    vnode: VNodeWithData,\n+    value: any,\n+    asProp?: boolean) {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -161,7 +164,7 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n         const data = vnode.data\n         for (const key in value) {\n-          const hash = config.mustUseProp(key)\n+          const hash = asProp || config.mustUseProp(key)\n             ? data.domProps || (data.domProps = {})\n             : data.attrs || (data.attrs = {})\n           hash[key] = value[key]"
            },
            {
                "commitId": "69ecdcb05e3f5db32af889962fe8253d49d7390d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -162,7 +162,7 @@ export function renderMixin (Vue: Class<Component>) {\n         const data = vnode.data\n         for (const key in value) {\n           const hash = config.mustUseProp(key)\n-            ? data.props || (data.props = {})\n+            ? data.domProps || (data.domProps = {})\n             : data.attrs || (data.attrs = {})\n           hash[key] = value[key]\n         }"
            },
            {
                "commitId": "2732fec59ed592c187b499b2ba5872d2242339cc",
                "additions": 24,
                "deletions": 5,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, isObject, toObject,\n+  warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n@@ -48,19 +48,38 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (staticRenderFns && !this._staticTrees) {\n-      this._staticTrees = []\n+    if (staticRenderFns && !vm._staticTrees) {\n+      vm._staticTrees = []\n     }\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n-    this.$vnode = _parentVnode\n+    vm.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    let vnode = render.call(vm._renderProxy, vm.$createElement)\n+    let vnode\n+    try {\n+      vnode = render.call(vm._renderProxy, vm.$createElement)\n+    } catch (e) {\n+      if (process.env.NODE_ENV !== 'production') {\n+        warn(`Error when rendering ${formatComponentName(vm)}:`)\n+      }\n+      /* istanbul ignore else */\n+      if (config.errorHandler) {\n+        config.errorHandler.call(null, e, vm)\n+      } else {\n+        if (config._isServer) {\n+          throw e\n+        } else {\n+          setTimeout(() => { throw e }, 0)\n+        }\n+      }\n+      // return previous vnode to prevent render error causing blank component\n+      vnode = vm._vnode\n+    }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "d0482a0faeeb79c250fc17e06de6c777e74bc618",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -167,7 +167,8 @@ function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    if ((name = child.data && child.data.slot)) {\n+    if (child.data && (name = child.data.slot)) {\n+      delete child.data.slot\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {\n         slot.push.apply(slot, child.children)"
            },
            {
                "commitId": "75a221e95fa797a7472ac8a25f97a8248a605737",
                "additions": 19,
                "deletions": 21,
                "patch": "@@ -162,29 +162,27 @@ function resolveSlots (\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n   const slots = vm.$slots = {}\n-  if (renderChildren) {\n-    const children = normalizeChildren(renderChildren) || []\n-    const defaultSlot = []\n-    let name, child\n-    for (let i = 0, l = children.length; i < l; i++) {\n-      child = children[i]\n-      if ((name = child.data && child.data.slot)) {\n-        const slot = (slots[name] || (slots[name] = []))\n-        if (child.tag === 'template') {\n-          slot.push.apply(slot, child.children)\n-        } else {\n-          slot.push(child)\n-        }\n+  const children = normalizeChildren(renderChildren) || []\n+  const defaultSlot = []\n+  let name, child\n+  for (let i = 0, l = children.length; i < l; i++) {\n+    child = children[i]\n+    if ((name = child.data && child.data.slot)) {\n+      const slot = (slots[name] || (slots[name] = []))\n+      if (child.tag === 'template') {\n+        slot.push.apply(slot, child.children)\n       } else {\n-        defaultSlot.push(child)\n+        slot.push(child)\n       }\n+    } else {\n+      defaultSlot.push(child)\n     }\n-    // ignore single whitespace\n-    if (defaultSlot.length && !(\n-      defaultSlot.length === 1 &&\n-      defaultSlot[0].text === ' '\n-    )) {\n-      slots.default = defaultSlot\n-    }\n+  }\n+  // ignore single whitespace\n+  if (defaultSlot.length && !(\n+    defaultSlot.length === 1 &&\n+    defaultSlot[0].text === ' '\n+  )) {\n+    slots.default = defaultSlot\n   }\n }"
            },
            {
                "commitId": "1a064a6dc94c9dd183963ebd00a6e25680786b96",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -161,9 +161,9 @@ function resolveSlots (\n   vm: Component,\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n+  const slots = vm.$slots = {}\n   if (renderChildren) {\n     const children = normalizeChildren(renderChildren) || []\n-    const slots = {}\n     const defaultSlot = []\n     let name, child\n     for (let i = 0, l = children.length; i < l; i++) {\n@@ -179,12 +179,12 @@ function resolveSlots (\n         defaultSlot.push(child)\n       }\n     }\n+    // ignore single whitespace\n     if (defaultSlot.length && !(\n       defaultSlot.length === 1 &&\n       defaultSlot[0].text === ' '\n     )) {\n-      slots['default'] = defaultSlot\n+      slots.default = defaultSlot\n     }\n-    vm.$slots = slots\n   }\n }"
            },
            {
                "commitId": "7630622689587b947c3ba03678a8f1d1e24ac71f",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -17,7 +17,8 @@ export const renderState: {\n }\n \n export function initRender (vm: Component) {\n-  vm._vnode = null\n+  vm.$vnode = null // the placeholder node in parent tree\n+  vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n@@ -50,7 +51,9 @@ export function renderMixin (Vue: Class<Component>) {\n     if (staticRenderFns && !this._staticTrees) {\n       this._staticTrees = []\n     }\n-\n+    // set parent vnode. this allows render functions to have access\n+    // to the data on the placeholder node.\n+    this.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {"
            },
            {
                "commitId": "5c6c8c7ed0b72461f1ed2e673c8f04cba300aaff",
                "additions": 19,
                "deletions": 3,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n import { encodeHTML } from 'entities'\n+import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const normalizeAsync = (cache, method) => {\n@@ -14,6 +15,18 @@ const normalizeAsync = (cache, method) => {\n   }\n }\n \n+const compilationCache = Object.create(null)\n+const normalizeRender = vm => {\n+  const { render, template } = vm.$options\n+  if (!render && template) {\n+    const renderFns = (\n+      compilationCache[template] ||\n+      (compilationCache[template] = compileToFunctions(template))\n+    )\n+    Object.assign(vm.$options, renderFns)\n+  }\n+}\n+\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n@@ -77,9 +90,11 @@ export function createRenderFunction (\n   }\n \n   function renderComponent (node, write, next, isRoot) {\n-    const child = createComponentInstanceForVnode(node)._render()\n-    child.parent = node\n-    renderNode(child, write, next, isRoot)\n+    const child = createComponentInstanceForVnode(node)\n+    normalizeRender(child)\n+    const childNode = child._render()\n+    childNode.parent = node\n+    renderNode(childNode, write, next, isRoot)\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n@@ -179,6 +194,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    normalizeRender(component)\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "e17f2ba20cdc44fabe9a6ca2baa6881debc1a992",
                "additions": 1,
                "deletions": 4,
                "patch": "@@ -1,11 +1,8 @@\n /* @flow */\n \n-import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-const encodeHTMLCached = cached(encodeHTML)\n-\n const normalizeAsync = (cache, method) => {\n   const fn = cache[method]\n   if (!fn) {\n@@ -74,7 +71,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.raw ? node.text : encodeHTMLCached(node.text), next)\n+        write(node.raw ? node.text : encodeHTML(node.text), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "bf9c46f435bad7fb8872febc03f577ee622e4df6",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -39,7 +39,7 @@ export function createRenderFunction (\n     if (node.componentOptions) {\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n-      const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+      const getKey = Ctor.options.serverCacheKey\n       if (getKey && cache) {\n         const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n@@ -62,7 +62,9 @@ export function createRenderFunction (\n       } else {\n         if (getKey) {\n           console.error(\n-            'Component implemented server.getCacheKey, ' +\n+            `[vue-server-renderer] Component ${\n+              Ctor.options.name || '(anonymous)'\n+            } implemented serverCacheKey, ` +\n             'but no cache was provided to the renderer.'\n           )\n         }"
            },
            {
                "commitId": "ba3bec824d9d12e7508291f788645c4b613b9fbe",
                "additions": 67,
                "deletions": 34,
                "patch": "@@ -2,21 +2,33 @@\n \n import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n-import LRU from 'lru-cache'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const encodeHTMLCached = cached(encodeHTML)\n-const defaultOptions = {\n-  max: 5000\n+\n+const normalizeAsync = (cache, method) => {\n+  const fn = cache[method]\n+  if (!fn) {\n+    return\n+  } else if (fn.length > 1) {\n+    return (key, cb) => fn.call(cache, key, cb)\n+  } else {\n+    return (key, cb) => cb(fn.call(cache, key))\n+  }\n }\n \n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n   isUnaryTag: Function,\n-  cacheOptions: Object\n+  cache: any\n ) {\n-  const cache = LRU(Object.assign({}, defaultOptions, cacheOptions))\n+  if (cache && (!cache.get || !cache.set)) {\n+    throw new Error('renderer cache must implement at least get & set.')\n+  }\n+\n+  const get = cache && normalizeAsync(cache, 'get')\n+  const has = cache && normalizeAsync(cache, 'has')\n \n   function renderNode (\n     node: VNode,\n@@ -28,35 +40,34 @@ export function createRenderFunction (\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n       const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n-      if (getKey) {\n+      if (getKey && cache) {\n         const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n-        if (cache.has(key)) {\n-          return write(cache.get(key), next)\n+        if (has) {\n+          has(key, hit => {\n+            if (hit) {\n+              get(key, res => write(res, next))\n+            } else {\n+              renderComponentWithCache(node, write, next, isRoot, cache, key)\n+            }\n+          })\n         } else {\n-          write.caching = true\n-          const buffer = write.cacheBuffer\n-          const bufferIndex = buffer.push('') - 1\n-          const _next = next\n-          next = () => {\n-            const result = buffer[bufferIndex]\n-            cache.set(key, result)\n-            if (bufferIndex === 0) {\n-              // this is a top-level cached component,\n-              // exit caching mode.\n-              write.caching = false\n+          get(key, res => {\n+            if (res) {\n+              write(res, next)\n             } else {\n-              // parent component is also being cached,\n-              // merge self into parent's result\n-              buffer[bufferIndex - 1] += result\n+              renderComponentWithCache(node, write, next, isRoot, cache, key)\n             }\n-            buffer.length = bufferIndex\n-            _next()\n-          }\n+          })\n         }\n+      } else {\n+        if (getKey) {\n+          console.error(\n+            'Component implemented server.getCacheKey, ' +\n+            'but no cache was provided to the renderer.'\n+          )\n+        }\n+        renderComponent(node, write, next, isRoot)\n       }\n-      const child = createComponentInstanceForVnode(node)._render()\n-      child.parent = node\n-      renderNode(child, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -66,12 +77,34 @@ export function createRenderFunction (\n     }\n   }\n \n-  function renderElement (\n-    el: VNode,\n-    write: Function,\n-    next: Function,\n-    isRoot: boolean\n-  ) {\n+  function renderComponent (node, write, next, isRoot) {\n+    const child = createComponentInstanceForVnode(node)._render()\n+    child.parent = node\n+    renderNode(child, write, next, isRoot)\n+  }\n+\n+  function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n+    write.caching = true\n+    const buffer = write.cacheBuffer\n+    const bufferIndex = buffer.push('') - 1\n+    renderComponent(node, write, () => {\n+      const result = buffer[bufferIndex]\n+      cache.set(key, result)\n+      if (bufferIndex === 0) {\n+        // this is a top-level cached component,\n+        // exit caching mode.\n+        write.caching = false\n+      } else {\n+        // parent component is also being cached,\n+        // merge self into parent's result\n+        buffer[bufferIndex - 1] += result\n+      }\n+      buffer.length = bufferIndex\n+      next()\n+    }, isRoot)\n+  }\n+\n+  function renderElement (el, write, next, isRoot) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}"
            },
            {
                "commitId": "1b3b19491fd47f3634e30d7fcce991881de16530",
                "additions": 19,
                "deletions": 21,
                "patch": "@@ -8,11 +8,7 @@ import {\n   nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n-import {\n-  renderElement,\n-  renderElementWithChildren,\n-  renderStatic\n-} from '../vdom/create-element'\n+import { createElement } from '../vdom/create-element'\n \n export const renderState: {\n   activeInstance: ?Component\n@@ -26,14 +22,7 @@ export function initRender (vm: Component) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(function (\n-    tag?: string | Class<Component> | Function | Object,\n-    data?: VNodeData,\n-    children?: VNodeChildren,\n-    namespace?: string\n-  ) {\n-    return this._h(this._e(tag, data, namespace), children)\n-  }, vm)\n+  vm.$createElement = bind(createElement, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -88,22 +77,29 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype._h = renderElementWithChildren\n-  Vue.prototype._e = renderElement\n-  Vue.prototype._m = renderStatic\n+  Vue.prototype._h = createElement\n   // toString for mustaches\n   Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n \n+  //\n+  Vue.prototype._m = function renderStatic (index?: number): Object | void {\n+    return this._staticTrees[index] || (\n+      this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n+        this._renderProxy\n+      )\n+    )\n+  }\n+\n   // filter resolution helper\n   const identity = _ => _\n-  Vue.prototype._f = function (id) {\n+  Vue.prototype._f = function resolveFilter (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }\n \n   // render v-for\n-  Vue.prototype._l = function (\n+  Vue.prototype._l = function renderList (\n     val: any,\n     render: () => VNode\n   ): ?Array<VNode> {\n@@ -130,7 +126,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // apply v-bind object\n-  Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n+  Vue.prototype._b = function bindProps (vnode: VNodeWithData, value: any) {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -153,15 +149,17 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // expose v-on keyCodes\n-  Vue.prototype._k = key => config.keyCodes[key]\n+  Vue.prototype._k = function getKeyCodes (key: string): any {\n+    return config.keyCodes[key]\n+  }\n }\n \n function resolveSlots (\n   vm: Component,\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n   if (renderChildren) {\n-    const children = normalizeChildren(renderChildren)\n+    const children = normalizeChildren(renderChildren) || []\n     const slots = {}\n     const defaultSlot = []\n     let name, child"
            },
            {
                "commitId": "cf8aeddc122dc13870ac07eff1574b2c172feb18",
                "additions": 2,
                "deletions": 5,
                "patch": "@@ -5,13 +5,12 @@ import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, bind, isObject, toObject,\n-  nextTick, resolveAsset, renderString, toNumber\n+  nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n import {\n   renderElement,\n   renderElementWithChildren,\n-  renderText,\n   renderStatic\n } from '../vdom/create-element'\n \n@@ -91,11 +90,9 @@ export function renderMixin (Vue: Class<Component>) {\n   // shorthands used in render functions\n   Vue.prototype._h = renderElementWithChildren\n   Vue.prototype._e = renderElement\n-  Vue.prototype._t = renderText\n   Vue.prototype._m = renderStatic\n-\n   // toString for mustaches\n-  Vue.prototype._s = renderString\n+  Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n "
            },
            {
                "commitId": "51db34103a8f76dc314578d202af0465177d30f8",
                "additions": 16,
                "deletions": 8,
                "patch": "@@ -33,16 +33,24 @@ export function createRenderFunction (\n         if (cache.has(key)) {\n           return write(cache.get(key), next)\n         } else {\n-          if (!write.caching) {\n-            // initialize if not already caching\n-            write.caching = true\n-            const _next = next\n-            next = () => {\n-              cache.set(key, write.buffer)\n+          write.caching = true\n+          const buffer = write.cacheBuffer\n+          const bufferIndex = buffer.push('') - 1\n+          const _next = next\n+          next = () => {\n+            const result = buffer[bufferIndex]\n+            cache.set(key, result)\n+            if (bufferIndex === 0) {\n+              // this is a top-level cached component,\n+              // exit caching mode.\n               write.caching = false\n-              write.buffer = ''\n-              _next()\n+            } else {\n+              // parent component is also being cached,\n+              // merge self into parent's result\n+              buffer[bufferIndex - 1] += result\n             }\n+            buffer.length = bufferIndex\n+            _next()\n           }\n         }\n       }"
            },
            {
                "commitId": "651263bb78bb4de3d0c9bfeda767a5290f6018c8",
                "additions": 26,
                "deletions": 26,
                "patch": "@@ -25,9 +25,28 @@ export function createRenderFunction (\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child =\n-        getCachedComponent(node) ||\n-        createComponentInstanceForVnode(node)._render()\n+      // check cache hit\n+      const Ctor = node.componentOptions.Ctor\n+      const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+      if (getKey) {\n+        const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+        if (cache.has(key)) {\n+          return write(cache.get(key), next)\n+        } else {\n+          if (!write.caching) {\n+            // initialize if not already caching\n+            write.caching = true\n+            const _next = next\n+            next = () => {\n+              cache.set(key, write.buffer)\n+              write.caching = false\n+              write.buffer = ''\n+              _next()\n+            }\n+          }\n+        }\n+      }\n+      const child = createComponentInstanceForVnode(node)._render()\n       child.parent = node\n       renderNode(child, write, next, isRoot)\n     } else {\n@@ -39,21 +58,6 @@ export function createRenderFunction (\n     }\n   }\n \n-  function getCachedComponent (node) {\n-    const Ctor = node.componentOptions.Ctor\n-    const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n-    if (getKey) {\n-      const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n-      if (cache.has(key)) {\n-        return cache.get(key)\n-      } else {\n-        const res = createComponentInstanceForVnode(node)._render()\n-        cache.set(key, res)\n-        return res\n-      }\n-    }\n-  }\n-\n   function renderElement (\n     el: VNode,\n     write: Function,\n@@ -94,9 +98,6 @@ export function createRenderFunction (\n   }\n \n   function renderStartingTag (node: VNode) {\n-    if (node._rendered) {\n-      return node._rendered\n-    }\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -124,14 +125,13 @@ export function createRenderFunction (\n     if (node.host && (scopeId = node.host.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n-    let _node = node\n-    while (_node) {\n-      if ((scopeId = _node.context.$options._scopeId)) {\n+    while (node) {\n+      if ((scopeId = node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n-      _node = _node.parent\n+      node = node.parent\n     }\n-    return (node._rendered = markup + '>')\n+    return markup + '>'\n   }\n \n   return function render ("
            },
            {
                "commitId": "c902e1f9ab91b3a8048f1a576396abdeeea41d20",
                "additions": 34,
                "deletions": 6,
                "patch": "@@ -2,23 +2,32 @@\n \n import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n+import LRU from 'lru-cache'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const encodeHTMLCached = cached(encodeHTML)\n+const defaultOptions = {\n+  max: 5000\n+}\n \n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n-  isUnaryTag: Function\n+  isUnaryTag: Function,\n+  cacheOptions: Object\n ) {\n+  const cache = LRU(Object.assign({}, defaultOptions, cacheOptions))\n+\n   function renderNode (\n     node: VNode,\n     write: Function,\n     next: Function,\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child = createComponentInstanceForVnode(node)._render()\n+      const child =\n+        getCachedComponent(node) ||\n+        createComponentInstanceForVnode(node)._render()\n       child.parent = node\n       renderNode(child, write, next, isRoot)\n     } else {\n@@ -30,6 +39,21 @@ export function createRenderFunction (\n     }\n   }\n \n+  function getCachedComponent (node) {\n+    const Ctor = node.componentOptions.Ctor\n+    const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+    if (getKey) {\n+      const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+      if (cache.has(key)) {\n+        return cache.get(key)\n+      } else {\n+        const res = createComponentInstanceForVnode(node)._render()\n+        cache.set(key, res)\n+        return res\n+      }\n+    }\n+  }\n+\n   function renderElement (\n     el: VNode,\n     write: Function,\n@@ -70,6 +94,9 @@ export function createRenderFunction (\n   }\n \n   function renderStartingTag (node: VNode) {\n+    if (node._rendered) {\n+      return node._rendered\n+    }\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -97,13 +124,14 @@ export function createRenderFunction (\n     if (node.host && (scopeId = node.host.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n-    while (node) {\n-      if ((scopeId = node.context.$options._scopeId)) {\n+    let _node = node\n+    while (_node) {\n+      if ((scopeId = _node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n-      node = node.parent\n+      _node = _node.parent\n     }\n-    return markup + '>'\n+    return (node._rendered = markup + '>')\n   }\n \n   return function render ("
            },
            {
                "commitId": "3fe127b05a0e12b5d05d4ddd0d2e5f85f223d475",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -5,7 +5,7 @@ import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, bind, isObject, toObject,\n-  nextTick, resolveAsset, renderString\n+  nextTick, resolveAsset, renderString, toNumber\n } from '../util/index'\n \n import {\n@@ -96,6 +96,8 @@ export function renderMixin (Vue: Class<Component>) {\n \n   // toString for mustaches\n   Vue.prototype._s = renderString\n+  // number conversion\n+  Vue.prototype._n = toNumber\n \n   // filter resolution helper\n   const identity = _ => _"
            },
            {
                "commitId": "f0efa9aad2f33c45ea8dfc5098cef86900b9ef98",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -154,7 +154,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // expose v-on keyCodes\n-  Vue.prototype._keyCode = key => config.keyCodes[key]\n+  Vue.prototype._k = key => config.keyCodes[key]\n }\n \n function resolveSlots ("
            },
            {
                "commitId": "4fe51a75a94464075055b45550a05e4680bb2b9f",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -152,6 +152,9 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n   }\n+\n+  // expose v-on keyCodes\n+  Vue.prototype._keyCode = key => config.keyCodes[key]\n }\n \n function resolveSlots ("
            },
            {
                "commitId": "41e46476a50c4fe08bd1de6423e84eef26e2b8f1",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -69,7 +69,7 @@ export function renderMixin (Vue: Class<Component>) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    let vnode = render.call(vm._renderProxy)\n+    let vnode = render.call(vm._renderProxy, vm.$createElement)\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -93,9 +93,12 @@ export function createRenderFunction (\n       }\n     }\n     // attach scoped CSS ID\n+    let scopeId\n+    if (node.host && (scopeId = node.host.$options._scopeId)) {\n+      markup += ` ${scopeId}`\n+    }\n     while (node) {\n-      const scopeId = node.context.$options._scopeId\n-      if (scopeId) {\n+      if ((scopeId = node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n       node = node.parent"
            },
            {
                "commitId": "b1351be073eda59724b3ede02753379fdc7d6829",
                "additions": 11,
                "deletions": 2,
                "patch": "@@ -18,8 +18,9 @@ export function createRenderFunction (\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child = createComponentInstanceForVnode(node)\n-      renderNode(child._render(), write, next, isRoot)\n+      const child = createComponentInstanceForVnode(node)._render()\n+      child.parent = node\n+      renderNode(child, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -91,6 +92,14 @@ export function createRenderFunction (\n         }\n       }\n     }\n+    // attach scoped CSS ID\n+    while (node) {\n+      const scopeId = node.context.$options._scopeId\n+      if (scopeId) {\n+        markup += ` ${scopeId}`\n+      }\n+      node = node.parent\n+    }\n     return markup + '>'\n   }\n "
            },
            {
                "commitId": "b0ad94fc876826a8ee3226320aacd40b8967f8dd",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,7 +1,11 @@\n /* @flow */\n \n+import { cached } from 'shared/util'\n+import { encodeHTML } from 'entities'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+const encodeHTMLCached = cached(encodeHTML)\n+\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n@@ -20,7 +24,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.text, next)\n+        write(node.raw ? node.text : encodeHTMLCached(node.text), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "cec833a9e8d71a9ed5deaecdccaceb1168641a2e",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -112,19 +112,19 @@ export function renderMixin (Vue: Class<Component>) {\n     if (Array.isArray(val)) {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n-        ret[i] = render(val[i], i, i)\n+        ret[i] = render(val[i], i)\n       }\n     } else if (typeof val === 'number') {\n       ret = new Array(val)\n       for (i = 0; i < val; i++) {\n-        ret[i] = render(i + 1, i, i)\n+        ret[i] = render(i + 1, i)\n       }\n     } else if (isObject(val)) {\n       keys = Object.keys(val)\n       ret = new Array(keys.length)\n       for (i = 0, l = keys.length; i < l; i++) {\n         key = keys[i]\n-        ret[i] = render(val[key], i, key)\n+        ret[i] = render(val[key], key, i)\n       }\n     }\n     return ret"
            },
            {
                "commitId": "894d214e9367be653bf22429085906682fcd874a",
                "additions": 16,
                "deletions": 10,
                "patch": "@@ -47,13 +47,22 @@ export function renderMixin (Vue: Class<Component>) {\n \n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n+\n+    // set current active instance\n     const prev = renderState.activeInstance\n     renderState.activeInstance = vm\n-    if (!vm._isMounted) {\n+\n+    const {\n+      render,\n+      staticRenderFns,\n+      _renderChildren,\n+      _parentVnode\n+    } = vm.$options\n+\n+    if (staticRenderFns && !vm._staticTrees) {\n       // render static sub-trees for once on initial render\n-      renderStaticTrees(vm)\n+      renderStaticTrees(vm, staticRenderFns)\n     }\n-    const { render, _renderChildren, _parentVnode } = vm.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n@@ -145,13 +154,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-function renderStaticTrees (vm: Component) {\n-  const staticRenderFns = vm.$options.staticRenderFns\n-  if (staticRenderFns) {\n-    const trees = vm._staticTrees = new Array(staticRenderFns.length)\n-    for (let i = 0; i < staticRenderFns.length; i++) {\n-      trees[i] = staticRenderFns[i].call(vm._renderProxy)\n-    }\n+function renderStaticTrees (vm: Component, fns: Array<Function>) {\n+  const trees = vm._staticTrees = new Array(fns.length)\n+  for (let i = 0; i < fns.length; i++) {\n+    trees[i] = fns[i].call(vm._renderProxy)\n   }\n }\n "
            },
            {
                "commitId": "a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -70,7 +70,7 @@ export function renderMixin (Vue: Class<Component>) {\n           vm\n         )\n       }\n-      vnode = emptyVNode\n+      vnode = emptyVNode()\n     }\n     // set parent\n     vnode.parent = _parentVnode"
            },
            {
                "commitId": "026198caf1545bf0f82831f19e1f18f1212e84d2",
                "additions": 1,
                "deletions": 15,
                "patch": "@@ -35,20 +35,6 @@ export function initRender (vm: Component) {\n   ) {\n     return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n-  // for abstract components, determine first non-abstract parent\n-  // so that the children of abstract components are considered children\n-  // of the first non-abstract parent.\n-  // this is used by internal abstract components like <keep-alive>.\n-  if (vm.$options._abstract) {\n-    let parent = vm.$parent\n-    /* istanbul ignore next */\n-    while (parent && parent.$options._abstract) {\n-      parent = parent.$parent\n-    }\n-    vm._renderParent = parent\n-  } else {\n-    vm._renderParent = vm\n-  }\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -62,7 +48,7 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n     const prev = renderState.activeInstance\n-    renderState.activeInstance = vm._renderParent\n+    renderState.activeInstance = vm\n     if (!vm._isMounted) {\n       // render static sub-trees for once on initial render\n       renderStaticTrees(vm)"
            },
            {
                "commitId": "2091c8525f5e0dca47c9672323f91449832688b7",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -41,6 +41,7 @@ export function initRender (vm: Component) {\n   // this is used by internal abstract components like <keep-alive>.\n   if (vm.$options._abstract) {\n     let parent = vm.$parent\n+    /* istanbul ignore next */\n     while (parent && parent.$options._abstract) {\n       parent = parent.$parent\n     }"
            },
            {
                "commitId": "cb67ffe4429ebfbdf42b5d18e1e1b168109d472e",
                "additions": 15,
                "deletions": 2,
                "patch": "@@ -16,7 +16,7 @@ import {\n } from '../vdom/create-element'\n \n export const renderState: {\n-  activeInstance: Component | null\n+  activeInstance: ?Component\n } = {\n   activeInstance: null\n }\n@@ -35,6 +35,19 @@ export function initRender (vm: Component) {\n   ) {\n     return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n+  // for abstract components, determine first non-abstract parent\n+  // so that the children of abstract components are considered children\n+  // of the first non-abstract parent.\n+  // this is used by internal abstract components like <keep-alive>.\n+  if (vm.$options._abstract) {\n+    let parent = vm.$parent\n+    while (parent && parent.$options._abstract) {\n+      parent = parent.$parent\n+    }\n+    vm._renderParent = parent\n+  } else {\n+    vm._renderParent = vm\n+  }\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -48,7 +61,7 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n     const prev = renderState.activeInstance\n-    renderState.activeInstance = vm\n+    renderState.activeInstance = vm._renderParent\n     if (!vm._isMounted) {\n       // render static sub-trees for once on initial render\n       renderStaticTrees(vm)"
            },
            {
                "commitId": "113232f960c359bdbe56fac59b6f9e3b7cc9290a",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -66,7 +66,8 @@ export function renderMixin (Vue: Class<Component>) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n         warn(\n           'Multiple root nodes returned from render function. Render function ' +\n-          'should return a single root node.'\n+          'should return a single root node.',\n+          vm\n         )\n       }\n       vnode = emptyVNode"
            },
            {
                "commitId": "060fab9ec1d7df09312fb301f092b6790cf1cd46",
                "additions": 1,
                "deletions": 29,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, remove, isObject, toObject,\n+  warn, bind, isObject, toObject,\n   nextTick, resolveAsset, renderString\n } from '../util/index'\n \n@@ -120,34 +120,6 @@ export function renderMixin (Vue: Class<Component>) {\n     return ret\n   }\n \n-  // register ref\n-  Vue.prototype._r = function (\n-    key: string,\n-    ref: Vue | Element,\n-    vFor: boolean,\n-    isRemoval: boolean\n-  ) {\n-    const vm: Component = this\n-    const refs = vm.$refs\n-    if (isRemoval) {\n-      if (Array.isArray(refs[key])) {\n-        remove(refs[key], ref)\n-      } else {\n-        refs[key] = undefined\n-      }\n-    } else {\n-      if (vFor) {\n-        if (Array.isArray(refs[key])) {\n-          refs[key].push(ref)\n-        } else {\n-          refs[key] = [ref]\n-        }\n-      } else {\n-        refs[key] = ref\n-      }\n-    }\n-  }\n-\n   // apply v-bind object\n   Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n     if (value) {"
            },
            {
                "commitId": "43da334ec164a83aafcaa475e10611dbf0d941db",
                "additions": 6,
                "deletions": 0,
                "patch": "@@ -63,6 +63,12 @@ export function renderMixin (Vue: Class<Component>) {\n     let vnode = render.call(vm._renderProxy)\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n+      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n+        warn(\n+          'Multiple root nodes returned from render function. Render function ' +\n+          'should return a single root node.'\n+        )\n+      }\n       vnode = emptyVNode\n     }\n     // set parent"
            },
            {
                "commitId": "3a0557a317d6e8fd96bf543e7b71d39e4e7c257b",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -184,9 +184,8 @@ function resolveSlots (\n     const children = normalizeChildren(renderChildren)\n     const slots = {}\n     const defaultSlot = []\n-    let i = children.length\n     let name, child\n-    while (i--) {\n+    for (let i = 0, l = children.length; i < l; i++) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n         const slot = (slots[name] || (slots[name] = []))"
            },
            {
                "commitId": "cb915d012074e79b9f81a758ed0253ba4d98ebc4",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, remove, extend, isObject, toObject,\n+  warn, bind, remove, isObject, toObject,\n   nextTick, resolveAsset, renderString\n } from '../util/index'\n "
            },
            {
                "commitId": "8d229b2442e8cc5b2801fa55a4ea8ea766721381",
                "additions": 28,
                "deletions": 2,
                "patch": "@@ -1,9 +1,12 @@\n /* @flow */\n \n+import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n-import { resolveAsset, nextTick } from '../util/index'\n-import { bind, remove, extend, isObject, renderString } from 'shared/util'\n+import {\n+  warn, bind, remove, extend, isObject, toObject,\n+  nextTick, resolveAsset, renderString\n+} from '../util/index'\n \n import {\n   renderElement,\n@@ -138,6 +141,29 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n   }\n+\n+  // apply v-bind object\n+  Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n+    if (value) {\n+      if (!isObject(value)) {\n+        process.env.NODE_ENV !== 'production' && warn(\n+          'v-bind without argument expects an Object or Array value',\n+          this\n+        )\n+      } else {\n+        if (Array.isArray(value)) {\n+          value = toObject(value)\n+        }\n+        const data = vnode.data\n+        for (const key in value) {\n+          const hash = config.mustUseProp(key)\n+            ? data.props || (data.props = {})\n+            : data.attrs || (data.attrs = {})\n+          hash[key] = value[key]\n+        }\n+      }\n+    }\n+  }\n }\n \n function renderStaticTrees (vm: Component) {"
            },
            {
                "commitId": "54e648e49f3ef6e671a23430047c5c40b75809a7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -2,8 +2,8 @@\n \n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n-import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n+import { bind, remove, extend, isObject, renderString } from 'shared/util'\n \n import {\n   renderElement,"
            },
            {
                "commitId": "0a15d9ee27a9314c0192c6174509a230279ed344",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import { emptyVNode } from '../vdom/vnode'\n+import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n@@ -57,7 +57,11 @@ export function renderMixin (Vue: Class<Component>) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(vm._renderProxy) || emptyVNode\n+    let vnode = render.call(vm._renderProxy)\n+    // return empty vnode in case the render function errored out\n+    if (!(vnode instanceof VNode)) {\n+      vnode = emptyVNode\n+    }\n     // set parent\n     vnode.parent = _parentVnode\n     // restore render state"
            },
            {
                "commitId": "6fe268874ca2ea9297ca64830b38f8179d51fce2",
                "additions": 9,
                "deletions": 9,
                "patch": "@@ -30,7 +30,7 @@ export function initRender (vm: Component) {\n     children?: VNodeChildren,\n     namespace?: string\n   ) {\n-    return this.__r__(this.__s__(tag, data, namespace), children)\n+    return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n@@ -66,22 +66,22 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__r__ = renderElementWithChildren\n-  Vue.prototype.__s__ = renderElement\n-  Vue.prototype.__t__ = renderText\n-  Vue.prototype.__m__ = renderStatic\n+  Vue.prototype._h = renderElementWithChildren\n+  Vue.prototype._e = renderElement\n+  Vue.prototype._t = renderText\n+  Vue.prototype._m = renderStatic\n \n   // toString for mustaches\n-  Vue.prototype.__toString__ = renderString\n+  Vue.prototype._s = renderString\n \n   // filter resolution helper\n   const identity = _ => _\n-  Vue.prototype.__resolveFilter__ = function (id) {\n+  Vue.prototype._f = function (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }\n \n   // render v-for\n-  Vue.prototype.__renderList__ = function (\n+  Vue.prototype._l = function (\n     val: any,\n     render: () => VNode\n   ): ?Array<VNode> {\n@@ -108,7 +108,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // register ref\n-  Vue.prototype.__registerRef__ = function (\n+  Vue.prototype._r = function (\n     key: string,\n     ref: Vue | Element,\n     vFor: boolean,"
            },
            {
                "commitId": "2dc5b1782871d87a7c795361eac0d49fd396c05f",
                "additions": 9,
                "deletions": 3,
                "patch": "@@ -1,11 +1,17 @@\n /* @flow */\n \n-import { renderElement, renderSelf, renderText, renderStatic } from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n \n+import {\n+  renderElement,\n+  renderElementWithChildren,\n+  renderText,\n+  renderStatic\n+} from '../vdom/create-element'\n+\n export const renderState: {\n   activeInstance: Component | null\n } = {\n@@ -60,8 +66,8 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__r__ = renderElement\n-  Vue.prototype.__s__ = renderSelf\n+  Vue.prototype.__r__ = renderElementWithChildren\n+  Vue.prototype.__s__ = renderElement\n   Vue.prototype.__t__ = renderText\n   Vue.prototype.__m__ = renderStatic\n "
            },
            {
                "commitId": "20fb79a1ea098bedda6fec8bebbb184ac51fce20",
                "additions": 13,
                "deletions": 3,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import createElement from '../vdom/create-element'\n+import { renderElement, renderSelf, renderText, renderStatic } from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n@@ -18,7 +18,14 @@ export function initRender (vm: Component) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(createElement, vm)\n+  vm.$createElement = bind(function (\n+    tag?: string | Class<Component> | Function | Object,\n+    data?: VNodeData,\n+    children?: VNodeChildren,\n+    namespace?: string\n+  ) {\n+    return this.__r__(this.__s__(tag, data, namespace), children)\n+  }, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -53,7 +60,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__h__ = createElement\n+  Vue.prototype.__r__ = renderElement\n+  Vue.prototype.__s__ = renderSelf\n+  Vue.prototype.__t__ = renderText\n+  Vue.prototype.__m__ = renderStatic\n \n   // toString for mustaches\n   Vue.prototype.__toString__ = renderString"
            },
            {
                "commitId": "ff16f7491f546c5acd40ee2290caa5d553eff3be",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -1,6 +1,5 @@\n /* @flow */\n \n-import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n export function createRenderFunction ("
            },
            {
                "commitId": "45d96c7dbc399696138c9d020e13f97cf94ce181",
                "additions": 17,
                "deletions": 3,
                "patch": "@@ -8,7 +8,12 @@ export function createRenderFunction (\n   directives: Object,\n   isUnaryTag: Function\n ) {\n-  function renderNode (node: VNode, write: Function, next: Function, isRoot: boolean) {\n+  function renderNode (\n+    node: VNode,\n+    write: Function,\n+    next: Function,\n+    isRoot: boolean\n+  ) {\n     if (node.componentOptions) {\n       const child = createComponentInstanceForVnode(node)\n       renderNode(child._render(), write, next, isRoot)\n@@ -21,7 +26,12 @@ export function createRenderFunction (\n     }\n   }\n \n-  function renderElement (el: VNode, write: Function, next: Function, isRoot: boolean) {\n+  function renderElement (\n+    el: VNode,\n+    write: Function,\n+    next: Function,\n+    isRoot: boolean\n+  ) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}\n@@ -81,7 +91,11 @@ export function createRenderFunction (\n     return markup + '>'\n   }\n \n-  return function render (component: Component, write: Function, done: Function) {\n+  return function render (\n+    component: Component,\n+    write: (text: string, next: Function) => void,\n+    done: Function\n+  ) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "1b7ab89a5deb49fbdaec8fb474108863714f99a7",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -1,6 +1,5 @@\n /* @flow */\n \n-import type Vue from 'core/instance/index'\n import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n@@ -82,7 +81,7 @@ export function createRenderFunction (\n     return markup + '>'\n   }\n \n-  return function render (component: Vue, write: Function, done: Function) {\n+  return function render (component: Component, write: Function, done: Function) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "a953bdeeb642fafb0a5426f54f68026d26fe345f",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,7 +5,7 @@ import type VNode from '../vdom/vnode'\n import createElement from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n-import { bind, remove, isArray, isObject, renderString } from 'shared/util'\n+import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n \n export const renderState = {\n@@ -69,7 +69,7 @@ export function renderMixin (Vue: Class<Vue>) {\n     render: () => VNode\n   ): ?Array<VNode> {\n     let ret: ?Array<VNode>, i, l, keys, key\n-    if (isArray(val)) {\n+    if (Array.isArray(val)) {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n         ret[i] = render(val[i], i, i)"
            },
            {
                "commitId": "354ea616b5ec4826e23a88465e404fd3b382d9f4",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -1,5 +1,7 @@\n /* @flow */\n \n+import type Vue from 'core/instance/index'\n+import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n export function createRenderFunction ("
            },
            {
                "commitId": "6d712753d8982d587d1dcfdbce2833f19f0b5a26",
                "additions": 17,
                "deletions": 10,
                "patch": "@@ -1,7 +1,13 @@\n+/* @flow */\n+\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-export function createRenderFunction (modules, directives, isUnaryTag) {\n-  function renderNode (node, write, next, isRoot) {\n+export function createRenderFunction (\n+  modules: Array<Function>,\n+  directives: Object,\n+  isUnaryTag: Function\n+) {\n+  function renderNode (node: VNode, write: Function, next: Function, isRoot: boolean) {\n     if (node.componentOptions) {\n       const child = createComponentInstanceForVnode(node)\n       renderNode(child._render(), write, next, isRoot)\n@@ -14,7 +20,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  function renderElement (el, write, next, isRoot) {\n+  function renderElement (el: VNode, write: Function, next: Function, isRoot: boolean) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}\n@@ -27,27 +33,28 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     } else if (!el.children || !el.children.length) {\n       write(startTag + endTag, next)\n     } else {\n+      const children: Array<VNode> = el.children || []\n       write(startTag, () => {\n-        const total = el.children.length\n+        const total = children.length\n         let rendered = 0\n \n-        function renderChild (child) {\n+        function renderChild (child: VNode) {\n           renderNode(child, write, () => {\n             rendered++\n             if (rendered < total) {\n-              renderChild(el.children[rendered])\n+              renderChild(children[rendered])\n             } else {\n               write(endTag, next)\n             }\n-          })\n+          }, false)\n         }\n \n-        renderChild(el.children[0])\n+        renderChild(children[0])\n       })\n     }\n   }\n \n-  function renderStartingTag (node) {\n+  function renderStartingTag (node: VNode) {\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -73,7 +80,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     return markup + '>'\n   }\n \n-  return function render (component, write, done) {\n+  return function render (component: Vue, write: Function, done: Function) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "76d06ba422e32303f906941fe0d4f19e51b30720",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -1,3 +1,4 @@\n+import config from '../config'\n import createElement from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n@@ -25,6 +26,12 @@ export function renderMixin (Vue) {\n     nextTick(fn, this)\n   }\n \n+  Object.defineProperty(Vue.prototype, '$isServer', {\n+    get () {\n+      return config._isServer\n+    }\n+  })\n+\n   Vue.prototype._render = function () {\n     if (!this._mounted) {\n       // render static sub-trees for once on initial render"
            },
            {
                "commitId": "6593be9f75ea229e71e5b0530bb0f27aeee57afc",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,4 +1,5 @@\n import createElement from '../vdom/create-element'\n+import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n@@ -38,7 +39,7 @@ export function renderMixin (Vue) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(this._renderProxy)\n+    const vnode = render.call(this._renderProxy) || emptyVNode\n     // set parent\n     vnode.parent = _parentVnode\n     // restore render state"
            },
            {
                "commitId": "8172e7e25728a696df32df063443cf3d7cc8029b",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -74,7 +74,6 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n   }\n \n   return function render (component, write, done) {\n-    component._renderStaticTrees()\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "8f5a32b91cca7901c47f27d983649d00eef35609",
                "additions": 4,
                "deletions": 19,
                "patch": "@@ -1,25 +1,10 @@\n+import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n+\n export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n-      const options = {\n-        parent,\n-        propsData,\n-        _parentVnode: node,\n-        _parentListeners: listeners,\n-        _renderChildren: children\n-      }\n-      // check inline-template render functions\n-      const inlineTemplate = node.data.inlineTemplate\n-      if (inlineTemplate) {\n-        options.render = inlineTemplate.render\n-        options.staticRenderFns = inlineTemplate.staticRenderFns\n-      }\n-      const child = new Ctor(options)\n-      child._renderStaticTrees()\n-      const childRoot = child._render()\n-      childRoot.parent = node\n-      renderNode(childRoot, write, next, isRoot)\n+      const child = createComponentInstanceForVnode(node)\n+      renderNode(child._render(), write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)"
            },
            {
                "commitId": "2b7c26d108b31e0cf91f4931fe5b19e77f75bb7e",
                "additions": 31,
                "deletions": 8,
                "patch": "@@ -1,5 +1,3 @@\n-import { renderStartingTag } from './render-starting-tag'\n-\n export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n@@ -18,11 +16,10 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n         options.staticRenderFns = inlineTemplate.staticRenderFns\n       }\n       const child = new Ctor(options)\n-      child._mount = () => {\n-        child._renderStaticTrees()\n-        renderNode(child._render(), write, next)\n-      }\n-      child.$mount(node.elm)\n+      child._renderStaticTrees()\n+      const childRoot = child._render()\n+      childRoot.parent = node\n+      renderNode(childRoot, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -38,7 +35,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n       if (!el.data.attrs) el.data.attrs = {}\n       el.data.attrs['server-rendered'] = 'true'\n     }\n-    const startTag = renderStartingTag(el, modules, directives)\n+    const startTag = renderStartingTag(el)\n     const endTag = `</${el.tag}>`\n     if (isUnaryTag(el.tag)) {\n       write(startTag, next)\n@@ -65,6 +62,32 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     }\n   }\n \n+  function renderStartingTag (node) {\n+    let markup = `<${node.tag}`\n+    if (node.data) {\n+      // check directives\n+      const dirs = node.data.directives\n+      if (dirs) {\n+        for (let i = 0; i < dirs.length; i++) {\n+          const dirRenderer = directives[dirs[i].name]\n+          if (dirRenderer) {\n+            // directives mutate the node's data\n+            // which then gets rendered by modules\n+            dirRenderer(node, dirs[i])\n+          }\n+        }\n+      }\n+      // apply other modules\n+      for (let i = 0; i < modules.length; i++) {\n+        const res = modules[i](node)\n+        if (res) {\n+          markup += res\n+        }\n+      }\n+    }\n+    return markup + '>'\n+  }\n+\n   return function render (component, write, done) {\n     component._renderStaticTrees()\n     renderNode(component._render(), write, done, true)"
            },
            {
                "commitId": "430fe64bb5907cefc21b8f670f86f268f68e5ad8",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,6 +1,6 @@\n import { renderStartingTag } from './render-starting-tag'\n \n-export function render (modules, directives, isUnaryTag) {\n+export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n       const { Ctor, propsData, listeners, parent, children } = node.componentOptions"
            },
            {
                "commitId": "270b0ac021ee5bfff6b2ed1eacaf91a09f2a9d5e",
                "additions": 24,
                "deletions": 13,
                "patch": "@@ -1,16 +1,28 @@\n-import RenderStream from './render-stream'\n import { renderStartingTag } from './render-starting-tag'\n \n-export function createStreamingRenderer (modules, directives, isUnaryTag) {\n-  function renderComponent (component, write, next, isRoot) {\n-    component.$mount()\n-    renderNode(component._vnode, write, next, isRoot)\n-  }\n-\n+export function render (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      node.data.hook.init(node)\n-      renderComponent(node.child, write, next, isRoot)\n+      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n+      const options = {\n+        parent,\n+        propsData,\n+        _parentVnode: node,\n+        _parentListeners: listeners,\n+        _renderChildren: children\n+      }\n+      // check inline-template render functions\n+      const inlineTemplate = node.data.inlineTemplate\n+      if (inlineTemplate) {\n+        options.render = inlineTemplate.render\n+        options.staticRenderFns = inlineTemplate.staticRenderFns\n+      }\n+      const child = new Ctor(options)\n+      child._mount = () => {\n+        child._renderStaticTrees()\n+        renderNode(child._render(), write, next)\n+      }\n+      child.$mount(node.elm)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -53,9 +65,8 @@ export function createStreamingRenderer (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  return function renderToStream (component) {\n-    return new RenderStream((write, done) => {\n-      renderComponent(component, write, done, true)\n-    })\n+  return function render (component, write, done) {\n+    component._renderStaticTrees()\n+    renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "96f02660a2f72cf2b2f4087f51a24942f55af7dd",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,7 +1,7 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n-import { resolveAsset } from '../util/options'\n+import { resolveAsset, nextTick } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -21,6 +21,10 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  Vue.prototype.$nextTick = function (fn) {\n+    nextTick(fn, this)\n+  }\n+\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this"
            },
            {
                "commitId": "d89c674cb53128f21bac25962760fff8bd5917b5",
                "additions": 22,
                "deletions": 8,
                "patch": "@@ -1,15 +1,28 @@\n import { renderStartingTag } from './render-starting-tag'\n \n export function render (modules, directives, isUnaryTag) {\n-  function renderComponent (component, write, next, isRoot) {\n-    component.$mount()\n-    renderNode(component._vnode, write, next, isRoot)\n-  }\n-\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      node.data.hook.init(node)\n-      renderComponent(node.child, write, next, isRoot)\n+      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n+      const options = {\n+        parent,\n+        propsData,\n+        _parentVnode: node,\n+        _parentListeners: listeners,\n+        _renderChildren: children\n+      }\n+      // check inline-template render functions\n+      const inlineTemplate = node.data.inlineTemplate\n+      if (inlineTemplate) {\n+        options.render = inlineTemplate.render\n+        options.staticRenderFns = inlineTemplate.staticRenderFns\n+      }\n+      const child = new Ctor(options)\n+      child._mount = () => {\n+        child._renderStaticTrees()\n+        renderNode(child._render(), write, next)\n+      }\n+      child.$mount(node.elm)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -53,6 +66,7 @@ export function render (modules, directives, isUnaryTag) {\n   }\n \n   return function render (component, write, done) {\n-    renderComponent(component, write, done, true)\n+    component._renderStaticTrees()\n+    renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "a233e4dbfae51173aefc4a1329aa0415d632ca25",
                "additions": 3,
                "deletions": 6,
                "patch": "@@ -1,7 +1,6 @@\n-import RenderStream from './render-stream'\n import { renderStartingTag } from './render-starting-tag'\n \n-export function createStreamingRenderer (modules, directives, isUnaryTag) {\n+export function render (modules, directives, isUnaryTag) {\n   function renderComponent (component, write, next, isRoot) {\n     component.$mount()\n     renderNode(component._vnode, write, next, isRoot)\n@@ -53,9 +52,7 @@ export function createStreamingRenderer (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  return function renderToStream (component) {\n-    return new RenderStream((write, done) => {\n-      renderComponent(component, write, done, true)\n-    })\n+  return function render (component, write, done) {\n+    renderComponent(component, write, done, true)\n   }\n }"
            },
            {
                "commitId": "9cc9393e73750943b9a254f80a02110144ee0288",
                "additions": 10,
                "deletions": 2,
                "patch": "@@ -99,7 +99,8 @@ export function renderMixin (Vue) {\n function resolveSlots (vm, renderChildren) {\n   if (renderChildren) {\n     const children = flatten(renderChildren())\n-    const slots = { default: children }\n+    const slots = {}\n+    const defaultSlot = []\n     let i = children.length\n     let name, child\n     while (i--) {\n@@ -111,9 +112,16 @@ function resolveSlots (vm, renderChildren) {\n         } else {\n           slot.push(child)\n         }\n-        children.splice(i, 1)\n+      } else {\n+        defaultSlot.push(child)\n       }\n     }\n+    if (defaultSlot.length && !(\n+      defaultSlot.length === 1 &&\n+      defaultSlot[0].text === ' '\n+    )) {\n+      slots['default'] = defaultSlot\n+    }\n     vm.$slots = slots\n   }\n }"
            },
            {
                "commitId": "3aa7503472d1a2fbfd789a7df309102de49f8fcf",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -105,7 +105,7 @@ function resolveSlots (vm, renderChildren) {\n     while (i--) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n-        let slot = (slots[name] || (slots[name] = []))\n+        const slot = (slots[name] || (slots[name] = []))\n         if (child.tag === 'template') {\n           slot.push.apply(slot, child.children)\n         } else {"
            },
            {
                "commitId": "9ff87a357eba00e40d44a2d5a25f6ac44fca70b9",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -1,6 +1,7 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n+import { resolveAsset } from '../util/options'\n \n export const renderState = {\n   activeInstance: null\n@@ -42,6 +43,12 @@ export function renderMixin (Vue) {\n   // toString for mustaches\n   Vue.prototype.__toString__ = renderString\n \n+  // filter resolution helper\n+  const identity = _ => _\n+  Vue.prototype.__resolveFilter__ = function (id) {\n+    return resolveAsset(this.$options, 'filters', id, true) || identity\n+  }\n+\n   // render v-for\n   Vue.prototype.__renderList__ = function (val, render) {\n     let ret, i, l, keys, key"
            },
            {
                "commitId": "6d889c011680f231ed5036b9233f23764c43e16a",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -89,9 +89,9 @@ export function renderMixin (Vue) {\n   }\n }\n \n-function resolveSlots (vm, children) {\n-  if (children) {\n-    children = flatten(isArray(children) ? children : children())\n+function resolveSlots (vm, renderChildren) {\n+  if (renderChildren) {\n+    const children = flatten(renderChildren())\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "a347820518388ae8c83cf8c665823daebfbd0da8",
                "additions": 2,
                "deletions": 8,
                "patch": "@@ -1,6 +1,6 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n-import { bind, isArray, isObject } from '../util/index'\n+import { bind, isArray, isObject, renderString } from 'shared/util'\n \n export const renderState = {\n   activeInstance: null\n@@ -40,13 +40,7 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = createElement\n \n   // toString for mustaches\n-  Vue.prototype.__toString__ = function (val) {\n-    return val == null\n-      ? ''\n-      : typeof val === 'object'\n-        ? JSON.stringify(val, null, 2)\n-        : val\n-  }\n+  Vue.prototype.__toString__ = renderString\n \n   // render v-for\n   Vue.prototype.__renderList__ = function (val, render) {"
            },
            {
                "commitId": "f4a2afb3b33991c1694e8fcb7d62641c30eeaf53",
                "additions": 1,
                "deletions": 18,
                "patch": "@@ -1,6 +1,6 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n-import { bind, resolveAsset, isArray, isObject } from '../util/index'\n+import { bind, isArray, isObject } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -39,23 +39,6 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n-  Vue.prototype.__static__ = function (id) {\n-    return this._staticTrees[id]\n-  }\n-\n-  // resolve directive\n-  Vue.prototype.__resolveDirective__ = function (id) {\n-    return resolveAsset(this.$options, 'directives', id, true)\n-  }\n-\n-  // resolve transition\n-  Vue.prototype.__resolveTransition__ = function (id, appear) {\n-    const definition = id && typeof id === 'string'\n-      ? resolveAsset(this.$options, 'transitions', id) || id\n-      : id\n-    return { definition, appear, context: this }\n-  }\n-\n   // toString for mustaches\n   Vue.prototype.__toString__ = function (val) {\n     return val == null"
            },
            {
                "commitId": "d6ce314c35bcc2a05d30ed14f18b21b5b81d928d",
                "additions": 0,
                "deletions": 7,
                "patch": "@@ -1,7 +0,0 @@\n-import attrs from './modules/attrs'\n-import style from './modules/style'\n-import klass from './modules/class'\n-\n-export function render () {\n-\n-}"
            },
            {
                "commitId": "1a21db9c9aef437122de86cb2dbc30c1feff8166",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -0,0 +1,7 @@\n+import attrs from './modules/attrs'\n+import style from './modules/style'\n+import klass from './modules/class'\n+\n+export function render () {\n+\n+}"
            },
            {
                "commitId": "955e2f839175fadbd0218f7b78c48ebbbcca6349",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "b882844f6ed8fb9e7d0ba493fcdd10a95d17b497",
                "additions": 5,
                "deletions": 0,
                "patch": "@@ -9,6 +9,7 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n+  vm._staticTrees = null\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -38,6 +39,10 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n+  Vue.prototype.__static__ = function (id) {\n+    return this._staticTrees[id]\n+  }\n+\n   // resolve directive\n   Vue.prototype.__resolveDirective__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)"
            },
            {
                "commitId": "6c8182ee4d3e60ee46d6fece9a21c7f59ae0e61c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -89,7 +89,7 @@ export function renderMixin (Vue) {\n     const refs = this.$refs\n     if (remove) {\n       if (vFor) {\n-        refs[key].$remove(ref)\n+        remove(refs[key], ref)\n       } else {\n         refs[key] = undefined\n       }"
            },
            {
                "commitId": "732c10a7e9559d26b0a54681d2bd90ddad63da52",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -44,10 +44,11 @@ export function renderMixin (Vue) {\n   }\n \n   // resolve transition\n-  Vue.prototype.__resolveTransition__ = function (id) {\n-    return id && typeof id === 'string'\n+  Vue.prototype.__resolveTransition__ = function (id, appear) {\n+    const definition = id && typeof id === 'string'\n       ? resolveAsset(this.$options, 'transitions', id) || id\n       : id\n+    return { definition, appear, context: this }\n   }\n \n   // toString for mustaches"
            },
            {
                "commitId": "7f7040c156951b392fb6ef75d15be65fd83007a0",
                "additions": 18,
                "deletions": 48,
                "patch": "@@ -1,13 +1,6 @@\n-import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten, updateListeners } from '../vdom/helpers'\n-import {\n-  bind,\n-  resolveAsset,\n-  isArray,\n-  isObject,\n-  validateProp\n-} from '../util/index'\n+import { flatten } from '../vdom/helpers'\n+import { bind, resolveAsset, isArray, isObject } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -26,6 +19,22 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  Vue.prototype._render = function () {\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const { render, _renderChildren } = this.$options\n+    // resolve slots. becaues slots are rendered in parent scope,\n+    // we set the activeInstance to parent.\n+    if (_renderChildren) {\n+      resolveSlots(this, _renderChildren)\n+    }\n+    // render self\n+    const vnode = render.call(this._renderProxy)\n+    // restore render state\n+    renderState.activeInstance = prev\n+    return vnode\n+  }\n+\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n@@ -95,45 +104,6 @@ export function renderMixin (Vue) {\n       }\n     }\n   }\n-\n-  Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, children) {\n-    this.$options._parentVnode = parentVnode\n-    this.$options._renderChildren = children\n-    // update props\n-    if (propsData && this.$options.props) {\n-      observerState.shouldConvert = false\n-      const propKeys = this.$options.propKeys\n-      for (let i = 0; i < propKeys.length; i++) {\n-        let key = propKeys[i]\n-        this[key] = validateProp(this, key, propsData)\n-      }\n-      observerState.shouldConvert = true\n-    }\n-    // update listeners\n-    if (listeners) {\n-      const oldListeners = this.$options._parentListeners\n-      this.$options._parentListeners = listeners\n-      updateListeners(listeners, oldListeners || {}, (event, handler) => {\n-        this.$on(event, handler)\n-      })\n-    }\n-  }\n-\n-  Vue.prototype._render = function () {\n-    const prev = renderState.activeInstance\n-    renderState.activeInstance = this\n-    const { render, _renderChildren } = this.$options\n-    // resolve slots. becaues slots are rendered in parent scope,\n-    // we set the activeInstance to parent.\n-    if (_renderChildren) {\n-      resolveSlots(this, _renderChildren)\n-    }\n-    // render self\n-    const vnode = render.call(this._renderProxy)\n-    // restore render state\n-    renderState.activeInstance = prev\n-    return vnode\n-  }\n }\n \n function resolveSlots (vm, children) {"
            },
            {
                "commitId": "23c253012f8f58848c33445f4f8ea045453029bf",
                "additions": 10,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten } from '../vdom/helpers'\n+import { flatten, updateListeners } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n@@ -96,7 +96,7 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._updateFromParent = function (propsData, parentVnode, children) {\n+  Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, children) {\n     this.$options._parentVnode = parentVnode\n     this.$options._renderChildren = children\n     // update props\n@@ -109,6 +109,14 @@ export function renderMixin (Vue) {\n       }\n       observerState.shouldConvert = true\n     }\n+    // update listeners\n+    if (listeners) {\n+      const oldListeners = this.$options._parentListeners\n+      this.$options._parentListeners = listeners\n+      updateListeners(listeners, oldListeners || {}, (event, handler) => {\n+        this.$on(event, handler)\n+      })\n+    }\n   }\n \n   Vue.prototype._render = function () {"
            },
            {
                "commitId": "1b9343f7e0d3930d85419b97a03998583297c083",
                "additions": 13,
                "deletions": 133,
                "patch": "@@ -1,12 +1,12 @@\n import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten, updateListeners } from '../vdom/helpers'\n+import { flatten } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n   isArray,\n   isObject,\n-  getPropValue\n+  validateProp\n } from '../util/index'\n \n export const renderState = {\n@@ -96,40 +96,32 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._updateFromParent = function (parentData, children, key) {\n-    const oldParentData = this.$options._renderData\n-    this.$options._renderData = parentData\n+  Vue.prototype._updateFromParent = function (propsData, parentVnode, children) {\n+    this.$options._parentVnode = parentVnode\n     this.$options._renderChildren = children\n-    // update props and listeners\n-    if (parentData) {\n-      updateEvents(this, parentData, oldParentData)\n-      // if any prop has changed it would trigger and queue an update,\n-      // but if no props changed, nothing happens\n-      const propsChanged = updateProps(this, parentData)\n-      // diff parent data (attrs on the placeholder) and queue update\n-      // if anything changed. only do this if props didn't change, because\n-      // if props changed then an update has already been queued.\n-      if (!propsChanged && parentDataChanged(parentData, oldParentData)) {\n-        this.$forceUpdate()\n+    // update props\n+    if (propsData && this.$options.props) {\n+      observerState.shouldConvert = false\n+      const propKeys = this.$options.propKeys\n+      for (let i = 0; i < propKeys.length; i++) {\n+        let key = propKeys[i]\n+        this[key] = validateProp(this, key, propsData)\n       }\n+      observerState.shouldConvert = true\n     }\n   }\n \n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const { render, _renderData, _renderChildren } = this.$options\n+    const { render, _renderChildren } = this.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n     const vnode = render.call(this._renderProxy)\n-    // update parent data\n-    if (_renderData) {\n-      mergeParentData(this, vnode.data, _renderData)\n-    }\n     // restore render state\n     renderState.activeInstance = prev\n     return vnode\n@@ -157,115 +149,3 @@ function resolveSlots (vm, children) {\n     vm.$slots = slots\n   }\n }\n-\n-const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives', 'transition']\n-function parentDataChanged (data, oldData) {\n-  let key, old, cur, i, l, j, k\n-  for (i = 0, l = keysToDiff.length; i < l; i++) {\n-    key = keysToDiff[i]\n-    cur = data[key]\n-    old = oldData[key]\n-    if (!old) {\n-      if (!cur) {\n-        continue\n-      } else {\n-        return true\n-      }\n-    }\n-    if (isArray(old)) {\n-      if (!isArray(cur)) return true\n-      if (cur.length !== old.length) return true\n-      for (j = 0, k = old.length; j < k; j++) {\n-        if (isObject(old[i])) {\n-          if (!isObject(cur[i])) return true\n-          if (diffObject(cur, old)) return true\n-        } else if (old[i] !== cur[i]) {\n-          return true\n-        }\n-      }\n-    } else if (diffObject(cur, old)) {\n-      return true\n-    }\n-  }\n-  return false\n-}\n-\n-function diffObject (cur, old) {\n-  for (let key in old) {\n-    if (cur[key] !== old[key]) return true\n-  }\n-}\n-\n-function mergeParentData (vm, data, parentData) {\n-  const props = vm.$options.props\n-  if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = {})\n-    for (let key in parentData.attrs) {\n-      if (!props || !props[key]) {\n-        attrs[key] = parentData.attrs[key]\n-      }\n-    }\n-  }\n-  if (parentData.props) {\n-    const props = data.props || (data.props = {})\n-    for (let key in parentData.props) {\n-      if (!props || !props[key]) {\n-        props[key] = parentData.props[key]\n-      }\n-    }\n-  }\n-  if (parentData.staticClass) {\n-    data.staticClass = data.staticClass\n-      ? data.staticClass + ' ' + parentData.staticClass\n-      : parentData.staticClass\n-  }\n-  if (parentData.class) {\n-    if (!data.class) {\n-      data.class = parentData.class\n-    } else {\n-      data.class = (isArray(data.class) ? data.class : []).concat(parentData.class)\n-    }\n-  }\n-  if (parentData.style) {\n-    if (!data.style) {\n-      data.style = parentData.style\n-    } else {\n-      data.style = (isArray(data.style) ? data.style : []).concat(parentData.style)\n-    }\n-  }\n-  if (parentData.directives) {\n-    data.directives = parentData.directives.concat(data.directives || [])\n-  }\n-  if (parentData.transition != null) {\n-    data.transition = parentData.transition\n-  }\n-}\n-\n-function updateProps (vm, data) {\n-  let changed = false\n-  if (data.attrs || data.props) {\n-    let keys = vm.$options.propKeys\n-    if (keys) {\n-      observerState.shouldConvert = false\n-      for (let i = 0; i < keys.length; i++) {\n-        let key = keys[i]\n-        let oldVal = vm[key]\n-        let newVal = getPropValue(data, key, vm)\n-        if (oldVal !== newVal) {\n-          vm[key] = newVal\n-          changed = true\n-        }\n-      }\n-      observerState.shouldConvert = true\n-    }\n-  }\n-  return changed\n-}\n-\n-function updateEvents (vm, data, oldData) {\n-  if (data.on) {\n-    updateListeners(data.on, oldData.on || {}, (event, handler) => {\n-      vm.$on(event, handler)\n-    })\n-  }\n-}"
            },
            {
                "commitId": "7b97d97e2fff49c84fc5048eda9d5ab8daf0ec7f",
                "additions": 4,
                "deletions": 1,
                "patch": "@@ -158,7 +158,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives']\n+const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives', 'transition']\n function parentDataChanged (data, oldData) {\n   let key, old, cur, i, l, j, k\n   for (i = 0, l = keysToDiff.length; i < l; i++) {\n@@ -236,6 +236,9 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.concat(data.directives || [])\n   }\n+  if (parentData.transition != null) {\n+    data.transition = parentData.transition\n+  }\n }\n \n function updateProps (vm, data) {"
            },
            {
                "commitId": "52ac04d2355a91957388a4bee336fa044d9ad57c",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -34,6 +34,13 @@ export function renderMixin (Vue) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  // resolve transition\n+  Vue.prototype.__resolveTransition__ = function (id) {\n+    return id && typeof id === 'string'\n+      ? resolveAsset(this.$options, 'transitions', id) || id\n+      : id\n+  }\n+\n   // toString for mustaches\n   Vue.prototype.__toString__ = function (val) {\n     return val == null"
            },
            {
                "commitId": "4512406f775a6c258fa13400358d25d8a37892c7",
                "additions": 3,
                "deletions": 27,
                "patch": "@@ -1,11 +1,6 @@\n-import { callHook } from './lifecycle'\n import { observerState } from '../observer/index'\n-import {\n-  createElement,\n-  patch,\n-  updateListeners,\n-  flatten\n-} from '../vdom/index'\n+import createElement from '../vdom/create-element'\n+import { flatten, updateListeners } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n@@ -24,7 +19,7 @@ export function initRender (vm) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(vm.__h__, vm)\n+  vm.$createElement = bind(createElement, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -94,21 +89,6 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._update = function (vnode) {\n-    if (this._mounted) {\n-      callHook(this, 'beforeUpdate')\n-    }\n-    if (!this._vnode) {\n-      this.$el = patch(this.$el, vnode)\n-    } else {\n-      this.$el = patch(this._vnode, vnode)\n-    }\n-    this._vnode = vnode\n-    if (this._mounted) {\n-      callHook(this, 'updated')\n-    }\n-  }\n-\n   Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n     this.$options._renderData = parentData\n@@ -147,10 +127,6 @@ export function renderMixin (Vue) {\n     renderState.activeInstance = prev\n     return vnode\n   }\n-\n-  Vue.prototype.$forceUpdate = function () {\n-    this._watcher.update()\n-  }\n }\n \n function resolveSlots (vm, children) {"
            },
            {
                "commitId": "a1ebdbbb7a34f842d090e208863be7168eaa9803",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -138,7 +138,7 @@ export function renderMixin (Vue) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(this)\n+    const vnode = render.call(this._renderProxy)\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)"
            },
            {
                "commitId": "c13bbcb32794fbb443a4f86d3b0526951ca3f7ba",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -251,7 +251,7 @@ function mergeParentData (vm, data, parentData) {\n     }\n   }\n   if (parentData.directives) {\n-    data.directives = parentData.directives.conact(data.directives || [])\n+    data.directives = parentData.directives.concat(data.directives || [])\n   }\n }\n "
            },
            {
                "commitId": "86bc00e0e57076a1a7a6d64ddb3f97d1a455be46",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -8,7 +8,6 @@ import {\n } from '../vdom/index'\n import {\n   bind,\n-  extend,\n   resolveAsset,\n   isArray,\n   isObject,\n@@ -248,7 +247,7 @@ function mergeParentData (vm, data, parentData) {\n     if (!data.style) {\n       data.style = parentData.style\n     } else {\n-      extend(data.style, parentData.style)\n+      data.style = (isArray(data.style) ? data.style : []).concat(parentData.style)\n     }\n   }\n   if (parentData.directives) {"
            },
            {
                "commitId": "24ef7f489a0f2452266974b1f01648e504e7bc96",
                "additions": 1,
                "deletions": 4,
                "patch": "@@ -209,10 +209,7 @@ function parentDataChanged (data, oldData) {\n }\n \n function diffObject (cur, old) {\n-  const keys = Object.keys(old)\n-  let i, l, key\n-  for (i = 0, l = keys.length; i < l; i++) {\n-    key = keys[i]\n+  for (let key in old) {\n     if (cur[key] !== old[key]) return true\n   }\n }"
            },
            {
                "commitId": "368b2ff03a61fa4879ea4c69ba4b9fa71387d298",
                "additions": 27,
                "deletions": 3,
                "patch": "@@ -36,21 +36,45 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = createElement\n \n   // resolve directive\n-  Vue.prototype.__d__ = function (id) {\n+  Vue.prototype.__resolveDirective__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n   // toString for mustaches\n-  Vue.prototype.__s__ = function (val) {\n+  Vue.prototype.__toString__ = function (val) {\n     return val == null\n       ? ''\n       : typeof val === 'object'\n         ? JSON.stringify(val, null, 2)\n         : val\n   }\n \n+  // render v-for\n+  Vue.prototype.__renderList__ = function (val, render) {\n+    let ret, i, l, keys, key\n+    if (isArray(val)) {\n+      ret = new Array(val.length)\n+      for (i = 0, l = val.length; i < l; i++) {\n+        ret[i] = render(val[i], i, i)\n+      }\n+    } else if (typeof val === 'number') {\n+      ret = new Array(val)\n+      for (i = 0; i < val; i++) {\n+        ret[i] = render(i + 1, i, i)\n+      }\n+    } else if (isObject(val)) {\n+      keys = Object.keys(val)\n+      ret = new Array(keys.length)\n+      for (i = 0, l = keys.length; i < l; i++) {\n+        key = keys[i]\n+        ret[i] = render(val[key], i, key)\n+      }\n+    }\n+    return ret\n+  }\n+\n   // register ref\n-  Vue.prototype.__r__ = function (key, ref, vFor, remove) {\n+  Vue.prototype.__registerRef__ = function (key, ref, vFor, remove) {\n     const refs = this.$refs\n     if (remove) {\n       if (vFor) {"
            },
            {
                "commitId": "d6bef7957541e38cec3051eb4d8c54bda3280eaf",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -1,4 +1,5 @@\n import { callHook } from './lifecycle'\n+import { observerState } from '../observer/index'\n import {\n   createElement,\n   patch,\n@@ -197,15 +198,15 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.attrs) {\n     const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n-      if (!props[key]) {\n+      if (!props || !props[key]) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n     const props = data.props || (data.props = {})\n     for (let key in parentData.props) {\n-      if (!props[key]) {\n+      if (!props || !props[key]) {\n         props[key] = parentData.props[key]\n       }\n     }\n@@ -239,6 +240,7 @@ function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n     let keys = vm.$options.propKeys\n     if (keys) {\n+      observerState.shouldConvert = false\n       for (let i = 0; i < keys.length; i++) {\n         let key = keys[i]\n         let oldVal = vm[key]\n@@ -248,6 +250,7 @@ function updateProps (vm, data) {\n           changed = true\n         }\n       }\n+      observerState.shouldConvert = true\n     }\n   }\n   return changed"
            },
            {
                "commitId": "7b2dc500b7a06381716639acea21d0fcf3b8b732",
                "additions": 22,
                "deletions": 0,
                "patch": "@@ -48,6 +48,28 @@ export function renderMixin (Vue) {\n         : val\n   }\n \n+  // register ref\n+  Vue.prototype.__r__ = function (key, ref, vFor, remove) {\n+    const refs = this.$refs\n+    if (remove) {\n+      if (vFor) {\n+        refs[key].$remove(ref)\n+      } else {\n+        refs[key] = undefined\n+      }\n+    } else {\n+      if (vFor) {\n+        if (refs[key]) {\n+          refs[key].push(ref)\n+        } else {\n+          refs[key] = [ref]\n+        }\n+      } else {\n+        refs[key] = ref\n+      }\n+    }\n+  }\n+\n   Vue.prototype._update = function (vnode) {\n     if (this._mounted) {\n       callHook(this, 'beforeUpdate')"
            },
            {
                "commitId": "c2ad444982541faa8b7e0a652e68d4d0f6ef4bc6",
                "additions": 6,
                "deletions": 18,
                "patch": "@@ -6,6 +6,7 @@ import {\n   flatten\n } from '../vdom/index'\n import {\n+  bind,\n   extend,\n   resolveAsset,\n   isArray,\n@@ -14,14 +15,16 @@ import {\n } from '../util/index'\n \n export const renderState = {\n-  activeInstance: null,\n-  context: null\n+  activeInstance: null\n }\n \n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm.$slots = {}\n+  // bind the public createElement fn to this instance\n+  // so that we get proper render context inside it.\n+  vm.$createElement = bind(vm.__h__, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -79,21 +82,6 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  /**\n-   * Call a render function with this instance as the context.\n-   * This is used to wrap all children thunks in codegen.\n-   */\n-\n-  Vue.prototype._renderWithContext = function (fn) {\n-    return () => {\n-      const prev = renderState.context\n-      renderState.context = this\n-      const children = flatten(fn())\n-      renderState.context = prev\n-      return children\n-    }\n-  }\n-\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n@@ -121,7 +109,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children()\n+    children = flatten(isArray(children) ? children : children())\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "78e82bb8e454fcac088f4b40ec66e424c84dab89",
                "additions": 14,
                "deletions": 3,
                "patch": "@@ -1,6 +1,17 @@\n-import { extend, resolveAsset, isArray, isObject, getPropValue } from '../util/index'\n-import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n+import {\n+  createElement,\n+  patch,\n+  updateListeners,\n+  flatten\n+} from '../vdom/index'\n+import {\n+  extend,\n+  resolveAsset,\n+  isArray,\n+  isObject,\n+  getPropValue\n+} from '../util/index'\n \n export const renderState = {\n   activeInstance: null,\n@@ -110,7 +121,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children().slice()\n+    children = children()\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "d3c64fa6a67faf610466277caf9c839dd11d1934",
                "additions": 13,
                "deletions": 5,
                "patch": "@@ -55,13 +55,14 @@ export function renderMixin (Vue) {\n     this.$options._renderChildren = children\n     // update props and listeners\n     if (parentData) {\n+      updateEvents(this, parentData, oldParentData)\n       // if any prop has changed it would trigger and queue an update,\n       // but if no props changed, nothing happens\n-      updateProps(this, parentData)\n-      updateEvents(this, parentData, oldParentData)\n+      const propsChanged = updateProps(this, parentData)\n       // diff parent data (attrs on the placeholder) and queue update\n-      // if anything changed\n-      if (parentDataChanged(parentData, oldParentData)) {\n+      // if anything changed. only do this if props didn't change, because\n+      // if props changed then an update has already been queued.\n+      if (!propsChanged && parentDataChanged(parentData, oldParentData)) {\n         this.$forceUpdate()\n       }\n     }\n@@ -213,15 +214,22 @@ function mergeParentData (vm, data, parentData) {\n }\n \n function updateProps (vm, data) {\n+  let changed = false\n   if (data.attrs || data.props) {\n     let keys = vm.$options.propKeys\n     if (keys) {\n       for (let i = 0; i < keys.length; i++) {\n         let key = keys[i]\n-        vm[key] = getPropValue(data, key, vm)\n+        let oldVal = vm[key]\n+        let newVal = getPropValue(data, key, vm)\n+        if (oldVal !== newVal) {\n+          vm[key] = newVal\n+          changed = true\n+        }\n       }\n     }\n   }\n+  return changed\n }\n \n function updateEvents (vm, data, oldData) {"
            },
            {
                "commitId": "d2ca5c5e8ad7b10b1a886c3acc50f4936bffa102",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,4 +1,4 @@\n-import { extend, resolveAsset, hasOwn, isArray, isObject, getPropValue } from '../util/index'\n+import { extend, resolveAsset, isArray, isObject, getPropValue } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n "
            },
            {
                "commitId": "91455a6618c4c34e5d8b3f8299f427d3b612c142",
                "additions": 14,
                "deletions": 11,
                "patch": "@@ -1,7 +1,6 @@\n-import { extend, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n+import { extend, resolveAsset, hasOwn, isArray, isObject, getPropValue } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n-import { getPropValue } from './state'\n \n export const renderState = {\n   activeInstance: null,\n@@ -60,11 +59,11 @@ export function renderMixin (Vue) {\n       // but if no props changed, nothing happens\n       updateProps(this, parentData)\n       updateEvents(this, parentData, oldParentData)\n-    }\n-    // diff parent data (attrs on the placeholder) and queue update\n-    // if anything changed\n-    if (parentDataChanged(parentData, oldParentData)) {\n-      this.$forceUpdate()\n+      // diff parent data (attrs on the placeholder) and queue update\n+      // if anything changed\n+      if (parentDataChanged(parentData, oldParentData)) {\n+        this.$forceUpdate()\n+      }\n     }\n   }\n \n@@ -176,15 +175,15 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.attrs) {\n     const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n-      if (!hasOwn(props, key)) {\n+      if (!props[key]) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n     const props = data.props || (data.props = {})\n     for (let key in parentData.props) {\n-      if (!hasOwn(props, key)) {\n+      if (!props[key]) {\n         props[key] = parentData.props[key]\n       }\n     }\n@@ -215,8 +214,12 @@ function mergeParentData (vm, data, parentData) {\n \n function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n-    for (let key in vm.$options.props) {\n-      vm[key] = getPropValue(data, key)\n+    let keys = vm.$options.propKeys\n+    if (keys) {\n+      for (let i = 0; i < keys.length; i++) {\n+        let key = keys[i]\n+        vm[key] = getPropValue(data, key, vm)\n+      }\n     }\n   }\n }"
            },
            {
                "commitId": "403e2380b8d3c430ac67e6a072f159bcf8c00b5e",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -21,13 +21,18 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n+  // resolve directive\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  // toString for mustaches\n   Vue.prototype.__s__ = function (val) {\n-    console.log(val)\n-    return typeof val === 'string' ? val : JSON.stringify(val)\n+    return val == null\n+      ? ''\n+      : typeof val === 'object'\n+        ? JSON.stringify(val, null, 2)\n+        : val\n   }\n \n   Vue.prototype._update = function (vnode) {"
            },
            {
                "commitId": "09a4ba84a9e4a0219423c85599fea87c1d34737d",
                "additions": 6,
                "deletions": 4,
                "patch": "@@ -25,6 +25,11 @@ export function renderMixin (Vue) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  Vue.prototype.__s__ = function (val) {\n+    console.log(val)\n+    return typeof val === 'string' ? val : JSON.stringify(val)\n+  }\n+\n   Vue.prototype._update = function (vnode) {\n     if (this._mounted) {\n       callHook(this, 'beforeUpdate')\n@@ -42,7 +47,6 @@ export function renderMixin (Vue) {\n \n   Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n-    this.$options._renderKey = key\n     this.$options._renderData = parentData\n     this.$options._renderChildren = children\n     // update props and listeners\n@@ -77,16 +81,14 @@ export function renderMixin (Vue) {\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const { render, _renderKey, _renderData, _renderChildren } = this.$options\n+    const { render, _renderData, _renderChildren } = this.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n     const vnode = render.call(this)\n-    // set key\n-    vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)"
            },
            {
                "commitId": "e666fb4ee1ee8e15f94d3065ead7a213fed98253",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -12,15 +12,15 @@ export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm.$slots = {}\n-  const el = vm.$options.el\n-  if (el) {\n-    vm.$mount(el)\n+  if (vm.$options.el) {\n+    vm.$mount(vm.$options.el)\n   }\n }\n \n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n+\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }"
            },
            {
                "commitId": "2ef8d1028be7b9e80c4f3b53c8c8993599c28a9e",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -130,8 +130,13 @@ function parentDataChanged (data, oldData) {\n     key = keysToDiff[i]\n     cur = data[key]\n     old = oldData[key]\n-    if (key === 'on') continue\n-    if (!cur) return true\n+    if (!old) {\n+      if (!cur) {\n+        continue\n+      } else {\n+        return true\n+      }\n+    }\n     if (isArray(old)) {\n       if (!isArray(cur)) return true\n       if (cur.length !== old.length) return true"
            },
            {
                "commitId": "32ca8e7722cc46e0e24b812c893c5c7dc2108b8f",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -123,11 +123,11 @@ function resolveSlots (vm, children) {\n   }\n }\n \n+const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives']\n function parentDataChanged (data, oldData) {\n-  const keys = Object.keys(oldData)\n   let key, old, cur, i, l, j, k\n-  for (i = 0, l = keys.length; i < l; i++) {\n-    key = keys[i]\n+  for (i = 0, l = keysToDiff.length; i < l; i++) {\n+    key = keysToDiff[i]\n     cur = data[key]\n     old = oldData[key]\n     if (key === 'on') continue"
            },
            {
                "commitId": "0c6c748d9df45341b5c787e9401c32536161feca",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -40,7 +40,7 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._tryUpdate = function (parentData, children, key) {\n+  Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n     this.$options._renderKey = key\n     this.$options._renderData = parentData\n@@ -54,7 +54,7 @@ export function renderMixin (Vue) {\n     }\n     // diff parent data (attrs on the placeholder) and queue update\n     // if anything changed\n-    if (diffParentData(parentData, oldParentData)) {\n+    if (parentDataChanged(parentData, oldParentData)) {\n       this.$forceUpdate()\n     }\n   }\n@@ -123,7 +123,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function diffParentData (data, oldData) {\n+function parentDataChanged (data, oldData) {\n   const keys = Object.keys(oldData)\n   let key, old, cur, i, l, j, k\n   for (i = 0, l = keys.length; i < l; i++) {"
            },
            {
                "commitId": "8ff21757a1a3eb10c9c239b2b92eff9711aa7b21",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -212,7 +212,6 @@ function updateProps (vm, data) {\n function updateEvents (vm, data, oldData) {\n   if (data.on) {\n     updateListeners(data.on, oldData.on || {}, (event, handler) => {\n-      console.log(11)\n       vm.$on(event, handler)\n     })\n   }"
            },
            {
                "commitId": "4d508dcbfa440459fb6bc331537c0c90278aa3a8",
                "additions": 1,
                "deletions": 22,
                "patch": "@@ -1,5 +1,4 @@\n-import Watcher from '../observer/watcher'\n-import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n+import { extend, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -97,26 +96,6 @@ export function renderMixin (Vue) {\n     return vnode\n   }\n \n-  Vue.prototype.$mount = function (el) {\n-    callHook(this, 'beforeMount')\n-    el = this.$el = el && query(el)\n-    if (el) {\n-      // clean element\n-      el.innerHTML = ''\n-      if (el.hasAttributes()) {\n-        const attrs = el.attributes\n-        for (let i = 0, l = attrs.length; i < l; i++) {\n-          el.removeAttribute(attrs[i].name)\n-        }\n-      }\n-    }\n-    this._watcher = new Watcher(this, this._render, this._update)\n-    this._update(this._watcher.value)\n-    callHook(this, 'mounted')\n-    this._mounted = true\n-    return this\n-  }\n-\n   Vue.prototype.$forceUpdate = function () {\n     this._watcher.update()\n   }"
            },
            {
                "commitId": "af1f1d349f8276d3fe0c38af34eafab2b0c50424",
                "additions": 8,
                "deletions": 7,
                "patch": "@@ -1,6 +1,6 @@\n import Watcher from '../observer/watcher'\n import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n-import { createElement, patch, updateListeners } from '../vdom/index'\n+import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n \n@@ -48,13 +48,14 @@ export function renderMixin (Vue) {\n     this.$options._renderChildren = children\n     // update props and listeners\n     if (parentData) {\n+      // if any prop has changed it would trigger and queue an update,\n+      // but if no props changed, nothing happens\n       updateProps(this, parentData)\n       updateEvents(this, parentData, oldParentData)\n     }\n-    // for now, if the component has content it always updates\n-    // because we don't know whether the children have changed.\n-    // need to optimize in the future.\n-    if (children || diffParentData(parentData, oldParentData)) {\n+    // diff parent data (attrs on the placeholder) and queue update\n+    // if anything changed\n+    if (diffParentData(parentData, oldParentData)) {\n       this.$forceUpdate()\n     }\n   }\n@@ -64,11 +65,11 @@ export function renderMixin (Vue) {\n    * This is used to wrap all children thunks in codegen.\n    */\n \n-  Vue.prototype._withContext = function (fn) {\n+  Vue.prototype._renderWithContext = function (fn) {\n     return () => {\n       const prev = renderState.context\n       renderState.context = this\n-      const children = fn()\n+      const children = flatten(fn())\n       renderState.context = prev\n       return children\n     }"
            },
            {
                "commitId": "61a5249a0e71008d7560d188b62efe36788619c1",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -68,8 +68,9 @@ export function renderMixin (Vue) {\n     return () => {\n       const prev = renderState.context\n       renderState.context = this\n-      return fn()\n+      const children = fn()\n       renderState.context = prev\n+      return children\n     }\n   }\n "
            },
            {
                "commitId": "c16fc2c427b221510b51d98c1051460d2ffbe02e",
                "additions": 24,
                "deletions": 12,
                "patch": "@@ -5,7 +5,8 @@ import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n \n export const renderState = {\n-  activeInstance: null\n+  activeInstance: null,\n+  context: null\n }\n \n export function initRender (vm) {\n@@ -58,28 +59,39 @@ export function renderMixin (Vue) {\n     }\n   }\n \n+  /**\n+   * Call a render function with this instance as the context.\n+   * This is used to wrap all children thunks in codegen.\n+   */\n+\n+  Vue.prototype._withContext = function (fn) {\n+    return () => {\n+      const prev = renderState.context\n+      renderState.context = this\n+      return fn()\n+      renderState.context = prev\n+    }\n+  }\n+\n   Vue.prototype._render = function () {\n-    const {\n-      render,\n-      _renderKey,\n-      _renderData,\n-      _renderChildren\n-    } = this.$options\n-    // resolve slots\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const { render, _renderKey, _renderData, _renderChildren } = this.$options\n+    // resolve slots. becaues slots are rendered in parent scope,\n+    // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n-    // render\n-    const prev = renderState.activeInstance\n-    renderState.activeInstance = this\n+    // render self\n     const vnode = render.call(this)\n-    renderState.activeInstance = prev\n     // set key\n     vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)\n     }\n+    // restore render state\n+    renderState.activeInstance = prev\n     return vnode\n   }\n "
            },
            {
                "commitId": "1df748d57d366ff426604e58a46897a2f49424aa",
                "additions": 11,
                "deletions": 4,
                "patch": "@@ -85,9 +85,16 @@ export function renderMixin (Vue) {\n \n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n-    this.$el = el && query(el)\n-    if (this.$el) {\n-      this.$el.innerHTML = ''\n+    el = this.$el = el && query(el)\n+    if (el) {\n+      // clean element\n+      el.innerHTML = ''\n+      if (el.hasAttributes()) {\n+        const attrs = el.attributes\n+        for (let i = 0, l = attrs.length; i < l; i++) {\n+          el.removeAttribute(attrs[i].name)\n+        }\n+      }\n     }\n     this._watcher = new Watcher(this, this._render, this._update)\n     this._update(this._watcher.value)\n@@ -103,7 +110,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children.slice()\n+    children = children().slice()\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "38204b747dad3c05c63401e2a27ef846bcb998bc",
                "additions": 4,
                "deletions": 3,
                "patch": "@@ -48,7 +48,7 @@ export function renderMixin (Vue) {\n     // update props and listeners\n     if (parentData) {\n       updateProps(this, parentData)\n-      updateEvents(this, parentData)\n+      updateEvents(this, parentData, oldParentData)\n     }\n     // for now, if the component has content it always updates\n     // because we don't know whether the children have changed.\n@@ -209,9 +209,10 @@ function updateProps (vm, data) {\n   }\n }\n \n-function updateEvents (vm, data) {\n+function updateEvents (vm, data, oldData) {\n   if (data.on) {\n-    updateListeners(data.on, vm._vnode.data.on || {}, (event, handler) => {\n+    updateListeners(data.on, oldData.on || {}, (event, handler) => {\n+      console.log(11)\n       vm.$on(event, handler)\n     })\n   }"
            },
            {
                "commitId": "542035f3c1550bf4d733a7b9c161cdb8db63740f",
                "additions": 10,
                "deletions": 4,
                "patch": "@@ -124,16 +124,18 @@ function resolveSlots (vm, children) {\n }\n \n function diffParentData (data, oldData) {\n-  let key, old, cur\n-  for (key in oldData) {\n+  const keys = Object.keys(oldData)\n+  let key, old, cur, i, l, j, k\n+  for (i = 0, l = keys.length; i < l; i++) {\n+    key = keys[i]\n     cur = data[key]\n     old = oldData[key]\n     if (key === 'on') continue\n     if (!cur) return true\n     if (isArray(old)) {\n       if (!isArray(cur)) return true\n       if (cur.length !== old.length) return true\n-      for (let i = 0; i < old.length; i++) {\n+      for (j = 0, k = old.length; j < k; j++) {\n         if (isObject(old[i])) {\n           if (!isObject(cur[i])) return true\n           if (diffObject(cur, old)) return true\n@@ -145,10 +147,14 @@ function diffParentData (data, oldData) {\n       return true\n     }\n   }\n+  return false\n }\n \n function diffObject (cur, old) {\n-  for (var key in old) {\n+  const keys = Object.keys(old)\n+  let i, l, key\n+  for (i = 0, l = keys.length; i < l; i++) {\n+    key = keys[i]\n     if (cur[key] !== old[key]) return true\n   }\n }"
            },
            {
                "commitId": "0257afbb7f8a6a4c986a577e904225cef13e67ec",
                "additions": 119,
                "deletions": 81,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { extend, query, resolveAsset, hasOwn } from '../util/index'\n+import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -18,78 +18,6 @@ export function initRender (vm) {\n   }\n }\n \n-function resolveSlots (vm, children) {\n-  if (children) {\n-    children = children.slice()\n-    const slots = { default: children }\n-    let i = children.length\n-    let name, child\n-    while (i--) {\n-      child = children[i]\n-      if ((name = child.data && child.data.slot)) {\n-        let slot = (slots[name] || (slots[name] = []))\n-        if (child.tag === 'template') {\n-          slot.push.apply(slot, child.children)\n-        } else {\n-          slot.push(child)\n-        }\n-        children.splice(i, 1)\n-      }\n-    }\n-    vm.$slots = slots\n-  }\n-}\n-\n-function mergeParentData (vm, data, parentData) {\n-  const props = vm.$options.props\n-  if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = {})\n-    for (let key in parentData.attrs) {\n-      if (!hasOwn(props, key)) {\n-        attrs[key] = parentData.attrs[key]\n-      }\n-    }\n-  }\n-  if (parentData.props) {\n-    const props = data.props || (data.props = {})\n-    for (let key in parentData.props) {\n-      if (!hasOwn(props, key)) {\n-        props[key] = parentData.props[key]\n-      }\n-    }\n-  }\n-  if (parentData.staticClass) {\n-    data.staticClass = data.staticClass\n-      ? data.staticClass + ' ' + parentData.staticClass\n-      : parentData.staticClass\n-  }\n-  if (parentData.class) {\n-    extend((data.class || (data.class = {})), parentData.class)\n-  }\n-  if (parentData.style) {\n-    extend((data.style || (data.style = {})), parentData.style)\n-  }\n-  if (parentData.directives) {\n-    data.directives = parentData.directives.conact(data.directives || [])\n-  }\n-  if (parentData.on) {\n-    updateListeners(parentData.on, data.on || {}, (event, handler) => {\n-      vm.$on(event, handler)\n-    })\n-  }\n-}\n-\n-function updateProps (vm, data) {\n-  if (data.attrs || data.props) {\n-    for (let key in vm.$options.props) {\n-      let newVal = getPropValue(data, key)\n-      if (vm[key] !== newVal) {\n-        vm[key] = newVal\n-      }\n-    }\n-  }\n-}\n-\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -112,21 +40,21 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._tryUpdate = function (data, children, key) {\n+  Vue.prototype._tryUpdate = function (parentData, children, key) {\n+    const oldParentData = this.$options._renderData\n     this.$options._renderKey = key\n-    this.$options._renderData = data\n+    this.$options._renderData = parentData\n     this.$options._renderChildren = children\n-    // set props - this will trigger update if any of them changed\n-    // but not guaranteed\n-    if (data) {\n-      updateProps(this, data)\n+    // update props and listeners\n+    if (parentData) {\n+      updateProps(this, parentData)\n+      updateEvents(this, parentData)\n     }\n     // for now, if the component has content it always updates\n     // because we don't know whether the children have changed.\n     // need to optimize in the future.\n-    if (children) {\n+    if (children || diffParentData(parentData, oldParentData)) {\n       this.$forceUpdate()\n-      return\n     }\n   }\n \n@@ -172,3 +100,113 @@ export function renderMixin (Vue) {\n     this._watcher.update()\n   }\n }\n+\n+function resolveSlots (vm, children) {\n+  if (children) {\n+    children = children.slice()\n+    const slots = { default: children }\n+    let i = children.length\n+    let name, child\n+    while (i--) {\n+      child = children[i]\n+      if ((name = child.data && child.data.slot)) {\n+        let slot = (slots[name] || (slots[name] = []))\n+        if (child.tag === 'template') {\n+          slot.push.apply(slot, child.children)\n+        } else {\n+          slot.push(child)\n+        }\n+        children.splice(i, 1)\n+      }\n+    }\n+    vm.$slots = slots\n+  }\n+}\n+\n+function diffParentData (data, oldData) {\n+  let key, old, cur\n+  for (key in oldData) {\n+    cur = data[key]\n+    old = oldData[key]\n+    if (key === 'on') continue\n+    if (!cur) return true\n+    if (isArray(old)) {\n+      if (!isArray(cur)) return true\n+      if (cur.length !== old.length) return true\n+      for (let i = 0; i < old.length; i++) {\n+        if (isObject(old[i])) {\n+          if (!isObject(cur[i])) return true\n+          if (diffObject(cur, old)) return true\n+        } else if (old[i] !== cur[i]) {\n+          return true\n+        }\n+      }\n+    } else if (diffObject(cur, old)) {\n+      return true\n+    }\n+  }\n+}\n+\n+function diffObject (cur, old) {\n+  for (var key in old) {\n+    if (cur[key] !== old[key]) return true\n+  }\n+}\n+\n+function mergeParentData (vm, data, parentData) {\n+  const props = vm.$options.props\n+  if (parentData.attrs) {\n+    const attrs = data.attrs || (data.attrs = {})\n+    for (let key in parentData.attrs) {\n+      if (!hasOwn(props, key)) {\n+        attrs[key] = parentData.attrs[key]\n+      }\n+    }\n+  }\n+  if (parentData.props) {\n+    const props = data.props || (data.props = {})\n+    for (let key in parentData.props) {\n+      if (!hasOwn(props, key)) {\n+        props[key] = parentData.props[key]\n+      }\n+    }\n+  }\n+  if (parentData.staticClass) {\n+    data.staticClass = data.staticClass\n+      ? data.staticClass + ' ' + parentData.staticClass\n+      : parentData.staticClass\n+  }\n+  if (parentData.class) {\n+    if (!data.class) {\n+      data.class = parentData.class\n+    } else {\n+      data.class = (isArray(data.class) ? data.class : []).concat(parentData.class)\n+    }\n+  }\n+  if (parentData.style) {\n+    if (!data.style) {\n+      data.style = parentData.style\n+    } else {\n+      extend(data.style, parentData.style)\n+    }\n+  }\n+  if (parentData.directives) {\n+    data.directives = parentData.directives.conact(data.directives || [])\n+  }\n+}\n+\n+function updateProps (vm, data) {\n+  if (data.attrs || data.props) {\n+    for (let key in vm.$options.props) {\n+      vm[key] = getPropValue(data, key)\n+    }\n+  }\n+}\n+\n+function updateEvents (vm, data) {\n+  if (data.on) {\n+    updateListeners(data.on, vm._vnode.data.on || {}, (event, handler) => {\n+      vm.$on(event, handler)\n+    })\n+  }\n+}"
            },
            {
                "commitId": "d1fc82dbba86a91704269e62699f63d645dd8baf",
                "additions": 21,
                "deletions": 14,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hasOwn } from '../util/index'\n+import { extend, query, resolveAsset, hasOwn } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -40,28 +40,38 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function mergeParentAttrs (vm, data, parentData) {\n+function mergeParentData (vm, data, parentData) {\n   const props = vm.$options.props\n   if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = [])\n+    const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n-\n+    const props = data.props || (data.props = {})\n+    for (let key in parentData.props) {\n+      if (!hasOwn(props, key)) {\n+        props[key] = parentData.props[key]\n+      }\n+    }\n+  }\n+  if (parentData.staticClass) {\n+    data.staticClass = data.staticClass\n+      ? data.staticClass + ' ' + parentData.staticClass\n+      : parentData.staticClass\n+  }\n+  if (parentData.class) {\n+    extend((data.class || (data.class = {})), parentData.class)\n+  }\n+  if (parentData.style) {\n+    extend((data.style || (data.style = {})), parentData.style)\n   }\n-}\n-\n-function mergeParentDirectives (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.conact(data.directives || [])\n   }\n-}\n-\n-function updateParentCallbacks (vm, data, parentData) {\n   if (parentData.on) {\n     updateListeners(parentData.on, data.on || {}, (event, handler) => {\n       vm.$on(event, handler)\n@@ -140,10 +150,7 @@ export function renderMixin (Vue) {\n     vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n-      const data = vnode.data\n-      mergeParentAttrs(this, data, _renderData)\n-      mergeParentDirectives(this, data, _renderData)\n-      updateParentCallbacks(this, data, _renderData)\n+      mergeParentData(this, vnode.data, _renderData)\n     }\n     return vnode\n   }"
            },
            {
                "commitId": "2fa6e6f73f81439374c02008fb4169b7df2f7b98",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -106,14 +106,18 @@ export function renderMixin (Vue) {\n     this.$options._renderKey = key\n     this.$options._renderData = data\n     this.$options._renderChildren = children\n-    if (children) {\n-      this.$forceUpdate()\n-      return\n-    }\n     // set props - this will trigger update if any of them changed\n+    // but not guaranteed\n     if (data) {\n       updateProps(this, data)\n     }\n+    // for now, if the component has content it always updates\n+    // because we don't know whether the children have changed.\n+    // need to optimize in the future.\n+    if (children) {\n+      this.$forceUpdate()\n+      return\n+    }\n   }\n \n   Vue.prototype._render = function () {"
            },
            {
                "commitId": "0e940ac5af072e1c85b6346c43c20d0a66c75393",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -72,7 +72,7 @@ function updateParentCallbacks (vm, data, parentData) {\n function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n     for (let key in vm.$options.props) {\n-      let newVal = getPropValue(data)\n+      let newVal = getPropValue(data, key)\n       if (vm[key] !== newVal) {\n         vm[key] = newVal\n       }"
            },
            {
                "commitId": "fdfcb9319970298e0c2f4318e6360db1b8dd3d8e",
                "additions": 4,
                "deletions": 16,
                "patch": "@@ -1,7 +1,8 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n+import { query, resolveAsset, hasOwn } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n+import { getPropValue } from './state'\n \n export const renderState = {\n   activeInstance: null\n@@ -69,29 +70,16 @@ function updateParentCallbacks (vm, data, parentData) {\n }\n \n function updateProps (vm, data) {\n-  const attrs = data.attrs\n-  const props = data.props\n-  if (attrs || props) {\n+  if (data.attrs || data.props) {\n     for (let key in vm.$options.props) {\n-      let altKey = hyphenate(key)\n-      let newVal =\n-        getPropValue(attrs, key, altKey) ||\n-        getPropValue(props, key, altKey)\n+      let newVal = getPropValue(data)\n       if (vm[key] !== newVal) {\n         vm[key] = newVal\n       }\n     }\n   }\n }\n \n-function getPropValue (hash, key, altKey) {\n-  return hash\n-    ? hasOwn(hash, key)\n-      ? hash[key]\n-      : hash[altKey]\n-    : undefined\n-}\n-\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement"
            },
            {
                "commitId": "57bb93ef02de063dc12d375b0fc2ca25063b5fc8",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -100,14 +100,18 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._update = function (vnode) {\n-    callHook(this, 'beforeUpdate')\n+    if (this._mounted) {\n+      callHook(this, 'beforeUpdate')\n+    }\n     if (!this._vnode) {\n       this.$el = patch(this.$el, vnode)\n     } else {\n       this.$el = patch(this._vnode, vnode)\n     }\n     this._vnode = vnode\n-    callHook(this, 'updated')\n+    if (this._mounted) {\n+      callHook(this, 'updated')\n+    }\n   }\n \n   Vue.prototype._tryUpdate = function (data, children, key) {"
            },
            {
                "commitId": "c12ddd9ab9f66bdbad8d5f91c2796f6cfe0a659c",
                "additions": 30,
                "deletions": 11,
                "patch": "@@ -40,15 +40,18 @@ function resolveSlots (vm, children) {\n }\n \n function mergeParentAttrs (vm, data, parentData) {\n+  const props = vm.$options.props\n   if (parentData.attrs) {\n-    const props = vm.$options.props\n     const attrs = data.attrs || (data.attrs = [])\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n+  if (parentData.props) {\n+\n+  }\n }\n \n function mergeParentDirectives (vm, data, parentData) {\n@@ -65,6 +68,30 @@ function updateParentCallbacks (vm, data, parentData) {\n   }\n }\n \n+function updateProps (vm, data) {\n+  const attrs = data.attrs\n+  const props = data.props\n+  if (attrs || props) {\n+    for (let key in vm.$options.props) {\n+      let altKey = hyphenate(key)\n+      let newVal =\n+        getPropValue(attrs, key, altKey) ||\n+        getPropValue(props, key, altKey)\n+      if (vm[key] !== newVal) {\n+        vm[key] = newVal\n+      }\n+    }\n+  }\n+}\n+\n+function getPropValue (hash, key, altKey) {\n+  return hash\n+    ? hasOwn(hash, key)\n+      ? hash[key]\n+      : hash[altKey]\n+    : undefined\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -92,16 +119,8 @@ export function renderMixin (Vue) {\n       return\n     }\n     // set props - this will trigger update if any of them changed\n-    const attrs = data && data.attrs\n-    if (attrs) {\n-      for (let key in this.$options.props) {\n-        let newVal = hasOwn(attrs, key)\n-          ? attrs[key]\n-          : attrs[hyphenate(key)]\n-        if (this[key] !== newVal) {\n-          this[key] = newVal\n-        }\n-      }\n+    if (data) {\n+      updateProps(this, data)\n     }\n   }\n "
            },
            {
                "commitId": "054c2c3de2976c8f87b7a52980bc89c12d3d90ee",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -42,9 +42,10 @@ function resolveSlots (vm, children) {\n function mergeParentAttrs (vm, data, parentData) {\n   if (parentData.attrs) {\n     const props = vm.$options.props\n+    const attrs = data.attrs || (data.attrs = [])\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n-        data.attrs[key] = parentData.attrs[key]\n+        attrs[key] = parentData.attrs[key]\n       }\n     }\n   }"
            },
            {
                "commitId": "1a35cf4a21e8c8e897c2d6f291b99376b12b9fac",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -19,13 +19,19 @@ export function initRender (vm) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n+    children = children.slice()\n     const slots = { default: children }\n     let i = children.length\n     let name, child\n     while (i--) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n-        (slots[name] || (slots[name] = [])).push(child)\n+        let slot = (slots[name] || (slots[name] = []))\n+        if (child.tag === 'template') {\n+          slot.push.apply(slot, child.children)\n+        } else {\n+          slot.push(child)\n+        }\n         children.splice(i, 1)\n       }\n     }\n@@ -123,7 +129,6 @@ export function renderMixin (Vue) {\n       mergeParentDirectives(this, data, _renderData)\n       updateParentCallbacks(this, data, _renderData)\n     }\n-    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "e9ae8187c2be7e03da425a23545b4523eca70c45",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -123,6 +123,7 @@ export function renderMixin (Vue) {\n       mergeParentDirectives(this, data, _renderData)\n       updateParentCallbacks(this, data, _renderData)\n     }\n+    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "4e86d3aba9d734bf2b50327933d221f3ceb522f2",
                "additions": 26,
                "deletions": 15,
                "patch": "@@ -10,10 +10,7 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n-  vm._renderData = vm.$options._renderData\n   vm.$slots = {}\n-  // props are set in initState\n-  resolveSlots(vm, vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -79,14 +76,15 @@ export function renderMixin (Vue) {\n     callHook(this, 'updated')\n   }\n \n-  Vue.prototype._tryUpdate = function (data, children) {\n-    this._renderData = data\n+  Vue.prototype._tryUpdate = function (data, children, key) {\n+    this.$options._renderKey = key\n+    this.$options._renderData = data\n+    this.$options._renderChildren = children\n     if (children) {\n-      resolveSlots(this, children)\n       this.$forceUpdate()\n       return\n     }\n-    // set props if they have changed.\n+    // set props - this will trigger update if any of them changed\n     const attrs = data && data.attrs\n     if (attrs) {\n       for (let key in this.$options.props) {\n@@ -101,17 +99,30 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._render = function () {\n+    const {\n+      render,\n+      _renderKey,\n+      _renderData,\n+      _renderChildren\n+    } = this.$options\n+    // resolve slots\n+    if (_renderChildren) {\n+      resolveSlots(this, _renderChildren)\n+    }\n+    // render\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const vnode = this.$options.render.call(this)\n-    const data = vnode.data\n-    const parentData = this._renderData\n-    if (parentData) {\n-      mergeParentAttrs(this, data, parentData)\n-      mergeParentDirectives(this, data, parentData)\n-      updateParentCallbacks(this, data, parentData)\n-    }\n+    const vnode = render.call(this)\n     renderState.activeInstance = prev\n+    // set key\n+    vnode.key = _renderKey\n+    // update parent data\n+    if (_renderData) {\n+      const data = vnode.data\n+      mergeParentAttrs(this, data, _renderData)\n+      mergeParentDirectives(this, data, _renderData)\n+      updateParentCallbacks(this, data, _renderData)\n+    }\n     return vnode\n   }\n "
            },
            {
                "commitId": "be9e16e20fce0d6c9b5ab72be02894dc05a2734f",
                "additions": 16,
                "deletions": 5,
                "patch": "@@ -1,6 +1,6 @@\n import Watcher from '../observer/watcher'\n import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n-import { createElement, patch } from '../vdom/index'\n+import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export const renderState = {\n@@ -36,8 +36,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function mergeParentData (vm, data, parentData) {\n-  // attrs\n+function mergeParentAttrs (vm, data, parentData) {\n   if (parentData.attrs) {\n     const props = vm.$options.props\n     for (let key in parentData.attrs) {\n@@ -46,12 +45,22 @@ function mergeParentData (vm, data, parentData) {\n       }\n     }\n   }\n-  // directives\n+}\n+\n+function mergeParentDirectives (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.conact(data.directives || [])\n   }\n }\n \n+function updateParentCallbacks (vm, data, parentData) {\n+  if (parentData.on) {\n+    updateListeners(parentData.on, data.on || {}, (event, handler) => {\n+      vm.$on(event, handler)\n+    })\n+  }\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -98,7 +107,9 @@ export function renderMixin (Vue) {\n     const data = vnode.data\n     const parentData = this._renderData\n     if (parentData) {\n-      mergeParentData(this, data, parentData)\n+      mergeParentAttrs(this, data, parentData)\n+      mergeParentDirectives(this, data, parentData)\n+      updateParentCallbacks(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n     return vnode"
            },
            {
                "commitId": "56073ca8532d90706cd50b8a3177011093b01675",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -77,14 +77,16 @@ export function renderMixin (Vue) {\n       this.$forceUpdate()\n       return\n     }\n-    // set props. because props are reactive,\n-    // if any of them has changed it will trigger an update.\n+    // set props if they have changed.\n     const attrs = data && data.attrs\n     if (attrs) {\n       for (let key in this.$options.props) {\n-        this[key] = hasOwn(attrs, key)\n+        let newVal = hasOwn(attrs, key)\n           ? attrs[key]\n           : attrs[hyphenate(key)]\n+        if (this[key] !== newVal) {\n+          this[key] = newVal\n+        }\n       }\n     }\n   }\n@@ -99,7 +101,6 @@ export function renderMixin (Vue) {\n       mergeParentData(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n-    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "48f328bcaf2ebcc256d1c9114cf9cc2da54f15ae",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -99,6 +99,7 @@ export function renderMixin (Vue) {\n       mergeParentData(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n+    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "5c1063a5e4167d1938febc4d4fd4f4edee260505",
                "additions": 7,
                "deletions": 12,
                "patch": "@@ -77,19 +77,14 @@ export function renderMixin (Vue) {\n       this.$forceUpdate()\n       return\n     }\n-    // check props\n-    if (data && data.attrs) {\n-      let changed = false\n+    // set props. because props are reactive,\n+    // if any of them has changed it will trigger an update.\n+    const attrs = data && data.attrs\n+    if (attrs) {\n       for (let key in this.$options.props) {\n-        let oldVal = this[key]\n-        let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n-        if (oldVal !== newVal) {\n-          this[key] = newVal\n-          changed = true\n-        }\n-      }\n-      if (changed) {\n-        this.$forceUpdate()\n+        this[key] = hasOwn(attrs, key)\n+          ? attrs[key]\n+          : attrs[hyphenate(key)]\n       }\n     }\n   }"
            },
            {
                "commitId": "5970dbd2f5694efb1328789f4f0f83d89a5e4beb",
                "additions": 6,
                "deletions": 12,
                "patch": "@@ -20,16 +20,6 @@ export function initRender (vm) {\n   }\n }\n \n-export function setProps (vm, data) {\n-  const attrs = (data && data.attrs) || {}\n-  const props = vm.$options.props\n-  if (props) {\n-    for (let key in props) {\n-      vm[key] = attrs[key]\n-    }\n-  }\n-}\n-\n function resolveSlots (vm, children) {\n   if (children) {\n     const slots = { default: children }\n@@ -89,14 +79,18 @@ export function renderMixin (Vue) {\n     }\n     // check props\n     if (data && data.attrs) {\n-      setProps(this, data)\n+      let changed = false\n       for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n         if (oldVal !== newVal) {\n-          this.$forceUpdate()\n+          this[key] = newVal\n+          changed = true\n         }\n       }\n+      if (changed) {\n+        this.$forceUpdate()\n+      }\n     }\n   }\n "
            },
            {
                "commitId": "8218eae1f91ab3d777b594821c55a687f647ca9b",
                "additions": 39,
                "deletions": 9,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hyphenate } from '../util/index'\n+import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n@@ -11,18 +11,28 @@ export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm._renderData = vm.$options._renderData\n-  vm.$slots = resolveSlots(vm.$options._renderChildren)\n+  vm.$slots = {}\n+  // props are set in initState\n+  resolveSlots(vm, vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n   }\n }\n \n-function resolveSlots (children) {\n-  const slots = {\n-    default: children\n+export function setProps (vm, data) {\n+  const attrs = (data && data.attrs) || {}\n+  const props = vm.$options.props\n+  if (props) {\n+    for (let key in props) {\n+      vm[key] = attrs[key]\n+    }\n   }\n+}\n+\n+function resolveSlots (vm, children) {\n   if (children) {\n+    const slots = { default: children }\n     let i = children.length\n     let name, child\n     while (i--) {\n@@ -32,8 +42,24 @@ function resolveSlots (children) {\n         children.splice(i, 1)\n       }\n     }\n+    vm.$slots = slots\n+  }\n+}\n+\n+function mergeParentData (vm, data, parentData) {\n+  // attrs\n+  if (parentData.attrs) {\n+    const props = vm.$options.props\n+    for (let key in parentData.attrs) {\n+      if (!hasOwn(props, key)) {\n+        data.attrs[key] = parentData.attrs[key]\n+      }\n+    }\n+  }\n+  // directives\n+  if (parentData.directives) {\n+    data.directives = parentData.directives.conact(data.directives || [])\n   }\n-  return slots\n }\n \n export function renderMixin (Vue) {\n@@ -56,13 +82,14 @@ export function renderMixin (Vue) {\n \n   Vue.prototype._tryUpdate = function (data, children) {\n     this._renderData = data\n-    this.$slots = resolveSlots(children)\n     if (children) {\n+      resolveSlots(this, children)\n       this.$forceUpdate()\n       return\n     }\n     // check props\n     if (data && data.attrs) {\n+      setProps(this, data)\n       for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n@@ -77,8 +104,11 @@ export function renderMixin (Vue) {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n     const vnode = this.$options.render.call(this)\n-    // merge parent data\n-    // TODO\n+    const data = vnode.data\n+    const parentData = this._renderData\n+    if (parentData) {\n+      mergeParentData(this, data, parentData)\n+    }\n     renderState.activeInstance = prev\n     return vnode\n   }"
            },
            {
                "commitId": "d6c5abbf35af32ee6a166fc3e63e2b25343a0a61",
                "additions": 33,
                "deletions": 10,
                "patch": "@@ -10,13 +10,32 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n-  // TODO: handle _renderData and _renderChildren\n+  vm._renderData = vm.$options._renderData\n+  vm.$slots = resolveSlots(vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n   }\n }\n \n+function resolveSlots (children) {\n+  const slots = {\n+    default: children\n+  }\n+  if (children) {\n+    let i = children.length\n+    let name, child\n+    while (i--) {\n+      child = children[i]\n+      if ((name = child.data && child.data.slot)) {\n+        (slots[name] || (slots[name] = [])).push(child)\n+        children.splice(i, 1)\n+      }\n+    }\n+  }\n+  return slots\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -36,8 +55,9 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._tryUpdate = function (data, children) {\n+    this._renderData = data\n+    this.$slots = resolveSlots(children)\n     if (children) {\n-      // TODO: handle content slots\n       this.$forceUpdate()\n       return\n     }\n@@ -53,20 +73,23 @@ export function renderMixin (Vue) {\n     }\n   }\n \n+  Vue.prototype._render = function () {\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const vnode = this.$options.render.call(this)\n+    // merge parent data\n+    // TODO\n+    renderState.activeInstance = prev\n+    return vnode\n+  }\n+\n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n     this.$el = el && query(el)\n     if (this.$el) {\n       this.$el.innerHTML = ''\n     }\n-    const render = this.$options.render\n-    this._watcher = new Watcher(this, () => {\n-      const prev = renderState.activeInstance\n-      renderState.activeInstance = this\n-      const vnode = render.call(this)\n-      renderState.activeInstance = prev\n-      return vnode\n-    }, this._update)\n+    this._watcher = new Watcher(this, this._render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true"
            },
            {
                "commitId": "84ce91df72928f622ba993ee89e41a642eb92fb0",
                "additions": 6,
                "deletions": 4,
                "patch": "@@ -3,7 +3,9 @@ import { query, resolveAsset, hyphenate } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n-export const target = { _: null }\n+export const renderState = {\n+  activeInstance: null\n+}\n \n export function initRender (vm) {\n   vm._vnode = null\n@@ -59,10 +61,10 @@ export function renderMixin (Vue) {\n     }\n     const render = this.$options.render\n     this._watcher = new Watcher(this, () => {\n-      const prev = target._\n-      target._ = this\n+      const prev = renderState.activeInstance\n+      renderState.activeInstance = this\n       const vnode = render.call(this)\n-      target._ = prev\n+      renderState.activeInstance = prev\n       return vnode\n     }, this._update)\n     this._update(this._watcher.value)"
            },
            {
                "commitId": "8bc6915ce129b7642121c8462222d375343b9d3a",
                "additions": 10,
                "deletions": 1,
                "patch": "@@ -3,6 +3,8 @@ import { query, resolveAsset, hyphenate } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n+export const target = { _: null }\n+\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n@@ -55,7 +57,14 @@ export function renderMixin (Vue) {\n     if (this.$el) {\n       this.$el.innerHTML = ''\n     }\n-    this._watcher = new Watcher(this, this.$options.render, this._update)\n+    const render = this.$options.render\n+    this._watcher = new Watcher(this, () => {\n+      const prev = target._\n+      target._ = this\n+      const vnode = render.call(this)\n+      target._ = prev\n+      return vnode\n+    }, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true"
            },
            {
                "commitId": "058c555dac875d1c979b92ccaeb36412d6912c82",
                "additions": 2,
                "deletions": 3,
                "patch": "@@ -38,9 +38,8 @@ export function renderMixin (Vue) {\n       return\n     }\n     // check props\n-    const props = this.$options.props\n-    if (props && data && data.attrs) {\n-      for (let key in props) {\n+    if (data && data.attrs) {\n+      for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n         if (oldVal !== newVal) {"
            },
            {
                "commitId": "5c3edf850bcf7dacf0fd4d6b625fce2e937ebe93",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -39,7 +39,7 @@ export function renderMixin (Vue) {\n     }\n     // check props\n     const props = this.$options.props\n-    if (props && data.attrs) {\n+    if (props && data && data.attrs) {\n       for (let key in props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]"
            },
            {
                "commitId": "f2c8880041bd845b4af28ed20e2f67c2e2c8d6ff",
                "additions": 35,
                "deletions": 11,
                "patch": "@@ -1,10 +1,12 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset } from '../util/index'\n-import { h, patch } from '../vdom/index'\n+import { query, resolveAsset, hyphenate } from '../util/index'\n+import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n+  vm._vnode = null\n   vm._mounted = false\n+  // TODO: handle _renderData and _renderChildren\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -13,33 +15,55 @@ export function initRender (vm) {\n \n export function renderMixin (Vue) {\n   // shorthands used in render functions\n-  Vue.prototype.__h__ = h\n+  Vue.prototype.__h__ = createElement\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n-  Vue.prototype._update = function (vtree) {\n+  Vue.prototype._update = function (vnode) {\n     callHook(this, 'beforeUpdate')\n-    if (!this._tree) {\n-      this.$el = patch(this.$el, vtree)\n+    if (!this._vnode) {\n+      this.$el = patch(this.$el, vnode)\n     } else {\n-      this.$el = patch(this._tree, vtree)\n+      this.$el = patch(this._vnode, vnode)\n     }\n-    this._tree = vtree\n+    this._vnode = vnode\n     callHook(this, 'updated')\n   }\n \n+  Vue.prototype._tryUpdate = function (data, children) {\n+    if (children) {\n+      // TODO: handle content slots\n+      this.$forceUpdate()\n+      return\n+    }\n+    // check props\n+    const props = this.$options.props\n+    if (props && data.attrs) {\n+      for (let key in props) {\n+        let oldVal = this[key]\n+        let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n+        if (oldVal !== newVal) {\n+          this.$forceUpdate()\n+        }\n+      }\n+    }\n+  }\n+\n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n-    this.$el = el ? query(el) : document.createElement('div')\n-    this.$el.innerHTML = ''\n+    this.$el = el && query(el)\n+    if (this.$el) {\n+      this.$el.innerHTML = ''\n+    }\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true\n+    return this\n   }\n \n   Vue.prototype.$forceUpdate = function () {\n-    this._watcher.run()\n+    this._watcher.update()\n   }\n }"
            },
            {
                "commitId": "0b5e962943e88d6b5bc7b5c06851b2983d6201be",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -4,6 +4,7 @@ import { h, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n+  vm._mounted = false\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -35,6 +36,7 @@ export function renderMixin (Vue) {\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n+    this._mounted = true\n   }\n \n   Vue.prototype.$forceUpdate = function () {"
            },
            {
                "commitId": "8cf836f2ecb876a17305287cb18e7009555c11f3",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query } from '../util/index'\n+import { query, resolveAsset } from '../util/index'\n import { h, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n@@ -11,7 +11,11 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  // shorthands used in render functions\n   Vue.prototype.__h__ = h\n+  Vue.prototype.__d__ = function (id) {\n+    return resolveAsset(this.$options, 'directives', id, true)\n+  }\n \n   Vue.prototype._update = function (vtree) {\n     callHook(this, 'beforeUpdate')"
            },
            {
                "commitId": "914da492bf456de05205d0a0f82ecc4aa8719f6b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -16,9 +16,9 @@ export function renderMixin (Vue) {\n   Vue.prototype._update = function (vtree) {\n     callHook(this, 'beforeUpdate')\n     if (!this._tree) {\n-      patch(this.$el, vtree)\n+      this.$el = patch(this.$el, vtree)\n     } else {\n-      patch(this._tree, vtree)\n+      this.$el = patch(this._tree, vtree)\n     }\n     this._tree = vtree\n     callHook(this, 'updated')"
            },
            {
                "commitId": "0694a9bfb63350d2cb7ed992fee82e6a632ec74a",
                "additions": 5,
                "deletions": 0,
                "patch": "@@ -1,6 +1,7 @@\n import Watcher from '../observer/watcher'\n import { query } from '../util/index'\n import { h, patch } from '../vdom/index'\n+import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n   const el = vm.$options.el\n@@ -13,19 +14,23 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = h\n \n   Vue.prototype._update = function (vtree) {\n+    callHook(this, 'beforeUpdate')\n     if (!this._tree) {\n       patch(this.$el, vtree)\n     } else {\n       patch(this._tree, vtree)\n     }\n     this._tree = vtree\n+    callHook(this, 'updated')\n   }\n \n   Vue.prototype.$mount = function (el) {\n+    callHook(this, 'beforeMount')\n     this.$el = el ? query(el) : document.createElement('div')\n     this.$el.innerHTML = ''\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n+    callHook(this, 'mounted')\n   }\n \n   Vue.prototype.$forceUpdate = function () {"
            },
            {
                "commitId": "0e1ac079198044f22ea6c92d669a9a5f2336e9e0",
                "additions": 12,
                "deletions": 6,
                "patch": "@@ -3,25 +3,31 @@ import { query } from '../util/index'\n import { h, patch } from '../vdom/index'\n \n export function initRender (vm) {\n-  const options = vm.$options\n-  vm._el = query(options.el)\n-  vm._el.innerHTML = ''\n-  vm._watcher = new Watcher(vm, options.render, vm._update)\n-  vm._update(vm._watcher.value)\n+  const el = vm.$options.el\n+  if (el) {\n+    vm.$mount(el)\n+  }\n }\n \n export function renderMixin (Vue) {\n   Vue.prototype.__h__ = h\n \n   Vue.prototype._update = function (vtree) {\n     if (!this._tree) {\n-      patch(this._el, vtree)\n+      patch(this.$el, vtree)\n     } else {\n       patch(this._tree, vtree)\n     }\n     this._tree = vtree\n   }\n \n+  Vue.prototype.$mount = function (el) {\n+    this.$el = el ? query(el) : document.createElement('div')\n+    this.$el.innerHTML = ''\n+    this._watcher = new Watcher(this, this.$options.render, this._update)\n+    this._update(this._watcher.value)\n+  }\n+\n   Vue.prototype.$forceUpdate = function () {\n     this._watcher.run()\n   }"
            },
            {
                "commitId": "b5800b274c472897e64184ea716566422b3046cb",
                "additions": 28,
                "deletions": 0,
                "patch": "@@ -0,0 +1,28 @@\n+import Watcher from '../observer/watcher'\n+import { query } from '../util/index'\n+import { h, patch } from '../vdom/index'\n+\n+export function initRender (vm) {\n+  const options = vm.$options\n+  vm._el = query(options.el)\n+  vm._el.innerHTML = ''\n+  vm._watcher = new Watcher(vm, options.render, vm._update)\n+  vm._update(vm._watcher.value)\n+}\n+\n+export function renderMixin (Vue) {\n+  Vue.prototype.__h__ = h\n+\n+  Vue.prototype._update = function (vtree) {\n+    if (!this._tree) {\n+      patch(this._el, vtree)\n+    } else {\n+      patch(this._tree, vtree)\n+    }\n+    this._tree = vtree\n+  }\n+\n+  Vue.prototype.$forceUpdate = function () {\n+    this._watcher.run()\n+  }\n+}"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "give me all the commits for vnode.js file?",
        "number": 6,
        "category": 2,
        "response": "Here are the commits for the `vnode.js` file:\n\n1. Commit ID: 9949ab5d14e3620f40b876cffbc710a33d0237b2\n   - Message: \"Merge pull request #3 from dwelch2344/move_to_typescript\\n\\nWIP: typescript love on the tests\"\n   - Date: 2022-05-04T21:25:34Z\n\n2. Commit ID: 40dccfedd1d92ef9d61ee350ed8fbd7fc525b5b9\n   - Message: \"chore: fix test harness; most of the tooling + test harness is happy; coverage still needs fixing\"\n   - Date: 2022-05-03T17:04:55Z\n\n3. Commit ID: 982d5a492fb95577217e2dacaa044eabe78a8601\n   - Message: \"fix(types): support string type for style in VNode data (#9728)\\n\\nfix #9727\"\n   - Date: 2019-03-18T07:47:43Z\n\n4. Commit ID: dbc0582587f90e78867809bb6ae683301cd0626b\n   - Message: \"feat: dynamic directive arguments for v-on, v-bind and custom directives (#9373)\"\n   - Date: 2019-01-26T04:22:44Z\n\n5. Commit ID: 097f6229dffc34af452b106ad2a3b58845588807\n   - Message: \"fix(core): avoid mutating original children when cloning vnode\\n\\nThe on-demand clone strategy introduced in 956756b mutates the owner\\narray of the cloned vnode. This causes the newly cloned vnode to be\\ndestroyed when the parent node is destroyed. This is fixed by cloning\\nthe children array when cloning a vnode.\\n\\nfix #7975\"\n   - Date: 2018-12-01T22:05:36Z\n\n6. Commit ID: 4ecc21c29ec12bb33d3b426cb4d42c579e9b0f2d\n   - Message: \"feat(devtools): store functional render context on vnode in development (#8586)\"\n   - Date: 2018-11-30T22:31:44Z\n\n7. Commit ID: 8227fb35240ab1f301c30a6ad5d4d25071fa7996\n   - Message: \"fix: add missing `asyncMeta` during VNode cloning (#7861)\"\n   - Date: 2018-03-23T23:13:10Z\n\n8. Commit ID: d7d9b002fd60d246b1ef65f71b55b45f46563b4d\n   - Message: \"chore: fix typo (#7781)\"\n   - Date: 2018-03-09T13:54:55Z\n\n9. Commit ID: 956756b1be7084daf8b6afb92ac0da7c24cde2a5\n   - Message: \"refactor: use more efficient on-demand clone to handle reused node edge cases\\n\\nremoves unnecessary slot/static node clones, fix #7292\"\n   - Date: 2017-12-21T00:44:24Z\n\n10. Commit ID: 604e081d0456ed136b24b5f759c608d153dfae93\n   - Message: \"fix: ensure functionalContext is cloned during slot clones\\n\\nfix #7106\"\n   - Date: 2017-11-22T21:37:24Z\n\n11. Commit ID: 1cf02efda206185cb72bbaafb00037fa6269e3f3\n   - Message: \"fix: also clone component slot children during deepClone\\n\\nfix #6891, fix #6915\"\n   - Date: 2017-10-26T16:00:19Z\n\n12. Commit ID: 53431c63a9033bb9a73c915bca8525f0d7988c26\n   - Message: \"types: fix flow typing\"\n   - Date: 2017-10-11T15:24:39Z\n\n13. Commit ID: 421658884f7ca786747abf9b89e00925fdfdfba8\n   - Message: \"fix: fix scoped CSS for nested nodes in functional components\"\n   - Date: 2017-10-11T15:17:46Z\n\n14. Commit ID: 050bb33f9b02589357c037623ea8cbf8ff13555b\n   - Message: \"feat: scoped CSS support for functional components\"\n   - Date: 2017-10-11T14:38:46Z\n\n15. Commit ID: 53463619e5d19d35dfad1a4245a8dc583681feb3\n   - Message: \"perf: deep clone slot vnodes on re-render (#6478)\\n\\navoid unnecessary assignment.\"\n   - Date: 2017-09-01T16:14:55Z\n\n16. Commit ID: 0529040c17b8632032a43d142aac88386f6b4a1f\n   - Message: \"fix: deep clone slot vnodes on re-render\\n\\nfix #6372\"\n   - Date: 2017-08-29T22:47:10Z\n\n17. Commit ID: 11614d63b7862b68b11cc45c0891437c62a832d7\n   - Message: \"feat(v-on): support v-on object syntax with no arguments\\n\\nNote this does not support modifiers and is meant to be used for handling\\nevents proxying in higher-order-components.\"\n   - Date: 2017-07-11T08:36:04Z\n\n18. Commit ID: fed602b90be89a43b4ec41b5a2e0a526d3a5f4a2\n   - Message: \"refactor: also clone vnode.asyncFactory\"\n   - Date: 2017-07-11T05:06:23Z\n\n19. Commit ID: e4da249ab8ef32a0b8156c840c9d2b9773090f8a\n   - Message: \"feat: add `comments` option to allow preserving comments in template  (#5951)\\n\\nclose #5392\"\n   - Date: 2017-06-30T00:56:23Z\n\n20. Commit ID: d33c1250ee77dd337eb4979851ade331f177b890\n   - Message: \"fix:when using object syntax in v-bind, special attribute have no effect\"\n   - Date: 2017-06-16T18:02:37Z\n\n21. Commit ID: 9cf6646f46ef3c13236677e58e72d2c6dd5c8abf\n   - Message: \"support directly rendering async components in SSR\"\n   - Date: 2017-05-24T08:50:17Z\n\n22. Commit ID: 7404091896fda2c87ecac64efc24324ff1885e2c\n   - Message: \"support async hydration\"\n   - Date: 2017-05-24T08:50:17Z\n\n23. Commit ID: 43485fbc5b779e02122c3b7fc64296a2cfee31f6\n   - Message: \"Merge branch ssr-optimize into dev\"\n   - Date: 2017-05-18T08:56:05Z\n\n24. Commit ID: 26953f5cacc03440df394ebbc74023efd364b7e0\n   - Message: \"add semis to flow decls for better syntax highlighting\"\n   - Date: 2017-05-15T08:01:30Z\n\n25. Commit ID: 0ccefff794c5fe73b80b9faf5ae5bfd8ec1a500f\n   - Message: \"support v-for on scoped slots (fix #5615)\"\n   - Date: 2017-05-09T15:22:55Z\n\n26. Commit ID: 5d965d5b3bbe0e76cdb97e41e01a704322253e09\n   - Message: \"clone `isComment` when cloneVNode (#5633)\"\n   - Date: 2017-05-09T13:12:59Z\n\n27. Commit ID: 1073035164b809872bf35a3b007848979f86f48a\n   - Message: \"fix activate hook call timing (fix vue-router#1212)\"\n   - Date: 2017-04-07T07:30:37Z\n\n28. Commit ID: a12d32a56df2519c9cdf8d2da9d9425876263f89\n   - Message: \"fix style diffing on cached/slot elements (fix #5318)\"\n   - Date: 2017-04-03T06:13:57Z\n\n29. Commit ID: 2afaac2b397b4b04713488aeb62e5e222e5dc121\n   - Message: \"cache vnodes length (#5125)\"\n   - Date: 2017-03-08T02:24:25Z\n\n30. Commit ID: 9d6c8ec268f659a715e3b38c97a1e03964961703\n   - Message: \"feat: allow customization of component v-model prop/event via model option (close #4515)\"\n   - Date: 2017-01-22T19:31:43Z\n\n31. Commit ID: fe02bc3a27b3b33f9467980f61126edf97105287\n   - Message: \"ignore deprecated alias\"\n   - Date: 2017-01-12T23:24:37Z\n\n32. Commit ID: ced2dfc8f704b07cd59467eca38c58c590d0c012\n   - Message: \"expose vnode.child for backwards compat, update .flowconfig & ts types\"\n   - Date: 2017-01-12T23:04:36Z\n\n33. Commit ID: 30258a9a60b96c25c95685cb17ee35838830ee4c\n   - Message: \"rename vnode.child -> vnode.componentInstance\"\n   - Date: 2017-01-12T22:44:19Z\n\n34. Commit ID: 207c18c47f8c94f6d92675b28bc67511b7897246\n   - Message: \"further reduce normalizeChildren usage\"\n   - Date: 2016-12-05T01:36:40Z\n\n35. Commit ID: 7c3c86f36044ada983c09e7733841cb4c55de9d1\n   - Message: \"fix namespace hoisting\"\n   - Date: 2016-12-05T01:36:40Z\n\n36. Commit ID: 79e1058799dcde0b7e341ef44b590ecbf1e3a722\n   - Message: \"wip: refactor compiler to skip normalization when possible\\n\\nwip fix\\n\\nwip fix\\n\\nwip fix\"\n   - Date: 2016-12-05T01:36:40Z\n\n37. Commit ID: 7431e4d16c92862ac74fdb3053de9295c809b586\n   - Message: \"emptyVNode -> createEmptyVNode\"\n   - Date: 2016-12-05T01:36:40Z\n\n38. Commit ID: 7b389bc34e12442663de1939882b523345a9e46d\n   - Message: \"avoid warning unknown custom elements in v-pre\"\n   - Date: 2016-11-24T17:47:27Z\n\n39. Commit ID: 303378f85b26934396e2f6dc0973f6982da2beb1\n   - Message: \"support default scoped slot + function children as scoped slot\"\n   - Date: 2016-11-20T17:03:43Z\n\n40. Commit ID: ff551029bf872ad067ac7c5ba7c6311fdde7c674\n   - Message: \"wip: fix flow type for weex merge\"\n   - Date: 2016-11-07T21:26:06Z\n\n41. Commit ID: b69b4a4eeff204488c3eb60cac951f9808581e1c\n   - Message: \"tweak style merge for performance\"\n   - Date: 2016-11-07T21:20:10Z\n\n42. Commit ID: e960cd104e67e8e410956fa589090fe171382528\n   - Message: \"enable style merge behavior between parent-child components (fix #3997) (#4138)\\n\\n* merge style between components\\r\\n\\r\\n* update test case\\r\\n\\r\\n* update style compiler\\r\\n\\r\\n* add paren to style binding code\\r\\n\\r\\n* update background property parsing\\r\\n\\r\\n* introduce interpolation warning and refactor var to const\"\n   - Date: 2016-11-07T21:19:48Z\n\n43. Commit ID: ec824be88e9bc71b31e5c4a43f80d921674dca66\n   - Message: \"fix v-once inside v-for (fix #3964)\"\n   - Date: 2016-11-03T02:34:36Z\n\n44. Commit ID: 0cd1489e68891e4ca532ce7299d09e8af5ae3f52\n   - Message: \".number modifier should work with select, radio, checkbox (fix #4018) (#4022)\\n\\n* support number modifier in select, radio, checkbox\\r\\n\\r\\n* add test case\\r\\n\\r\\n* add ASTModifier type to specify modifiers type\\r\\n\\r\\n* fix typo\\r\\n\\r\\n* keep code consistent\"\n   - Date: 2016-11-01T15:50:22Z\n\n45. Commit ID: 1a8720d6ead500eed5d40457a3e7f59fe8972472\n   - Message: \"Fix typo in component (#3978)\"\n   - Date: 2016-10-19T14:33:17Z\n\n46. Commit ID: 1fa3844dc26745b4cb855b0934bd1b132ba33d9b\n   - Message: \"refactor directive update implementation\"\n   - Date: 2016-10-12T00:31:13Z\n\n47. Commit ID: 3446d1485d36b91ef42c53268cb69ecb047538a5\n   - Message: \"support functional components as named slot (fix #3872)\"\n   - Date: 2016-10-11T02:41:14Z\n\n48. Commit ID: d6a7568891d0c3368471322de5d730172d92b9e4\n   - Message: \"improve v-bind implementation and make it work on components (fix #3670)\"\n   - Date: 2016-09-14T14:14:45Z\n\n49. Commit ID: f6b1a51729f705bc49c6eaaf32ec095efd97401c\n   - Message: \"fix hot-reload not updating static nodes\"\n   - Date: 2016-08-29T15:45:08Z\n\n50. Commit ID: 014d2f8599f9afc0754e603b1528a12e74bd209a\n   - Message: \"fix vdom patch edge case for static nodes being reused and as insertion reference node (fix #3533)\"\n   - Date: 2016-08-27T20:29:07Z\n\n51. Commit ID: ed2085974b2a385ca1fd8cd696917d6cda8322e7\n   - Message: \"ensure mergeVNodeHook does not inject duplicate hooks\"\n   - Date: 2016-08-26T23:19:51Z\n\n52. Commit ID: d2df58e547a7e1018c72a52714be7dee4ad06922\n   - Message: \"move v-show marker to runtime so that render functions work as expected (fix #3488)\"\n   - Date: 2016-08-20T15:14:41Z\n\n53. Commit ID: ba5fb31188467c9f07cdcfa94e9469e172098ec5\n   - Message: \"fix transition insert hook duplicate invocation on slot nodes (fix #3474)\"\n   - Date: 2016-08-18T16:00:31Z\n\n54. Commit ID: 18386c4cf4fe829f447687734a5bf03905d0db44\n   - Message: \"fix static nodes optimization inside v-for (fix #3406)\"\n   - Date: 2016-08-08T23:03:00Z\n\n55. Commit ID: fe801b16e4da63513bce95bfa762a8a36d83fe59\n   - Message: \"wip: fix $parent after children change\"\n   - Date: 2016-08-05T16:43:35Z\n\n56. Commit ID: b5b963f51df1fa3124cd8a9846be5455408bc52a\n   - Message: \"wip: refactor children resolution (remove thunk mechanism)\"\n   - Date: 2016-08-05T16:10:13Z\n\n57. Commit ID: c66b7566c682af653dc475fab1475db5484e40ee\n   - Message: \"fix flow\"\n   - Date: 2016-08-05T07:10:40Z\n\n58. Commit ID: 59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8\n   - Message: \"support class/style in v-bind object\"\n   - Date: 2016-08-05T06:59:33Z\n\n59. Commit ID: 351aef3cb4ada980f105f98f8b835876e8d4d689\n   - Message: \"use comment node as empty placeholder (fix <transition> SSR hydration)\"\n   - Date: 2016-08-05T05:52:09Z\n\n60. Commit ID: 40b93e6527d9ecdb308925114bf14cb60b36eae0\n   - Message: \"avoid unnecessary enter transitions on nested inserted elements\"\n   - Date: 2016-08-05T02:17:59Z\n\n61. Commit ID: 35ee5b105e8a517571b9bb9a87160c6ffbdad779\n   - Message: \"remove staticAttrs\"\n   - Date: 2016-07-29T14:45:43Z\n\n62. Commit ID: 74f8b98509d24487e1a8d1588b4128a7a1046a41\n   - Message: \"handle static vnodes properly during patch (fix #3325)\"\n   - Date: 2016-07-26T19:49:40Z\n\n63. Commit ID: 3ce450b6dc5f2135266c8a38818371e9d4f1f460\n   - Message: \"use more proper flow type syntax\"\n   - Date: 2016-07-26T01:28:46Z\n\n64. Commit ID: ea9c6c37c3ef0ef3706afa94070b89a7464c559c\n   - Message: \"support v-on .native modifier on components\"\n   - Date: 2016-07-19T22:56:10Z\n\n65. Commit ID: 69ecdcb05e3f5db32af889962fe8253d49d7390d\n   - Message: \"rename vnode.data.props -> domProps\"\n   - Date: 2016-07-19T21:52:10Z\n\n66. Commit ID: e6871a33c17fd7dfd58fba6c7c6b6182f0ff2f0e\n   - Message: \"update flow annotations\"\n   - Date: 2016-07-15T21:48:42Z\n\n67. Commit ID: 9421bd48066906e20052e04cf88c4ae623080a95\n   - Message: \"extract getRealChild for abstract components\"\n   - Date: 2016-07-06T21:07:46Z\n\n68. Commit ID: 06b470369a7bde2a7f36468191e424b4c455db67\n   - Message: \"element namespace should be resolved at runtime for render function / jsx usage\"\n   - Date: 2016-06-27T18:02:14Z\n\n69. Commit ID: 1b3b19491fd47f3634e30d7fcce991881de16530\n   - Message: \"merge renderElement and renderElementWithChildren\"\n   - Date: 2016-06-27T16:25:02Z\n\n70. Commit ID: cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9\n   - Message: \"apply scopeId to slot contents too\"\n   - Date: 2016-06-15T17:33:12Z\n\n71. Commit ID: b0ad94fc876826a8ee3226320aacd40b8967f8dd\n   - Message: \"properly encode HTML in server-side rendering (fix #3078)\"\n   - Date: 2016-06-14T18:15:41Z\n\n72. Commit ID: a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6\n   - Message: \"fix whitespace vnode identity breaking patch (fix #3043)\"\n   - Date: 2016-06-08T17:28:55Z\n\n73. Commit ID: a5a9dc9b694da007a13bd5adfd64b0ab0750ad57\n   - Message: \"support keep-alive\"\n   - Date: 2016-06-04T14:53:05Z\n\n74. Commit ID: 4bcdce895c5dc0403b6a94b0ad71b2bc57734234\n   - Message: \"record original tag name on vnode for components using is attribute\"\n   - Date: 2016-06-02T22:18:32Z\n\n75. Commit ID: d40ab0ca8760b9d8ec8be630e2360e6927ba8b3e\n   - Message: \"fix component client-side hydration\"\n   - Date: 2016-06-01T22:20:13Z\n\n76. Commit ID: f8cfc81826715b23dac054b6d1727594d2caeebd\n   - Message: \"remove unnecessary v-pre related code\"\n   - Date: 2016-06-01T19:03:09Z\n\n77. Commit ID: 8d229b2442e8cc5b2801fa55a4ea8ea766721381\n   - Message: \"support v-bind on objects\"\n   - Date: 2016-05-25T00:41:06Z\n\n78. Commit ID: 7f85acb4e5c28052e07d5e2c4cf2903cac0e4bd5\n   - Message: \"expose oldValue on directive bindings\"\n   - Date: 2016-05-24T22:28:17Z\n\n79. Commit ID: 48f22c9b17a9def00dcfa4899fee9e60c8933dbc\n   - Message: \"fix flow error\"\n   - Date: 2016-05-24T04:27:18Z\n\n80. Commit ID: 837853d95ad1224ed12ba2454b791591884caf2e\n   - Message: \"better inferring of component names in warnings\"\n   - Date: 2016-05-19T17:58:11Z\n\n81. Commit ID: 20fb79a1ea098bedda6fec8bebbb184ac51fce20\n   - Message: \"new render mechanism (#2857)\\n\\n* updated compiler with new render functions\\r\\n\\r\\n* separated createElement into renderSelf & renderElement\\r\\nsupported getters for text node & static root\\r\\n\\r\\n* adapted new element creator into render call\\r\\n\\r\\n* improved \\\\$createElement\\r\\n\\r\\n* fixed by flow check\\r\\n\\r\\n* fixed ssr bugs for $createElement\"\n   - Date: 2016-05-14T19:49:18Z\n\n82. Commit ID: 750bec1024478022453277a4d175cff5a8445672\n   - Message: \"annotate platforms/web\"\n   - Date: 2016-05-14T11:40:56Z\n\n83. Commit ID: 59fcd4e7a749561ad6acf3ec50c32c24b33d8ec4\n   - Message: \"finish annotating vdom\"\n   - Date: 2016-05-14T07:38:41Z\n\n84. Commit ID: 45d96c7dbc399696138c9d020e13f97cf94ce181\n   - Message: \"annotation for vdom (wip)\"\n   - Date: 2016-05-14T07:08:21Z\n\n85. Commit ID: 354ea616b5ec4826e23a88465e404fd3b382d9f4\n   - Message: \"annotate Vue class\"\n   - Date: 2016-05-12T23:13:38Z\n\n86. Commit ID: 6593be9f75ea229e71e5b0530bb0f27aeee57afc\n   - Message: \"update unit tests convention + basic component tests\"\n   - Date: 2016-05-09T22:08:18Z\n\n87. Commit ID: f4a2afb3b33991c1694e8fcb7d62641c30eeaf53\n   - Message: \"expose context on vnode, simplify render methods\"\n   - Date: 2016-04-25T03:31:07Z\n\n88. Commit ID: 955e2f839175fadbd0218f7b78c48ebbbcca6349\n   - Message: \"restructure (build pass)\"\n   - Date: 2016-04-23T20:12:19Z\n\n89. Commit ID: ec5bcefca73160e6d283b8a0c4e1457f42f87081\n   - Message: \"tweak namespace changes\"\n   - Date: 2016-04-23T17:37:47Z\n\n90. Commit ID: 6e251e0721b4dbb4896999df78450d912dcba30d\n   - Message: \"Change svg parameter to namespace (#3)\\n\\n* change svg parameter into namespace\\r\\n\\r\\n* fixed svg to namespace bug\\r\\n\\r\\n* change svg detecting into namespace detecting in parser\\r\\n\\r\\n* fixed eslint error\"\n   - Date: 2016-04-23T17:29:31Z\n\n91. Commit ID: 9a347e02b4b1fd8ddc51db6c2ba08a1831f4dfd0\n   - Message: \"allow data to be undefined\"\n   - Date: 2016-04-21T16:37:12Z\n\n92. Commit ID: d87987780a208fe3c65415a4a1cab58250ffa9a3\n   - Message: \"rename\"\n   - Date: 2016-04-21T08:24:26Z\n\n93. Commit ID: 1a35cf4a21e8c8e897c2d6f291b99376b12b9fac\n   - Message: \"support template slot\"\n   - Date: 2016-04-15T02:55:29Z\n\n94. Commit ID: 0ab0600599dcc593695560382af1c1a8119ce848\n   - Message: \"restructure\"\n   - Date: 2016-04-12T23:42:15Z\n\n95. Commit ID: 69e94eb453ee0da21f9a0506d2f01269865a4776\n   - Message: \"move flatten into vdom implementation\"\n   - Date: 2016-04-11T03:54:53Z\n\n96. Commit ID: a879ec06ef9504db8df2a19aac0d07609fe36131\n   - Message: \"init\"\n   - Date: 2016-04-11T02:47:28Z",
        "chain_of_thought": "To address the question, we need to find all commits associated with the file named \"vnode.js\". The schema indicates that the relevant nodes are the Commit and File nodes, and the relationship between them is the changed relationship. We need to filter the File nodes by the name \"vnode.js\" and then find all related Commit nodes.\n\nHere's the step-by-step breakdown:\n\n1. Identify the relevant nodes: We need Commit and File nodes.\n2. Use the changed relationship to connect Commit and File nodes.\n3. Filter the File nodes by the name \"vnode.js\".\n4. Retrieve all commits associated with this file.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'vnode.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS commitDate\n```\n\nThis query will return the ID, message, and committed date of all commits that have modified the file \"vnode.js\".",
        "query": "cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'vnode.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS commitDate\n",
        "result": [
            {
                "commitId": "9949ab5d14e3620f40b876cffbc710a33d0237b2",
                "commitMessage": "\"Merge pull request #3 from dwelch2344/move_to_typescript\n\nWIP: typescript love on the tests\"",
                "commitDate": "2022-05-04T21:25:34Z"
            },
            {
                "commitId": "40dccfedd1d92ef9d61ee350ed8fbd7fc525b5b9",
                "commitMessage": "\"chore: fix test harness; most of the tooling + test harness is happy; coverage still needs fixing\"",
                "commitDate": "2022-05-03T17:04:55Z"
            },
            {
                "commitId": "982d5a492fb95577217e2dacaa044eabe78a8601",
                "commitMessage": "\"fix(types): support string type for style in VNode data (#9728)\n\nfix #9727\"",
                "commitDate": "2019-03-18T07:47:43Z"
            },
            {
                "commitId": "dbc0582587f90e78867809bb6ae683301cd0626b",
                "commitMessage": "\"feat: dynamic directive arguments for v-on, v-bind and custom directives (#9373)\"",
                "commitDate": "2019-01-26T04:22:44Z"
            },
            {
                "commitId": "097f6229dffc34af452b106ad2a3b58845588807",
                "commitMessage": "\"fix(core): avoid mutating original children when cloning vnode\n\nThe on-demand clone strategy introduced in 956756b mutates the owner\narray of the cloned vnode. This causes the newly cloned vnode to be\ndestroyed when the parent node is destroyed. This is fixed by cloning\nthe children array when cloning a vnode.\n\nfix #7975\"",
                "commitDate": "2018-12-01T22:05:36Z"
            },
            {
                "commitId": "4ecc21c29ec12bb33d3b426cb4d42c579e9b0f2d",
                "commitMessage": "\"feat(devtools): store functional render context on vnode in development (#8586)\"",
                "commitDate": "2018-11-30T22:31:44Z"
            },
            {
                "commitId": "8227fb35240ab1f301c30a6ad5d4d25071fa7996",
                "commitMessage": "\"fix: add missing `asyncMeta` during VNode cloning (#7861)\"",
                "commitDate": "2018-03-23T23:13:10Z"
            },
            {
                "commitId": "d7d9b002fd60d246b1ef65f71b55b45f46563b4d",
                "commitMessage": "\"chore: fix typo (#7781)\"",
                "commitDate": "2018-03-09T13:54:55Z"
            },
            {
                "commitId": "956756b1be7084daf8b6afb92ac0da7c24cde2a5",
                "commitMessage": "\"refactor: use more efficient on-demand clone to handle reused node edge cases\n\nremoves unnecessary slot/static node clones, fix #7292\"",
                "commitDate": "2017-12-21T00:44:24Z"
            },
            {
                "commitId": "604e081d0456ed136b24b5f759c608d153dfae93",
                "commitMessage": "\"fix: ensure functionalContext is cloned during slot clones\n\nfix #7106\"",
                "commitDate": "2017-11-22T21:37:24Z"
            },
            {
                "commitId": "1cf02efda206185cb72bbaafb00037fa6269e3f3",
                "commitMessage": "\"fix: also clone component slot children during deepClone\n\nfix #6891, fix #6915\"",
                "commitDate": "2017-10-26T16:00:19Z"
            },
            {
                "commitId": "53431c63a9033bb9a73c915bca8525f0d7988c26",
                "commitMessage": "\"types: fix flow typing\"",
                "commitDate": "2017-10-11T15:24:39Z"
            },
            {
                "commitId": "421658884f7ca786747abf9b89e00925fdfdfba8",
                "commitMessage": "\"fix: fix scoped CSS for nested nodes in functional components\"",
                "commitDate": "2017-10-11T15:17:46Z"
            },
            {
                "commitId": "050bb33f9b02589357c037623ea8cbf8ff13555b",
                "commitMessage": "\"feat: scoped CSS support for functional components\"",
                "commitDate": "2017-10-11T14:38:46Z"
            },
            {
                "commitId": "53463619e5d19d35dfad1a4245a8dc583681feb3",
                "commitMessage": "\"perf: deep clone slot vnodes on re-render (#6478)\n\navoid unnecessary assignment.\"",
                "commitDate": "2017-09-01T16:14:55Z"
            },
            {
                "commitId": "0529040c17b8632032a43d142aac88386f6b4a1f",
                "commitMessage": "\"fix: deep clone slot vnodes on re-render\n\nfix #6372\"",
                "commitDate": "2017-08-29T22:47:10Z"
            },
            {
                "commitId": "11614d63b7862b68b11cc45c0891437c62a832d7",
                "commitMessage": "\"feat(v-on): support v-on object syntax with no arguments\n\nNote this does not support modifiers and is meant to be used for handling\nevents proxying in higher-order-components.\"",
                "commitDate": "2017-07-11T08:36:04Z"
            },
            {
                "commitId": "fed602b90be89a43b4ec41b5a2e0a526d3a5f4a2",
                "commitMessage": "\"refactor: also clone vnode.asyncFactory\"",
                "commitDate": "2017-07-11T05:06:23Z"
            },
            {
                "commitId": "e4da249ab8ef32a0b8156c840c9d2b9773090f8a",
                "commitMessage": "\"feat: add `comments` option to allow preserving comments in template  (#5951)\n\nclose #5392\"",
                "commitDate": "2017-06-30T00:56:23Z"
            },
            {
                "commitId": "d33c1250ee77dd337eb4979851ade331f177b890",
                "commitMessage": "\"fix:when using object syntax in v-bind, special attribute have no effect\"",
                "commitDate": "2017-06-16T18:02:37Z"
            },
            {
                "commitId": "9cf6646f46ef3c13236677e58e72d2c6dd5c8abf",
                "commitMessage": "\"support directly rendering async components in SSR\"",
                "commitDate": "2017-05-24T08:50:17Z"
            },
            {
                "commitId": "7404091896fda2c87ecac64efc24324ff1885e2c",
                "commitMessage": "\"support async hydration\"",
                "commitDate": "2017-05-24T08:50:17Z"
            },
            {
                "commitId": "43485fbc5b779e02122c3b7fc64296a2cfee31f6",
                "commitMessage": "\"Merge branch ssr-optimize into dev\"",
                "commitDate": "2017-05-18T08:56:05Z"
            },
            {
                "commitId": "26953f5cacc03440df394ebbc74023efd364b7e0",
                "commitMessage": "\"add semis to flow decls for better syntax highlighting\"",
                "commitDate": "2017-05-15T08:01:30Z"
            },
            {
                "commitId": "0ccefff794c5fe73b80b9faf5ae5bfd8ec1a500f",
                "commitMessage": "\"support v-for on scoped slots (fix #5615)\"",
                "commitDate": "2017-05-09T15:22:55Z"
            },
            {
                "commitId": "5d965d5b3bbe0e76cdb97e41e01a704322253e09",
                "commitMessage": "\"clone `isComment` when cloneVNode (#5633)\"",
                "commitDate": "2017-05-09T13:12:59Z"
            },
            {
                "commitId": "1073035164b809872bf35a3b007848979f86f48a",
                "commitMessage": "\"fix activate hook call timing (fix vue-router#1212)\"",
                "commitDate": "2017-04-07T07:30:37Z"
            },
            {
                "commitId": "a12d32a56df2519c9cdf8d2da9d9425876263f89",
                "commitMessage": "\"fix style diffing on cached/slot elements (fix #5318)\"",
                "commitDate": "2017-04-03T06:13:57Z"
            },
            {
                "commitId": "2afaac2b397b4b04713488aeb62e5e222e5dc121",
                "commitMessage": "\"cache vnodes length (#5125)\"",
                "commitDate": "2017-03-08T02:24:25Z"
            },
            {
                "commitId": "9d6c8ec268f659a715e3b38c97a1e03964961703",
                "commitMessage": "\"feat: allow customization of component v-model prop/event via model option (close #4515)\"",
                "commitDate": "2017-01-22T19:31:43Z"
            },
            {
                "commitId": "fe02bc3a27b3b33f9467980f61126edf97105287",
                "commitMessage": "\"ignore deprecated alias\"",
                "commitDate": "2017-01-12T23:24:37Z"
            },
            {
                "commitId": "ced2dfc8f704b07cd59467eca38c58c590d0c012",
                "commitMessage": "\"expose vnode.child for backwards compat, update .flowconfig & ts types\"",
                "commitDate": "2017-01-12T23:04:36Z"
            },
            {
                "commitId": "30258a9a60b96c25c95685cb17ee35838830ee4c",
                "commitMessage": "\"rename vnode.child -> vnode.componentInstance\"",
                "commitDate": "2017-01-12T22:44:19Z"
            },
            {
                "commitId": "207c18c47f8c94f6d92675b28bc67511b7897246",
                "commitMessage": "\"further reduce normalizeChildren usage\"",
                "commitDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7c3c86f36044ada983c09e7733841cb4c55de9d1",
                "commitMessage": "\"fix namespace hoisting\"",
                "commitDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "79e1058799dcde0b7e341ef44b590ecbf1e3a722",
                "commitMessage": "\"wip: refactor compiler to skip normalization when possible\n\nwip fix\n\nwip fix\n\nwip fix\"",
                "commitDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7431e4d16c92862ac74fdb3053de9295c809b586",
                "commitMessage": "\"emptyVNode -> createEmptyVNode\"",
                "commitDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7b389bc34e12442663de1939882b523345a9e46d",
                "commitMessage": "\"avoid warning unknown custom elements in v-pre\"",
                "commitDate": "2016-11-24T17:47:27Z"
            },
            {
                "commitId": "303378f85b26934396e2f6dc0973f6982da2beb1",
                "commitMessage": "\"support default scoped slot + function children as scoped slot\"",
                "commitDate": "2016-11-20T17:03:43Z"
            },
            {
                "commitId": "ff551029bf872ad067ac7c5ba7c6311fdde7c674",
                "commitMessage": "\"wip: fix flow type for weex merge\"",
                "commitDate": "2016-11-07T21:26:06Z"
            },
            {
                "commitId": "b69b4a4eeff204488c3eb60cac951f9808581e1c",
                "commitMessage": "\"tweak style merge for performance\"",
                "commitDate": "2016-11-07T21:20:10Z"
            },
            {
                "commitId": "e960cd104e67e8e410956fa589090fe171382528",
                "commitMessage": "\"enable style merge behavior between parent-child components (fix #3997) (#4138)\n\n* merge style between components\r\n\r\n* update test case\r\n\r\n* update style compiler\r\n\r\n* add paren to style binding code\r\n\r\n* update background property parsing\r\n\r\n* introduce interpolation warning and refactor var to const\"",
                "commitDate": "2016-11-07T21:19:48Z"
            },
            {
                "commitId": "ec824be88e9bc71b31e5c4a43f80d921674dca66",
                "commitMessage": "\"fix v-once inside v-for (fix #3964)\"",
                "commitDate": "2016-11-03T02:34:36Z"
            },
            {
                "commitId": "0cd1489e68891e4ca532ce7299d09e8af5ae3f52",
                "commitMessage": "\".number modifier should work with select, radio, checkbox (fix #4018) (#4022)\n\n* support number modifier in select, radio, checkbox\r\n\r\n* add test case\r\n\r\n* add ASTModifier type to specify modifiers type\r\n\r\n* fix typo\r\n\r\n* keep code consistent\"",
                "commitDate": "2016-11-01T15:50:22Z"
            },
            {
                "commitId": "1a8720d6ead500eed5d40457a3e7f59fe8972472",
                "commitMessage": "\"Fix typo in component (#3978)\"",
                "commitDate": "2016-10-19T14:33:17Z"
            },
            {
                "commitId": "1fa3844dc26745b4cb855b0934bd1b132ba33d9b",
                "commitMessage": "\"refactor directive update implementation\"",
                "commitDate": "2016-10-12T00:31:13Z"
            },
            {
                "commitId": "3446d1485d36b91ef42c53268cb69ecb047538a5",
                "commitMessage": "\"support functional components as named slot (fix #3872)\"",
                "commitDate": "2016-10-11T02:41:14Z"
            },
            {
                "commitId": "d6a7568891d0c3368471322de5d730172d92b9e4",
                "commitMessage": "\"improve v-bind implementation and make it work on components (fix #3670)\"",
                "commitDate": "2016-09-14T14:14:45Z"
            },
            {
                "commitId": "f6b1a51729f705bc49c6eaaf32ec095efd97401c",
                "commitMessage": "\"fix hot-reload not updating static nodes\"",
                "commitDate": "2016-08-29T15:45:08Z"
            },
            {
                "commitId": "014d2f8599f9afc0754e603b1528a12e74bd209a",
                "commitMessage": "\"fix vdom patch edge case for static nodes being reused and as insertion reference node (fix #3533)\"",
                "commitDate": "2016-08-27T20:29:07Z"
            },
            {
                "commitId": "ed2085974b2a385ca1fd8cd696917d6cda8322e7",
                "commitMessage": "\"ensure mergeVNodeHook does not inject duplicate hooks\"",
                "commitDate": "2016-08-26T23:19:51Z"
            },
            {
                "commitId": "d2df58e547a7e1018c72a52714be7dee4ad06922",
                "commitMessage": "\"move v-show marker to runtime so that render functions work as expected (fix #3488)\"",
                "commitDate": "2016-08-20T15:14:41Z"
            },
            {
                "commitId": "ba5fb31188467c9f07cdcfa94e9469e172098ec5",
                "commitMessage": "\"fix transition insert hook duplicate invocation on slot nodes (fix #3474)\"",
                "commitDate": "2016-08-18T16:00:31Z"
            },
            {
                "commitId": "18386c4cf4fe829f447687734a5bf03905d0db44",
                "commitMessage": "\"fix static nodes optimization inside v-for (fix #3406)\"",
                "commitDate": "2016-08-08T23:03:00Z"
            },
            {
                "commitId": "fe801b16e4da63513bce95bfa762a8a36d83fe59",
                "commitMessage": "\"wip: fix $parent after children change\"",
                "commitDate": "2016-08-05T16:43:35Z"
            },
            {
                "commitId": "b5b963f51df1fa3124cd8a9846be5455408bc52a",
                "commitMessage": "\"wip: refactor children resolution (remove thunk mechanism)\"",
                "commitDate": "2016-08-05T16:10:13Z"
            },
            {
                "commitId": "c66b7566c682af653dc475fab1475db5484e40ee",
                "commitMessage": "\"fix flow\"",
                "commitDate": "2016-08-05T07:10:40Z"
            },
            {
                "commitId": "59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8",
                "commitMessage": "\"support class/style in v-bind object\"",
                "commitDate": "2016-08-05T06:59:33Z"
            },
            {
                "commitId": "351aef3cb4ada980f105f98f8b835876e8d4d689",
                "commitMessage": "\"use comment node as empty placeholder (fix <transition> SSR hydration)\"",
                "commitDate": "2016-08-05T05:52:09Z"
            },
            {
                "commitId": "40b93e6527d9ecdb308925114bf14cb60b36eae0",
                "commitMessage": "\"avoid unnecessary enter transitions on nested inserted elements\"",
                "commitDate": "2016-08-05T02:17:59Z"
            },
            {
                "commitId": "35ee5b105e8a517571b9bb9a87160c6ffbdad779",
                "commitMessage": "\"remove staticAttrs\"",
                "commitDate": "2016-07-29T14:45:43Z"
            },
            {
                "commitId": "74f8b98509d24487e1a8d1588b4128a7a1046a41",
                "commitMessage": "\"handle static vnodes properly during patch (fix #3325)\"",
                "commitDate": "2016-07-26T19:49:40Z"
            },
            {
                "commitId": "3ce450b6dc5f2135266c8a38818371e9d4f1f460",
                "commitMessage": "\"use more proper flow type syntax\"",
                "commitDate": "2016-07-26T01:28:46Z"
            },
            {
                "commitId": "ea9c6c37c3ef0ef3706afa94070b89a7464c559c",
                "commitMessage": "\"support v-on .native modifier on components\"",
                "commitDate": "2016-07-19T22:56:10Z"
            },
            {
                "commitId": "69ecdcb05e3f5db32af889962fe8253d49d7390d",
                "commitMessage": "\"rename vnode.data.props -> domProps\"",
                "commitDate": "2016-07-19T21:52:10Z"
            },
            {
                "commitId": "e6871a33c17fd7dfd58fba6c7c6b6182f0ff2f0e",
                "commitMessage": "\"update flow annotations\"",
                "commitDate": "2016-07-15T21:48:42Z"
            },
            {
                "commitId": "9421bd48066906e20052e04cf88c4ae623080a95",
                "commitMessage": "\"extract getRealChild for abstract components\"",
                "commitDate": "2016-07-06T21:07:46Z"
            },
            {
                "commitId": "06b470369a7bde2a7f36468191e424b4c455db67",
                "commitMessage": "\"element namespace should be resolved at runtime for render function / jsx usage\"",
                "commitDate": "2016-06-27T18:02:14Z"
            },
            {
                "commitId": "1b3b19491fd47f3634e30d7fcce991881de16530",
                "commitMessage": "\"merge renderElement and renderElementWithChildren\"",
                "commitDate": "2016-06-27T16:25:02Z"
            },
            {
                "commitId": "cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9",
                "commitMessage": "\"apply scopeId to slot contents too\"",
                "commitDate": "2016-06-15T17:33:12Z"
            },
            {
                "commitId": "b0ad94fc876826a8ee3226320aacd40b8967f8dd",
                "commitMessage": "\"properly encode HTML in server-side rendering (fix #3078)\"",
                "commitDate": "2016-06-14T18:15:41Z"
            },
            {
                "commitId": "a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6",
                "commitMessage": "\"fix whitespace vnode identity breaking patch (fix #3043)\"",
                "commitDate": "2016-06-08T17:28:55Z"
            },
            {
                "commitId": "a5a9dc9b694da007a13bd5adfd64b0ab0750ad57",
                "commitMessage": "\"support keep-alive\"",
                "commitDate": "2016-06-04T14:53:05Z"
            },
            {
                "commitId": "4bcdce895c5dc0403b6a94b0ad71b2bc57734234",
                "commitMessage": "\"record original tag name on vnode for components using is attribute\"",
                "commitDate": "2016-06-02T22:18:32Z"
            },
            {
                "commitId": "d40ab0ca8760b9d8ec8be630e2360e6927ba8b3e",
                "commitMessage": "\"fix component client-side hydration\"",
                "commitDate": "2016-06-01T22:20:13Z"
            },
            {
                "commitId": "f8cfc81826715b23dac054b6d1727594d2caeebd",
                "commitMessage": "\"remove unnecessary v-pre related code\"",
                "commitDate": "2016-06-01T19:03:09Z"
            },
            {
                "commitId": "8d229b2442e8cc5b2801fa55a4ea8ea766721381",
                "commitMessage": "\"support v-bind on objects\"",
                "commitDate": "2016-05-25T00:41:06Z"
            },
            {
                "commitId": "7f85acb4e5c28052e07d5e2c4cf2903cac0e4bd5",
                "commitMessage": "\"expose oldValue on directive bindings\"",
                "commitDate": "2016-05-24T22:28:17Z"
            },
            {
                "commitId": "48f22c9b17a9def00dcfa4899fee9e60c8933dbc",
                "commitMessage": "\"fix flow error\"",
                "commitDate": "2016-05-24T04:27:18Z"
            },
            {
                "commitId": "837853d95ad1224ed12ba2454b791591884caf2e",
                "commitMessage": "\"better inferring of component names in warnings\"",
                "commitDate": "2016-05-19T17:58:11Z"
            },
            {
                "commitId": "20fb79a1ea098bedda6fec8bebbb184ac51fce20",
                "commitMessage": "\"new render mechanism (#2857)\n\n* updated compiler with new render functions\r\n\r\n* separated createElement into renderSelf & renderElement\r\nsupported getters for text node & static root\r\n\r\n* adapted new element creator into render call\r\n\r\n* improved \\$createElement\r\n\r\n* fixed by flow check\r\n\r\n* fixed ssr bugs for $createElement\"",
                "commitDate": "2016-05-14T19:49:18Z"
            },
            {
                "commitId": "750bec1024478022453277a4d175cff5a8445672",
                "commitMessage": "\"annotate platforms/web\"",
                "commitDate": "2016-05-14T11:40:56Z"
            },
            {
                "commitId": "59fcd4e7a749561ad6acf3ec50c32c24b33d8ec4",
                "commitMessage": "\"finish annotating vdom\"",
                "commitDate": "2016-05-14T07:38:41Z"
            },
            {
                "commitId": "45d96c7dbc399696138c9d020e13f97cf94ce181",
                "commitMessage": "\"annotation for vdom (wip)\"",
                "commitDate": "2016-05-14T07:08:21Z"
            },
            {
                "commitId": "354ea616b5ec4826e23a88465e404fd3b382d9f4",
                "commitMessage": "\"annotate Vue class\"",
                "commitDate": "2016-05-12T23:13:38Z"
            },
            {
                "commitId": "6593be9f75ea229e71e5b0530bb0f27aeee57afc",
                "commitMessage": "\"update unit tests convention + basic component tests\"",
                "commitDate": "2016-05-09T22:08:18Z"
            },
            {
                "commitId": "f4a2afb3b33991c1694e8fcb7d62641c30eeaf53",
                "commitMessage": "\"expose context on vnode, simplify render methods\"",
                "commitDate": "2016-04-25T03:31:07Z"
            },
            {
                "commitId": "955e2f839175fadbd0218f7b78c48ebbbcca6349",
                "commitMessage": "\"restructure (build pass)\"",
                "commitDate": "2016-04-23T20:12:19Z"
            },
            {
                "commitId": "ec5bcefca73160e6d283b8a0c4e1457f42f87081",
                "commitMessage": "\"tweak namespace changes\"",
                "commitDate": "2016-04-23T17:37:47Z"
            },
            {
                "commitId": "6e251e0721b4dbb4896999df78450d912dcba30d",
                "commitMessage": "\"Change svg parameter to namespace (#3)\n\n* change svg parameter into namespace\r\n\r\n* fixed svg to namespace bug\r\n\r\n* change svg detecting into namespace detecting in parser\r\n\r\n* fixed eslint error\"",
                "commitDate": "2016-04-23T17:29:31Z"
            },
            {
                "commitId": "9a347e02b4b1fd8ddc51db6c2ba08a1831f4dfd0",
                "commitMessage": "\"allow data to be undefined\"",
                "commitDate": "2016-04-21T16:37:12Z"
            },
            {
                "commitId": "d87987780a208fe3c65415a4a1cab58250ffa9a3",
                "commitMessage": "\"rename\"",
                "commitDate": "2016-04-21T08:24:26Z"
            },
            {
                "commitId": "1a35cf4a21e8c8e897c2d6f291b99376b12b9fac",
                "commitMessage": "\"support template slot\"",
                "commitDate": "2016-04-15T02:55:29Z"
            },
            {
                "commitId": "0ab0600599dcc593695560382af1c1a8119ce848",
                "commitMessage": "\"restructure\"",
                "commitDate": "2016-04-12T23:42:15Z"
            },
            {
                "commitId": "69e94eb453ee0da21f9a0506d2f01269865a4776",
                "commitMessage": "\"move flatten into vdom implementation\"",
                "commitDate": "2016-04-11T03:54:53Z"
            },
            {
                "commitId": "a879ec06ef9504db8df2a19aac0d07609fe36131",
                "commitMessage": "\"init\"",
                "commitDate": "2016-04-11T02:47:28Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "Determine the developers that had the most unfixed bugs?",
        "number": 7,
        "category": 2,
        "response": "The developer with the most unfixed bugs is Justineo, with 1 unfixed bug.",
        "chain_of_thought": "To determine the developers that had the most unfixed bugs, we need to interpret the question in the context of the provided schema. An unfixed bug can be interpreted as an issue that has been introduced by a commit but not yet fixed by another commit. Therefore, we need to find users who have authored commits that introduced issues, and those issues remain in an unfixed state.\n\nHere's how we can construct the query:\n\n1. Identify the relevant nodes and relationships:\n   - We need the `User` node to identify developers.\n   - The `Commit` node is needed to find commits authored by users.\n   - The `Issue` node is needed to find issues introduced by commits.\n   - The `author` relationship connects `User` to `Commit`.\n   - The `introduced` relationship connects `Commit` to `Issue`.\n   - The `fixed` relationship connects `Commit` to `Issue` to determine if an issue has been fixed.\n\n2. Find commits that introduced issues:\n   - Use the `introduced` relationship to find issues introduced by commits.\n\n3. Exclude issues that have been fixed:\n   - Use the `fixed` relationship to exclude issues that have been fixed.\n\n4. Count the number of unfixed issues introduced by each developer.\n\nThe query to find the developers with the most unfixed bugs is:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE NOT EXISTS {\n  MATCH (c2:Commit)-[:fixed]->(i)\n}\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n```\n\nThis query matches users who have authored commits that introduced issues and ensures those issues have not been fixed by checking the absence of a `fixed` relationship. It then counts the number of such unfixed issues for each developer and orders the results in descending order to find the developers with the most unfixed bugs.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE NOT EXISTS {\n  MATCH (c2:Commit)-[:fixed]->(i)\n}\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n",
        "result": [
            {
                "developer": "Justineo",
                "unfixed_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 1,
        "label": "partial"
    },
    {
        "question": "which developer has most number of bugs yet to be fixed?",
        "number": 8,
        "category": 2,
        "response": "The developer with the most number of bugs yet to be fixed is Evan You, with 1 open issue assigned.",
        "chain_of_thought": "To determine which developer has the most number of bugs yet to be fixed, we need to consider the following:\n\n1. **Identify the relevant nodes and relationships**:\n   - We have `User` nodes representing developers.\n   - `Issue` nodes represent bugs, and they have a `state` property that can indicate whether a bug is open or closed.\n   - The `creates` relationship connects a `User` to an `Issue`, indicating the user who created the issue.\n   - The `assigned` relationship connects a `User` to an `Issue`, indicating the user assigned to solve the issue.\n\n2. **Determine the most appropriate interpretation**:\n   - The question could be interpreted as finding the developer who has created the most open issues or the developer who is assigned the most open issues.\n   - The more relevant interpretation in the context of \"bugs yet to be fixed\" is to find the developer who is assigned the most open issues.\n\n3. **Construct the query**:\n   - We need to find issues that are still open (`state = 'open'`).\n   - We then need to count the number of such open issues assigned to each developer.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (u:User)-[:assigned]->(i:Issue {state: 'open'})\nRETURN u.name AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n```\n\nThis query matches users assigned to open issues, counts the number of open issues for each user, and orders the results to find the developer with the most open issues. The `LIMIT 1` ensures we get the developer with the highest count.",
        "query": "cypher\nMATCH (u:User)-[:assigned]->(i:Issue {state: 'open'})\nRETURN u.name AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "Evan You",
                "open_issues": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "Determine the developers that fixed the most bugs in helpers.js?",
        "number": 9,
        "category": 3,
        "response": "Evan You is the developer who fixed the most bugs in helpers.js, with a total of 11 bugs fixed.",
        "chain_of_thought": "To determine the developers who fixed the most bugs in the file `helpers.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We are interested in the `User` nodes, as they represent the developers.\n   - The `Commit` nodes are needed because they are associated with the action of fixing bugs.\n   - The `File` node represents the file `helpers.js`.\n   - The `Issue` nodes are needed to identify bugs.\n   - The relevant relationships are:\n     - `author` between `User` and `Commit` to find which user authored the commit.\n     - `fixed` between `Commit` and `Issue` to identify which commits fixed bugs.\n     - `impacted` between `Issue` and `File` to find which issues impacted the file `helpers.js`.\n\n2. **Formulate the query**:\n   - We need to match the `User` nodes to `Commit` nodes through the `author` relationship.\n   - Then, match `Commit` nodes to `Issue` nodes through the `fixed` relationship.\n   - Finally, match `Issue` nodes to `File` nodes through the `impacted` relationship, filtering for the file `helpers.js`.\n\n3. **Aggregate and sort the results**:\n   - Count the number of bugs fixed by each developer for the file `helpers.js`.\n   - Sort the results in descending order to find the developers who fixed the most bugs.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'helpers.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n```\n\nThis query will return a list of developers and the number of bugs they have fixed in the file `helpers.js`, sorted by the number of bugs fixed in descending order.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'helpers.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n",
        "result": [
            {
                "developer": "Evan You",
                "bugs_fixed": 11
            },
            {
                "developer": "chengchao",
                "bugs_fixed": 2
            },
            {
                "developer": "Jason",
                "bugs_fixed": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "who did most fixed bugs in client.js?",
        "number": 10,
        "category": 3,
        "response": "The developer who fixed the most bugs in \"client.js\" is Xin Du (Clark), with a total of 1 bug fixed.",
        "chain_of_thought": "To determine who fixed the most bugs in the file `client.js`, we need to follow these steps:\n\n1. Identify the relevant nodes and relationships. We are interested in the `User`, `Commit`, `Issue`, and `File` nodes. The relationships of interest are:\n   - `author` between `User` and `Commit` to find out who authored the commits.\n   - `fixed` between `Commit` and `Issue` to identify which commits fixed bugs.\n   - `impacted` between `Issue` and `File` to determine which files were impacted by the issues.\n\n2. Filter the `File` node to find the specific file `client.js`.\n\n3. Traverse the graph to find users who authored commits that fixed issues impacting `client.js`.\n\n4. Count the number of such fixes per user.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'client.js'})\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\n```\n\nThis query will return the developers who have fixed the most bugs in `client.js`, ordered by the number of bugs they fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'client.js'})\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\n",
        "result": [
            {
                "developer": "Xin Du (Clark)",
                "fixed_bugs": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "Determine the files that introduce the most bugs?",
        "number": 11,
        "category": 2,
        "response": "The file that introduces the most bugs is `index.js`, with a total of 85 bugs.",
        "chain_of_thought": "To determine the files that introduce the most bugs, we need to identify the files that are associated with the most issues introduced by commits. The schema provides a relationship between Commit and Issue through the introduced relationship, and between Issue and File through the impacted relationship. Therefore, we need to traverse from File to Issue and then to Commit to count how many times each file is associated with an introduced issue.\n\nHere's the step-by-step breakdown of the query:\n\n1. Identify the relevant nodes and relationships:\n   - File node: Represents the files.\n   - Issue node: Represents the issues.\n   - Commit node: Represents the commits.\n   - The impacted relationship connects Issue to File.\n   - The introduced relationship connects Commit to Issue.\n\n2. Traverse the graph to find files associated with introduced issues:\n   - Start from the File node, traverse through the impacted relationship to reach the Issue node, and then through the introduced relationship to reach the Commit node.\n\n3. Count the number of times each file is associated with an introduced issue.\n\n4. Sort the files by the number of introduced issues in descending order to find the files that introduce the most bugs.\n\n5. Limit the results to the top files if necessary.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (f:File)<-[:impacted]-(i:Issue)<-[:introduced]-(c:Commit)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\n```\n\nThis query will return the files that are associated with the most introduced bugs, sorted in descending order by the number of bugs.",
        "query": "cypher\nMATCH (f:File)<-[:impacted]-(i:Issue)<-[:introduced]-(c:Commit)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\n",
        "result": [
            {
                "file": "index.js",
                "bug_count": 85
            },
            {
                "file": "model.js",
                "bug_count": 45
            },
            {
                "file": "render.js",
                "bug_count": 42
            },
            {
                "file": "events.js",
                "bug_count": 35
            },
            {
                "file": "patch.js",
                "bug_count": 32
            },
            {
                "file": "lifecycle.js",
                "bug_count": 27
            },
            {
                "file": "codegen.spec.js",
                "bug_count": 24
            },
            {
                "file": "html-parser.js",
                "bug_count": 21
            },
            {
                "file": "transition.js",
                "bug_count": 20
            },
            {
                "file": "options.js",
                "bug_count": 19
            },
            {
                "file": "state.js",
                "bug_count": 19
            },
            {
                "file": "attrs.js",
                "bug_count": 18
            },
            {
                "file": "create-component.js",
                "bug_count": 17
            },
            {
                "file": "vnode.js",
                "bug_count": 16
            },
            {
                "file": "helpers.js",
                "bug_count": 14
            },
            {
                "file": "dom-props.js",
                "bug_count": 14
            },
            {
                "file": "compiler.js",
                "bug_count": 13
            },
            {
                "file": "vue.d.ts",
                "bug_count": 12
            },
            {
                "file": "create-element.js",
                "bug_count": 12
            },
            {
                "file": "style.js",
                "bug_count": 11
            },
            {
                "file": "normalize-scoped-slots.js",
                "bug_count": 10
            },
            {
                "file": "component-slot.spec.js",
                "bug_count": 10
            },
            {
                "file": "props.js",
                "bug_count": 10
            },
            {
                "file": "component.js",
                "bug_count": 10
            },
            {
                "file": "config.js",
                "bug_count": 9
            },
            {
                "file": "util.js",
                "bug_count": 9
            },
            {
                "file": "show.js",
                "bug_count": 9
            },
            {
                "file": "index.ts",
                "bug_count": 8
            },
            {
                "file": "options.d.ts",
                "bug_count": 8
            },
            {
                "file": "update-listeners.js",
                "bug_count": 8
            },
            {
                "file": "model-text.spec.js",
                "bug_count": 8
            },
            {
                "file": "resolve-slots.js",
                "bug_count": 8
            },
            {
                "file": "init.js",
                "bug_count": 8
            },
            {
                "file": "package.json",
                "bug_count": 7
            },
            {
                "file": "scheduler.js",
                "bug_count": 7
            },
            {
                "file": "resolve-async-component.js",
                "bug_count": 7
            },
            {
                "file": "on.spec.js",
                "bug_count": 7
            },
            {
                "file": "ssr-string.spec.js",
                "bug_count": 7
            },
            {
                "file": "env.js",
                "bug_count": 7
            },
            {
                "file": "transition-util.js",
                "bug_count": 7
            },
            {
                "file": "transition.spec.js",
                "bug_count": 7
            },
            {
                "file": "apiWatch.ts",
                "bug_count": 6
            },
            {
                "file": "error.js",
                "bug_count": 6
            },
            {
                "file": "class.js",
                "bug_count": 6
            },
            {
                "file": "error-detector.js",
                "bug_count": 6
            },
            {
                "file": "optimizer.js",
                "bug_count": 6
            },
            {
                "file": "watcher.js",
                "bug_count": 6
            },
            {
                "file": "create-functional-component.js",
                "bug_count": 6
            },
            {
                "file": "keep-alive.js",
                "bug_count": 6
            },
            {
                "file": "directives.js",
                "bug_count": 6
            },
            {
                "file": "state.ts",
                "bug_count": 5
            },
            {
                "file": "compileScript.ts",
                "bug_count": 5
            },
            {
                "file": "vnode.d.ts",
                "bug_count": 5
            },
            {
                "file": "async-edge-cases.js",
                "bug_count": 5
            },
            {
                "file": "transition-group.js",
                "bug_count": 5
            },
            {
                "file": "normalize-children.js",
                "bug_count": 5
            },
            {
                "file": "element.js",
                "bug_count": 5
            },
            {
                "file": "text-parser.js",
                "bug_count": 5
            },
            {
                "file": "init.ts",
                "bug_count": 4
            },
            {
                "file": "apiSetup.spec.ts",
                "bug_count": 4
            },
            {
                "file": "v3-define-component.d.ts",
                "bug_count": 4
            },
            {
                "file": "lifecycle.ts",
                "bug_count": 4
            },
            {
                "file": "parser.spec.js",
                "bug_count": 4
            },
            {
                "file": "parser.js",
                "bug_count": 4
            },
            {
                "file": "next-tick.js",
                "bug_count": 4
            },
            {
                "file": "render-slot.js",
                "bug_count": 4
            },
            {
                "file": "create-bundle-runner.js",
                "bug_count": 4
            },
            {
                "file": "methods.spec.js",
                "bug_count": 4
            },
            {
                "file": "compat.js",
                "bug_count": 4
            },
            {
                "file": "codegen.js",
                "bug_count": 4
            },
            {
                "file": "ref.js",
                "bug_count": 4
            },
            {
                "file": "web-runtime-with-compiler.js",
                "bug_count": 4
            },
            {
                "file": "model-component.spec.js",
                "bug_count": 4
            },
            {
                "file": "index.html",
                "bug_count": 4
            },
            {
                "file": "reactive.ts",
                "bug_count": 3
            },
            {
                "file": "readonly.ts",
                "bug_count": 3
            },
            {
                "file": "v3-component-public-instance.d.ts",
                "bug_count": 3
            },
            {
                "file": "index.d.ts",
                "bug_count": 3
            },
            {
                "file": "ref.ts",
                "bug_count": 3
            },
            {
                "file": "util.ts",
                "bug_count": 3
            },
            {
                "file": "render.ts",
                "bug_count": 3
            },
            {
                "file": "edge-cases.spec.js",
                "bug_count": 3
            },
            {
                "file": "lang.js",
                "bug_count": 3
            },
            {
                "file": "modules.js",
                "bug_count": 3
            },
            {
                "file": "name.spec.js",
                "bug_count": 3
            },
            {
                "file": "bind-object-props.js",
                "bug_count": 3
            },
            {
                "file": "render-context.js",
                "bug_count": 3
            },
            {
                "file": "render-static.js",
                "bug_count": 3
            },
            {
                "file": "README.md",
                "bug_count": 3
            },
            {
                "file": "props.spec.js",
                "bug_count": 3
            },
            {
                "file": "create-renderer.js",
                "bug_count": 3
            },
            {
                "file": "for.spec.js",
                "bug_count": 3
            },
            {
                "file": "create-element.spec.js",
                "bug_count": 3
            },
            {
                "file": "transition-mode.spec.js",
                "bug_count": 3
            },
            {
                "file": "entry-runtime-with-compiler.js",
                "bug_count": 3
            },
            {
                "file": "inject.js",
                "bug_count": 3
            },
            {
                "file": "create-bundle-renderer.js",
                "bug_count": 3
            },
            {
                "file": "proxy.js",
                "bug_count": 3
            },
            {
                "file": "extend.js",
                "bug_count": 3
            },
            {
                "file": "web-runtime.js",
                "bug_count": 3
            },
            {
                "file": "bind.js",
                "bug_count": 3
            },
            {
                "file": "component-keep-alive.spec.js",
                "bug_count": 3
            },
            {
                "file": "tsx-test.tsx",
                "bug_count": 2
            },
            {
                "file": "rewriteDefault.ts",
                "bug_count": 2
            },
            {
                "file": "rewriteDefault.spec.ts",
                "bug_count": 2
            },
            {
                "file": "define-component-test.tsx",
                "bug_count": 2
            },
            {
                "file": "effectScope.ts",
                "bug_count": 2
            },
            {
                "file": "watcher.ts",
                "bug_count": 2
            },
            {
                "file": "parseComponent.ts",
                "bug_count": 2
            },
            {
                "file": "apiSetup.ts",
                "bug_count": 2
            },
            {
                "file": "utils.ts",
                "bug_count": 2
            },
            {
                "file": "scheduler.ts",
                "bug_count": 2
            },
            {
                "file": "apiWatch.spec.ts",
                "bug_count": 2
            },
            {
                "file": "options-test.ts",
                "bug_count": 2
            },
            {
                "file": "resolve-scoped-slots.js",
                "bug_count": 2
            },
            {
                "file": "CONTRIBUTING.md",
                "bug_count": 2
            },
            {
                "file": "create-component.spec.js",
                "bug_count": 2
            },
            {
                "file": "html.js",
                "bug_count": 2
            },
            {
                "file": "write.js",
                "bug_count": 2
            },
            {
                "file": "bind.spec.js",
                "bug_count": 2
            },
            {
                "file": "dep.js",
                "bug_count": 2
            },
            {
                "file": "runtime-helpers.js",
                "bug_count": 2
            },
            {
                "file": "debug.js",
                "bug_count": 2
            },
            {
                "file": "ssr-bundle-render.spec.js",
                "bug_count": 2
            },
            {
                "file": "error-handling.spec.js",
                "bug_count": 2
            },
            {
                "file": "inject.spec.js",
                "bug_count": 2
            },
            {
                "file": "model-checkbox.spec.js",
                "bug_count": 2
            },
            {
                "file": "model-select.spec.js",
                "bug_count": 2
            },
            {
                "file": "transition-group.spec.js",
                "bug_count": 2
            },
            {
                "file": "filter-parser.js",
                "bug_count": 2
            },
            {
                "file": "hydration.spec.js",
                "bug_count": 2
            },
            {
                "file": "node-ops.js",
                "bug_count": 2
            },
            {
                "file": "entity-decoder.js",
                "bug_count": 2
            },
            {
                "file": "ref.spec.js",
                "bug_count": 2
            },
            {
                "file": "children.spec.js",
                "bug_count": 2
            },
            {
                "file": "hooks.spec.js",
                "bug_count": 2
            },
            {
                "file": "el.spec.js",
                "bug_count": 2
            },
            {
                "file": "class-util.js",
                "bug_count": 2
            },
            {
                "file": "reactive.spec.ts",
                "bug_count": 1
            },
            {
                "file": "readonly.spec.ts",
                "bug_count": 1
            },
            {
                "file": "vue-test.ts",
                "bug_count": 1
            },
            {
                "file": "tsconfig.json",
                "bug_count": 1
            },
            {
                "file": "vue.runtime.mjs",
                "bug_count": 1
            },
            {
                "file": "augmentation-test.ts",
                "bug_count": 1
            },
            {
                "file": "directives.ts",
                "bug_count": 1
            },
            {
                "file": "compileScript.spec.ts.snap",
                "bug_count": 1
            },
            {
                "file": "prefixIdentifiers.spec.ts",
                "bug_count": 1
            },
            {
                "file": "prefixIdentifiers.ts",
                "bug_count": 1
            },
            {
                "file": "compileTemplate.spec.ts",
                "bug_count": 1
            },
            {
                "file": "jsx.d.ts",
                "bug_count": 1
            },
            {
                "file": "reactivity-test.ts",
                "bug_count": 1
            },
            {
                "file": "watch-test.ts",
                "bug_count": 1
            },
            {
                "file": "template-ref.ts",
                "bug_count": 1
            },
            {
                "file": "template-ref.spec.ts",
                "bug_count": 1
            },
            {
                "file": "inject.spec.ts",
                "bug_count": 1
            },
            {
                "file": "inject.ts",
                "bug_count": 1
            },
            {
                "file": "apiInject.ts",
                "bug_count": 1
            },
            {
                "file": "dep.ts",
                "bug_count": 1
            },
            {
                "file": "dep.spec.ts",
                "bug_count": 1
            },
            {
                "file": "keep-alive.ts",
                "bug_count": 1
            },
            {
                "file": "create-component.ts",
                "bug_count": 1
            },
            {
                "file": "extend.ts",
                "bug_count": 1
            },
            {
                "file": "debug.ts",
                "bug_count": 1
            },
            {
                "file": "transition-group.ts",
                "bug_count": 1
            },
            {
                "file": "pnpm-lock.yaml",
                "bug_count": 1
            },
            {
                "file": "options.ts",
                "bug_count": 1
            },
            {
                "file": "invoke-with-error-handling.spec.js",
                "bug_count": 1
            },
            {
                "file": "create-compiler.js",
                "bug_count": 1
            },
            {
                "file": "text.js",
                "bug_count": 1
            },
            {
                "file": "watcher.spec.js",
                "bug_count": 1
            },
            {
                "file": "component-scoped-slot.spec.js",
                "bug_count": 1
            },
            {
                "file": "render-static.ts",
                "bug_count": 1
            },
            {
                "file": "data.spec.js",
                "bug_count": 1
            },
            {
                "file": "model-dynamic.spec.js",
                "bug_count": 1
            },
            {
                "file": "client.js",
                "bug_count": 1
            },
            {
                "file": "to-function.js",
                "bug_count": 1
            },
            {
                "file": "async-edge-cases.html",
                "bug_count": 1
            },
            {
                "file": "next-tick.spec.js",
                "bug_count": 1
            },
            {
                "file": "check-keycodes.js",
                "bug_count": 1
            },
            {
                "file": "component.spec.js",
                "bug_count": 1
            },
            {
                "file": "bind-object-listeners.js",
                "bug_count": 1
            },
            {
                "file": "set-delete.spec.js",
                "bug_count": 1
            },
            {
                "file": "get-first-component-child.js",
                "bug_count": 1
            },
            {
                "file": "use.js",
                "bug_count": 1
            },
            {
                "file": "model-parse.spec.js",
                "bug_count": 1
            },
            {
                "file": "ssr-template.spec.js",
                "bug_count": 1
            },
            {
                "file": "pre.spec.js",
                "bug_count": 1
            },
            {
                "file": "render-list.js",
                "bug_count": 1
            },
            {
                "file": "server.js",
                "bug_count": 1
            },
            {
                "file": "computed.spec.js",
                "bug_count": 1
            },
            {
                "file": "factory.js",
                "bug_count": 1
            },
            {
                "file": "assets.js",
                "bug_count": 1
            },
            {
                "file": "perf.js",
                "bug_count": 1
            },
            {
                "file": "merge-hook.js",
                "bug_count": 1
            },
            {
                "file": "compiler-options.spec.js",
                "bug_count": 1
            },
            {
                "file": "template.spec.js",
                "bug_count": 1
            },
            {
                "file": "model-radio.spec.js",
                "bug_count": 1
            },
            {
                "file": "if.spec.js",
                "bug_count": 1
            },
            {
                "file": "events.spec.js",
                "bug_count": 1
            },
            {
                "file": "optimizer.spec.js",
                "bug_count": 1
            },
            {
                "file": "sfc-parser.spec.js",
                "bug_count": 1
            },
            {
                "file": "style.spec.js",
                "bug_count": 1
            },
            {
                "file": "v-model.spec.js",
                "bug_count": 1
            },
            {
                "file": "style.ts",
                "bug_count": 1
            },
            {
                "file": ".eslintrc",
                "bug_count": 1
            },
            {
                "file": "element.spec.js",
                "bug_count": 1
            },
            {
                "file": "scheduler.spec.js",
                "bug_count": 1
            },
            {
                "file": "run-in-vm.js",
                "bug_count": 1
            },
            {
                "file": "build.js",
                "bug_count": 1
            },
            {
                "file": ".flowconfig",
                "bug_count": 1
            },
            {
                "file": "ssr-string.spec.ts",
                "bug_count": 1
            },
            {
                "file": "config.yml",
                "bug_count": 1
            },
            {
                "file": "tree.js",
                "bug_count": 1
            },
            {
                "file": "dom-props.spec.js",
                "bug_count": 1
            },
            {
                "file": "observer.spec.js",
                "bug_count": 1
            },
            {
                "file": "global-observer-api.spec.js",
                "bug_count": 1
            },
            {
                "file": "web-compiler.js",
                "bug_count": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 1,
        "label": "partial"
    },
    {
        "question": "What are the most buggy files?",
        "number": 12,
        "category": 2,
        "response": "The most buggy files, based on the number of issues impacting them, are as follows:\n\n1. `index.js` with 105 issues.\n2. `model.js` with 46 issues.\n3. `render.js` with 42 issues.\n4. `events.js` with 38 issues.\n5. `lifecycle.js` with 37 issues.\n6. `patch.js` with 32 issues.\n7. `transition.js` with 32 issues.\n8. `component.js` with 29 issues.\n9. `codegen.spec.js` with 24 issues.\n10. `options.js` with 24 issues.",
        "chain_of_thought": "To determine the most buggy files, we need to identify files that have been impacted by the most issues. In the given schema, the relevant nodes are the Issue and File nodes. The relationship that connects these nodes is the impacted relationship, which indicates that changes in the file are related to a bug.\n\nThe interpretation of \"most buggy files\" is the files that have been associated with the highest number of issues. Therefore, we need to count the number of issues impacting each file and sort them in descending order to find the files with the most issues.\n\nHere's the step-by-step breakdown of the query:\n\n1. Match the files that have been impacted by issues:\n   - Use the impacted relationship between Issue and File nodes.\n\n2. Aggregate the number of issues impacting each file:\n   - Count the number of issues for each file.\n\n3. Sort the files by the number of issues in descending order to find the most buggy files.\n\n4. Limit the results to the top 10 most buggy files for a concise list.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n```\n\nThis query will return the names of the files and the count of issues impacting them, sorted by the number of issues in descending order, limited to the top 10 most buggy files.",
        "query": "cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "index.js",
                "issue_count": 105
            },
            {
                "file": "model.js",
                "issue_count": 46
            },
            {
                "file": "render.js",
                "issue_count": 42
            },
            {
                "file": "events.js",
                "issue_count": 38
            },
            {
                "file": "lifecycle.js",
                "issue_count": 37
            },
            {
                "file": "patch.js",
                "issue_count": 32
            },
            {
                "file": "transition.js",
                "issue_count": 32
            },
            {
                "file": "component.js",
                "issue_count": 29
            },
            {
                "file": "codegen.spec.js",
                "issue_count": 24
            },
            {
                "file": "options.js",
                "issue_count": 24
            }
        ],
        "isAmbiguous": true,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "what are the buggy commits that happened on August 18, 2022?",
        "number": 13,
        "category": 2,
        "response": "The buggy commits that happened on August 18, 2022, are:\n\n1. Commit ID: 5221d4d3b6049c87d196d99dbb64bcd3f3b07279 with the message: \"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\" committed at 08:01:00Z.\n2. Commit ID: b4bf4c52ad31e02307cfd4d643dc5610c893e3ba with the message: \"fix(types): allow attaching unknown options to defined component fix #12742\" committed at 07:32:12Z.",
        "chain_of_thought": "To determine the buggy commits that happened on August 18, 2022, we need to identify commits that introduced bugs on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship between Commit and Issue. We also need to filter the commits based on the committedDate property to match the specified date.\n\nFirst, we need to format the date in ISO format, which is \"2022-08-18\". Since the time part is not specified, we will use a regex to match any time on that date.\n\nThe query to find the buggy commits that happened on August 18, 2022, is as follows:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-08-18T.*'\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS date\n```\n\nThis query matches commits that introduced issues and filters them by the committed date using a regex to match any time on August 18, 2022. It then returns the commit ID, message, and date for each matching commit.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-08-18T.*'\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS date\n",
        "result": [
            {
                "commitId": "5221d4d3b6049c87d196d99dbb64bcd3f3b07279",
                "commitMessage": "\"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\"",
                "date": "2022-08-18T08:01:00Z"
            },
            {
                "commitId": "5221d4d3b6049c87d196d99dbb64bcd3f3b07279",
                "commitMessage": "\"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\"",
                "date": "2022-08-18T08:01:00Z"
            },
            {
                "commitId": "b4bf4c52ad31e02307cfd4d643dc5610c893e3ba",
                "commitMessage": "\"fix(types): allow attaching unknown options to defined component\n\nfix #12742\"",
                "date": "2022-08-18T07:32:12Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "what commits were buggy on May 24, 2022?",
        "number": 14,
        "category": 2,
        "response": "I don't know. Can I help with anything else?",
        "chain_of_thought": "To determine which commits were buggy on May 24, 2022, we need to identify the commits that introduced issues on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship. We also need to filter the issues based on their creation date.\n\nFirst, we need to match the commits that introduced issues:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\n```\n\nNext, we filter the issues to only include those created on May 24, 2022. The `created_at` property of the Issue node should be in the ISO format, so we use a regex to match the date:\n```cypher\nWHERE i.created_at =~ '2022-05-24T.*'\n```\n\nFinally, we return the commit IDs that introduced these issues:\n```cypher\nRETURN c.id AS buggy_commit\n```\n\nTherefore, the complete query is:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2022-05-24T.*'\nRETURN c.id AS buggy_commit\n```",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2022-05-24T.*'\nRETURN c.id AS buggy_commit\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "incorrect"
    },
    {
        "question": "commit(s) that fixed the bug ticket 12892?",
        "number": 15,
        "category": 2,
        "response": "The commit that fixed the bug ticket 12892 is identified by the commit ID '25f97a5033187372e7b8c591c79336197ee5c833'. The commit message is: \"fix(compiler-sfc): fix rewriteDefault edge cases\\n\\nclose #13060\\nclose #12892\\nclose #12906\".",
        "chain_of_thought": "To find the commit(s) that fixed the bug ticket with the number 12892, we need to identify the relevant nodes and relationships. The bug ticket is represented by an Issue node, and the commits that fixed the bug are represented by Commit nodes. The relevant relationship between Commit and Issue for this question is the fixed relationship, which indicates that a commit fixed a particular issue.\n\nFirst, we need to match the Issue node with the specific number 12892. Then, we need to find the Commit nodes that have a fixed relationship with this Issue node.\n\nThe query to find the commit(s) that fixed the bug ticket 12892 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 12892})\nRETURN c.id AS commit_id, c.message AS commit_message\n```\n\nThis query will return the commit ID and message for each commit that fixed the specified bug ticket.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 12892})\nRETURN c.id AS commit_id, c.message AS commit_message\n",
        "result": [
            {
                "commit_id": "25f97a5033187372e7b8c591c79336197ee5c833",
                "commit_message": "\"fix(compiler-sfc): fix rewriteDefault edge cases\n\nclose #13060\nclose #12892\nclose #12906\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "which commit fixed the bug ticket 11575?",
        "number": 16,
        "category": 2,
        "response": "The commit that fixed bug ticket 11575 is identified by the commit ID `af5e05d87ecd218f73302a1b08dcaedd2b46814a`.",
        "chain_of_thought": "To determine which commit fixed the bug associated with ticket 11575, we need to identify the relevant nodes and relationships. The ticket is represented by an Issue node, and the commit that fixed the bug is represented by a Commit node. The relationship between a commit and an issue that it fixed is the fixed relationship.\n\nHere's how we can construct the query:\n\n1. Identify the Issue node with the specific ticket number 11575.\n2. Find the Commit node that has a fixed relationship with this Issue node.\n\nThe query to find the commit that fixed the bug ticket 11575 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 11575})\nRETURN c.id AS commit_id\n```\n\nThis query matches the commit that has a fixed relationship with the issue having the number 11575 and returns the ID of that commit.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 11575})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "af5e05d87ecd218f73302a1b08dcaedd2b46814a"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "Determine the bug(s) that were introduced because of commit hash fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be?",
        "number": 17,
        "category": 2,
        "response": "The commit with the hash `fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be` introduced the following bugs:\n\n1. Issue ID: 12608, Title: \"implement and export defineAsyncComponent compatible version in 2.7.x\", URL: [https://github.com/vuejs/vue/issues/12608](https://github.com/vuejs/vue/issues/12608)\n2. Issue ID: 12622, Title: \"Vue.component(id, component) mismatch type of DefineComponent\", URL: [https://github.com/vuejs/vue/issues/12622](https://github.com/vuejs/vue/issues/12622)\n3. Issue ID: 12748, Title: \"Export type `DefineComponent`\", URL: [https://github.com/vuejs/vue/issues/12748](https://github.com/vuejs/vue/issues/12748)\n4. Issue ID: 13078, Title: \"import type { CSSProperties } from vue is error\", URL: [https://github.com/vuejs/vue/issues/13078](https://github.com/vuejs/vue/issues/13078)\n5. Issue ID: 13128, Title: \"Vue 2.7.16 bug: Some types has not export\", URL: [https://github.com/vuejs/vue/issues/13128](https://github.com/vuejs/vue/issues/13128)",
        "chain_of_thought": "To determine the bug(s) introduced by a specific commit, we need to identify the relevant nodes and relationships. The commit in question is identified by its hash, which corresponds to the `Commit` node. We are interested in finding the `Issue` nodes that were introduced by this commit. The relevant relationship between `Commit` and `Issue` for this question is the `introduced` relationship.\n\nTherefore, the query to find the bug(s) introduced by the commit with hash `fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be` is:\n\n```cypher\nMATCH (c:Commit {id: 'fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query matches the specific commit node and finds all issues that were introduced by it, returning the issue ID, title, and URL for each issue.",
        "query": "cypher\nMATCH (c:Commit {id: 'fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [
            {
                "issue_id": 12608,
                "issue_title": "\"implement and export defineAsyncComponent compatible version in 2.7.x\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12608"
            },
            {
                "issue_id": 12622,
                "issue_title": "\"Vue.component(id, component) mismatch type of DefineComponent\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12622"
            },
            {
                "issue_id": 12748,
                "issue_title": "\"Export type `DefineComponent`\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12748"
            },
            {
                "issue_id": 13078,
                "issue_title": "\"import type { CSSProperties } from vue is error\"",
                "issue_url": "https://github.com/vuejs/vue/issues/13078"
            },
            {
                "issue_id": 13128,
                "issue_title": "\"Vue 2.7.16 bug: Some types has not export\"",
                "issue_url": "https://github.com/vuejs/vue/issues/13128"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "what are the bugs caused by commit c678e3134b927645f79270b52d4d660a7e3654ce?",
        "number": 18,
        "category": 2,
        "response": "The bugs caused by commit c678e3134b927645f79270b52d4d660a7e3654ce are:\n\n1. Issue ID 12758: \"[2.7.x] Here is a type error when using ref() on attribute ref in TSX\". You can find more details about this issue at [this URL](https://github.com/vuejs/vue/issues/12758).\n\n2. Issue ID 12832: \"EventHandlers type error, DOMs Event was tainted by `@types/node`\". You can find more details about this issue at [this URL](https://github.com/vuejs/vue/issues/12832).",
        "chain_of_thought": "To determine the bugs caused by a specific commit, we need to identify the relevant nodes and relationships in the schema. The commit in question is identified by its ID, which corresponds to the Commit node. We are interested in finding the issues (bugs) that this commit has introduced, which is represented by the introduced relationship between the Commit and Issue nodes.\n\nHere's how we can construct the query:\n\n1. Identify the Commit node with the given ID.\n2. Use the introduced relationship to find the associated Issue nodes.\n\nThe query to find the bugs caused by the specified commit is:\n\n```cypher\nMATCH (c:Commit {id: 'c678e3134b927645f79270b52d4d660a7e3654ce'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query will return the ID, title, and URL of the issues (bugs) introduced by the specified commit.",
        "query": "cypher\nMATCH (c:Commit {id: 'c678e3134b927645f79270b52d4d660a7e3654ce'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [
            {
                "issue_id": 12758,
                "issue_title": "\"[2.7.x] Here is a type error when using ref() on attribute ref in TSX\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12758"
            },
            {
                "issue_id": 12832,
                "issue_title": "\"EventHandlers type error, DOMs Event  was tainted by `@types/node`\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12832"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "Determine the percentage of the fixing commits that introduced bugs on Oct 2017?",
        "number": 19,
        "category": 3,
        "response": "The percentage of the fixing commits that also introduced bugs in October 2017 is approximately 17.14%.",
        "chain_of_thought": "To determine the percentage of fixing commits that introduced bugs in October 2017, we need to interpret the question and identify the relevant nodes and relationships in the schema.\n\n### Interpretation:\n1. **Fixing Commits**: These are commits that have a `fixed` relationship with an `Issue`.\n2. **Commits that Introduced Bugs**: These are commits that have an `introduced` relationship with an `Issue`.\n3. **Time Frame**: We are interested in commits from October 2017.\n\n### Steps to Construct the Query:\n1. **Identify Fixing Commits in October 2017**:\n   - Use the `fixed` relationship to find commits that fixed issues.\n   - Filter these commits by the `committedDate` property to only include those from October 2017.\n\n2. **Identify Commits that Introduced Bugs in October 2017**:\n   - Use the `introduced` relationship to find commits that introduced issues.\n   - Similarly, filter these by the `committedDate` property for October 2017.\n\n3. **Calculate the Percentage**:\n   - Count the total number of fixing commits in October 2017.\n   - Count the number of fixing commits that also introduced bugs in October 2017.\n   - Calculate the percentage of fixing commits that introduced bugs.\n\n### Cypher Query:\n```cypher\n// Find all fixing commits in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\nWITH COLLECT(c.id) AS fixingCommits\n\n// Find all commits that introduced bugs in October 2017\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\nWITH fixingCommits, COLLECT(c.id) AS introducingCommits\n\n// Calculate the intersection of fixing and introducing commits\nWITH fixingCommits, introducingCommits, \n     [x IN fixingCommits WHERE x IN introducingCommits] AS bothFixingAndIntroducing\n\n// Calculate the percentage\nRETURN \n  SIZE(bothFixingAndIntroducing) * 100.0 / SIZE(fixingCommits) AS percentage\n```\n\n### Explanation:\n- The query first collects the IDs of all fixing commits and introducing commits in October 2017.\n- It then calculates the intersection of these two sets to find commits that both fixed and introduced issues.\n- Finally, it calculates the percentage of fixing commits that also introduced bugs by dividing the size of the intersection by the total number of fixing commits and multiplying by 100.",
        "query": "cypher\n// Find all fixing commits in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\nWITH COLLECT(c.id) AS fixingCommits\n\n// Find all commits that introduced bugs in October 2017\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\nWITH fixingCommits, COLLECT(c.id) AS introducingCommits\n\n// Calculate the intersection of fixing and introducing commits\nWITH fixingCommits, introducingCommits, \n     [x IN fixingCommits WHERE x IN introducingCommits] AS bothFixingAndIntroducing\n\n// Calculate the percentage\nRETURN \n  SIZE(bothFixingAndIntroducing) * 100.0 / SIZE(fixingCommits) AS percentage\n",
        "result": [
            {
                "percentage": 17.142857142857142
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "incorrect"
    },
    {
        "question": "How many fixing commits caused bugs on Oct 2017?",
        "number": 20,
        "category": 3,
        "response": "There were 7 fixing commits that caused bugs in October 2017.",
        "chain_of_thought": "To address the question, we need to determine the number of commits that both fixed an issue and introduced a bug in October 2017. The schema provides us with the necessary relationships and properties to achieve this.\n\nFirst, let's break down the question:\n\n1. **Fixing Commits**: These are commits that have a `fixed` relationship with an `Issue`.\n2. **Caused Bugs**: These are commits that have an `introduced` relationship with an `Issue`.\n3. **Date Constraint**: We are interested in commits from October 2017. The `committedDate` property of the `Commit` node will be used to filter these commits.\n\nGiven these points, the query will involve:\n\n- Finding commits that have both `fixed` and `introduced` relationships with issues.\n- Filtering these commits to only include those with a `committedDate` in October 2017.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n```\n\nExplanation:\n\n- `MATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)`: This pattern matches commits that have both fixed and introduced relationships with issues.\n- `WHERE c.committedDate =~ '2017-10.*'`: This filters the commits to only those whose `committedDate` is in October 2017. The regex `'2017-10.*'` captures any date in October 2017.\n- `RETURN COUNT(c) AS fixing_commits_causing_bugs`: This returns the count of such commits.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n",
        "result": [
            {
                "fixing_commits_causing_bugs": 7
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "how many commits happened in last month?",
        "number": 1,
        "category": 1,
        "response": "There were no commits that happened in the last month. Can I help with anything else?",
        "chain_of_thought": "To determine how many commits happened in the last month, we need to consider the current date, which is 2024-08-26T00:00:00Z. The last month would be from 2024-07-26T00:00:00Z to 2024-08-25T23:59:59Z.\n\nThe relevant nodes for this query are the Commit nodes, and we need to filter these nodes based on the `committedDate` property. The `committedDate` should be within the specified date range.\n\nHere's the Cypher query to find the number of commits that happened in the last month:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n```\n\nThis query matches all commits and filters them based on the `committedDate` to ensure they fall within the last month, then returns the count of these commits.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n",
        "result": [
            {
                "numberOfCommits": 0
            }
        ],
        "isAmbiguous": true,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "what is the latest commit?",
        "number": 2,
        "category": 1,
        "response": "The latest commit has the ID `73486cb5f5862a443b42c2aff68b82320218cbcd` and was committed on June 14, 2024, at 12:52:12 UTC.",
        "chain_of_thought": "To determine the latest commit, we need to identify the Commit node with the most recent committedDate. The relevant property for this query is the committedDate property of the Commit node. We will sort the commits by this date in descending order and return the top result.\n\nThe query to find the latest commit is:\n\n```cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n```",
        "query": "cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n",
        "result": [
            {
                "commitId": "73486cb5f5862a443b42c2aff68b82320218cbcd",
                "commitDate": "2024-06-14T12:52:12Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "can you tell me the details of the commits between Dec 1st 2023 and Dec 7th 2023?",
        "number": 3,
        "category": 1,
        "response": "Certainly! Here are the details of the commits made between December 1st, 2023, and December 7th, 2023:\n\n1. **Commit ID:** 947993f7e8e445b9032dd59d7f484593c3174452\n   - **Message:** \"chore: bump vitest to 1.0\"\n   - **Additions:** 323\n   - **Deletions:** 154\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:08:23Z\n\n2. **Commit ID:** 08382f008016c3b3b93f84594266f2e191fee91d\n   - **Message:** \"fix(props): should not unwrap props that are raw refs\\n\\nclose #12930\"\n   - **Additions:** 36\n   - **Deletions:** 12\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:10:49Z\n\n3. **Commit ID:** d30f6fd25f90973a84fadb43eef75a54c4b42ea2\n   - **Message:** \"test: fix tests\"\n   - **Additions:** 39\n   - **Deletions:** 39\n   - **Changed Files:** 4\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:21:00Z\n\n4. **Commit ID:** 0ad8e8d94f3a3bf4429f25850c85a6bbb2b81364\n   - **Message:** \"fix(shallowReactive): should track value if already reactive when set in shallowReactive\"\n   - **Additions:** 6\n   - **Deletions:** 5\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:45:15Z\n\n5. **Commit ID:** 45d6ad6645e960a3ee52ad9667520a1625f10dfd\n   - **Message:** \"chore(compiler-sfc): specify prettier version (#13053)\\n\\nclose: #13052\"\n   - **Additions:** 7\n   - **Deletions:** 1\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:49:41Z\n\n6. **Commit ID:** de0b97b3eadae120eda505b45df2de2115dcb6f0\n   - **Message:** \"fix(types): fix type augmentation and compiler-sfc types w/moduleResolution: bundler (#13107)\\n\\nclose #13106\"\n   - **Additions:** 4\n   - **Deletions:** 3\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:52:18Z\n\n7. **Commit ID:** ae3e4b1c706b8d61a4a312ca5d23441df021b4b4\n   - **Message:** \"fix(utils): unwrap refs when stringifying values in template\\n\\nclose #12884\\nclose #12888\"\n   - **Additions:** 20\n   - **Deletions:** 1\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T08:40:49Z\n\n8. **Commit ID:** 10c2a87c7038f2f80df23044c48a130bea253bf8\n   - **Message:** \"chore(deps): bump @babel/parser\"\n   - **Additions:** 673\n   - **Deletions:** 701\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T09:09:56Z\n\n9. **Commit ID:** 25f97a5033187372e7b8c591c79336197ee5c833\n   - **Message:** \"fix(compiler-sfc): fix rewriteDefault edge cases\\n\\nclose #13060\\nclose #12892\\nclose #12906\"\n   - **Additions:** 79\n   - **Deletions:** 7\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T09:25:12Z\n\n10. **Commit ID:** d6468c4c383184acd66f3c9091005e83836a43f3\n    - **Message:** \"chore(deps): bump esbuild\"\n    - **Additions:** 6\n    - **Deletions:** 234\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T09:29:47Z\n\n11. **Commit ID:** f5ef882a781b8a62c9ca00e95006d07636567c8e\n    - **Message:** \"fix(style): always set new styles\\n\\nclose #12901\\nclose #12946\"\n    - **Additions:** 17\n    - **Deletions:** 4\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T15:17:02Z\n\n12. **Commit ID:** a174c29dab2cf655b06f7870e0ac5a78ef35ec8a\n    - **Message:** \"fix(types): fix shallowRefs return type  (#12979)\\n\\nclose #12978\"\n    - **Additions:** 30\n    - **Deletions:** 8\n    - **Changed Files:** 3\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T15:51:56Z\n\n13. **Commit ID:** 6d857f5bee275dc98106e3b2cbc7722f5ec0cfc0\n    - **Message:** \"fix(watch): new property addition should trigger deep watcher with getter\\n\\nclose #12967\\nclose #12972\"\n    - **Additions:** 37\n    - **Deletions:** 2\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T16:13:31Z\n\n14. **Commit ID:** 24fcf69624a633d43dfc0aa5fa6b93d11de7fad5\n    - **Message:** \"fix(types): type VNodeChildren should allow type number  (#13067)\\n\\nclose #12973\"\n    - **Additions:** 2\n    - **Deletions:** 0\n    - **Changed Files:** 1\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T05:59:43Z\n\n15. **Commit ID:** 83d95351a9f809311d624fc3398e7f6829b72447\n    - **Message:** \"fix(compiler-sfc): check template `ref` usage,  (#12985)\\n\\nclose #12984\"\n    - **Additions:** 29\n    - **Deletions:** 0\n    - **Changed Files:** 3\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T06:14:27Z\n\n16. **Commit ID:** 3650c12f7d3a20f3155bc1fd2b068e84289e0d33\n    - **Message:** \"fix(types): provide types for built-in components\\n\\nclose #13002\"\n    - **Additions:** 65\n    - **Deletions:** 0\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T06:41:10Z\n\n17. **Commit ID:** 2632249925e632e56f6dfc8fdbcf682c82e4081b\n    - **Message:** \"fix(keep-alive): fix keep-alive memory leak\\n\\nclose #12827\"\n    - **Additions:** 2\n    - **Deletions:** 0\n    - **Changed Files:** 1\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T08:12:36Z\n\n18. **Commit ID:** e0747f40a879b4000a1959d21377b51d1f1ed988\n    - **Message:** \"fix(keep-alive): fix memory leak without breaking transition tests\"\n    - **Additions:** 8\n    - **Deletions:** 4\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T09:07:15Z\n\nIf you need more details or further assistance, feel free to ask!",
        "chain_of_thought": "To address the question, we need to find the details of commits made between December 1st, 2023, and December 7th, 2023. The relevant node for this query is the Commit node, and we will use the `committedDate` property to filter the commits within the specified date range.\n\nFirst, we need to format the dates in ISO format. The start date is \"2023-12-01T00:00:00Z\" and the end date is \"2023-12-07T23:59:59Z\" to include the entire day of December 7th.\n\nThe query will match all commits and filter them based on the `committedDate` property to fall within the specified range. We will then return the details of these commits.\n\nThe complete query is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2023-12-01T00:00:00Z\" AND c.committedDate <= \"2023-12-07T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n```\n\nThis query will return the details of the commits, including their ID, message, number of additions, deletions, changed files, comments count, and the committed date, all sorted by the committed date.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2023-12-01T00:00:00Z\" AND c.committedDate <= \"2023-12-07T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n",
        "result": [
            {
                "commitId": "947993f7e8e445b9032dd59d7f484593c3174452",
                "message": "\"chore: bump vitest to 1.0\"",
                "additions": 323,
                "deletions": 154,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:08:23Z"
            },
            {
                "commitId": "08382f008016c3b3b93f84594266f2e191fee91d",
                "message": "\"fix(props): should not unwrap props that are raw refs\n\nclose #12930\"",
                "additions": 36,
                "deletions": 12,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:10:49Z"
            },
            {
                "commitId": "d30f6fd25f90973a84fadb43eef75a54c4b42ea2",
                "message": "\"test: fix tests\"",
                "additions": 39,
                "deletions": 39,
                "changedFiles": 4,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:21:00Z"
            },
            {
                "commitId": "0ad8e8d94f3a3bf4429f25850c85a6bbb2b81364",
                "message": "\"fix(shallowReactive): should track value if already reactive when set in shallowReactive\"",
                "additions": 6,
                "deletions": 5,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:45:15Z"
            },
            {
                "commitId": "45d6ad6645e960a3ee52ad9667520a1625f10dfd",
                "message": "\"chore(compiler-sfc): specify prettier version (#13053)\n\nclose: #13052\"",
                "additions": 7,
                "deletions": 1,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:49:41Z"
            },
            {
                "commitId": "de0b97b3eadae120eda505b45df2de2115dcb6f0",
                "message": "\"fix(types): fix type augmentation and compiler-sfc types w/moduleResolution: bundler (#13107)\n\nclose #13106\"",
                "additions": 4,
                "deletions": 3,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:52:18Z"
            },
            {
                "commitId": "ae3e4b1c706b8d61a4a312ca5d23441df021b4b4",
                "message": "\"fix(utils): unwrap refs when stringifying values in template\n\nclose #12884\nclose #12888\"",
                "additions": 20,
                "deletions": 1,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T08:40:49Z"
            },
            {
                "commitId": "10c2a87c7038f2f80df23044c48a130bea253bf8",
                "message": "\"chore(deps): bump @babel/parser\"",
                "additions": 673,
                "deletions": 701,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:09:56Z"
            },
            {
                "commitId": "25f97a5033187372e7b8c591c79336197ee5c833",
                "message": "\"fix(compiler-sfc): fix rewriteDefault edge cases\n\nclose #13060\nclose #12892\nclose #12906\"",
                "additions": 79,
                "deletions": 7,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:25:12Z"
            },
            {
                "commitId": "d6468c4c383184acd66f3c9091005e83836a43f3",
                "message": "\"chore(deps): bump esbuild\"",
                "additions": 6,
                "deletions": 234,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:29:47Z"
            },
            {
                "commitId": "f5ef882a781b8a62c9ca00e95006d07636567c8e",
                "message": "\"fix(style): always set new styles\n\nclose #12901\nclose #12946\"",
                "additions": 17,
                "deletions": 4,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T15:17:02Z"
            },
            {
                "commitId": "a174c29dab2cf655b06f7870e0ac5a78ef35ec8a",
                "message": "\"fix(types): fix shallowRefs return type  (#12979)\n\nclose #12978\"",
                "additions": 30,
                "deletions": 8,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T15:51:56Z"
            },
            {
                "commitId": "6d857f5bee275dc98106e3b2cbc7722f5ec0cfc0",
                "message": "\"fix(watch): new property addition should trigger deep watcher with getter\n\nclose #12967\nclose #12972\"",
                "additions": 37,
                "deletions": 2,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T16:13:31Z"
            },
            {
                "commitId": "24fcf69624a633d43dfc0aa5fa6b93d11de7fad5",
                "message": "\"fix(types): type VNodeChildren should allow type number  (#13067)\n\nclose #12973\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-07T05:59:43Z"
            },
            {
                "commitId": "83d95351a9f809311d624fc3398e7f6829b72447",
                "message": "\"fix(compiler-sfc): check template `ref` usage,  (#12985)\n\nclose #12984\"",
                "additions": 29,
                "deletions": 0,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-07T06:14:27Z"
            },
            {
                "commitId": "3650c12f7d3a20f3155bc1fd2b068e84289e0d33",
                "message": "\"fix(types): provide types for built-in components\n\nclose #13002\"",
                "additions": 65,
                "deletions": 0,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-07T06:41:10Z"
            },
            {
                "commitId": "2632249925e632e56f6dfc8fdbcf682c82e4081b",
                "message": "\"fix(keep-alive): fix keep-alive memory leak\n\nclose #12827\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-07T08:12:36Z"
            },
            {
                "commitId": "e0747f40a879b4000a1959d21377b51d1f1ed988",
                "message": "\"fix(keep-alive): fix memory leak without breaking transition tests\"",
                "additions": 8,
                "deletions": 4,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-07T09:07:15Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "return a commit message on July 31?",
        "number": 4,
        "category": 1,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To address the question \"return a commit message on July 31,\" we need to interpret the query to find commit messages from a specific date, July 31. The schema provides us with the Commit node, which contains the `committedDate` and `message` properties. The `committedDate` property will be used to filter commits from July 31.\n\nSince the year is not specified in the question, we will assume the current year, 2024. The date format required is ISO 8601, so we will use \"2024-07-31\" and apply a regex to match any time on that day.\n\nThe query will involve:\n1. Matching all Commit nodes.\n2. Filtering commits where the `committedDate` matches July 31, 2024.\n3. Returning the `message` property of those commits.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commitMessage\n```\n\nThis query will return the commit messages for all commits made on July 31, 2024.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commitMessage\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "incorrect"
    },
    {
        "question": "show me the changes for render.js file?",
        "number": 5,
        "category": 2,
        "response": "Here are the recent changes made to the `render.js` file:\n\n1. **Commit ID: f64765fa03c1eb1d37f3301ea5beb4d18e57158a**\n   - **Additions:** 1 line\n   - **Deletions:** 1 line\n   - **Patch:** \n     ```diff\n     @@ -84,7 +84,7 @@ export function renderMixin (Vue: Class<Component>) {\n          // render self\n          let vnode\n          try {\n     -      // There's no need to maintain a stack becaues all render fns are called\n     +      // There's no need to maintain a stack because all render fns are called\n            // separately from one another. Nested component's render fns are called\n            // when parent component is patched.\n            currentRenderingInstance = vm\n     ```\n\n2. **Commit ID: 099f3ba60085a089ff369442bdb835f3868e47c0**\n   - **Additions:** 2 lines\n   - **Deletions:** 1 line\n   - **Patch:** \n     ```diff\n     @@ -73,7 +73,8 @@ export function renderMixin (Vue: Class<Component>) {\n          if (_parentVnode) {\n            vm.$scopedSlots = normalizeScopedSlots(\n              _parentVnode.data.scopedSlots,\n     -        vm.$slots\n     +        vm.$slots,\n     +        vm.$scopedSlots\n            )\n          }\n     ```\n\n3. **Commit ID: b9de23b1008b52deca7e7df40843e318a42f3f53**\n   - **Additions:** 13 lines\n   - **Deletions:** 0 lines\n   - **Patch:** \n     ```diff\n     @@ -51,6 +51,13 @@ export function initRender (vm: Component) {\n        }\n      }\n      \n     +export let currentRenderingInstance: Component | null = null\n     +\n     +// for testing only\n     +export function setCurrentRenderingInstance (vm: Component) {\n     +  currentRenderingInstance = vm\n     +}\n     +\n      export function renderMixin (Vue: Class<Component>) {\n        // install runtime convenience helpers\n        installRenderHelpers(Vue.prototype)\n     @@ -76,6 +83,10 @@ export function renderMixin (Vue: Class<Component>) {\n          // render self\n          let vnode\n          try {\n     +      // There's no need to maintain a stack becaues all render fns are called\n     +      // separately from one another. Nested component's render fns are called\n     +      // when parent component is patched.\n     +      currentRenderingInstance = vm\n            vnode = render.call(vm._renderProxy, vm.$createElement)\n          } catch (e) {\n            handleError(e, vm, `render`)\n     @@ -92,6 +103,8 @@ export function renderMixin (Vue: Class<Component>) {\n            } else {\n              vnode = vm._vnode\n            }\n     +    } finally {\n     +      currentRenderingInstance = null\n          }\n          // if the returned array contains only a single node, allow it\n          if (Array.isArray(vnode) && vnode.length === 1) {\n     ```",
        "chain_of_thought": "To address the question \"show me the changes for render.js file,\" we need to identify the changes made to the file named \"render.js.\" The relevant nodes are the File and Commit nodes. The relationship between Commit and File is the `changed` relationship, which indicates modifications to the file. We need to find all commits that have changed the file named \"render.js\" and retrieve the details of those changes.\n\nHere's the step-by-step breakdown of the query:\n\n1. Identify the File node with the name \"render.js.\"\n2. Find all Commit nodes that have a `changed` relationship with the identified File node.\n3. Retrieve the details of the changes, such as additions, deletions, and the patch.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'render.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n```\n\nThis query will return the commit ID, the number of additions and deletions, and the patch details for each commit that modified the file \"render.js,\" ordered by the commit date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'render.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n",
        "result": [
            {
                "commitId": "f64765fa03c1eb1d37f3301ea5beb4d18e57158a",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -84,7 +84,7 @@ export function renderMixin (Vue: Class<Component>) {\n     // render self\n     let vnode\n     try {\n-      // There's no need to maintain a stack becaues all render fns are called\n+      // There's no need to maintain a stack because all render fns are called\n       // separately from one another. Nested component's render fns are called\n       // when parent component is patched.\n       currentRenderingInstance = vm"
            },
            {
                "commitId": "099f3ba60085a089ff369442bdb835f3868e47c0",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -73,7 +73,8 @@ export function renderMixin (Vue: Class<Component>) {\n     if (_parentVnode) {\n       vm.$scopedSlots = normalizeScopedSlots(\n         _parentVnode.data.scopedSlots,\n-        vm.$slots\n+        vm.$slots,\n+        vm.$scopedSlots\n       )\n     }\n "
            },
            {
                "commitId": "b9de23b1008b52deca7e7df40843e318a42f3f53",
                "additions": 13,
                "deletions": 0,
                "patch": "@@ -51,6 +51,13 @@ export function initRender (vm: Component) {\n   }\n }\n \n+export let currentRenderingInstance: Component | null = null\n+\n+// for testing only\n+export function setCurrentRenderingInstance (vm: Component) {\n+  currentRenderingInstance = vm\n+}\n+\n export function renderMixin (Vue: Class<Component>) {\n   // install runtime convenience helpers\n   installRenderHelpers(Vue.prototype)\n@@ -76,6 +83,10 @@ export function renderMixin (Vue: Class<Component>) {\n     // render self\n     let vnode\n     try {\n+      // There's no need to maintain a stack becaues all render fns are called\n+      // separately from one another. Nested component's render fns are called\n+      // when parent component is patched.\n+      currentRenderingInstance = vm\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n       handleError(e, vm, `render`)\n@@ -92,6 +103,8 @@ export function renderMixin (Vue: Class<Component>) {\n       } else {\n         vnode = vm._vnode\n       }\n+    } finally {\n+      currentRenderingInstance = null\n     }\n     // if the returned array contains only a single node, allow it\n     if (Array.isArray(vnode) && vnode.length === 1) {"
            },
            {
                "commitId": "42fdf3f8378e5dc379808a4fa67b39c4a74ae191",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -50,8 +50,8 @@ const normalizeRender = vm => {\n   }\n }\n \n-function waitForSsrPrefetch (vm, resolve, reject) {\n-  let handlers = vm.$options.ssrPrefetch\n+function waitForServerPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.serverPrefetch\n   if (isDef(handlers)) {\n     if (!Array.isArray(handlers)) handlers = [handlers]\n     try {\n@@ -206,7 +206,7 @@ function renderComponentInner (node, isRoot, context) {\n \n   const reject = context.done\n \n-  waitForSsrPrefetch(child, resolve, reject)\n+  waitForServerPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -432,6 +432,6 @@ export function createRenderFunction (\n     const resolve = () => {\n       renderNode(component._render(), true, context)\n     }\n-    waitForSsrPrefetch(component, resolve, done)\n+    waitForServerPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "6fe07ebf5ab3fea1860c59fe7cdd2ec1b760f9b0",
                "additions": 47,
                "deletions": 9,
                "patch": "@@ -19,6 +19,7 @@ let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n     warned[msg] = true\n+    // eslint-disable-next-line no-console\n     console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n   }\n }\n@@ -49,6 +50,27 @@ const normalizeRender = vm => {\n   }\n }\n \n+function waitForSsrPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.ssrPrefetch\n+  if (isDef(handlers)) {\n+    if (!Array.isArray(handlers)) handlers = [handlers]\n+    try {\n+      const promises = []\n+      for (let i = 0, j = handlers.length; i < j; i++) {\n+        const result = handlers[i].call(vm, vm)\n+        if (result && typeof result.then === 'function') {\n+          promises.push(result)\n+        }\n+      }\n+      Promise.all(promises).then(resolve).catch(reject)\n+      return\n+    } catch (e) {\n+      reject(e)\n+    }\n+  }\n+  resolve()\n+}\n+\n function renderNode (node, isRoot, context) {\n   if (node.isString) {\n     renderStringNode(node, context)\n@@ -92,7 +114,12 @@ function renderComponent (node, isRoot, context) {\n   const registerComponent = registerComponentForCache(Ctor.options, write)\n \n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const rawKey = getKey(node.componentOptions.propsData)\n+    if (rawKey === false) {\n+      renderComponentInner(node, isRoot, context)\n+      return\n+    }\n+    const key = name + '::' + rawKey\n     const { has, get } = context\n     if (isDef(has)) {\n       has(key, hit => {\n@@ -166,13 +193,20 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+\n+  const resolve = () => {\n+    const childNode = child._render()\n+    childNode.parent = node\n+    context.renderStates.push({\n+      type: 'Component',\n+      prevActive\n+    })\n+    renderNode(childNode, isRoot, context)\n+  }\n+\n+  const reject = context.done\n+\n+  waitForSsrPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -394,6 +428,10 @@ export function createRenderFunction (\n     })\n     installSSRHelpers(component)\n     normalizeRender(component)\n-    renderNode(component._render(), true, context)\n+\n+    const resolve = () => {\n+      renderNode(component._render(), true, context)\n+    }\n+    waitForSsrPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "5d52262f1ce56d080c3438c4773a81dc5c8397aa",
                "additions": 4,
                "deletions": 1,
                "patch": "@@ -64,7 +64,10 @@ export function renderMixin (Vue: Class<Component>) {\n     const { render, _parentVnode } = vm.$options\n \n     if (_parentVnode) {\n-      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots)\n+      vm.$scopedSlots = normalizeScopedSlots(\n+        _parentVnode.data.scopedSlots,\n+        vm.$slots\n+      )\n     }\n \n     // set parent vnode. this allows render functions to have access"
            },
            {
                "commitId": "c7c13c2a156269d29fd9c9f8f6a3e53a2f2cac3d",
                "additions": 6,
                "deletions": 1,
                "patch": "@@ -11,6 +11,7 @@ import {\n import { createElement } from '../vdom/create-element'\n import { installRenderHelpers } from './render-helpers/index'\n import { resolveSlots } from './render-helpers/resolve-slots'\n+import { normalizeScopedSlots } from '../vdom/helpers/normalize-scoped-slots'\n import VNode, { createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n@@ -63,7 +64,7 @@ export function renderMixin (Vue: Class<Component>) {\n     const { render, _parentVnode } = vm.$options\n \n     if (_parentVnode) {\n-      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n+      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots)\n     }\n \n     // set parent vnode. this allows render functions to have access\n@@ -89,6 +90,10 @@ export function renderMixin (Vue: Class<Component>) {\n         vnode = vm._vnode\n       }\n     }\n+    // if the returned array contains only a single node, allow it\n+    if (Array.isArray(vnode) && vnode.length === 1) {\n+      vnode = vnode[0]\n+    }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "ab24285458c98e25d5749beb4edebef73672de4b",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -114,7 +114,12 @@ function renderComponent (node, isRoot, context) {\n   const registerComponent = registerComponentForCache(Ctor.options, write)\n \n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const rawKey = getKey(node.componentOptions.propsData)\n+    if (rawKey === false) {\n+      renderComponentInner(node, isRoot, context)\n+      return\n+    }\n+    const key = name + '::' + rawKey\n     const { has, get } = context\n     if (isDef(has)) {\n       has(key, hit => {\n@@ -188,7 +193,7 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  \n+\n   const resolve = () => {\n     const childNode = child._render()\n     childNode.parent = node"
            },
            {
                "commitId": "d7a533d6f85aae52aed03202fa5ccb774f0cb2ec",
                "additions": 41,
                "deletions": 8,
                "patch": "@@ -19,6 +19,7 @@ let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n     warned[msg] = true\n+    // eslint-disable-next-line no-console\n     console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n   }\n }\n@@ -49,6 +50,27 @@ const normalizeRender = vm => {\n   }\n }\n \n+function waitForSsrPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.ssrPrefetch\n+  if (isDef(handlers)) {\n+    if (!Array.isArray(handlers)) handlers = [handlers]\n+    try {\n+      const promises = []\n+      for (let i = 0, j = handlers.length; i < j; i++) {\n+        const result = handlers[i].call(vm, vm)\n+        if (result && typeof result.then === 'function') {\n+          promises.push(result)\n+        }\n+      }\n+      Promise.all(promises).then(resolve).catch(reject)\n+      return\n+    } catch (e) {\n+      reject(e)\n+    }\n+  }\n+  resolve()\n+}\n+\n function renderNode (node, isRoot, context) {\n   if (node.isString) {\n     renderStringNode(node, context)\n@@ -166,13 +188,20 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+  \n+  const resolve = () => {\n+    const childNode = child._render()\n+    childNode.parent = node\n+    context.renderStates.push({\n+      type: 'Component',\n+      prevActive\n+    })\n+    renderNode(childNode, isRoot, context)\n+  }\n+\n+  const reject = context.done\n+\n+  waitForSsrPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -394,6 +423,10 @@ export function createRenderFunction (\n     })\n     installSSRHelpers(component)\n     normalizeRender(component)\n-    renderNode(component._render(), true, context)\n+\n+    const resolve = () => {\n+      renderNode(component._render(), true, context)\n+    }\n+    waitForSsrPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "780dac561b9cd6c3cec28f154f76e7d28352ebf3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -326,7 +326,7 @@ function renderStartingTag (node: VNode, context) {\n       for (let i = 0; i < dirs.length; i++) {\n         const name = dirs[i].name\n         if (name !== 'show') {\n-          const dirRenderer = resolveAsset(context, 'directives', name, true)\n+          const dirRenderer = resolveAsset(context, 'directives', name)\n           if (dirRenderer) {\n             // directives mutate the node's data\n             // which then gets rendered by modules"
            },
            {
                "commitId": "307835284a326569ea12c4a22c7dcb8f36d2d8ca",
                "additions": 8,
                "deletions": 5,
                "patch": "@@ -3,6 +3,7 @@\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n+import { resolveAsset } from 'core/util/options'\n import { generateComponentTrace } from 'core/util/debug'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n@@ -324,11 +325,13 @@ function renderStartingTag (node: VNode, context) {\n     if (dirs) {\n       for (let i = 0; i < dirs.length; i++) {\n         const name = dirs[i].name\n-        const dirRenderer = directives[name]\n-        if (dirRenderer && name !== 'show') {\n-          // directives mutate the node's data\n-          // which then gets rendered by modules\n-          dirRenderer(node, dirs[i])\n+        if (name !== 'show') {\n+          const dirRenderer = resolveAsset(context, 'directives', name, true)\n+          if (dirRenderer) {\n+            // directives mutate the node's data\n+            // which then gets rendered by modules\n+            dirRenderer(node, dirs[i])\n+          }\n         }\n       }\n     }"
            },
            {
                "commitId": "530ca1b2db315fbd0e360807b2031d26665c5d3d",
                "additions": 0,
                "deletions": 8,
                "patch": "@@ -62,14 +62,6 @@ export function renderMixin (Vue: Class<Component>) {\n     const vm: Component = this\n     const { render, _parentVnode } = vm.$options\n \n-    // reset _rendered flag on slots for duplicate slot check\n-    if (process.env.NODE_ENV !== 'production') {\n-      for (const key in vm.$slots) {\n-        // $flow-disable-line\n-        vm.$slots[key]._rendered = false\n-      }\n-    }\n-\n     if (_parentVnode) {\n       vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n     }"
            },
            {
                "commitId": "1129d184482720bb52fa61f0a309645b7caaddd9",
                "additions": 5,
                "deletions": 9,
                "patch": "@@ -86,15 +86,11 @@ export function renderMixin (Vue: Class<Component>) {\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n       /* istanbul ignore else */\n-      if (process.env.NODE_ENV !== 'production') {\n-        if (vm.$options.renderError) {\n-          try {\n-            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n-          } catch (e) {\n-            handleError(e, vm, `renderError`)\n-            vnode = vm._vnode\n-          }\n-        } else {\n+      if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n+        try {\n+          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+        } catch (e) {\n+          handleError(e, vm, `renderError`)\n           vnode = vm._vnode\n         }\n       } else {"
            },
            {
                "commitId": "702000971c5a355c937607edb930b67311c78f5d",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -191,7 +191,8 @@ function renderAsyncComponent (node, isRoot, context) {\n       tag\n     )\n     if (resolvedNode) {\n-      if (resolvedNode.componnetInstance) {\n+      if (resolvedNode.componentOptions) {\n+        // normal component\n         renderComponent(resolvedNode, isRoot, context)\n       } else if (!Array.isArray(resolvedNode)) {\n         // single return node from functional component"
            },
            {
                "commitId": "882e7199fd8eee039291c4b9f7f324dcf46f32fd",
                "additions": 19,
                "deletions": 3,
                "patch": "@@ -191,7 +191,21 @@ function renderAsyncComponent (node, isRoot, context) {\n       tag\n     )\n     if (resolvedNode) {\n-      renderComponent(resolvedNode, isRoot, context)\n+      if (resolvedNode.componnetInstance) {\n+        renderComponent(resolvedNode, isRoot, context)\n+      } else if (!Array.isArray(resolvedNode)) {\n+        // single return node from functional component\n+        renderNode(resolvedNode, isRoot, context)\n+      } else {\n+        // multiple return nodes from functional component\n+        context.renderStates.push({\n+          type: 'Fragment',\n+          children: resolvedNode,\n+          rendered: 0,\n+          total: resolvedNode.length\n+        })\n+        context.next()\n+      }\n     } else {\n       // invalid component, but this does not throw on the client\n       // so render empty comment node\n@@ -232,9 +246,10 @@ function renderStringNode (el, context) {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n       type: 'Element',\n+      children,\n       rendered: 0,\n       total: children.length,\n-      endTag: el.close, children\n+      endTag: el.close\n     })\n     write(el.open, next)\n   }\n@@ -263,9 +278,10 @@ function renderElement (el, isRoot, context) {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n       type: 'Element',\n+      children,\n       rendered: 0,\n       total: children.length,\n-      endTag, children\n+      endTag\n     })\n     write(startTag, next)\n   }"
            },
            {
                "commitId": "956756b1be7084daf8b6afb92ac0da7c24cde2a5",
                "additions": 8,
                "deletions": 11,
                "patch": "@@ -11,7 +11,7 @@ import {\n import { createElement } from '../vdom/create-element'\n import { installRenderHelpers } from './render-helpers/index'\n import { resolveSlots } from './render-helpers/resolve-slots'\n-import VNode, { cloneVNodes, createEmptyVNode } from '../vdom/vnode'\n+import VNode, { createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n \n@@ -62,20 +62,17 @@ export function renderMixin (Vue: Class<Component>) {\n     const vm: Component = this\n     const { render, _parentVnode } = vm.$options\n \n-    if (vm._isMounted) {\n-      // if the parent didn't update, the slot nodes will be the ones from\n-      // last render. They need to be cloned to ensure \"freshness\" for this render.\n+    // reset _rendered flag on slots for duplicate slot check\n+    if (process.env.NODE_ENV !== 'production') {\n       for (const key in vm.$slots) {\n-        const slot = vm.$slots[key]\n-        // _rendered is a flag added by renderSlot, but may not be present\n-        // if the slot is passed from manually written render functions\n-        if (slot._rendered || (slot[0] && slot[0].elm)) {\n-          vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n-        }\n+        // $flow-disable-line\n+        vm.$slots[key]._rendered = false\n       }\n     }\n \n-    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n+    if (_parentVnode) {\n+      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n+    }\n \n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node."
            },
            {
                "commitId": "8936b8d9c147441555fcfd4ac748d817ba5ff60e",
                "additions": 4,
                "deletions": 7,
                "patch": "@@ -193,21 +193,18 @@ function renderAsyncComponent (node, isRoot, context) {\n     if (resolvedNode) {\n       renderComponent(resolvedNode, isRoot, context)\n     } else {\n-      reject()\n+      // invalid component, but this does not throw on the client\n+      // so render empty comment node\n+      context.write(`<!---->`, context.next)\n     }\n   }\n \n-  const reject = err => {\n-    console.error(`[vue-server-renderer] error when rendering async component:\\n`)\n-    if (err) console.error(err.stack)\n-    context.write(`<!--${node.text}-->`, context.next)\n-  }\n-\n   if (factory.resolved) {\n     resolve(factory.resolved)\n     return\n   }\n \n+  const reject = context.done\n   let res\n   try {\n     res = factory(resolve, reject)"
            },
            {
                "commitId": "604e081d0456ed136b24b5f759c608d153dfae93",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -252,8 +252,8 @@ function renderElement (el, isRoot, context) {\n     el.data.attrs[SSR_ATTR] = 'true'\n   }\n \n-  if (el.functionalOptions) {\n-    registerComponentForCache(el.functionalOptions, write)\n+  if (el.fnOptions) {\n+    registerComponentForCache(el.fnOptions, write)\n   }\n \n   const startTag = renderStartingTag(el, context)"
            },
            {
                "commitId": "f5cd29e1d8197613c4dfb4013b240784c3b64e43",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -17,6 +17,7 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n+  vm._staticTrees = null // v-once cached trees\n   const options = vm.$options\n   const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context"
            },
            {
                "commitId": "13196b25b8a0a84b3936982177195d2e04f13f79",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -66,7 +66,9 @@ export function renderMixin (Vue: Class<Component>) {\n       // last render. They need to be cloned to ensure \"freshness\" for this render.\n       for (const key in vm.$slots) {\n         const slot = vm.$slots[key]\n-        if (slot._rendered) {\n+        // _rendered is a flag added by renderSlot, but may not be present\n+        // if the slot is passed from manually written render functions\n+        if (slot._rendered || (slot[0] && slot[0].elm)) {\n           vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n         }\n       }"
            },
            {
                "commitId": "12255ff220ac8cd0171aa0ed56ce630a6843b2bd",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -17,9 +17,10 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n-  const parentVnode = vm.$vnode = vm.$options._parentVnode // the placeholder node in parent tree\n+  const options = vm.$options\n+  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context\n-  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n+  vm.$slots = resolveSlots(options._renderChildren, renderContext)\n   vm.$scopedSlots = emptyObject\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -39,12 +40,12 @@ export function initRender (vm: Component) {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, () => {\n+    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true)\n+    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true)\n   }\n }\n "
            },
            {
                "commitId": "bb1d888d44ddc39f06de5232883c8e3766a47be0",
                "additions": 1,
                "deletions": 9,
                "patch": "@@ -17,7 +17,6 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n-  vm._staticTrees = null\n   const parentVnode = vm.$vnode = vm.$options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n@@ -59,11 +58,7 @@ export function renderMixin (Vue: Class<Component>) {\n \n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n-    const {\n-      render,\n-      staticRenderFns,\n-      _parentVnode\n-    } = vm.$options\n+    const { render, _parentVnode } = vm.$options\n \n     if (vm._isMounted) {\n       // if the parent didn't update, the slot nodes will be the ones from\n@@ -78,9 +73,6 @@ export function renderMixin (Vue: Class<Component>) {\n \n     vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n \n-    if (staticRenderFns && !vm._staticTrees) {\n-      vm._staticTrees = []\n-    }\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n     vm.$vnode = _parentVnode"
            },
            {
                "commitId": "050bb33f9b02589357c037623ea8cbf8ff13555b",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -342,11 +342,15 @@ function renderStartingTag (node: VNode, context) {\n   ) {\n     markup += ` ${(scopeId: any)}`\n   }\n-  while (isDef(node)) {\n-    if (isDef(scopeId = node.context.$options._scopeId)) {\n-      markup += ` ${scopeId}`\n+  if (isDef(node.fnScopeId)) {\n+    markup += ` ${node.fnScopeId}`\n+  } else {\n+    while (isDef(node)) {\n+      if (isDef(scopeId = node.context.$options._scopeId)) {\n+        markup += ` ${scopeId}`\n+      }\n+      node = node.parent\n     }\n-    node = node.parent\n   }\n   return markup + '>'\n }"
            },
            {
                "commitId": "ea0d227d2ddfa5fc5e1112acf9cd485b4eae62cb",
                "additions": 7,
                "deletions": 38,
                "patch": "@@ -3,33 +3,18 @@\n import {\n   warn,\n   nextTick,\n-  toNumber,\n-  toString,\n-  looseEqual,\n   emptyObject,\n   handleError,\n-  looseIndexOf,\n   defineReactive\n } from '../util/index'\n \n-import VNode, {\n-  cloneVNodes,\n-  createTextVNode,\n-  createEmptyVNode\n-} from '../vdom/vnode'\n+import { createElement } from '../vdom/create-element'\n+import { installRenderHelpers } from './render-helpers/index'\n+import { resolveSlots } from './render-helpers/resolve-slots'\n+import VNode, { cloneVNodes, createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n \n-import { createElement } from '../vdom/create-element'\n-import { renderList } from './render-helpers/render-list'\n-import { renderSlot } from './render-helpers/render-slot'\n-import { resolveFilter } from './render-helpers/resolve-filter'\n-import { checkKeyCodes } from './render-helpers/check-keycodes'\n-import { bindObjectProps } from './render-helpers/bind-object-props'\n-import { renderStatic, markOnce } from './render-helpers/render-static'\n-import { bindObjectListeners } from './render-helpers/bind-object-listeners'\n-import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n-\n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n@@ -65,6 +50,9 @@ export function initRender (vm: Component) {\n }\n \n export function renderMixin (Vue: Class<Component>) {\n+  // install runtime convenience helpers\n+  installRenderHelpers(Vue.prototype)\n+\n   Vue.prototype.$nextTick = function (fn: Function) {\n     return nextTick(fn, this)\n   }\n@@ -135,23 +123,4 @@ export function renderMixin (Vue: Class<Component>) {\n     vnode.parent = _parentVnode\n     return vnode\n   }\n-\n-  // internal render helpers.\n-  // these are exposed on the instance prototype to reduce generated render\n-  // code size.\n-  Vue.prototype._o = markOnce\n-  Vue.prototype._n = toNumber\n-  Vue.prototype._s = toString\n-  Vue.prototype._l = renderList\n-  Vue.prototype._t = renderSlot\n-  Vue.prototype._q = looseEqual\n-  Vue.prototype._i = looseIndexOf\n-  Vue.prototype._m = renderStatic\n-  Vue.prototype._f = resolveFilter\n-  Vue.prototype._k = checkKeyCodes\n-  Vue.prototype._b = bindObjectProps\n-  Vue.prototype._v = createTextVNode\n-  Vue.prototype._e = createEmptyVNode\n-  Vue.prototype._u = resolveScopedSlots\n-  Vue.prototype._g = bindObjectListeners\n }"
            },
            {
                "commitId": "dff85b230abda63839ed6b80d56ccfc6068b9ae0",
                "additions": 15,
                "deletions": 10,
                "patch": "@@ -1,18 +1,14 @@\n /* @flow */\n \n-import {\n-  isDef,\n-  isUndef,\n-  isTrue,\n-  extend\n-} from 'shared/util'\n-\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n+import { generateComponentTrace } from 'core/util/debug'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n \n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n import {\n   createComponent,\n   createComponentInstanceForVnode\n@@ -26,13 +22,22 @@ const warnOnce = msg => {\n   }\n }\n \n+const onCompilationError = (err, vm) => {\n+  const trace = vm ? generateComponentTrace(vm) : ''\n+  throw new Error(`\\n\\u001b[31m${err}${trace}\\u001b[39m\\n`)\n+}\n+\n const normalizeRender = vm => {\n   const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      extend(vm.$options, ssrCompileToFunctions(template, {\n-        scopeId: _scopeId\n-      }))\n+      const compiled = ssrCompileToFunctions(template, {\n+        scopeId: _scopeId,\n+        warn: onCompilationError\n+      }, vm)\n+\n+      vm.$options.render = compiled.render\n+      vm.$options.staticRenderFns = compiled.staticRenderFns\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${"
            },
            {
                "commitId": "b3cd9bc3940eb1e01da7081450929557d9c1651e",
                "additions": 11,
                "deletions": 4,
                "patch": "@@ -101,14 +101,21 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      handleError(e, vm, `render function`)\n+      handleError(e, vm, `render`)\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n       /* istanbul ignore else */\n       if (process.env.NODE_ENV !== 'production') {\n-        vnode = vm.$options.renderError\n-          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n-          : vm._vnode\n+        if (vm.$options.renderError) {\n+          try {\n+            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+          } catch (e) {\n+            handleError(e, vm, `renderError`)\n+            vnode = vm._vnode\n+          }\n+        } else {\n+          vnode = vm._vnode\n+        }\n       } else {\n         vnode = vm._vnode\n       }"
            },
            {
                "commitId": "e76e648bc8b6a9df64f0b44716f76a1e4b259ed6",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -3,7 +3,8 @@\n import {\n   isDef,\n   isUndef,\n-  isTrue\n+  isTrue,\n+  extend\n } from 'shared/util'\n \n import { escape } from 'web/server/util'\n@@ -29,7 +30,7 @@ const normalizeRender = vm => {\n   const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+      extend(vm.$options, ssrCompileToFunctions(template, {\n         scopeId: _scopeId\n       }))\n     } else {"
            },
            {
                "commitId": "0529040c17b8632032a43d142aac88386f6b4a1f",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -78,9 +78,13 @@ export function renderMixin (Vue: Class<Component>) {\n     } = vm.$options\n \n     if (vm._isMounted) {\n-      // clone slot nodes on re-renders\n+      // if the parent didn't update, the slot nodes will be the ones from\n+      // last render. They need to be cloned to ensure \"freshness\" for this render.\n       for (const key in vm.$slots) {\n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+        const slot = vm.$slots[key]\n+        if (slot._rendered) {\n+          vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n+        }\n       }\n     }\n "
            },
            {
                "commitId": "59dbd4a414394a3ce581f9fbd9554da9af9e4b1d",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -49,17 +49,18 @@ export function initRender (vm: Component) {\n   // $attrs & $listeners are exposed for easier HOC creation.\n   // they need to be reactive so that HOCs using them are always updated\n   const parentData = parentVnode && parentVnode.data\n+\n   /* istanbul ignore else */\n   if (process.env.NODE_ENV !== 'production') {\n-    defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners, () => {\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n-    defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners, null, true)\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true)\n   }\n }\n "
            },
            {
                "commitId": "17130611261fdbab70d0e5ab45036e4b612b17fe",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -54,12 +54,12 @@ export function initRender (vm: Component) {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', parentData && parentData.on, () => {\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n-    defineReactive(vm, '$listeners', parentData && parentData.on, null, true)\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners, null, true)\n   }\n }\n "
            },
            {
                "commitId": "e0ca894dfb465106094af440667c15f7eded0a25",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -49,6 +49,7 @@ export function initRender (vm: Component) {\n   // $attrs & $listeners are exposed for easier HOC creation.\n   // they need to be reactive so that HOCs using them are always updated\n   const parentData = parentVnode && parentVnode.data\n+  /* istanbul ignore else */\n   if (process.env.NODE_ENV !== 'production') {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)"
            },
            {
                "commitId": "61187596b9af48f1cb7b1848ad3eccc02ac2509d",
                "additions": 19,
                "deletions": 1,
                "patch": "@@ -8,7 +8,8 @@ import {\n   looseEqual,\n   emptyObject,\n   handleError,\n-  looseIndexOf\n+  looseIndexOf,\n+  defineReactive\n } from '../util/index'\n \n import VNode, {\n@@ -17,6 +18,8 @@ import VNode, {\n   createEmptyVNode\n } from '../vdom/vnode'\n \n+import { isUpdatingChildComponent } from './lifecycle'\n+\n import { createElement } from '../vdom/create-element'\n import { renderList } from './render-helpers/render-list'\n import { renderSlot } from './render-helpers/render-slot'\n@@ -42,6 +45,21 @@ export function initRender (vm: Component) {\n   // normalization is always applied for the public version, used in\n   // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n+\n+  // $attrs & $listeners are exposed for easier HOC creation.\n+  // they need to be reactive so that HOCs using them are always updated\n+  const parentData = parentVnode && parentVnode.data\n+  if (process.env.NODE_ENV !== 'production') {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n+      !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n+    }, true)\n+    defineReactive(vm, '$listeners', parentData && parentData.on, () => {\n+      !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n+    }, true)\n+  } else {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n+    defineReactive(vm, '$listeners', parentData && parentData.on, null, true)\n+  }\n }\n \n export function renderMixin (Vue: Class<Component>) {"
            },
            {
                "commitId": "11614d63b7862b68b11cc45c0891437c62a832d7",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -24,6 +24,7 @@ import { resolveFilter } from './render-helpers/resolve-filter'\n import { checkKeyCodes } from './render-helpers/check-keycodes'\n import { bindObjectProps } from './render-helpers/bind-object-props'\n import { renderStatic, markOnce } from './render-helpers/render-static'\n+import { bindObjectListeners } from './render-helpers/bind-object-listeners'\n import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n \n export function initRender (vm: Component) {\n@@ -121,4 +122,5 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._v = createTextVNode\n   Vue.prototype._e = createEmptyVNode\n   Vue.prototype._u = resolveScopedSlots\n+  Vue.prototype._g = bindObjectListeners\n }"
            },
            {
                "commitId": "0cd6ef321b3168d6c46c7a870c3d2a53fd9d4bde",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -172,6 +172,9 @@ function renderAsyncComponent (node, isRoot, context) {\n   const factory = node.asyncFactory\n \n   const resolve = comp => {\n+    if (comp.__esModule && comp.default) {\n+      comp = comp.default\n+    }\n     const { data, children, tag } = node.asyncMeta\n     const nodeContext = node.asyncMeta.context\n     const resolvedNode: any = createComponent("
            },
            {
                "commitId": "c994e5cf48a912d98c1a302375bb9964dba98113",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -343,7 +343,7 @@ function renderStartingTag (node: VNode, context) {\n }\n \n export function createRenderFunction (\n-  modules: Array<Function>,\n+  modules: Array<(node: VNode) => ?string>,\n   directives: Object,\n   isUnaryTag: Function,\n   cache: any"
            },
            {
                "commitId": "9cf6646f46ef3c13236677e58e72d2c6dd5c8abf",
                "additions": 72,
                "deletions": 14,
                "patch": "@@ -1,13 +1,21 @@\n /* @flow */\n \n+import {\n+  isDef,\n+  isUndef,\n+  isTrue\n+} from 'shared/util'\n+\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n-import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue } from 'shared/util'\n+import {\n+  createComponent,\n+  createComponentInstanceForVnode\n+} from 'core/vdom/create-component'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -39,20 +47,20 @@ function renderNode (node, isRoot, context) {\n     renderStringNode(node, context)\n   } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n-  } else {\n-    if (isDef(node.tag)) {\n-      renderElement(node, isRoot, context)\n-    } else if (isTrue(node.isComment)) {\n-      context.write(\n-        `<!--${node.text}-->`,\n-        context.next\n-      )\n+  } else if (isDef(node.tag)) {\n+    renderElement(node, isRoot, context)\n+  } else if (isTrue(node.isComment)) {\n+    if (isDef(node.asyncFactory)) {\n+      // async component\n+      renderAsyncComponent(node, isRoot, context)\n     } else {\n-      context.write(\n-        node.raw ? node.text : escape(String(node.text)),\n-        context.next\n-      )\n+      context.write(`<!--${node.text}-->`, context.next)\n     }\n+  } else {\n+    context.write(\n+      node.raw ? node.text : escape(String(node.text)),\n+      context.next\n+    )\n   }\n }\n \n@@ -160,6 +168,56 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderAsyncComponent (node, isRoot, context) {\n+  const factory = node.asyncFactory\n+\n+  const resolve = comp => {\n+    const { data, children, tag } = node.asyncMeta\n+    const nodeContext = node.asyncMeta.context\n+    const resolvedNode: any = createComponent(\n+      comp,\n+      data,\n+      nodeContext,\n+      children,\n+      tag\n+    )\n+    if (resolvedNode) {\n+      renderComponent(resolvedNode, isRoot, context)\n+    } else {\n+      reject()\n+    }\n+  }\n+\n+  const reject = err => {\n+    console.error(`[vue-server-renderer] error when rendering async component:\\n`)\n+    if (err) console.error(err.stack)\n+    context.write(`<!--${node.text}-->`, context.next)\n+  }\n+\n+  if (factory.resolved) {\n+    resolve(factory.resolved)\n+    return\n+  }\n+\n+  let res\n+  try {\n+    res = factory(resolve, reject)\n+  } catch (e) {\n+    reject(e)\n+  }\n+  if (res) {\n+    if (typeof res.then === 'function') {\n+      res.then(resolve, reject).catch(reject)\n+    } else {\n+      // new syntax in 2.3\n+      const comp = res.component\n+      if (comp && typeof comp.then === 'function') {\n+        comp.then(resolve, reject).catch(reject)\n+      }\n+    }\n+  }\n+}\n+\n function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {"
            },
            {
                "commitId": "43485fbc5b779e02122c3b7fc64296a2cfee31f6",
                "additions": 27,
                "deletions": 11,
                "patch": "@@ -1,10 +1,10 @@\n /* @flow */\n \n-const { escape } = require('he')\n-\n+import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n-import { compileToFunctions } from 'web/compiler/index'\n+import { ssrCompileToFunctions } from 'web/server/compiler'\n+import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n import { isDef, isUndef, isTrue } from 'shared/util'\n@@ -17,16 +17,13 @@ const warnOnce = msg => {\n   }\n }\n \n-const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n-  const { render, template } = vm.$options\n+  const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      const renderFns = (\n-        compilationCache[template] ||\n-        (compilationCache[template] = compileToFunctions(template))\n-      )\n-      Object.assign(vm.$options, renderFns)\n+      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+        scopeId: _scopeId\n+      }))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${\n@@ -38,7 +35,9 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (isDef(node.componentOptions)) {\n+  if (node.isString) {\n+    renderStringNode(node, context)\n+  } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n@@ -161,6 +160,22 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderStringNode (el, context) {\n+  const { write, next } = context\n+  if (isUndef(el.children) || el.children.length === 0) {\n+    write(el.open + (el.close || ''), next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag: el.close, children\n+    })\n+    write(el.open, next)\n+  }\n+}\n+\n function renderElement (el, isRoot, context) {\n   const { write, next } = context\n \n@@ -289,6 +304,7 @@ export function createRenderFunction (\n       isUnaryTag, modules, directives,\n       cache\n     })\n+    installSSRHelpers(component)\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "55d8bfd6fdda38f31b17cffa07e5ab743c9f2670",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -18,10 +18,12 @@ const warnOnce = msg => {\n }\n \n const normalizeRender = vm => {\n-  const { render, template } = vm.$options\n+  const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      Object.assign(vm.$options, ssrCompileToFunctions(template))\n+      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+        scopeId: _scopeId\n+      }))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${"
            },
            {
                "commitId": "c0b9b6d8300ded5a1ceb7f190ced92e4cd3f5870",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -1,7 +1,6 @@\n /* @flow */\n \n-const { escape } = require('he')\n-\n+import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'"
            },
            {
                "commitId": "9fbca0dc792e94eb775a8f08694a04963dc20e07",
                "additions": 2,
                "deletions": 8,
                "patch": "@@ -5,15 +5,11 @@ const { escape } = require('he')\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n+import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n import { isDef, isUndef, isTrue } from 'shared/util'\n \n-import {\n-  createStringNode,\n-  createStringList\n-} from './optimizing-compiler/runtime-helpers'\n-\n let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n@@ -23,9 +19,6 @@ const warnOnce = msg => {\n }\n \n const normalizeRender = vm => {\n-  vm._ssrEscape = escape\n-  vm._ssrNode = createStringNode\n-  vm._ssrList = createStringList\n   const { render, template } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n@@ -310,6 +303,7 @@ export function createRenderFunction (\n       isUnaryTag, modules, directives,\n       cache\n     })\n+    installSSRHelpers(component)\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "5b58526a525f67ed7a3dffcaf38a51ab2affd357",
                "additions": 13,
                "deletions": 48,
                "patch": "@@ -4,10 +4,15 @@ const { escape } = require('he')\n \n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n-import { compileToFunctions } from 'web/compiler/index'\n+import { ssrCompileToFunctions } from 'web/server/compiler'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue, isObject } from 'shared/util'\n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n+import {\n+  createStringNode,\n+  createStringList\n+} from './optimizing-compiler/runtime-helpers'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -17,16 +22,14 @@ const warnOnce = msg => {\n   }\n }\n \n-const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n+  vm._ssrEscape = escape\n+  vm._ssrNode = createStringNode\n+  vm._ssrList = createStringList\n   const { render, template } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      const renderFns = (\n-        compilationCache[template] ||\n-        (compilationCache[template] = compileToFunctions(template))\n-      )\n-      Object.assign(vm.$options, renderFns)\n+      Object.assign(vm.$options, ssrCompileToFunctions(template))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${\n@@ -145,39 +148,6 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   renderComponentInner(node, isRoot, context)\n }\n \n-function StringNode (open, close, children) {\n-  this.isString = true\n-  this.open = open\n-  this.close = close\n-  this.children = children\n-}\n-\n-function createStringNode (open, close, children) {\n-  return new StringNode(open, close, children)\n-}\n-\n-function createSSRList (val, render) {\n-  let ret = ''\n-  let i, l, keys, key\n-  if (Array.isArray(val) || typeof val === 'string') {\n-    for (i = 0, l = val.length; i < l; i++) {\n-      ret += render(val[i], i)\n-    }\n-  } else if (typeof val === 'number') {\n-    for (i = 0; i < val; i++) {\n-      ret += render(i + 1, i)\n-    }\n-  } else if (isObject(val)) {\n-    keys = Object.keys(val)\n-    ret = new Array(keys.length)\n-    for (i = 0, l = keys.length; i < l; i++) {\n-      key = keys[i]\n-      ret += render(val[key], key, i)\n-    }\n-  }\n-  return ret\n-}\n-\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -187,11 +157,6 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-\n-  child._ssrNode = createStringNode\n-  child._ssrEscape = escape\n-  child._ssrList = createSSRList\n-\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({\n@@ -204,7 +169,7 @@ function renderComponentInner (node, isRoot, context) {\n function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {\n-    write(el.open() + (el.close || ''), next)\n+    write(el.open + (el.close || ''), next)\n   } else {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n@@ -213,7 +178,7 @@ function renderStringNode (el, context) {\n       total: children.length,\n       endTag: el.close, children\n     })\n-    write(el.open(), next)\n+    write(el.open, next)\n   }\n }\n "
            },
            {
                "commitId": "8efa3a2b2245d534d042f109ad7fc9311f47fa27",
                "additions": 29,
                "deletions": 4,
                "patch": "@@ -7,7 +7,7 @@ import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue } from 'shared/util'\n+import { isDef, isUndef, isTrue, isObject } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -152,11 +152,32 @@ function StringNode (open, close, children) {\n   this.children = children\n }\n \n-function createStringNode (id, children) {\n-  const { open, close } = this.$options.stringRenderFns[id]\n+function createStringNode (open, close, children) {\n   return new StringNode(open, close, children)\n }\n \n+function createSSRList (val, render) {\n+  let ret = ''\n+  let i, l, keys, key\n+  if (Array.isArray(val) || typeof val === 'string') {\n+    for (i = 0, l = val.length; i < l; i++) {\n+      ret += render(val[i], i)\n+    }\n+  } else if (typeof val === 'number') {\n+    for (i = 0; i < val; i++) {\n+      ret += render(i + 1, i)\n+    }\n+  } else if (isObject(val)) {\n+    keys = Object.keys(val)\n+    ret = new Array(keys.length)\n+    for (i = 0, l = keys.length; i < l; i++) {\n+      key = keys[i]\n+      ret += render(val[key], key, i)\n+    }\n+  }\n+  return ret\n+}\n+\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -166,7 +187,11 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  child._ss = createStringNode\n+\n+  child._ssrNode = createStringNode\n+  child._ssrEscape = escape\n+  child._ssrList = createSSRList\n+\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({"
            },
            {
                "commitId": "85e24b3b31adc29ccd18b2159e84e4413f327fd9",
                "additions": 16,
                "deletions": 3,
                "patch": "@@ -38,8 +38,8 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (node.isTextNode) {\n-    renderTextNode(node, context)\n+  if (node.isString) {\n+    renderStringNode(node, context)\n   } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n@@ -145,6 +145,18 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   renderComponentInner(node, isRoot, context)\n }\n \n+function StringNode (open, close, children) {\n+  this.isString = true\n+  this.open = open\n+  this.close = close\n+  this.children = children\n+}\n+\n+function createStringNode (id, children) {\n+  const { open, close } = this.$options.stringRenderFns[id]\n+  return new StringNode(open, close, children)\n+}\n+\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -154,6 +166,7 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n+  child._ss = createStringNode\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({\n@@ -163,7 +176,7 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n-function renderTextNode (el, context) {\n+function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {\n     write(el.open() + (el.close || ''), next)"
            },
            {
                "commitId": "da1db7af31b397eab1608217d1f6dee26f753a59",
                "additions": 19,
                "deletions": 1,
                "patch": "@@ -38,7 +38,9 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (isDef(node.componentOptions)) {\n+  if (node.isTextNode) {\n+    renderTextNode(node, context)\n+  } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n@@ -161,6 +163,22 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderTextNode (el, context) {\n+  const { write, next } = context\n+  if (isUndef(el.children) || el.children.length === 0) {\n+    write(el.open() + (el.close || ''), next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag: el.close, children\n+    })\n+    write(el.open(), next)\n+  }\n+}\n+\n function renderElement (el, isRoot, context) {\n   const { write, next } = context\n "
            },
            {
                "commitId": "b5b1ac373a8f4d464454e7770a888fdd178891c4",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -255,8 +255,9 @@ function renderStartingTag (node: VNode, context) {\n   let scopeId\n   const activeInstance = context.activeInstance\n   if (isDef(activeInstance) &&\n-      activeInstance !== node.context &&\n-      isDef(scopeId = activeInstance.$options._scopeId)) {\n+    activeInstance !== node.context &&\n+    isDef(scopeId = activeInstance.$options._scopeId)\n+  ) {\n     markup += ` ${(scopeId: any)}`\n   }\n   while (isDef(node)) {"
            },
            {
                "commitId": "8dc4215994a8d4e4046b428b837863e96275de0e",
                "additions": 19,
                "deletions": 10,
                "patch": "@@ -57,22 +57,26 @@ function renderNode (node, isRoot, context) {\n   }\n }\n \n+function registerComponentForCache (options, write) {\n+  // exposed by vue-loader, need to call this if cache hit because\n+  // component lifecycle hooks will not be called.\n+  const register = options._ssrRegister\n+  if (write.caching && isDef(register)) {\n+    write.componentBuffer[write.componentBuffer.length - 1].add(register)\n+  }\n+  return register\n+}\n+\n function renderComponent (node, isRoot, context) {\n   const { write, next, userContext } = context\n \n   // check cache hit\n   const Ctor = node.componentOptions.Ctor\n   const getKey = Ctor.options.serverCacheKey\n   const name = Ctor.options.name\n-\n-  // exposed by vue-loader, need to call this if cache hit because\n-  // component lifecycle hooks will not be called.\n-  const registerComponent = Ctor.options._ssrRegister\n-  if (write.caching && isDef(registerComponent)) {\n-    write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n-  }\n-\n   const cache = context.cache\n+  const registerComponent = registerComponentForCache(Ctor.options, write)\n+\n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n     const key = name + '::' + getKey(node.componentOptions.propsData)\n     const { has, get } = context\n@@ -147,7 +151,6 @@ function renderComponentInner (node, isRoot, context) {\n     node,\n     context.activeInstance\n   )\n-  node.ssrContext = null\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node\n@@ -159,14 +162,20 @@ function renderComponentInner (node, isRoot, context) {\n }\n \n function renderElement (el, isRoot, context) {\n+  const { write, next } = context\n+\n   if (isTrue(isRoot)) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n     el.data.attrs[SSR_ATTR] = 'true'\n   }\n+\n+  if (el.functionalOptions) {\n+    registerComponentForCache(el.functionalOptions, write)\n+  }\n+\n   const startTag = renderStartingTag(el, context)\n   const endTag = `</${el.tag}>`\n-  const { write, next } = context\n   if (context.isUnaryTag(el.tag)) {\n     write(startTag, next)\n   } else if (isUndef(el.children) || el.children.length === 0) {"
            },
            {
                "commitId": "228f0f8f3b08312d926f99b3d57757fee40e4870",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -77,9 +77,9 @@ function renderComponent (node, isRoot, context) {\n     const key = name + '::' + getKey(node.componentOptions.propsData)\n     const { has, get } = context\n     if (isDef(has)) {\n-      (has: any)(key, hit => {\n+      has(key, hit => {\n         if (hit === true && isDef(get)) {\n-          (get: any)(key, res => {\n+          get(key, res => {\n             if (isDef(registerComponent)) {\n               registerComponent(userContext)\n             }\n@@ -91,7 +91,7 @@ function renderComponent (node, isRoot, context) {\n         }\n       })\n     } else if (isDef(get)) {\n-      (get: any)(key, res => {\n+      get(key, res => {\n         if (isDef(res)) {\n           if (isDef(registerComponent)) {\n             registerComponent(userContext)"
            },
            {
                "commitId": "9ca0c35a3fadd1f97c9b5c68b7b51d4f96b40a72",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -141,10 +141,13 @@ function renderComponentWithCache (node, isRoot, key, context) {\n \n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n+  // expose userContext on vnode\n+  node.ssrContext = context.userContext\n   const child = context.activeInstance = createComponentInstanceForVnode(\n     node,\n     context.activeInstance\n   )\n+  node.ssrContext = null\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node"
            },
            {
                "commitId": "914879f1ce61a67fb7b9f367e6caaaf002c18fe3",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n-import { escape } from 'he'\n+const { escape } = require('he')\n+\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'"
            },
            {
                "commitId": "3b04547c0c4fc56d786f5d03446c81b2d7501297",
                "additions": 89,
                "deletions": 74,
                "patch": "@@ -37,89 +37,88 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  const { write, next, userContext } = context\n   if (isDef(node.componentOptions)) {\n-    // check cache hit\n-    const Ctor = node.componentOptions.Ctor\n-    const getKey = Ctor.options.serverCacheKey\n-    const name = Ctor.options.name\n-\n-    // exposed by vue-loader, need to call this if cache hit because\n-    // component lifecycle hooks will not be called.\n-    const registerComponent = Ctor.options._ssrRegister\n-    if (write.caching && isDef(registerComponent)) {\n-      write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n-    }\n-\n-    const cache = context.cache\n-    if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-      const key = name + '::' + getKey(node.componentOptions.propsData)\n-      const { has, get } = context\n-      if (isDef(has)) {\n-        (has: any)(key, hit => {\n-          if (hit === true && isDef(get)) {\n-            (get: any)(key, res => {\n-              registerComponent && registerComponent(userContext)\n-              res.components.forEach(register => register(userContext))\n-              write(res.html, next)\n-            })\n-          } else {\n-            renderComponentWithCache(node, isRoot, key, context)\n-          }\n-        })\n-      } else if (isDef(get)) {\n-        (get: any)(key, res => {\n-          if (isDef(res)) {\n-            registerComponent && registerComponent(userContext)\n-            res.components.forEach(register => register(userContext))\n-            write(res.html, next)\n-          } else {\n-            renderComponentWithCache(node, isRoot, key, context)\n-          }\n-        })\n-      }\n-    } else {\n-      if (isDef(getKey) && isUndef(cache)) {\n-        warnOnce(\n-          `[vue-server-renderer] Component ${\n-            Ctor.options.name || '(anonymous)'\n-          } implemented serverCacheKey, ` +\n-          'but no cache was provided to the renderer.'\n-        )\n-      }\n-      if (isDef(getKey) && isUndef(name)) {\n-        warnOnce(\n-          `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n-          `must also define a unique \"name\" option.`\n-        )\n-      }\n-      renderComponent(node, isRoot, context)\n-    }\n+    renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n       renderElement(node, isRoot, context)\n     } else if (isTrue(node.isComment)) {\n-      write(`<!--${node.text}-->`, next)\n+      context.write(\n+        `<!--${node.text}-->`,\n+        context.next\n+      )\n     } else {\n-      write(node.raw ? node.text : escape(String(node.text)), next)\n+      context.write(\n+        node.raw ? node.text : escape(String(node.text)),\n+        context.next\n+      )\n     }\n   }\n }\n \n function renderComponent (node, isRoot, context) {\n-  const prevActive = context.activeInstance\n-  const child = context.activeInstance = createComponentInstanceForVnode(\n-    node,\n-    context.activeInstance\n-  )\n-  normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+  const { write, next, userContext } = context\n+\n+  // check cache hit\n+  const Ctor = node.componentOptions.Ctor\n+  const getKey = Ctor.options.serverCacheKey\n+  const name = Ctor.options.name\n+\n+  // exposed by vue-loader, need to call this if cache hit because\n+  // component lifecycle hooks will not be called.\n+  const registerComponent = Ctor.options._ssrRegister\n+  if (write.caching && isDef(registerComponent)) {\n+    write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n+  }\n+\n+  const cache = context.cache\n+  if (isDef(getKey) && isDef(cache) && isDef(name)) {\n+    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const { has, get } = context\n+    if (isDef(has)) {\n+      (has: any)(key, hit => {\n+        if (hit === true && isDef(get)) {\n+          (get: any)(key, res => {\n+            if (isDef(registerComponent)) {\n+              registerComponent(userContext)\n+            }\n+            res.components.forEach(register => register(userContext))\n+            write(res.html, next)\n+          })\n+        } else {\n+          renderComponentWithCache(node, isRoot, key, context)\n+        }\n+      })\n+    } else if (isDef(get)) {\n+      (get: any)(key, res => {\n+        if (isDef(res)) {\n+          if (isDef(registerComponent)) {\n+            registerComponent(userContext)\n+          }\n+          res.components.forEach(register => register(userContext))\n+          write(res.html, next)\n+        } else {\n+          renderComponentWithCache(node, isRoot, key, context)\n+        }\n+      })\n+    }\n+  } else {\n+    if (isDef(getKey) && isUndef(cache)) {\n+      warnOnce(\n+        `[vue-server-renderer] Component ${\n+          Ctor.options.name || '(anonymous)'\n+        } implemented serverCacheKey, ` +\n+        'but no cache was provided to the renderer.'\n+      )\n+    }\n+    if (isDef(getKey) && isUndef(name)) {\n+      warnOnce(\n+        `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+        `must also define a unique \"name\" option.`\n+      )\n+    }\n+    renderComponentInner(node, isRoot, context)\n+  }\n }\n \n function renderComponentWithCache (node, isRoot, key, context) {\n@@ -136,7 +135,23 @@ function renderComponentWithCache (node, isRoot, key, context) {\n     bufferIndex,\n     componentBuffer\n   })\n-  renderComponent(node, isRoot, context)\n+  renderComponentInner(node, isRoot, context)\n+}\n+\n+function renderComponentInner (node, isRoot, context) {\n+  const prevActive = context.activeInstance\n+  const child = context.activeInstance = createComponentInstanceForVnode(\n+    node,\n+    context.activeInstance\n+  )\n+  normalizeRender(child)\n+  const childNode = child._render()\n+  childNode.parent = node\n+  context.renderStates.push({\n+    type: 'Component',\n+    prevActive\n+  })\n+  renderNode(childNode, isRoot, context)\n }\n \n function renderElement (el, isRoot, context) {\n@@ -166,7 +181,7 @@ function renderElement (el, isRoot, context) {\n \n function hasAncestorData (node: VNode) {\n   const parentNode = node.parent\n-  return parentNode && (parentNode.data || hasAncestorData(parentNode))\n+  return isDef(parentNode) && (isDef(parentNode.data) || hasAncestorData(parentNode))\n }\n \n function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {"
            },
            {
                "commitId": "4e40666d53b13c292472dfd0c678c707ad39afd9",
                "additions": 25,
                "deletions": 8,
                "patch": "@@ -37,15 +37,20 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  const { write, next } = context\n+  const { write, next, userContext } = context\n   if (isDef(node.componentOptions)) {\n     // check cache hit\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+\n     // exposed by vue-loader, need to call this if cache hit because\n     // component lifecycle hooks will not be called.\n-    const injectStyles = Ctor.options._injectStyles\n+    const registerComponent = Ctor.options._ssrRegister\n+    if (write.caching && isDef(registerComponent)) {\n+      write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n+    }\n+\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n@@ -54,8 +59,9 @@ function renderNode (node, isRoot, context) {\n         (has: any)(key, hit => {\n           if (hit === true && isDef(get)) {\n             (get: any)(key, res => {\n-              injectStyles && injectStyles.call({})\n-              write(res, next)\n+              registerComponent && registerComponent(userContext)\n+              res.components.forEach(register => register(userContext))\n+              write(res.html, next)\n             })\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n@@ -64,8 +70,9 @@ function renderNode (node, isRoot, context) {\n       } else if (isDef(get)) {\n         (get: any)(key, res => {\n           if (isDef(res)) {\n-            injectStyles && injectStyles.call({})\n-            write(res, next)\n+            registerComponent && registerComponent(userContext)\n+            res.components.forEach(register => register(userContext))\n+            write(res.html, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n@@ -101,7 +108,10 @@ function renderNode (node, isRoot, context) {\n \n function renderComponent (node, isRoot, context) {\n   const prevActive = context.activeInstance\n-  const child = context.activeInstance = createComponentInstanceForVnode(node, context.activeInstance)\n+  const child = context.activeInstance = createComponentInstanceForVnode(\n+    node,\n+    context.activeInstance\n+  )\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node\n@@ -117,9 +127,14 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   write.caching = true\n   const buffer = write.cacheBuffer\n   const bufferIndex = buffer.push('') - 1\n+  const componentBuffer = write.componentBuffer\n+  componentBuffer.push(new Set())\n   context.renderStates.push({\n     type: 'ComponentWithCache',\n-    buffer, bufferIndex, key\n+    key,\n+    buffer,\n+    bufferIndex,\n+    componentBuffer\n   })\n   renderComponent(node, isRoot, context)\n }\n@@ -234,11 +249,13 @@ export function createRenderFunction (\n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n+    userContext: ?Object,\n     done: Function\n   ) {\n     warned = Object.create(null)\n     const context = new RenderContext({\n       activeInstance: component,\n+      userContext,\n       write, done, renderNode,\n       isUnaryTag, modules, directives,\n       cache"
            },
            {
                "commitId": "37fb98827141d95dc1f60c9ea0519d6c49e61fbc",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -43,6 +43,8 @@ function renderNode (node, isRoot, context) {\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+    // exposed by vue-loader, need to call this if cache hit because\n+    // component lifecycle hooks will not be called.\n     const injectStyles = Ctor.options._injectStyles\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {"
            },
            {
                "commitId": "5ec2a7b82cf1819b5e465c4c91f303ca75561e71",
                "additions": 6,
                "deletions": 1,
                "patch": "@@ -43,21 +43,26 @@ function renderNode (node, isRoot, context) {\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+    const injectStyles = Ctor.options._injectStyles\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n       const { has, get } = context\n       if (isDef(has)) {\n         (has: any)(key, hit => {\n           if (hit === true && isDef(get)) {\n-            (get: any)(key, res => write(res, next))\n+            (get: any)(key, res => {\n+              injectStyles && injectStyles.call({})\n+              write(res, next)\n+            })\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n       } else if (isDef(get)) {\n         (get: any)(key, res => {\n           if (isDef(res)) {\n+            injectStyles && injectStyles.call({})\n             write(res, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)"
            },
            {
                "commitId": "5213ec7bbf13928a389e566e99222fa1e77d2161",
                "additions": 26,
                "deletions": 24,
                "patch": "@@ -6,6 +6,8 @@ import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n@@ -17,7 +19,7 @@ const warnOnce = msg => {\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n-  if (!render) {\n+  if (isUndef(render)) {\n     if (template) {\n       const renderFns = (\n         compilationCache[template] ||\n@@ -36,42 +38,42 @@ const normalizeRender = vm => {\n \n function renderNode (node, isRoot, context) {\n   const { write, next } = context\n-  if (node.componentOptions) {\n+  if (isDef(node.componentOptions)) {\n     // check cache hit\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n     const cache = context.cache\n-    if (getKey && cache && name) {\n+    if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n       const { has, get } = context\n-      if (has) {\n-        has(key, hit => {\n-          if (hit && get) {\n-            get(key, res => write(res, next))\n+      if (isDef(has)) {\n+        (has: any)(key, hit => {\n+          if (hit === true && isDef(get)) {\n+            (get: any)(key, res => write(res, next))\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n-      } else if (get) {\n-        get(key, res => {\n-          if (res) {\n+      } else if (isDef(get)) {\n+        (get: any)(key, res => {\n+          if (isDef(res)) {\n             write(res, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n       }\n     } else {\n-      if (getKey && !cache) {\n+      if (isDef(getKey) && isUndef(cache)) {\n         warnOnce(\n           `[vue-server-renderer] Component ${\n             Ctor.options.name || '(anonymous)'\n           } implemented serverCacheKey, ` +\n           'but no cache was provided to the renderer.'\n         )\n       }\n-      if (getKey && !name) {\n+      if (isDef(getKey) && isUndef(name)) {\n         warnOnce(\n           `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n           `must also define a unique \"name\" option.`\n@@ -80,9 +82,9 @@ function renderNode (node, isRoot, context) {\n       renderComponent(node, isRoot, context)\n     }\n   } else {\n-    if (node.tag) {\n+    if (isDef(node.tag)) {\n       renderElement(node, isRoot, context)\n-    } else if (node.isComment) {\n+    } else if (isTrue(node.isComment)) {\n       write(`<!--${node.text}-->`, next)\n     } else {\n       write(node.raw ? node.text : escape(String(node.text)), next)\n@@ -116,7 +118,7 @@ function renderComponentWithCache (node, isRoot, key, context) {\n }\n \n function renderElement (el, isRoot, context) {\n-  if (isRoot) {\n+  if (isTrue(isRoot)) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n     el.data.attrs[SSR_ATTR] = 'true'\n@@ -126,7 +128,7 @@ function renderElement (el, isRoot, context) {\n   const { write, next } = context\n   if (context.isUnaryTag(el.tag)) {\n     write(startTag, next)\n-  } else if (!el.children || !el.children.length) {\n+  } else if (isUndef(el.children) || el.children.length === 0) {\n     write(startTag + endTag, next)\n   } else {\n     const children: Array<VNode> = el.children\n@@ -149,7 +151,7 @@ function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {\n   let dir: VNodeDirective\n   let tmp\n \n-  while (node) {\n+  while (isDef(node)) {\n     if (node.data && node.data.directives) {\n       tmp = node.data.directives.find(dir => dir.name === 'show')\n       if (tmp) {\n@@ -167,10 +169,10 @@ function renderStartingTag (node: VNode, context) {\n \n   // construct synthetic data for module processing\n   // because modules like style also produce code by parent VNode data\n-  if (!node.data && hasAncestorData(node)) {\n+  if (isUndef(node.data) && hasAncestorData(node)) {\n     node.data = {}\n   }\n-  if (node.data) {\n+  if (isDef(node.data)) {\n     // check directives\n     const dirs = node.data.directives\n     if (dirs) {\n@@ -202,13 +204,13 @@ function renderStartingTag (node: VNode, context) {\n   // attach scoped CSS ID\n   let scopeId\n   const activeInstance = context.activeInstance\n-  if (activeInstance &&\n+  if (isDef(activeInstance) &&\n       activeInstance !== node.context &&\n-      (scopeId = activeInstance.$options._scopeId)) {\n-    markup += ` ${scopeId}`\n+      isDef(scopeId = activeInstance.$options._scopeId)) {\n+    markup += ` ${(scopeId: any)}`\n   }\n-  while (node) {\n-    if ((scopeId = node.context.$options._scopeId)) {\n+  while (isDef(node)) {\n+    if (isDef(scopeId = node.context.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n     node = node.parent"
            },
            {
                "commitId": "69e62f0a74b6a6baab1d66dd0433cdfb410bdae7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import { escape } from 'he'\n-import { SSR_ATTR } from 'shared/util'\n+import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'"
            },
            {
                "commitId": "e0a7c1ac68fbfa5b0d7714db549569d5cefa2bd9",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n import { escape } from 'he'\n+import { SSR_ATTR } from 'shared/util'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n@@ -118,7 +119,7 @@ function renderElement (el, isRoot, context) {\n   if (isRoot) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n-    el.data.attrs['server-rendered'] = 'true'\n+    el.data.attrs[SSR_ATTR] = 'true'\n   }\n   const startTag = renderStartingTag(el, context)\n   const endTag = `</${el.tag}>`"
            },
            {
                "commitId": "e733e5cee8585fdf4a0c0e5e77e7816befa24ad4",
                "additions": 26,
                "deletions": 2,
                "patch": "@@ -144,6 +144,22 @@ function hasAncestorData (node: VNode) {\n   return parentNode && (parentNode.data || hasAncestorData(parentNode))\n }\n \n+function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {\n+  let dir: VNodeDirective\n+  let tmp\n+\n+  while (node) {\n+    if (node.data && node.data.directives) {\n+      tmp = node.data.directives.find(dir => dir.name === 'show')\n+      if (tmp) {\n+        dir = tmp\n+      }\n+    }\n+    node = node.parent\n+  }\n+  return dir\n+}\n+\n function renderStartingTag (node: VNode, context) {\n   let markup = `<${node.tag}`\n   const { directives, modules } = context\n@@ -158,14 +174,22 @@ function renderStartingTag (node: VNode, context) {\n     const dirs = node.data.directives\n     if (dirs) {\n       for (let i = 0; i < dirs.length; i++) {\n-        const dirRenderer = directives[dirs[i].name]\n-        if (dirRenderer) {\n+        const name = dirs[i].name\n+        const dirRenderer = directives[name]\n+        if (dirRenderer && name !== 'show') {\n           // directives mutate the node's data\n           // which then gets rendered by modules\n           dirRenderer(node, dirs[i])\n         }\n       }\n     }\n+\n+    // v-show directive needs to be merged from parent to child\n+    const vshowDirectiveInfo = getVShowDirectiveInfo(node)\n+    if (vshowDirectiveInfo) {\n+      directives.show(node, vshowDirectiveInfo)\n+    }\n+\n     // apply other modules\n     for (let i = 0; i < modules.length; i++) {\n       const res = modules[i](node)"
            },
            {
                "commitId": "29f6902d1959c35eb38ef110bee6c13124903442",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -80,6 +80,7 @@ export function renderMixin (Vue: Class<Component>) {\n       handleError(e, vm, `render function`)\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n+      /* istanbul ignore else */\n       if (process.env.NODE_ENV !== 'production') {\n         vnode = vm.$options.renderError\n           ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)"
            },
            {
                "commitId": "1861ee9570730149e01f225323c3a52392e5900f",
                "additions": 9,
                "deletions": 2,
                "patch": "@@ -78,8 +78,15 @@ export function renderMixin (Vue: Class<Component>) {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n       handleError(e, vm, `render function`)\n-      // return previous vnode to prevent render error causing blank component\n-      vnode = vm._vnode\n+      // return error render result,\n+      // or previous vnode to prevent render error causing blank component\n+      if (process.env.NODE_ENV !== 'production') {\n+        vnode = vm.$options.renderError\n+          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+          : vm._vnode\n+      } else {\n+        vnode = vm._vnode\n+      }\n     }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {"
            },
            {
                "commitId": "3c0cdb553590db84a3bdb2a299947e7424e23464",
                "additions": 3,
                "deletions": 13,
                "patch": "@@ -1,16 +1,14 @@\n /* @flow */\n \n-import config from '../config'\n-\n import {\n   warn,\n   nextTick,\n   toNumber,\n   _toString,\n   looseEqual,\n   emptyObject,\n-  looseIndexOf,\n-  formatComponentName\n+  handleError,\n+  looseIndexOf\n } from '../util/index'\n \n import VNode, {\n@@ -79,15 +77,7 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      /* istanbul ignore else */\n-      if (config.errorHandler) {\n-        config.errorHandler.call(null, e, vm)\n-      } else {\n-        if (process.env.NODE_ENV !== 'production') {\n-          warn(`Error when rendering ${formatComponentName(vm)}:`)\n-        }\n-        throw e\n-      }\n+      handleError(e, vm, `render function`)\n       // return previous vnode to prevent render error causing blank component\n       vnode = vm._vnode\n     }"
            },
            {
                "commitId": "e7083d09f1eec1d8853b65720f1a8c6e0f22836e",
                "additions": 5,
                "deletions": 5,
                "patch": "@@ -8,6 +8,7 @@ import {\n   toNumber,\n   _toString,\n   looseEqual,\n+  emptyObject,\n   looseIndexOf,\n   formatComponentName\n } from '../util/index'\n@@ -21,11 +22,11 @@ import VNode, {\n import { createElement } from '../vdom/create-element'\n import { renderList } from './render-helpers/render-list'\n import { renderSlot } from './render-helpers/render-slot'\n-import { resolveSlots } from './render-helpers/resolve-slots'\n import { resolveFilter } from './render-helpers/resolve-filter'\n import { checkKeyCodes } from './render-helpers/check-keycodes'\n import { bindObjectProps } from './render-helpers/bind-object-props'\n import { renderStatic, markOnce } from './render-helpers/render-static'\n+import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n \n export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n@@ -34,7 +35,7 @@ export function initRender (vm: Component) {\n   const parentVnode = vm.$options._parentVnode\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n-  vm.$scopedSlots = {}\n+  vm.$scopedSlots = emptyObject\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n   // args order: tag, data, children, normalizationType, alwaysNormalize\n@@ -65,9 +66,7 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n-    if (_parentVnode && _parentVnode.data.scopedSlots) {\n-      vm.$scopedSlots = _parentVnode.data.scopedSlots\n-    }\n+    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n \n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n@@ -124,4 +123,5 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._b = bindObjectProps\n   Vue.prototype._v = createTextVNode\n   Vue.prototype._e = createEmptyVNode\n+  Vue.prototype._u = resolveScopedSlots\n }"
            },
            {
                "commitId": "b1e66b489144ec31ad3d4f3298e3809f00d6c4e6",
                "additions": 27,
                "deletions": 211,
                "patch": "@@ -1,28 +1,31 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, {\n-  cloneVNode,\n-  cloneVNodes,\n-  createTextVNode,\n-  createEmptyVNode\n-} from '../vdom/vnode'\n+\n import {\n   warn,\n-  extend,\n-  identity,\n-  isObject,\n-  toObject,\n   nextTick,\n   toNumber,\n   _toString,\n   looseEqual,\n   looseIndexOf,\n-  resolveAsset,\n   formatComponentName\n } from '../util/index'\n \n+import VNode, {\n+  cloneVNodes,\n+  createTextVNode,\n+  createEmptyVNode\n+} from '../vdom/vnode'\n+\n import { createElement } from '../vdom/create-element'\n+import { renderList } from './render-helpers/render-list'\n+import { renderSlot } from './render-helpers/render-slot'\n+import { resolveSlots } from './render-helpers/resolve-slots'\n+import { resolveFilter } from './render-helpers/resolve-filter'\n+import { checkKeyCodes } from './render-helpers/check-keycodes'\n+import { bindObjectProps } from './render-helpers/bind-object-props'\n+import { renderStatic, markOnce } from './render-helpers/render-static'\n \n export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n@@ -105,207 +108,20 @@ export function renderMixin (Vue: Class<Component>) {\n     return vnode\n   }\n \n-  // toString for mustaches\n-  Vue.prototype._s = _toString\n-  // convert text to vnode\n-  Vue.prototype._v = createTextVNode\n-  // number conversion\n+  // internal render helpers.\n+  // these are exposed on the instance prototype to reduce generated render\n+  // code size.\n+  Vue.prototype._o = markOnce\n   Vue.prototype._n = toNumber\n-  // empty vnode\n-  Vue.prototype._e = createEmptyVNode\n-  // loose equal\n+  Vue.prototype._s = _toString\n+  Vue.prototype._l = renderList\n+  Vue.prototype._t = renderSlot\n   Vue.prototype._q = looseEqual\n-  // loose indexOf\n   Vue.prototype._i = looseIndexOf\n-\n-  // render static tree by index\n-  Vue.prototype._m = function renderStatic (\n-    index: number,\n-    isInFor?: boolean\n-  ): VNode | Array<VNode> {\n-    let tree = this._staticTrees[index]\n-    // if has already-rendered static tree and not inside v-for,\n-    // we can reuse the same tree by doing a shallow clone.\n-    if (tree && !isInFor) {\n-      return Array.isArray(tree)\n-        ? cloneVNodes(tree)\n-        : cloneVNode(tree)\n-    }\n-    // otherwise, render a fresh tree.\n-    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n-    markStatic(tree, `__static__${index}`, false)\n-    return tree\n-  }\n-\n-  // mark node as static (v-once)\n-  Vue.prototype._o = function markOnce (\n-    tree: VNode | Array<VNode>,\n-    index: number,\n-    key: string\n-  ) {\n-    markStatic(tree, `__once__${index}${key ? `_${key}` : ``}`, true)\n-    return tree\n-  }\n-\n-  function markStatic (tree, key, isOnce) {\n-    if (Array.isArray(tree)) {\n-      for (let i = 0; i < tree.length; i++) {\n-        if (tree[i] && typeof tree[i] !== 'string') {\n-          markStaticNode(tree[i], `${key}_${i}`, isOnce)\n-        }\n-      }\n-    } else {\n-      markStaticNode(tree, key, isOnce)\n-    }\n-  }\n-\n-  function markStaticNode (node, key, isOnce) {\n-    node.isStatic = true\n-    node.key = key\n-    node.isOnce = isOnce\n-  }\n-\n-  // filter resolution helper\n-  Vue.prototype._f = function resolveFilter (id) {\n-    return resolveAsset(this.$options, 'filters', id, true) || identity\n-  }\n-\n-  // render v-for\n-  Vue.prototype._l = function renderList (\n-    val: any,\n-    render: () => VNode\n-  ): ?Array<VNode> {\n-    let ret: ?Array<VNode>, i, l, keys, key\n-    if (Array.isArray(val) || typeof val === 'string') {\n-      ret = new Array(val.length)\n-      for (i = 0, l = val.length; i < l; i++) {\n-        ret[i] = render(val[i], i)\n-      }\n-    } else if (typeof val === 'number') {\n-      ret = new Array(val)\n-      for (i = 0; i < val; i++) {\n-        ret[i] = render(i + 1, i)\n-      }\n-    } else if (isObject(val)) {\n-      keys = Object.keys(val)\n-      ret = new Array(keys.length)\n-      for (i = 0, l = keys.length; i < l; i++) {\n-        key = keys[i]\n-        ret[i] = render(val[key], key, i)\n-      }\n-    }\n-    return ret\n-  }\n-\n-  // renderSlot\n-  Vue.prototype._t = function (\n-    name: string,\n-    fallback: ?Array<VNode>,\n-    props: ?Object,\n-    bindObject: ?Object\n-  ): ?Array<VNode> {\n-    const scopedSlotFn = this.$scopedSlots[name]\n-    if (scopedSlotFn) { // scoped slot\n-      props = props || {}\n-      if (bindObject) {\n-        extend(props, bindObject)\n-      }\n-      return scopedSlotFn(props) || fallback\n-    } else {\n-      const slotNodes = this.$slots[name]\n-      // warn duplicate slot usage\n-      if (slotNodes && process.env.NODE_ENV !== 'production') {\n-        slotNodes._rendered && warn(\n-          `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n-          `- this will likely cause render errors.`,\n-          this\n-        )\n-        slotNodes._rendered = true\n-      }\n-      return slotNodes || fallback\n-    }\n-  }\n-\n-  // apply v-bind object\n-  Vue.prototype._b = function bindProps (\n-    data: any,\n-    tag: string,\n-    value: any,\n-    asProp?: boolean\n-  ): VNodeData {\n-    if (value) {\n-      if (!isObject(value)) {\n-        process.env.NODE_ENV !== 'production' && warn(\n-          'v-bind without argument expects an Object or Array value',\n-          this\n-        )\n-      } else {\n-        if (Array.isArray(value)) {\n-          value = toObject(value)\n-        }\n-        for (const key in value) {\n-          if (key === 'class' || key === 'style') {\n-            data[key] = value[key]\n-          } else {\n-            const type = data.attrs && data.attrs.type\n-            const hash = asProp || config.mustUseProp(tag, type, key)\n-              ? data.domProps || (data.domProps = {})\n-              : data.attrs || (data.attrs = {})\n-            hash[key] = value[key]\n-          }\n-        }\n-      }\n-    }\n-    return data\n-  }\n-\n-  // check v-on keyCodes\n-  Vue.prototype._k = function checkKeyCodes (\n-    eventKeyCode: number,\n-    key: string,\n-    builtInAlias: number | Array<number> | void\n-  ): boolean {\n-    const keyCodes = config.keyCodes[key] || builtInAlias\n-    if (Array.isArray(keyCodes)) {\n-      return keyCodes.indexOf(eventKeyCode) === -1\n-    } else {\n-      return keyCodes !== eventKeyCode\n-    }\n-  }\n-}\n-\n-export function resolveSlots (\n-  children: ?Array<VNode>,\n-  context: ?Component\n-): { [key: string]: Array<VNode> } {\n-  const slots = {}\n-  if (!children) {\n-    return slots\n-  }\n-  const defaultSlot = []\n-  let name, child\n-  for (let i = 0, l = children.length; i < l; i++) {\n-    child = children[i]\n-    // named slots should only be respected if the vnode was rendered in the\n-    // same context.\n-    if ((child.context === context || child.functionalContext === context) &&\n-        child.data && (name = child.data.slot)) {\n-      const slot = (slots[name] || (slots[name] = []))\n-      if (child.tag === 'template') {\n-        slot.push.apply(slot, child.children)\n-      } else {\n-        slot.push(child)\n-      }\n-    } else {\n-      defaultSlot.push(child)\n-    }\n-  }\n-  // ignore single whitespace\n-  if (defaultSlot.length && !(\n-    defaultSlot.length === 1 &&\n-    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n-  )) {\n-    slots.default = defaultSlot\n-  }\n-  return slots\n+  Vue.prototype._m = renderStatic\n+  Vue.prototype._f = resolveFilter\n+  Vue.prototype._k = checkKeyCodes\n+  Vue.prototype._b = bindObjectProps\n+  Vue.prototype._v = createTextVNode\n+  Vue.prototype._e = createEmptyVNode\n }"
            },
            {
                "commitId": "05b070fd41b61a953388a34ff3374f301a9f7540",
                "additions": 5,
                "deletions": 68,
                "patch": "@@ -1,9 +1,9 @@\n /* @flow */\n \n import { escape } from 'he'\n+import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n-import { noop } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -13,17 +13,6 @@ const warnOnce = msg => {\n   }\n }\n \n-const normalizeAsync = (cache, method) => {\n-  const fn = cache[method]\n-  if (!fn) {\n-    return\n-  } else if (fn.length > 1) {\n-    return (key, cb) => fn.call(cache, key, cb)\n-  } else {\n-    return (key, cb) => cb(fn.call(cache, key))\n-  }\n-}\n-\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n@@ -202,76 +191,24 @@ function renderStartingTag (node: VNode, context) {\n   return markup + '>'\n }\n \n-const nextFactory = context => function next () {\n-  const lastState = context.renderStates.pop()\n-  if (!lastState) {\n-    context.done()\n-    // cleanup context, avoid leakage\n-    context = (null: any)\n-    return\n-  }\n-  switch (lastState.type) {\n-    case 'Component':\n-      context.activeInstance = lastState.prevActive\n-      next()\n-      break\n-    case 'Element':\n-      const { children, total } = lastState\n-      const rendered = lastState.rendered++\n-      if (rendered < total) {\n-        context.renderStates.push(lastState)\n-        renderNode(children[rendered], false, context)\n-      } else {\n-        context.write(lastState.endTag, next)\n-      }\n-      break\n-    case 'ComponentWithCache':\n-      const { buffer, bufferIndex, key } = lastState\n-      const result = buffer[bufferIndex]\n-      context.cache.set(key, result)\n-      if (bufferIndex === 0) {\n-        // this is a top-level cached component,\n-        // exit caching mode.\n-        context.write.caching = false\n-      } else {\n-        // parent component is also being cached,\n-        // merge self into parent's result\n-        buffer[bufferIndex - 1] += result\n-      }\n-      buffer.length = bufferIndex\n-      next()\n-      break\n-  }\n-}\n-\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n   isUnaryTag: Function,\n   cache: any\n ) {\n-  if (cache && (!cache.get || !cache.set)) {\n-    throw new Error('renderer cache must implement at least get & set.')\n-  }\n-\n-  const get = cache && normalizeAsync(cache, 'get')\n-  const has = cache && normalizeAsync(cache, 'has')\n-\n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n     warned = Object.create(null)\n-    const context = {\n+    const context = new RenderContext({\n       activeInstance: component,\n-      renderStates: [],\n-      next: noop, // for flow\n-      write, done,\n+      write, done, renderNode,\n       isUnaryTag, modules, directives,\n-      cache, get, has\n-    }\n-    context.next = nextFactory(context)\n+      cache\n+    })\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "08bd81f8c0bd39816b5b509c5132a12188b412d7",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -247,7 +247,8 @@ export function renderMixin (Vue: Class<Component>) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n           } else {\n-            const hash = asProp || config.mustUseProp(tag, key)\n+            const type = data.attrs && data.attrs.type\n+            const hash = asProp || config.mustUseProp(tag, type, key)\n               ? data.domProps || (data.domProps = {})\n               : data.attrs || (data.attrs = {})\n             hash[key] = value[key]"
            },
            {
                "commitId": "7131bc48155fb5224f4d6f0fb1c4b7eed6a79db4",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -40,9 +40,6 @@ export function initRender (vm: Component) {\n   // normalization is always applied for the public version, used in\n   // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n-  if (vm.$options.el) {\n-    vm.$mount(vm.$options.el)\n-  }\n }\n \n export function renderMixin (Vue: Class<Component>) {"
            },
            {
                "commitId": "b60182d996ed1e976ce1697a3017cb702ddc0920",
                "additions": 0,
                "deletions": 21,
                "patch": "@@ -262,7 +262,6 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n-    checkBuild(component)\n     warned = Object.create(null)\n     const context = {\n       activeInstance: component,\n@@ -277,23 +276,3 @@ export function createRenderFunction (\n     renderNode(component._render(), true, context)\n   }\n }\n-\n-function checkBuild (component) {\n-  let Vue: any = component.constructor\n-  while (Vue.super) {\n-    Vue = Vue.super\n-  }\n-  if (Vue.compile && Vue.config.devtools !== false) {\n-    console.error(\n-      red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n-      `server-side rendering. It is recommended to use the CommonJS build ` +\n-      `(vue/dist/vue.common.js) instead so that the code can run in ` +\n-      `production mode by setting NODE_ENV=production. The server renderer ` +\n-      `supports the template option regardless of what build you are using.\\n`)\n-    )\n-  }\n-}\n-\n-function red (str) {\n-  return '\\u001B[1m\\u001B[31m' + str + '\\u001B[39m\\u001B[22m'\n-}"
            },
            {
                "commitId": "0eb8cdc7f7cff484ebe0b12a781a4ab020f82b4a",
                "additions": 8,
                "deletions": 2,
                "patch": "@@ -9,6 +9,7 @@ import VNode, {\n } from '../vdom/vnode'\n import {\n   warn,\n+  extend,\n   identity,\n   isObject,\n   toObject,\n@@ -203,11 +204,16 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._t = function (\n     name: string,\n     fallback: ?Array<VNode>,\n-    props: ?Object\n+    props: ?Object,\n+    bindObject: ?Object\n   ): ?Array<VNode> {\n     const scopedSlotFn = this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n-      return scopedSlotFn(props || {}) || fallback\n+      props = props || {}\n+      if (bindObject) {\n+        extend(props, bindObject)\n+      }\n+      return scopedSlotFn(props) || fallback\n     } else {\n       const slotNodes = this.$slots[name]\n       // warn duplicate slot usage"
            },
            {
                "commitId": "974247fd8e6b57840c9b7686964ddb38bc6affc8",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -178,7 +178,7 @@ export function renderMixin (Vue: Class<Component>) {\n     render: () => VNode\n   ): ?Array<VNode> {\n     let ret: ?Array<VNode>, i, l, keys, key\n-    if (Array.isArray(val)) {\n+    if (Array.isArray(val) || typeof val === 'string') {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n         ret[i] = render(val[i], i)"
            },
            {
                "commitId": "f1c38674f28116e1e335873ecbc6716fb70448a3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -33,7 +33,7 @@ export function initRender (vm: Component) {\n   vm.$scopedSlots = {}\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  // args order: tag, data, children, needNormalization, alwaysNormalize\n+  // args order: tag, data, children, normalizationType, alwaysNormalize\n   // internal version is used by render functions compiled from templates\n   vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n   // normalization is always applied for the public version, used in"
            },
            {
                "commitId": "5fa45c3bf80100469039d3b9c160ddfdaf90f8ec",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -279,11 +279,11 @@ export function createRenderFunction (\n }\n \n function checkBuild (component) {\n-  let Vue = component.constructor\n+  let Vue: any = component.constructor\n   while (Vue.super) {\n     Vue = Vue.super\n   }\n-  if (Vue.compile) {\n+  if (Vue.compile && Vue.config.devtools !== false) {\n     console.error(\n       red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n       `server-side rendering. It is recommended to use the CommonJS build ` +"
            },
            {
                "commitId": "8567e7dcedfdf0d8fb21e2c2f7ee935229b6a9e9",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -9,6 +9,7 @@ import VNode, {\n } from '../vdom/vnode'\n import {\n   warn,\n+  identity,\n   isObject,\n   toObject,\n   nextTick,\n@@ -167,7 +168,6 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // filter resolution helper\n-  const identity = _ => _\n   Vue.prototype._f = function resolveFilter (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }"
            },
            {
                "commitId": "4b51ad048306367a6fb6fbee7445e086d855f31e",
                "additions": 5,
                "deletions": 3,
                "patch": "@@ -32,9 +32,11 @@ export function initRender (vm: Component) {\n   vm.$scopedSlots = {}\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  // args order: tag, data, children, needNormalization\n-  // the needNormalization flag is disabled for the public version.\n-  vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  // args order: tag, data, children, needNormalization, alwaysNormalize\n+  // internal version is used by render functions compiled from templates\n+  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  // normalization is always applied for the public version, used in\n+  // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)"
            },
            {
                "commitId": "207c18c47f8c94f6d92675b28bc67511b7897246",
                "additions": 3,
                "deletions": 5,
                "patch": "@@ -1,7 +1,6 @@\n /* @flow */\n \n import config from '../config'\n-import { normalizeChildren } from '../vdom/helpers/index'\n import VNode, {\n   cloneVNode,\n   cloneVNodes,\n@@ -34,7 +33,7 @@ export function initRender (vm: Component) {\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n   // args order: tag, data, children, needNormalization\n-  // the needNormalization flag is flipped and defaults to true for the public version.\n+  // the needNormalization flag is disabled for the public version.\n   vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n@@ -270,14 +269,13 @@ export function renderMixin (Vue: Class<Component>) {\n }\n \n export function resolveSlots (\n-  renderChildren: ?VNodeChildren,\n+  children: ?Array<VNode>,\n   context: ?Component\n ): { [key: string]: Array<VNode> } {\n   const slots = {}\n-  if (!renderChildren) {\n+  if (!children) {\n     return slots\n   }\n-  const children = normalizeChildren(renderChildren) || []\n   const defaultSlot = []\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {"
            },
            {
                "commitId": "79e1058799dcde0b7e341ef44b590ecbf1e3a722",
                "additions": 23,
                "deletions": 7,
                "patch": "@@ -1,11 +1,24 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { createEmptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n+import VNode, {\n+  cloneVNode,\n+  cloneVNodes,\n+  createTextVNode,\n+  createEmptyVNode\n+} from '../vdom/vnode'\n import {\n-  warn, formatComponentName, bind, isObject, toObject,\n-  nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n+  warn,\n+  isObject,\n+  toObject,\n+  nextTick,\n+  toNumber,\n+  _toString,\n+  looseEqual,\n+  looseIndexOf,\n+  resolveAsset,\n+  formatComponentName\n } from '../util/index'\n \n import { createElement } from '../vdom/create-element'\n@@ -18,9 +31,12 @@ export function initRender (vm: Component) {\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n   vm.$scopedSlots = {}\n-  // bind the public createElement fn to this instance\n+  // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(createElement, vm)\n+  // args order: tag, data, children, needNormalization\n+  // the needNormalization flag is flipped and defaults to true for the public version.\n+  vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -89,10 +105,10 @@ export function renderMixin (Vue: Class<Component>) {\n     return vnode\n   }\n \n-  // shorthands used in render functions\n-  Vue.prototype._h = createElement\n   // toString for mustaches\n   Vue.prototype._s = _toString\n+  // convert text to vnode\n+  Vue.prototype._v = createTextVNode\n   // number conversion\n   Vue.prototype._n = toNumber\n   // empty vnode"
            },
            {
                "commitId": "7431e4d16c92862ac74fdb3053de9295c809b586",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n+import VNode, { createEmptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n@@ -82,7 +82,7 @@ export function renderMixin (Vue: Class<Component>) {\n           vm\n         )\n       }\n-      vnode = emptyVNode()\n+      vnode = createEmptyVNode()\n     }\n     // set parent\n     vnode.parent = _parentVnode\n@@ -96,7 +96,7 @@ export function renderMixin (Vue: Class<Component>) {\n   // number conversion\n   Vue.prototype._n = toNumber\n   // empty vnode\n-  Vue.prototype._e = emptyVNode\n+  Vue.prototype._e = createEmptyVNode\n   // loose equal\n   Vue.prototype._q = looseEqual\n   // loose indexOf"
            },
            {
                "commitId": "e8d6bd9dc73cacbc665ce132d81a7b629bef764b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -242,9 +242,9 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._k = function checkKeyCodes (\n     eventKeyCode: number,\n     key: string,\n-    buildinAlias: number | Array<number> | void\n+    builtInAlias: number | Array<number> | void\n   ): boolean {\n-    const keyCodes = config.keyCodes[key] || buildinAlias\n+    const keyCodes = config.keyCodes[key] || builtInAlias\n     if (Array.isArray(keyCodes)) {\n       return keyCodes.indexOf(eventKeyCode) === -1\n     } else {"
            },
            {
                "commitId": "6ea9a4db4221b7264ee8ebad9cef4f076762d697",
                "additions": 12,
                "deletions": 3,
                "patch": "@@ -238,9 +238,18 @@ export function renderMixin (Vue: Class<Component>) {\n     return data\n   }\n \n-  // expose v-on keyCodes\n-  Vue.prototype._k = function getKeyCodes (key: string): any {\n-    return config.keyCodes[key]\n+  // check v-on keyCodes\n+  Vue.prototype._k = function checkKeyCodes (\n+    eventKeyCode: number,\n+    key: string,\n+    buildinAlias: number | Array<number> | void\n+  ): boolean {\n+    const keyCodes = config.keyCodes[key] || buildinAlias\n+    if (Array.isArray(keyCodes)) {\n+      return keyCodes.indexOf(eventKeyCode) === -1\n+    } else {\n+      return keyCodes !== eventKeyCode\n+    }\n   }\n }\n "
            },
            {
                "commitId": "c7147e3b60cb8b4147f0132f63b70a527a47b2b6",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -257,7 +257,6 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    debugger\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n     if ((child.context === context || child.functionalContext === context) &&"
            },
            {
                "commitId": "326aef4a6ab84d044d9ed807c5dc4326249aa856",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -14,8 +14,9 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n-  vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n+  const parentVnode = vm.$options._parentVnode\n+  const renderContext = parentVnode && parentVnode.context\n+  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n   vm.$scopedSlots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -256,6 +257,7 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n+    debugger\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n     if ((child.context === context || child.functionalContext === context) &&"
            },
            {
                "commitId": "16e3dae2455aa0f2955d95698c7dddb5b4c9440d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n import {\n-  warn, formatComponentName, bind, isObject, toObject, isServerRendering,\n+  warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n } from '../util/index'\n "
            },
            {
                "commitId": "a52a094befb0b1f660771db04deebaa37555e84e",
                "additions": 3,
                "deletions": 7,
                "patch": "@@ -60,18 +60,14 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      if (process.env.NODE_ENV !== 'production') {\n-        warn(`Error when rendering ${formatComponentName(vm)}:`)\n-      }\n       /* istanbul ignore else */\n       if (config.errorHandler) {\n         config.errorHandler.call(null, e, vm)\n       } else {\n-        if (isServerRendering()) {\n-          throw e\n-        } else {\n-          console.error(e)\n+        if (process.env.NODE_ENV !== 'production') {\n+          warn(`Error when rendering ${formatComponentName(vm)}:`)\n         }\n+        throw e\n       }\n       // return previous vnode to prevent render error causing blank component\n       vnode = vm._vnode"
            },
            {
                "commitId": "aa5f5d1198db2c9480a317b1db48c470c850949d",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -16,7 +16,7 @@ export function initRender (vm: Component) {\n   vm._staticTrees = null\n   vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n-  vm.$scopedSlots = null\n+  vm.$scopedSlots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -45,7 +45,7 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n-    if (_parentVnode) {\n+    if (_parentVnode && _parentVnode.data.scopedSlots) {\n       vm.$scopedSlots = _parentVnode.data.scopedSlots\n     }\n \n@@ -191,7 +191,7 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n+    const scopedSlotFn = this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n       return scopedSlotFn(props || {}) || fallback\n     } else {"
            },
            {
                "commitId": "303378f85b26934396e2f6dc0973f6982da2beb1",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -191,9 +191,6 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    if (process.env.NODE_ENV !== 'production' && name === 'default' && props) {\n-      warn(`Scoped slots must be named`, this)\n-    }\n     const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n       return scopedSlotFn(props || {}) || fallback"
            },
            {
                "commitId": "7f36f99f6c9bf6130f298fb79538f09fce7ef2fc",
                "additions": 7,
                "deletions": 6,
                "patch": "@@ -191,12 +191,13 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    if (props) { // scoped slot\n-      const scopedSlotFn = this.$scopedSlots[name]\n-      return scopedSlotFn\n-        ? scopedSlotFn(props) || fallback\n-        : fallback\n-    } else { // static slot\n+    if (process.env.NODE_ENV !== 'production' && name === 'default' && props) {\n+      warn(`Scoped slots must be named`, this)\n+    }\n+    const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n+    if (scopedSlotFn) { // scoped slot\n+      return scopedSlotFn(props || {}) || fallback\n+    } else {\n       const slotNodes = this.$slots[name]\n       // warn duplicate slot usage\n       if (slotNodes && process.env.NODE_ENV !== 'production') {"
            },
            {
                "commitId": "9ddbbcc340aa092699aca349492ffd50e18f1ba4",
                "additions": 24,
                "deletions": 11,
                "patch": "@@ -16,6 +16,7 @@ export function initRender (vm: Component) {\n   vm._staticTrees = null\n   vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n+  vm.$scopedSlots = null\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -44,6 +45,10 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n+    if (_parentVnode) {\n+      vm.$scopedSlots = _parentVnode.data.scopedSlots\n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -183,19 +188,27 @@ export function renderMixin (Vue: Class<Component>) {\n   // renderSlot\n   Vue.prototype._t = function (\n     name: string,\n-    fallback: ?Array<VNode>\n+    fallback: ?Array<VNode>,\n+    props: ?Object\n   ): ?Array<VNode> {\n-    const slotNodes = this.$slots[name]\n-    // warn duplicate slot usage\n-    if (slotNodes && process.env.NODE_ENV !== 'production') {\n-      slotNodes._rendered && warn(\n-        `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n-        `- this will likely cause render errors.`,\n-        this\n-      )\n-      slotNodes._rendered = true\n+    if (props) { // scoped slot\n+      const scopedSlotFn = this.$scopedSlots[name]\n+      return scopedSlotFn\n+        ? scopedSlotFn(props) || fallback\n+        : fallback\n+    } else { // static slot\n+      const slotNodes = this.$slots[name]\n+      // warn duplicate slot usage\n+      if (slotNodes && process.env.NODE_ENV !== 'production') {\n+        slotNodes._rendered && warn(\n+          `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n+          `- this will likely cause render errors.`,\n+          this\n+        )\n+        slotNodes._rendered = true\n+      }\n+      return slotNodes || fallback\n     }\n-    return slotNodes || fallback\n   }\n \n   // apply v-bind object"
            },
            {
                "commitId": "2dc2d062b1af826add087d832a3f68806e2ef2b1",
                "additions": 21,
                "deletions": 0,
                "patch": "@@ -262,6 +262,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    checkBuild(component)\n     warned = Object.create(null)\n     const context = {\n       activeInstance: component,\n@@ -276,3 +277,23 @@ export function createRenderFunction (\n     renderNode(component._render(), true, context)\n   }\n }\n+\n+function checkBuild (component) {\n+  let Vue = component.constructor\n+  while (Vue.super) {\n+    Vue = Vue.super\n+  }\n+  if (Vue.compile) {\n+    console.error(\n+      red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n+      `server-side rendering. It is recommended to use the CommonJS build ` +\n+      `(vue/dist/vue.common.js) instead so that the code can run in ` +\n+      `production mode by setting NODE_ENV=production. The server renderer ` +\n+      `supports the template option regardless of what build you are using.\\n`)\n+    )\n+  }\n+}\n+\n+function red (str) {\n+  return '\\u001B[1m\\u001B[31m' + str + '\\u001B[39m\\u001B[22m'\n+}"
            },
            {
                "commitId": "8bf26536d3b4b5d139070e1730fed7f9df59c9db",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -26,7 +26,7 @@ export function initRender (vm: Component) {\n \n export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype.$nextTick = function (fn: Function) {\n-    nextTick(fn, this)\n+    return nextTick(fn, this)\n   }\n \n   Vue.prototype._render = function (): VNode {"
            },
            {
                "commitId": "9a742cb423690acb29990bd38f5c17f7b21f12f8",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -201,6 +201,7 @@ export function renderMixin (Vue: Class<Component>) {\n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n     data: any,\n+    tag: string,\n     value: any,\n     asProp?: boolean\n   ): VNodeData {\n@@ -218,7 +219,7 @@ export function renderMixin (Vue: Class<Component>) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n           } else {\n-            const hash = asProp || config.mustUseProp(key)\n+            const hash = asProp || config.mustUseProp(tag, key)\n               ? data.domProps || (data.domProps = {})\n               : data.attrs || (data.attrs = {})\n             hash[key] = value[key]"
            },
            {
                "commitId": "6e3e989a90e8685c2cf0c029fa9c657354762b04",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -65,7 +65,7 @@ export function renderMixin (Vue: Class<Component>) {\n         if (config._isServer) {\n           throw e\n         } else {\n-          setTimeout(() => { throw e }, 0)\n+          console.error(e)\n         }\n       }\n       // return previous vnode to prevent render error causing blank component"
            },
            {
                "commitId": "240df147f11824db5811d23c8704225aa586b96b",
                "additions": 11,
                "deletions": 0,
                "patch": "@@ -150,9 +150,20 @@ function renderElement (el, isRoot, context) {\n   }\n }\n \n+function hasAncestorData (node: VNode) {\n+  const parentNode = node.parent\n+  return parentNode && (parentNode.data || hasAncestorData(parentNode))\n+}\n+\n function renderStartingTag (node: VNode, context) {\n   let markup = `<${node.tag}`\n   const { directives, modules } = context\n+\n+  // construct synthetic data for module processing\n+  // because modules like style also produce code by parent VNode data\n+  if (!node.data && hasAncestorData(node)) {\n+    node.data = {}\n+  }\n   if (node.data) {\n     // check directives\n     const dirs = node.data.directives"
            },
            {
                "commitId": "ec824be88e9bc71b31e5c4a43f80d921674dca66",
                "additions": 24,
                "deletions": 6,
                "patch": "@@ -115,18 +115,36 @@ export function renderMixin (Vue: Class<Component>) {\n     }\n     // otherwise, render a fresh tree.\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n+    markStatic(tree, `__static__${index}`, false)\n+    return tree\n+  }\n+\n+  // mark node as static (v-once)\n+  Vue.prototype._o = function markOnce (\n+    tree: VNode | Array<VNode>,\n+    index: number,\n+    key: string\n+  ) {\n+    markStatic(tree, `__once__${index}${key ? `_${key}` : ``}`, true)\n+    return tree\n+  }\n+\n+  function markStatic (tree, key, isOnce) {\n     if (Array.isArray(tree)) {\n       for (let i = 0; i < tree.length; i++) {\n-        if (typeof tree[i] !== 'string') {\n-          tree[i].isStatic = true\n-          tree[i].key = `__static__${index}_${i}`\n+        if (tree[i] && typeof tree[i] !== 'string') {\n+          markStaticNode(tree[i], `${key}_${i}`, isOnce)\n         }\n       }\n     } else {\n-      tree.isStatic = true\n-      tree.key = `__static__${index}`\n+      markStaticNode(tree, key, isOnce)\n     }\n-    return tree\n+  }\n+\n+  function markStaticNode (node, key, isOnce) {\n+    node.isStatic = true\n+    node.key = key\n+    node.isOnce = isOnce\n   }\n \n   // filter resolution helper"
            },
            {
                "commitId": "2ac581bb7f34b1ef0f35c3e6945acd630a92453e",
                "additions": 186,
                "deletions": 155,
                "patch": "@@ -3,6 +3,7 @@\n import { escape } from 'he'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n+import { noop } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -43,194 +44,224 @@ const normalizeRender = vm => {\n   }\n }\n \n-export function createRenderFunction (\n-  modules: Array<Function>,\n-  directives: Object,\n-  isUnaryTag: Function,\n-  cache: any\n-) {\n-  if (cache && (!cache.get || !cache.set)) {\n-    throw new Error('renderer cache must implement at least get & set.')\n+function renderNode (node, isRoot, context) {\n+  const { write, next } = context\n+  if (node.componentOptions) {\n+    // check cache hit\n+    const Ctor = node.componentOptions.Ctor\n+    const getKey = Ctor.options.serverCacheKey\n+    const name = Ctor.options.name\n+    const cache = context.cache\n+    if (getKey && cache && name) {\n+      const key = name + '::' + getKey(node.componentOptions.propsData)\n+      const { has, get } = context\n+      if (has) {\n+        has(key, hit => {\n+          if (hit && get) {\n+            get(key, res => write(res, next))\n+          } else {\n+            renderComponentWithCache(node, isRoot, key, context)\n+          }\n+        })\n+      } else if (get) {\n+        get(key, res => {\n+          if (res) {\n+            write(res, next)\n+          } else {\n+            renderComponentWithCache(node, isRoot, key, context)\n+          }\n+        })\n+      }\n+    } else {\n+      if (getKey && !cache) {\n+        warnOnce(\n+          `[vue-server-renderer] Component ${\n+            Ctor.options.name || '(anonymous)'\n+          } implemented serverCacheKey, ` +\n+          'but no cache was provided to the renderer.'\n+        )\n+      }\n+      if (getKey && !name) {\n+        warnOnce(\n+          `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+          `must also define a unique \"name\" option.`\n+        )\n+      }\n+      renderComponent(node, isRoot, context)\n+    }\n+  } else {\n+    if (node.tag) {\n+      renderElement(node, isRoot, context)\n+    } else if (node.isComment) {\n+      write(`<!--${node.text}-->`, next)\n+    } else {\n+      write(node.raw ? node.text : escape(String(node.text)), next)\n+    }\n   }\n+}\n \n-  const get = cache && normalizeAsync(cache, 'get')\n-  const has = cache && normalizeAsync(cache, 'has')\n+function renderComponent (node, isRoot, context) {\n+  const prevActive = context.activeInstance\n+  const child = context.activeInstance = createComponentInstanceForVnode(node, context.activeInstance)\n+  normalizeRender(child)\n+  const childNode = child._render()\n+  childNode.parent = node\n+  context.renderStates.push({\n+    type: 'Component',\n+    prevActive\n+  })\n+  renderNode(childNode, isRoot, context)\n+}\n \n-  // used to track and apply scope ids\n-  let activeInstance: any\n+function renderComponentWithCache (node, isRoot, key, context) {\n+  const write = context.write\n+  write.caching = true\n+  const buffer = write.cacheBuffer\n+  const bufferIndex = buffer.push('') - 1\n+  context.renderStates.push({\n+    type: 'ComponentWithCache',\n+    buffer, bufferIndex, key\n+  })\n+  renderComponent(node, isRoot, context)\n+}\n \n-  function renderNode (\n-    node: VNode,\n-    write: Function,\n-    next: Function,\n-    isRoot: boolean\n-  ) {\n-    if (node.componentOptions) {\n-      // check cache hit\n-      const Ctor = node.componentOptions.Ctor\n-      const getKey = Ctor.options.serverCacheKey\n-      const name = Ctor.options.name\n-      if (getKey && cache && name) {\n-        const key = name + '::' + getKey(node.componentOptions.propsData)\n-        if (has) {\n-          has(key, hit => {\n-            if (hit && get) {\n-              get(key, res => write(res, next))\n-            } else {\n-              renderComponentWithCache(node, write, next, isRoot, cache, key)\n-            }\n-          })\n-        } else if (get) {\n-          get(key, res => {\n-            if (res) {\n-              write(res, next)\n-            } else {\n-              renderComponentWithCache(node, write, next, isRoot, cache, key)\n-            }\n-          })\n-        }\n-      } else {\n-        if (getKey && !cache) {\n-          warnOnce(\n-            `[vue-server-renderer] Component ${\n-              Ctor.options.name || '(anonymous)'\n-            } implemented serverCacheKey, ` +\n-            'but no cache was provided to the renderer.'\n-          )\n-        }\n-        if (getKey && !name) {\n-          warnOnce(\n-            `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n-            `must also define a unique \"name\" option.`\n-          )\n+function renderElement (el, isRoot, context) {\n+  if (isRoot) {\n+    if (!el.data) el.data = {}\n+    if (!el.data.attrs) el.data.attrs = {}\n+    el.data.attrs['server-rendered'] = 'true'\n+  }\n+  const startTag = renderStartingTag(el, context)\n+  const endTag = `</${el.tag}>`\n+  const { write, next } = context\n+  if (context.isUnaryTag(el.tag)) {\n+    write(startTag, next)\n+  } else if (!el.children || !el.children.length) {\n+    write(startTag + endTag, next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag, children\n+    })\n+    write(startTag, next)\n+  }\n+}\n+\n+function renderStartingTag (node: VNode, context) {\n+  let markup = `<${node.tag}`\n+  const { directives, modules } = context\n+  if (node.data) {\n+    // check directives\n+    const dirs = node.data.directives\n+    if (dirs) {\n+      for (let i = 0; i < dirs.length; i++) {\n+        const dirRenderer = directives[dirs[i].name]\n+        if (dirRenderer) {\n+          // directives mutate the node's data\n+          // which then gets rendered by modules\n+          dirRenderer(node, dirs[i])\n         }\n-        renderComponent(node, write, next, isRoot)\n       }\n-    } else {\n-      if (node.tag) {\n-        renderElement(node, write, next, isRoot)\n-      } else if (node.isComment) {\n-        write(`<!--${node.text}-->`, next)\n-      } else {\n-        write(node.raw ? node.text : escape(String(node.text)), next)\n+    }\n+    // apply other modules\n+    for (let i = 0; i < modules.length; i++) {\n+      const res = modules[i](node)\n+      if (res) {\n+        markup += res\n       }\n     }\n   }\n-\n-  function renderComponent (node, write, next, isRoot) {\n-    const prevActive = activeInstance\n-    const child = activeInstance = createComponentInstanceForVnode(node, activeInstance)\n-    normalizeRender(child)\n-    const childNode = child._render()\n-    childNode.parent = node\n-    renderNode(childNode, write, () => {\n-      activeInstance = prevActive\n-      next()\n-    }, isRoot)\n+  // attach scoped CSS ID\n+  let scopeId\n+  const activeInstance = context.activeInstance\n+  if (activeInstance &&\n+      activeInstance !== node.context &&\n+      (scopeId = activeInstance.$options._scopeId)) {\n+    markup += ` ${scopeId}`\n   }\n+  while (node) {\n+    if ((scopeId = node.context.$options._scopeId)) {\n+      markup += ` ${scopeId}`\n+    }\n+    node = node.parent\n+  }\n+  return markup + '>'\n+}\n \n-  function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n-    write.caching = true\n-    const buffer = write.cacheBuffer\n-    const bufferIndex = buffer.push('') - 1\n-    renderComponent(node, write, () => {\n+const nextFactory = context => function next () {\n+  const lastState = context.renderStates.pop()\n+  if (!lastState) {\n+    context.done()\n+    // cleanup context, avoid leakage\n+    context = (null: any)\n+    return\n+  }\n+  switch (lastState.type) {\n+    case 'Component':\n+      context.activeInstance = lastState.prevActive\n+      next()\n+      break\n+    case 'Element':\n+      const { children, total } = lastState\n+      const rendered = lastState.rendered++\n+      if (rendered < total) {\n+        context.renderStates.push(lastState)\n+        renderNode(children[rendered], false, context)\n+      } else {\n+        context.write(lastState.endTag, next)\n+      }\n+      break\n+    case 'ComponentWithCache':\n+      const { buffer, bufferIndex, key } = lastState\n       const result = buffer[bufferIndex]\n-      cache.set(key, result)\n+      context.cache.set(key, result)\n       if (bufferIndex === 0) {\n         // this is a top-level cached component,\n         // exit caching mode.\n-        write.caching = false\n+        context.write.caching = false\n       } else {\n         // parent component is also being cached,\n         // merge self into parent's result\n         buffer[bufferIndex - 1] += result\n       }\n       buffer.length = bufferIndex\n       next()\n-    }, isRoot)\n+      break\n   }\n+}\n \n-  function renderElement (el, write, next, isRoot) {\n-    if (isRoot) {\n-      if (!el.data) el.data = {}\n-      if (!el.data.attrs) el.data.attrs = {}\n-      el.data.attrs['server-rendered'] = 'true'\n-    }\n-    const startTag = renderStartingTag(el)\n-    const endTag = `</${el.tag}>`\n-    if (isUnaryTag(el.tag)) {\n-      write(startTag, next)\n-    } else if (!el.children || !el.children.length) {\n-      write(startTag + endTag, next)\n-    } else {\n-      const children: Array<VNode> = el.children || []\n-      write(startTag, () => {\n-        const total = children.length\n-        let rendered = 0\n-\n-        function renderChild (child: VNode) {\n-          renderNode(child, write, () => {\n-            rendered++\n-            if (rendered < total) {\n-              renderChild(children[rendered])\n-            } else {\n-              write(endTag, next)\n-            }\n-          }, false)\n-        }\n-\n-        renderChild(children[0])\n-      })\n-    }\n+export function createRenderFunction (\n+  modules: Array<Function>,\n+  directives: Object,\n+  isUnaryTag: Function,\n+  cache: any\n+) {\n+  if (cache && (!cache.get || !cache.set)) {\n+    throw new Error('renderer cache must implement at least get & set.')\n   }\n \n-  function renderStartingTag (node: VNode) {\n-    let markup = `<${node.tag}`\n-    if (node.data) {\n-      // check directives\n-      const dirs = node.data.directives\n-      if (dirs) {\n-        for (let i = 0; i < dirs.length; i++) {\n-          const dirRenderer = directives[dirs[i].name]\n-          if (dirRenderer) {\n-            // directives mutate the node's data\n-            // which then gets rendered by modules\n-            dirRenderer(node, dirs[i])\n-          }\n-        }\n-      }\n-      // apply other modules\n-      for (let i = 0; i < modules.length; i++) {\n-        const res = modules[i](node)\n-        if (res) {\n-          markup += res\n-        }\n-      }\n-    }\n-    // attach scoped CSS ID\n-    let scopeId\n-    if (activeInstance &&\n-        activeInstance !== node.context &&\n-        (scopeId = activeInstance.$options._scopeId)) {\n-      markup += ` ${scopeId}`\n-    }\n-    while (node) {\n-      if ((scopeId = node.context.$options._scopeId)) {\n-        markup += ` ${scopeId}`\n-      }\n-      node = node.parent\n-    }\n-    return markup + '>'\n-  }\n+  const get = cache && normalizeAsync(cache, 'get')\n+  const has = cache && normalizeAsync(cache, 'has')\n \n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n     warned = Object.create(null)\n-    activeInstance = component\n+    const context = {\n+      activeInstance: component,\n+      renderStates: [],\n+      next: noop, // for flow\n+      write, done,\n+      isUnaryTag, modules, directives,\n+      cache, get, has\n+    }\n+    context.next = nextFactory(context)\n     normalizeRender(component)\n-    renderNode(component._render(), write, done, true)\n+    renderNode(component._render(), true, context)\n   }\n }"
            },
            {
                "commitId": "d362d64633f00f8cbf1613c424d8852fb45c7596",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import { encodeHTML } from 'entities'\n+import { escape } from 'he'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n@@ -112,7 +112,7 @@ export function createRenderFunction (\n       } else if (node.isComment) {\n         write(`<!--${node.text}-->`, next)\n       } else {\n-        write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n+        write(node.raw ? node.text : escape(String(node.text)), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "e774ce2353e28c813728f508a5a83d8236f5e36e",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -2,7 +2,7 @@\n \n import config from '../config'\n import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n-import { normalizeChildren } from '../vdom/helpers'\n+import { normalizeChildren } from '../vdom/helpers/index'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf"
            },
            {
                "commitId": "3446d1485d36b91ef42c53268cb69ecb047538a5",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -232,7 +232,7 @@ export function resolveSlots (\n     child = children[i]\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n-    if (child.context === context &&\n+    if ((child.context === context || child.functionalContext === context) &&\n         child.data && (name = child.data.slot)) {\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {"
            },
            {
                "commitId": "c835ce57ff4e0ba3617a189bb2736599f1ffb471",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -117,8 +117,10 @@ export function renderMixin (Vue: Class<Component>) {\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n     if (Array.isArray(tree)) {\n       for (let i = 0; i < tree.length; i++) {\n-        tree[i].isStatic = true\n-        tree[i].key = `__static__${index}_${i}`\n+        if (typeof tree[i] !== 'string') {\n+          tree[i].isStatic = true\n+          tree[i].key = `__static__${index}_${i}`\n+        }\n       }\n     } else {\n       tree.isStatic = true"
            },
            {
                "commitId": "99ea0f8229f108baa54f8791758315e2eda4f779",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -14,7 +14,8 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm.$slots = resolveSlots(vm.$options._renderChildren)\n+  vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n+  vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -215,7 +216,8 @@ export function renderMixin (Vue: Class<Component>) {\n }\n \n export function resolveSlots (\n-  renderChildren: ?VNodeChildren\n+  renderChildren: ?VNodeChildren,\n+  context: ?Component\n ): { [key: string]: Array<VNode> } {\n   const slots = {}\n   if (!renderChildren) {\n@@ -226,8 +228,10 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    if (child.data && (name = child.data.slot)) {\n-      delete child.data.slot\n+    // named slots should only be respected if the vnode was rendered in the\n+    // same context.\n+    if (child.context === context &&\n+        child.data && (name = child.data.slot)) {\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {\n         slot.push.apply(slot, child.children)"
            },
            {
                "commitId": "56960b5fbcf82d2160a7c9645ebddecc258bc0ec",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -5,7 +5,7 @@ import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n-  nextTick, resolveAsset, _toString, toNumber\n+  nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n } from '../util/index'\n \n import { createElement } from '../vdom/create-element'\n@@ -94,6 +94,10 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._n = toNumber\n   // empty vnode\n   Vue.prototype._e = emptyVNode\n+  // loose equal\n+  Vue.prototype._q = looseEqual\n+  // loose indexOf\n+  Vue.prototype._i = looseIndexOf\n \n   // render static tree by index\n   Vue.prototype._m = function renderStatic ("
            },
            {
                "commitId": "d6a7568891d0c3368471322de5d730172d92b9e4",
                "additions": 4,
                "deletions": 3,
                "patch": "@@ -175,9 +175,10 @@ export function renderMixin (Vue: Class<Component>) {\n \n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n-    vnode: VNodeWithData,\n+    data: any,\n     value: any,\n-    asProp?: boolean) {\n+    asProp?: boolean\n+  ): VNodeData {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -188,7 +189,6 @@ export function renderMixin (Vue: Class<Component>) {\n         if (Array.isArray(value)) {\n           value = toObject(value)\n         }\n-        const data: any = vnode.data\n         for (const key in value) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n@@ -201,6 +201,7 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n       }\n     }\n+    return data\n   }\n \n   // expose v-on keyCodes"
            },
            {
                "commitId": "673dec6040bcfc510866761b38439b9d34dd91f7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -164,7 +164,7 @@ export function renderMixin (Vue: Class<Component>) {\n     // warn duplicate slot usage\n     if (slotNodes && process.env.NODE_ENV !== 'production') {\n       slotNodes._rendered && warn(\n-        `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+        `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n         `- this will likely cause render errors.`,\n         this\n       )"
            },
            {
                "commitId": "179ec92019dd098487c720ba8d1667bbedb9c380",
                "additions": 6,
                "deletions": 6,
                "patch": "@@ -36,11 +36,11 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (vm._isMounted) {    \n-      // clone slot nodes on re-renders   \n-      for (const key in vm.$slots) {    \n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])    \n-      }   \n+    if (vm._isMounted) {\n+      // clone slot nodes on re-renders\n+      for (const key in vm.$slots) {\n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+      }\n     }\n \n     if (staticRenderFns && !vm._staticTrees) {\n@@ -160,7 +160,7 @@ export function renderMixin (Vue: Class<Component>) {\n     name: string,\n     fallback: ?Array<VNode>\n   ): ?Array<VNode> {\n-    let slotNodes = this.$slots[name]\n+    const slotNodes = this.$slots[name]\n     // warn duplicate slot usage\n     if (slotNodes && process.env.NODE_ENV !== 'production') {\n       slotNodes._rendered && warn("
            },
            {
                "commitId": "100a2969aa5c64bd71758c79881cf4531e9907be",
                "additions": 15,
                "deletions": 14,
                "patch": "@@ -36,6 +36,13 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n+    if (vm._isMounted) {    \n+      // clone slot nodes on re-renders   \n+      for (const key in vm.$slots) {    \n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])    \n+      }   \n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -154,20 +161,14 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>\n   ): ?Array<VNode> {\n     let slotNodes = this.$slots[name]\n-    if (slotNodes) {\n-      // warn duplicate slot usage\n-      if (process.env.NODE_ENV !== 'production') {\n-        slotNodes._rendered && warn(\n-          `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n-          `- this will likely cause render errors.`,\n-          this\n-        )\n-        slotNodes._rendered = true\n-      }\n-      // clone slot nodes on re-renders\n-      if (this._isMounted) {\n-        slotNodes = cloneVNodes(slotNodes)\n-      }\n+    // warn duplicate slot usage\n+    if (slotNodes && process.env.NODE_ENV !== 'production') {\n+      slotNodes._rendered && warn(\n+        `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+        `- this will likely cause render errors.`,\n+        this\n+      )\n+      slotNodes._rendered = true\n     }\n     return slotNodes || fallback\n   }"
            },
            {
                "commitId": "4afccc8eece43956f6f84189923a60d9a5a45e36",
                "additions": 24,
                "deletions": 7,
                "patch": "@@ -36,13 +36,6 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (vm._isMounted) {\n-      // clone slot nodes on re-renders\n-      for (const key in vm.$slots) {\n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n-      }\n-    }\n-\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -155,6 +148,30 @@ export function renderMixin (Vue: Class<Component>) {\n     return ret\n   }\n \n+  // renderSlot\n+  Vue.prototype._t = function (\n+    name: string,\n+    fallback: ?Array<VNode>\n+  ): ?Array<VNode> {\n+    let slotNodes = this.$slots[name]\n+    if (slotNodes) {\n+      // warn duplicate slot usage\n+      if (process.env.NODE_ENV !== 'production') {\n+        slotNodes._rendered && warn(\n+          `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+          `- this will likely cause render errors.`,\n+          this\n+        )\n+        slotNodes._rendered = true\n+      }\n+      // clone slot nodes on re-renders\n+      if (this._isMounted) {\n+        slotNodes = cloneVNodes(slotNodes)\n+      }\n+    }\n+    return slotNodes || fallback\n+  }\n+\n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n     vnode: VNodeWithData,"
            },
            {
                "commitId": "f6b1a51729f705bc49c6eaaf32ec095efd97401c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -102,7 +102,7 @@ export function renderMixin (Vue: Class<Component>) {\n   ): VNode | Array<VNode> {\n     let tree = this._staticTrees[index]\n     // if has already-rendered static tree and not inside v-for,\n-    // we can reuse the same tree by indentity.\n+    // we can reuse the same tree by doing a shallow clone.\n     if (tree && !isInFor) {\n       return Array.isArray(tree)\n         ? cloneVNodes(tree)"
            },
            {
                "commitId": "982913fb1e06916a782b2789916f0038c9dfd98b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -74,13 +74,13 @@ export function createRenderFunction (\n         const key = name + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n           has(key, hit => {\n-            if (hit) {\n+            if (hit && get) {\n               get(key, res => write(res, next))\n             } else {\n               renderComponentWithCache(node, write, next, isRoot, cache, key)\n             }\n           })\n-        } else {\n+        } else if (get) {\n           get(key, res => {\n             if (res) {\n               write(res, next)"
            },
            {
                "commitId": "4d640ce4d9fd638bcd0e4a61a8bb346458046ced",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -92,6 +92,8 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n+  // empty vnode\n+  Vue.prototype._e = emptyVNode\n \n   // render static tree by index\n   Vue.prototype._m = function renderStatic (\n@@ -216,7 +218,7 @@ export function resolveSlots (\n   // ignore single whitespace\n   if (defaultSlot.length && !(\n     defaultSlot.length === 1 &&\n-    defaultSlot[0].text === ' '\n+    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n   )) {\n     slots.default = defaultSlot\n   }"
            },
            {
                "commitId": "014d2f8599f9afc0754e603b1528a12e74bd209a",
                "additions": 12,
                "deletions": 3,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { emptyVNode } from '../vdom/vnode'\n+import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n@@ -36,6 +36,13 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n+    if (vm._isMounted) {\n+      // clone slot nodes on re-renders\n+      for (const key in vm.$slots) {\n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+      }\n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -90,12 +97,14 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._m = function renderStatic (\n     index: number,\n     isInFor?: boolean\n-  ): VNode | VNodeChildren {\n+  ): VNode | Array<VNode> {\n     let tree = this._staticTrees[index]\n     // if has already-rendered static tree and not inside v-for,\n     // we can reuse the same tree by indentity.\n     if (tree && !isInFor) {\n-      return tree\n+      return Array.isArray(tree)\n+        ? cloneVNodes(tree)\n+        : cloneVNode(tree)\n     }\n     // otherwise, render a fresh tree.\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)"
            },
            {
                "commitId": "0e75fb93df9fd83391959989836c120f2662adab",
                "additions": 20,
                "deletions": 4,
                "patch": "@@ -4,6 +4,14 @@ import { encodeHTML } from 'entities'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+let warned = Object.create(null)\n+const warnOnce = msg => {\n+  if (!warned[msg]) {\n+    warned[msg] = true\n+    console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n+  }\n+}\n+\n const normalizeAsync = (cache, method) => {\n   const fn = cache[method]\n   if (!fn) {\n@@ -61,8 +69,9 @@ export function createRenderFunction (\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n       const getKey = Ctor.options.serverCacheKey\n-      if (getKey && cache) {\n-        const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+      const name = Ctor.options.name\n+      if (getKey && cache && name) {\n+        const key = name + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n           has(key, hit => {\n             if (hit) {\n@@ -81,14 +90,20 @@ export function createRenderFunction (\n           })\n         }\n       } else {\n-        if (getKey) {\n-          console.error(\n+        if (getKey && !cache) {\n+          warnOnce(\n             `[vue-server-renderer] Component ${\n               Ctor.options.name || '(anonymous)'\n             } implemented serverCacheKey, ` +\n             'but no cache was provided to the renderer.'\n           )\n         }\n+        if (getKey && !name) {\n+          warnOnce(\n+            `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+            `must also define a unique \"name\" option.`\n+          )\n+        }\n         renderComponent(node, write, next, isRoot)\n       }\n     } else {\n@@ -213,6 +228,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    warned = Object.create(null)\n     activeInstance = component\n     normalizeRender(component)\n     renderNode(component._render(), write, done, true)"
            },
            {
                "commitId": "7c3db415a7e4e006f529b27123280ec7c2ae75d0",
                "additions": 14,
                "deletions": 6,
                "patch": "@@ -18,12 +18,20 @@ const normalizeAsync = (cache, method) => {\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n-  if (!render && template) {\n-    const renderFns = (\n-      compilationCache[template] ||\n-      (compilationCache[template] = compileToFunctions(template))\n-    )\n-    Object.assign(vm.$options, renderFns)\n+  if (!render) {\n+    if (template) {\n+      const renderFns = (\n+        compilationCache[template] ||\n+        (compilationCache[template] = compileToFunctions(template))\n+      )\n+      Object.assign(vm.$options, renderFns)\n+    } else {\n+      throw new Error(\n+        `render function or template not defined in component: ${\n+          vm.$options.name || vm.$options._componentTag || 'anonymous'\n+        }`\n+      )\n+    }\n   }\n }\n "
            },
            {
                "commitId": "18386c4cf4fe829f447687734a5bf03905d0db44",
                "additions": 18,
                "deletions": 5,
                "patch": "@@ -87,13 +87,26 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._n = toNumber\n \n   // render static tree by index\n-  Vue.prototype._m = function renderStatic (index?: number): Object | void {\n+  Vue.prototype._m = function renderStatic (\n+    index: number,\n+    isInFor?: boolean\n+  ): VNode | VNodeChildren {\n     let tree = this._staticTrees[index]\n-    if (!tree) {\n-      tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n-        this._renderProxy\n-      )\n+    // if has already-rendered static tree and not inside v-for,\n+    // we can reuse the same tree by indentity.\n+    if (tree && !isInFor) {\n+      return tree\n+    }\n+    // otherwise, render a fresh tree.\n+    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n+    if (Array.isArray(tree)) {\n+      for (let i = 0; i < tree.length; i++) {\n+        tree[i].isStatic = true\n+        tree[i].key = `__static__${index}_${i}`\n+      }\n+    } else {\n       tree.isStatic = true\n+      tree.key = `__static__${index}`\n     }\n     return tree\n   }"
            },
            {
                "commitId": "21908b7267a9ff6b425b8261f9a38a2a0df2b72d",
                "additions": 4,
                "deletions": 6,
                "patch": "@@ -14,7 +14,7 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm.$slots = {}\n+  vm.$slots = resolveSlots(vm.$options._renderChildren)\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -33,7 +33,6 @@ export function renderMixin (Vue: Class<Component>) {\n     const {\n       render,\n       staticRenderFns,\n-      _renderChildren,\n       _parentVnode\n     } = vm.$options\n \n@@ -43,9 +42,6 @@ export function renderMixin (Vue: Class<Component>) {\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n     vm.$vnode = _parentVnode\n-    // resolve slots. becaues slots are rendered in parent scope,\n-    // we set the activeInstance to parent.\n-    vm.$slots = resolveSlots(_renderChildren)\n     // render self\n     let vnode\n     try {\n@@ -171,7 +167,9 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-export function resolveSlots (renderChildren: ?VNodeChildren): Object {\n+export function resolveSlots (\n+  renderChildren: ?VNodeChildren\n+): { [key: string]: Array<VNode> } {\n   const slots = {}\n   if (!renderChildren) {\n     return slots"
            },
            {
                "commitId": "fe801b16e4da63513bce95bfa762a8a36d83fe59",
                "additions": 6,
                "deletions": 5,
                "patch": "@@ -95,14 +95,15 @@ export function createRenderFunction (\n   }\n \n   function renderComponent (node, write, next, isRoot) {\n-    const child = createComponentInstanceForVnode(node)\n+    const prevActive = activeInstance\n+    const child = activeInstance = createComponentInstanceForVnode(node, activeInstance)\n     normalizeRender(child)\n     const childNode = child._render()\n     childNode.parent = node\n-    const prevActive = activeInstance\n-    activeInstance = child\n-    renderNode(childNode, write, next, isRoot)\n-    activeInstance = prevActive\n+    renderNode(childNode, write, () => {\n+      activeInstance = prevActive\n+      next()\n+    }, isRoot)\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {"
            },
            {
                "commitId": "b5b963f51df1fa3124cd8a9846be5455408bc52a",
                "additions": 10,
                "deletions": 1,
                "patch": "@@ -40,6 +40,9 @@ export function createRenderFunction (\n   const get = cache && normalizeAsync(cache, 'get')\n   const has = cache && normalizeAsync(cache, 'has')\n \n+  // used to track and apply scope ids\n+  let activeInstance: any\n+\n   function renderNode (\n     node: VNode,\n     write: Function,\n@@ -96,7 +99,10 @@ export function createRenderFunction (\n     normalizeRender(child)\n     const childNode = child._render()\n     childNode.parent = node\n+    const prevActive = activeInstance\n+    activeInstance = child\n     renderNode(childNode, write, next, isRoot)\n+    activeInstance = prevActive\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n@@ -179,7 +185,9 @@ export function createRenderFunction (\n     }\n     // attach scoped CSS ID\n     let scopeId\n-    if (node.host && (scopeId = node.host.$options._scopeId)) {\n+    if (activeInstance &&\n+        activeInstance !== node.context &&\n+        (scopeId = activeInstance.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n     while (node) {\n@@ -196,6 +204,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    activeInstance = component\n     normalizeRender(component)\n     renderNode(component._render(), write, done, true)\n   }"
            },
            {
                "commitId": "c66b7566c682af653dc475fab1475db5484e40ee",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -163,7 +163,7 @@ export function renderMixin (Vue: Class<Component>) {\n         if (Array.isArray(value)) {\n           value = toObject(value)\n         }\n-        const data = vnode.data\n+        const data: any = vnode.data\n         for (const key in value) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]"
            },
            {
                "commitId": "59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -165,10 +165,14 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n         const data = vnode.data\n         for (const key in value) {\n-          const hash = asProp || config.mustUseProp(key)\n-            ? data.domProps || (data.domProps = {})\n-            : data.attrs || (data.attrs = {})\n-          hash[key] = value[key]\n+          if (key === 'class' || key === 'style') {\n+            data[key] = value[key]\n+          } else {\n+            const hash = asProp || config.mustUseProp(key)\n+              ? data.domProps || (data.domProps = {})\n+              : data.attrs || (data.attrs = {})\n+            hash[key] = value[key]\n+          }\n         }\n       }\n     }"
            },
            {
                "commitId": "351aef3cb4ada980f105f98f8b835876e8d4d689",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -83,6 +83,8 @@ export function createRenderFunction (\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n+      } else if (node.isComment) {\n+        write(`<!--${node.text}-->`, next)\n       } else {\n         write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n       }"
            },
            {
                "commitId": "74f8b98509d24487e1a8d1588b4128a7a1046a41",
                "additions": 7,
                "deletions": 4,
                "patch": "@@ -103,13 +103,16 @@ export function renderMixin (Vue: Class<Component>) {\n   // number conversion\n   Vue.prototype._n = toNumber\n \n-  //\n+  // render static tree by index\n   Vue.prototype._m = function renderStatic (index?: number): Object | void {\n-    return this._staticTrees[index] || (\n-      this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n+    let tree = this._staticTrees[index]\n+    if (!tree) {\n+      tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n         this._renderProxy\n       )\n-    )\n+      tree.isStatic = true\n+    }\n+    return tree\n   }\n \n   // filter resolution helper"
            },
            {
                "commitId": "65d4ae9d0f0f3c6b72c4c606d8066a2abca74db2",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -84,7 +84,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.raw ? node.text : encodeHTML(node.text), next)\n+        write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "0f5bcdfac81e5428d2029f86ecb6bb77aef82335",
                "additions": 1,
                "deletions": 3,
                "patch": "@@ -177,9 +177,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-export function resolveSlots (\n-  renderChildren?: Array<any> | () => Array<any> | string\n-): Object {\n+export function resolveSlots (renderChildren: any): Object {\n   const slots = {}\n   if (!renderChildren) {\n     return slots"
            },
            {
                "commitId": "23a22cbb44f8a6796e2489a101b6de4f997f4340",
                "additions": 9,
                "deletions": 8,
                "patch": "@@ -56,9 +56,7 @@ export function renderMixin (Vue: Class<Component>) {\n     vm.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n-    if (_renderChildren) {\n-      resolveSlots(vm, _renderChildren)\n-    }\n+    vm.$slots = resolveSlots(_renderChildren)\n     // render self\n     let vnode\n     try {\n@@ -179,11 +177,13 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-function resolveSlots (\n-  vm: Component,\n-  renderChildren: Array<any> | () => Array<any> | string\n-) {\n-  const slots = vm.$slots = {}\n+export function resolveSlots (\n+  renderChildren?: Array<any> | () => Array<any> | string\n+): Object {\n+  const slots = {}\n+  if (!renderChildren) {\n+    return slots\n+  }\n   const children = normalizeChildren(renderChildren) || []\n   const defaultSlot = []\n   let name, child\n@@ -208,4 +208,5 @@ function resolveSlots (\n   )) {\n     slots.default = defaultSlot\n   }\n+  return slots\n }"
            },
            {
                "commitId": "154e17abaed2f9c2d80507c28a474adea72337e6",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -148,7 +148,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // apply v-bind object\n-  Vue.prototype._b = function bindProps (vnode: VNodeWithData, value: any) {\n+  Vue.prototype._b = function bindProps (\n+    vnode: VNodeWithData,\n+    value: any,\n+    asProp?: boolean) {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -161,7 +164,7 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n         const data = vnode.data\n         for (const key in value) {\n-          const hash = config.mustUseProp(key)\n+          const hash = asProp || config.mustUseProp(key)\n             ? data.domProps || (data.domProps = {})\n             : data.attrs || (data.attrs = {})\n           hash[key] = value[key]"
            },
            {
                "commitId": "69ecdcb05e3f5db32af889962fe8253d49d7390d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -162,7 +162,7 @@ export function renderMixin (Vue: Class<Component>) {\n         const data = vnode.data\n         for (const key in value) {\n           const hash = config.mustUseProp(key)\n-            ? data.props || (data.props = {})\n+            ? data.domProps || (data.domProps = {})\n             : data.attrs || (data.attrs = {})\n           hash[key] = value[key]\n         }"
            },
            {
                "commitId": "2732fec59ed592c187b499b2ba5872d2242339cc",
                "additions": 24,
                "deletions": 5,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, isObject, toObject,\n+  warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n@@ -48,19 +48,38 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (staticRenderFns && !this._staticTrees) {\n-      this._staticTrees = []\n+    if (staticRenderFns && !vm._staticTrees) {\n+      vm._staticTrees = []\n     }\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n-    this.$vnode = _parentVnode\n+    vm.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    let vnode = render.call(vm._renderProxy, vm.$createElement)\n+    let vnode\n+    try {\n+      vnode = render.call(vm._renderProxy, vm.$createElement)\n+    } catch (e) {\n+      if (process.env.NODE_ENV !== 'production') {\n+        warn(`Error when rendering ${formatComponentName(vm)}:`)\n+      }\n+      /* istanbul ignore else */\n+      if (config.errorHandler) {\n+        config.errorHandler.call(null, e, vm)\n+      } else {\n+        if (config._isServer) {\n+          throw e\n+        } else {\n+          setTimeout(() => { throw e }, 0)\n+        }\n+      }\n+      // return previous vnode to prevent render error causing blank component\n+      vnode = vm._vnode\n+    }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "d0482a0faeeb79c250fc17e06de6c777e74bc618",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -167,7 +167,8 @@ function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    if ((name = child.data && child.data.slot)) {\n+    if (child.data && (name = child.data.slot)) {\n+      delete child.data.slot\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {\n         slot.push.apply(slot, child.children)"
            },
            {
                "commitId": "75a221e95fa797a7472ac8a25f97a8248a605737",
                "additions": 19,
                "deletions": 21,
                "patch": "@@ -162,29 +162,27 @@ function resolveSlots (\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n   const slots = vm.$slots = {}\n-  if (renderChildren) {\n-    const children = normalizeChildren(renderChildren) || []\n-    const defaultSlot = []\n-    let name, child\n-    for (let i = 0, l = children.length; i < l; i++) {\n-      child = children[i]\n-      if ((name = child.data && child.data.slot)) {\n-        const slot = (slots[name] || (slots[name] = []))\n-        if (child.tag === 'template') {\n-          slot.push.apply(slot, child.children)\n-        } else {\n-          slot.push(child)\n-        }\n+  const children = normalizeChildren(renderChildren) || []\n+  const defaultSlot = []\n+  let name, child\n+  for (let i = 0, l = children.length; i < l; i++) {\n+    child = children[i]\n+    if ((name = child.data && child.data.slot)) {\n+      const slot = (slots[name] || (slots[name] = []))\n+      if (child.tag === 'template') {\n+        slot.push.apply(slot, child.children)\n       } else {\n-        defaultSlot.push(child)\n+        slot.push(child)\n       }\n+    } else {\n+      defaultSlot.push(child)\n     }\n-    // ignore single whitespace\n-    if (defaultSlot.length && !(\n-      defaultSlot.length === 1 &&\n-      defaultSlot[0].text === ' '\n-    )) {\n-      slots.default = defaultSlot\n-    }\n+  }\n+  // ignore single whitespace\n+  if (defaultSlot.length && !(\n+    defaultSlot.length === 1 &&\n+    defaultSlot[0].text === ' '\n+  )) {\n+    slots.default = defaultSlot\n   }\n }"
            },
            {
                "commitId": "1a064a6dc94c9dd183963ebd00a6e25680786b96",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -161,9 +161,9 @@ function resolveSlots (\n   vm: Component,\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n+  const slots = vm.$slots = {}\n   if (renderChildren) {\n     const children = normalizeChildren(renderChildren) || []\n-    const slots = {}\n     const defaultSlot = []\n     let name, child\n     for (let i = 0, l = children.length; i < l; i++) {\n@@ -179,12 +179,12 @@ function resolveSlots (\n         defaultSlot.push(child)\n       }\n     }\n+    // ignore single whitespace\n     if (defaultSlot.length && !(\n       defaultSlot.length === 1 &&\n       defaultSlot[0].text === ' '\n     )) {\n-      slots['default'] = defaultSlot\n+      slots.default = defaultSlot\n     }\n-    vm.$slots = slots\n   }\n }"
            },
            {
                "commitId": "7630622689587b947c3ba03678a8f1d1e24ac71f",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -17,7 +17,8 @@ export const renderState: {\n }\n \n export function initRender (vm: Component) {\n-  vm._vnode = null\n+  vm.$vnode = null // the placeholder node in parent tree\n+  vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n@@ -50,7 +51,9 @@ export function renderMixin (Vue: Class<Component>) {\n     if (staticRenderFns && !this._staticTrees) {\n       this._staticTrees = []\n     }\n-\n+    // set parent vnode. this allows render functions to have access\n+    // to the data on the placeholder node.\n+    this.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {"
            },
            {
                "commitId": "5c6c8c7ed0b72461f1ed2e673c8f04cba300aaff",
                "additions": 19,
                "deletions": 3,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n import { encodeHTML } from 'entities'\n+import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const normalizeAsync = (cache, method) => {\n@@ -14,6 +15,18 @@ const normalizeAsync = (cache, method) => {\n   }\n }\n \n+const compilationCache = Object.create(null)\n+const normalizeRender = vm => {\n+  const { render, template } = vm.$options\n+  if (!render && template) {\n+    const renderFns = (\n+      compilationCache[template] ||\n+      (compilationCache[template] = compileToFunctions(template))\n+    )\n+    Object.assign(vm.$options, renderFns)\n+  }\n+}\n+\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n@@ -77,9 +90,11 @@ export function createRenderFunction (\n   }\n \n   function renderComponent (node, write, next, isRoot) {\n-    const child = createComponentInstanceForVnode(node)._render()\n-    child.parent = node\n-    renderNode(child, write, next, isRoot)\n+    const child = createComponentInstanceForVnode(node)\n+    normalizeRender(child)\n+    const childNode = child._render()\n+    childNode.parent = node\n+    renderNode(childNode, write, next, isRoot)\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n@@ -179,6 +194,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    normalizeRender(component)\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "e17f2ba20cdc44fabe9a6ca2baa6881debc1a992",
                "additions": 1,
                "deletions": 4,
                "patch": "@@ -1,11 +1,8 @@\n /* @flow */\n \n-import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-const encodeHTMLCached = cached(encodeHTML)\n-\n const normalizeAsync = (cache, method) => {\n   const fn = cache[method]\n   if (!fn) {\n@@ -74,7 +71,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.raw ? node.text : encodeHTMLCached(node.text), next)\n+        write(node.raw ? node.text : encodeHTML(node.text), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "bf9c46f435bad7fb8872febc03f577ee622e4df6",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -39,7 +39,7 @@ export function createRenderFunction (\n     if (node.componentOptions) {\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n-      const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+      const getKey = Ctor.options.serverCacheKey\n       if (getKey && cache) {\n         const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n@@ -62,7 +62,9 @@ export function createRenderFunction (\n       } else {\n         if (getKey) {\n           console.error(\n-            'Component implemented server.getCacheKey, ' +\n+            `[vue-server-renderer] Component ${\n+              Ctor.options.name || '(anonymous)'\n+            } implemented serverCacheKey, ` +\n             'but no cache was provided to the renderer.'\n           )\n         }"
            },
            {
                "commitId": "ba3bec824d9d12e7508291f788645c4b613b9fbe",
                "additions": 67,
                "deletions": 34,
                "patch": "@@ -2,21 +2,33 @@\n \n import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n-import LRU from 'lru-cache'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const encodeHTMLCached = cached(encodeHTML)\n-const defaultOptions = {\n-  max: 5000\n+\n+const normalizeAsync = (cache, method) => {\n+  const fn = cache[method]\n+  if (!fn) {\n+    return\n+  } else if (fn.length > 1) {\n+    return (key, cb) => fn.call(cache, key, cb)\n+  } else {\n+    return (key, cb) => cb(fn.call(cache, key))\n+  }\n }\n \n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n   isUnaryTag: Function,\n-  cacheOptions: Object\n+  cache: any\n ) {\n-  const cache = LRU(Object.assign({}, defaultOptions, cacheOptions))\n+  if (cache && (!cache.get || !cache.set)) {\n+    throw new Error('renderer cache must implement at least get & set.')\n+  }\n+\n+  const get = cache && normalizeAsync(cache, 'get')\n+  const has = cache && normalizeAsync(cache, 'has')\n \n   function renderNode (\n     node: VNode,\n@@ -28,35 +40,34 @@ export function createRenderFunction (\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n       const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n-      if (getKey) {\n+      if (getKey && cache) {\n         const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n-        if (cache.has(key)) {\n-          return write(cache.get(key), next)\n+        if (has) {\n+          has(key, hit => {\n+            if (hit) {\n+              get(key, res => write(res, next))\n+            } else {\n+              renderComponentWithCache(node, write, next, isRoot, cache, key)\n+            }\n+          })\n         } else {\n-          write.caching = true\n-          const buffer = write.cacheBuffer\n-          const bufferIndex = buffer.push('') - 1\n-          const _next = next\n-          next = () => {\n-            const result = buffer[bufferIndex]\n-            cache.set(key, result)\n-            if (bufferIndex === 0) {\n-              // this is a top-level cached component,\n-              // exit caching mode.\n-              write.caching = false\n+          get(key, res => {\n+            if (res) {\n+              write(res, next)\n             } else {\n-              // parent component is also being cached,\n-              // merge self into parent's result\n-              buffer[bufferIndex - 1] += result\n+              renderComponentWithCache(node, write, next, isRoot, cache, key)\n             }\n-            buffer.length = bufferIndex\n-            _next()\n-          }\n+          })\n         }\n+      } else {\n+        if (getKey) {\n+          console.error(\n+            'Component implemented server.getCacheKey, ' +\n+            'but no cache was provided to the renderer.'\n+          )\n+        }\n+        renderComponent(node, write, next, isRoot)\n       }\n-      const child = createComponentInstanceForVnode(node)._render()\n-      child.parent = node\n-      renderNode(child, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -66,12 +77,34 @@ export function createRenderFunction (\n     }\n   }\n \n-  function renderElement (\n-    el: VNode,\n-    write: Function,\n-    next: Function,\n-    isRoot: boolean\n-  ) {\n+  function renderComponent (node, write, next, isRoot) {\n+    const child = createComponentInstanceForVnode(node)._render()\n+    child.parent = node\n+    renderNode(child, write, next, isRoot)\n+  }\n+\n+  function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n+    write.caching = true\n+    const buffer = write.cacheBuffer\n+    const bufferIndex = buffer.push('') - 1\n+    renderComponent(node, write, () => {\n+      const result = buffer[bufferIndex]\n+      cache.set(key, result)\n+      if (bufferIndex === 0) {\n+        // this is a top-level cached component,\n+        // exit caching mode.\n+        write.caching = false\n+      } else {\n+        // parent component is also being cached,\n+        // merge self into parent's result\n+        buffer[bufferIndex - 1] += result\n+      }\n+      buffer.length = bufferIndex\n+      next()\n+    }, isRoot)\n+  }\n+\n+  function renderElement (el, write, next, isRoot) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}"
            },
            {
                "commitId": "1b3b19491fd47f3634e30d7fcce991881de16530",
                "additions": 19,
                "deletions": 21,
                "patch": "@@ -8,11 +8,7 @@ import {\n   nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n-import {\n-  renderElement,\n-  renderElementWithChildren,\n-  renderStatic\n-} from '../vdom/create-element'\n+import { createElement } from '../vdom/create-element'\n \n export const renderState: {\n   activeInstance: ?Component\n@@ -26,14 +22,7 @@ export function initRender (vm: Component) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(function (\n-    tag?: string | Class<Component> | Function | Object,\n-    data?: VNodeData,\n-    children?: VNodeChildren,\n-    namespace?: string\n-  ) {\n-    return this._h(this._e(tag, data, namespace), children)\n-  }, vm)\n+  vm.$createElement = bind(createElement, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -88,22 +77,29 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype._h = renderElementWithChildren\n-  Vue.prototype._e = renderElement\n-  Vue.prototype._m = renderStatic\n+  Vue.prototype._h = createElement\n   // toString for mustaches\n   Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n \n+  //\n+  Vue.prototype._m = function renderStatic (index?: number): Object | void {\n+    return this._staticTrees[index] || (\n+      this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n+        this._renderProxy\n+      )\n+    )\n+  }\n+\n   // filter resolution helper\n   const identity = _ => _\n-  Vue.prototype._f = function (id) {\n+  Vue.prototype._f = function resolveFilter (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }\n \n   // render v-for\n-  Vue.prototype._l = function (\n+  Vue.prototype._l = function renderList (\n     val: any,\n     render: () => VNode\n   ): ?Array<VNode> {\n@@ -130,7 +126,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // apply v-bind object\n-  Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n+  Vue.prototype._b = function bindProps (vnode: VNodeWithData, value: any) {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -153,15 +149,17 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // expose v-on keyCodes\n-  Vue.prototype._k = key => config.keyCodes[key]\n+  Vue.prototype._k = function getKeyCodes (key: string): any {\n+    return config.keyCodes[key]\n+  }\n }\n \n function resolveSlots (\n   vm: Component,\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n   if (renderChildren) {\n-    const children = normalizeChildren(renderChildren)\n+    const children = normalizeChildren(renderChildren) || []\n     const slots = {}\n     const defaultSlot = []\n     let name, child"
            },
            {
                "commitId": "cf8aeddc122dc13870ac07eff1574b2c172feb18",
                "additions": 2,
                "deletions": 5,
                "patch": "@@ -5,13 +5,12 @@ import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, bind, isObject, toObject,\n-  nextTick, resolveAsset, renderString, toNumber\n+  nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n import {\n   renderElement,\n   renderElementWithChildren,\n-  renderText,\n   renderStatic\n } from '../vdom/create-element'\n \n@@ -91,11 +90,9 @@ export function renderMixin (Vue: Class<Component>) {\n   // shorthands used in render functions\n   Vue.prototype._h = renderElementWithChildren\n   Vue.prototype._e = renderElement\n-  Vue.prototype._t = renderText\n   Vue.prototype._m = renderStatic\n-\n   // toString for mustaches\n-  Vue.prototype._s = renderString\n+  Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n "
            },
            {
                "commitId": "51db34103a8f76dc314578d202af0465177d30f8",
                "additions": 16,
                "deletions": 8,
                "patch": "@@ -33,16 +33,24 @@ export function createRenderFunction (\n         if (cache.has(key)) {\n           return write(cache.get(key), next)\n         } else {\n-          if (!write.caching) {\n-            // initialize if not already caching\n-            write.caching = true\n-            const _next = next\n-            next = () => {\n-              cache.set(key, write.buffer)\n+          write.caching = true\n+          const buffer = write.cacheBuffer\n+          const bufferIndex = buffer.push('') - 1\n+          const _next = next\n+          next = () => {\n+            const result = buffer[bufferIndex]\n+            cache.set(key, result)\n+            if (bufferIndex === 0) {\n+              // this is a top-level cached component,\n+              // exit caching mode.\n               write.caching = false\n-              write.buffer = ''\n-              _next()\n+            } else {\n+              // parent component is also being cached,\n+              // merge self into parent's result\n+              buffer[bufferIndex - 1] += result\n             }\n+            buffer.length = bufferIndex\n+            _next()\n           }\n         }\n       }"
            },
            {
                "commitId": "651263bb78bb4de3d0c9bfeda767a5290f6018c8",
                "additions": 26,
                "deletions": 26,
                "patch": "@@ -25,9 +25,28 @@ export function createRenderFunction (\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child =\n-        getCachedComponent(node) ||\n-        createComponentInstanceForVnode(node)._render()\n+      // check cache hit\n+      const Ctor = node.componentOptions.Ctor\n+      const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+      if (getKey) {\n+        const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+        if (cache.has(key)) {\n+          return write(cache.get(key), next)\n+        } else {\n+          if (!write.caching) {\n+            // initialize if not already caching\n+            write.caching = true\n+            const _next = next\n+            next = () => {\n+              cache.set(key, write.buffer)\n+              write.caching = false\n+              write.buffer = ''\n+              _next()\n+            }\n+          }\n+        }\n+      }\n+      const child = createComponentInstanceForVnode(node)._render()\n       child.parent = node\n       renderNode(child, write, next, isRoot)\n     } else {\n@@ -39,21 +58,6 @@ export function createRenderFunction (\n     }\n   }\n \n-  function getCachedComponent (node) {\n-    const Ctor = node.componentOptions.Ctor\n-    const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n-    if (getKey) {\n-      const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n-      if (cache.has(key)) {\n-        return cache.get(key)\n-      } else {\n-        const res = createComponentInstanceForVnode(node)._render()\n-        cache.set(key, res)\n-        return res\n-      }\n-    }\n-  }\n-\n   function renderElement (\n     el: VNode,\n     write: Function,\n@@ -94,9 +98,6 @@ export function createRenderFunction (\n   }\n \n   function renderStartingTag (node: VNode) {\n-    if (node._rendered) {\n-      return node._rendered\n-    }\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -124,14 +125,13 @@ export function createRenderFunction (\n     if (node.host && (scopeId = node.host.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n-    let _node = node\n-    while (_node) {\n-      if ((scopeId = _node.context.$options._scopeId)) {\n+    while (node) {\n+      if ((scopeId = node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n-      _node = _node.parent\n+      node = node.parent\n     }\n-    return (node._rendered = markup + '>')\n+    return markup + '>'\n   }\n \n   return function render ("
            },
            {
                "commitId": "c902e1f9ab91b3a8048f1a576396abdeeea41d20",
                "additions": 34,
                "deletions": 6,
                "patch": "@@ -2,23 +2,32 @@\n \n import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n+import LRU from 'lru-cache'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const encodeHTMLCached = cached(encodeHTML)\n+const defaultOptions = {\n+  max: 5000\n+}\n \n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n-  isUnaryTag: Function\n+  isUnaryTag: Function,\n+  cacheOptions: Object\n ) {\n+  const cache = LRU(Object.assign({}, defaultOptions, cacheOptions))\n+\n   function renderNode (\n     node: VNode,\n     write: Function,\n     next: Function,\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child = createComponentInstanceForVnode(node)._render()\n+      const child =\n+        getCachedComponent(node) ||\n+        createComponentInstanceForVnode(node)._render()\n       child.parent = node\n       renderNode(child, write, next, isRoot)\n     } else {\n@@ -30,6 +39,21 @@ export function createRenderFunction (\n     }\n   }\n \n+  function getCachedComponent (node) {\n+    const Ctor = node.componentOptions.Ctor\n+    const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+    if (getKey) {\n+      const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+      if (cache.has(key)) {\n+        return cache.get(key)\n+      } else {\n+        const res = createComponentInstanceForVnode(node)._render()\n+        cache.set(key, res)\n+        return res\n+      }\n+    }\n+  }\n+\n   function renderElement (\n     el: VNode,\n     write: Function,\n@@ -70,6 +94,9 @@ export function createRenderFunction (\n   }\n \n   function renderStartingTag (node: VNode) {\n+    if (node._rendered) {\n+      return node._rendered\n+    }\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -97,13 +124,14 @@ export function createRenderFunction (\n     if (node.host && (scopeId = node.host.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n-    while (node) {\n-      if ((scopeId = node.context.$options._scopeId)) {\n+    let _node = node\n+    while (_node) {\n+      if ((scopeId = _node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n-      node = node.parent\n+      _node = _node.parent\n     }\n-    return markup + '>'\n+    return (node._rendered = markup + '>')\n   }\n \n   return function render ("
            },
            {
                "commitId": "3fe127b05a0e12b5d05d4ddd0d2e5f85f223d475",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -5,7 +5,7 @@ import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, bind, isObject, toObject,\n-  nextTick, resolveAsset, renderString\n+  nextTick, resolveAsset, renderString, toNumber\n } from '../util/index'\n \n import {\n@@ -96,6 +96,8 @@ export function renderMixin (Vue: Class<Component>) {\n \n   // toString for mustaches\n   Vue.prototype._s = renderString\n+  // number conversion\n+  Vue.prototype._n = toNumber\n \n   // filter resolution helper\n   const identity = _ => _"
            },
            {
                "commitId": "f0efa9aad2f33c45ea8dfc5098cef86900b9ef98",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -154,7 +154,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // expose v-on keyCodes\n-  Vue.prototype._keyCode = key => config.keyCodes[key]\n+  Vue.prototype._k = key => config.keyCodes[key]\n }\n \n function resolveSlots ("
            },
            {
                "commitId": "4fe51a75a94464075055b45550a05e4680bb2b9f",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -152,6 +152,9 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n   }\n+\n+  // expose v-on keyCodes\n+  Vue.prototype._keyCode = key => config.keyCodes[key]\n }\n \n function resolveSlots ("
            },
            {
                "commitId": "41e46476a50c4fe08bd1de6423e84eef26e2b8f1",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -69,7 +69,7 @@ export function renderMixin (Vue: Class<Component>) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    let vnode = render.call(vm._renderProxy)\n+    let vnode = render.call(vm._renderProxy, vm.$createElement)\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -93,9 +93,12 @@ export function createRenderFunction (\n       }\n     }\n     // attach scoped CSS ID\n+    let scopeId\n+    if (node.host && (scopeId = node.host.$options._scopeId)) {\n+      markup += ` ${scopeId}`\n+    }\n     while (node) {\n-      const scopeId = node.context.$options._scopeId\n-      if (scopeId) {\n+      if ((scopeId = node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n       node = node.parent"
            },
            {
                "commitId": "b1351be073eda59724b3ede02753379fdc7d6829",
                "additions": 11,
                "deletions": 2,
                "patch": "@@ -18,8 +18,9 @@ export function createRenderFunction (\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child = createComponentInstanceForVnode(node)\n-      renderNode(child._render(), write, next, isRoot)\n+      const child = createComponentInstanceForVnode(node)._render()\n+      child.parent = node\n+      renderNode(child, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -91,6 +92,14 @@ export function createRenderFunction (\n         }\n       }\n     }\n+    // attach scoped CSS ID\n+    while (node) {\n+      const scopeId = node.context.$options._scopeId\n+      if (scopeId) {\n+        markup += ` ${scopeId}`\n+      }\n+      node = node.parent\n+    }\n     return markup + '>'\n   }\n "
            },
            {
                "commitId": "b0ad94fc876826a8ee3226320aacd40b8967f8dd",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,7 +1,11 @@\n /* @flow */\n \n+import { cached } from 'shared/util'\n+import { encodeHTML } from 'entities'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+const encodeHTMLCached = cached(encodeHTML)\n+\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n@@ -20,7 +24,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.text, next)\n+        write(node.raw ? node.text : encodeHTMLCached(node.text), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "cec833a9e8d71a9ed5deaecdccaceb1168641a2e",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -112,19 +112,19 @@ export function renderMixin (Vue: Class<Component>) {\n     if (Array.isArray(val)) {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n-        ret[i] = render(val[i], i, i)\n+        ret[i] = render(val[i], i)\n       }\n     } else if (typeof val === 'number') {\n       ret = new Array(val)\n       for (i = 0; i < val; i++) {\n-        ret[i] = render(i + 1, i, i)\n+        ret[i] = render(i + 1, i)\n       }\n     } else if (isObject(val)) {\n       keys = Object.keys(val)\n       ret = new Array(keys.length)\n       for (i = 0, l = keys.length; i < l; i++) {\n         key = keys[i]\n-        ret[i] = render(val[key], i, key)\n+        ret[i] = render(val[key], key, i)\n       }\n     }\n     return ret"
            },
            {
                "commitId": "894d214e9367be653bf22429085906682fcd874a",
                "additions": 16,
                "deletions": 10,
                "patch": "@@ -47,13 +47,22 @@ export function renderMixin (Vue: Class<Component>) {\n \n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n+\n+    // set current active instance\n     const prev = renderState.activeInstance\n     renderState.activeInstance = vm\n-    if (!vm._isMounted) {\n+\n+    const {\n+      render,\n+      staticRenderFns,\n+      _renderChildren,\n+      _parentVnode\n+    } = vm.$options\n+\n+    if (staticRenderFns && !vm._staticTrees) {\n       // render static sub-trees for once on initial render\n-      renderStaticTrees(vm)\n+      renderStaticTrees(vm, staticRenderFns)\n     }\n-    const { render, _renderChildren, _parentVnode } = vm.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n@@ -145,13 +154,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-function renderStaticTrees (vm: Component) {\n-  const staticRenderFns = vm.$options.staticRenderFns\n-  if (staticRenderFns) {\n-    const trees = vm._staticTrees = new Array(staticRenderFns.length)\n-    for (let i = 0; i < staticRenderFns.length; i++) {\n-      trees[i] = staticRenderFns[i].call(vm._renderProxy)\n-    }\n+function renderStaticTrees (vm: Component, fns: Array<Function>) {\n+  const trees = vm._staticTrees = new Array(fns.length)\n+  for (let i = 0; i < fns.length; i++) {\n+    trees[i] = fns[i].call(vm._renderProxy)\n   }\n }\n "
            },
            {
                "commitId": "a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -70,7 +70,7 @@ export function renderMixin (Vue: Class<Component>) {\n           vm\n         )\n       }\n-      vnode = emptyVNode\n+      vnode = emptyVNode()\n     }\n     // set parent\n     vnode.parent = _parentVnode"
            },
            {
                "commitId": "026198caf1545bf0f82831f19e1f18f1212e84d2",
                "additions": 1,
                "deletions": 15,
                "patch": "@@ -35,20 +35,6 @@ export function initRender (vm: Component) {\n   ) {\n     return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n-  // for abstract components, determine first non-abstract parent\n-  // so that the children of abstract components are considered children\n-  // of the first non-abstract parent.\n-  // this is used by internal abstract components like <keep-alive>.\n-  if (vm.$options._abstract) {\n-    let parent = vm.$parent\n-    /* istanbul ignore next */\n-    while (parent && parent.$options._abstract) {\n-      parent = parent.$parent\n-    }\n-    vm._renderParent = parent\n-  } else {\n-    vm._renderParent = vm\n-  }\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -62,7 +48,7 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n     const prev = renderState.activeInstance\n-    renderState.activeInstance = vm._renderParent\n+    renderState.activeInstance = vm\n     if (!vm._isMounted) {\n       // render static sub-trees for once on initial render\n       renderStaticTrees(vm)"
            },
            {
                "commitId": "2091c8525f5e0dca47c9672323f91449832688b7",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -41,6 +41,7 @@ export function initRender (vm: Component) {\n   // this is used by internal abstract components like <keep-alive>.\n   if (vm.$options._abstract) {\n     let parent = vm.$parent\n+    /* istanbul ignore next */\n     while (parent && parent.$options._abstract) {\n       parent = parent.$parent\n     }"
            },
            {
                "commitId": "cb67ffe4429ebfbdf42b5d18e1e1b168109d472e",
                "additions": 15,
                "deletions": 2,
                "patch": "@@ -16,7 +16,7 @@ import {\n } from '../vdom/create-element'\n \n export const renderState: {\n-  activeInstance: Component | null\n+  activeInstance: ?Component\n } = {\n   activeInstance: null\n }\n@@ -35,6 +35,19 @@ export function initRender (vm: Component) {\n   ) {\n     return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n+  // for abstract components, determine first non-abstract parent\n+  // so that the children of abstract components are considered children\n+  // of the first non-abstract parent.\n+  // this is used by internal abstract components like <keep-alive>.\n+  if (vm.$options._abstract) {\n+    let parent = vm.$parent\n+    while (parent && parent.$options._abstract) {\n+      parent = parent.$parent\n+    }\n+    vm._renderParent = parent\n+  } else {\n+    vm._renderParent = vm\n+  }\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -48,7 +61,7 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n     const prev = renderState.activeInstance\n-    renderState.activeInstance = vm\n+    renderState.activeInstance = vm._renderParent\n     if (!vm._isMounted) {\n       // render static sub-trees for once on initial render\n       renderStaticTrees(vm)"
            },
            {
                "commitId": "113232f960c359bdbe56fac59b6f9e3b7cc9290a",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -66,7 +66,8 @@ export function renderMixin (Vue: Class<Component>) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n         warn(\n           'Multiple root nodes returned from render function. Render function ' +\n-          'should return a single root node.'\n+          'should return a single root node.',\n+          vm\n         )\n       }\n       vnode = emptyVNode"
            },
            {
                "commitId": "060fab9ec1d7df09312fb301f092b6790cf1cd46",
                "additions": 1,
                "deletions": 29,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, remove, isObject, toObject,\n+  warn, bind, isObject, toObject,\n   nextTick, resolveAsset, renderString\n } from '../util/index'\n \n@@ -120,34 +120,6 @@ export function renderMixin (Vue: Class<Component>) {\n     return ret\n   }\n \n-  // register ref\n-  Vue.prototype._r = function (\n-    key: string,\n-    ref: Vue | Element,\n-    vFor: boolean,\n-    isRemoval: boolean\n-  ) {\n-    const vm: Component = this\n-    const refs = vm.$refs\n-    if (isRemoval) {\n-      if (Array.isArray(refs[key])) {\n-        remove(refs[key], ref)\n-      } else {\n-        refs[key] = undefined\n-      }\n-    } else {\n-      if (vFor) {\n-        if (Array.isArray(refs[key])) {\n-          refs[key].push(ref)\n-        } else {\n-          refs[key] = [ref]\n-        }\n-      } else {\n-        refs[key] = ref\n-      }\n-    }\n-  }\n-\n   // apply v-bind object\n   Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n     if (value) {"
            },
            {
                "commitId": "43da334ec164a83aafcaa475e10611dbf0d941db",
                "additions": 6,
                "deletions": 0,
                "patch": "@@ -63,6 +63,12 @@ export function renderMixin (Vue: Class<Component>) {\n     let vnode = render.call(vm._renderProxy)\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n+      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n+        warn(\n+          'Multiple root nodes returned from render function. Render function ' +\n+          'should return a single root node.'\n+        )\n+      }\n       vnode = emptyVNode\n     }\n     // set parent"
            },
            {
                "commitId": "3a0557a317d6e8fd96bf543e7b71d39e4e7c257b",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -184,9 +184,8 @@ function resolveSlots (\n     const children = normalizeChildren(renderChildren)\n     const slots = {}\n     const defaultSlot = []\n-    let i = children.length\n     let name, child\n-    while (i--) {\n+    for (let i = 0, l = children.length; i < l; i++) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n         const slot = (slots[name] || (slots[name] = []))"
            },
            {
                "commitId": "cb915d012074e79b9f81a758ed0253ba4d98ebc4",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, remove, extend, isObject, toObject,\n+  warn, bind, remove, isObject, toObject,\n   nextTick, resolveAsset, renderString\n } from '../util/index'\n "
            },
            {
                "commitId": "8d229b2442e8cc5b2801fa55a4ea8ea766721381",
                "additions": 28,
                "deletions": 2,
                "patch": "@@ -1,9 +1,12 @@\n /* @flow */\n \n+import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n-import { resolveAsset, nextTick } from '../util/index'\n-import { bind, remove, extend, isObject, renderString } from 'shared/util'\n+import {\n+  warn, bind, remove, extend, isObject, toObject,\n+  nextTick, resolveAsset, renderString\n+} from '../util/index'\n \n import {\n   renderElement,\n@@ -138,6 +141,29 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n   }\n+\n+  // apply v-bind object\n+  Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n+    if (value) {\n+      if (!isObject(value)) {\n+        process.env.NODE_ENV !== 'production' && warn(\n+          'v-bind without argument expects an Object or Array value',\n+          this\n+        )\n+      } else {\n+        if (Array.isArray(value)) {\n+          value = toObject(value)\n+        }\n+        const data = vnode.data\n+        for (const key in value) {\n+          const hash = config.mustUseProp(key)\n+            ? data.props || (data.props = {})\n+            : data.attrs || (data.attrs = {})\n+          hash[key] = value[key]\n+        }\n+      }\n+    }\n+  }\n }\n \n function renderStaticTrees (vm: Component) {"
            },
            {
                "commitId": "54e648e49f3ef6e671a23430047c5c40b75809a7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -2,8 +2,8 @@\n \n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n-import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n+import { bind, remove, extend, isObject, renderString } from 'shared/util'\n \n import {\n   renderElement,"
            },
            {
                "commitId": "0a15d9ee27a9314c0192c6174509a230279ed344",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import { emptyVNode } from '../vdom/vnode'\n+import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n@@ -57,7 +57,11 @@ export function renderMixin (Vue: Class<Component>) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(vm._renderProxy) || emptyVNode\n+    let vnode = render.call(vm._renderProxy)\n+    // return empty vnode in case the render function errored out\n+    if (!(vnode instanceof VNode)) {\n+      vnode = emptyVNode\n+    }\n     // set parent\n     vnode.parent = _parentVnode\n     // restore render state"
            },
            {
                "commitId": "6fe268874ca2ea9297ca64830b38f8179d51fce2",
                "additions": 9,
                "deletions": 9,
                "patch": "@@ -30,7 +30,7 @@ export function initRender (vm: Component) {\n     children?: VNodeChildren,\n     namespace?: string\n   ) {\n-    return this.__r__(this.__s__(tag, data, namespace), children)\n+    return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n@@ -66,22 +66,22 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__r__ = renderElementWithChildren\n-  Vue.prototype.__s__ = renderElement\n-  Vue.prototype.__t__ = renderText\n-  Vue.prototype.__m__ = renderStatic\n+  Vue.prototype._h = renderElementWithChildren\n+  Vue.prototype._e = renderElement\n+  Vue.prototype._t = renderText\n+  Vue.prototype._m = renderStatic\n \n   // toString for mustaches\n-  Vue.prototype.__toString__ = renderString\n+  Vue.prototype._s = renderString\n \n   // filter resolution helper\n   const identity = _ => _\n-  Vue.prototype.__resolveFilter__ = function (id) {\n+  Vue.prototype._f = function (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }\n \n   // render v-for\n-  Vue.prototype.__renderList__ = function (\n+  Vue.prototype._l = function (\n     val: any,\n     render: () => VNode\n   ): ?Array<VNode> {\n@@ -108,7 +108,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // register ref\n-  Vue.prototype.__registerRef__ = function (\n+  Vue.prototype._r = function (\n     key: string,\n     ref: Vue | Element,\n     vFor: boolean,"
            },
            {
                "commitId": "2dc5b1782871d87a7c795361eac0d49fd396c05f",
                "additions": 9,
                "deletions": 3,
                "patch": "@@ -1,11 +1,17 @@\n /* @flow */\n \n-import { renderElement, renderSelf, renderText, renderStatic } from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n \n+import {\n+  renderElement,\n+  renderElementWithChildren,\n+  renderText,\n+  renderStatic\n+} from '../vdom/create-element'\n+\n export const renderState: {\n   activeInstance: Component | null\n } = {\n@@ -60,8 +66,8 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__r__ = renderElement\n-  Vue.prototype.__s__ = renderSelf\n+  Vue.prototype.__r__ = renderElementWithChildren\n+  Vue.prototype.__s__ = renderElement\n   Vue.prototype.__t__ = renderText\n   Vue.prototype.__m__ = renderStatic\n "
            },
            {
                "commitId": "20fb79a1ea098bedda6fec8bebbb184ac51fce20",
                "additions": 13,
                "deletions": 3,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import createElement from '../vdom/create-element'\n+import { renderElement, renderSelf, renderText, renderStatic } from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n@@ -18,7 +18,14 @@ export function initRender (vm: Component) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(createElement, vm)\n+  vm.$createElement = bind(function (\n+    tag?: string | Class<Component> | Function | Object,\n+    data?: VNodeData,\n+    children?: VNodeChildren,\n+    namespace?: string\n+  ) {\n+    return this.__r__(this.__s__(tag, data, namespace), children)\n+  }, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -53,7 +60,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__h__ = createElement\n+  Vue.prototype.__r__ = renderElement\n+  Vue.prototype.__s__ = renderSelf\n+  Vue.prototype.__t__ = renderText\n+  Vue.prototype.__m__ = renderStatic\n \n   // toString for mustaches\n   Vue.prototype.__toString__ = renderString"
            },
            {
                "commitId": "ff16f7491f546c5acd40ee2290caa5d553eff3be",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -1,6 +1,5 @@\n /* @flow */\n \n-import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n export function createRenderFunction ("
            },
            {
                "commitId": "45d96c7dbc399696138c9d020e13f97cf94ce181",
                "additions": 17,
                "deletions": 3,
                "patch": "@@ -8,7 +8,12 @@ export function createRenderFunction (\n   directives: Object,\n   isUnaryTag: Function\n ) {\n-  function renderNode (node: VNode, write: Function, next: Function, isRoot: boolean) {\n+  function renderNode (\n+    node: VNode,\n+    write: Function,\n+    next: Function,\n+    isRoot: boolean\n+  ) {\n     if (node.componentOptions) {\n       const child = createComponentInstanceForVnode(node)\n       renderNode(child._render(), write, next, isRoot)\n@@ -21,7 +26,12 @@ export function createRenderFunction (\n     }\n   }\n \n-  function renderElement (el: VNode, write: Function, next: Function, isRoot: boolean) {\n+  function renderElement (\n+    el: VNode,\n+    write: Function,\n+    next: Function,\n+    isRoot: boolean\n+  ) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}\n@@ -81,7 +91,11 @@ export function createRenderFunction (\n     return markup + '>'\n   }\n \n-  return function render (component: Component, write: Function, done: Function) {\n+  return function render (\n+    component: Component,\n+    write: (text: string, next: Function) => void,\n+    done: Function\n+  ) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "1b7ab89a5deb49fbdaec8fb474108863714f99a7",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -1,6 +1,5 @@\n /* @flow */\n \n-import type Vue from 'core/instance/index'\n import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n@@ -82,7 +81,7 @@ export function createRenderFunction (\n     return markup + '>'\n   }\n \n-  return function render (component: Vue, write: Function, done: Function) {\n+  return function render (component: Component, write: Function, done: Function) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "a953bdeeb642fafb0a5426f54f68026d26fe345f",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,7 +5,7 @@ import type VNode from '../vdom/vnode'\n import createElement from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n-import { bind, remove, isArray, isObject, renderString } from 'shared/util'\n+import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n \n export const renderState = {\n@@ -69,7 +69,7 @@ export function renderMixin (Vue: Class<Vue>) {\n     render: () => VNode\n   ): ?Array<VNode> {\n     let ret: ?Array<VNode>, i, l, keys, key\n-    if (isArray(val)) {\n+    if (Array.isArray(val)) {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n         ret[i] = render(val[i], i, i)"
            },
            {
                "commitId": "354ea616b5ec4826e23a88465e404fd3b382d9f4",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -1,5 +1,7 @@\n /* @flow */\n \n+import type Vue from 'core/instance/index'\n+import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n export function createRenderFunction ("
            },
            {
                "commitId": "6d712753d8982d587d1dcfdbce2833f19f0b5a26",
                "additions": 17,
                "deletions": 10,
                "patch": "@@ -1,7 +1,13 @@\n+/* @flow */\n+\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-export function createRenderFunction (modules, directives, isUnaryTag) {\n-  function renderNode (node, write, next, isRoot) {\n+export function createRenderFunction (\n+  modules: Array<Function>,\n+  directives: Object,\n+  isUnaryTag: Function\n+) {\n+  function renderNode (node: VNode, write: Function, next: Function, isRoot: boolean) {\n     if (node.componentOptions) {\n       const child = createComponentInstanceForVnode(node)\n       renderNode(child._render(), write, next, isRoot)\n@@ -14,7 +20,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  function renderElement (el, write, next, isRoot) {\n+  function renderElement (el: VNode, write: Function, next: Function, isRoot: boolean) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}\n@@ -27,27 +33,28 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     } else if (!el.children || !el.children.length) {\n       write(startTag + endTag, next)\n     } else {\n+      const children: Array<VNode> = el.children || []\n       write(startTag, () => {\n-        const total = el.children.length\n+        const total = children.length\n         let rendered = 0\n \n-        function renderChild (child) {\n+        function renderChild (child: VNode) {\n           renderNode(child, write, () => {\n             rendered++\n             if (rendered < total) {\n-              renderChild(el.children[rendered])\n+              renderChild(children[rendered])\n             } else {\n               write(endTag, next)\n             }\n-          })\n+          }, false)\n         }\n \n-        renderChild(el.children[0])\n+        renderChild(children[0])\n       })\n     }\n   }\n \n-  function renderStartingTag (node) {\n+  function renderStartingTag (node: VNode) {\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -73,7 +80,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     return markup + '>'\n   }\n \n-  return function render (component, write, done) {\n+  return function render (component: Vue, write: Function, done: Function) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "76d06ba422e32303f906941fe0d4f19e51b30720",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -1,3 +1,4 @@\n+import config from '../config'\n import createElement from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n@@ -25,6 +26,12 @@ export function renderMixin (Vue) {\n     nextTick(fn, this)\n   }\n \n+  Object.defineProperty(Vue.prototype, '$isServer', {\n+    get () {\n+      return config._isServer\n+    }\n+  })\n+\n   Vue.prototype._render = function () {\n     if (!this._mounted) {\n       // render static sub-trees for once on initial render"
            },
            {
                "commitId": "6593be9f75ea229e71e5b0530bb0f27aeee57afc",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,4 +1,5 @@\n import createElement from '../vdom/create-element'\n+import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n@@ -38,7 +39,7 @@ export function renderMixin (Vue) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(this._renderProxy)\n+    const vnode = render.call(this._renderProxy) || emptyVNode\n     // set parent\n     vnode.parent = _parentVnode\n     // restore render state"
            },
            {
                "commitId": "8172e7e25728a696df32df063443cf3d7cc8029b",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -74,7 +74,6 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n   }\n \n   return function render (component, write, done) {\n-    component._renderStaticTrees()\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "8f5a32b91cca7901c47f27d983649d00eef35609",
                "additions": 4,
                "deletions": 19,
                "patch": "@@ -1,25 +1,10 @@\n+import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n+\n export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n-      const options = {\n-        parent,\n-        propsData,\n-        _parentVnode: node,\n-        _parentListeners: listeners,\n-        _renderChildren: children\n-      }\n-      // check inline-template render functions\n-      const inlineTemplate = node.data.inlineTemplate\n-      if (inlineTemplate) {\n-        options.render = inlineTemplate.render\n-        options.staticRenderFns = inlineTemplate.staticRenderFns\n-      }\n-      const child = new Ctor(options)\n-      child._renderStaticTrees()\n-      const childRoot = child._render()\n-      childRoot.parent = node\n-      renderNode(childRoot, write, next, isRoot)\n+      const child = createComponentInstanceForVnode(node)\n+      renderNode(child._render(), write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)"
            },
            {
                "commitId": "2b7c26d108b31e0cf91f4931fe5b19e77f75bb7e",
                "additions": 31,
                "deletions": 8,
                "patch": "@@ -1,5 +1,3 @@\n-import { renderStartingTag } from './render-starting-tag'\n-\n export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n@@ -18,11 +16,10 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n         options.staticRenderFns = inlineTemplate.staticRenderFns\n       }\n       const child = new Ctor(options)\n-      child._mount = () => {\n-        child._renderStaticTrees()\n-        renderNode(child._render(), write, next)\n-      }\n-      child.$mount(node.elm)\n+      child._renderStaticTrees()\n+      const childRoot = child._render()\n+      childRoot.parent = node\n+      renderNode(childRoot, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -38,7 +35,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n       if (!el.data.attrs) el.data.attrs = {}\n       el.data.attrs['server-rendered'] = 'true'\n     }\n-    const startTag = renderStartingTag(el, modules, directives)\n+    const startTag = renderStartingTag(el)\n     const endTag = `</${el.tag}>`\n     if (isUnaryTag(el.tag)) {\n       write(startTag, next)\n@@ -65,6 +62,32 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     }\n   }\n \n+  function renderStartingTag (node) {\n+    let markup = `<${node.tag}`\n+    if (node.data) {\n+      // check directives\n+      const dirs = node.data.directives\n+      if (dirs) {\n+        for (let i = 0; i < dirs.length; i++) {\n+          const dirRenderer = directives[dirs[i].name]\n+          if (dirRenderer) {\n+            // directives mutate the node's data\n+            // which then gets rendered by modules\n+            dirRenderer(node, dirs[i])\n+          }\n+        }\n+      }\n+      // apply other modules\n+      for (let i = 0; i < modules.length; i++) {\n+        const res = modules[i](node)\n+        if (res) {\n+          markup += res\n+        }\n+      }\n+    }\n+    return markup + '>'\n+  }\n+\n   return function render (component, write, done) {\n     component._renderStaticTrees()\n     renderNode(component._render(), write, done, true)"
            },
            {
                "commitId": "430fe64bb5907cefc21b8f670f86f268f68e5ad8",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,6 +1,6 @@\n import { renderStartingTag } from './render-starting-tag'\n \n-export function render (modules, directives, isUnaryTag) {\n+export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n       const { Ctor, propsData, listeners, parent, children } = node.componentOptions"
            },
            {
                "commitId": "270b0ac021ee5bfff6b2ed1eacaf91a09f2a9d5e",
                "additions": 24,
                "deletions": 13,
                "patch": "@@ -1,16 +1,28 @@\n-import RenderStream from './render-stream'\n import { renderStartingTag } from './render-starting-tag'\n \n-export function createStreamingRenderer (modules, directives, isUnaryTag) {\n-  function renderComponent (component, write, next, isRoot) {\n-    component.$mount()\n-    renderNode(component._vnode, write, next, isRoot)\n-  }\n-\n+export function render (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      node.data.hook.init(node)\n-      renderComponent(node.child, write, next, isRoot)\n+      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n+      const options = {\n+        parent,\n+        propsData,\n+        _parentVnode: node,\n+        _parentListeners: listeners,\n+        _renderChildren: children\n+      }\n+      // check inline-template render functions\n+      const inlineTemplate = node.data.inlineTemplate\n+      if (inlineTemplate) {\n+        options.render = inlineTemplate.render\n+        options.staticRenderFns = inlineTemplate.staticRenderFns\n+      }\n+      const child = new Ctor(options)\n+      child._mount = () => {\n+        child._renderStaticTrees()\n+        renderNode(child._render(), write, next)\n+      }\n+      child.$mount(node.elm)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -53,9 +65,8 @@ export function createStreamingRenderer (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  return function renderToStream (component) {\n-    return new RenderStream((write, done) => {\n-      renderComponent(component, write, done, true)\n-    })\n+  return function render (component, write, done) {\n+    component._renderStaticTrees()\n+    renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "96f02660a2f72cf2b2f4087f51a24942f55af7dd",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,7 +1,7 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n-import { resolveAsset } from '../util/options'\n+import { resolveAsset, nextTick } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -21,6 +21,10 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  Vue.prototype.$nextTick = function (fn) {\n+    nextTick(fn, this)\n+  }\n+\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this"
            },
            {
                "commitId": "d89c674cb53128f21bac25962760fff8bd5917b5",
                "additions": 22,
                "deletions": 8,
                "patch": "@@ -1,15 +1,28 @@\n import { renderStartingTag } from './render-starting-tag'\n \n export function render (modules, directives, isUnaryTag) {\n-  function renderComponent (component, write, next, isRoot) {\n-    component.$mount()\n-    renderNode(component._vnode, write, next, isRoot)\n-  }\n-\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      node.data.hook.init(node)\n-      renderComponent(node.child, write, next, isRoot)\n+      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n+      const options = {\n+        parent,\n+        propsData,\n+        _parentVnode: node,\n+        _parentListeners: listeners,\n+        _renderChildren: children\n+      }\n+      // check inline-template render functions\n+      const inlineTemplate = node.data.inlineTemplate\n+      if (inlineTemplate) {\n+        options.render = inlineTemplate.render\n+        options.staticRenderFns = inlineTemplate.staticRenderFns\n+      }\n+      const child = new Ctor(options)\n+      child._mount = () => {\n+        child._renderStaticTrees()\n+        renderNode(child._render(), write, next)\n+      }\n+      child.$mount(node.elm)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -53,6 +66,7 @@ export function render (modules, directives, isUnaryTag) {\n   }\n \n   return function render (component, write, done) {\n-    renderComponent(component, write, done, true)\n+    component._renderStaticTrees()\n+    renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "a233e4dbfae51173aefc4a1329aa0415d632ca25",
                "additions": 3,
                "deletions": 6,
                "patch": "@@ -1,7 +1,6 @@\n-import RenderStream from './render-stream'\n import { renderStartingTag } from './render-starting-tag'\n \n-export function createStreamingRenderer (modules, directives, isUnaryTag) {\n+export function render (modules, directives, isUnaryTag) {\n   function renderComponent (component, write, next, isRoot) {\n     component.$mount()\n     renderNode(component._vnode, write, next, isRoot)\n@@ -53,9 +52,7 @@ export function createStreamingRenderer (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  return function renderToStream (component) {\n-    return new RenderStream((write, done) => {\n-      renderComponent(component, write, done, true)\n-    })\n+  return function render (component, write, done) {\n+    renderComponent(component, write, done, true)\n   }\n }"
            },
            {
                "commitId": "9cc9393e73750943b9a254f80a02110144ee0288",
                "additions": 10,
                "deletions": 2,
                "patch": "@@ -99,7 +99,8 @@ export function renderMixin (Vue) {\n function resolveSlots (vm, renderChildren) {\n   if (renderChildren) {\n     const children = flatten(renderChildren())\n-    const slots = { default: children }\n+    const slots = {}\n+    const defaultSlot = []\n     let i = children.length\n     let name, child\n     while (i--) {\n@@ -111,9 +112,16 @@ function resolveSlots (vm, renderChildren) {\n         } else {\n           slot.push(child)\n         }\n-        children.splice(i, 1)\n+      } else {\n+        defaultSlot.push(child)\n       }\n     }\n+    if (defaultSlot.length && !(\n+      defaultSlot.length === 1 &&\n+      defaultSlot[0].text === ' '\n+    )) {\n+      slots['default'] = defaultSlot\n+    }\n     vm.$slots = slots\n   }\n }"
            },
            {
                "commitId": "3aa7503472d1a2fbfd789a7df309102de49f8fcf",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -105,7 +105,7 @@ function resolveSlots (vm, renderChildren) {\n     while (i--) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n-        let slot = (slots[name] || (slots[name] = []))\n+        const slot = (slots[name] || (slots[name] = []))\n         if (child.tag === 'template') {\n           slot.push.apply(slot, child.children)\n         } else {"
            },
            {
                "commitId": "9ff87a357eba00e40d44a2d5a25f6ac44fca70b9",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -1,6 +1,7 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n+import { resolveAsset } from '../util/options'\n \n export const renderState = {\n   activeInstance: null\n@@ -42,6 +43,12 @@ export function renderMixin (Vue) {\n   // toString for mustaches\n   Vue.prototype.__toString__ = renderString\n \n+  // filter resolution helper\n+  const identity = _ => _\n+  Vue.prototype.__resolveFilter__ = function (id) {\n+    return resolveAsset(this.$options, 'filters', id, true) || identity\n+  }\n+\n   // render v-for\n   Vue.prototype.__renderList__ = function (val, render) {\n     let ret, i, l, keys, key"
            },
            {
                "commitId": "6d889c011680f231ed5036b9233f23764c43e16a",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -89,9 +89,9 @@ export function renderMixin (Vue) {\n   }\n }\n \n-function resolveSlots (vm, children) {\n-  if (children) {\n-    children = flatten(isArray(children) ? children : children())\n+function resolveSlots (vm, renderChildren) {\n+  if (renderChildren) {\n+    const children = flatten(renderChildren())\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "a347820518388ae8c83cf8c665823daebfbd0da8",
                "additions": 2,
                "deletions": 8,
                "patch": "@@ -1,6 +1,6 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n-import { bind, isArray, isObject } from '../util/index'\n+import { bind, isArray, isObject, renderString } from 'shared/util'\n \n export const renderState = {\n   activeInstance: null\n@@ -40,13 +40,7 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = createElement\n \n   // toString for mustaches\n-  Vue.prototype.__toString__ = function (val) {\n-    return val == null\n-      ? ''\n-      : typeof val === 'object'\n-        ? JSON.stringify(val, null, 2)\n-        : val\n-  }\n+  Vue.prototype.__toString__ = renderString\n \n   // render v-for\n   Vue.prototype.__renderList__ = function (val, render) {"
            },
            {
                "commitId": "f4a2afb3b33991c1694e8fcb7d62641c30eeaf53",
                "additions": 1,
                "deletions": 18,
                "patch": "@@ -1,6 +1,6 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n-import { bind, resolveAsset, isArray, isObject } from '../util/index'\n+import { bind, isArray, isObject } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -39,23 +39,6 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n-  Vue.prototype.__static__ = function (id) {\n-    return this._staticTrees[id]\n-  }\n-\n-  // resolve directive\n-  Vue.prototype.__resolveDirective__ = function (id) {\n-    return resolveAsset(this.$options, 'directives', id, true)\n-  }\n-\n-  // resolve transition\n-  Vue.prototype.__resolveTransition__ = function (id, appear) {\n-    const definition = id && typeof id === 'string'\n-      ? resolveAsset(this.$options, 'transitions', id) || id\n-      : id\n-    return { definition, appear, context: this }\n-  }\n-\n   // toString for mustaches\n   Vue.prototype.__toString__ = function (val) {\n     return val == null"
            },
            {
                "commitId": "d6ce314c35bcc2a05d30ed14f18b21b5b81d928d",
                "additions": 0,
                "deletions": 7,
                "patch": "@@ -1,7 +0,0 @@\n-import attrs from './modules/attrs'\n-import style from './modules/style'\n-import klass from './modules/class'\n-\n-export function render () {\n-\n-}"
            },
            {
                "commitId": "1a21db9c9aef437122de86cb2dbc30c1feff8166",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -0,0 +1,7 @@\n+import attrs from './modules/attrs'\n+import style from './modules/style'\n+import klass from './modules/class'\n+\n+export function render () {\n+\n+}"
            },
            {
                "commitId": "955e2f839175fadbd0218f7b78c48ebbbcca6349",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "b882844f6ed8fb9e7d0ba493fcdd10a95d17b497",
                "additions": 5,
                "deletions": 0,
                "patch": "@@ -9,6 +9,7 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n+  vm._staticTrees = null\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -38,6 +39,10 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n+  Vue.prototype.__static__ = function (id) {\n+    return this._staticTrees[id]\n+  }\n+\n   // resolve directive\n   Vue.prototype.__resolveDirective__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)"
            },
            {
                "commitId": "6c8182ee4d3e60ee46d6fece9a21c7f59ae0e61c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -89,7 +89,7 @@ export function renderMixin (Vue) {\n     const refs = this.$refs\n     if (remove) {\n       if (vFor) {\n-        refs[key].$remove(ref)\n+        remove(refs[key], ref)\n       } else {\n         refs[key] = undefined\n       }"
            },
            {
                "commitId": "732c10a7e9559d26b0a54681d2bd90ddad63da52",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -44,10 +44,11 @@ export function renderMixin (Vue) {\n   }\n \n   // resolve transition\n-  Vue.prototype.__resolveTransition__ = function (id) {\n-    return id && typeof id === 'string'\n+  Vue.prototype.__resolveTransition__ = function (id, appear) {\n+    const definition = id && typeof id === 'string'\n       ? resolveAsset(this.$options, 'transitions', id) || id\n       : id\n+    return { definition, appear, context: this }\n   }\n \n   // toString for mustaches"
            },
            {
                "commitId": "7f7040c156951b392fb6ef75d15be65fd83007a0",
                "additions": 18,
                "deletions": 48,
                "patch": "@@ -1,13 +1,6 @@\n-import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten, updateListeners } from '../vdom/helpers'\n-import {\n-  bind,\n-  resolveAsset,\n-  isArray,\n-  isObject,\n-  validateProp\n-} from '../util/index'\n+import { flatten } from '../vdom/helpers'\n+import { bind, resolveAsset, isArray, isObject } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -26,6 +19,22 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  Vue.prototype._render = function () {\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const { render, _renderChildren } = this.$options\n+    // resolve slots. becaues slots are rendered in parent scope,\n+    // we set the activeInstance to parent.\n+    if (_renderChildren) {\n+      resolveSlots(this, _renderChildren)\n+    }\n+    // render self\n+    const vnode = render.call(this._renderProxy)\n+    // restore render state\n+    renderState.activeInstance = prev\n+    return vnode\n+  }\n+\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n@@ -95,45 +104,6 @@ export function renderMixin (Vue) {\n       }\n     }\n   }\n-\n-  Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, children) {\n-    this.$options._parentVnode = parentVnode\n-    this.$options._renderChildren = children\n-    // update props\n-    if (propsData && this.$options.props) {\n-      observerState.shouldConvert = false\n-      const propKeys = this.$options.propKeys\n-      for (let i = 0; i < propKeys.length; i++) {\n-        let key = propKeys[i]\n-        this[key] = validateProp(this, key, propsData)\n-      }\n-      observerState.shouldConvert = true\n-    }\n-    // update listeners\n-    if (listeners) {\n-      const oldListeners = this.$options._parentListeners\n-      this.$options._parentListeners = listeners\n-      updateListeners(listeners, oldListeners || {}, (event, handler) => {\n-        this.$on(event, handler)\n-      })\n-    }\n-  }\n-\n-  Vue.prototype._render = function () {\n-    const prev = renderState.activeInstance\n-    renderState.activeInstance = this\n-    const { render, _renderChildren } = this.$options\n-    // resolve slots. becaues slots are rendered in parent scope,\n-    // we set the activeInstance to parent.\n-    if (_renderChildren) {\n-      resolveSlots(this, _renderChildren)\n-    }\n-    // render self\n-    const vnode = render.call(this._renderProxy)\n-    // restore render state\n-    renderState.activeInstance = prev\n-    return vnode\n-  }\n }\n \n function resolveSlots (vm, children) {"
            },
            {
                "commitId": "23c253012f8f58848c33445f4f8ea045453029bf",
                "additions": 10,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten } from '../vdom/helpers'\n+import { flatten, updateListeners } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n@@ -96,7 +96,7 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._updateFromParent = function (propsData, parentVnode, children) {\n+  Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, children) {\n     this.$options._parentVnode = parentVnode\n     this.$options._renderChildren = children\n     // update props\n@@ -109,6 +109,14 @@ export function renderMixin (Vue) {\n       }\n       observerState.shouldConvert = true\n     }\n+    // update listeners\n+    if (listeners) {\n+      const oldListeners = this.$options._parentListeners\n+      this.$options._parentListeners = listeners\n+      updateListeners(listeners, oldListeners || {}, (event, handler) => {\n+        this.$on(event, handler)\n+      })\n+    }\n   }\n \n   Vue.prototype._render = function () {"
            },
            {
                "commitId": "1b9343f7e0d3930d85419b97a03998583297c083",
                "additions": 13,
                "deletions": 133,
                "patch": "@@ -1,12 +1,12 @@\n import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten, updateListeners } from '../vdom/helpers'\n+import { flatten } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n   isArray,\n   isObject,\n-  getPropValue\n+  validateProp\n } from '../util/index'\n \n export const renderState = {\n@@ -96,40 +96,32 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._updateFromParent = function (parentData, children, key) {\n-    const oldParentData = this.$options._renderData\n-    this.$options._renderData = parentData\n+  Vue.prototype._updateFromParent = function (propsData, parentVnode, children) {\n+    this.$options._parentVnode = parentVnode\n     this.$options._renderChildren = children\n-    // update props and listeners\n-    if (parentData) {\n-      updateEvents(this, parentData, oldParentData)\n-      // if any prop has changed it would trigger and queue an update,\n-      // but if no props changed, nothing happens\n-      const propsChanged = updateProps(this, parentData)\n-      // diff parent data (attrs on the placeholder) and queue update\n-      // if anything changed. only do this if props didn't change, because\n-      // if props changed then an update has already been queued.\n-      if (!propsChanged && parentDataChanged(parentData, oldParentData)) {\n-        this.$forceUpdate()\n+    // update props\n+    if (propsData && this.$options.props) {\n+      observerState.shouldConvert = false\n+      const propKeys = this.$options.propKeys\n+      for (let i = 0; i < propKeys.length; i++) {\n+        let key = propKeys[i]\n+        this[key] = validateProp(this, key, propsData)\n       }\n+      observerState.shouldConvert = true\n     }\n   }\n \n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const { render, _renderData, _renderChildren } = this.$options\n+    const { render, _renderChildren } = this.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n     const vnode = render.call(this._renderProxy)\n-    // update parent data\n-    if (_renderData) {\n-      mergeParentData(this, vnode.data, _renderData)\n-    }\n     // restore render state\n     renderState.activeInstance = prev\n     return vnode\n@@ -157,115 +149,3 @@ function resolveSlots (vm, children) {\n     vm.$slots = slots\n   }\n }\n-\n-const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives', 'transition']\n-function parentDataChanged (data, oldData) {\n-  let key, old, cur, i, l, j, k\n-  for (i = 0, l = keysToDiff.length; i < l; i++) {\n-    key = keysToDiff[i]\n-    cur = data[key]\n-    old = oldData[key]\n-    if (!old) {\n-      if (!cur) {\n-        continue\n-      } else {\n-        return true\n-      }\n-    }\n-    if (isArray(old)) {\n-      if (!isArray(cur)) return true\n-      if (cur.length !== old.length) return true\n-      for (j = 0, k = old.length; j < k; j++) {\n-        if (isObject(old[i])) {\n-          if (!isObject(cur[i])) return true\n-          if (diffObject(cur, old)) return true\n-        } else if (old[i] !== cur[i]) {\n-          return true\n-        }\n-      }\n-    } else if (diffObject(cur, old)) {\n-      return true\n-    }\n-  }\n-  return false\n-}\n-\n-function diffObject (cur, old) {\n-  for (let key in old) {\n-    if (cur[key] !== old[key]) return true\n-  }\n-}\n-\n-function mergeParentData (vm, data, parentData) {\n-  const props = vm.$options.props\n-  if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = {})\n-    for (let key in parentData.attrs) {\n-      if (!props || !props[key]) {\n-        attrs[key] = parentData.attrs[key]\n-      }\n-    }\n-  }\n-  if (parentData.props) {\n-    const props = data.props || (data.props = {})\n-    for (let key in parentData.props) {\n-      if (!props || !props[key]) {\n-        props[key] = parentData.props[key]\n-      }\n-    }\n-  }\n-  if (parentData.staticClass) {\n-    data.staticClass = data.staticClass\n-      ? data.staticClass + ' ' + parentData.staticClass\n-      : parentData.staticClass\n-  }\n-  if (parentData.class) {\n-    if (!data.class) {\n-      data.class = parentData.class\n-    } else {\n-      data.class = (isArray(data.class) ? data.class : []).concat(parentData.class)\n-    }\n-  }\n-  if (parentData.style) {\n-    if (!data.style) {\n-      data.style = parentData.style\n-    } else {\n-      data.style = (isArray(data.style) ? data.style : []).concat(parentData.style)\n-    }\n-  }\n-  if (parentData.directives) {\n-    data.directives = parentData.directives.concat(data.directives || [])\n-  }\n-  if (parentData.transition != null) {\n-    data.transition = parentData.transition\n-  }\n-}\n-\n-function updateProps (vm, data) {\n-  let changed = false\n-  if (data.attrs || data.props) {\n-    let keys = vm.$options.propKeys\n-    if (keys) {\n-      observerState.shouldConvert = false\n-      for (let i = 0; i < keys.length; i++) {\n-        let key = keys[i]\n-        let oldVal = vm[key]\n-        let newVal = getPropValue(data, key, vm)\n-        if (oldVal !== newVal) {\n-          vm[key] = newVal\n-          changed = true\n-        }\n-      }\n-      observerState.shouldConvert = true\n-    }\n-  }\n-  return changed\n-}\n-\n-function updateEvents (vm, data, oldData) {\n-  if (data.on) {\n-    updateListeners(data.on, oldData.on || {}, (event, handler) => {\n-      vm.$on(event, handler)\n-    })\n-  }\n-}"
            },
            {
                "commitId": "7b97d97e2fff49c84fc5048eda9d5ab8daf0ec7f",
                "additions": 4,
                "deletions": 1,
                "patch": "@@ -158,7 +158,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives']\n+const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives', 'transition']\n function parentDataChanged (data, oldData) {\n   let key, old, cur, i, l, j, k\n   for (i = 0, l = keysToDiff.length; i < l; i++) {\n@@ -236,6 +236,9 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.concat(data.directives || [])\n   }\n+  if (parentData.transition != null) {\n+    data.transition = parentData.transition\n+  }\n }\n \n function updateProps (vm, data) {"
            },
            {
                "commitId": "52ac04d2355a91957388a4bee336fa044d9ad57c",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -34,6 +34,13 @@ export function renderMixin (Vue) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  // resolve transition\n+  Vue.prototype.__resolveTransition__ = function (id) {\n+    return id && typeof id === 'string'\n+      ? resolveAsset(this.$options, 'transitions', id) || id\n+      : id\n+  }\n+\n   // toString for mustaches\n   Vue.prototype.__toString__ = function (val) {\n     return val == null"
            },
            {
                "commitId": "4512406f775a6c258fa13400358d25d8a37892c7",
                "additions": 3,
                "deletions": 27,
                "patch": "@@ -1,11 +1,6 @@\n-import { callHook } from './lifecycle'\n import { observerState } from '../observer/index'\n-import {\n-  createElement,\n-  patch,\n-  updateListeners,\n-  flatten\n-} from '../vdom/index'\n+import createElement from '../vdom/create-element'\n+import { flatten, updateListeners } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n@@ -24,7 +19,7 @@ export function initRender (vm) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(vm.__h__, vm)\n+  vm.$createElement = bind(createElement, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -94,21 +89,6 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._update = function (vnode) {\n-    if (this._mounted) {\n-      callHook(this, 'beforeUpdate')\n-    }\n-    if (!this._vnode) {\n-      this.$el = patch(this.$el, vnode)\n-    } else {\n-      this.$el = patch(this._vnode, vnode)\n-    }\n-    this._vnode = vnode\n-    if (this._mounted) {\n-      callHook(this, 'updated')\n-    }\n-  }\n-\n   Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n     this.$options._renderData = parentData\n@@ -147,10 +127,6 @@ export function renderMixin (Vue) {\n     renderState.activeInstance = prev\n     return vnode\n   }\n-\n-  Vue.prototype.$forceUpdate = function () {\n-    this._watcher.update()\n-  }\n }\n \n function resolveSlots (vm, children) {"
            },
            {
                "commitId": "a1ebdbbb7a34f842d090e208863be7168eaa9803",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -138,7 +138,7 @@ export function renderMixin (Vue) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(this)\n+    const vnode = render.call(this._renderProxy)\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)"
            },
            {
                "commitId": "c13bbcb32794fbb443a4f86d3b0526951ca3f7ba",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -251,7 +251,7 @@ function mergeParentData (vm, data, parentData) {\n     }\n   }\n   if (parentData.directives) {\n-    data.directives = parentData.directives.conact(data.directives || [])\n+    data.directives = parentData.directives.concat(data.directives || [])\n   }\n }\n "
            },
            {
                "commitId": "86bc00e0e57076a1a7a6d64ddb3f97d1a455be46",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -8,7 +8,6 @@ import {\n } from '../vdom/index'\n import {\n   bind,\n-  extend,\n   resolveAsset,\n   isArray,\n   isObject,\n@@ -248,7 +247,7 @@ function mergeParentData (vm, data, parentData) {\n     if (!data.style) {\n       data.style = parentData.style\n     } else {\n-      extend(data.style, parentData.style)\n+      data.style = (isArray(data.style) ? data.style : []).concat(parentData.style)\n     }\n   }\n   if (parentData.directives) {"
            },
            {
                "commitId": "24ef7f489a0f2452266974b1f01648e504e7bc96",
                "additions": 1,
                "deletions": 4,
                "patch": "@@ -209,10 +209,7 @@ function parentDataChanged (data, oldData) {\n }\n \n function diffObject (cur, old) {\n-  const keys = Object.keys(old)\n-  let i, l, key\n-  for (i = 0, l = keys.length; i < l; i++) {\n-    key = keys[i]\n+  for (let key in old) {\n     if (cur[key] !== old[key]) return true\n   }\n }"
            },
            {
                "commitId": "368b2ff03a61fa4879ea4c69ba4b9fa71387d298",
                "additions": 27,
                "deletions": 3,
                "patch": "@@ -36,21 +36,45 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = createElement\n \n   // resolve directive\n-  Vue.prototype.__d__ = function (id) {\n+  Vue.prototype.__resolveDirective__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n   // toString for mustaches\n-  Vue.prototype.__s__ = function (val) {\n+  Vue.prototype.__toString__ = function (val) {\n     return val == null\n       ? ''\n       : typeof val === 'object'\n         ? JSON.stringify(val, null, 2)\n         : val\n   }\n \n+  // render v-for\n+  Vue.prototype.__renderList__ = function (val, render) {\n+    let ret, i, l, keys, key\n+    if (isArray(val)) {\n+      ret = new Array(val.length)\n+      for (i = 0, l = val.length; i < l; i++) {\n+        ret[i] = render(val[i], i, i)\n+      }\n+    } else if (typeof val === 'number') {\n+      ret = new Array(val)\n+      for (i = 0; i < val; i++) {\n+        ret[i] = render(i + 1, i, i)\n+      }\n+    } else if (isObject(val)) {\n+      keys = Object.keys(val)\n+      ret = new Array(keys.length)\n+      for (i = 0, l = keys.length; i < l; i++) {\n+        key = keys[i]\n+        ret[i] = render(val[key], i, key)\n+      }\n+    }\n+    return ret\n+  }\n+\n   // register ref\n-  Vue.prototype.__r__ = function (key, ref, vFor, remove) {\n+  Vue.prototype.__registerRef__ = function (key, ref, vFor, remove) {\n     const refs = this.$refs\n     if (remove) {\n       if (vFor) {"
            },
            {
                "commitId": "d6bef7957541e38cec3051eb4d8c54bda3280eaf",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -1,4 +1,5 @@\n import { callHook } from './lifecycle'\n+import { observerState } from '../observer/index'\n import {\n   createElement,\n   patch,\n@@ -197,15 +198,15 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.attrs) {\n     const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n-      if (!props[key]) {\n+      if (!props || !props[key]) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n     const props = data.props || (data.props = {})\n     for (let key in parentData.props) {\n-      if (!props[key]) {\n+      if (!props || !props[key]) {\n         props[key] = parentData.props[key]\n       }\n     }\n@@ -239,6 +240,7 @@ function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n     let keys = vm.$options.propKeys\n     if (keys) {\n+      observerState.shouldConvert = false\n       for (let i = 0; i < keys.length; i++) {\n         let key = keys[i]\n         let oldVal = vm[key]\n@@ -248,6 +250,7 @@ function updateProps (vm, data) {\n           changed = true\n         }\n       }\n+      observerState.shouldConvert = true\n     }\n   }\n   return changed"
            },
            {
                "commitId": "7b2dc500b7a06381716639acea21d0fcf3b8b732",
                "additions": 22,
                "deletions": 0,
                "patch": "@@ -48,6 +48,28 @@ export function renderMixin (Vue) {\n         : val\n   }\n \n+  // register ref\n+  Vue.prototype.__r__ = function (key, ref, vFor, remove) {\n+    const refs = this.$refs\n+    if (remove) {\n+      if (vFor) {\n+        refs[key].$remove(ref)\n+      } else {\n+        refs[key] = undefined\n+      }\n+    } else {\n+      if (vFor) {\n+        if (refs[key]) {\n+          refs[key].push(ref)\n+        } else {\n+          refs[key] = [ref]\n+        }\n+      } else {\n+        refs[key] = ref\n+      }\n+    }\n+  }\n+\n   Vue.prototype._update = function (vnode) {\n     if (this._mounted) {\n       callHook(this, 'beforeUpdate')"
            },
            {
                "commitId": "c2ad444982541faa8b7e0a652e68d4d0f6ef4bc6",
                "additions": 6,
                "deletions": 18,
                "patch": "@@ -6,6 +6,7 @@ import {\n   flatten\n } from '../vdom/index'\n import {\n+  bind,\n   extend,\n   resolveAsset,\n   isArray,\n@@ -14,14 +15,16 @@ import {\n } from '../util/index'\n \n export const renderState = {\n-  activeInstance: null,\n-  context: null\n+  activeInstance: null\n }\n \n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm.$slots = {}\n+  // bind the public createElement fn to this instance\n+  // so that we get proper render context inside it.\n+  vm.$createElement = bind(vm.__h__, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -79,21 +82,6 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  /**\n-   * Call a render function with this instance as the context.\n-   * This is used to wrap all children thunks in codegen.\n-   */\n-\n-  Vue.prototype._renderWithContext = function (fn) {\n-    return () => {\n-      const prev = renderState.context\n-      renderState.context = this\n-      const children = flatten(fn())\n-      renderState.context = prev\n-      return children\n-    }\n-  }\n-\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n@@ -121,7 +109,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children()\n+    children = flatten(isArray(children) ? children : children())\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "78e82bb8e454fcac088f4b40ec66e424c84dab89",
                "additions": 14,
                "deletions": 3,
                "patch": "@@ -1,6 +1,17 @@\n-import { extend, resolveAsset, isArray, isObject, getPropValue } from '../util/index'\n-import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n+import {\n+  createElement,\n+  patch,\n+  updateListeners,\n+  flatten\n+} from '../vdom/index'\n+import {\n+  extend,\n+  resolveAsset,\n+  isArray,\n+  isObject,\n+  getPropValue\n+} from '../util/index'\n \n export const renderState = {\n   activeInstance: null,\n@@ -110,7 +121,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children().slice()\n+    children = children()\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "d3c64fa6a67faf610466277caf9c839dd11d1934",
                "additions": 13,
                "deletions": 5,
                "patch": "@@ -55,13 +55,14 @@ export function renderMixin (Vue) {\n     this.$options._renderChildren = children\n     // update props and listeners\n     if (parentData) {\n+      updateEvents(this, parentData, oldParentData)\n       // if any prop has changed it would trigger and queue an update,\n       // but if no props changed, nothing happens\n-      updateProps(this, parentData)\n-      updateEvents(this, parentData, oldParentData)\n+      const propsChanged = updateProps(this, parentData)\n       // diff parent data (attrs on the placeholder) and queue update\n-      // if anything changed\n-      if (parentDataChanged(parentData, oldParentData)) {\n+      // if anything changed. only do this if props didn't change, because\n+      // if props changed then an update has already been queued.\n+      if (!propsChanged && parentDataChanged(parentData, oldParentData)) {\n         this.$forceUpdate()\n       }\n     }\n@@ -213,15 +214,22 @@ function mergeParentData (vm, data, parentData) {\n }\n \n function updateProps (vm, data) {\n+  let changed = false\n   if (data.attrs || data.props) {\n     let keys = vm.$options.propKeys\n     if (keys) {\n       for (let i = 0; i < keys.length; i++) {\n         let key = keys[i]\n-        vm[key] = getPropValue(data, key, vm)\n+        let oldVal = vm[key]\n+        let newVal = getPropValue(data, key, vm)\n+        if (oldVal !== newVal) {\n+          vm[key] = newVal\n+          changed = true\n+        }\n       }\n     }\n   }\n+  return changed\n }\n \n function updateEvents (vm, data, oldData) {"
            },
            {
                "commitId": "d2ca5c5e8ad7b10b1a886c3acc50f4936bffa102",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,4 +1,4 @@\n-import { extend, resolveAsset, hasOwn, isArray, isObject, getPropValue } from '../util/index'\n+import { extend, resolveAsset, isArray, isObject, getPropValue } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n "
            },
            {
                "commitId": "91455a6618c4c34e5d8b3f8299f427d3b612c142",
                "additions": 14,
                "deletions": 11,
                "patch": "@@ -1,7 +1,6 @@\n-import { extend, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n+import { extend, resolveAsset, hasOwn, isArray, isObject, getPropValue } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n-import { getPropValue } from './state'\n \n export const renderState = {\n   activeInstance: null,\n@@ -60,11 +59,11 @@ export function renderMixin (Vue) {\n       // but if no props changed, nothing happens\n       updateProps(this, parentData)\n       updateEvents(this, parentData, oldParentData)\n-    }\n-    // diff parent data (attrs on the placeholder) and queue update\n-    // if anything changed\n-    if (parentDataChanged(parentData, oldParentData)) {\n-      this.$forceUpdate()\n+      // diff parent data (attrs on the placeholder) and queue update\n+      // if anything changed\n+      if (parentDataChanged(parentData, oldParentData)) {\n+        this.$forceUpdate()\n+      }\n     }\n   }\n \n@@ -176,15 +175,15 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.attrs) {\n     const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n-      if (!hasOwn(props, key)) {\n+      if (!props[key]) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n     const props = data.props || (data.props = {})\n     for (let key in parentData.props) {\n-      if (!hasOwn(props, key)) {\n+      if (!props[key]) {\n         props[key] = parentData.props[key]\n       }\n     }\n@@ -215,8 +214,12 @@ function mergeParentData (vm, data, parentData) {\n \n function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n-    for (let key in vm.$options.props) {\n-      vm[key] = getPropValue(data, key)\n+    let keys = vm.$options.propKeys\n+    if (keys) {\n+      for (let i = 0; i < keys.length; i++) {\n+        let key = keys[i]\n+        vm[key] = getPropValue(data, key, vm)\n+      }\n     }\n   }\n }"
            },
            {
                "commitId": "403e2380b8d3c430ac67e6a072f159bcf8c00b5e",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -21,13 +21,18 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n+  // resolve directive\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  // toString for mustaches\n   Vue.prototype.__s__ = function (val) {\n-    console.log(val)\n-    return typeof val === 'string' ? val : JSON.stringify(val)\n+    return val == null\n+      ? ''\n+      : typeof val === 'object'\n+        ? JSON.stringify(val, null, 2)\n+        : val\n   }\n \n   Vue.prototype._update = function (vnode) {"
            },
            {
                "commitId": "09a4ba84a9e4a0219423c85599fea87c1d34737d",
                "additions": 6,
                "deletions": 4,
                "patch": "@@ -25,6 +25,11 @@ export function renderMixin (Vue) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  Vue.prototype.__s__ = function (val) {\n+    console.log(val)\n+    return typeof val === 'string' ? val : JSON.stringify(val)\n+  }\n+\n   Vue.prototype._update = function (vnode) {\n     if (this._mounted) {\n       callHook(this, 'beforeUpdate')\n@@ -42,7 +47,6 @@ export function renderMixin (Vue) {\n \n   Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n-    this.$options._renderKey = key\n     this.$options._renderData = parentData\n     this.$options._renderChildren = children\n     // update props and listeners\n@@ -77,16 +81,14 @@ export function renderMixin (Vue) {\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const { render, _renderKey, _renderData, _renderChildren } = this.$options\n+    const { render, _renderData, _renderChildren } = this.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n     const vnode = render.call(this)\n-    // set key\n-    vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)"
            },
            {
                "commitId": "e666fb4ee1ee8e15f94d3065ead7a213fed98253",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -12,15 +12,15 @@ export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm.$slots = {}\n-  const el = vm.$options.el\n-  if (el) {\n-    vm.$mount(el)\n+  if (vm.$options.el) {\n+    vm.$mount(vm.$options.el)\n   }\n }\n \n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n+\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }"
            },
            {
                "commitId": "2ef8d1028be7b9e80c4f3b53c8c8993599c28a9e",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -130,8 +130,13 @@ function parentDataChanged (data, oldData) {\n     key = keysToDiff[i]\n     cur = data[key]\n     old = oldData[key]\n-    if (key === 'on') continue\n-    if (!cur) return true\n+    if (!old) {\n+      if (!cur) {\n+        continue\n+      } else {\n+        return true\n+      }\n+    }\n     if (isArray(old)) {\n       if (!isArray(cur)) return true\n       if (cur.length !== old.length) return true"
            },
            {
                "commitId": "32ca8e7722cc46e0e24b812c893c5c7dc2108b8f",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -123,11 +123,11 @@ function resolveSlots (vm, children) {\n   }\n }\n \n+const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives']\n function parentDataChanged (data, oldData) {\n-  const keys = Object.keys(oldData)\n   let key, old, cur, i, l, j, k\n-  for (i = 0, l = keys.length; i < l; i++) {\n-    key = keys[i]\n+  for (i = 0, l = keysToDiff.length; i < l; i++) {\n+    key = keysToDiff[i]\n     cur = data[key]\n     old = oldData[key]\n     if (key === 'on') continue"
            },
            {
                "commitId": "0c6c748d9df45341b5c787e9401c32536161feca",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -40,7 +40,7 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._tryUpdate = function (parentData, children, key) {\n+  Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n     this.$options._renderKey = key\n     this.$options._renderData = parentData\n@@ -54,7 +54,7 @@ export function renderMixin (Vue) {\n     }\n     // diff parent data (attrs on the placeholder) and queue update\n     // if anything changed\n-    if (diffParentData(parentData, oldParentData)) {\n+    if (parentDataChanged(parentData, oldParentData)) {\n       this.$forceUpdate()\n     }\n   }\n@@ -123,7 +123,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function diffParentData (data, oldData) {\n+function parentDataChanged (data, oldData) {\n   const keys = Object.keys(oldData)\n   let key, old, cur, i, l, j, k\n   for (i = 0, l = keys.length; i < l; i++) {"
            },
            {
                "commitId": "8ff21757a1a3eb10c9c239b2b92eff9711aa7b21",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -212,7 +212,6 @@ function updateProps (vm, data) {\n function updateEvents (vm, data, oldData) {\n   if (data.on) {\n     updateListeners(data.on, oldData.on || {}, (event, handler) => {\n-      console.log(11)\n       vm.$on(event, handler)\n     })\n   }"
            },
            {
                "commitId": "4d508dcbfa440459fb6bc331537c0c90278aa3a8",
                "additions": 1,
                "deletions": 22,
                "patch": "@@ -1,5 +1,4 @@\n-import Watcher from '../observer/watcher'\n-import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n+import { extend, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -97,26 +96,6 @@ export function renderMixin (Vue) {\n     return vnode\n   }\n \n-  Vue.prototype.$mount = function (el) {\n-    callHook(this, 'beforeMount')\n-    el = this.$el = el && query(el)\n-    if (el) {\n-      // clean element\n-      el.innerHTML = ''\n-      if (el.hasAttributes()) {\n-        const attrs = el.attributes\n-        for (let i = 0, l = attrs.length; i < l; i++) {\n-          el.removeAttribute(attrs[i].name)\n-        }\n-      }\n-    }\n-    this._watcher = new Watcher(this, this._render, this._update)\n-    this._update(this._watcher.value)\n-    callHook(this, 'mounted')\n-    this._mounted = true\n-    return this\n-  }\n-\n   Vue.prototype.$forceUpdate = function () {\n     this._watcher.update()\n   }"
            },
            {
                "commitId": "af1f1d349f8276d3fe0c38af34eafab2b0c50424",
                "additions": 8,
                "deletions": 7,
                "patch": "@@ -1,6 +1,6 @@\n import Watcher from '../observer/watcher'\n import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n-import { createElement, patch, updateListeners } from '../vdom/index'\n+import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n \n@@ -48,13 +48,14 @@ export function renderMixin (Vue) {\n     this.$options._renderChildren = children\n     // update props and listeners\n     if (parentData) {\n+      // if any prop has changed it would trigger and queue an update,\n+      // but if no props changed, nothing happens\n       updateProps(this, parentData)\n       updateEvents(this, parentData, oldParentData)\n     }\n-    // for now, if the component has content it always updates\n-    // because we don't know whether the children have changed.\n-    // need to optimize in the future.\n-    if (children || diffParentData(parentData, oldParentData)) {\n+    // diff parent data (attrs on the placeholder) and queue update\n+    // if anything changed\n+    if (diffParentData(parentData, oldParentData)) {\n       this.$forceUpdate()\n     }\n   }\n@@ -64,11 +65,11 @@ export function renderMixin (Vue) {\n    * This is used to wrap all children thunks in codegen.\n    */\n \n-  Vue.prototype._withContext = function (fn) {\n+  Vue.prototype._renderWithContext = function (fn) {\n     return () => {\n       const prev = renderState.context\n       renderState.context = this\n-      const children = fn()\n+      const children = flatten(fn())\n       renderState.context = prev\n       return children\n     }"
            },
            {
                "commitId": "61a5249a0e71008d7560d188b62efe36788619c1",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -68,8 +68,9 @@ export function renderMixin (Vue) {\n     return () => {\n       const prev = renderState.context\n       renderState.context = this\n-      return fn()\n+      const children = fn()\n       renderState.context = prev\n+      return children\n     }\n   }\n "
            },
            {
                "commitId": "c16fc2c427b221510b51d98c1051460d2ffbe02e",
                "additions": 24,
                "deletions": 12,
                "patch": "@@ -5,7 +5,8 @@ import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n \n export const renderState = {\n-  activeInstance: null\n+  activeInstance: null,\n+  context: null\n }\n \n export function initRender (vm) {\n@@ -58,28 +59,39 @@ export function renderMixin (Vue) {\n     }\n   }\n \n+  /**\n+   * Call a render function with this instance as the context.\n+   * This is used to wrap all children thunks in codegen.\n+   */\n+\n+  Vue.prototype._withContext = function (fn) {\n+    return () => {\n+      const prev = renderState.context\n+      renderState.context = this\n+      return fn()\n+      renderState.context = prev\n+    }\n+  }\n+\n   Vue.prototype._render = function () {\n-    const {\n-      render,\n-      _renderKey,\n-      _renderData,\n-      _renderChildren\n-    } = this.$options\n-    // resolve slots\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const { render, _renderKey, _renderData, _renderChildren } = this.$options\n+    // resolve slots. becaues slots are rendered in parent scope,\n+    // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n-    // render\n-    const prev = renderState.activeInstance\n-    renderState.activeInstance = this\n+    // render self\n     const vnode = render.call(this)\n-    renderState.activeInstance = prev\n     // set key\n     vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)\n     }\n+    // restore render state\n+    renderState.activeInstance = prev\n     return vnode\n   }\n "
            },
            {
                "commitId": "1df748d57d366ff426604e58a46897a2f49424aa",
                "additions": 11,
                "deletions": 4,
                "patch": "@@ -85,9 +85,16 @@ export function renderMixin (Vue) {\n \n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n-    this.$el = el && query(el)\n-    if (this.$el) {\n-      this.$el.innerHTML = ''\n+    el = this.$el = el && query(el)\n+    if (el) {\n+      // clean element\n+      el.innerHTML = ''\n+      if (el.hasAttributes()) {\n+        const attrs = el.attributes\n+        for (let i = 0, l = attrs.length; i < l; i++) {\n+          el.removeAttribute(attrs[i].name)\n+        }\n+      }\n     }\n     this._watcher = new Watcher(this, this._render, this._update)\n     this._update(this._watcher.value)\n@@ -103,7 +110,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children.slice()\n+    children = children().slice()\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "38204b747dad3c05c63401e2a27ef846bcb998bc",
                "additions": 4,
                "deletions": 3,
                "patch": "@@ -48,7 +48,7 @@ export function renderMixin (Vue) {\n     // update props and listeners\n     if (parentData) {\n       updateProps(this, parentData)\n-      updateEvents(this, parentData)\n+      updateEvents(this, parentData, oldParentData)\n     }\n     // for now, if the component has content it always updates\n     // because we don't know whether the children have changed.\n@@ -209,9 +209,10 @@ function updateProps (vm, data) {\n   }\n }\n \n-function updateEvents (vm, data) {\n+function updateEvents (vm, data, oldData) {\n   if (data.on) {\n-    updateListeners(data.on, vm._vnode.data.on || {}, (event, handler) => {\n+    updateListeners(data.on, oldData.on || {}, (event, handler) => {\n+      console.log(11)\n       vm.$on(event, handler)\n     })\n   }"
            },
            {
                "commitId": "542035f3c1550bf4d733a7b9c161cdb8db63740f",
                "additions": 10,
                "deletions": 4,
                "patch": "@@ -124,16 +124,18 @@ function resolveSlots (vm, children) {\n }\n \n function diffParentData (data, oldData) {\n-  let key, old, cur\n-  for (key in oldData) {\n+  const keys = Object.keys(oldData)\n+  let key, old, cur, i, l, j, k\n+  for (i = 0, l = keys.length; i < l; i++) {\n+    key = keys[i]\n     cur = data[key]\n     old = oldData[key]\n     if (key === 'on') continue\n     if (!cur) return true\n     if (isArray(old)) {\n       if (!isArray(cur)) return true\n       if (cur.length !== old.length) return true\n-      for (let i = 0; i < old.length; i++) {\n+      for (j = 0, k = old.length; j < k; j++) {\n         if (isObject(old[i])) {\n           if (!isObject(cur[i])) return true\n           if (diffObject(cur, old)) return true\n@@ -145,10 +147,14 @@ function diffParentData (data, oldData) {\n       return true\n     }\n   }\n+  return false\n }\n \n function diffObject (cur, old) {\n-  for (var key in old) {\n+  const keys = Object.keys(old)\n+  let i, l, key\n+  for (i = 0, l = keys.length; i < l; i++) {\n+    key = keys[i]\n     if (cur[key] !== old[key]) return true\n   }\n }"
            },
            {
                "commitId": "0257afbb7f8a6a4c986a577e904225cef13e67ec",
                "additions": 119,
                "deletions": 81,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { extend, query, resolveAsset, hasOwn } from '../util/index'\n+import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -18,78 +18,6 @@ export function initRender (vm) {\n   }\n }\n \n-function resolveSlots (vm, children) {\n-  if (children) {\n-    children = children.slice()\n-    const slots = { default: children }\n-    let i = children.length\n-    let name, child\n-    while (i--) {\n-      child = children[i]\n-      if ((name = child.data && child.data.slot)) {\n-        let slot = (slots[name] || (slots[name] = []))\n-        if (child.tag === 'template') {\n-          slot.push.apply(slot, child.children)\n-        } else {\n-          slot.push(child)\n-        }\n-        children.splice(i, 1)\n-      }\n-    }\n-    vm.$slots = slots\n-  }\n-}\n-\n-function mergeParentData (vm, data, parentData) {\n-  const props = vm.$options.props\n-  if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = {})\n-    for (let key in parentData.attrs) {\n-      if (!hasOwn(props, key)) {\n-        attrs[key] = parentData.attrs[key]\n-      }\n-    }\n-  }\n-  if (parentData.props) {\n-    const props = data.props || (data.props = {})\n-    for (let key in parentData.props) {\n-      if (!hasOwn(props, key)) {\n-        props[key] = parentData.props[key]\n-      }\n-    }\n-  }\n-  if (parentData.staticClass) {\n-    data.staticClass = data.staticClass\n-      ? data.staticClass + ' ' + parentData.staticClass\n-      : parentData.staticClass\n-  }\n-  if (parentData.class) {\n-    extend((data.class || (data.class = {})), parentData.class)\n-  }\n-  if (parentData.style) {\n-    extend((data.style || (data.style = {})), parentData.style)\n-  }\n-  if (parentData.directives) {\n-    data.directives = parentData.directives.conact(data.directives || [])\n-  }\n-  if (parentData.on) {\n-    updateListeners(parentData.on, data.on || {}, (event, handler) => {\n-      vm.$on(event, handler)\n-    })\n-  }\n-}\n-\n-function updateProps (vm, data) {\n-  if (data.attrs || data.props) {\n-    for (let key in vm.$options.props) {\n-      let newVal = getPropValue(data, key)\n-      if (vm[key] !== newVal) {\n-        vm[key] = newVal\n-      }\n-    }\n-  }\n-}\n-\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -112,21 +40,21 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._tryUpdate = function (data, children, key) {\n+  Vue.prototype._tryUpdate = function (parentData, children, key) {\n+    const oldParentData = this.$options._renderData\n     this.$options._renderKey = key\n-    this.$options._renderData = data\n+    this.$options._renderData = parentData\n     this.$options._renderChildren = children\n-    // set props - this will trigger update if any of them changed\n-    // but not guaranteed\n-    if (data) {\n-      updateProps(this, data)\n+    // update props and listeners\n+    if (parentData) {\n+      updateProps(this, parentData)\n+      updateEvents(this, parentData)\n     }\n     // for now, if the component has content it always updates\n     // because we don't know whether the children have changed.\n     // need to optimize in the future.\n-    if (children) {\n+    if (children || diffParentData(parentData, oldParentData)) {\n       this.$forceUpdate()\n-      return\n     }\n   }\n \n@@ -172,3 +100,113 @@ export function renderMixin (Vue) {\n     this._watcher.update()\n   }\n }\n+\n+function resolveSlots (vm, children) {\n+  if (children) {\n+    children = children.slice()\n+    const slots = { default: children }\n+    let i = children.length\n+    let name, child\n+    while (i--) {\n+      child = children[i]\n+      if ((name = child.data && child.data.slot)) {\n+        let slot = (slots[name] || (slots[name] = []))\n+        if (child.tag === 'template') {\n+          slot.push.apply(slot, child.children)\n+        } else {\n+          slot.push(child)\n+        }\n+        children.splice(i, 1)\n+      }\n+    }\n+    vm.$slots = slots\n+  }\n+}\n+\n+function diffParentData (data, oldData) {\n+  let key, old, cur\n+  for (key in oldData) {\n+    cur = data[key]\n+    old = oldData[key]\n+    if (key === 'on') continue\n+    if (!cur) return true\n+    if (isArray(old)) {\n+      if (!isArray(cur)) return true\n+      if (cur.length !== old.length) return true\n+      for (let i = 0; i < old.length; i++) {\n+        if (isObject(old[i])) {\n+          if (!isObject(cur[i])) return true\n+          if (diffObject(cur, old)) return true\n+        } else if (old[i] !== cur[i]) {\n+          return true\n+        }\n+      }\n+    } else if (diffObject(cur, old)) {\n+      return true\n+    }\n+  }\n+}\n+\n+function diffObject (cur, old) {\n+  for (var key in old) {\n+    if (cur[key] !== old[key]) return true\n+  }\n+}\n+\n+function mergeParentData (vm, data, parentData) {\n+  const props = vm.$options.props\n+  if (parentData.attrs) {\n+    const attrs = data.attrs || (data.attrs = {})\n+    for (let key in parentData.attrs) {\n+      if (!hasOwn(props, key)) {\n+        attrs[key] = parentData.attrs[key]\n+      }\n+    }\n+  }\n+  if (parentData.props) {\n+    const props = data.props || (data.props = {})\n+    for (let key in parentData.props) {\n+      if (!hasOwn(props, key)) {\n+        props[key] = parentData.props[key]\n+      }\n+    }\n+  }\n+  if (parentData.staticClass) {\n+    data.staticClass = data.staticClass\n+      ? data.staticClass + ' ' + parentData.staticClass\n+      : parentData.staticClass\n+  }\n+  if (parentData.class) {\n+    if (!data.class) {\n+      data.class = parentData.class\n+    } else {\n+      data.class = (isArray(data.class) ? data.class : []).concat(parentData.class)\n+    }\n+  }\n+  if (parentData.style) {\n+    if (!data.style) {\n+      data.style = parentData.style\n+    } else {\n+      extend(data.style, parentData.style)\n+    }\n+  }\n+  if (parentData.directives) {\n+    data.directives = parentData.directives.conact(data.directives || [])\n+  }\n+}\n+\n+function updateProps (vm, data) {\n+  if (data.attrs || data.props) {\n+    for (let key in vm.$options.props) {\n+      vm[key] = getPropValue(data, key)\n+    }\n+  }\n+}\n+\n+function updateEvents (vm, data) {\n+  if (data.on) {\n+    updateListeners(data.on, vm._vnode.data.on || {}, (event, handler) => {\n+      vm.$on(event, handler)\n+    })\n+  }\n+}"
            },
            {
                "commitId": "d1fc82dbba86a91704269e62699f63d645dd8baf",
                "additions": 21,
                "deletions": 14,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hasOwn } from '../util/index'\n+import { extend, query, resolveAsset, hasOwn } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -40,28 +40,38 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function mergeParentAttrs (vm, data, parentData) {\n+function mergeParentData (vm, data, parentData) {\n   const props = vm.$options.props\n   if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = [])\n+    const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n-\n+    const props = data.props || (data.props = {})\n+    for (let key in parentData.props) {\n+      if (!hasOwn(props, key)) {\n+        props[key] = parentData.props[key]\n+      }\n+    }\n+  }\n+  if (parentData.staticClass) {\n+    data.staticClass = data.staticClass\n+      ? data.staticClass + ' ' + parentData.staticClass\n+      : parentData.staticClass\n+  }\n+  if (parentData.class) {\n+    extend((data.class || (data.class = {})), parentData.class)\n+  }\n+  if (parentData.style) {\n+    extend((data.style || (data.style = {})), parentData.style)\n   }\n-}\n-\n-function mergeParentDirectives (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.conact(data.directives || [])\n   }\n-}\n-\n-function updateParentCallbacks (vm, data, parentData) {\n   if (parentData.on) {\n     updateListeners(parentData.on, data.on || {}, (event, handler) => {\n       vm.$on(event, handler)\n@@ -140,10 +150,7 @@ export function renderMixin (Vue) {\n     vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n-      const data = vnode.data\n-      mergeParentAttrs(this, data, _renderData)\n-      mergeParentDirectives(this, data, _renderData)\n-      updateParentCallbacks(this, data, _renderData)\n+      mergeParentData(this, vnode.data, _renderData)\n     }\n     return vnode\n   }"
            },
            {
                "commitId": "2fa6e6f73f81439374c02008fb4169b7df2f7b98",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -106,14 +106,18 @@ export function renderMixin (Vue) {\n     this.$options._renderKey = key\n     this.$options._renderData = data\n     this.$options._renderChildren = children\n-    if (children) {\n-      this.$forceUpdate()\n-      return\n-    }\n     // set props - this will trigger update if any of them changed\n+    // but not guaranteed\n     if (data) {\n       updateProps(this, data)\n     }\n+    // for now, if the component has content it always updates\n+    // because we don't know whether the children have changed.\n+    // need to optimize in the future.\n+    if (children) {\n+      this.$forceUpdate()\n+      return\n+    }\n   }\n \n   Vue.prototype._render = function () {"
            },
            {
                "commitId": "0e940ac5af072e1c85b6346c43c20d0a66c75393",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -72,7 +72,7 @@ function updateParentCallbacks (vm, data, parentData) {\n function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n     for (let key in vm.$options.props) {\n-      let newVal = getPropValue(data)\n+      let newVal = getPropValue(data, key)\n       if (vm[key] !== newVal) {\n         vm[key] = newVal\n       }"
            },
            {
                "commitId": "fdfcb9319970298e0c2f4318e6360db1b8dd3d8e",
                "additions": 4,
                "deletions": 16,
                "patch": "@@ -1,7 +1,8 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n+import { query, resolveAsset, hasOwn } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n+import { getPropValue } from './state'\n \n export const renderState = {\n   activeInstance: null\n@@ -69,29 +70,16 @@ function updateParentCallbacks (vm, data, parentData) {\n }\n \n function updateProps (vm, data) {\n-  const attrs = data.attrs\n-  const props = data.props\n-  if (attrs || props) {\n+  if (data.attrs || data.props) {\n     for (let key in vm.$options.props) {\n-      let altKey = hyphenate(key)\n-      let newVal =\n-        getPropValue(attrs, key, altKey) ||\n-        getPropValue(props, key, altKey)\n+      let newVal = getPropValue(data)\n       if (vm[key] !== newVal) {\n         vm[key] = newVal\n       }\n     }\n   }\n }\n \n-function getPropValue (hash, key, altKey) {\n-  return hash\n-    ? hasOwn(hash, key)\n-      ? hash[key]\n-      : hash[altKey]\n-    : undefined\n-}\n-\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement"
            },
            {
                "commitId": "57bb93ef02de063dc12d375b0fc2ca25063b5fc8",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -100,14 +100,18 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._update = function (vnode) {\n-    callHook(this, 'beforeUpdate')\n+    if (this._mounted) {\n+      callHook(this, 'beforeUpdate')\n+    }\n     if (!this._vnode) {\n       this.$el = patch(this.$el, vnode)\n     } else {\n       this.$el = patch(this._vnode, vnode)\n     }\n     this._vnode = vnode\n-    callHook(this, 'updated')\n+    if (this._mounted) {\n+      callHook(this, 'updated')\n+    }\n   }\n \n   Vue.prototype._tryUpdate = function (data, children, key) {"
            },
            {
                "commitId": "c12ddd9ab9f66bdbad8d5f91c2796f6cfe0a659c",
                "additions": 30,
                "deletions": 11,
                "patch": "@@ -40,15 +40,18 @@ function resolveSlots (vm, children) {\n }\n \n function mergeParentAttrs (vm, data, parentData) {\n+  const props = vm.$options.props\n   if (parentData.attrs) {\n-    const props = vm.$options.props\n     const attrs = data.attrs || (data.attrs = [])\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n+  if (parentData.props) {\n+\n+  }\n }\n \n function mergeParentDirectives (vm, data, parentData) {\n@@ -65,6 +68,30 @@ function updateParentCallbacks (vm, data, parentData) {\n   }\n }\n \n+function updateProps (vm, data) {\n+  const attrs = data.attrs\n+  const props = data.props\n+  if (attrs || props) {\n+    for (let key in vm.$options.props) {\n+      let altKey = hyphenate(key)\n+      let newVal =\n+        getPropValue(attrs, key, altKey) ||\n+        getPropValue(props, key, altKey)\n+      if (vm[key] !== newVal) {\n+        vm[key] = newVal\n+      }\n+    }\n+  }\n+}\n+\n+function getPropValue (hash, key, altKey) {\n+  return hash\n+    ? hasOwn(hash, key)\n+      ? hash[key]\n+      : hash[altKey]\n+    : undefined\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -92,16 +119,8 @@ export function renderMixin (Vue) {\n       return\n     }\n     // set props - this will trigger update if any of them changed\n-    const attrs = data && data.attrs\n-    if (attrs) {\n-      for (let key in this.$options.props) {\n-        let newVal = hasOwn(attrs, key)\n-          ? attrs[key]\n-          : attrs[hyphenate(key)]\n-        if (this[key] !== newVal) {\n-          this[key] = newVal\n-        }\n-      }\n+    if (data) {\n+      updateProps(this, data)\n     }\n   }\n "
            },
            {
                "commitId": "054c2c3de2976c8f87b7a52980bc89c12d3d90ee",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -42,9 +42,10 @@ function resolveSlots (vm, children) {\n function mergeParentAttrs (vm, data, parentData) {\n   if (parentData.attrs) {\n     const props = vm.$options.props\n+    const attrs = data.attrs || (data.attrs = [])\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n-        data.attrs[key] = parentData.attrs[key]\n+        attrs[key] = parentData.attrs[key]\n       }\n     }\n   }"
            },
            {
                "commitId": "1a35cf4a21e8c8e897c2d6f291b99376b12b9fac",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -19,13 +19,19 @@ export function initRender (vm) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n+    children = children.slice()\n     const slots = { default: children }\n     let i = children.length\n     let name, child\n     while (i--) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n-        (slots[name] || (slots[name] = [])).push(child)\n+        let slot = (slots[name] || (slots[name] = []))\n+        if (child.tag === 'template') {\n+          slot.push.apply(slot, child.children)\n+        } else {\n+          slot.push(child)\n+        }\n         children.splice(i, 1)\n       }\n     }\n@@ -123,7 +129,6 @@ export function renderMixin (Vue) {\n       mergeParentDirectives(this, data, _renderData)\n       updateParentCallbacks(this, data, _renderData)\n     }\n-    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "e9ae8187c2be7e03da425a23545b4523eca70c45",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -123,6 +123,7 @@ export function renderMixin (Vue) {\n       mergeParentDirectives(this, data, _renderData)\n       updateParentCallbacks(this, data, _renderData)\n     }\n+    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "4e86d3aba9d734bf2b50327933d221f3ceb522f2",
                "additions": 26,
                "deletions": 15,
                "patch": "@@ -10,10 +10,7 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n-  vm._renderData = vm.$options._renderData\n   vm.$slots = {}\n-  // props are set in initState\n-  resolveSlots(vm, vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -79,14 +76,15 @@ export function renderMixin (Vue) {\n     callHook(this, 'updated')\n   }\n \n-  Vue.prototype._tryUpdate = function (data, children) {\n-    this._renderData = data\n+  Vue.prototype._tryUpdate = function (data, children, key) {\n+    this.$options._renderKey = key\n+    this.$options._renderData = data\n+    this.$options._renderChildren = children\n     if (children) {\n-      resolveSlots(this, children)\n       this.$forceUpdate()\n       return\n     }\n-    // set props if they have changed.\n+    // set props - this will trigger update if any of them changed\n     const attrs = data && data.attrs\n     if (attrs) {\n       for (let key in this.$options.props) {\n@@ -101,17 +99,30 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._render = function () {\n+    const {\n+      render,\n+      _renderKey,\n+      _renderData,\n+      _renderChildren\n+    } = this.$options\n+    // resolve slots\n+    if (_renderChildren) {\n+      resolveSlots(this, _renderChildren)\n+    }\n+    // render\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const vnode = this.$options.render.call(this)\n-    const data = vnode.data\n-    const parentData = this._renderData\n-    if (parentData) {\n-      mergeParentAttrs(this, data, parentData)\n-      mergeParentDirectives(this, data, parentData)\n-      updateParentCallbacks(this, data, parentData)\n-    }\n+    const vnode = render.call(this)\n     renderState.activeInstance = prev\n+    // set key\n+    vnode.key = _renderKey\n+    // update parent data\n+    if (_renderData) {\n+      const data = vnode.data\n+      mergeParentAttrs(this, data, _renderData)\n+      mergeParentDirectives(this, data, _renderData)\n+      updateParentCallbacks(this, data, _renderData)\n+    }\n     return vnode\n   }\n "
            },
            {
                "commitId": "be9e16e20fce0d6c9b5ab72be02894dc05a2734f",
                "additions": 16,
                "deletions": 5,
                "patch": "@@ -1,6 +1,6 @@\n import Watcher from '../observer/watcher'\n import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n-import { createElement, patch } from '../vdom/index'\n+import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export const renderState = {\n@@ -36,8 +36,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function mergeParentData (vm, data, parentData) {\n-  // attrs\n+function mergeParentAttrs (vm, data, parentData) {\n   if (parentData.attrs) {\n     const props = vm.$options.props\n     for (let key in parentData.attrs) {\n@@ -46,12 +45,22 @@ function mergeParentData (vm, data, parentData) {\n       }\n     }\n   }\n-  // directives\n+}\n+\n+function mergeParentDirectives (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.conact(data.directives || [])\n   }\n }\n \n+function updateParentCallbacks (vm, data, parentData) {\n+  if (parentData.on) {\n+    updateListeners(parentData.on, data.on || {}, (event, handler) => {\n+      vm.$on(event, handler)\n+    })\n+  }\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -98,7 +107,9 @@ export function renderMixin (Vue) {\n     const data = vnode.data\n     const parentData = this._renderData\n     if (parentData) {\n-      mergeParentData(this, data, parentData)\n+      mergeParentAttrs(this, data, parentData)\n+      mergeParentDirectives(this, data, parentData)\n+      updateParentCallbacks(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n     return vnode"
            },
            {
                "commitId": "56073ca8532d90706cd50b8a3177011093b01675",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -77,14 +77,16 @@ export function renderMixin (Vue) {\n       this.$forceUpdate()\n       return\n     }\n-    // set props. because props are reactive,\n-    // if any of them has changed it will trigger an update.\n+    // set props if they have changed.\n     const attrs = data && data.attrs\n     if (attrs) {\n       for (let key in this.$options.props) {\n-        this[key] = hasOwn(attrs, key)\n+        let newVal = hasOwn(attrs, key)\n           ? attrs[key]\n           : attrs[hyphenate(key)]\n+        if (this[key] !== newVal) {\n+          this[key] = newVal\n+        }\n       }\n     }\n   }\n@@ -99,7 +101,6 @@ export function renderMixin (Vue) {\n       mergeParentData(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n-    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "48f328bcaf2ebcc256d1c9114cf9cc2da54f15ae",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -99,6 +99,7 @@ export function renderMixin (Vue) {\n       mergeParentData(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n+    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "5c1063a5e4167d1938febc4d4fd4f4edee260505",
                "additions": 7,
                "deletions": 12,
                "patch": "@@ -77,19 +77,14 @@ export function renderMixin (Vue) {\n       this.$forceUpdate()\n       return\n     }\n-    // check props\n-    if (data && data.attrs) {\n-      let changed = false\n+    // set props. because props are reactive,\n+    // if any of them has changed it will trigger an update.\n+    const attrs = data && data.attrs\n+    if (attrs) {\n       for (let key in this.$options.props) {\n-        let oldVal = this[key]\n-        let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n-        if (oldVal !== newVal) {\n-          this[key] = newVal\n-          changed = true\n-        }\n-      }\n-      if (changed) {\n-        this.$forceUpdate()\n+        this[key] = hasOwn(attrs, key)\n+          ? attrs[key]\n+          : attrs[hyphenate(key)]\n       }\n     }\n   }"
            },
            {
                "commitId": "5970dbd2f5694efb1328789f4f0f83d89a5e4beb",
                "additions": 6,
                "deletions": 12,
                "patch": "@@ -20,16 +20,6 @@ export function initRender (vm) {\n   }\n }\n \n-export function setProps (vm, data) {\n-  const attrs = (data && data.attrs) || {}\n-  const props = vm.$options.props\n-  if (props) {\n-    for (let key in props) {\n-      vm[key] = attrs[key]\n-    }\n-  }\n-}\n-\n function resolveSlots (vm, children) {\n   if (children) {\n     const slots = { default: children }\n@@ -89,14 +79,18 @@ export function renderMixin (Vue) {\n     }\n     // check props\n     if (data && data.attrs) {\n-      setProps(this, data)\n+      let changed = false\n       for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n         if (oldVal !== newVal) {\n-          this.$forceUpdate()\n+          this[key] = newVal\n+          changed = true\n         }\n       }\n+      if (changed) {\n+        this.$forceUpdate()\n+      }\n     }\n   }\n "
            },
            {
                "commitId": "8218eae1f91ab3d777b594821c55a687f647ca9b",
                "additions": 39,
                "deletions": 9,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hyphenate } from '../util/index'\n+import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n@@ -11,18 +11,28 @@ export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm._renderData = vm.$options._renderData\n-  vm.$slots = resolveSlots(vm.$options._renderChildren)\n+  vm.$slots = {}\n+  // props are set in initState\n+  resolveSlots(vm, vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n   }\n }\n \n-function resolveSlots (children) {\n-  const slots = {\n-    default: children\n+export function setProps (vm, data) {\n+  const attrs = (data && data.attrs) || {}\n+  const props = vm.$options.props\n+  if (props) {\n+    for (let key in props) {\n+      vm[key] = attrs[key]\n+    }\n   }\n+}\n+\n+function resolveSlots (vm, children) {\n   if (children) {\n+    const slots = { default: children }\n     let i = children.length\n     let name, child\n     while (i--) {\n@@ -32,8 +42,24 @@ function resolveSlots (children) {\n         children.splice(i, 1)\n       }\n     }\n+    vm.$slots = slots\n+  }\n+}\n+\n+function mergeParentData (vm, data, parentData) {\n+  // attrs\n+  if (parentData.attrs) {\n+    const props = vm.$options.props\n+    for (let key in parentData.attrs) {\n+      if (!hasOwn(props, key)) {\n+        data.attrs[key] = parentData.attrs[key]\n+      }\n+    }\n+  }\n+  // directives\n+  if (parentData.directives) {\n+    data.directives = parentData.directives.conact(data.directives || [])\n   }\n-  return slots\n }\n \n export function renderMixin (Vue) {\n@@ -56,13 +82,14 @@ export function renderMixin (Vue) {\n \n   Vue.prototype._tryUpdate = function (data, children) {\n     this._renderData = data\n-    this.$slots = resolveSlots(children)\n     if (children) {\n+      resolveSlots(this, children)\n       this.$forceUpdate()\n       return\n     }\n     // check props\n     if (data && data.attrs) {\n+      setProps(this, data)\n       for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n@@ -77,8 +104,11 @@ export function renderMixin (Vue) {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n     const vnode = this.$options.render.call(this)\n-    // merge parent data\n-    // TODO\n+    const data = vnode.data\n+    const parentData = this._renderData\n+    if (parentData) {\n+      mergeParentData(this, data, parentData)\n+    }\n     renderState.activeInstance = prev\n     return vnode\n   }"
            },
            {
                "commitId": "d6c5abbf35af32ee6a166fc3e63e2b25343a0a61",
                "additions": 33,
                "deletions": 10,
                "patch": "@@ -10,13 +10,32 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n-  // TODO: handle _renderData and _renderChildren\n+  vm._renderData = vm.$options._renderData\n+  vm.$slots = resolveSlots(vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n   }\n }\n \n+function resolveSlots (children) {\n+  const slots = {\n+    default: children\n+  }\n+  if (children) {\n+    let i = children.length\n+    let name, child\n+    while (i--) {\n+      child = children[i]\n+      if ((name = child.data && child.data.slot)) {\n+        (slots[name] || (slots[name] = [])).push(child)\n+        children.splice(i, 1)\n+      }\n+    }\n+  }\n+  return slots\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -36,8 +55,9 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._tryUpdate = function (data, children) {\n+    this._renderData = data\n+    this.$slots = resolveSlots(children)\n     if (children) {\n-      // TODO: handle content slots\n       this.$forceUpdate()\n       return\n     }\n@@ -53,20 +73,23 @@ export function renderMixin (Vue) {\n     }\n   }\n \n+  Vue.prototype._render = function () {\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const vnode = this.$options.render.call(this)\n+    // merge parent data\n+    // TODO\n+    renderState.activeInstance = prev\n+    return vnode\n+  }\n+\n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n     this.$el = el && query(el)\n     if (this.$el) {\n       this.$el.innerHTML = ''\n     }\n-    const render = this.$options.render\n-    this._watcher = new Watcher(this, () => {\n-      const prev = renderState.activeInstance\n-      renderState.activeInstance = this\n-      const vnode = render.call(this)\n-      renderState.activeInstance = prev\n-      return vnode\n-    }, this._update)\n+    this._watcher = new Watcher(this, this._render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true"
            },
            {
                "commitId": "84ce91df72928f622ba993ee89e41a642eb92fb0",
                "additions": 6,
                "deletions": 4,
                "patch": "@@ -3,7 +3,9 @@ import { query, resolveAsset, hyphenate } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n-export const target = { _: null }\n+export const renderState = {\n+  activeInstance: null\n+}\n \n export function initRender (vm) {\n   vm._vnode = null\n@@ -59,10 +61,10 @@ export function renderMixin (Vue) {\n     }\n     const render = this.$options.render\n     this._watcher = new Watcher(this, () => {\n-      const prev = target._\n-      target._ = this\n+      const prev = renderState.activeInstance\n+      renderState.activeInstance = this\n       const vnode = render.call(this)\n-      target._ = prev\n+      renderState.activeInstance = prev\n       return vnode\n     }, this._update)\n     this._update(this._watcher.value)"
            },
            {
                "commitId": "8bc6915ce129b7642121c8462222d375343b9d3a",
                "additions": 10,
                "deletions": 1,
                "patch": "@@ -3,6 +3,8 @@ import { query, resolveAsset, hyphenate } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n+export const target = { _: null }\n+\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n@@ -55,7 +57,14 @@ export function renderMixin (Vue) {\n     if (this.$el) {\n       this.$el.innerHTML = ''\n     }\n-    this._watcher = new Watcher(this, this.$options.render, this._update)\n+    const render = this.$options.render\n+    this._watcher = new Watcher(this, () => {\n+      const prev = target._\n+      target._ = this\n+      const vnode = render.call(this)\n+      target._ = prev\n+      return vnode\n+    }, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true"
            },
            {
                "commitId": "058c555dac875d1c979b92ccaeb36412d6912c82",
                "additions": 2,
                "deletions": 3,
                "patch": "@@ -38,9 +38,8 @@ export function renderMixin (Vue) {\n       return\n     }\n     // check props\n-    const props = this.$options.props\n-    if (props && data && data.attrs) {\n-      for (let key in props) {\n+    if (data && data.attrs) {\n+      for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n         if (oldVal !== newVal) {"
            },
            {
                "commitId": "5c3edf850bcf7dacf0fd4d6b625fce2e937ebe93",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -39,7 +39,7 @@ export function renderMixin (Vue) {\n     }\n     // check props\n     const props = this.$options.props\n-    if (props && data.attrs) {\n+    if (props && data && data.attrs) {\n       for (let key in props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]"
            },
            {
                "commitId": "f2c8880041bd845b4af28ed20e2f67c2e2c8d6ff",
                "additions": 35,
                "deletions": 11,
                "patch": "@@ -1,10 +1,12 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset } from '../util/index'\n-import { h, patch } from '../vdom/index'\n+import { query, resolveAsset, hyphenate } from '../util/index'\n+import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n+  vm._vnode = null\n   vm._mounted = false\n+  // TODO: handle _renderData and _renderChildren\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -13,33 +15,55 @@ export function initRender (vm) {\n \n export function renderMixin (Vue) {\n   // shorthands used in render functions\n-  Vue.prototype.__h__ = h\n+  Vue.prototype.__h__ = createElement\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n-  Vue.prototype._update = function (vtree) {\n+  Vue.prototype._update = function (vnode) {\n     callHook(this, 'beforeUpdate')\n-    if (!this._tree) {\n-      this.$el = patch(this.$el, vtree)\n+    if (!this._vnode) {\n+      this.$el = patch(this.$el, vnode)\n     } else {\n-      this.$el = patch(this._tree, vtree)\n+      this.$el = patch(this._vnode, vnode)\n     }\n-    this._tree = vtree\n+    this._vnode = vnode\n     callHook(this, 'updated')\n   }\n \n+  Vue.prototype._tryUpdate = function (data, children) {\n+    if (children) {\n+      // TODO: handle content slots\n+      this.$forceUpdate()\n+      return\n+    }\n+    // check props\n+    const props = this.$options.props\n+    if (props && data.attrs) {\n+      for (let key in props) {\n+        let oldVal = this[key]\n+        let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n+        if (oldVal !== newVal) {\n+          this.$forceUpdate()\n+        }\n+      }\n+    }\n+  }\n+\n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n-    this.$el = el ? query(el) : document.createElement('div')\n-    this.$el.innerHTML = ''\n+    this.$el = el && query(el)\n+    if (this.$el) {\n+      this.$el.innerHTML = ''\n+    }\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true\n+    return this\n   }\n \n   Vue.prototype.$forceUpdate = function () {\n-    this._watcher.run()\n+    this._watcher.update()\n   }\n }"
            },
            {
                "commitId": "0b5e962943e88d6b5bc7b5c06851b2983d6201be",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -4,6 +4,7 @@ import { h, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n+  vm._mounted = false\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -35,6 +36,7 @@ export function renderMixin (Vue) {\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n+    this._mounted = true\n   }\n \n   Vue.prototype.$forceUpdate = function () {"
            },
            {
                "commitId": "8cf836f2ecb876a17305287cb18e7009555c11f3",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query } from '../util/index'\n+import { query, resolveAsset } from '../util/index'\n import { h, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n@@ -11,7 +11,11 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  // shorthands used in render functions\n   Vue.prototype.__h__ = h\n+  Vue.prototype.__d__ = function (id) {\n+    return resolveAsset(this.$options, 'directives', id, true)\n+  }\n \n   Vue.prototype._update = function (vtree) {\n     callHook(this, 'beforeUpdate')"
            },
            {
                "commitId": "914da492bf456de05205d0a0f82ecc4aa8719f6b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -16,9 +16,9 @@ export function renderMixin (Vue) {\n   Vue.prototype._update = function (vtree) {\n     callHook(this, 'beforeUpdate')\n     if (!this._tree) {\n-      patch(this.$el, vtree)\n+      this.$el = patch(this.$el, vtree)\n     } else {\n-      patch(this._tree, vtree)\n+      this.$el = patch(this._tree, vtree)\n     }\n     this._tree = vtree\n     callHook(this, 'updated')"
            },
            {
                "commitId": "0694a9bfb63350d2cb7ed992fee82e6a632ec74a",
                "additions": 5,
                "deletions": 0,
                "patch": "@@ -1,6 +1,7 @@\n import Watcher from '../observer/watcher'\n import { query } from '../util/index'\n import { h, patch } from '../vdom/index'\n+import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n   const el = vm.$options.el\n@@ -13,19 +14,23 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = h\n \n   Vue.prototype._update = function (vtree) {\n+    callHook(this, 'beforeUpdate')\n     if (!this._tree) {\n       patch(this.$el, vtree)\n     } else {\n       patch(this._tree, vtree)\n     }\n     this._tree = vtree\n+    callHook(this, 'updated')\n   }\n \n   Vue.prototype.$mount = function (el) {\n+    callHook(this, 'beforeMount')\n     this.$el = el ? query(el) : document.createElement('div')\n     this.$el.innerHTML = ''\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n+    callHook(this, 'mounted')\n   }\n \n   Vue.prototype.$forceUpdate = function () {"
            },
            {
                "commitId": "0e1ac079198044f22ea6c92d669a9a5f2336e9e0",
                "additions": 12,
                "deletions": 6,
                "patch": "@@ -3,25 +3,31 @@ import { query } from '../util/index'\n import { h, patch } from '../vdom/index'\n \n export function initRender (vm) {\n-  const options = vm.$options\n-  vm._el = query(options.el)\n-  vm._el.innerHTML = ''\n-  vm._watcher = new Watcher(vm, options.render, vm._update)\n-  vm._update(vm._watcher.value)\n+  const el = vm.$options.el\n+  if (el) {\n+    vm.$mount(el)\n+  }\n }\n \n export function renderMixin (Vue) {\n   Vue.prototype.__h__ = h\n \n   Vue.prototype._update = function (vtree) {\n     if (!this._tree) {\n-      patch(this._el, vtree)\n+      patch(this.$el, vtree)\n     } else {\n       patch(this._tree, vtree)\n     }\n     this._tree = vtree\n   }\n \n+  Vue.prototype.$mount = function (el) {\n+    this.$el = el ? query(el) : document.createElement('div')\n+    this.$el.innerHTML = ''\n+    this._watcher = new Watcher(this, this.$options.render, this._update)\n+    this._update(this._watcher.value)\n+  }\n+\n   Vue.prototype.$forceUpdate = function () {\n     this._watcher.run()\n   }"
            },
            {
                "commitId": "b5800b274c472897e64184ea716566422b3046cb",
                "additions": 28,
                "deletions": 0,
                "patch": "@@ -0,0 +1,28 @@\n+import Watcher from '../observer/watcher'\n+import { query } from '../util/index'\n+import { h, patch } from '../vdom/index'\n+\n+export function initRender (vm) {\n+  const options = vm.$options\n+  vm._el = query(options.el)\n+  vm._el.innerHTML = ''\n+  vm._watcher = new Watcher(vm, options.render, vm._update)\n+  vm._update(vm._watcher.value)\n+}\n+\n+export function renderMixin (Vue) {\n+  Vue.prototype.__h__ = h\n+\n+  Vue.prototype._update = function (vtree) {\n+    if (!this._tree) {\n+      patch(this._el, vtree)\n+    } else {\n+      patch(this._tree, vtree)\n+    }\n+    this._tree = vtree\n+  }\n+\n+  Vue.prototype.$forceUpdate = function () {\n+    this._watcher.run()\n+  }\n+}"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "give me all the commits for vnode.js file?",
        "number": 6,
        "category": 2,
        "response": "Here are all the commits for the `vnode.js` file:\n\n1. Commit ID: 9949ab5d14e3620f40b876cffbc710a33d0237b2\n   - Message: \"Merge pull request #3 from dwelch2344/move_to_typescript\\n\\nWIP: typescript love on the tests\"\n   - Date: 2022-05-04T21:25:34Z\n\n2. Commit ID: 40dccfedd1d92ef9d61ee350ed8fbd7fc525b5b9\n   - Message: \"chore: fix test harness; most of the tooling + test harness is happy; coverage still needs fixing\"\n   - Date: 2022-05-03T17:04:55Z\n\n3. Commit ID: 982d5a492fb95577217e2dacaa044eabe78a8601\n   - Message: \"fix(types): support string type for style in VNode data (#9728)\\n\\nfix #9727\"\n   - Date: 2019-03-18T07:47:43Z\n\n4. Commit ID: dbc0582587f90e78867809bb6ae683301cd0626b\n   - Message: \"feat: dynamic directive arguments for v-on, v-bind and custom directives (#9373)\"\n   - Date: 2019-01-26T04:22:44Z\n\n5. Commit ID: 097f6229dffc34af452b106ad2a3b58845588807\n   - Message: \"fix(core): avoid mutating original children when cloning vnode\\n\\nThe on-demand clone strategy introduced in 956756b mutates the owner\\narray of the cloned vnode. This causes the newly cloned vnode to be\\ndestroyed when the parent node is destroyed. This is fixed by cloning\\nthe children array when cloning a vnode.\\n\\nfix #7975\"\n   - Date: 2018-12-01T22:05:36Z\n\n6. Commit ID: 4ecc21c29ec12bb33d3b426cb4d42c579e9b0f2d\n   - Message: \"feat(devtools): store functional render context on vnode in development (#8586)\"\n   - Date: 2018-11-30T22:31:44Z\n\n7. Commit ID: 8227fb35240ab1f301c30a6ad5d4d25071fa7996\n   - Message: \"fix: add missing `asyncMeta` during VNode cloning (#7861)\"\n   - Date: 2018-03-23T23:13:10Z\n\n8. Commit ID: d7d9b002fd60d246b1ef65f71b55b45f46563b4d\n   - Message: \"chore: fix typo (#7781)\"\n   - Date: 2018-03-09T13:54:55Z\n\n9. Commit ID: 956756b1be7084daf8b6afb92ac0da7c24cde2a5\n   - Message: \"refactor: use more efficient on-demand clone to handle reused node edge cases\\n\\nremoves unnecessary slot/static node clones, fix #7292\"\n   - Date: 2017-12-21T00:44:24Z\n\n10. Commit ID: 604e081d0456ed136b24b5f759c608d153dfae93\n    - Message: \"fix: ensure functionalContext is cloned during slot clones\\n\\nfix #7106\"\n    - Date: 2017-11-22T21:37:24Z\n\n11. Commit ID: 1cf02efda206185cb72bbaafb00037fa6269e3f3\n    - Message: \"fix: also clone component slot children during deepClone\\n\\nfix #6891, fix #6915\"\n    - Date: 2017-10-26T16:00:19Z\n\n12. Commit ID: 53431c63a9033bb9a73c915bca8525f0d7988c26\n    - Message: \"types: fix flow typing\"\n    - Date: 2017-10-11T15:24:39Z\n\n13. Commit ID: 421658884f7ca786747abf9b89e00925fdfdfba8\n    - Message: \"fix: fix scoped CSS for nested nodes in functional components\"\n    - Date: 2017-10-11T15:17:46Z\n\n14. Commit ID: 050bb33f9b02589357c037623ea8cbf8ff13555b\n    - Message: \"feat: scoped CSS support for functional components\"\n    - Date: 2017-10-11T14:38:46Z\n\n15. Commit ID: 53463619e5d19d35dfad1a4245a8dc583681feb3\n    - Message: \"perf: deep clone slot vnodes on re-render (#6478)\\n\\navoid unnecessary assignment.\"\n    - Date: 2017-09-01T16:14:55Z\n\n16. Commit ID: 0529040c17b8632032a43d142aac88386f6b4a1f\n    - Message: \"fix: deep clone slot vnodes on re-render\\n\\nfix #6372\"\n    - Date: 2017-08-29T22:47:10Z\n\n17. Commit ID: 11614d63b7862b68b11cc45c0891437c62a832d7\n    - Message: \"feat(v-on): support v-on object syntax with no arguments\\n\\nNote this does not support modifiers and is meant to be used for handling\\nevents proxying in higher-order-components.\"\n    - Date: 2017-07-11T08:36:04Z\n\n18. Commit ID: fed602b90be89a43b4ec41b5a2e0a526d3a5f4a2\n    - Message: \"refactor: also clone vnode.asyncFactory\"\n    - Date: 2017-07-11T05:06:23Z\n\n19. Commit ID: e4da249ab8ef32a0b8156c840c9d2b9773090f8a\n    - Message: \"feat: add `comments` option to allow preserving comments in template  (#5951)\\n\\nclose #5392\"\n    - Date: 2017-06-30T00:56:23Z\n\n20. Commit ID: d33c1250ee77dd337eb4979851ade331f177b890\n    - Message: \"fix:when using object syntax in v-bind, special attribute have no effect\"\n    - Date: 2017-06-16T18:02:37Z\n\n21. Commit ID: 9cf6646f46ef3c13236677e58e72d2c6dd5c8abf\n    - Message: \"support directly rendering async components in SSR\"\n    - Date: 2017-05-24T08:50:17Z\n\n22. Commit ID: 7404091896fda2c87ecac64efc24324ff1885e2c\n    - Message: \"support async hydration\"\n    - Date: 2017-05-24T08:50:17Z\n\n23. Commit ID: 43485fbc5b779e02122c3b7fc64296a2cfee31f6\n    - Message: \"Merge branch ssr-optimize into dev\"\n    - Date: 2017-05-18T08:56:05Z\n\n24. Commit ID: 26953f5cacc03440df394ebbc74023efd364b7e0\n    - Message: \"add semis to flow decls for better syntax highlighting\"\n    - Date: 2017-05-15T08:01:30Z\n\n25. Commit ID: 0ccefff794c5fe73b80b9faf5ae5bfd8ec1a500f\n    - Message: \"support v-for on scoped slots (fix #5615)\"\n    - Date: 2017-05-09T15:22:55Z\n\n26. Commit ID: 5d965d5b3bbe0e76cdb97e41e01a704322253e09\n    - Message: \"clone `isComment` when cloneVNode (#5633)\"\n    - Date: 2017-05-09T13:12:59Z\n\n27. Commit ID: 1073035164b809872bf35a3b007848979f86f48a\n    - Message: \"fix activate hook call timing (fix vue-router#1212)\"\n    - Date: 2017-04-07T07:30:37Z\n\n28. Commit ID: a12d32a56df2519c9cdf8d2da9d9425876263f89\n    - Message: \"fix style diffing on cached/slot elements (fix #5318)\"\n    - Date: 2017-04-03T06:13:57Z\n\n29. Commit ID: 2afaac2b397b4b04713488aeb62e5e222e5dc121\n    - Message: \"cache vnodes length (#5125)\"\n    - Date: 2017-03-08T02:24:25Z\n\n30. Commit ID: 9d6c8ec268f659a715e3b38c97a1e03964961703\n    - Message: \"feat: allow customization of component v-model prop/event via model option (close #4515)\"\n    - Date: 2017-01-22T19:31:43Z\n\n31. Commit ID: fe02bc3a27b3b33f9467980f61126edf97105287\n    - Message: \"ignore deprecated alias\"\n    - Date: 2017-01-12T23:24:37Z\n\n32. Commit ID: ced2dfc8f704b07cd59467eca38c58c590d0c012\n    - Message: \"expose vnode.child for backwards compat, update .flowconfig & ts types\"\n    - Date: 2017-01-12T23:04:36Z\n\n33. Commit ID: 30258a9a60b96c25c95685cb17ee35838830ee4c\n    - Message: \"rename vnode.child -> vnode.componentInstance\"\n    - Date: 2017-01-12T22:44:19Z\n\n34. Commit ID: 207c18c47f8c94f6d92675b28bc67511b7897246\n    - Message: \"further reduce normalizeChildren usage\"\n    - Date: 2016-12-05T01:36:40Z\n\n35. Commit ID: 7c3c86f36044ada983c09e7733841cb4c55de9d1\n    - Message: \"fix namespace hoisting\"\n    - Date: 2016-12-05T01:36:40Z\n\n36. Commit ID: 79e1058799dcde0b7e341ef44b590ecbf1e3a722\n    - Message: \"wip: refactor compiler to skip normalization when possible\\n\\nwip fix\\n\\nwip fix\\n\\nwip fix\"\n    - Date: 2016-12-05T01:36:40Z\n\n37. Commit ID: 7431e4d16c92862ac74fdb3053de9295c809b586\n    - Message: \"emptyVNode -> createEmptyVNode\"\n    - Date: 2016-12-05T01:36:40Z\n\n38. Commit ID: 7b389bc34e12442663de1939882b523345a9e46d\n    - Message: \"avoid warning unknown custom elements in v-pre\"\n    - Date: 2016-11-24T17:47:27Z\n\n39. Commit ID: 303378f85b26934396e2f6dc0973f6982da2beb1\n    - Message: \"support default scoped slot + function children as scoped slot\"\n    - Date: 2016-11-20T17:03:43Z\n\n40. Commit ID: ff551029bf872ad067ac7c5ba7c6311fdde7c674\n    - Message: \"wip: fix flow type for weex merge\"\n    - Date: 2016-11-07T21:26:06Z\n\n41. Commit ID: b69b4a4eeff204488c3eb60cac951f9808581e1c\n    - Message: \"tweak style merge for performance\"\n    - Date: 2016-11-07T21:20:10Z\n\n42. Commit ID: e960cd104e67e8e410956fa589090fe171382528\n    - Message: \"enable style merge behavior between parent-child components (fix #3997) (#4138)\\n\\n* merge style between components\\r\\n\\r\\n* update test case\\r\\n\\r\\n* update style compiler\\r\\n\\r\\n* add paren to style binding code\\r\\n\\r\\n* update background property parsing\\r\\n\\r\\n* introduce interpolation warning and refactor var to const\"\n    - Date: 2016-11-07T21:19:48Z\n\n43. Commit ID: ec824be88e9bc71b31e5c4a43f80d921674dca66\n    - Message: \"fix v-once inside v-for (fix #3964)\"\n    - Date: 2016-11-03T02:34:36Z\n\n44. Commit ID: 0cd1489e68891e4ca532ce7299d09e8af5ae3f52\n    - Message: \".number modifier should work with select, radio, checkbox (fix #4018) (#4022)\\n\\n* support number modifier in select, radio, checkbox\\r\\n\\r\\n* add test case\\r\\n\\r\\n* add ASTModifier type to specify modifiers type\\r\\n\\r\\n* fix typo\\r\\n\\r\\n* keep code consistent\"\n    - Date: 2016-11-01T15:50:22Z\n\n45. Commit ID: 1a8720d6ead500eed5d40457a3e7f59fe8972472\n    - Message: \"Fix typo in component (#3978)\"\n    - Date: 2016-10-19T14:33:17Z\n\n46. Commit ID: 1fa3844dc26745b4cb855b0934bd1b132ba33d9b\n    - Message: \"refactor directive update implementation\"\n    - Date: 2016-10-12T00:31:13Z\n\n47. Commit ID: 3446d1485d36b91ef42c53268cb69ecb047538a5\n    - Message: \"support functional components as named slot (fix #3872)\"\n    - Date: 2016-10-11T02:41:14Z\n\n48. Commit ID: d6a7568891d0c3368471322de5d730172d92b9e4\n    - Message: \"improve v-bind implementation and make it work on components (fix #3670)\"\n    - Date: 2016-09-14T14:14:45Z\n\n49. Commit ID: f6b1a51729f705bc49c6eaaf32ec095efd97401c\n    - Message: \"fix hot-reload not updating static nodes\"\n    - Date: 2016-08-29T15:45:08Z\n\n50. Commit ID: 014d2f8599f9afc0754e603b1528a12e74bd209a\n    - Message: \"fix vdom patch edge case for static nodes being reused and as insertion reference node (fix #3533)\"\n    - Date: 2016-08-27T20:29:07Z\n\n51. Commit ID: ed2085974b2a385ca1fd8cd696917d6cda8322e7\n    - Message: \"ensure mergeVNodeHook does not inject duplicate hooks\"\n    - Date: 2016-08-26T23:19:51Z\n\n52. Commit ID: d2df58e547a7e1018c72a52714be7dee4ad06922\n    - Message: \"move v-show marker to runtime so that render functions work as expected (fix #3488)\"\n    - Date: 2016-08-20T15:14:41Z\n\n53. Commit ID: ba5fb31188467c9f07cdcfa94e9469e172098ec5\n    - Message: \"fix transition insert hook duplicate invocation on slot nodes (fix #3474)\"\n    - Date: 2016-08-18T16:00:31Z\n\n54. Commit ID: 18386c4cf4fe829f447687734a5bf03905d0db44\n    - Message: \"fix static nodes optimization inside v-for (fix #3406)\"\n    - Date: 2016-08-08T23:03:00Z\n\n55. Commit ID: fe801b16e4da63513bce95bfa762a8a36d83fe59\n    - Message: \"wip: fix $parent after children change\"\n    - Date: 2016-08-05T16:43:35Z\n\n56. Commit ID: b5b963f51df1fa3124cd8a9846be5455408bc52a\n    - Message: \"wip: refactor children resolution (remove thunk mechanism)\"\n    - Date: 2016-08-05T16:10:13Z\n\n57. Commit ID: c66b7566c682af653dc475fab1475db5484e40ee\n    - Message: \"fix flow\"\n    - Date: 2016-08-05T07:10:40Z\n\n58. Commit ID: 59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8\n    - Message: \"support class/style in v-bind object\"\n    - Date: 2016-08-05T06:59:33Z\n\n59. Commit ID: 351aef3cb4ada980f105f98f8b835876e8d4d689\n    - Message: \"use comment node as empty placeholder (fix <transition> SSR hydration)\"\n    - Date: 2016-08-05T05:52:09Z\n\n60. Commit ID: 40b93e6527d9ecdb308925114bf14cb60b36eae0\n    - Message: \"avoid unnecessary enter transitions on nested inserted elements\"\n    - Date: 2016-08-05T02:17:59Z\n\n61. Commit ID: 35ee5b105e8a517571b9bb9a87160c6ffbdad779\n    - Message: \"remove staticAttrs\"\n    - Date: 2016-07-29T14:45:43Z\n\n62. Commit ID: 74f8b98509d24487e1a8d1588b4128a7a1046a41\n    - Message: \"handle static vnodes properly during patch (fix #3325)\"\n    - Date: 2016-07-26T19:49:40Z\n\n63. Commit ID: 3ce450b6dc5f2135266c8a38818371e9d4f1f460\n    - Message: \"use more proper flow type syntax\"\n    - Date: 2016-07-26T01:28:46Z\n\n64. Commit ID: ea9c6c37c3ef0ef3706afa94070b89a7464c559c\n    - Message: \"support v-on .native modifier on components\"\n    - Date: 2016-07-19T22:56:10Z\n\n65. Commit ID: 69ecdcb05e3f5db32af889962fe8253d49d7390d\n    - Message: \"rename vnode.data.props -> domProps\"\n    - Date: 2016-07-19T21:52:10Z\n\n66. Commit ID: e6871a33c17fd7dfd58fba6c7c6b6182f0ff2f0e\n    - Message: \"update flow annotations\"\n    - Date: 2016-07-15T21:48:42Z\n\n67. Commit ID: 9421bd48066906e20052e04cf88c4ae623080a95\n    - Message: \"extract getRealChild for abstract components\"\n    - Date: 2016-07-06T21:07:46Z\n\n68. Commit ID: 06b470369a7bde2a7f36468191e424b4c455db67\n    - Message: \"element namespace should be resolved at runtime for render function / jsx usage\"\n    - Date: 2016-06-27T18:02:14Z\n\n69. Commit ID: 1b3b19491fd47f3634e30d7fcce991881de16530\n    - Message: \"merge renderElement and renderElementWithChildren\"\n    - Date: 2016-06-27T16:25:02Z\n\n70. Commit ID: cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9\n    - Message: \"apply scopeId to slot contents too\"\n    - Date: 2016-06-15T17:33:12Z\n\n71. Commit ID: b0ad94fc876826a8ee3226320aacd40b8967f8dd\n    - Message: \"properly encode HTML in server-side rendering (fix #3078)\"\n    - Date: 2016-06-14T18:15:41Z\n\n72. Commit ID: a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6\n    - Message: \"fix whitespace vnode identity breaking patch (fix #3043)\"\n    - Date: 2016-06-08T17:28:55Z\n\n73. Commit ID: a5a9dc9b694da007a13bd5adfd64b0ab0750ad57\n    - Message: \"support keep-alive\"\n    - Date: 2016-06-04T14:53:05Z\n\n74. Commit ID: 4bcdce895c5dc0403b6a94b0ad71b2bc57734234\n    - Message: \"record original tag name on vnode for components using is attribute\"\n    - Date: 2016-06-02T22:18:32Z\n\n75. Commit ID: d40ab0ca8760b9d8ec8be630e2360e6927ba8b3e\n    - Message: \"fix component client-side hydration\"\n    - Date: 2016-06-01T22:20:13Z\n\n76. Commit ID: f8cfc81826715b23dac054b6d1727594d2caeebd\n    - Message: \"remove unnecessary v-pre related code\"\n    - Date: 2016-06-01T19:03:09Z\n\n77. Commit ID: 8d229b2442e8cc5b2801fa55a4ea8ea766721381\n    - Message: \"support v-bind on objects\"\n    - Date: 2016-05-25T00:41:06Z\n\n78. Commit ID: 7f85acb4e5c28052e07d5e2c4cf2903cac0e4bd5\n    - Message: \"expose oldValue on directive bindings\"\n    - Date: 2016-05-24T22:28:17Z\n\n79. Commit ID: 48f22c9b17a9def00dcfa4899fee9e60c8933dbc\n    - Message: \"fix flow error\"\n    - Date: 2016-05-24T04:27:18Z\n\n80. Commit ID: 837853d95ad1224ed12ba2454b791591884caf2e\n    - Message: \"better inferring of component names in warnings\"\n    - Date: 2016-05-19T17:58:11Z\n\n81. Commit ID: 20fb79a1ea098bedda6fec8bebbb184ac51fce20\n    - Message: \"new render mechanism (#2857)\\n\\n* updated compiler with new render functions\\r\\n\\r\\n* separated createElement into renderSelf & renderElement\\r\\nsupported getters for text node & static root\\r\\n\\r\\n* adapted new element creator into render call\\r\\n\\r\\n* improved \\\\$createElement\\r\\n\\r\\n* fixed by flow check\\r\\n\\r\\n* fixed ssr bugs for $createElement\"\n    - Date: 2016-05-14T19:49:18Z\n\n82. Commit ID: 750bec1024478022453277a4d175cff5a8445672\n    - Message: \"annotate platforms/web\"\n    - Date: 2016-05-14T11:40:56Z\n\n83. Commit ID: 59fcd4e7a749561ad6acf3ec50c32c24b33d8ec4\n    - Message: \"finish annotating vdom\"\n    - Date: 2016-05-14T07:38:41Z\n\n84. Commit ID: 45d96c7dbc399696138c9d020e13f97cf94ce181\n    - Message: \"annotation for vdom (wip)\"\n    - Date: 2016-05-14T07:08:21Z\n\n85. Commit ID: 354ea616b5ec4826e23a88465e404fd3b382d9f4\n    - Message: \"annotate Vue class\"\n    - Date: 2016-05-12T23:13:38Z\n\n86. Commit ID: 6593be9f75ea229e71e5b0530bb0f27aeee57afc\n    - Message: \"update unit tests convention + basic component tests\"\n    - Date: 2016-05-09T22:08:18Z\n\n87. Commit ID: f4a2afb3b33991c1694e8fcb7d62641c30eeaf53\n    - Message: \"expose context on vnode, simplify render methods\"\n    - Date: 2016-04-25T03:31:07Z\n\n88. Commit ID: 955e2f839175fadbd0218f7b78c48ebbbcca6349\n    - Message: \"restructure (build pass)\"\n    - Date: 2016-04-23T20:12:19Z\n\n89. Commit ID: ec5bcefca73160e6d283b8a0c4e1457f42f87081\n    - Message: \"tweak namespace changes\"\n    - Date: 2016-04-23T17:37:47Z\n\n90. Commit ID: 6e251e0721b4dbb4896999df78450d912dcba30d\n    - Message: \"Change svg parameter to namespace (#3)\\n\\n* change svg parameter into namespace\\r\\n\\r\\n* fixed svg to namespace bug\\r\\n\\r\\n* change svg detecting into namespace detecting in parser\\r\\n\\r\\n* fixed eslint error\"\n    - Date: 2016-04-23T17:29:31Z\n\n91. Commit ID: 9a347e02b4b1fd8ddc51db6c2ba08a1831f4dfd0\n    - Message: \"allow data to be undefined\"\n    - Date: 2016-04-21T16:37:12Z\n\n92. Commit ID: d87987780a208fe3c65415a4a1cab58250ffa9a3\n    - Message: \"rename\"\n    - Date: 2016-04-21T08:24:26Z\n\n93. Commit ID: 1a35cf4a21e8c8e897c2d6f291b99376b12b9fac\n    - Message: \"support template slot\"\n    - Date: 2016-04-15T02:55:29Z\n\n94. Commit ID: 0ab0600599dcc593695560382af1c1a8119ce848\n    - Message: \"restructure\"\n    - Date: 2016-04-12T23:42:15Z\n\n95. Commit ID: 69e94eb453ee0da21f9a0506d2f01269865a4776\n    - Message: \"move flatten into vdom implementation\"\n    - Date: 2016-04-11T03:54:53Z\n\n96. Commit ID: a879ec06ef9504db8df2a19aac0d07609fe36131\n    - Message: \"init\"\n    - Date: 2016-04-11T02:47:28Z",
        "chain_of_thought": "To address the question, we need to find all commits associated with the file named \"vnode.js\". The relevant nodes are the File and Commit nodes. The relationship between these nodes is the changed relationship, which indicates that a commit has modified a file.\n\nHere's how we can construct the query:\n\n1. Identify the File node with the name \"vnode.js\".\n2. Find all Commit nodes that have a changed relationship with this File node.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'vnode.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS commitDate\n```\n\nThis query will return the commit ID, message, and committed date for all commits that have modified the file \"vnode.js\".",
        "query": "cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'vnode.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS commitDate\n",
        "result": [
            {
                "commitId": "9949ab5d14e3620f40b876cffbc710a33d0237b2",
                "commitMessage": "\"Merge pull request #3 from dwelch2344/move_to_typescript\n\nWIP: typescript love on the tests\"",
                "commitDate": "2022-05-04T21:25:34Z"
            },
            {
                "commitId": "40dccfedd1d92ef9d61ee350ed8fbd7fc525b5b9",
                "commitMessage": "\"chore: fix test harness; most of the tooling + test harness is happy; coverage still needs fixing\"",
                "commitDate": "2022-05-03T17:04:55Z"
            },
            {
                "commitId": "982d5a492fb95577217e2dacaa044eabe78a8601",
                "commitMessage": "\"fix(types): support string type for style in VNode data (#9728)\n\nfix #9727\"",
                "commitDate": "2019-03-18T07:47:43Z"
            },
            {
                "commitId": "dbc0582587f90e78867809bb6ae683301cd0626b",
                "commitMessage": "\"feat: dynamic directive arguments for v-on, v-bind and custom directives (#9373)\"",
                "commitDate": "2019-01-26T04:22:44Z"
            },
            {
                "commitId": "097f6229dffc34af452b106ad2a3b58845588807",
                "commitMessage": "\"fix(core): avoid mutating original children when cloning vnode\n\nThe on-demand clone strategy introduced in 956756b mutates the owner\narray of the cloned vnode. This causes the newly cloned vnode to be\ndestroyed when the parent node is destroyed. This is fixed by cloning\nthe children array when cloning a vnode.\n\nfix #7975\"",
                "commitDate": "2018-12-01T22:05:36Z"
            },
            {
                "commitId": "4ecc21c29ec12bb33d3b426cb4d42c579e9b0f2d",
                "commitMessage": "\"feat(devtools): store functional render context on vnode in development (#8586)\"",
                "commitDate": "2018-11-30T22:31:44Z"
            },
            {
                "commitId": "8227fb35240ab1f301c30a6ad5d4d25071fa7996",
                "commitMessage": "\"fix: add missing `asyncMeta` during VNode cloning (#7861)\"",
                "commitDate": "2018-03-23T23:13:10Z"
            },
            {
                "commitId": "d7d9b002fd60d246b1ef65f71b55b45f46563b4d",
                "commitMessage": "\"chore: fix typo (#7781)\"",
                "commitDate": "2018-03-09T13:54:55Z"
            },
            {
                "commitId": "956756b1be7084daf8b6afb92ac0da7c24cde2a5",
                "commitMessage": "\"refactor: use more efficient on-demand clone to handle reused node edge cases\n\nremoves unnecessary slot/static node clones, fix #7292\"",
                "commitDate": "2017-12-21T00:44:24Z"
            },
            {
                "commitId": "604e081d0456ed136b24b5f759c608d153dfae93",
                "commitMessage": "\"fix: ensure functionalContext is cloned during slot clones\n\nfix #7106\"",
                "commitDate": "2017-11-22T21:37:24Z"
            },
            {
                "commitId": "1cf02efda206185cb72bbaafb00037fa6269e3f3",
                "commitMessage": "\"fix: also clone component slot children during deepClone\n\nfix #6891, fix #6915\"",
                "commitDate": "2017-10-26T16:00:19Z"
            },
            {
                "commitId": "53431c63a9033bb9a73c915bca8525f0d7988c26",
                "commitMessage": "\"types: fix flow typing\"",
                "commitDate": "2017-10-11T15:24:39Z"
            },
            {
                "commitId": "421658884f7ca786747abf9b89e00925fdfdfba8",
                "commitMessage": "\"fix: fix scoped CSS for nested nodes in functional components\"",
                "commitDate": "2017-10-11T15:17:46Z"
            },
            {
                "commitId": "050bb33f9b02589357c037623ea8cbf8ff13555b",
                "commitMessage": "\"feat: scoped CSS support for functional components\"",
                "commitDate": "2017-10-11T14:38:46Z"
            },
            {
                "commitId": "53463619e5d19d35dfad1a4245a8dc583681feb3",
                "commitMessage": "\"perf: deep clone slot vnodes on re-render (#6478)\n\navoid unnecessary assignment.\"",
                "commitDate": "2017-09-01T16:14:55Z"
            },
            {
                "commitId": "0529040c17b8632032a43d142aac88386f6b4a1f",
                "commitMessage": "\"fix: deep clone slot vnodes on re-render\n\nfix #6372\"",
                "commitDate": "2017-08-29T22:47:10Z"
            },
            {
                "commitId": "11614d63b7862b68b11cc45c0891437c62a832d7",
                "commitMessage": "\"feat(v-on): support v-on object syntax with no arguments\n\nNote this does not support modifiers and is meant to be used for handling\nevents proxying in higher-order-components.\"",
                "commitDate": "2017-07-11T08:36:04Z"
            },
            {
                "commitId": "fed602b90be89a43b4ec41b5a2e0a526d3a5f4a2",
                "commitMessage": "\"refactor: also clone vnode.asyncFactory\"",
                "commitDate": "2017-07-11T05:06:23Z"
            },
            {
                "commitId": "e4da249ab8ef32a0b8156c840c9d2b9773090f8a",
                "commitMessage": "\"feat: add `comments` option to allow preserving comments in template  (#5951)\n\nclose #5392\"",
                "commitDate": "2017-06-30T00:56:23Z"
            },
            {
                "commitId": "d33c1250ee77dd337eb4979851ade331f177b890",
                "commitMessage": "\"fix:when using object syntax in v-bind, special attribute have no effect\"",
                "commitDate": "2017-06-16T18:02:37Z"
            },
            {
                "commitId": "9cf6646f46ef3c13236677e58e72d2c6dd5c8abf",
                "commitMessage": "\"support directly rendering async components in SSR\"",
                "commitDate": "2017-05-24T08:50:17Z"
            },
            {
                "commitId": "7404091896fda2c87ecac64efc24324ff1885e2c",
                "commitMessage": "\"support async hydration\"",
                "commitDate": "2017-05-24T08:50:17Z"
            },
            {
                "commitId": "43485fbc5b779e02122c3b7fc64296a2cfee31f6",
                "commitMessage": "\"Merge branch ssr-optimize into dev\"",
                "commitDate": "2017-05-18T08:56:05Z"
            },
            {
                "commitId": "26953f5cacc03440df394ebbc74023efd364b7e0",
                "commitMessage": "\"add semis to flow decls for better syntax highlighting\"",
                "commitDate": "2017-05-15T08:01:30Z"
            },
            {
                "commitId": "0ccefff794c5fe73b80b9faf5ae5bfd8ec1a500f",
                "commitMessage": "\"support v-for on scoped slots (fix #5615)\"",
                "commitDate": "2017-05-09T15:22:55Z"
            },
            {
                "commitId": "5d965d5b3bbe0e76cdb97e41e01a704322253e09",
                "commitMessage": "\"clone `isComment` when cloneVNode (#5633)\"",
                "commitDate": "2017-05-09T13:12:59Z"
            },
            {
                "commitId": "1073035164b809872bf35a3b007848979f86f48a",
                "commitMessage": "\"fix activate hook call timing (fix vue-router#1212)\"",
                "commitDate": "2017-04-07T07:30:37Z"
            },
            {
                "commitId": "a12d32a56df2519c9cdf8d2da9d9425876263f89",
                "commitMessage": "\"fix style diffing on cached/slot elements (fix #5318)\"",
                "commitDate": "2017-04-03T06:13:57Z"
            },
            {
                "commitId": "2afaac2b397b4b04713488aeb62e5e222e5dc121",
                "commitMessage": "\"cache vnodes length (#5125)\"",
                "commitDate": "2017-03-08T02:24:25Z"
            },
            {
                "commitId": "9d6c8ec268f659a715e3b38c97a1e03964961703",
                "commitMessage": "\"feat: allow customization of component v-model prop/event via model option (close #4515)\"",
                "commitDate": "2017-01-22T19:31:43Z"
            },
            {
                "commitId": "fe02bc3a27b3b33f9467980f61126edf97105287",
                "commitMessage": "\"ignore deprecated alias\"",
                "commitDate": "2017-01-12T23:24:37Z"
            },
            {
                "commitId": "ced2dfc8f704b07cd59467eca38c58c590d0c012",
                "commitMessage": "\"expose vnode.child for backwards compat, update .flowconfig & ts types\"",
                "commitDate": "2017-01-12T23:04:36Z"
            },
            {
                "commitId": "30258a9a60b96c25c95685cb17ee35838830ee4c",
                "commitMessage": "\"rename vnode.child -> vnode.componentInstance\"",
                "commitDate": "2017-01-12T22:44:19Z"
            },
            {
                "commitId": "207c18c47f8c94f6d92675b28bc67511b7897246",
                "commitMessage": "\"further reduce normalizeChildren usage\"",
                "commitDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7c3c86f36044ada983c09e7733841cb4c55de9d1",
                "commitMessage": "\"fix namespace hoisting\"",
                "commitDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "79e1058799dcde0b7e341ef44b590ecbf1e3a722",
                "commitMessage": "\"wip: refactor compiler to skip normalization when possible\n\nwip fix\n\nwip fix\n\nwip fix\"",
                "commitDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7431e4d16c92862ac74fdb3053de9295c809b586",
                "commitMessage": "\"emptyVNode -> createEmptyVNode\"",
                "commitDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7b389bc34e12442663de1939882b523345a9e46d",
                "commitMessage": "\"avoid warning unknown custom elements in v-pre\"",
                "commitDate": "2016-11-24T17:47:27Z"
            },
            {
                "commitId": "303378f85b26934396e2f6dc0973f6982da2beb1",
                "commitMessage": "\"support default scoped slot + function children as scoped slot\"",
                "commitDate": "2016-11-20T17:03:43Z"
            },
            {
                "commitId": "ff551029bf872ad067ac7c5ba7c6311fdde7c674",
                "commitMessage": "\"wip: fix flow type for weex merge\"",
                "commitDate": "2016-11-07T21:26:06Z"
            },
            {
                "commitId": "b69b4a4eeff204488c3eb60cac951f9808581e1c",
                "commitMessage": "\"tweak style merge for performance\"",
                "commitDate": "2016-11-07T21:20:10Z"
            },
            {
                "commitId": "e960cd104e67e8e410956fa589090fe171382528",
                "commitMessage": "\"enable style merge behavior between parent-child components (fix #3997) (#4138)\n\n* merge style between components\r\n\r\n* update test case\r\n\r\n* update style compiler\r\n\r\n* add paren to style binding code\r\n\r\n* update background property parsing\r\n\r\n* introduce interpolation warning and refactor var to const\"",
                "commitDate": "2016-11-07T21:19:48Z"
            },
            {
                "commitId": "ec824be88e9bc71b31e5c4a43f80d921674dca66",
                "commitMessage": "\"fix v-once inside v-for (fix #3964)\"",
                "commitDate": "2016-11-03T02:34:36Z"
            },
            {
                "commitId": "0cd1489e68891e4ca532ce7299d09e8af5ae3f52",
                "commitMessage": "\".number modifier should work with select, radio, checkbox (fix #4018) (#4022)\n\n* support number modifier in select, radio, checkbox\r\n\r\n* add test case\r\n\r\n* add ASTModifier type to specify modifiers type\r\n\r\n* fix typo\r\n\r\n* keep code consistent\"",
                "commitDate": "2016-11-01T15:50:22Z"
            },
            {
                "commitId": "1a8720d6ead500eed5d40457a3e7f59fe8972472",
                "commitMessage": "\"Fix typo in component (#3978)\"",
                "commitDate": "2016-10-19T14:33:17Z"
            },
            {
                "commitId": "1fa3844dc26745b4cb855b0934bd1b132ba33d9b",
                "commitMessage": "\"refactor directive update implementation\"",
                "commitDate": "2016-10-12T00:31:13Z"
            },
            {
                "commitId": "3446d1485d36b91ef42c53268cb69ecb047538a5",
                "commitMessage": "\"support functional components as named slot (fix #3872)\"",
                "commitDate": "2016-10-11T02:41:14Z"
            },
            {
                "commitId": "d6a7568891d0c3368471322de5d730172d92b9e4",
                "commitMessage": "\"improve v-bind implementation and make it work on components (fix #3670)\"",
                "commitDate": "2016-09-14T14:14:45Z"
            },
            {
                "commitId": "f6b1a51729f705bc49c6eaaf32ec095efd97401c",
                "commitMessage": "\"fix hot-reload not updating static nodes\"",
                "commitDate": "2016-08-29T15:45:08Z"
            },
            {
                "commitId": "014d2f8599f9afc0754e603b1528a12e74bd209a",
                "commitMessage": "\"fix vdom patch edge case for static nodes being reused and as insertion reference node (fix #3533)\"",
                "commitDate": "2016-08-27T20:29:07Z"
            },
            {
                "commitId": "ed2085974b2a385ca1fd8cd696917d6cda8322e7",
                "commitMessage": "\"ensure mergeVNodeHook does not inject duplicate hooks\"",
                "commitDate": "2016-08-26T23:19:51Z"
            },
            {
                "commitId": "d2df58e547a7e1018c72a52714be7dee4ad06922",
                "commitMessage": "\"move v-show marker to runtime so that render functions work as expected (fix #3488)\"",
                "commitDate": "2016-08-20T15:14:41Z"
            },
            {
                "commitId": "ba5fb31188467c9f07cdcfa94e9469e172098ec5",
                "commitMessage": "\"fix transition insert hook duplicate invocation on slot nodes (fix #3474)\"",
                "commitDate": "2016-08-18T16:00:31Z"
            },
            {
                "commitId": "18386c4cf4fe829f447687734a5bf03905d0db44",
                "commitMessage": "\"fix static nodes optimization inside v-for (fix #3406)\"",
                "commitDate": "2016-08-08T23:03:00Z"
            },
            {
                "commitId": "fe801b16e4da63513bce95bfa762a8a36d83fe59",
                "commitMessage": "\"wip: fix $parent after children change\"",
                "commitDate": "2016-08-05T16:43:35Z"
            },
            {
                "commitId": "b5b963f51df1fa3124cd8a9846be5455408bc52a",
                "commitMessage": "\"wip: refactor children resolution (remove thunk mechanism)\"",
                "commitDate": "2016-08-05T16:10:13Z"
            },
            {
                "commitId": "c66b7566c682af653dc475fab1475db5484e40ee",
                "commitMessage": "\"fix flow\"",
                "commitDate": "2016-08-05T07:10:40Z"
            },
            {
                "commitId": "59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8",
                "commitMessage": "\"support class/style in v-bind object\"",
                "commitDate": "2016-08-05T06:59:33Z"
            },
            {
                "commitId": "351aef3cb4ada980f105f98f8b835876e8d4d689",
                "commitMessage": "\"use comment node as empty placeholder (fix <transition> SSR hydration)\"",
                "commitDate": "2016-08-05T05:52:09Z"
            },
            {
                "commitId": "40b93e6527d9ecdb308925114bf14cb60b36eae0",
                "commitMessage": "\"avoid unnecessary enter transitions on nested inserted elements\"",
                "commitDate": "2016-08-05T02:17:59Z"
            },
            {
                "commitId": "35ee5b105e8a517571b9bb9a87160c6ffbdad779",
                "commitMessage": "\"remove staticAttrs\"",
                "commitDate": "2016-07-29T14:45:43Z"
            },
            {
                "commitId": "74f8b98509d24487e1a8d1588b4128a7a1046a41",
                "commitMessage": "\"handle static vnodes properly during patch (fix #3325)\"",
                "commitDate": "2016-07-26T19:49:40Z"
            },
            {
                "commitId": "3ce450b6dc5f2135266c8a38818371e9d4f1f460",
                "commitMessage": "\"use more proper flow type syntax\"",
                "commitDate": "2016-07-26T01:28:46Z"
            },
            {
                "commitId": "ea9c6c37c3ef0ef3706afa94070b89a7464c559c",
                "commitMessage": "\"support v-on .native modifier on components\"",
                "commitDate": "2016-07-19T22:56:10Z"
            },
            {
                "commitId": "69ecdcb05e3f5db32af889962fe8253d49d7390d",
                "commitMessage": "\"rename vnode.data.props -> domProps\"",
                "commitDate": "2016-07-19T21:52:10Z"
            },
            {
                "commitId": "e6871a33c17fd7dfd58fba6c7c6b6182f0ff2f0e",
                "commitMessage": "\"update flow annotations\"",
                "commitDate": "2016-07-15T21:48:42Z"
            },
            {
                "commitId": "9421bd48066906e20052e04cf88c4ae623080a95",
                "commitMessage": "\"extract getRealChild for abstract components\"",
                "commitDate": "2016-07-06T21:07:46Z"
            },
            {
                "commitId": "06b470369a7bde2a7f36468191e424b4c455db67",
                "commitMessage": "\"element namespace should be resolved at runtime for render function / jsx usage\"",
                "commitDate": "2016-06-27T18:02:14Z"
            },
            {
                "commitId": "1b3b19491fd47f3634e30d7fcce991881de16530",
                "commitMessage": "\"merge renderElement and renderElementWithChildren\"",
                "commitDate": "2016-06-27T16:25:02Z"
            },
            {
                "commitId": "cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9",
                "commitMessage": "\"apply scopeId to slot contents too\"",
                "commitDate": "2016-06-15T17:33:12Z"
            },
            {
                "commitId": "b0ad94fc876826a8ee3226320aacd40b8967f8dd",
                "commitMessage": "\"properly encode HTML in server-side rendering (fix #3078)\"",
                "commitDate": "2016-06-14T18:15:41Z"
            },
            {
                "commitId": "a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6",
                "commitMessage": "\"fix whitespace vnode identity breaking patch (fix #3043)\"",
                "commitDate": "2016-06-08T17:28:55Z"
            },
            {
                "commitId": "a5a9dc9b694da007a13bd5adfd64b0ab0750ad57",
                "commitMessage": "\"support keep-alive\"",
                "commitDate": "2016-06-04T14:53:05Z"
            },
            {
                "commitId": "4bcdce895c5dc0403b6a94b0ad71b2bc57734234",
                "commitMessage": "\"record original tag name on vnode for components using is attribute\"",
                "commitDate": "2016-06-02T22:18:32Z"
            },
            {
                "commitId": "d40ab0ca8760b9d8ec8be630e2360e6927ba8b3e",
                "commitMessage": "\"fix component client-side hydration\"",
                "commitDate": "2016-06-01T22:20:13Z"
            },
            {
                "commitId": "f8cfc81826715b23dac054b6d1727594d2caeebd",
                "commitMessage": "\"remove unnecessary v-pre related code\"",
                "commitDate": "2016-06-01T19:03:09Z"
            },
            {
                "commitId": "8d229b2442e8cc5b2801fa55a4ea8ea766721381",
                "commitMessage": "\"support v-bind on objects\"",
                "commitDate": "2016-05-25T00:41:06Z"
            },
            {
                "commitId": "7f85acb4e5c28052e07d5e2c4cf2903cac0e4bd5",
                "commitMessage": "\"expose oldValue on directive bindings\"",
                "commitDate": "2016-05-24T22:28:17Z"
            },
            {
                "commitId": "48f22c9b17a9def00dcfa4899fee9e60c8933dbc",
                "commitMessage": "\"fix flow error\"",
                "commitDate": "2016-05-24T04:27:18Z"
            },
            {
                "commitId": "837853d95ad1224ed12ba2454b791591884caf2e",
                "commitMessage": "\"better inferring of component names in warnings\"",
                "commitDate": "2016-05-19T17:58:11Z"
            },
            {
                "commitId": "20fb79a1ea098bedda6fec8bebbb184ac51fce20",
                "commitMessage": "\"new render mechanism (#2857)\n\n* updated compiler with new render functions\r\n\r\n* separated createElement into renderSelf & renderElement\r\nsupported getters for text node & static root\r\n\r\n* adapted new element creator into render call\r\n\r\n* improved \\$createElement\r\n\r\n* fixed by flow check\r\n\r\n* fixed ssr bugs for $createElement\"",
                "commitDate": "2016-05-14T19:49:18Z"
            },
            {
                "commitId": "750bec1024478022453277a4d175cff5a8445672",
                "commitMessage": "\"annotate platforms/web\"",
                "commitDate": "2016-05-14T11:40:56Z"
            },
            {
                "commitId": "59fcd4e7a749561ad6acf3ec50c32c24b33d8ec4",
                "commitMessage": "\"finish annotating vdom\"",
                "commitDate": "2016-05-14T07:38:41Z"
            },
            {
                "commitId": "45d96c7dbc399696138c9d020e13f97cf94ce181",
                "commitMessage": "\"annotation for vdom (wip)\"",
                "commitDate": "2016-05-14T07:08:21Z"
            },
            {
                "commitId": "354ea616b5ec4826e23a88465e404fd3b382d9f4",
                "commitMessage": "\"annotate Vue class\"",
                "commitDate": "2016-05-12T23:13:38Z"
            },
            {
                "commitId": "6593be9f75ea229e71e5b0530bb0f27aeee57afc",
                "commitMessage": "\"update unit tests convention + basic component tests\"",
                "commitDate": "2016-05-09T22:08:18Z"
            },
            {
                "commitId": "f4a2afb3b33991c1694e8fcb7d62641c30eeaf53",
                "commitMessage": "\"expose context on vnode, simplify render methods\"",
                "commitDate": "2016-04-25T03:31:07Z"
            },
            {
                "commitId": "955e2f839175fadbd0218f7b78c48ebbbcca6349",
                "commitMessage": "\"restructure (build pass)\"",
                "commitDate": "2016-04-23T20:12:19Z"
            },
            {
                "commitId": "ec5bcefca73160e6d283b8a0c4e1457f42f87081",
                "commitMessage": "\"tweak namespace changes\"",
                "commitDate": "2016-04-23T17:37:47Z"
            },
            {
                "commitId": "6e251e0721b4dbb4896999df78450d912dcba30d",
                "commitMessage": "\"Change svg parameter to namespace (#3)\n\n* change svg parameter into namespace\r\n\r\n* fixed svg to namespace bug\r\n\r\n* change svg detecting into namespace detecting in parser\r\n\r\n* fixed eslint error\"",
                "commitDate": "2016-04-23T17:29:31Z"
            },
            {
                "commitId": "9a347e02b4b1fd8ddc51db6c2ba08a1831f4dfd0",
                "commitMessage": "\"allow data to be undefined\"",
                "commitDate": "2016-04-21T16:37:12Z"
            },
            {
                "commitId": "d87987780a208fe3c65415a4a1cab58250ffa9a3",
                "commitMessage": "\"rename\"",
                "commitDate": "2016-04-21T08:24:26Z"
            },
            {
                "commitId": "1a35cf4a21e8c8e897c2d6f291b99376b12b9fac",
                "commitMessage": "\"support template slot\"",
                "commitDate": "2016-04-15T02:55:29Z"
            },
            {
                "commitId": "0ab0600599dcc593695560382af1c1a8119ce848",
                "commitMessage": "\"restructure\"",
                "commitDate": "2016-04-12T23:42:15Z"
            },
            {
                "commitId": "69e94eb453ee0da21f9a0506d2f01269865a4776",
                "commitMessage": "\"move flatten into vdom implementation\"",
                "commitDate": "2016-04-11T03:54:53Z"
            },
            {
                "commitId": "a879ec06ef9504db8df2a19aac0d07609fe36131",
                "commitMessage": "\"init\"",
                "commitDate": "2016-04-11T02:47:28Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "Determine the developers that had the most unfixed bugs?",
        "number": 7,
        "category": 2,
        "response": "The developer with the most unfixed bugs is Justineo, with 1 unfixed bug.",
        "chain_of_thought": "To determine the developers that had the most unfixed bugs, we need to interpret the question in the context of the provided schema. An unfixed bug can be interpreted as an issue that has been introduced by a commit but not yet fixed by any commit. Therefore, we need to find users who have authored commits that introduced issues, and those issues remain in an unfixed state.\n\nHere's how we can construct the query:\n\n1. Identify the relevant nodes and relationships:\n   - We need the `User` node to identify developers.\n   - The `Commit` node is needed to find commits authored by users.\n   - The `Issue` node is needed to find issues introduced by commits.\n   - The `author` relationship connects `User` to `Commit`.\n   - The `introduced` relationship connects `Commit` to `Issue`.\n   - The `fixed` relationship connects `Commit` to `Issue` to identify fixed issues.\n\n2. Find issues that have been introduced but not fixed:\n   - Match users who have authored commits that introduced issues.\n   - Ensure these issues are not fixed by checking the absence of a `fixed` relationship.\n\n3. Aggregate the number of unfixed issues for each developer.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE NOT EXISTS {\n  MATCH (c2:Commit)-[:fixed]->(i)\n}\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n```\n\nThis query will return the developers who have the most unfixed bugs, sorted in descending order by the number of unfixed bugs.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE NOT EXISTS {\n  MATCH (c2:Commit)-[:fixed]->(i)\n}\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n",
        "result": [
            {
                "developer": "Justineo",
                "unfixed_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 2,
        "label": "partial"
    },
    {
        "question": "which developer has most number of bugs yet to be fixed?",
        "number": 8,
        "category": 2,
        "response": "The developer with the most number of bugs yet to be fixed is Evan You, with 1 open bug.",
        "chain_of_thought": "To determine which developer has the most number of bugs yet to be fixed, we need to consider the following:\n\n1. **Identify Bugs**: Bugs are represented by issues in the schema. We need to find issues that are still open, which means their `state` property is not \"closed\".\n\n2. **Link Bugs to Developers**: We need to find the developers who are responsible for these open issues. This can be interpreted as the developers who have been assigned to these issues. The relevant relationship here is the `assigned` relationship between the `User` and `Issue` nodes.\n\n3. **Count Open Bugs per Developer**: We need to count the number of open issues for each developer.\n\nGiven these considerations, the query should:\n\n- Match users assigned to issues.\n- Filter for issues that are not closed.\n- Count the number of such issues per user.\n- Sort the results to find the developer with the most open issues.\n\nHere's the complete Cypher query:\n\n```cypher\nMATCH (u:User)-[:assigned]->(i:Issue)\nWHERE i.state <> 'closed'\nRETURN u.name AS developer, COUNT(i) AS open_bugs\nORDER BY open_bugs DESC\nLIMIT 1\n```\n\nThis query will return the developer with the most open bugs, which are issues that have not been closed yet.",
        "query": "cypher\nMATCH (u:User)-[:assigned]->(i:Issue)\nWHERE i.state <> 'closed'\nRETURN u.name AS developer, COUNT(i) AS open_bugs\nORDER BY open_bugs DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "Evan You",
                "open_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "Determine the developers that fixed the most bugs in helpers.js?",
        "number": 9,
        "category": 3,
        "response": "The developer who fixed the most bugs in `helpers.js` is Evan You, with a total of 11 bugs fixed. Following Evan You, chengchao fixed 2 bugs, and Jason fixed 1 bug.",
        "chain_of_thought": "To determine the developers who fixed the most bugs in the file `helpers.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We are interested in the `User`, `Commit`, `Issue`, and `File` nodes.\n   - The `User` node is connected to the `Commit` node via the `author` relationship.\n   - The `Commit` node is connected to the `Issue` node via the `fixed` relationship, indicating that the commit fixed a bug.\n   - The `Issue` node is connected to the `File` node via the `impacted` relationship, indicating that the file was impacted by the issue.\n\n2. **Filter for the specific file**: \n   - We need to filter the `File` node to find the file with the name `helpers.js`.\n\n3. **Aggregate the number of bugs fixed by each developer**:\n   - We need to count the number of issues fixed by each developer for the file `helpers.js`.\n\nThe Cypher query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'helpers.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n```\n\nThis query will return a list of developers and the number of bugs they have fixed in `helpers.js`, sorted in descending order by the number of bugs fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'helpers.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n",
        "result": [
            {
                "developer": "Evan You",
                "bugs_fixed": 11
            },
            {
                "developer": "chengchao",
                "bugs_fixed": 2
            },
            {
                "developer": "Jason",
                "bugs_fixed": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "who did most fixed bugs in client.js?",
        "number": 10,
        "category": 3,
        "response": "The developer who fixed the most bugs in `client.js` is Xin Du (Clark), with a total of 1 bug fixed.",
        "chain_of_thought": "To determine who fixed the most bugs in the file `client.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We are interested in the `User`, `Commit`, `Issue`, and `File` nodes.\n   - The `Commit` node is connected to the `File` node via the `changed` relationship.\n   - The `Commit` node is connected to the `Issue` node via the `fixed` relationship.\n   - The `User` node is connected to the `Commit` node via the `author` relationship.\n\n2. **Filter for the specific file**: \n   - We need to find the `File` node with the name `client.js`.\n\n3. **Find the commits that fixed issues related to this file**:\n   - We need to find the `Commit` nodes that have a `fixed` relationship with `Issue` nodes.\n\n4. **Identify the users who authored these commits**:\n   - We need to find the `User` nodes that have an `author` relationship with these `Commit` nodes.\n\n5. **Count the number of fixed bugs by each user**:\n   - We need to aggregate the number of issues fixed by each user.\n\nHere is the Cypher query to achieve this:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'client.js'})\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 10\n```\n\nThis query will return the top 10 users who have fixed the most bugs in the file `client.js`, ordered by the number of bugs they have fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'client.js'})\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 10\n",
        "result": [
            {
                "developer": "Xin Du (Clark)",
                "fixed_bugs": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "Determine the files that introduce the most bugs?",
        "number": 11,
        "category": 2,
        "response": "The file that introduces the most bugs is `index.js` with 85 bugs. Other files with a high number of introduced bugs include `model.js` with 45 bugs, `render.js` with 42 bugs, and `events.js` with 35 bugs.",
        "chain_of_thought": "To determine the files that introduce the most bugs, we need to identify the files that are associated with the most issues introduced by commits. The schema provides a relationship between Commit and Issue through the introduced relationship, and between Issue and File through the impacted relationship. Therefore, we need to traverse from File to Issue and then to Commit to count how many times each file is associated with an introduced issue.\n\nHere's the step-by-step breakdown of the query:\n\n1. Identify the relevant nodes: File, Issue, and Commit.\n2. Use the impacted relationship to find issues associated with each file.\n3. Use the introduced relationship to find commits that introduced these issues.\n4. Count the number of times each file is associated with an introduced issue.\n5. Sort the files by the number of introduced issues in descending order to find the files that introduce the most bugs.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (f:File)<-[:impacted]-(i:Issue)<-[:introduced]-(c:Commit)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n```\n\nThis query will return the top 10 files that are associated with the most introduced bugs.",
        "query": "cypher\nMATCH (f:File)<-[:impacted]-(i:Issue)<-[:introduced]-(c:Commit)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "index.js",
                "bug_count": 85
            },
            {
                "file": "model.js",
                "bug_count": 45
            },
            {
                "file": "render.js",
                "bug_count": 42
            },
            {
                "file": "events.js",
                "bug_count": 35
            },
            {
                "file": "patch.js",
                "bug_count": 32
            },
            {
                "file": "lifecycle.js",
                "bug_count": 27
            },
            {
                "file": "codegen.spec.js",
                "bug_count": 24
            },
            {
                "file": "html-parser.js",
                "bug_count": 21
            },
            {
                "file": "transition.js",
                "bug_count": 20
            },
            {
                "file": "options.js",
                "bug_count": 19
            }
        ],
        "isAmbiguous": true,
        "iteration": 2,
        "label": "partial"
    },
    {
        "question": "What are the most buggy files?",
        "number": 12,
        "category": 2,
        "response": "The most buggy files, based on the number of issues impacting them, are as follows:\n\n1. `index.js` with 105 issues.\n2. `model.js` with 46 issues.\n3. `render.js` with 42 issues.\n4. `events.js` with 38 issues.\n5. `lifecycle.js` with 37 issues.\n6. `patch.js` and `transition.js`, each with 32 issues.\n7. `component.js` with 29 issues.\n8. `codegen.spec.js` and `options.js`, each with 24 issues.",
        "chain_of_thought": "To determine the most buggy files, we need to identify files that have been impacted by the most issues. In the given schema, the relevant nodes are the File and Issue nodes. The relationship that connects these nodes is the impacted relationship, which indicates that a file is associated with an issue.\n\nThe interpretation of \"most buggy files\" is the files that have been associated with the highest number of issues. Therefore, we need to count the number of issues impacting each file and sort them in descending order to find the files with the most issues.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n```\n\nThis query matches all files that have been impacted by issues, counts the number of issues for each file, and returns the top 10 files with the highest issue count, indicating they are the most buggy.",
        "query": "cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "index.js",
                "issue_count": 105
            },
            {
                "file": "model.js",
                "issue_count": 46
            },
            {
                "file": "render.js",
                "issue_count": 42
            },
            {
                "file": "events.js",
                "issue_count": 38
            },
            {
                "file": "lifecycle.js",
                "issue_count": 37
            },
            {
                "file": "patch.js",
                "issue_count": 32
            },
            {
                "file": "transition.js",
                "issue_count": 32
            },
            {
                "file": "component.js",
                "issue_count": 29
            },
            {
                "file": "codegen.spec.js",
                "issue_count": 24
            },
            {
                "file": "options.js",
                "issue_count": 24
            }
        ],
        "isAmbiguous": true,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "what are the buggy commits that happened on August 18, 2022?",
        "number": 13,
        "category": 2,
        "response": "The buggy commits that happened on August 18, 2022, are:\n\n1. Commit ID: 5221d4d3b6049c87d196d99dbb64bcd3f3b07279 with the message: \"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\"\n2. Commit ID: b4bf4c52ad31e02307cfd4d643dc5610c893e3ba with the message: \"fix(types): allow attaching unknown options to defined component\\n\\nfix #12742\"",
        "chain_of_thought": "To address the question, we need to identify the commits that introduced bugs on August 18, 2022. The schema provides a relationship between Commit and Issue through the introduced relationship, which indicates that a commit introduced a bug. We also need to filter these commits by the specific date, August 18, 2022.\n\nFirst, we identify the relevant nodes and relationships:\n- Commit nodes represent the commits.\n- Issue nodes represent the issues (bugs).\n- The introduced relationship connects Commit nodes to Issue nodes, indicating that a commit introduced a bug.\n\nNext, we filter the commits by the committedDate property to match the specified date. The date should be formatted in ISO format as \"2022-08-18\".\n\nThe query to find the buggy commits that happened on August 18, 2022, is as follows:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-08-18.*'\nRETURN c.id AS commitId, c.message AS commitMessage\n```\n\nThis query matches commits that introduced issues and filters them by the committed date, returning the commit ID and message for each buggy commit on the specified date.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-08-18.*'\nRETURN c.id AS commitId, c.message AS commitMessage\n",
        "result": [
            {
                "commitId": "5221d4d3b6049c87d196d99dbb64bcd3f3b07279",
                "commitMessage": "\"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\""
            },
            {
                "commitId": "5221d4d3b6049c87d196d99dbb64bcd3f3b07279",
                "commitMessage": "\"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\""
            },
            {
                "commitId": "b4bf4c52ad31e02307cfd4d643dc5610c893e3ba",
                "commitMessage": "\"fix(types): allow attaching unknown options to defined component\n\nfix #12742\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "what commits were buggy on May 24, 2022?",
        "number": 14,
        "category": 2,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To determine which commits were buggy on May 24, 2022, we need to identify the commits that introduced issues on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship. We need to filter the issues based on the date they were created, which is represented by the created_at property of the Issue node.\n\nFirst, we need to match the commits that introduced issues:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\n```\n\nNext, we filter the issues to only include those created on May 24, 2022. The date should be formatted in ISO format, and since the time is not specified, we use a regex to match the date part:\n```cypher\nWHERE i.created_at =~ '2022-05-24.*'\n```\n\nFinally, we return the commit IDs that introduced these issues:\n```cypher\nRETURN c.id AS buggy_commit\n```\n\nTherefore, the complete query is:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2022-05-24.*'\nRETURN c.id AS buggy_commit\n```",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2022-05-24.*'\nRETURN c.id AS buggy_commit\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "incorrect"
    },
    {
        "question": "commit(s) that fixed the bug ticket 12892?",
        "number": 15,
        "category": 2,
        "response": "The commit that fixed the bug ticket 12892 is identified by the ID `25f97a5033187372e7b8c591c79336197ee5c833`, and the commit message is: \"fix(compiler-sfc): fix rewriteDefault edge cases\\n\\nclose #13060\\nclose #12892\\nclose #12906\".",
        "chain_of_thought": "To find the commit(s) that fixed the bug ticket with the number 12892, we need to identify the relevant nodes and relationships. The bug ticket is represented by the Issue node, and the commit that fixed the bug is represented by the Commit node. The relevant relationship between Commit and Issue for this question is the fixed relationship, which indicates that a commit fixed a particular issue.\n\nFirst, we need to match the Issue node with the specific number 12892. Then, we need to find the Commit nodes that have a fixed relationship with this Issue node.\n\nThe query to find the commit(s) that fixed the bug ticket 12892 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 12892})\nRETURN c.id AS commit_id, c.message AS commit_message\n```\n\nThis query will return the commit ID and message for each commit that fixed the specified bug ticket.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 12892})\nRETURN c.id AS commit_id, c.message AS commit_message\n",
        "result": [
            {
                "commit_id": "25f97a5033187372e7b8c591c79336197ee5c833",
                "commit_message": "\"fix(compiler-sfc): fix rewriteDefault edge cases\n\nclose #13060\nclose #12892\nclose #12906\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "which commit fixed the bug ticket 11575?",
        "number": 16,
        "category": 2,
        "response": "The commit that fixed the bug ticket 11575 is identified by the commit ID 'af5e05d87ecd218f73302a1b08dcaedd2b46814a'.",
        "chain_of_thought": "To determine which commit fixed the bug associated with ticket 11575, we need to identify the relevant nodes and relationships. The ticket number corresponds to an Issue node, and we are interested in finding the Commit node that has a fixed relationship with this Issue node.\n\nHere's the step-by-step breakdown:\n\n1. **Identify the Issue Node**: We need to find the Issue node with the number 11575.\n2. **Find the Commit Node**: We need to find the Commit node that has a fixed relationship with the identified Issue node.\n\nThe relevant relationship between Commit and Issue for this question is the fixed relationship.\n\nTherefore, the query to find the commit that fixed the bug ticket 11575 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 11575})\nRETURN c.id AS commit_id\n```\n\nThis query will return the ID of the commit that fixed the bug associated with ticket number 11575.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 11575})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "af5e05d87ecd218f73302a1b08dcaedd2b46814a"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "Determine the bug(s) that were introduced because of commit hash fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be?",
        "number": 17,
        "category": 2,
        "response": "The commit with hash `fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be` introduced the following bugs:\n\n1. Issue ID 12608: \"implement and export defineAsyncComponent compatible version in 2.7.x\" - [Issue URL](https://github.com/vuejs/vue/issues/12608)\n\n2. Issue ID 12622: \"Vue.component(id, component) mismatch type of DefineComponent\" - [Issue URL](https://github.com/vuejs/vue/issues/12622)\n\n3. Issue ID 12748: \"Export type `DefineComponent`\" - [Issue URL](https://github.com/vuejs/vue/issues/12748)\n\n4. Issue ID 13078: \"import type { CSSProperties } from vue is error\" - [Issue URL](https://github.com/vuejs/vue/issues/13078)\n\n5. Issue ID 13128: \"Vue 2.7.16 bug: Some types has not export\" - [Issue URL](https://github.com/vuejs/vue/issues/13128)",
        "chain_of_thought": "To determine the bug(s) introduced by a specific commit, we need to identify the relevant nodes and relationships. The commit in question is identified by its hash, which corresponds to the `Commit` node. We are interested in finding the `Issue` nodes that were introduced by this commit. The relevant relationship between `Commit` and `Issue` for this question is the `introduced` relationship.\n\nTherefore, the query to find the bug(s) introduced by the commit with hash `fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be` is:\n\n```cypher\nMATCH (c:Commit {id: 'fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query matches the commit with the specified hash and finds all issues that were introduced by this commit, returning the issue ID, title, and URL for each issue.",
        "query": "cypher\nMATCH (c:Commit {id: 'fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [
            {
                "issue_id": 12608,
                "issue_title": "\"implement and export defineAsyncComponent compatible version in 2.7.x\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12608"
            },
            {
                "issue_id": 12622,
                "issue_title": "\"Vue.component(id, component) mismatch type of DefineComponent\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12622"
            },
            {
                "issue_id": 12748,
                "issue_title": "\"Export type `DefineComponent`\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12748"
            },
            {
                "issue_id": 13078,
                "issue_title": "\"import type { CSSProperties } from vue is error\"",
                "issue_url": "https://github.com/vuejs/vue/issues/13078"
            },
            {
                "issue_id": 13128,
                "issue_title": "\"Vue 2.7.16 bug: Some types has not export\"",
                "issue_url": "https://github.com/vuejs/vue/issues/13128"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "what are the bugs caused by commit c678e3134b927645f79270b52d4d660a7e3654ce?",
        "number": 18,
        "category": 2,
        "response": "The commit with ID c678e3134b927645f79270b52d4d660a7e3654ce caused the following bugs:\n\n1. Issue ID 12758: \"[2.7.x] Here is a type error when using ref() on attribute ref in TSX\". You can view more details at [this URL](https://github.com/vuejs/vue/issues/12758).\n\n2. Issue ID 12832: \"EventHandlers type error, DOMs Event was tainted by `@types/node`\". More information is available at [this URL](https://github.com/vuejs/vue/issues/12832).",
        "chain_of_thought": "To determine the bugs caused by a specific commit, we need to identify the relevant nodes and relationships. The commit in question is identified by its ID, which corresponds to the Commit node. We are interested in finding the issues (bugs) that this commit has introduced. According to the schema, the relevant relationship between a Commit and an Issue for this question is the introduced relationship, which indicates that the commit introduced a bug.\n\nTherefore, the query to find the bugs caused by the commit with ID `c678e3134b927645f79270b52d4d660a7e3654ce` is as follows:\n\n1. Match the specific commit using its ID.\n2. Use the introduced relationship to find the issues (bugs) it caused.\n3. Return the relevant details of the issues.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit {id: 'c678e3134b927645f79270b52d4d660a7e3654ce'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS title, i.url AS url\n```\n\nThis query will return the ID, title, and URL of the issues (bugs) introduced by the specified commit.",
        "query": "cypher\nMATCH (c:Commit {id: 'c678e3134b927645f79270b52d4d660a7e3654ce'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS title, i.url AS url\n",
        "result": [
            {
                "issue_id": 12758,
                "title": "\"[2.7.x] Here is a type error when using ref() on attribute ref in TSX\"",
                "url": "https://github.com/vuejs/vue/issues/12758"
            },
            {
                "issue_id": 12832,
                "title": "\"EventHandlers type error, DOMs Event  was tainted by `@types/node`\"",
                "url": "https://github.com/vuejs/vue/issues/12832"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "Determine the percentage of the fixing commits that introduced bugs on Oct 2017?",
        "number": 19,
        "category": 3,
        "response": "The percentage of fixing commits that introduced bugs in October 2017 is 20.0%.",
        "chain_of_thought": "To determine the percentage of fixing commits that introduced bugs in October 2017, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: We are dealing with Commit nodes and Issue nodes. The relevant relationships are `introduced` (a commit introduced a bug) and `fixed` (a commit fixed a bug).\n\n2. **Filter by date**: We need to filter commits that introduced or fixed bugs in October 2017. The `committedDate` property of the Commit node will be used for this purpose. We will use a regex to match dates in October 2017.\n\n3. **Calculate the total number of fixing commits**: Find all commits that fixed bugs in October 2017.\n\n4. **Calculate the number of fixing commits that also introduced bugs**: Find all commits that both fixed and introduced bugs in October 2017.\n\n5. **Calculate the percentage**: Divide the number of fixing commits that introduced bugs by the total number of fixing commits and multiply by 100 to get the percentage.\n\nHere is the Cypher query to achieve this:\n\n```cypher\n// Step 1: Find all fixing commits in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\n\n// Step 2: Count total fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Step 3: Find fixing commits that also introduced bugs in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\n\n// Step 4: Count fixing commits that introduced bugs\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Step 5: Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n```\n\nThis query will return the percentage of fixing commits that also introduced bugs in October 2017.",
        "query": "cypher\n// Step 1: Find all fixing commits in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\n\n// Step 2: Count total fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Step 3: Find fixing commits that also introduced bugs in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\n\n// Step 4: Count fixing commits that introduced bugs\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Step 5: Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n",
        "result": [
            {
                "percentage": 20.0
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "How many fixing commits caused bugs on Oct 2017?",
        "number": 20,
        "category": 3,
        "response": "There were 7 fixing commits that caused bugs in October 2017.",
        "chain_of_thought": "To address the question, we need to determine the number of commits that both fixed an issue and introduced a bug in October 2017. The schema provides us with the necessary relationships and properties to achieve this.\n\nFirst, let's break down the question:\n\n1. **Fixing Commits**: These are commits that have a `fixed` relationship with an `Issue`.\n2. **Caused Bugs**: These are commits that have an `introduced` relationship with an `Issue`.\n3. **Date Constraint**: We need to filter commits based on the `committedDate` property to only include those from October 2017.\n\nGiven these points, the query will involve:\n\n- Finding commits that have both `fixed` and `introduced` relationships with issues.\n- Filtering these commits by the `committedDate` to ensure they fall within October 2017.\n\nThe relevant nodes and relationships are:\n- `Commit` nodes with `fixed` and `introduced` relationships to `Issue` nodes.\n- The `committedDate` property of `Commit` nodes to filter by date.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n```\n\nExplanation:\n- We match `Commit` nodes that have both `fixed` and `introduced` relationships to `Issue` nodes.\n- We use a regex pattern `2017-10-.*` to filter commits that occurred in October 2017.\n- Finally, we count these commits and return the result as `fixing_commits_causing_bugs`.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n",
        "result": [
            {
                "fixing_commits_causing_bugs": 7
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "how many commits happened in last month?",
        "number": 1,
        "category": 1,
        "response": "There were no commits made in the last month. Can I help with anything else?",
        "chain_of_thought": "To determine how many commits happened in the last month, we need to consider the current date, which is 2024-08-26T00:00:00Z. The last month would be from 2024-07-26T00:00:00Z to 2024-08-25T23:59:59Z.\n\nThe relevant nodes for this query are the Commit nodes, and we need to filter these nodes based on the `committedDate` property. The `committedDate` should be within the specified date range.\n\nHere's the Cypher query to find the number of commits that happened in the last month:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n```\n\nThis query matches all Commit nodes and filters them based on the `committedDate` property to be within the last month, then returns the count of these commits.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n",
        "result": [
            {
                "numberOfCommits": 0
            }
        ],
        "isAmbiguous": true,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "what is the latest commit?",
        "number": 2,
        "category": 1,
        "response": "The latest commit has the ID '73486cb5f5862a443b42c2aff68b82320218cbcd' and was made on June 14, 2024, at 12:52:12 UTC.",
        "chain_of_thought": "To determine the latest commit, we need to identify the Commit node with the most recent committedDate. The relevant property for this query is the committedDate property of the Commit node. We will sort the commits by this date in descending order and return the top result.\n\nThe query to find the latest commit is:\n\n```cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n```\n\nThis query will return the ID and committed date of the latest commit in the database.",
        "query": "cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n",
        "result": [
            {
                "commitId": "73486cb5f5862a443b42c2aff68b82320218cbcd",
                "commitDate": "2024-06-14T12:52:12Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "can you tell me the details of the commits between Dec 1st 2023 and Dec 7th 2023?",
        "number": 3,
        "category": 1,
        "response": "Sure! Here are the details of the commits made between December 1st, 2023, and December 7th, 2023:\n\n1. **Commit ID:** 947993f7e8e445b9032dd59d7f484593c3174452\n   - **Message:** \"chore: bump vitest to 1.0\"\n   - **Additions:** 323\n   - **Deletions:** 154\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:08:23Z\n\n2. **Commit ID:** 08382f008016c3b3b93f84594266f2e191fee91d\n   - **Message:** \"fix(props): should not unwrap props that are raw refs\\n\\nclose #12930\"\n   - **Additions:** 36\n   - **Deletions:** 12\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:10:49Z\n\n3. **Commit ID:** d30f6fd25f90973a84fadb43eef75a54c4b42ea2\n   - **Message:** \"test: fix tests\"\n   - **Additions:** 39\n   - **Deletions:** 39\n   - **Changed Files:** 4\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:21:00Z\n\n4. **Commit ID:** 0ad8e8d94f3a3bf4429f25850c85a6bbb2b81364\n   - **Message:** \"fix(shallowReactive): should track value if already reactive when set in shallowReactive\"\n   - **Additions:** 6\n   - **Deletions:** 5\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:45:15Z\n\n5. **Commit ID:** 45d6ad6645e960a3ee52ad9667520a1625f10dfd\n   - **Message:** \"chore(compiler-sfc): specify prettier version (#13053)\\n\\nclose: #13052\"\n   - **Additions:** 7\n   - **Deletions:** 1\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:49:41Z\n\n6. **Commit ID:** de0b97b3eadae120eda505b45df2de2115dcb6f0\n   - **Message:** \"fix(types): fix type augmentation and compiler-sfc types w/moduleResolution: bundler (#13107)\\n\\nclose #13106\"\n   - **Additions:** 4\n   - **Deletions:** 3\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T07:52:18Z\n\n7. **Commit ID:** ae3e4b1c706b8d61a4a312ca5d23441df021b4b4\n   - **Message:** \"fix(utils): unwrap refs when stringifying values in template\\n\\nclose #12884\\nclose #12888\"\n   - **Additions:** 20\n   - **Deletions:** 1\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T08:40:49Z\n\n8. **Commit ID:** 10c2a87c7038f2f80df23044c48a130bea253bf8\n   - **Message:** \"chore(deps): bump @babel/parser\"\n   - **Additions:** 673\n   - **Deletions:** 701\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T09:09:56Z\n\n9. **Commit ID:** 25f97a5033187372e7b8c591c79336197ee5c833\n   - **Message:** \"fix(compiler-sfc): fix rewriteDefault edge cases\\n\\nclose #13060\\nclose #12892\\nclose #12906\"\n   - **Additions:** 79\n   - **Deletions:** 7\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2023-12-06T09:25:12Z\n\n10. **Commit ID:** d6468c4c383184acd66f3c9091005e83836a43f3\n    - **Message:** \"chore(deps): bump esbuild\"\n    - **Additions:** 6\n    - **Deletions:** 234\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T09:29:47Z\n\n11. **Commit ID:** f5ef882a781b8a62c9ca00e95006d07636567c8e\n    - **Message:** \"fix(style): always set new styles\\n\\nclose #12901\\nclose #12946\"\n    - **Additions:** 17\n    - **Deletions:** 4\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T15:17:02Z\n\n12. **Commit ID:** a174c29dab2cf655b06f7870e0ac5a78ef35ec8a\n    - **Message:** \"fix(types): fix shallowRefs return type  (#12979)\\n\\nclose #12978\"\n    - **Additions:** 30\n    - **Deletions:** 8\n    - **Changed Files:** 3\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T15:51:56Z\n\n13. **Commit ID:** 6d857f5bee275dc98106e3b2cbc7722f5ec0cfc0\n    - **Message:** \"fix(watch): new property addition should trigger deep watcher with getter\\n\\nclose #12967\\nclose #12972\"\n    - **Additions:** 37\n    - **Deletions:** 2\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-06T16:13:31Z\n\n14. **Commit ID:** 24fcf69624a633d43dfc0aa5fa6b93d11de7fad5\n    - **Message:** \"fix(types): type VNodeChildren should allow type number  (#13067)\\n\\nclose #12973\"\n    - **Additions:** 2\n    - **Deletions:** 0\n    - **Changed Files:** 1\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T05:59:43Z\n\n15. **Commit ID:** 83d95351a9f809311d624fc3398e7f6829b72447\n    - **Message:** \"fix(compiler-sfc): check template `ref` usage,  (#12985)\\n\\nclose #12984\"\n    - **Additions:** 29\n    - **Deletions:** 0\n    - **Changed Files:** 3\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T06:14:27Z\n\n16. **Commit ID:** 3650c12f7d3a20f3155bc1fd2b068e84289e0d33\n    - **Message:** \"fix(types): provide types for built-in components\\n\\nclose #13002\"\n    - **Additions:** 65\n    - **Deletions:** 0\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T06:41:10Z\n\n17. **Commit ID:** 2632249925e632e56f6dfc8fdbcf682c82e4081b\n    - **Message:** \"fix(keep-alive): fix keep-alive memory leak\\n\\nclose #12827\"\n    - **Additions:** 2\n    - **Deletions:** 0\n    - **Changed Files:** 1\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T08:12:36Z\n\n18. **Commit ID:** e0747f40a879b4000a1959d21377b51d1f1ed988\n    - **Message:** \"fix(keep-alive): fix memory leak without breaking transition tests\"\n    - **Additions:** 8\n    - **Deletions:** 4\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2023-12-07T09:07:15Z\n\nThese commits were made during the specified period, and include various fixes, chores, and enhancements related to the project.",
        "chain_of_thought": "To address the question, we need to find the details of commits made between December 1st, 2023, and December 7th, 2023. The relevant node for this query is the Commit node, and we will use the `committedDate` property to filter the commits within the specified date range.\n\nFirst, we need to format the dates in ISO format. The start date is \"2023-12-01T00:00:00Z\" and the end date is \"2023-12-07T23:59:59Z\" to include the entire day of December 7th.\n\nThe query will match all commits and filter them based on the `committedDate` property to fall within the specified range. We will then return the details of these commits.\n\nThe complete query is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2023-12-01T00:00:00Z\" AND c.committedDate <= \"2023-12-07T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n```\n\nThis query will return the details of the commits made between December 1st, 2023, and December 7th, 2023, ordered by the commit date.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2023-12-01T00:00:00Z\" AND c.committedDate <= \"2023-12-07T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n",
        "result": [
            {
                "commitId": "947993f7e8e445b9032dd59d7f484593c3174452",
                "message": "\"chore: bump vitest to 1.0\"",
                "additions": 323,
                "deletions": 154,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:08:23Z"
            },
            {
                "commitId": "08382f008016c3b3b93f84594266f2e191fee91d",
                "message": "\"fix(props): should not unwrap props that are raw refs\n\nclose #12930\"",
                "additions": 36,
                "deletions": 12,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:10:49Z"
            },
            {
                "commitId": "d30f6fd25f90973a84fadb43eef75a54c4b42ea2",
                "message": "\"test: fix tests\"",
                "additions": 39,
                "deletions": 39,
                "changedFiles": 4,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:21:00Z"
            },
            {
                "commitId": "0ad8e8d94f3a3bf4429f25850c85a6bbb2b81364",
                "message": "\"fix(shallowReactive): should track value if already reactive when set in shallowReactive\"",
                "additions": 6,
                "deletions": 5,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:45:15Z"
            },
            {
                "commitId": "45d6ad6645e960a3ee52ad9667520a1625f10dfd",
                "message": "\"chore(compiler-sfc): specify prettier version (#13053)\n\nclose: #13052\"",
                "additions": 7,
                "deletions": 1,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:49:41Z"
            },
            {
                "commitId": "de0b97b3eadae120eda505b45df2de2115dcb6f0",
                "message": "\"fix(types): fix type augmentation and compiler-sfc types w/moduleResolution: bundler (#13107)\n\nclose #13106\"",
                "additions": 4,
                "deletions": 3,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:52:18Z"
            },
            {
                "commitId": "ae3e4b1c706b8d61a4a312ca5d23441df021b4b4",
                "message": "\"fix(utils): unwrap refs when stringifying values in template\n\nclose #12884\nclose #12888\"",
                "additions": 20,
                "deletions": 1,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T08:40:49Z"
            },
            {
                "commitId": "10c2a87c7038f2f80df23044c48a130bea253bf8",
                "message": "\"chore(deps): bump @babel/parser\"",
                "additions": 673,
                "deletions": 701,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:09:56Z"
            },
            {
                "commitId": "25f97a5033187372e7b8c591c79336197ee5c833",
                "message": "\"fix(compiler-sfc): fix rewriteDefault edge cases\n\nclose #13060\nclose #12892\nclose #12906\"",
                "additions": 79,
                "deletions": 7,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:25:12Z"
            },
            {
                "commitId": "d6468c4c383184acd66f3c9091005e83836a43f3",
                "message": "\"chore(deps): bump esbuild\"",
                "additions": 6,
                "deletions": 234,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:29:47Z"
            },
            {
                "commitId": "f5ef882a781b8a62c9ca00e95006d07636567c8e",
                "message": "\"fix(style): always set new styles\n\nclose #12901\nclose #12946\"",
                "additions": 17,
                "deletions": 4,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T15:17:02Z"
            },
            {
                "commitId": "a174c29dab2cf655b06f7870e0ac5a78ef35ec8a",
                "message": "\"fix(types): fix shallowRefs return type  (#12979)\n\nclose #12978\"",
                "additions": 30,
                "deletions": 8,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T15:51:56Z"
            },
            {
                "commitId": "6d857f5bee275dc98106e3b2cbc7722f5ec0cfc0",
                "message": "\"fix(watch): new property addition should trigger deep watcher with getter\n\nclose #12967\nclose #12972\"",
                "additions": 37,
                "deletions": 2,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T16:13:31Z"
            },
            {
                "commitId": "24fcf69624a633d43dfc0aa5fa6b93d11de7fad5",
                "message": "\"fix(types): type VNodeChildren should allow type number  (#13067)\n\nclose #12973\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-07T05:59:43Z"
            },
            {
                "commitId": "83d95351a9f809311d624fc3398e7f6829b72447",
                "message": "\"fix(compiler-sfc): check template `ref` usage,  (#12985)\n\nclose #12984\"",
                "additions": 29,
                "deletions": 0,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-07T06:14:27Z"
            },
            {
                "commitId": "3650c12f7d3a20f3155bc1fd2b068e84289e0d33",
                "message": "\"fix(types): provide types for built-in components\n\nclose #13002\"",
                "additions": 65,
                "deletions": 0,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-07T06:41:10Z"
            },
            {
                "commitId": "2632249925e632e56f6dfc8fdbcf682c82e4081b",
                "message": "\"fix(keep-alive): fix keep-alive memory leak\n\nclose #12827\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-07T08:12:36Z"
            },
            {
                "commitId": "e0747f40a879b4000a1959d21377b51d1f1ed988",
                "message": "\"fix(keep-alive): fix memory leak without breaking transition tests\"",
                "additions": 8,
                "deletions": 4,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-07T09:07:15Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "return a commit message on July 31?",
        "number": 4,
        "category": 1,
        "response": "I'm sorry, but there are no commit messages available for July 31, 2024. Can I help with anything else?",
        "chain_of_thought": "To address the question \"return a commit message on July 31,\" we need to interpret the query to find commit messages from a specific date, July 31. The schema provides us with the Commit node, which has a property `committedDate` that we can use to filter commits by date.\n\nThe question does not specify a year, so we will assume it refers to the most recent July 31 relative to the current date, which is 2024-08-26. Therefore, we will look for commits made on July 31, 2024.\n\nThe relevant nodes and properties for this query are:\n- Commit node with the `committedDate` property to filter by date.\n- Commit node with the `message` property to return the commit message.\n\nThe query will filter commits by the `committedDate` property using the ISO date format for July 31, 2024, which is \"2024-07-31\". Since the time is not specified, we will use a regex to match any time on that date.\n\nThe complete Cypher query is:\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commitMessage\n```\n\nThis query matches all commits made on July 31, 2024, and returns their commit messages.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commitMessage\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "incorrect"
    },
    {
        "question": "show me the changes for render.js file?",
        "number": 5,
        "category": 2,
        "response": "Here are the changes made to the `render.js` file:\n\n1. **Commit `f64765fa03c1eb1d37f3301ea5beb4d18e57158a`:**\n   - Corrected a typo in a comment:\n     ```diff\n     - // There's no need to maintain a stack becaues all render fns are called\n     + // There's no need to maintain a stack because all render fns are called\n     ```\n\n2. **Commit `099f3ba60085a089ff369442bdb835f3868e47c0`:**\n   - Added a new line of code to `normalizeScopedSlots`:\n     ```diff\n     +        vm.$scopedSlots\n     ```\n\n3. **Commit `b9de23b1008b52deca7e7df40843e318a42f3f53`:**\n   - Introduced a new variable and function for testing:\n     ```javascript\n     export let currentRenderingInstance: Component | null = null\n\n     // for testing only\n     export function setCurrentRenderingInstance (vm: Component) {\n       currentRenderingInstance = vm\n     }\n     ```\n\n   - Added multiple lines of comments and logic to the `try` block in `renderMixin`:\n     ```diff\n     +      // There's no need to maintain a stack because all render fns are called\n     +      // separately from one another. Nested component's render fns are called\n     +      // when parent component is patched.\n     +      currentRenderingInstance = vm\n     ```\n\n   - Added a `finally` block to reset `currentRenderingInstance`:\n     ```diff\n     +    } finally {\n     +      currentRenderingInstance = null\n     ```\n\n4. **Commit `42fdf3f8378e5dc379808a4fa67b39c4a74ae191`:**\n   - Renamed a function and its related variables:\n     ```diff\n     -function waitForSsrPrefetch (vm, resolve, reject) {\n     +function waitForServerPrefetch (vm, resolve, reject) {\n     ```\n\nThese changes reflect improvements in code comments, function definitions, and logic handling within the `render.js` file.",
        "chain_of_thought": "To address the question \"show me the changes for render.js file,\" we need to identify the changes made to the file named \"render.js.\" The relevant nodes are the File and Commit nodes. The relationship between Commit and File is the changed relationship, which contains details about the changes made to the file.\n\nHere's how we can construct the query:\n\n1. Identify the File node with the name \"render.js.\"\n2. Find the Commit nodes that have a changed relationship with this File node.\n3. Retrieve the details of the changes, such as additions, deletions, and the patch.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'render.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n```\n\nThis query will return the commit ID, the number of additions and deletions, and the patch details for each change made to the file \"render.js,\" ordered by the commit date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'render.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n",
        "result": [
            {
                "commitId": "f64765fa03c1eb1d37f3301ea5beb4d18e57158a",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -84,7 +84,7 @@ export function renderMixin (Vue: Class<Component>) {\n     // render self\n     let vnode\n     try {\n-      // There's no need to maintain a stack becaues all render fns are called\n+      // There's no need to maintain a stack because all render fns are called\n       // separately from one another. Nested component's render fns are called\n       // when parent component is patched.\n       currentRenderingInstance = vm"
            },
            {
                "commitId": "099f3ba60085a089ff369442bdb835f3868e47c0",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -73,7 +73,8 @@ export function renderMixin (Vue: Class<Component>) {\n     if (_parentVnode) {\n       vm.$scopedSlots = normalizeScopedSlots(\n         _parentVnode.data.scopedSlots,\n-        vm.$slots\n+        vm.$slots,\n+        vm.$scopedSlots\n       )\n     }\n "
            },
            {
                "commitId": "b9de23b1008b52deca7e7df40843e318a42f3f53",
                "additions": 13,
                "deletions": 0,
                "patch": "@@ -51,6 +51,13 @@ export function initRender (vm: Component) {\n   }\n }\n \n+export let currentRenderingInstance: Component | null = null\n+\n+// for testing only\n+export function setCurrentRenderingInstance (vm: Component) {\n+  currentRenderingInstance = vm\n+}\n+\n export function renderMixin (Vue: Class<Component>) {\n   // install runtime convenience helpers\n   installRenderHelpers(Vue.prototype)\n@@ -76,6 +83,10 @@ export function renderMixin (Vue: Class<Component>) {\n     // render self\n     let vnode\n     try {\n+      // There's no need to maintain a stack becaues all render fns are called\n+      // separately from one another. Nested component's render fns are called\n+      // when parent component is patched.\n+      currentRenderingInstance = vm\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n       handleError(e, vm, `render`)\n@@ -92,6 +103,8 @@ export function renderMixin (Vue: Class<Component>) {\n       } else {\n         vnode = vm._vnode\n       }\n+    } finally {\n+      currentRenderingInstance = null\n     }\n     // if the returned array contains only a single node, allow it\n     if (Array.isArray(vnode) && vnode.length === 1) {"
            },
            {
                "commitId": "42fdf3f8378e5dc379808a4fa67b39c4a74ae191",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -50,8 +50,8 @@ const normalizeRender = vm => {\n   }\n }\n \n-function waitForSsrPrefetch (vm, resolve, reject) {\n-  let handlers = vm.$options.ssrPrefetch\n+function waitForServerPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.serverPrefetch\n   if (isDef(handlers)) {\n     if (!Array.isArray(handlers)) handlers = [handlers]\n     try {\n@@ -206,7 +206,7 @@ function renderComponentInner (node, isRoot, context) {\n \n   const reject = context.done\n \n-  waitForSsrPrefetch(child, resolve, reject)\n+  waitForServerPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -432,6 +432,6 @@ export function createRenderFunction (\n     const resolve = () => {\n       renderNode(component._render(), true, context)\n     }\n-    waitForSsrPrefetch(component, resolve, done)\n+    waitForServerPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "6fe07ebf5ab3fea1860c59fe7cdd2ec1b760f9b0",
                "additions": 47,
                "deletions": 9,
                "patch": "@@ -19,6 +19,7 @@ let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n     warned[msg] = true\n+    // eslint-disable-next-line no-console\n     console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n   }\n }\n@@ -49,6 +50,27 @@ const normalizeRender = vm => {\n   }\n }\n \n+function waitForSsrPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.ssrPrefetch\n+  if (isDef(handlers)) {\n+    if (!Array.isArray(handlers)) handlers = [handlers]\n+    try {\n+      const promises = []\n+      for (let i = 0, j = handlers.length; i < j; i++) {\n+        const result = handlers[i].call(vm, vm)\n+        if (result && typeof result.then === 'function') {\n+          promises.push(result)\n+        }\n+      }\n+      Promise.all(promises).then(resolve).catch(reject)\n+      return\n+    } catch (e) {\n+      reject(e)\n+    }\n+  }\n+  resolve()\n+}\n+\n function renderNode (node, isRoot, context) {\n   if (node.isString) {\n     renderStringNode(node, context)\n@@ -92,7 +114,12 @@ function renderComponent (node, isRoot, context) {\n   const registerComponent = registerComponentForCache(Ctor.options, write)\n \n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const rawKey = getKey(node.componentOptions.propsData)\n+    if (rawKey === false) {\n+      renderComponentInner(node, isRoot, context)\n+      return\n+    }\n+    const key = name + '::' + rawKey\n     const { has, get } = context\n     if (isDef(has)) {\n       has(key, hit => {\n@@ -166,13 +193,20 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+\n+  const resolve = () => {\n+    const childNode = child._render()\n+    childNode.parent = node\n+    context.renderStates.push({\n+      type: 'Component',\n+      prevActive\n+    })\n+    renderNode(childNode, isRoot, context)\n+  }\n+\n+  const reject = context.done\n+\n+  waitForSsrPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -394,6 +428,10 @@ export function createRenderFunction (\n     })\n     installSSRHelpers(component)\n     normalizeRender(component)\n-    renderNode(component._render(), true, context)\n+\n+    const resolve = () => {\n+      renderNode(component._render(), true, context)\n+    }\n+    waitForSsrPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "5d52262f1ce56d080c3438c4773a81dc5c8397aa",
                "additions": 4,
                "deletions": 1,
                "patch": "@@ -64,7 +64,10 @@ export function renderMixin (Vue: Class<Component>) {\n     const { render, _parentVnode } = vm.$options\n \n     if (_parentVnode) {\n-      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots)\n+      vm.$scopedSlots = normalizeScopedSlots(\n+        _parentVnode.data.scopedSlots,\n+        vm.$slots\n+      )\n     }\n \n     // set parent vnode. this allows render functions to have access"
            },
            {
                "commitId": "c7c13c2a156269d29fd9c9f8f6a3e53a2f2cac3d",
                "additions": 6,
                "deletions": 1,
                "patch": "@@ -11,6 +11,7 @@ import {\n import { createElement } from '../vdom/create-element'\n import { installRenderHelpers } from './render-helpers/index'\n import { resolveSlots } from './render-helpers/resolve-slots'\n+import { normalizeScopedSlots } from '../vdom/helpers/normalize-scoped-slots'\n import VNode, { createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n@@ -63,7 +64,7 @@ export function renderMixin (Vue: Class<Component>) {\n     const { render, _parentVnode } = vm.$options\n \n     if (_parentVnode) {\n-      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n+      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots)\n     }\n \n     // set parent vnode. this allows render functions to have access\n@@ -89,6 +90,10 @@ export function renderMixin (Vue: Class<Component>) {\n         vnode = vm._vnode\n       }\n     }\n+    // if the returned array contains only a single node, allow it\n+    if (Array.isArray(vnode) && vnode.length === 1) {\n+      vnode = vnode[0]\n+    }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "ab24285458c98e25d5749beb4edebef73672de4b",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -114,7 +114,12 @@ function renderComponent (node, isRoot, context) {\n   const registerComponent = registerComponentForCache(Ctor.options, write)\n \n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const rawKey = getKey(node.componentOptions.propsData)\n+    if (rawKey === false) {\n+      renderComponentInner(node, isRoot, context)\n+      return\n+    }\n+    const key = name + '::' + rawKey\n     const { has, get } = context\n     if (isDef(has)) {\n       has(key, hit => {\n@@ -188,7 +193,7 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  \n+\n   const resolve = () => {\n     const childNode = child._render()\n     childNode.parent = node"
            },
            {
                "commitId": "d7a533d6f85aae52aed03202fa5ccb774f0cb2ec",
                "additions": 41,
                "deletions": 8,
                "patch": "@@ -19,6 +19,7 @@ let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n     warned[msg] = true\n+    // eslint-disable-next-line no-console\n     console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n   }\n }\n@@ -49,6 +50,27 @@ const normalizeRender = vm => {\n   }\n }\n \n+function waitForSsrPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.ssrPrefetch\n+  if (isDef(handlers)) {\n+    if (!Array.isArray(handlers)) handlers = [handlers]\n+    try {\n+      const promises = []\n+      for (let i = 0, j = handlers.length; i < j; i++) {\n+        const result = handlers[i].call(vm, vm)\n+        if (result && typeof result.then === 'function') {\n+          promises.push(result)\n+        }\n+      }\n+      Promise.all(promises).then(resolve).catch(reject)\n+      return\n+    } catch (e) {\n+      reject(e)\n+    }\n+  }\n+  resolve()\n+}\n+\n function renderNode (node, isRoot, context) {\n   if (node.isString) {\n     renderStringNode(node, context)\n@@ -166,13 +188,20 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+  \n+  const resolve = () => {\n+    const childNode = child._render()\n+    childNode.parent = node\n+    context.renderStates.push({\n+      type: 'Component',\n+      prevActive\n+    })\n+    renderNode(childNode, isRoot, context)\n+  }\n+\n+  const reject = context.done\n+\n+  waitForSsrPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -394,6 +423,10 @@ export function createRenderFunction (\n     })\n     installSSRHelpers(component)\n     normalizeRender(component)\n-    renderNode(component._render(), true, context)\n+\n+    const resolve = () => {\n+      renderNode(component._render(), true, context)\n+    }\n+    waitForSsrPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "780dac561b9cd6c3cec28f154f76e7d28352ebf3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -326,7 +326,7 @@ function renderStartingTag (node: VNode, context) {\n       for (let i = 0; i < dirs.length; i++) {\n         const name = dirs[i].name\n         if (name !== 'show') {\n-          const dirRenderer = resolveAsset(context, 'directives', name, true)\n+          const dirRenderer = resolveAsset(context, 'directives', name)\n           if (dirRenderer) {\n             // directives mutate the node's data\n             // which then gets rendered by modules"
            },
            {
                "commitId": "307835284a326569ea12c4a22c7dcb8f36d2d8ca",
                "additions": 8,
                "deletions": 5,
                "patch": "@@ -3,6 +3,7 @@\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n+import { resolveAsset } from 'core/util/options'\n import { generateComponentTrace } from 'core/util/debug'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n@@ -324,11 +325,13 @@ function renderStartingTag (node: VNode, context) {\n     if (dirs) {\n       for (let i = 0; i < dirs.length; i++) {\n         const name = dirs[i].name\n-        const dirRenderer = directives[name]\n-        if (dirRenderer && name !== 'show') {\n-          // directives mutate the node's data\n-          // which then gets rendered by modules\n-          dirRenderer(node, dirs[i])\n+        if (name !== 'show') {\n+          const dirRenderer = resolveAsset(context, 'directives', name, true)\n+          if (dirRenderer) {\n+            // directives mutate the node's data\n+            // which then gets rendered by modules\n+            dirRenderer(node, dirs[i])\n+          }\n         }\n       }\n     }"
            },
            {
                "commitId": "530ca1b2db315fbd0e360807b2031d26665c5d3d",
                "additions": 0,
                "deletions": 8,
                "patch": "@@ -62,14 +62,6 @@ export function renderMixin (Vue: Class<Component>) {\n     const vm: Component = this\n     const { render, _parentVnode } = vm.$options\n \n-    // reset _rendered flag on slots for duplicate slot check\n-    if (process.env.NODE_ENV !== 'production') {\n-      for (const key in vm.$slots) {\n-        // $flow-disable-line\n-        vm.$slots[key]._rendered = false\n-      }\n-    }\n-\n     if (_parentVnode) {\n       vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n     }"
            },
            {
                "commitId": "1129d184482720bb52fa61f0a309645b7caaddd9",
                "additions": 5,
                "deletions": 9,
                "patch": "@@ -86,15 +86,11 @@ export function renderMixin (Vue: Class<Component>) {\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n       /* istanbul ignore else */\n-      if (process.env.NODE_ENV !== 'production') {\n-        if (vm.$options.renderError) {\n-          try {\n-            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n-          } catch (e) {\n-            handleError(e, vm, `renderError`)\n-            vnode = vm._vnode\n-          }\n-        } else {\n+      if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n+        try {\n+          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+        } catch (e) {\n+          handleError(e, vm, `renderError`)\n           vnode = vm._vnode\n         }\n       } else {"
            },
            {
                "commitId": "702000971c5a355c937607edb930b67311c78f5d",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -191,7 +191,8 @@ function renderAsyncComponent (node, isRoot, context) {\n       tag\n     )\n     if (resolvedNode) {\n-      if (resolvedNode.componnetInstance) {\n+      if (resolvedNode.componentOptions) {\n+        // normal component\n         renderComponent(resolvedNode, isRoot, context)\n       } else if (!Array.isArray(resolvedNode)) {\n         // single return node from functional component"
            },
            {
                "commitId": "882e7199fd8eee039291c4b9f7f324dcf46f32fd",
                "additions": 19,
                "deletions": 3,
                "patch": "@@ -191,7 +191,21 @@ function renderAsyncComponent (node, isRoot, context) {\n       tag\n     )\n     if (resolvedNode) {\n-      renderComponent(resolvedNode, isRoot, context)\n+      if (resolvedNode.componnetInstance) {\n+        renderComponent(resolvedNode, isRoot, context)\n+      } else if (!Array.isArray(resolvedNode)) {\n+        // single return node from functional component\n+        renderNode(resolvedNode, isRoot, context)\n+      } else {\n+        // multiple return nodes from functional component\n+        context.renderStates.push({\n+          type: 'Fragment',\n+          children: resolvedNode,\n+          rendered: 0,\n+          total: resolvedNode.length\n+        })\n+        context.next()\n+      }\n     } else {\n       // invalid component, but this does not throw on the client\n       // so render empty comment node\n@@ -232,9 +246,10 @@ function renderStringNode (el, context) {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n       type: 'Element',\n+      children,\n       rendered: 0,\n       total: children.length,\n-      endTag: el.close, children\n+      endTag: el.close\n     })\n     write(el.open, next)\n   }\n@@ -263,9 +278,10 @@ function renderElement (el, isRoot, context) {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n       type: 'Element',\n+      children,\n       rendered: 0,\n       total: children.length,\n-      endTag, children\n+      endTag\n     })\n     write(startTag, next)\n   }"
            },
            {
                "commitId": "956756b1be7084daf8b6afb92ac0da7c24cde2a5",
                "additions": 8,
                "deletions": 11,
                "patch": "@@ -11,7 +11,7 @@ import {\n import { createElement } from '../vdom/create-element'\n import { installRenderHelpers } from './render-helpers/index'\n import { resolveSlots } from './render-helpers/resolve-slots'\n-import VNode, { cloneVNodes, createEmptyVNode } from '../vdom/vnode'\n+import VNode, { createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n \n@@ -62,20 +62,17 @@ export function renderMixin (Vue: Class<Component>) {\n     const vm: Component = this\n     const { render, _parentVnode } = vm.$options\n \n-    if (vm._isMounted) {\n-      // if the parent didn't update, the slot nodes will be the ones from\n-      // last render. They need to be cloned to ensure \"freshness\" for this render.\n+    // reset _rendered flag on slots for duplicate slot check\n+    if (process.env.NODE_ENV !== 'production') {\n       for (const key in vm.$slots) {\n-        const slot = vm.$slots[key]\n-        // _rendered is a flag added by renderSlot, but may not be present\n-        // if the slot is passed from manually written render functions\n-        if (slot._rendered || (slot[0] && slot[0].elm)) {\n-          vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n-        }\n+        // $flow-disable-line\n+        vm.$slots[key]._rendered = false\n       }\n     }\n \n-    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n+    if (_parentVnode) {\n+      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n+    }\n \n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node."
            },
            {
                "commitId": "8936b8d9c147441555fcfd4ac748d817ba5ff60e",
                "additions": 4,
                "deletions": 7,
                "patch": "@@ -193,21 +193,18 @@ function renderAsyncComponent (node, isRoot, context) {\n     if (resolvedNode) {\n       renderComponent(resolvedNode, isRoot, context)\n     } else {\n-      reject()\n+      // invalid component, but this does not throw on the client\n+      // so render empty comment node\n+      context.write(`<!---->`, context.next)\n     }\n   }\n \n-  const reject = err => {\n-    console.error(`[vue-server-renderer] error when rendering async component:\\n`)\n-    if (err) console.error(err.stack)\n-    context.write(`<!--${node.text}-->`, context.next)\n-  }\n-\n   if (factory.resolved) {\n     resolve(factory.resolved)\n     return\n   }\n \n+  const reject = context.done\n   let res\n   try {\n     res = factory(resolve, reject)"
            },
            {
                "commitId": "604e081d0456ed136b24b5f759c608d153dfae93",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -252,8 +252,8 @@ function renderElement (el, isRoot, context) {\n     el.data.attrs[SSR_ATTR] = 'true'\n   }\n \n-  if (el.functionalOptions) {\n-    registerComponentForCache(el.functionalOptions, write)\n+  if (el.fnOptions) {\n+    registerComponentForCache(el.fnOptions, write)\n   }\n \n   const startTag = renderStartingTag(el, context)"
            },
            {
                "commitId": "f5cd29e1d8197613c4dfb4013b240784c3b64e43",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -17,6 +17,7 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n+  vm._staticTrees = null // v-once cached trees\n   const options = vm.$options\n   const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context"
            },
            {
                "commitId": "13196b25b8a0a84b3936982177195d2e04f13f79",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -66,7 +66,9 @@ export function renderMixin (Vue: Class<Component>) {\n       // last render. They need to be cloned to ensure \"freshness\" for this render.\n       for (const key in vm.$slots) {\n         const slot = vm.$slots[key]\n-        if (slot._rendered) {\n+        // _rendered is a flag added by renderSlot, but may not be present\n+        // if the slot is passed from manually written render functions\n+        if (slot._rendered || (slot[0] && slot[0].elm)) {\n           vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n         }\n       }"
            },
            {
                "commitId": "12255ff220ac8cd0171aa0ed56ce630a6843b2bd",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -17,9 +17,10 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n-  const parentVnode = vm.$vnode = vm.$options._parentVnode // the placeholder node in parent tree\n+  const options = vm.$options\n+  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context\n-  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n+  vm.$slots = resolveSlots(options._renderChildren, renderContext)\n   vm.$scopedSlots = emptyObject\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -39,12 +40,12 @@ export function initRender (vm: Component) {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, () => {\n+    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true)\n+    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true)\n   }\n }\n "
            },
            {
                "commitId": "bb1d888d44ddc39f06de5232883c8e3766a47be0",
                "additions": 1,
                "deletions": 9,
                "patch": "@@ -17,7 +17,6 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n-  vm._staticTrees = null\n   const parentVnode = vm.$vnode = vm.$options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n@@ -59,11 +58,7 @@ export function renderMixin (Vue: Class<Component>) {\n \n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n-    const {\n-      render,\n-      staticRenderFns,\n-      _parentVnode\n-    } = vm.$options\n+    const { render, _parentVnode } = vm.$options\n \n     if (vm._isMounted) {\n       // if the parent didn't update, the slot nodes will be the ones from\n@@ -78,9 +73,6 @@ export function renderMixin (Vue: Class<Component>) {\n \n     vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n \n-    if (staticRenderFns && !vm._staticTrees) {\n-      vm._staticTrees = []\n-    }\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n     vm.$vnode = _parentVnode"
            },
            {
                "commitId": "050bb33f9b02589357c037623ea8cbf8ff13555b",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -342,11 +342,15 @@ function renderStartingTag (node: VNode, context) {\n   ) {\n     markup += ` ${(scopeId: any)}`\n   }\n-  while (isDef(node)) {\n-    if (isDef(scopeId = node.context.$options._scopeId)) {\n-      markup += ` ${scopeId}`\n+  if (isDef(node.fnScopeId)) {\n+    markup += ` ${node.fnScopeId}`\n+  } else {\n+    while (isDef(node)) {\n+      if (isDef(scopeId = node.context.$options._scopeId)) {\n+        markup += ` ${scopeId}`\n+      }\n+      node = node.parent\n     }\n-    node = node.parent\n   }\n   return markup + '>'\n }"
            },
            {
                "commitId": "ea0d227d2ddfa5fc5e1112acf9cd485b4eae62cb",
                "additions": 7,
                "deletions": 38,
                "patch": "@@ -3,33 +3,18 @@\n import {\n   warn,\n   nextTick,\n-  toNumber,\n-  toString,\n-  looseEqual,\n   emptyObject,\n   handleError,\n-  looseIndexOf,\n   defineReactive\n } from '../util/index'\n \n-import VNode, {\n-  cloneVNodes,\n-  createTextVNode,\n-  createEmptyVNode\n-} from '../vdom/vnode'\n+import { createElement } from '../vdom/create-element'\n+import { installRenderHelpers } from './render-helpers/index'\n+import { resolveSlots } from './render-helpers/resolve-slots'\n+import VNode, { cloneVNodes, createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n \n-import { createElement } from '../vdom/create-element'\n-import { renderList } from './render-helpers/render-list'\n-import { renderSlot } from './render-helpers/render-slot'\n-import { resolveFilter } from './render-helpers/resolve-filter'\n-import { checkKeyCodes } from './render-helpers/check-keycodes'\n-import { bindObjectProps } from './render-helpers/bind-object-props'\n-import { renderStatic, markOnce } from './render-helpers/render-static'\n-import { bindObjectListeners } from './render-helpers/bind-object-listeners'\n-import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n-\n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n@@ -65,6 +50,9 @@ export function initRender (vm: Component) {\n }\n \n export function renderMixin (Vue: Class<Component>) {\n+  // install runtime convenience helpers\n+  installRenderHelpers(Vue.prototype)\n+\n   Vue.prototype.$nextTick = function (fn: Function) {\n     return nextTick(fn, this)\n   }\n@@ -135,23 +123,4 @@ export function renderMixin (Vue: Class<Component>) {\n     vnode.parent = _parentVnode\n     return vnode\n   }\n-\n-  // internal render helpers.\n-  // these are exposed on the instance prototype to reduce generated render\n-  // code size.\n-  Vue.prototype._o = markOnce\n-  Vue.prototype._n = toNumber\n-  Vue.prototype._s = toString\n-  Vue.prototype._l = renderList\n-  Vue.prototype._t = renderSlot\n-  Vue.prototype._q = looseEqual\n-  Vue.prototype._i = looseIndexOf\n-  Vue.prototype._m = renderStatic\n-  Vue.prototype._f = resolveFilter\n-  Vue.prototype._k = checkKeyCodes\n-  Vue.prototype._b = bindObjectProps\n-  Vue.prototype._v = createTextVNode\n-  Vue.prototype._e = createEmptyVNode\n-  Vue.prototype._u = resolveScopedSlots\n-  Vue.prototype._g = bindObjectListeners\n }"
            },
            {
                "commitId": "dff85b230abda63839ed6b80d56ccfc6068b9ae0",
                "additions": 15,
                "deletions": 10,
                "patch": "@@ -1,18 +1,14 @@\n /* @flow */\n \n-import {\n-  isDef,\n-  isUndef,\n-  isTrue,\n-  extend\n-} from 'shared/util'\n-\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n+import { generateComponentTrace } from 'core/util/debug'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n \n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n import {\n   createComponent,\n   createComponentInstanceForVnode\n@@ -26,13 +22,22 @@ const warnOnce = msg => {\n   }\n }\n \n+const onCompilationError = (err, vm) => {\n+  const trace = vm ? generateComponentTrace(vm) : ''\n+  throw new Error(`\\n\\u001b[31m${err}${trace}\\u001b[39m\\n`)\n+}\n+\n const normalizeRender = vm => {\n   const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      extend(vm.$options, ssrCompileToFunctions(template, {\n-        scopeId: _scopeId\n-      }))\n+      const compiled = ssrCompileToFunctions(template, {\n+        scopeId: _scopeId,\n+        warn: onCompilationError\n+      }, vm)\n+\n+      vm.$options.render = compiled.render\n+      vm.$options.staticRenderFns = compiled.staticRenderFns\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${"
            },
            {
                "commitId": "b3cd9bc3940eb1e01da7081450929557d9c1651e",
                "additions": 11,
                "deletions": 4,
                "patch": "@@ -101,14 +101,21 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      handleError(e, vm, `render function`)\n+      handleError(e, vm, `render`)\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n       /* istanbul ignore else */\n       if (process.env.NODE_ENV !== 'production') {\n-        vnode = vm.$options.renderError\n-          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n-          : vm._vnode\n+        if (vm.$options.renderError) {\n+          try {\n+            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+          } catch (e) {\n+            handleError(e, vm, `renderError`)\n+            vnode = vm._vnode\n+          }\n+        } else {\n+          vnode = vm._vnode\n+        }\n       } else {\n         vnode = vm._vnode\n       }"
            },
            {
                "commitId": "e76e648bc8b6a9df64f0b44716f76a1e4b259ed6",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -3,7 +3,8 @@\n import {\n   isDef,\n   isUndef,\n-  isTrue\n+  isTrue,\n+  extend\n } from 'shared/util'\n \n import { escape } from 'web/server/util'\n@@ -29,7 +30,7 @@ const normalizeRender = vm => {\n   const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+      extend(vm.$options, ssrCompileToFunctions(template, {\n         scopeId: _scopeId\n       }))\n     } else {"
            },
            {
                "commitId": "0529040c17b8632032a43d142aac88386f6b4a1f",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -78,9 +78,13 @@ export function renderMixin (Vue: Class<Component>) {\n     } = vm.$options\n \n     if (vm._isMounted) {\n-      // clone slot nodes on re-renders\n+      // if the parent didn't update, the slot nodes will be the ones from\n+      // last render. They need to be cloned to ensure \"freshness\" for this render.\n       for (const key in vm.$slots) {\n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+        const slot = vm.$slots[key]\n+        if (slot._rendered) {\n+          vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n+        }\n       }\n     }\n "
            },
            {
                "commitId": "59dbd4a414394a3ce581f9fbd9554da9af9e4b1d",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -49,17 +49,18 @@ export function initRender (vm: Component) {\n   // $attrs & $listeners are exposed for easier HOC creation.\n   // they need to be reactive so that HOCs using them are always updated\n   const parentData = parentVnode && parentVnode.data\n+\n   /* istanbul ignore else */\n   if (process.env.NODE_ENV !== 'production') {\n-    defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners, () => {\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n-    defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners, null, true)\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true)\n   }\n }\n "
            },
            {
                "commitId": "17130611261fdbab70d0e5ab45036e4b612b17fe",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -54,12 +54,12 @@ export function initRender (vm: Component) {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', parentData && parentData.on, () => {\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n-    defineReactive(vm, '$listeners', parentData && parentData.on, null, true)\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners, null, true)\n   }\n }\n "
            },
            {
                "commitId": "e0ca894dfb465106094af440667c15f7eded0a25",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -49,6 +49,7 @@ export function initRender (vm: Component) {\n   // $attrs & $listeners are exposed for easier HOC creation.\n   // they need to be reactive so that HOCs using them are always updated\n   const parentData = parentVnode && parentVnode.data\n+  /* istanbul ignore else */\n   if (process.env.NODE_ENV !== 'production') {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)"
            },
            {
                "commitId": "61187596b9af48f1cb7b1848ad3eccc02ac2509d",
                "additions": 19,
                "deletions": 1,
                "patch": "@@ -8,7 +8,8 @@ import {\n   looseEqual,\n   emptyObject,\n   handleError,\n-  looseIndexOf\n+  looseIndexOf,\n+  defineReactive\n } from '../util/index'\n \n import VNode, {\n@@ -17,6 +18,8 @@ import VNode, {\n   createEmptyVNode\n } from '../vdom/vnode'\n \n+import { isUpdatingChildComponent } from './lifecycle'\n+\n import { createElement } from '../vdom/create-element'\n import { renderList } from './render-helpers/render-list'\n import { renderSlot } from './render-helpers/render-slot'\n@@ -42,6 +45,21 @@ export function initRender (vm: Component) {\n   // normalization is always applied for the public version, used in\n   // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n+\n+  // $attrs & $listeners are exposed for easier HOC creation.\n+  // they need to be reactive so that HOCs using them are always updated\n+  const parentData = parentVnode && parentVnode.data\n+  if (process.env.NODE_ENV !== 'production') {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n+      !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n+    }, true)\n+    defineReactive(vm, '$listeners', parentData && parentData.on, () => {\n+      !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n+    }, true)\n+  } else {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n+    defineReactive(vm, '$listeners', parentData && parentData.on, null, true)\n+  }\n }\n \n export function renderMixin (Vue: Class<Component>) {"
            },
            {
                "commitId": "11614d63b7862b68b11cc45c0891437c62a832d7",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -24,6 +24,7 @@ import { resolveFilter } from './render-helpers/resolve-filter'\n import { checkKeyCodes } from './render-helpers/check-keycodes'\n import { bindObjectProps } from './render-helpers/bind-object-props'\n import { renderStatic, markOnce } from './render-helpers/render-static'\n+import { bindObjectListeners } from './render-helpers/bind-object-listeners'\n import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n \n export function initRender (vm: Component) {\n@@ -121,4 +122,5 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._v = createTextVNode\n   Vue.prototype._e = createEmptyVNode\n   Vue.prototype._u = resolveScopedSlots\n+  Vue.prototype._g = bindObjectListeners\n }"
            },
            {
                "commitId": "0cd6ef321b3168d6c46c7a870c3d2a53fd9d4bde",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -172,6 +172,9 @@ function renderAsyncComponent (node, isRoot, context) {\n   const factory = node.asyncFactory\n \n   const resolve = comp => {\n+    if (comp.__esModule && comp.default) {\n+      comp = comp.default\n+    }\n     const { data, children, tag } = node.asyncMeta\n     const nodeContext = node.asyncMeta.context\n     const resolvedNode: any = createComponent("
            },
            {
                "commitId": "c994e5cf48a912d98c1a302375bb9964dba98113",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -343,7 +343,7 @@ function renderStartingTag (node: VNode, context) {\n }\n \n export function createRenderFunction (\n-  modules: Array<Function>,\n+  modules: Array<(node: VNode) => ?string>,\n   directives: Object,\n   isUnaryTag: Function,\n   cache: any"
            },
            {
                "commitId": "9cf6646f46ef3c13236677e58e72d2c6dd5c8abf",
                "additions": 72,
                "deletions": 14,
                "patch": "@@ -1,13 +1,21 @@\n /* @flow */\n \n+import {\n+  isDef,\n+  isUndef,\n+  isTrue\n+} from 'shared/util'\n+\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n-import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue } from 'shared/util'\n+import {\n+  createComponent,\n+  createComponentInstanceForVnode\n+} from 'core/vdom/create-component'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -39,20 +47,20 @@ function renderNode (node, isRoot, context) {\n     renderStringNode(node, context)\n   } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n-  } else {\n-    if (isDef(node.tag)) {\n-      renderElement(node, isRoot, context)\n-    } else if (isTrue(node.isComment)) {\n-      context.write(\n-        `<!--${node.text}-->`,\n-        context.next\n-      )\n+  } else if (isDef(node.tag)) {\n+    renderElement(node, isRoot, context)\n+  } else if (isTrue(node.isComment)) {\n+    if (isDef(node.asyncFactory)) {\n+      // async component\n+      renderAsyncComponent(node, isRoot, context)\n     } else {\n-      context.write(\n-        node.raw ? node.text : escape(String(node.text)),\n-        context.next\n-      )\n+      context.write(`<!--${node.text}-->`, context.next)\n     }\n+  } else {\n+    context.write(\n+      node.raw ? node.text : escape(String(node.text)),\n+      context.next\n+    )\n   }\n }\n \n@@ -160,6 +168,56 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderAsyncComponent (node, isRoot, context) {\n+  const factory = node.asyncFactory\n+\n+  const resolve = comp => {\n+    const { data, children, tag } = node.asyncMeta\n+    const nodeContext = node.asyncMeta.context\n+    const resolvedNode: any = createComponent(\n+      comp,\n+      data,\n+      nodeContext,\n+      children,\n+      tag\n+    )\n+    if (resolvedNode) {\n+      renderComponent(resolvedNode, isRoot, context)\n+    } else {\n+      reject()\n+    }\n+  }\n+\n+  const reject = err => {\n+    console.error(`[vue-server-renderer] error when rendering async component:\\n`)\n+    if (err) console.error(err.stack)\n+    context.write(`<!--${node.text}-->`, context.next)\n+  }\n+\n+  if (factory.resolved) {\n+    resolve(factory.resolved)\n+    return\n+  }\n+\n+  let res\n+  try {\n+    res = factory(resolve, reject)\n+  } catch (e) {\n+    reject(e)\n+  }\n+  if (res) {\n+    if (typeof res.then === 'function') {\n+      res.then(resolve, reject).catch(reject)\n+    } else {\n+      // new syntax in 2.3\n+      const comp = res.component\n+      if (comp && typeof comp.then === 'function') {\n+        comp.then(resolve, reject).catch(reject)\n+      }\n+    }\n+  }\n+}\n+\n function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {"
            },
            {
                "commitId": "43485fbc5b779e02122c3b7fc64296a2cfee31f6",
                "additions": 27,
                "deletions": 11,
                "patch": "@@ -1,10 +1,10 @@\n /* @flow */\n \n-const { escape } = require('he')\n-\n+import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n-import { compileToFunctions } from 'web/compiler/index'\n+import { ssrCompileToFunctions } from 'web/server/compiler'\n+import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n import { isDef, isUndef, isTrue } from 'shared/util'\n@@ -17,16 +17,13 @@ const warnOnce = msg => {\n   }\n }\n \n-const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n-  const { render, template } = vm.$options\n+  const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      const renderFns = (\n-        compilationCache[template] ||\n-        (compilationCache[template] = compileToFunctions(template))\n-      )\n-      Object.assign(vm.$options, renderFns)\n+      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+        scopeId: _scopeId\n+      }))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${\n@@ -38,7 +35,9 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (isDef(node.componentOptions)) {\n+  if (node.isString) {\n+    renderStringNode(node, context)\n+  } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n@@ -161,6 +160,22 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderStringNode (el, context) {\n+  const { write, next } = context\n+  if (isUndef(el.children) || el.children.length === 0) {\n+    write(el.open + (el.close || ''), next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag: el.close, children\n+    })\n+    write(el.open, next)\n+  }\n+}\n+\n function renderElement (el, isRoot, context) {\n   const { write, next } = context\n \n@@ -289,6 +304,7 @@ export function createRenderFunction (\n       isUnaryTag, modules, directives,\n       cache\n     })\n+    installSSRHelpers(component)\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "55d8bfd6fdda38f31b17cffa07e5ab743c9f2670",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -18,10 +18,12 @@ const warnOnce = msg => {\n }\n \n const normalizeRender = vm => {\n-  const { render, template } = vm.$options\n+  const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      Object.assign(vm.$options, ssrCompileToFunctions(template))\n+      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+        scopeId: _scopeId\n+      }))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${"
            },
            {
                "commitId": "c0b9b6d8300ded5a1ceb7f190ced92e4cd3f5870",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -1,7 +1,6 @@\n /* @flow */\n \n-const { escape } = require('he')\n-\n+import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'"
            },
            {
                "commitId": "9fbca0dc792e94eb775a8f08694a04963dc20e07",
                "additions": 2,
                "deletions": 8,
                "patch": "@@ -5,15 +5,11 @@ const { escape } = require('he')\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n+import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n import { isDef, isUndef, isTrue } from 'shared/util'\n \n-import {\n-  createStringNode,\n-  createStringList\n-} from './optimizing-compiler/runtime-helpers'\n-\n let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n@@ -23,9 +19,6 @@ const warnOnce = msg => {\n }\n \n const normalizeRender = vm => {\n-  vm._ssrEscape = escape\n-  vm._ssrNode = createStringNode\n-  vm._ssrList = createStringList\n   const { render, template } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n@@ -310,6 +303,7 @@ export function createRenderFunction (\n       isUnaryTag, modules, directives,\n       cache\n     })\n+    installSSRHelpers(component)\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "5b58526a525f67ed7a3dffcaf38a51ab2affd357",
                "additions": 13,
                "deletions": 48,
                "patch": "@@ -4,10 +4,15 @@ const { escape } = require('he')\n \n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n-import { compileToFunctions } from 'web/compiler/index'\n+import { ssrCompileToFunctions } from 'web/server/compiler'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue, isObject } from 'shared/util'\n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n+import {\n+  createStringNode,\n+  createStringList\n+} from './optimizing-compiler/runtime-helpers'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -17,16 +22,14 @@ const warnOnce = msg => {\n   }\n }\n \n-const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n+  vm._ssrEscape = escape\n+  vm._ssrNode = createStringNode\n+  vm._ssrList = createStringList\n   const { render, template } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      const renderFns = (\n-        compilationCache[template] ||\n-        (compilationCache[template] = compileToFunctions(template))\n-      )\n-      Object.assign(vm.$options, renderFns)\n+      Object.assign(vm.$options, ssrCompileToFunctions(template))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${\n@@ -145,39 +148,6 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   renderComponentInner(node, isRoot, context)\n }\n \n-function StringNode (open, close, children) {\n-  this.isString = true\n-  this.open = open\n-  this.close = close\n-  this.children = children\n-}\n-\n-function createStringNode (open, close, children) {\n-  return new StringNode(open, close, children)\n-}\n-\n-function createSSRList (val, render) {\n-  let ret = ''\n-  let i, l, keys, key\n-  if (Array.isArray(val) || typeof val === 'string') {\n-    for (i = 0, l = val.length; i < l; i++) {\n-      ret += render(val[i], i)\n-    }\n-  } else if (typeof val === 'number') {\n-    for (i = 0; i < val; i++) {\n-      ret += render(i + 1, i)\n-    }\n-  } else if (isObject(val)) {\n-    keys = Object.keys(val)\n-    ret = new Array(keys.length)\n-    for (i = 0, l = keys.length; i < l; i++) {\n-      key = keys[i]\n-      ret += render(val[key], key, i)\n-    }\n-  }\n-  return ret\n-}\n-\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -187,11 +157,6 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-\n-  child._ssrNode = createStringNode\n-  child._ssrEscape = escape\n-  child._ssrList = createSSRList\n-\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({\n@@ -204,7 +169,7 @@ function renderComponentInner (node, isRoot, context) {\n function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {\n-    write(el.open() + (el.close || ''), next)\n+    write(el.open + (el.close || ''), next)\n   } else {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n@@ -213,7 +178,7 @@ function renderStringNode (el, context) {\n       total: children.length,\n       endTag: el.close, children\n     })\n-    write(el.open(), next)\n+    write(el.open, next)\n   }\n }\n "
            },
            {
                "commitId": "8efa3a2b2245d534d042f109ad7fc9311f47fa27",
                "additions": 29,
                "deletions": 4,
                "patch": "@@ -7,7 +7,7 @@ import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue } from 'shared/util'\n+import { isDef, isUndef, isTrue, isObject } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -152,11 +152,32 @@ function StringNode (open, close, children) {\n   this.children = children\n }\n \n-function createStringNode (id, children) {\n-  const { open, close } = this.$options.stringRenderFns[id]\n+function createStringNode (open, close, children) {\n   return new StringNode(open, close, children)\n }\n \n+function createSSRList (val, render) {\n+  let ret = ''\n+  let i, l, keys, key\n+  if (Array.isArray(val) || typeof val === 'string') {\n+    for (i = 0, l = val.length; i < l; i++) {\n+      ret += render(val[i], i)\n+    }\n+  } else if (typeof val === 'number') {\n+    for (i = 0; i < val; i++) {\n+      ret += render(i + 1, i)\n+    }\n+  } else if (isObject(val)) {\n+    keys = Object.keys(val)\n+    ret = new Array(keys.length)\n+    for (i = 0, l = keys.length; i < l; i++) {\n+      key = keys[i]\n+      ret += render(val[key], key, i)\n+    }\n+  }\n+  return ret\n+}\n+\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -166,7 +187,11 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  child._ss = createStringNode\n+\n+  child._ssrNode = createStringNode\n+  child._ssrEscape = escape\n+  child._ssrList = createSSRList\n+\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({"
            },
            {
                "commitId": "85e24b3b31adc29ccd18b2159e84e4413f327fd9",
                "additions": 16,
                "deletions": 3,
                "patch": "@@ -38,8 +38,8 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (node.isTextNode) {\n-    renderTextNode(node, context)\n+  if (node.isString) {\n+    renderStringNode(node, context)\n   } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n@@ -145,6 +145,18 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   renderComponentInner(node, isRoot, context)\n }\n \n+function StringNode (open, close, children) {\n+  this.isString = true\n+  this.open = open\n+  this.close = close\n+  this.children = children\n+}\n+\n+function createStringNode (id, children) {\n+  const { open, close } = this.$options.stringRenderFns[id]\n+  return new StringNode(open, close, children)\n+}\n+\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -154,6 +166,7 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n+  child._ss = createStringNode\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({\n@@ -163,7 +176,7 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n-function renderTextNode (el, context) {\n+function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {\n     write(el.open() + (el.close || ''), next)"
            },
            {
                "commitId": "da1db7af31b397eab1608217d1f6dee26f753a59",
                "additions": 19,
                "deletions": 1,
                "patch": "@@ -38,7 +38,9 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (isDef(node.componentOptions)) {\n+  if (node.isTextNode) {\n+    renderTextNode(node, context)\n+  } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n@@ -161,6 +163,22 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderTextNode (el, context) {\n+  const { write, next } = context\n+  if (isUndef(el.children) || el.children.length === 0) {\n+    write(el.open() + (el.close || ''), next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag: el.close, children\n+    })\n+    write(el.open(), next)\n+  }\n+}\n+\n function renderElement (el, isRoot, context) {\n   const { write, next } = context\n "
            },
            {
                "commitId": "b5b1ac373a8f4d464454e7770a888fdd178891c4",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -255,8 +255,9 @@ function renderStartingTag (node: VNode, context) {\n   let scopeId\n   const activeInstance = context.activeInstance\n   if (isDef(activeInstance) &&\n-      activeInstance !== node.context &&\n-      isDef(scopeId = activeInstance.$options._scopeId)) {\n+    activeInstance !== node.context &&\n+    isDef(scopeId = activeInstance.$options._scopeId)\n+  ) {\n     markup += ` ${(scopeId: any)}`\n   }\n   while (isDef(node)) {"
            },
            {
                "commitId": "8dc4215994a8d4e4046b428b837863e96275de0e",
                "additions": 19,
                "deletions": 10,
                "patch": "@@ -57,22 +57,26 @@ function renderNode (node, isRoot, context) {\n   }\n }\n \n+function registerComponentForCache (options, write) {\n+  // exposed by vue-loader, need to call this if cache hit because\n+  // component lifecycle hooks will not be called.\n+  const register = options._ssrRegister\n+  if (write.caching && isDef(register)) {\n+    write.componentBuffer[write.componentBuffer.length - 1].add(register)\n+  }\n+  return register\n+}\n+\n function renderComponent (node, isRoot, context) {\n   const { write, next, userContext } = context\n \n   // check cache hit\n   const Ctor = node.componentOptions.Ctor\n   const getKey = Ctor.options.serverCacheKey\n   const name = Ctor.options.name\n-\n-  // exposed by vue-loader, need to call this if cache hit because\n-  // component lifecycle hooks will not be called.\n-  const registerComponent = Ctor.options._ssrRegister\n-  if (write.caching && isDef(registerComponent)) {\n-    write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n-  }\n-\n   const cache = context.cache\n+  const registerComponent = registerComponentForCache(Ctor.options, write)\n+\n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n     const key = name + '::' + getKey(node.componentOptions.propsData)\n     const { has, get } = context\n@@ -147,7 +151,6 @@ function renderComponentInner (node, isRoot, context) {\n     node,\n     context.activeInstance\n   )\n-  node.ssrContext = null\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node\n@@ -159,14 +162,20 @@ function renderComponentInner (node, isRoot, context) {\n }\n \n function renderElement (el, isRoot, context) {\n+  const { write, next } = context\n+\n   if (isTrue(isRoot)) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n     el.data.attrs[SSR_ATTR] = 'true'\n   }\n+\n+  if (el.functionalOptions) {\n+    registerComponentForCache(el.functionalOptions, write)\n+  }\n+\n   const startTag = renderStartingTag(el, context)\n   const endTag = `</${el.tag}>`\n-  const { write, next } = context\n   if (context.isUnaryTag(el.tag)) {\n     write(startTag, next)\n   } else if (isUndef(el.children) || el.children.length === 0) {"
            },
            {
                "commitId": "228f0f8f3b08312d926f99b3d57757fee40e4870",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -77,9 +77,9 @@ function renderComponent (node, isRoot, context) {\n     const key = name + '::' + getKey(node.componentOptions.propsData)\n     const { has, get } = context\n     if (isDef(has)) {\n-      (has: any)(key, hit => {\n+      has(key, hit => {\n         if (hit === true && isDef(get)) {\n-          (get: any)(key, res => {\n+          get(key, res => {\n             if (isDef(registerComponent)) {\n               registerComponent(userContext)\n             }\n@@ -91,7 +91,7 @@ function renderComponent (node, isRoot, context) {\n         }\n       })\n     } else if (isDef(get)) {\n-      (get: any)(key, res => {\n+      get(key, res => {\n         if (isDef(res)) {\n           if (isDef(registerComponent)) {\n             registerComponent(userContext)"
            },
            {
                "commitId": "9ca0c35a3fadd1f97c9b5c68b7b51d4f96b40a72",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -141,10 +141,13 @@ function renderComponentWithCache (node, isRoot, key, context) {\n \n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n+  // expose userContext on vnode\n+  node.ssrContext = context.userContext\n   const child = context.activeInstance = createComponentInstanceForVnode(\n     node,\n     context.activeInstance\n   )\n+  node.ssrContext = null\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node"
            },
            {
                "commitId": "914879f1ce61a67fb7b9f367e6caaaf002c18fe3",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n-import { escape } from 'he'\n+const { escape } = require('he')\n+\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'"
            },
            {
                "commitId": "3b04547c0c4fc56d786f5d03446c81b2d7501297",
                "additions": 89,
                "deletions": 74,
                "patch": "@@ -37,89 +37,88 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  const { write, next, userContext } = context\n   if (isDef(node.componentOptions)) {\n-    // check cache hit\n-    const Ctor = node.componentOptions.Ctor\n-    const getKey = Ctor.options.serverCacheKey\n-    const name = Ctor.options.name\n-\n-    // exposed by vue-loader, need to call this if cache hit because\n-    // component lifecycle hooks will not be called.\n-    const registerComponent = Ctor.options._ssrRegister\n-    if (write.caching && isDef(registerComponent)) {\n-      write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n-    }\n-\n-    const cache = context.cache\n-    if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-      const key = name + '::' + getKey(node.componentOptions.propsData)\n-      const { has, get } = context\n-      if (isDef(has)) {\n-        (has: any)(key, hit => {\n-          if (hit === true && isDef(get)) {\n-            (get: any)(key, res => {\n-              registerComponent && registerComponent(userContext)\n-              res.components.forEach(register => register(userContext))\n-              write(res.html, next)\n-            })\n-          } else {\n-            renderComponentWithCache(node, isRoot, key, context)\n-          }\n-        })\n-      } else if (isDef(get)) {\n-        (get: any)(key, res => {\n-          if (isDef(res)) {\n-            registerComponent && registerComponent(userContext)\n-            res.components.forEach(register => register(userContext))\n-            write(res.html, next)\n-          } else {\n-            renderComponentWithCache(node, isRoot, key, context)\n-          }\n-        })\n-      }\n-    } else {\n-      if (isDef(getKey) && isUndef(cache)) {\n-        warnOnce(\n-          `[vue-server-renderer] Component ${\n-            Ctor.options.name || '(anonymous)'\n-          } implemented serverCacheKey, ` +\n-          'but no cache was provided to the renderer.'\n-        )\n-      }\n-      if (isDef(getKey) && isUndef(name)) {\n-        warnOnce(\n-          `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n-          `must also define a unique \"name\" option.`\n-        )\n-      }\n-      renderComponent(node, isRoot, context)\n-    }\n+    renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n       renderElement(node, isRoot, context)\n     } else if (isTrue(node.isComment)) {\n-      write(`<!--${node.text}-->`, next)\n+      context.write(\n+        `<!--${node.text}-->`,\n+        context.next\n+      )\n     } else {\n-      write(node.raw ? node.text : escape(String(node.text)), next)\n+      context.write(\n+        node.raw ? node.text : escape(String(node.text)),\n+        context.next\n+      )\n     }\n   }\n }\n \n function renderComponent (node, isRoot, context) {\n-  const prevActive = context.activeInstance\n-  const child = context.activeInstance = createComponentInstanceForVnode(\n-    node,\n-    context.activeInstance\n-  )\n-  normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+  const { write, next, userContext } = context\n+\n+  // check cache hit\n+  const Ctor = node.componentOptions.Ctor\n+  const getKey = Ctor.options.serverCacheKey\n+  const name = Ctor.options.name\n+\n+  // exposed by vue-loader, need to call this if cache hit because\n+  // component lifecycle hooks will not be called.\n+  const registerComponent = Ctor.options._ssrRegister\n+  if (write.caching && isDef(registerComponent)) {\n+    write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n+  }\n+\n+  const cache = context.cache\n+  if (isDef(getKey) && isDef(cache) && isDef(name)) {\n+    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const { has, get } = context\n+    if (isDef(has)) {\n+      (has: any)(key, hit => {\n+        if (hit === true && isDef(get)) {\n+          (get: any)(key, res => {\n+            if (isDef(registerComponent)) {\n+              registerComponent(userContext)\n+            }\n+            res.components.forEach(register => register(userContext))\n+            write(res.html, next)\n+          })\n+        } else {\n+          renderComponentWithCache(node, isRoot, key, context)\n+        }\n+      })\n+    } else if (isDef(get)) {\n+      (get: any)(key, res => {\n+        if (isDef(res)) {\n+          if (isDef(registerComponent)) {\n+            registerComponent(userContext)\n+          }\n+          res.components.forEach(register => register(userContext))\n+          write(res.html, next)\n+        } else {\n+          renderComponentWithCache(node, isRoot, key, context)\n+        }\n+      })\n+    }\n+  } else {\n+    if (isDef(getKey) && isUndef(cache)) {\n+      warnOnce(\n+        `[vue-server-renderer] Component ${\n+          Ctor.options.name || '(anonymous)'\n+        } implemented serverCacheKey, ` +\n+        'but no cache was provided to the renderer.'\n+      )\n+    }\n+    if (isDef(getKey) && isUndef(name)) {\n+      warnOnce(\n+        `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+        `must also define a unique \"name\" option.`\n+      )\n+    }\n+    renderComponentInner(node, isRoot, context)\n+  }\n }\n \n function renderComponentWithCache (node, isRoot, key, context) {\n@@ -136,7 +135,23 @@ function renderComponentWithCache (node, isRoot, key, context) {\n     bufferIndex,\n     componentBuffer\n   })\n-  renderComponent(node, isRoot, context)\n+  renderComponentInner(node, isRoot, context)\n+}\n+\n+function renderComponentInner (node, isRoot, context) {\n+  const prevActive = context.activeInstance\n+  const child = context.activeInstance = createComponentInstanceForVnode(\n+    node,\n+    context.activeInstance\n+  )\n+  normalizeRender(child)\n+  const childNode = child._render()\n+  childNode.parent = node\n+  context.renderStates.push({\n+    type: 'Component',\n+    prevActive\n+  })\n+  renderNode(childNode, isRoot, context)\n }\n \n function renderElement (el, isRoot, context) {\n@@ -166,7 +181,7 @@ function renderElement (el, isRoot, context) {\n \n function hasAncestorData (node: VNode) {\n   const parentNode = node.parent\n-  return parentNode && (parentNode.data || hasAncestorData(parentNode))\n+  return isDef(parentNode) && (isDef(parentNode.data) || hasAncestorData(parentNode))\n }\n \n function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {"
            },
            {
                "commitId": "4e40666d53b13c292472dfd0c678c707ad39afd9",
                "additions": 25,
                "deletions": 8,
                "patch": "@@ -37,15 +37,20 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  const { write, next } = context\n+  const { write, next, userContext } = context\n   if (isDef(node.componentOptions)) {\n     // check cache hit\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+\n     // exposed by vue-loader, need to call this if cache hit because\n     // component lifecycle hooks will not be called.\n-    const injectStyles = Ctor.options._injectStyles\n+    const registerComponent = Ctor.options._ssrRegister\n+    if (write.caching && isDef(registerComponent)) {\n+      write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n+    }\n+\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n@@ -54,8 +59,9 @@ function renderNode (node, isRoot, context) {\n         (has: any)(key, hit => {\n           if (hit === true && isDef(get)) {\n             (get: any)(key, res => {\n-              injectStyles && injectStyles.call({})\n-              write(res, next)\n+              registerComponent && registerComponent(userContext)\n+              res.components.forEach(register => register(userContext))\n+              write(res.html, next)\n             })\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n@@ -64,8 +70,9 @@ function renderNode (node, isRoot, context) {\n       } else if (isDef(get)) {\n         (get: any)(key, res => {\n           if (isDef(res)) {\n-            injectStyles && injectStyles.call({})\n-            write(res, next)\n+            registerComponent && registerComponent(userContext)\n+            res.components.forEach(register => register(userContext))\n+            write(res.html, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n@@ -101,7 +108,10 @@ function renderNode (node, isRoot, context) {\n \n function renderComponent (node, isRoot, context) {\n   const prevActive = context.activeInstance\n-  const child = context.activeInstance = createComponentInstanceForVnode(node, context.activeInstance)\n+  const child = context.activeInstance = createComponentInstanceForVnode(\n+    node,\n+    context.activeInstance\n+  )\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node\n@@ -117,9 +127,14 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   write.caching = true\n   const buffer = write.cacheBuffer\n   const bufferIndex = buffer.push('') - 1\n+  const componentBuffer = write.componentBuffer\n+  componentBuffer.push(new Set())\n   context.renderStates.push({\n     type: 'ComponentWithCache',\n-    buffer, bufferIndex, key\n+    key,\n+    buffer,\n+    bufferIndex,\n+    componentBuffer\n   })\n   renderComponent(node, isRoot, context)\n }\n@@ -234,11 +249,13 @@ export function createRenderFunction (\n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n+    userContext: ?Object,\n     done: Function\n   ) {\n     warned = Object.create(null)\n     const context = new RenderContext({\n       activeInstance: component,\n+      userContext,\n       write, done, renderNode,\n       isUnaryTag, modules, directives,\n       cache"
            },
            {
                "commitId": "37fb98827141d95dc1f60c9ea0519d6c49e61fbc",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -43,6 +43,8 @@ function renderNode (node, isRoot, context) {\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+    // exposed by vue-loader, need to call this if cache hit because\n+    // component lifecycle hooks will not be called.\n     const injectStyles = Ctor.options._injectStyles\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {"
            },
            {
                "commitId": "5ec2a7b82cf1819b5e465c4c91f303ca75561e71",
                "additions": 6,
                "deletions": 1,
                "patch": "@@ -43,21 +43,26 @@ function renderNode (node, isRoot, context) {\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+    const injectStyles = Ctor.options._injectStyles\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n       const { has, get } = context\n       if (isDef(has)) {\n         (has: any)(key, hit => {\n           if (hit === true && isDef(get)) {\n-            (get: any)(key, res => write(res, next))\n+            (get: any)(key, res => {\n+              injectStyles && injectStyles.call({})\n+              write(res, next)\n+            })\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n       } else if (isDef(get)) {\n         (get: any)(key, res => {\n           if (isDef(res)) {\n+            injectStyles && injectStyles.call({})\n             write(res, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)"
            },
            {
                "commitId": "5213ec7bbf13928a389e566e99222fa1e77d2161",
                "additions": 26,
                "deletions": 24,
                "patch": "@@ -6,6 +6,8 @@ import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n@@ -17,7 +19,7 @@ const warnOnce = msg => {\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n-  if (!render) {\n+  if (isUndef(render)) {\n     if (template) {\n       const renderFns = (\n         compilationCache[template] ||\n@@ -36,42 +38,42 @@ const normalizeRender = vm => {\n \n function renderNode (node, isRoot, context) {\n   const { write, next } = context\n-  if (node.componentOptions) {\n+  if (isDef(node.componentOptions)) {\n     // check cache hit\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n     const cache = context.cache\n-    if (getKey && cache && name) {\n+    if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n       const { has, get } = context\n-      if (has) {\n-        has(key, hit => {\n-          if (hit && get) {\n-            get(key, res => write(res, next))\n+      if (isDef(has)) {\n+        (has: any)(key, hit => {\n+          if (hit === true && isDef(get)) {\n+            (get: any)(key, res => write(res, next))\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n-      } else if (get) {\n-        get(key, res => {\n-          if (res) {\n+      } else if (isDef(get)) {\n+        (get: any)(key, res => {\n+          if (isDef(res)) {\n             write(res, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n       }\n     } else {\n-      if (getKey && !cache) {\n+      if (isDef(getKey) && isUndef(cache)) {\n         warnOnce(\n           `[vue-server-renderer] Component ${\n             Ctor.options.name || '(anonymous)'\n           } implemented serverCacheKey, ` +\n           'but no cache was provided to the renderer.'\n         )\n       }\n-      if (getKey && !name) {\n+      if (isDef(getKey) && isUndef(name)) {\n         warnOnce(\n           `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n           `must also define a unique \"name\" option.`\n@@ -80,9 +82,9 @@ function renderNode (node, isRoot, context) {\n       renderComponent(node, isRoot, context)\n     }\n   } else {\n-    if (node.tag) {\n+    if (isDef(node.tag)) {\n       renderElement(node, isRoot, context)\n-    } else if (node.isComment) {\n+    } else if (isTrue(node.isComment)) {\n       write(`<!--${node.text}-->`, next)\n     } else {\n       write(node.raw ? node.text : escape(String(node.text)), next)\n@@ -116,7 +118,7 @@ function renderComponentWithCache (node, isRoot, key, context) {\n }\n \n function renderElement (el, isRoot, context) {\n-  if (isRoot) {\n+  if (isTrue(isRoot)) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n     el.data.attrs[SSR_ATTR] = 'true'\n@@ -126,7 +128,7 @@ function renderElement (el, isRoot, context) {\n   const { write, next } = context\n   if (context.isUnaryTag(el.tag)) {\n     write(startTag, next)\n-  } else if (!el.children || !el.children.length) {\n+  } else if (isUndef(el.children) || el.children.length === 0) {\n     write(startTag + endTag, next)\n   } else {\n     const children: Array<VNode> = el.children\n@@ -149,7 +151,7 @@ function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {\n   let dir: VNodeDirective\n   let tmp\n \n-  while (node) {\n+  while (isDef(node)) {\n     if (node.data && node.data.directives) {\n       tmp = node.data.directives.find(dir => dir.name === 'show')\n       if (tmp) {\n@@ -167,10 +169,10 @@ function renderStartingTag (node: VNode, context) {\n \n   // construct synthetic data for module processing\n   // because modules like style also produce code by parent VNode data\n-  if (!node.data && hasAncestorData(node)) {\n+  if (isUndef(node.data) && hasAncestorData(node)) {\n     node.data = {}\n   }\n-  if (node.data) {\n+  if (isDef(node.data)) {\n     // check directives\n     const dirs = node.data.directives\n     if (dirs) {\n@@ -202,13 +204,13 @@ function renderStartingTag (node: VNode, context) {\n   // attach scoped CSS ID\n   let scopeId\n   const activeInstance = context.activeInstance\n-  if (activeInstance &&\n+  if (isDef(activeInstance) &&\n       activeInstance !== node.context &&\n-      (scopeId = activeInstance.$options._scopeId)) {\n-    markup += ` ${scopeId}`\n+      isDef(scopeId = activeInstance.$options._scopeId)) {\n+    markup += ` ${(scopeId: any)}`\n   }\n-  while (node) {\n-    if ((scopeId = node.context.$options._scopeId)) {\n+  while (isDef(node)) {\n+    if (isDef(scopeId = node.context.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n     node = node.parent"
            },
            {
                "commitId": "69e62f0a74b6a6baab1d66dd0433cdfb410bdae7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import { escape } from 'he'\n-import { SSR_ATTR } from 'shared/util'\n+import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'"
            },
            {
                "commitId": "e0a7c1ac68fbfa5b0d7714db549569d5cefa2bd9",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n import { escape } from 'he'\n+import { SSR_ATTR } from 'shared/util'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n@@ -118,7 +119,7 @@ function renderElement (el, isRoot, context) {\n   if (isRoot) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n-    el.data.attrs['server-rendered'] = 'true'\n+    el.data.attrs[SSR_ATTR] = 'true'\n   }\n   const startTag = renderStartingTag(el, context)\n   const endTag = `</${el.tag}>`"
            },
            {
                "commitId": "e733e5cee8585fdf4a0c0e5e77e7816befa24ad4",
                "additions": 26,
                "deletions": 2,
                "patch": "@@ -144,6 +144,22 @@ function hasAncestorData (node: VNode) {\n   return parentNode && (parentNode.data || hasAncestorData(parentNode))\n }\n \n+function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {\n+  let dir: VNodeDirective\n+  let tmp\n+\n+  while (node) {\n+    if (node.data && node.data.directives) {\n+      tmp = node.data.directives.find(dir => dir.name === 'show')\n+      if (tmp) {\n+        dir = tmp\n+      }\n+    }\n+    node = node.parent\n+  }\n+  return dir\n+}\n+\n function renderStartingTag (node: VNode, context) {\n   let markup = `<${node.tag}`\n   const { directives, modules } = context\n@@ -158,14 +174,22 @@ function renderStartingTag (node: VNode, context) {\n     const dirs = node.data.directives\n     if (dirs) {\n       for (let i = 0; i < dirs.length; i++) {\n-        const dirRenderer = directives[dirs[i].name]\n-        if (dirRenderer) {\n+        const name = dirs[i].name\n+        const dirRenderer = directives[name]\n+        if (dirRenderer && name !== 'show') {\n           // directives mutate the node's data\n           // which then gets rendered by modules\n           dirRenderer(node, dirs[i])\n         }\n       }\n     }\n+\n+    // v-show directive needs to be merged from parent to child\n+    const vshowDirectiveInfo = getVShowDirectiveInfo(node)\n+    if (vshowDirectiveInfo) {\n+      directives.show(node, vshowDirectiveInfo)\n+    }\n+\n     // apply other modules\n     for (let i = 0; i < modules.length; i++) {\n       const res = modules[i](node)"
            },
            {
                "commitId": "29f6902d1959c35eb38ef110bee6c13124903442",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -80,6 +80,7 @@ export function renderMixin (Vue: Class<Component>) {\n       handleError(e, vm, `render function`)\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n+      /* istanbul ignore else */\n       if (process.env.NODE_ENV !== 'production') {\n         vnode = vm.$options.renderError\n           ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)"
            },
            {
                "commitId": "1861ee9570730149e01f225323c3a52392e5900f",
                "additions": 9,
                "deletions": 2,
                "patch": "@@ -78,8 +78,15 @@ export function renderMixin (Vue: Class<Component>) {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n       handleError(e, vm, `render function`)\n-      // return previous vnode to prevent render error causing blank component\n-      vnode = vm._vnode\n+      // return error render result,\n+      // or previous vnode to prevent render error causing blank component\n+      if (process.env.NODE_ENV !== 'production') {\n+        vnode = vm.$options.renderError\n+          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+          : vm._vnode\n+      } else {\n+        vnode = vm._vnode\n+      }\n     }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {"
            },
            {
                "commitId": "3c0cdb553590db84a3bdb2a299947e7424e23464",
                "additions": 3,
                "deletions": 13,
                "patch": "@@ -1,16 +1,14 @@\n /* @flow */\n \n-import config from '../config'\n-\n import {\n   warn,\n   nextTick,\n   toNumber,\n   _toString,\n   looseEqual,\n   emptyObject,\n-  looseIndexOf,\n-  formatComponentName\n+  handleError,\n+  looseIndexOf\n } from '../util/index'\n \n import VNode, {\n@@ -79,15 +77,7 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      /* istanbul ignore else */\n-      if (config.errorHandler) {\n-        config.errorHandler.call(null, e, vm)\n-      } else {\n-        if (process.env.NODE_ENV !== 'production') {\n-          warn(`Error when rendering ${formatComponentName(vm)}:`)\n-        }\n-        throw e\n-      }\n+      handleError(e, vm, `render function`)\n       // return previous vnode to prevent render error causing blank component\n       vnode = vm._vnode\n     }"
            },
            {
                "commitId": "e7083d09f1eec1d8853b65720f1a8c6e0f22836e",
                "additions": 5,
                "deletions": 5,
                "patch": "@@ -8,6 +8,7 @@ import {\n   toNumber,\n   _toString,\n   looseEqual,\n+  emptyObject,\n   looseIndexOf,\n   formatComponentName\n } from '../util/index'\n@@ -21,11 +22,11 @@ import VNode, {\n import { createElement } from '../vdom/create-element'\n import { renderList } from './render-helpers/render-list'\n import { renderSlot } from './render-helpers/render-slot'\n-import { resolveSlots } from './render-helpers/resolve-slots'\n import { resolveFilter } from './render-helpers/resolve-filter'\n import { checkKeyCodes } from './render-helpers/check-keycodes'\n import { bindObjectProps } from './render-helpers/bind-object-props'\n import { renderStatic, markOnce } from './render-helpers/render-static'\n+import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n \n export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n@@ -34,7 +35,7 @@ export function initRender (vm: Component) {\n   const parentVnode = vm.$options._parentVnode\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n-  vm.$scopedSlots = {}\n+  vm.$scopedSlots = emptyObject\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n   // args order: tag, data, children, normalizationType, alwaysNormalize\n@@ -65,9 +66,7 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n-    if (_parentVnode && _parentVnode.data.scopedSlots) {\n-      vm.$scopedSlots = _parentVnode.data.scopedSlots\n-    }\n+    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n \n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n@@ -124,4 +123,5 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._b = bindObjectProps\n   Vue.prototype._v = createTextVNode\n   Vue.prototype._e = createEmptyVNode\n+  Vue.prototype._u = resolveScopedSlots\n }"
            },
            {
                "commitId": "b1e66b489144ec31ad3d4f3298e3809f00d6c4e6",
                "additions": 27,
                "deletions": 211,
                "patch": "@@ -1,28 +1,31 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, {\n-  cloneVNode,\n-  cloneVNodes,\n-  createTextVNode,\n-  createEmptyVNode\n-} from '../vdom/vnode'\n+\n import {\n   warn,\n-  extend,\n-  identity,\n-  isObject,\n-  toObject,\n   nextTick,\n   toNumber,\n   _toString,\n   looseEqual,\n   looseIndexOf,\n-  resolveAsset,\n   formatComponentName\n } from '../util/index'\n \n+import VNode, {\n+  cloneVNodes,\n+  createTextVNode,\n+  createEmptyVNode\n+} from '../vdom/vnode'\n+\n import { createElement } from '../vdom/create-element'\n+import { renderList } from './render-helpers/render-list'\n+import { renderSlot } from './render-helpers/render-slot'\n+import { resolveSlots } from './render-helpers/resolve-slots'\n+import { resolveFilter } from './render-helpers/resolve-filter'\n+import { checkKeyCodes } from './render-helpers/check-keycodes'\n+import { bindObjectProps } from './render-helpers/bind-object-props'\n+import { renderStatic, markOnce } from './render-helpers/render-static'\n \n export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n@@ -105,207 +108,20 @@ export function renderMixin (Vue: Class<Component>) {\n     return vnode\n   }\n \n-  // toString for mustaches\n-  Vue.prototype._s = _toString\n-  // convert text to vnode\n-  Vue.prototype._v = createTextVNode\n-  // number conversion\n+  // internal render helpers.\n+  // these are exposed on the instance prototype to reduce generated render\n+  // code size.\n+  Vue.prototype._o = markOnce\n   Vue.prototype._n = toNumber\n-  // empty vnode\n-  Vue.prototype._e = createEmptyVNode\n-  // loose equal\n+  Vue.prototype._s = _toString\n+  Vue.prototype._l = renderList\n+  Vue.prototype._t = renderSlot\n   Vue.prototype._q = looseEqual\n-  // loose indexOf\n   Vue.prototype._i = looseIndexOf\n-\n-  // render static tree by index\n-  Vue.prototype._m = function renderStatic (\n-    index: number,\n-    isInFor?: boolean\n-  ): VNode | Array<VNode> {\n-    let tree = this._staticTrees[index]\n-    // if has already-rendered static tree and not inside v-for,\n-    // we can reuse the same tree by doing a shallow clone.\n-    if (tree && !isInFor) {\n-      return Array.isArray(tree)\n-        ? cloneVNodes(tree)\n-        : cloneVNode(tree)\n-    }\n-    // otherwise, render a fresh tree.\n-    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n-    markStatic(tree, `__static__${index}`, false)\n-    return tree\n-  }\n-\n-  // mark node as static (v-once)\n-  Vue.prototype._o = function markOnce (\n-    tree: VNode | Array<VNode>,\n-    index: number,\n-    key: string\n-  ) {\n-    markStatic(tree, `__once__${index}${key ? `_${key}` : ``}`, true)\n-    return tree\n-  }\n-\n-  function markStatic (tree, key, isOnce) {\n-    if (Array.isArray(tree)) {\n-      for (let i = 0; i < tree.length; i++) {\n-        if (tree[i] && typeof tree[i] !== 'string') {\n-          markStaticNode(tree[i], `${key}_${i}`, isOnce)\n-        }\n-      }\n-    } else {\n-      markStaticNode(tree, key, isOnce)\n-    }\n-  }\n-\n-  function markStaticNode (node, key, isOnce) {\n-    node.isStatic = true\n-    node.key = key\n-    node.isOnce = isOnce\n-  }\n-\n-  // filter resolution helper\n-  Vue.prototype._f = function resolveFilter (id) {\n-    return resolveAsset(this.$options, 'filters', id, true) || identity\n-  }\n-\n-  // render v-for\n-  Vue.prototype._l = function renderList (\n-    val: any,\n-    render: () => VNode\n-  ): ?Array<VNode> {\n-    let ret: ?Array<VNode>, i, l, keys, key\n-    if (Array.isArray(val) || typeof val === 'string') {\n-      ret = new Array(val.length)\n-      for (i = 0, l = val.length; i < l; i++) {\n-        ret[i] = render(val[i], i)\n-      }\n-    } else if (typeof val === 'number') {\n-      ret = new Array(val)\n-      for (i = 0; i < val; i++) {\n-        ret[i] = render(i + 1, i)\n-      }\n-    } else if (isObject(val)) {\n-      keys = Object.keys(val)\n-      ret = new Array(keys.length)\n-      for (i = 0, l = keys.length; i < l; i++) {\n-        key = keys[i]\n-        ret[i] = render(val[key], key, i)\n-      }\n-    }\n-    return ret\n-  }\n-\n-  // renderSlot\n-  Vue.prototype._t = function (\n-    name: string,\n-    fallback: ?Array<VNode>,\n-    props: ?Object,\n-    bindObject: ?Object\n-  ): ?Array<VNode> {\n-    const scopedSlotFn = this.$scopedSlots[name]\n-    if (scopedSlotFn) { // scoped slot\n-      props = props || {}\n-      if (bindObject) {\n-        extend(props, bindObject)\n-      }\n-      return scopedSlotFn(props) || fallback\n-    } else {\n-      const slotNodes = this.$slots[name]\n-      // warn duplicate slot usage\n-      if (slotNodes && process.env.NODE_ENV !== 'production') {\n-        slotNodes._rendered && warn(\n-          `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n-          `- this will likely cause render errors.`,\n-          this\n-        )\n-        slotNodes._rendered = true\n-      }\n-      return slotNodes || fallback\n-    }\n-  }\n-\n-  // apply v-bind object\n-  Vue.prototype._b = function bindProps (\n-    data: any,\n-    tag: string,\n-    value: any,\n-    asProp?: boolean\n-  ): VNodeData {\n-    if (value) {\n-      if (!isObject(value)) {\n-        process.env.NODE_ENV !== 'production' && warn(\n-          'v-bind without argument expects an Object or Array value',\n-          this\n-        )\n-      } else {\n-        if (Array.isArray(value)) {\n-          value = toObject(value)\n-        }\n-        for (const key in value) {\n-          if (key === 'class' || key === 'style') {\n-            data[key] = value[key]\n-          } else {\n-            const type = data.attrs && data.attrs.type\n-            const hash = asProp || config.mustUseProp(tag, type, key)\n-              ? data.domProps || (data.domProps = {})\n-              : data.attrs || (data.attrs = {})\n-            hash[key] = value[key]\n-          }\n-        }\n-      }\n-    }\n-    return data\n-  }\n-\n-  // check v-on keyCodes\n-  Vue.prototype._k = function checkKeyCodes (\n-    eventKeyCode: number,\n-    key: string,\n-    builtInAlias: number | Array<number> | void\n-  ): boolean {\n-    const keyCodes = config.keyCodes[key] || builtInAlias\n-    if (Array.isArray(keyCodes)) {\n-      return keyCodes.indexOf(eventKeyCode) === -1\n-    } else {\n-      return keyCodes !== eventKeyCode\n-    }\n-  }\n-}\n-\n-export function resolveSlots (\n-  children: ?Array<VNode>,\n-  context: ?Component\n-): { [key: string]: Array<VNode> } {\n-  const slots = {}\n-  if (!children) {\n-    return slots\n-  }\n-  const defaultSlot = []\n-  let name, child\n-  for (let i = 0, l = children.length; i < l; i++) {\n-    child = children[i]\n-    // named slots should only be respected if the vnode was rendered in the\n-    // same context.\n-    if ((child.context === context || child.functionalContext === context) &&\n-        child.data && (name = child.data.slot)) {\n-      const slot = (slots[name] || (slots[name] = []))\n-      if (child.tag === 'template') {\n-        slot.push.apply(slot, child.children)\n-      } else {\n-        slot.push(child)\n-      }\n-    } else {\n-      defaultSlot.push(child)\n-    }\n-  }\n-  // ignore single whitespace\n-  if (defaultSlot.length && !(\n-    defaultSlot.length === 1 &&\n-    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n-  )) {\n-    slots.default = defaultSlot\n-  }\n-  return slots\n+  Vue.prototype._m = renderStatic\n+  Vue.prototype._f = resolveFilter\n+  Vue.prototype._k = checkKeyCodes\n+  Vue.prototype._b = bindObjectProps\n+  Vue.prototype._v = createTextVNode\n+  Vue.prototype._e = createEmptyVNode\n }"
            },
            {
                "commitId": "05b070fd41b61a953388a34ff3374f301a9f7540",
                "additions": 5,
                "deletions": 68,
                "patch": "@@ -1,9 +1,9 @@\n /* @flow */\n \n import { escape } from 'he'\n+import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n-import { noop } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -13,17 +13,6 @@ const warnOnce = msg => {\n   }\n }\n \n-const normalizeAsync = (cache, method) => {\n-  const fn = cache[method]\n-  if (!fn) {\n-    return\n-  } else if (fn.length > 1) {\n-    return (key, cb) => fn.call(cache, key, cb)\n-  } else {\n-    return (key, cb) => cb(fn.call(cache, key))\n-  }\n-}\n-\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n@@ -202,76 +191,24 @@ function renderStartingTag (node: VNode, context) {\n   return markup + '>'\n }\n \n-const nextFactory = context => function next () {\n-  const lastState = context.renderStates.pop()\n-  if (!lastState) {\n-    context.done()\n-    // cleanup context, avoid leakage\n-    context = (null: any)\n-    return\n-  }\n-  switch (lastState.type) {\n-    case 'Component':\n-      context.activeInstance = lastState.prevActive\n-      next()\n-      break\n-    case 'Element':\n-      const { children, total } = lastState\n-      const rendered = lastState.rendered++\n-      if (rendered < total) {\n-        context.renderStates.push(lastState)\n-        renderNode(children[rendered], false, context)\n-      } else {\n-        context.write(lastState.endTag, next)\n-      }\n-      break\n-    case 'ComponentWithCache':\n-      const { buffer, bufferIndex, key } = lastState\n-      const result = buffer[bufferIndex]\n-      context.cache.set(key, result)\n-      if (bufferIndex === 0) {\n-        // this is a top-level cached component,\n-        // exit caching mode.\n-        context.write.caching = false\n-      } else {\n-        // parent component is also being cached,\n-        // merge self into parent's result\n-        buffer[bufferIndex - 1] += result\n-      }\n-      buffer.length = bufferIndex\n-      next()\n-      break\n-  }\n-}\n-\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n   isUnaryTag: Function,\n   cache: any\n ) {\n-  if (cache && (!cache.get || !cache.set)) {\n-    throw new Error('renderer cache must implement at least get & set.')\n-  }\n-\n-  const get = cache && normalizeAsync(cache, 'get')\n-  const has = cache && normalizeAsync(cache, 'has')\n-\n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n     warned = Object.create(null)\n-    const context = {\n+    const context = new RenderContext({\n       activeInstance: component,\n-      renderStates: [],\n-      next: noop, // for flow\n-      write, done,\n+      write, done, renderNode,\n       isUnaryTag, modules, directives,\n-      cache, get, has\n-    }\n-    context.next = nextFactory(context)\n+      cache\n+    })\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "08bd81f8c0bd39816b5b509c5132a12188b412d7",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -247,7 +247,8 @@ export function renderMixin (Vue: Class<Component>) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n           } else {\n-            const hash = asProp || config.mustUseProp(tag, key)\n+            const type = data.attrs && data.attrs.type\n+            const hash = asProp || config.mustUseProp(tag, type, key)\n               ? data.domProps || (data.domProps = {})\n               : data.attrs || (data.attrs = {})\n             hash[key] = value[key]"
            },
            {
                "commitId": "7131bc48155fb5224f4d6f0fb1c4b7eed6a79db4",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -40,9 +40,6 @@ export function initRender (vm: Component) {\n   // normalization is always applied for the public version, used in\n   // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n-  if (vm.$options.el) {\n-    vm.$mount(vm.$options.el)\n-  }\n }\n \n export function renderMixin (Vue: Class<Component>) {"
            },
            {
                "commitId": "b60182d996ed1e976ce1697a3017cb702ddc0920",
                "additions": 0,
                "deletions": 21,
                "patch": "@@ -262,7 +262,6 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n-    checkBuild(component)\n     warned = Object.create(null)\n     const context = {\n       activeInstance: component,\n@@ -277,23 +276,3 @@ export function createRenderFunction (\n     renderNode(component._render(), true, context)\n   }\n }\n-\n-function checkBuild (component) {\n-  let Vue: any = component.constructor\n-  while (Vue.super) {\n-    Vue = Vue.super\n-  }\n-  if (Vue.compile && Vue.config.devtools !== false) {\n-    console.error(\n-      red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n-      `server-side rendering. It is recommended to use the CommonJS build ` +\n-      `(vue/dist/vue.common.js) instead so that the code can run in ` +\n-      `production mode by setting NODE_ENV=production. The server renderer ` +\n-      `supports the template option regardless of what build you are using.\\n`)\n-    )\n-  }\n-}\n-\n-function red (str) {\n-  return '\\u001B[1m\\u001B[31m' + str + '\\u001B[39m\\u001B[22m'\n-}"
            },
            {
                "commitId": "0eb8cdc7f7cff484ebe0b12a781a4ab020f82b4a",
                "additions": 8,
                "deletions": 2,
                "patch": "@@ -9,6 +9,7 @@ import VNode, {\n } from '../vdom/vnode'\n import {\n   warn,\n+  extend,\n   identity,\n   isObject,\n   toObject,\n@@ -203,11 +204,16 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._t = function (\n     name: string,\n     fallback: ?Array<VNode>,\n-    props: ?Object\n+    props: ?Object,\n+    bindObject: ?Object\n   ): ?Array<VNode> {\n     const scopedSlotFn = this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n-      return scopedSlotFn(props || {}) || fallback\n+      props = props || {}\n+      if (bindObject) {\n+        extend(props, bindObject)\n+      }\n+      return scopedSlotFn(props) || fallback\n     } else {\n       const slotNodes = this.$slots[name]\n       // warn duplicate slot usage"
            },
            {
                "commitId": "974247fd8e6b57840c9b7686964ddb38bc6affc8",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -178,7 +178,7 @@ export function renderMixin (Vue: Class<Component>) {\n     render: () => VNode\n   ): ?Array<VNode> {\n     let ret: ?Array<VNode>, i, l, keys, key\n-    if (Array.isArray(val)) {\n+    if (Array.isArray(val) || typeof val === 'string') {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n         ret[i] = render(val[i], i)"
            },
            {
                "commitId": "f1c38674f28116e1e335873ecbc6716fb70448a3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -33,7 +33,7 @@ export function initRender (vm: Component) {\n   vm.$scopedSlots = {}\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  // args order: tag, data, children, needNormalization, alwaysNormalize\n+  // args order: tag, data, children, normalizationType, alwaysNormalize\n   // internal version is used by render functions compiled from templates\n   vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n   // normalization is always applied for the public version, used in"
            },
            {
                "commitId": "5fa45c3bf80100469039d3b9c160ddfdaf90f8ec",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -279,11 +279,11 @@ export function createRenderFunction (\n }\n \n function checkBuild (component) {\n-  let Vue = component.constructor\n+  let Vue: any = component.constructor\n   while (Vue.super) {\n     Vue = Vue.super\n   }\n-  if (Vue.compile) {\n+  if (Vue.compile && Vue.config.devtools !== false) {\n     console.error(\n       red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n       `server-side rendering. It is recommended to use the CommonJS build ` +"
            },
            {
                "commitId": "8567e7dcedfdf0d8fb21e2c2f7ee935229b6a9e9",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -9,6 +9,7 @@ import VNode, {\n } from '../vdom/vnode'\n import {\n   warn,\n+  identity,\n   isObject,\n   toObject,\n   nextTick,\n@@ -167,7 +168,6 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // filter resolution helper\n-  const identity = _ => _\n   Vue.prototype._f = function resolveFilter (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }"
            },
            {
                "commitId": "4b51ad048306367a6fb6fbee7445e086d855f31e",
                "additions": 5,
                "deletions": 3,
                "patch": "@@ -32,9 +32,11 @@ export function initRender (vm: Component) {\n   vm.$scopedSlots = {}\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  // args order: tag, data, children, needNormalization\n-  // the needNormalization flag is disabled for the public version.\n-  vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  // args order: tag, data, children, needNormalization, alwaysNormalize\n+  // internal version is used by render functions compiled from templates\n+  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  // normalization is always applied for the public version, used in\n+  // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)"
            },
            {
                "commitId": "207c18c47f8c94f6d92675b28bc67511b7897246",
                "additions": 3,
                "deletions": 5,
                "patch": "@@ -1,7 +1,6 @@\n /* @flow */\n \n import config from '../config'\n-import { normalizeChildren } from '../vdom/helpers/index'\n import VNode, {\n   cloneVNode,\n   cloneVNodes,\n@@ -34,7 +33,7 @@ export function initRender (vm: Component) {\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n   // args order: tag, data, children, needNormalization\n-  // the needNormalization flag is flipped and defaults to true for the public version.\n+  // the needNormalization flag is disabled for the public version.\n   vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n@@ -270,14 +269,13 @@ export function renderMixin (Vue: Class<Component>) {\n }\n \n export function resolveSlots (\n-  renderChildren: ?VNodeChildren,\n+  children: ?Array<VNode>,\n   context: ?Component\n ): { [key: string]: Array<VNode> } {\n   const slots = {}\n-  if (!renderChildren) {\n+  if (!children) {\n     return slots\n   }\n-  const children = normalizeChildren(renderChildren) || []\n   const defaultSlot = []\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {"
            },
            {
                "commitId": "79e1058799dcde0b7e341ef44b590ecbf1e3a722",
                "additions": 23,
                "deletions": 7,
                "patch": "@@ -1,11 +1,24 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { createEmptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n+import VNode, {\n+  cloneVNode,\n+  cloneVNodes,\n+  createTextVNode,\n+  createEmptyVNode\n+} from '../vdom/vnode'\n import {\n-  warn, formatComponentName, bind, isObject, toObject,\n-  nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n+  warn,\n+  isObject,\n+  toObject,\n+  nextTick,\n+  toNumber,\n+  _toString,\n+  looseEqual,\n+  looseIndexOf,\n+  resolveAsset,\n+  formatComponentName\n } from '../util/index'\n \n import { createElement } from '../vdom/create-element'\n@@ -18,9 +31,12 @@ export function initRender (vm: Component) {\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n   vm.$scopedSlots = {}\n-  // bind the public createElement fn to this instance\n+  // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(createElement, vm)\n+  // args order: tag, data, children, needNormalization\n+  // the needNormalization flag is flipped and defaults to true for the public version.\n+  vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -89,10 +105,10 @@ export function renderMixin (Vue: Class<Component>) {\n     return vnode\n   }\n \n-  // shorthands used in render functions\n-  Vue.prototype._h = createElement\n   // toString for mustaches\n   Vue.prototype._s = _toString\n+  // convert text to vnode\n+  Vue.prototype._v = createTextVNode\n   // number conversion\n   Vue.prototype._n = toNumber\n   // empty vnode"
            },
            {
                "commitId": "7431e4d16c92862ac74fdb3053de9295c809b586",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n+import VNode, { createEmptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n@@ -82,7 +82,7 @@ export function renderMixin (Vue: Class<Component>) {\n           vm\n         )\n       }\n-      vnode = emptyVNode()\n+      vnode = createEmptyVNode()\n     }\n     // set parent\n     vnode.parent = _parentVnode\n@@ -96,7 +96,7 @@ export function renderMixin (Vue: Class<Component>) {\n   // number conversion\n   Vue.prototype._n = toNumber\n   // empty vnode\n-  Vue.prototype._e = emptyVNode\n+  Vue.prototype._e = createEmptyVNode\n   // loose equal\n   Vue.prototype._q = looseEqual\n   // loose indexOf"
            },
            {
                "commitId": "e8d6bd9dc73cacbc665ce132d81a7b629bef764b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -242,9 +242,9 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._k = function checkKeyCodes (\n     eventKeyCode: number,\n     key: string,\n-    buildinAlias: number | Array<number> | void\n+    builtInAlias: number | Array<number> | void\n   ): boolean {\n-    const keyCodes = config.keyCodes[key] || buildinAlias\n+    const keyCodes = config.keyCodes[key] || builtInAlias\n     if (Array.isArray(keyCodes)) {\n       return keyCodes.indexOf(eventKeyCode) === -1\n     } else {"
            },
            {
                "commitId": "6ea9a4db4221b7264ee8ebad9cef4f076762d697",
                "additions": 12,
                "deletions": 3,
                "patch": "@@ -238,9 +238,18 @@ export function renderMixin (Vue: Class<Component>) {\n     return data\n   }\n \n-  // expose v-on keyCodes\n-  Vue.prototype._k = function getKeyCodes (key: string): any {\n-    return config.keyCodes[key]\n+  // check v-on keyCodes\n+  Vue.prototype._k = function checkKeyCodes (\n+    eventKeyCode: number,\n+    key: string,\n+    buildinAlias: number | Array<number> | void\n+  ): boolean {\n+    const keyCodes = config.keyCodes[key] || buildinAlias\n+    if (Array.isArray(keyCodes)) {\n+      return keyCodes.indexOf(eventKeyCode) === -1\n+    } else {\n+      return keyCodes !== eventKeyCode\n+    }\n   }\n }\n "
            },
            {
                "commitId": "c7147e3b60cb8b4147f0132f63b70a527a47b2b6",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -257,7 +257,6 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    debugger\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n     if ((child.context === context || child.functionalContext === context) &&"
            },
            {
                "commitId": "326aef4a6ab84d044d9ed807c5dc4326249aa856",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -14,8 +14,9 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n-  vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n+  const parentVnode = vm.$options._parentVnode\n+  const renderContext = parentVnode && parentVnode.context\n+  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n   vm.$scopedSlots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -256,6 +257,7 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n+    debugger\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n     if ((child.context === context || child.functionalContext === context) &&"
            },
            {
                "commitId": "16e3dae2455aa0f2955d95698c7dddb5b4c9440d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n import {\n-  warn, formatComponentName, bind, isObject, toObject, isServerRendering,\n+  warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n } from '../util/index'\n "
            },
            {
                "commitId": "a52a094befb0b1f660771db04deebaa37555e84e",
                "additions": 3,
                "deletions": 7,
                "patch": "@@ -60,18 +60,14 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      if (process.env.NODE_ENV !== 'production') {\n-        warn(`Error when rendering ${formatComponentName(vm)}:`)\n-      }\n       /* istanbul ignore else */\n       if (config.errorHandler) {\n         config.errorHandler.call(null, e, vm)\n       } else {\n-        if (isServerRendering()) {\n-          throw e\n-        } else {\n-          console.error(e)\n+        if (process.env.NODE_ENV !== 'production') {\n+          warn(`Error when rendering ${formatComponentName(vm)}:`)\n         }\n+        throw e\n       }\n       // return previous vnode to prevent render error causing blank component\n       vnode = vm._vnode"
            },
            {
                "commitId": "aa5f5d1198db2c9480a317b1db48c470c850949d",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -16,7 +16,7 @@ export function initRender (vm: Component) {\n   vm._staticTrees = null\n   vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n-  vm.$scopedSlots = null\n+  vm.$scopedSlots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -45,7 +45,7 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n-    if (_parentVnode) {\n+    if (_parentVnode && _parentVnode.data.scopedSlots) {\n       vm.$scopedSlots = _parentVnode.data.scopedSlots\n     }\n \n@@ -191,7 +191,7 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n+    const scopedSlotFn = this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n       return scopedSlotFn(props || {}) || fallback\n     } else {"
            },
            {
                "commitId": "303378f85b26934396e2f6dc0973f6982da2beb1",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -191,9 +191,6 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    if (process.env.NODE_ENV !== 'production' && name === 'default' && props) {\n-      warn(`Scoped slots must be named`, this)\n-    }\n     const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n       return scopedSlotFn(props || {}) || fallback"
            },
            {
                "commitId": "7f36f99f6c9bf6130f298fb79538f09fce7ef2fc",
                "additions": 7,
                "deletions": 6,
                "patch": "@@ -191,12 +191,13 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    if (props) { // scoped slot\n-      const scopedSlotFn = this.$scopedSlots[name]\n-      return scopedSlotFn\n-        ? scopedSlotFn(props) || fallback\n-        : fallback\n-    } else { // static slot\n+    if (process.env.NODE_ENV !== 'production' && name === 'default' && props) {\n+      warn(`Scoped slots must be named`, this)\n+    }\n+    const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n+    if (scopedSlotFn) { // scoped slot\n+      return scopedSlotFn(props || {}) || fallback\n+    } else {\n       const slotNodes = this.$slots[name]\n       // warn duplicate slot usage\n       if (slotNodes && process.env.NODE_ENV !== 'production') {"
            },
            {
                "commitId": "9ddbbcc340aa092699aca349492ffd50e18f1ba4",
                "additions": 24,
                "deletions": 11,
                "patch": "@@ -16,6 +16,7 @@ export function initRender (vm: Component) {\n   vm._staticTrees = null\n   vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n+  vm.$scopedSlots = null\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -44,6 +45,10 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n+    if (_parentVnode) {\n+      vm.$scopedSlots = _parentVnode.data.scopedSlots\n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -183,19 +188,27 @@ export function renderMixin (Vue: Class<Component>) {\n   // renderSlot\n   Vue.prototype._t = function (\n     name: string,\n-    fallback: ?Array<VNode>\n+    fallback: ?Array<VNode>,\n+    props: ?Object\n   ): ?Array<VNode> {\n-    const slotNodes = this.$slots[name]\n-    // warn duplicate slot usage\n-    if (slotNodes && process.env.NODE_ENV !== 'production') {\n-      slotNodes._rendered && warn(\n-        `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n-        `- this will likely cause render errors.`,\n-        this\n-      )\n-      slotNodes._rendered = true\n+    if (props) { // scoped slot\n+      const scopedSlotFn = this.$scopedSlots[name]\n+      return scopedSlotFn\n+        ? scopedSlotFn(props) || fallback\n+        : fallback\n+    } else { // static slot\n+      const slotNodes = this.$slots[name]\n+      // warn duplicate slot usage\n+      if (slotNodes && process.env.NODE_ENV !== 'production') {\n+        slotNodes._rendered && warn(\n+          `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n+          `- this will likely cause render errors.`,\n+          this\n+        )\n+        slotNodes._rendered = true\n+      }\n+      return slotNodes || fallback\n     }\n-    return slotNodes || fallback\n   }\n \n   // apply v-bind object"
            },
            {
                "commitId": "2dc2d062b1af826add087d832a3f68806e2ef2b1",
                "additions": 21,
                "deletions": 0,
                "patch": "@@ -262,6 +262,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    checkBuild(component)\n     warned = Object.create(null)\n     const context = {\n       activeInstance: component,\n@@ -276,3 +277,23 @@ export function createRenderFunction (\n     renderNode(component._render(), true, context)\n   }\n }\n+\n+function checkBuild (component) {\n+  let Vue = component.constructor\n+  while (Vue.super) {\n+    Vue = Vue.super\n+  }\n+  if (Vue.compile) {\n+    console.error(\n+      red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n+      `server-side rendering. It is recommended to use the CommonJS build ` +\n+      `(vue/dist/vue.common.js) instead so that the code can run in ` +\n+      `production mode by setting NODE_ENV=production. The server renderer ` +\n+      `supports the template option regardless of what build you are using.\\n`)\n+    )\n+  }\n+}\n+\n+function red (str) {\n+  return '\\u001B[1m\\u001B[31m' + str + '\\u001B[39m\\u001B[22m'\n+}"
            },
            {
                "commitId": "8bf26536d3b4b5d139070e1730fed7f9df59c9db",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -26,7 +26,7 @@ export function initRender (vm: Component) {\n \n export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype.$nextTick = function (fn: Function) {\n-    nextTick(fn, this)\n+    return nextTick(fn, this)\n   }\n \n   Vue.prototype._render = function (): VNode {"
            },
            {
                "commitId": "9a742cb423690acb29990bd38f5c17f7b21f12f8",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -201,6 +201,7 @@ export function renderMixin (Vue: Class<Component>) {\n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n     data: any,\n+    tag: string,\n     value: any,\n     asProp?: boolean\n   ): VNodeData {\n@@ -218,7 +219,7 @@ export function renderMixin (Vue: Class<Component>) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n           } else {\n-            const hash = asProp || config.mustUseProp(key)\n+            const hash = asProp || config.mustUseProp(tag, key)\n               ? data.domProps || (data.domProps = {})\n               : data.attrs || (data.attrs = {})\n             hash[key] = value[key]"
            },
            {
                "commitId": "6e3e989a90e8685c2cf0c029fa9c657354762b04",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -65,7 +65,7 @@ export function renderMixin (Vue: Class<Component>) {\n         if (config._isServer) {\n           throw e\n         } else {\n-          setTimeout(() => { throw e }, 0)\n+          console.error(e)\n         }\n       }\n       // return previous vnode to prevent render error causing blank component"
            },
            {
                "commitId": "240df147f11824db5811d23c8704225aa586b96b",
                "additions": 11,
                "deletions": 0,
                "patch": "@@ -150,9 +150,20 @@ function renderElement (el, isRoot, context) {\n   }\n }\n \n+function hasAncestorData (node: VNode) {\n+  const parentNode = node.parent\n+  return parentNode && (parentNode.data || hasAncestorData(parentNode))\n+}\n+\n function renderStartingTag (node: VNode, context) {\n   let markup = `<${node.tag}`\n   const { directives, modules } = context\n+\n+  // construct synthetic data for module processing\n+  // because modules like style also produce code by parent VNode data\n+  if (!node.data && hasAncestorData(node)) {\n+    node.data = {}\n+  }\n   if (node.data) {\n     // check directives\n     const dirs = node.data.directives"
            },
            {
                "commitId": "ec824be88e9bc71b31e5c4a43f80d921674dca66",
                "additions": 24,
                "deletions": 6,
                "patch": "@@ -115,18 +115,36 @@ export function renderMixin (Vue: Class<Component>) {\n     }\n     // otherwise, render a fresh tree.\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n+    markStatic(tree, `__static__${index}`, false)\n+    return tree\n+  }\n+\n+  // mark node as static (v-once)\n+  Vue.prototype._o = function markOnce (\n+    tree: VNode | Array<VNode>,\n+    index: number,\n+    key: string\n+  ) {\n+    markStatic(tree, `__once__${index}${key ? `_${key}` : ``}`, true)\n+    return tree\n+  }\n+\n+  function markStatic (tree, key, isOnce) {\n     if (Array.isArray(tree)) {\n       for (let i = 0; i < tree.length; i++) {\n-        if (typeof tree[i] !== 'string') {\n-          tree[i].isStatic = true\n-          tree[i].key = `__static__${index}_${i}`\n+        if (tree[i] && typeof tree[i] !== 'string') {\n+          markStaticNode(tree[i], `${key}_${i}`, isOnce)\n         }\n       }\n     } else {\n-      tree.isStatic = true\n-      tree.key = `__static__${index}`\n+      markStaticNode(tree, key, isOnce)\n     }\n-    return tree\n+  }\n+\n+  function markStaticNode (node, key, isOnce) {\n+    node.isStatic = true\n+    node.key = key\n+    node.isOnce = isOnce\n   }\n \n   // filter resolution helper"
            },
            {
                "commitId": "2ac581bb7f34b1ef0f35c3e6945acd630a92453e",
                "additions": 186,
                "deletions": 155,
                "patch": "@@ -3,6 +3,7 @@\n import { escape } from 'he'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n+import { noop } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -43,194 +44,224 @@ const normalizeRender = vm => {\n   }\n }\n \n-export function createRenderFunction (\n-  modules: Array<Function>,\n-  directives: Object,\n-  isUnaryTag: Function,\n-  cache: any\n-) {\n-  if (cache && (!cache.get || !cache.set)) {\n-    throw new Error('renderer cache must implement at least get & set.')\n+function renderNode (node, isRoot, context) {\n+  const { write, next } = context\n+  if (node.componentOptions) {\n+    // check cache hit\n+    const Ctor = node.componentOptions.Ctor\n+    const getKey = Ctor.options.serverCacheKey\n+    const name = Ctor.options.name\n+    const cache = context.cache\n+    if (getKey && cache && name) {\n+      const key = name + '::' + getKey(node.componentOptions.propsData)\n+      const { has, get } = context\n+      if (has) {\n+        has(key, hit => {\n+          if (hit && get) {\n+            get(key, res => write(res, next))\n+          } else {\n+            renderComponentWithCache(node, isRoot, key, context)\n+          }\n+        })\n+      } else if (get) {\n+        get(key, res => {\n+          if (res) {\n+            write(res, next)\n+          } else {\n+            renderComponentWithCache(node, isRoot, key, context)\n+          }\n+        })\n+      }\n+    } else {\n+      if (getKey && !cache) {\n+        warnOnce(\n+          `[vue-server-renderer] Component ${\n+            Ctor.options.name || '(anonymous)'\n+          } implemented serverCacheKey, ` +\n+          'but no cache was provided to the renderer.'\n+        )\n+      }\n+      if (getKey && !name) {\n+        warnOnce(\n+          `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+          `must also define a unique \"name\" option.`\n+        )\n+      }\n+      renderComponent(node, isRoot, context)\n+    }\n+  } else {\n+    if (node.tag) {\n+      renderElement(node, isRoot, context)\n+    } else if (node.isComment) {\n+      write(`<!--${node.text}-->`, next)\n+    } else {\n+      write(node.raw ? node.text : escape(String(node.text)), next)\n+    }\n   }\n+}\n \n-  const get = cache && normalizeAsync(cache, 'get')\n-  const has = cache && normalizeAsync(cache, 'has')\n+function renderComponent (node, isRoot, context) {\n+  const prevActive = context.activeInstance\n+  const child = context.activeInstance = createComponentInstanceForVnode(node, context.activeInstance)\n+  normalizeRender(child)\n+  const childNode = child._render()\n+  childNode.parent = node\n+  context.renderStates.push({\n+    type: 'Component',\n+    prevActive\n+  })\n+  renderNode(childNode, isRoot, context)\n+}\n \n-  // used to track and apply scope ids\n-  let activeInstance: any\n+function renderComponentWithCache (node, isRoot, key, context) {\n+  const write = context.write\n+  write.caching = true\n+  const buffer = write.cacheBuffer\n+  const bufferIndex = buffer.push('') - 1\n+  context.renderStates.push({\n+    type: 'ComponentWithCache',\n+    buffer, bufferIndex, key\n+  })\n+  renderComponent(node, isRoot, context)\n+}\n \n-  function renderNode (\n-    node: VNode,\n-    write: Function,\n-    next: Function,\n-    isRoot: boolean\n-  ) {\n-    if (node.componentOptions) {\n-      // check cache hit\n-      const Ctor = node.componentOptions.Ctor\n-      const getKey = Ctor.options.serverCacheKey\n-      const name = Ctor.options.name\n-      if (getKey && cache && name) {\n-        const key = name + '::' + getKey(node.componentOptions.propsData)\n-        if (has) {\n-          has(key, hit => {\n-            if (hit && get) {\n-              get(key, res => write(res, next))\n-            } else {\n-              renderComponentWithCache(node, write, next, isRoot, cache, key)\n-            }\n-          })\n-        } else if (get) {\n-          get(key, res => {\n-            if (res) {\n-              write(res, next)\n-            } else {\n-              renderComponentWithCache(node, write, next, isRoot, cache, key)\n-            }\n-          })\n-        }\n-      } else {\n-        if (getKey && !cache) {\n-          warnOnce(\n-            `[vue-server-renderer] Component ${\n-              Ctor.options.name || '(anonymous)'\n-            } implemented serverCacheKey, ` +\n-            'but no cache was provided to the renderer.'\n-          )\n-        }\n-        if (getKey && !name) {\n-          warnOnce(\n-            `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n-            `must also define a unique \"name\" option.`\n-          )\n+function renderElement (el, isRoot, context) {\n+  if (isRoot) {\n+    if (!el.data) el.data = {}\n+    if (!el.data.attrs) el.data.attrs = {}\n+    el.data.attrs['server-rendered'] = 'true'\n+  }\n+  const startTag = renderStartingTag(el, context)\n+  const endTag = `</${el.tag}>`\n+  const { write, next } = context\n+  if (context.isUnaryTag(el.tag)) {\n+    write(startTag, next)\n+  } else if (!el.children || !el.children.length) {\n+    write(startTag + endTag, next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag, children\n+    })\n+    write(startTag, next)\n+  }\n+}\n+\n+function renderStartingTag (node: VNode, context) {\n+  let markup = `<${node.tag}`\n+  const { directives, modules } = context\n+  if (node.data) {\n+    // check directives\n+    const dirs = node.data.directives\n+    if (dirs) {\n+      for (let i = 0; i < dirs.length; i++) {\n+        const dirRenderer = directives[dirs[i].name]\n+        if (dirRenderer) {\n+          // directives mutate the node's data\n+          // which then gets rendered by modules\n+          dirRenderer(node, dirs[i])\n         }\n-        renderComponent(node, write, next, isRoot)\n       }\n-    } else {\n-      if (node.tag) {\n-        renderElement(node, write, next, isRoot)\n-      } else if (node.isComment) {\n-        write(`<!--${node.text}-->`, next)\n-      } else {\n-        write(node.raw ? node.text : escape(String(node.text)), next)\n+    }\n+    // apply other modules\n+    for (let i = 0; i < modules.length; i++) {\n+      const res = modules[i](node)\n+      if (res) {\n+        markup += res\n       }\n     }\n   }\n-\n-  function renderComponent (node, write, next, isRoot) {\n-    const prevActive = activeInstance\n-    const child = activeInstance = createComponentInstanceForVnode(node, activeInstance)\n-    normalizeRender(child)\n-    const childNode = child._render()\n-    childNode.parent = node\n-    renderNode(childNode, write, () => {\n-      activeInstance = prevActive\n-      next()\n-    }, isRoot)\n+  // attach scoped CSS ID\n+  let scopeId\n+  const activeInstance = context.activeInstance\n+  if (activeInstance &&\n+      activeInstance !== node.context &&\n+      (scopeId = activeInstance.$options._scopeId)) {\n+    markup += ` ${scopeId}`\n   }\n+  while (node) {\n+    if ((scopeId = node.context.$options._scopeId)) {\n+      markup += ` ${scopeId}`\n+    }\n+    node = node.parent\n+  }\n+  return markup + '>'\n+}\n \n-  function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n-    write.caching = true\n-    const buffer = write.cacheBuffer\n-    const bufferIndex = buffer.push('') - 1\n-    renderComponent(node, write, () => {\n+const nextFactory = context => function next () {\n+  const lastState = context.renderStates.pop()\n+  if (!lastState) {\n+    context.done()\n+    // cleanup context, avoid leakage\n+    context = (null: any)\n+    return\n+  }\n+  switch (lastState.type) {\n+    case 'Component':\n+      context.activeInstance = lastState.prevActive\n+      next()\n+      break\n+    case 'Element':\n+      const { children, total } = lastState\n+      const rendered = lastState.rendered++\n+      if (rendered < total) {\n+        context.renderStates.push(lastState)\n+        renderNode(children[rendered], false, context)\n+      } else {\n+        context.write(lastState.endTag, next)\n+      }\n+      break\n+    case 'ComponentWithCache':\n+      const { buffer, bufferIndex, key } = lastState\n       const result = buffer[bufferIndex]\n-      cache.set(key, result)\n+      context.cache.set(key, result)\n       if (bufferIndex === 0) {\n         // this is a top-level cached component,\n         // exit caching mode.\n-        write.caching = false\n+        context.write.caching = false\n       } else {\n         // parent component is also being cached,\n         // merge self into parent's result\n         buffer[bufferIndex - 1] += result\n       }\n       buffer.length = bufferIndex\n       next()\n-    }, isRoot)\n+      break\n   }\n+}\n \n-  function renderElement (el, write, next, isRoot) {\n-    if (isRoot) {\n-      if (!el.data) el.data = {}\n-      if (!el.data.attrs) el.data.attrs = {}\n-      el.data.attrs['server-rendered'] = 'true'\n-    }\n-    const startTag = renderStartingTag(el)\n-    const endTag = `</${el.tag}>`\n-    if (isUnaryTag(el.tag)) {\n-      write(startTag, next)\n-    } else if (!el.children || !el.children.length) {\n-      write(startTag + endTag, next)\n-    } else {\n-      const children: Array<VNode> = el.children || []\n-      write(startTag, () => {\n-        const total = children.length\n-        let rendered = 0\n-\n-        function renderChild (child: VNode) {\n-          renderNode(child, write, () => {\n-            rendered++\n-            if (rendered < total) {\n-              renderChild(children[rendered])\n-            } else {\n-              write(endTag, next)\n-            }\n-          }, false)\n-        }\n-\n-        renderChild(children[0])\n-      })\n-    }\n+export function createRenderFunction (\n+  modules: Array<Function>,\n+  directives: Object,\n+  isUnaryTag: Function,\n+  cache: any\n+) {\n+  if (cache && (!cache.get || !cache.set)) {\n+    throw new Error('renderer cache must implement at least get & set.')\n   }\n \n-  function renderStartingTag (node: VNode) {\n-    let markup = `<${node.tag}`\n-    if (node.data) {\n-      // check directives\n-      const dirs = node.data.directives\n-      if (dirs) {\n-        for (let i = 0; i < dirs.length; i++) {\n-          const dirRenderer = directives[dirs[i].name]\n-          if (dirRenderer) {\n-            // directives mutate the node's data\n-            // which then gets rendered by modules\n-            dirRenderer(node, dirs[i])\n-          }\n-        }\n-      }\n-      // apply other modules\n-      for (let i = 0; i < modules.length; i++) {\n-        const res = modules[i](node)\n-        if (res) {\n-          markup += res\n-        }\n-      }\n-    }\n-    // attach scoped CSS ID\n-    let scopeId\n-    if (activeInstance &&\n-        activeInstance !== node.context &&\n-        (scopeId = activeInstance.$options._scopeId)) {\n-      markup += ` ${scopeId}`\n-    }\n-    while (node) {\n-      if ((scopeId = node.context.$options._scopeId)) {\n-        markup += ` ${scopeId}`\n-      }\n-      node = node.parent\n-    }\n-    return markup + '>'\n-  }\n+  const get = cache && normalizeAsync(cache, 'get')\n+  const has = cache && normalizeAsync(cache, 'has')\n \n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n     warned = Object.create(null)\n-    activeInstance = component\n+    const context = {\n+      activeInstance: component,\n+      renderStates: [],\n+      next: noop, // for flow\n+      write, done,\n+      isUnaryTag, modules, directives,\n+      cache, get, has\n+    }\n+    context.next = nextFactory(context)\n     normalizeRender(component)\n-    renderNode(component._render(), write, done, true)\n+    renderNode(component._render(), true, context)\n   }\n }"
            },
            {
                "commitId": "d362d64633f00f8cbf1613c424d8852fb45c7596",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import { encodeHTML } from 'entities'\n+import { escape } from 'he'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n@@ -112,7 +112,7 @@ export function createRenderFunction (\n       } else if (node.isComment) {\n         write(`<!--${node.text}-->`, next)\n       } else {\n-        write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n+        write(node.raw ? node.text : escape(String(node.text)), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "e774ce2353e28c813728f508a5a83d8236f5e36e",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -2,7 +2,7 @@\n \n import config from '../config'\n import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n-import { normalizeChildren } from '../vdom/helpers'\n+import { normalizeChildren } from '../vdom/helpers/index'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf"
            },
            {
                "commitId": "3446d1485d36b91ef42c53268cb69ecb047538a5",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -232,7 +232,7 @@ export function resolveSlots (\n     child = children[i]\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n-    if (child.context === context &&\n+    if ((child.context === context || child.functionalContext === context) &&\n         child.data && (name = child.data.slot)) {\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {"
            },
            {
                "commitId": "c835ce57ff4e0ba3617a189bb2736599f1ffb471",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -117,8 +117,10 @@ export function renderMixin (Vue: Class<Component>) {\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n     if (Array.isArray(tree)) {\n       for (let i = 0; i < tree.length; i++) {\n-        tree[i].isStatic = true\n-        tree[i].key = `__static__${index}_${i}`\n+        if (typeof tree[i] !== 'string') {\n+          tree[i].isStatic = true\n+          tree[i].key = `__static__${index}_${i}`\n+        }\n       }\n     } else {\n       tree.isStatic = true"
            },
            {
                "commitId": "99ea0f8229f108baa54f8791758315e2eda4f779",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -14,7 +14,8 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm.$slots = resolveSlots(vm.$options._renderChildren)\n+  vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n+  vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -215,7 +216,8 @@ export function renderMixin (Vue: Class<Component>) {\n }\n \n export function resolveSlots (\n-  renderChildren: ?VNodeChildren\n+  renderChildren: ?VNodeChildren,\n+  context: ?Component\n ): { [key: string]: Array<VNode> } {\n   const slots = {}\n   if (!renderChildren) {\n@@ -226,8 +228,10 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    if (child.data && (name = child.data.slot)) {\n-      delete child.data.slot\n+    // named slots should only be respected if the vnode was rendered in the\n+    // same context.\n+    if (child.context === context &&\n+        child.data && (name = child.data.slot)) {\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {\n         slot.push.apply(slot, child.children)"
            },
            {
                "commitId": "56960b5fbcf82d2160a7c9645ebddecc258bc0ec",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -5,7 +5,7 @@ import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n-  nextTick, resolveAsset, _toString, toNumber\n+  nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n } from '../util/index'\n \n import { createElement } from '../vdom/create-element'\n@@ -94,6 +94,10 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._n = toNumber\n   // empty vnode\n   Vue.prototype._e = emptyVNode\n+  // loose equal\n+  Vue.prototype._q = looseEqual\n+  // loose indexOf\n+  Vue.prototype._i = looseIndexOf\n \n   // render static tree by index\n   Vue.prototype._m = function renderStatic ("
            },
            {
                "commitId": "d6a7568891d0c3368471322de5d730172d92b9e4",
                "additions": 4,
                "deletions": 3,
                "patch": "@@ -175,9 +175,10 @@ export function renderMixin (Vue: Class<Component>) {\n \n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n-    vnode: VNodeWithData,\n+    data: any,\n     value: any,\n-    asProp?: boolean) {\n+    asProp?: boolean\n+  ): VNodeData {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -188,7 +189,6 @@ export function renderMixin (Vue: Class<Component>) {\n         if (Array.isArray(value)) {\n           value = toObject(value)\n         }\n-        const data: any = vnode.data\n         for (const key in value) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n@@ -201,6 +201,7 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n       }\n     }\n+    return data\n   }\n \n   // expose v-on keyCodes"
            },
            {
                "commitId": "673dec6040bcfc510866761b38439b9d34dd91f7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -164,7 +164,7 @@ export function renderMixin (Vue: Class<Component>) {\n     // warn duplicate slot usage\n     if (slotNodes && process.env.NODE_ENV !== 'production') {\n       slotNodes._rendered && warn(\n-        `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+        `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n         `- this will likely cause render errors.`,\n         this\n       )"
            },
            {
                "commitId": "179ec92019dd098487c720ba8d1667bbedb9c380",
                "additions": 6,
                "deletions": 6,
                "patch": "@@ -36,11 +36,11 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (vm._isMounted) {    \n-      // clone slot nodes on re-renders   \n-      for (const key in vm.$slots) {    \n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])    \n-      }   \n+    if (vm._isMounted) {\n+      // clone slot nodes on re-renders\n+      for (const key in vm.$slots) {\n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+      }\n     }\n \n     if (staticRenderFns && !vm._staticTrees) {\n@@ -160,7 +160,7 @@ export function renderMixin (Vue: Class<Component>) {\n     name: string,\n     fallback: ?Array<VNode>\n   ): ?Array<VNode> {\n-    let slotNodes = this.$slots[name]\n+    const slotNodes = this.$slots[name]\n     // warn duplicate slot usage\n     if (slotNodes && process.env.NODE_ENV !== 'production') {\n       slotNodes._rendered && warn("
            },
            {
                "commitId": "100a2969aa5c64bd71758c79881cf4531e9907be",
                "additions": 15,
                "deletions": 14,
                "patch": "@@ -36,6 +36,13 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n+    if (vm._isMounted) {    \n+      // clone slot nodes on re-renders   \n+      for (const key in vm.$slots) {    \n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])    \n+      }   \n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -154,20 +161,14 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>\n   ): ?Array<VNode> {\n     let slotNodes = this.$slots[name]\n-    if (slotNodes) {\n-      // warn duplicate slot usage\n-      if (process.env.NODE_ENV !== 'production') {\n-        slotNodes._rendered && warn(\n-          `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n-          `- this will likely cause render errors.`,\n-          this\n-        )\n-        slotNodes._rendered = true\n-      }\n-      // clone slot nodes on re-renders\n-      if (this._isMounted) {\n-        slotNodes = cloneVNodes(slotNodes)\n-      }\n+    // warn duplicate slot usage\n+    if (slotNodes && process.env.NODE_ENV !== 'production') {\n+      slotNodes._rendered && warn(\n+        `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+        `- this will likely cause render errors.`,\n+        this\n+      )\n+      slotNodes._rendered = true\n     }\n     return slotNodes || fallback\n   }"
            },
            {
                "commitId": "4afccc8eece43956f6f84189923a60d9a5a45e36",
                "additions": 24,
                "deletions": 7,
                "patch": "@@ -36,13 +36,6 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (vm._isMounted) {\n-      // clone slot nodes on re-renders\n-      for (const key in vm.$slots) {\n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n-      }\n-    }\n-\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -155,6 +148,30 @@ export function renderMixin (Vue: Class<Component>) {\n     return ret\n   }\n \n+  // renderSlot\n+  Vue.prototype._t = function (\n+    name: string,\n+    fallback: ?Array<VNode>\n+  ): ?Array<VNode> {\n+    let slotNodes = this.$slots[name]\n+    if (slotNodes) {\n+      // warn duplicate slot usage\n+      if (process.env.NODE_ENV !== 'production') {\n+        slotNodes._rendered && warn(\n+          `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+          `- this will likely cause render errors.`,\n+          this\n+        )\n+        slotNodes._rendered = true\n+      }\n+      // clone slot nodes on re-renders\n+      if (this._isMounted) {\n+        slotNodes = cloneVNodes(slotNodes)\n+      }\n+    }\n+    return slotNodes || fallback\n+  }\n+\n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n     vnode: VNodeWithData,"
            },
            {
                "commitId": "f6b1a51729f705bc49c6eaaf32ec095efd97401c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -102,7 +102,7 @@ export function renderMixin (Vue: Class<Component>) {\n   ): VNode | Array<VNode> {\n     let tree = this._staticTrees[index]\n     // if has already-rendered static tree and not inside v-for,\n-    // we can reuse the same tree by indentity.\n+    // we can reuse the same tree by doing a shallow clone.\n     if (tree && !isInFor) {\n       return Array.isArray(tree)\n         ? cloneVNodes(tree)"
            },
            {
                "commitId": "982913fb1e06916a782b2789916f0038c9dfd98b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -74,13 +74,13 @@ export function createRenderFunction (\n         const key = name + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n           has(key, hit => {\n-            if (hit) {\n+            if (hit && get) {\n               get(key, res => write(res, next))\n             } else {\n               renderComponentWithCache(node, write, next, isRoot, cache, key)\n             }\n           })\n-        } else {\n+        } else if (get) {\n           get(key, res => {\n             if (res) {\n               write(res, next)"
            },
            {
                "commitId": "4d640ce4d9fd638bcd0e4a61a8bb346458046ced",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -92,6 +92,8 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n+  // empty vnode\n+  Vue.prototype._e = emptyVNode\n \n   // render static tree by index\n   Vue.prototype._m = function renderStatic (\n@@ -216,7 +218,7 @@ export function resolveSlots (\n   // ignore single whitespace\n   if (defaultSlot.length && !(\n     defaultSlot.length === 1 &&\n-    defaultSlot[0].text === ' '\n+    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n   )) {\n     slots.default = defaultSlot\n   }"
            },
            {
                "commitId": "014d2f8599f9afc0754e603b1528a12e74bd209a",
                "additions": 12,
                "deletions": 3,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { emptyVNode } from '../vdom/vnode'\n+import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n@@ -36,6 +36,13 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n+    if (vm._isMounted) {\n+      // clone slot nodes on re-renders\n+      for (const key in vm.$slots) {\n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+      }\n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -90,12 +97,14 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._m = function renderStatic (\n     index: number,\n     isInFor?: boolean\n-  ): VNode | VNodeChildren {\n+  ): VNode | Array<VNode> {\n     let tree = this._staticTrees[index]\n     // if has already-rendered static tree and not inside v-for,\n     // we can reuse the same tree by indentity.\n     if (tree && !isInFor) {\n-      return tree\n+      return Array.isArray(tree)\n+        ? cloneVNodes(tree)\n+        : cloneVNode(tree)\n     }\n     // otherwise, render a fresh tree.\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)"
            },
            {
                "commitId": "0e75fb93df9fd83391959989836c120f2662adab",
                "additions": 20,
                "deletions": 4,
                "patch": "@@ -4,6 +4,14 @@ import { encodeHTML } from 'entities'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+let warned = Object.create(null)\n+const warnOnce = msg => {\n+  if (!warned[msg]) {\n+    warned[msg] = true\n+    console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n+  }\n+}\n+\n const normalizeAsync = (cache, method) => {\n   const fn = cache[method]\n   if (!fn) {\n@@ -61,8 +69,9 @@ export function createRenderFunction (\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n       const getKey = Ctor.options.serverCacheKey\n-      if (getKey && cache) {\n-        const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+      const name = Ctor.options.name\n+      if (getKey && cache && name) {\n+        const key = name + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n           has(key, hit => {\n             if (hit) {\n@@ -81,14 +90,20 @@ export function createRenderFunction (\n           })\n         }\n       } else {\n-        if (getKey) {\n-          console.error(\n+        if (getKey && !cache) {\n+          warnOnce(\n             `[vue-server-renderer] Component ${\n               Ctor.options.name || '(anonymous)'\n             } implemented serverCacheKey, ` +\n             'but no cache was provided to the renderer.'\n           )\n         }\n+        if (getKey && !name) {\n+          warnOnce(\n+            `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+            `must also define a unique \"name\" option.`\n+          )\n+        }\n         renderComponent(node, write, next, isRoot)\n       }\n     } else {\n@@ -213,6 +228,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    warned = Object.create(null)\n     activeInstance = component\n     normalizeRender(component)\n     renderNode(component._render(), write, done, true)"
            },
            {
                "commitId": "7c3db415a7e4e006f529b27123280ec7c2ae75d0",
                "additions": 14,
                "deletions": 6,
                "patch": "@@ -18,12 +18,20 @@ const normalizeAsync = (cache, method) => {\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n-  if (!render && template) {\n-    const renderFns = (\n-      compilationCache[template] ||\n-      (compilationCache[template] = compileToFunctions(template))\n-    )\n-    Object.assign(vm.$options, renderFns)\n+  if (!render) {\n+    if (template) {\n+      const renderFns = (\n+        compilationCache[template] ||\n+        (compilationCache[template] = compileToFunctions(template))\n+      )\n+      Object.assign(vm.$options, renderFns)\n+    } else {\n+      throw new Error(\n+        `render function or template not defined in component: ${\n+          vm.$options.name || vm.$options._componentTag || 'anonymous'\n+        }`\n+      )\n+    }\n   }\n }\n "
            },
            {
                "commitId": "18386c4cf4fe829f447687734a5bf03905d0db44",
                "additions": 18,
                "deletions": 5,
                "patch": "@@ -87,13 +87,26 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._n = toNumber\n \n   // render static tree by index\n-  Vue.prototype._m = function renderStatic (index?: number): Object | void {\n+  Vue.prototype._m = function renderStatic (\n+    index: number,\n+    isInFor?: boolean\n+  ): VNode | VNodeChildren {\n     let tree = this._staticTrees[index]\n-    if (!tree) {\n-      tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n-        this._renderProxy\n-      )\n+    // if has already-rendered static tree and not inside v-for,\n+    // we can reuse the same tree by indentity.\n+    if (tree && !isInFor) {\n+      return tree\n+    }\n+    // otherwise, render a fresh tree.\n+    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n+    if (Array.isArray(tree)) {\n+      for (let i = 0; i < tree.length; i++) {\n+        tree[i].isStatic = true\n+        tree[i].key = `__static__${index}_${i}`\n+      }\n+    } else {\n       tree.isStatic = true\n+      tree.key = `__static__${index}`\n     }\n     return tree\n   }"
            },
            {
                "commitId": "21908b7267a9ff6b425b8261f9a38a2a0df2b72d",
                "additions": 4,
                "deletions": 6,
                "patch": "@@ -14,7 +14,7 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm.$slots = {}\n+  vm.$slots = resolveSlots(vm.$options._renderChildren)\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -33,7 +33,6 @@ export function renderMixin (Vue: Class<Component>) {\n     const {\n       render,\n       staticRenderFns,\n-      _renderChildren,\n       _parentVnode\n     } = vm.$options\n \n@@ -43,9 +42,6 @@ export function renderMixin (Vue: Class<Component>) {\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n     vm.$vnode = _parentVnode\n-    // resolve slots. becaues slots are rendered in parent scope,\n-    // we set the activeInstance to parent.\n-    vm.$slots = resolveSlots(_renderChildren)\n     // render self\n     let vnode\n     try {\n@@ -171,7 +167,9 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-export function resolveSlots (renderChildren: ?VNodeChildren): Object {\n+export function resolveSlots (\n+  renderChildren: ?VNodeChildren\n+): { [key: string]: Array<VNode> } {\n   const slots = {}\n   if (!renderChildren) {\n     return slots"
            },
            {
                "commitId": "fe801b16e4da63513bce95bfa762a8a36d83fe59",
                "additions": 6,
                "deletions": 5,
                "patch": "@@ -95,14 +95,15 @@ export function createRenderFunction (\n   }\n \n   function renderComponent (node, write, next, isRoot) {\n-    const child = createComponentInstanceForVnode(node)\n+    const prevActive = activeInstance\n+    const child = activeInstance = createComponentInstanceForVnode(node, activeInstance)\n     normalizeRender(child)\n     const childNode = child._render()\n     childNode.parent = node\n-    const prevActive = activeInstance\n-    activeInstance = child\n-    renderNode(childNode, write, next, isRoot)\n-    activeInstance = prevActive\n+    renderNode(childNode, write, () => {\n+      activeInstance = prevActive\n+      next()\n+    }, isRoot)\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {"
            },
            {
                "commitId": "b5b963f51df1fa3124cd8a9846be5455408bc52a",
                "additions": 10,
                "deletions": 1,
                "patch": "@@ -40,6 +40,9 @@ export function createRenderFunction (\n   const get = cache && normalizeAsync(cache, 'get')\n   const has = cache && normalizeAsync(cache, 'has')\n \n+  // used to track and apply scope ids\n+  let activeInstance: any\n+\n   function renderNode (\n     node: VNode,\n     write: Function,\n@@ -96,7 +99,10 @@ export function createRenderFunction (\n     normalizeRender(child)\n     const childNode = child._render()\n     childNode.parent = node\n+    const prevActive = activeInstance\n+    activeInstance = child\n     renderNode(childNode, write, next, isRoot)\n+    activeInstance = prevActive\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n@@ -179,7 +185,9 @@ export function createRenderFunction (\n     }\n     // attach scoped CSS ID\n     let scopeId\n-    if (node.host && (scopeId = node.host.$options._scopeId)) {\n+    if (activeInstance &&\n+        activeInstance !== node.context &&\n+        (scopeId = activeInstance.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n     while (node) {\n@@ -196,6 +204,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    activeInstance = component\n     normalizeRender(component)\n     renderNode(component._render(), write, done, true)\n   }"
            },
            {
                "commitId": "c66b7566c682af653dc475fab1475db5484e40ee",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -163,7 +163,7 @@ export function renderMixin (Vue: Class<Component>) {\n         if (Array.isArray(value)) {\n           value = toObject(value)\n         }\n-        const data = vnode.data\n+        const data: any = vnode.data\n         for (const key in value) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]"
            },
            {
                "commitId": "59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -165,10 +165,14 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n         const data = vnode.data\n         for (const key in value) {\n-          const hash = asProp || config.mustUseProp(key)\n-            ? data.domProps || (data.domProps = {})\n-            : data.attrs || (data.attrs = {})\n-          hash[key] = value[key]\n+          if (key === 'class' || key === 'style') {\n+            data[key] = value[key]\n+          } else {\n+            const hash = asProp || config.mustUseProp(key)\n+              ? data.domProps || (data.domProps = {})\n+              : data.attrs || (data.attrs = {})\n+            hash[key] = value[key]\n+          }\n         }\n       }\n     }"
            },
            {
                "commitId": "351aef3cb4ada980f105f98f8b835876e8d4d689",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -83,6 +83,8 @@ export function createRenderFunction (\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n+      } else if (node.isComment) {\n+        write(`<!--${node.text}-->`, next)\n       } else {\n         write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n       }"
            },
            {
                "commitId": "74f8b98509d24487e1a8d1588b4128a7a1046a41",
                "additions": 7,
                "deletions": 4,
                "patch": "@@ -103,13 +103,16 @@ export function renderMixin (Vue: Class<Component>) {\n   // number conversion\n   Vue.prototype._n = toNumber\n \n-  //\n+  // render static tree by index\n   Vue.prototype._m = function renderStatic (index?: number): Object | void {\n-    return this._staticTrees[index] || (\n-      this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n+    let tree = this._staticTrees[index]\n+    if (!tree) {\n+      tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n         this._renderProxy\n       )\n-    )\n+      tree.isStatic = true\n+    }\n+    return tree\n   }\n \n   // filter resolution helper"
            },
            {
                "commitId": "65d4ae9d0f0f3c6b72c4c606d8066a2abca74db2",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -84,7 +84,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.raw ? node.text : encodeHTML(node.text), next)\n+        write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "0f5bcdfac81e5428d2029f86ecb6bb77aef82335",
                "additions": 1,
                "deletions": 3,
                "patch": "@@ -177,9 +177,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-export function resolveSlots (\n-  renderChildren?: Array<any> | () => Array<any> | string\n-): Object {\n+export function resolveSlots (renderChildren: any): Object {\n   const slots = {}\n   if (!renderChildren) {\n     return slots"
            },
            {
                "commitId": "23a22cbb44f8a6796e2489a101b6de4f997f4340",
                "additions": 9,
                "deletions": 8,
                "patch": "@@ -56,9 +56,7 @@ export function renderMixin (Vue: Class<Component>) {\n     vm.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n-    if (_renderChildren) {\n-      resolveSlots(vm, _renderChildren)\n-    }\n+    vm.$slots = resolveSlots(_renderChildren)\n     // render self\n     let vnode\n     try {\n@@ -179,11 +177,13 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-function resolveSlots (\n-  vm: Component,\n-  renderChildren: Array<any> | () => Array<any> | string\n-) {\n-  const slots = vm.$slots = {}\n+export function resolveSlots (\n+  renderChildren?: Array<any> | () => Array<any> | string\n+): Object {\n+  const slots = {}\n+  if (!renderChildren) {\n+    return slots\n+  }\n   const children = normalizeChildren(renderChildren) || []\n   const defaultSlot = []\n   let name, child\n@@ -208,4 +208,5 @@ function resolveSlots (\n   )) {\n     slots.default = defaultSlot\n   }\n+  return slots\n }"
            },
            {
                "commitId": "154e17abaed2f9c2d80507c28a474adea72337e6",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -148,7 +148,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // apply v-bind object\n-  Vue.prototype._b = function bindProps (vnode: VNodeWithData, value: any) {\n+  Vue.prototype._b = function bindProps (\n+    vnode: VNodeWithData,\n+    value: any,\n+    asProp?: boolean) {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -161,7 +164,7 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n         const data = vnode.data\n         for (const key in value) {\n-          const hash = config.mustUseProp(key)\n+          const hash = asProp || config.mustUseProp(key)\n             ? data.domProps || (data.domProps = {})\n             : data.attrs || (data.attrs = {})\n           hash[key] = value[key]"
            },
            {
                "commitId": "69ecdcb05e3f5db32af889962fe8253d49d7390d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -162,7 +162,7 @@ export function renderMixin (Vue: Class<Component>) {\n         const data = vnode.data\n         for (const key in value) {\n           const hash = config.mustUseProp(key)\n-            ? data.props || (data.props = {})\n+            ? data.domProps || (data.domProps = {})\n             : data.attrs || (data.attrs = {})\n           hash[key] = value[key]\n         }"
            },
            {
                "commitId": "2732fec59ed592c187b499b2ba5872d2242339cc",
                "additions": 24,
                "deletions": 5,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, isObject, toObject,\n+  warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n@@ -48,19 +48,38 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (staticRenderFns && !this._staticTrees) {\n-      this._staticTrees = []\n+    if (staticRenderFns && !vm._staticTrees) {\n+      vm._staticTrees = []\n     }\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n-    this.$vnode = _parentVnode\n+    vm.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    let vnode = render.call(vm._renderProxy, vm.$createElement)\n+    let vnode\n+    try {\n+      vnode = render.call(vm._renderProxy, vm.$createElement)\n+    } catch (e) {\n+      if (process.env.NODE_ENV !== 'production') {\n+        warn(`Error when rendering ${formatComponentName(vm)}:`)\n+      }\n+      /* istanbul ignore else */\n+      if (config.errorHandler) {\n+        config.errorHandler.call(null, e, vm)\n+      } else {\n+        if (config._isServer) {\n+          throw e\n+        } else {\n+          setTimeout(() => { throw e }, 0)\n+        }\n+      }\n+      // return previous vnode to prevent render error causing blank component\n+      vnode = vm._vnode\n+    }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "d0482a0faeeb79c250fc17e06de6c777e74bc618",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -167,7 +167,8 @@ function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    if ((name = child.data && child.data.slot)) {\n+    if (child.data && (name = child.data.slot)) {\n+      delete child.data.slot\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {\n         slot.push.apply(slot, child.children)"
            },
            {
                "commitId": "75a221e95fa797a7472ac8a25f97a8248a605737",
                "additions": 19,
                "deletions": 21,
                "patch": "@@ -162,29 +162,27 @@ function resolveSlots (\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n   const slots = vm.$slots = {}\n-  if (renderChildren) {\n-    const children = normalizeChildren(renderChildren) || []\n-    const defaultSlot = []\n-    let name, child\n-    for (let i = 0, l = children.length; i < l; i++) {\n-      child = children[i]\n-      if ((name = child.data && child.data.slot)) {\n-        const slot = (slots[name] || (slots[name] = []))\n-        if (child.tag === 'template') {\n-          slot.push.apply(slot, child.children)\n-        } else {\n-          slot.push(child)\n-        }\n+  const children = normalizeChildren(renderChildren) || []\n+  const defaultSlot = []\n+  let name, child\n+  for (let i = 0, l = children.length; i < l; i++) {\n+    child = children[i]\n+    if ((name = child.data && child.data.slot)) {\n+      const slot = (slots[name] || (slots[name] = []))\n+      if (child.tag === 'template') {\n+        slot.push.apply(slot, child.children)\n       } else {\n-        defaultSlot.push(child)\n+        slot.push(child)\n       }\n+    } else {\n+      defaultSlot.push(child)\n     }\n-    // ignore single whitespace\n-    if (defaultSlot.length && !(\n-      defaultSlot.length === 1 &&\n-      defaultSlot[0].text === ' '\n-    )) {\n-      slots.default = defaultSlot\n-    }\n+  }\n+  // ignore single whitespace\n+  if (defaultSlot.length && !(\n+    defaultSlot.length === 1 &&\n+    defaultSlot[0].text === ' '\n+  )) {\n+    slots.default = defaultSlot\n   }\n }"
            },
            {
                "commitId": "1a064a6dc94c9dd183963ebd00a6e25680786b96",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -161,9 +161,9 @@ function resolveSlots (\n   vm: Component,\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n+  const slots = vm.$slots = {}\n   if (renderChildren) {\n     const children = normalizeChildren(renderChildren) || []\n-    const slots = {}\n     const defaultSlot = []\n     let name, child\n     for (let i = 0, l = children.length; i < l; i++) {\n@@ -179,12 +179,12 @@ function resolveSlots (\n         defaultSlot.push(child)\n       }\n     }\n+    // ignore single whitespace\n     if (defaultSlot.length && !(\n       defaultSlot.length === 1 &&\n       defaultSlot[0].text === ' '\n     )) {\n-      slots['default'] = defaultSlot\n+      slots.default = defaultSlot\n     }\n-    vm.$slots = slots\n   }\n }"
            },
            {
                "commitId": "7630622689587b947c3ba03678a8f1d1e24ac71f",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -17,7 +17,8 @@ export const renderState: {\n }\n \n export function initRender (vm: Component) {\n-  vm._vnode = null\n+  vm.$vnode = null // the placeholder node in parent tree\n+  vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n@@ -50,7 +51,9 @@ export function renderMixin (Vue: Class<Component>) {\n     if (staticRenderFns && !this._staticTrees) {\n       this._staticTrees = []\n     }\n-\n+    // set parent vnode. this allows render functions to have access\n+    // to the data on the placeholder node.\n+    this.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {"
            },
            {
                "commitId": "5c6c8c7ed0b72461f1ed2e673c8f04cba300aaff",
                "additions": 19,
                "deletions": 3,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n import { encodeHTML } from 'entities'\n+import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const normalizeAsync = (cache, method) => {\n@@ -14,6 +15,18 @@ const normalizeAsync = (cache, method) => {\n   }\n }\n \n+const compilationCache = Object.create(null)\n+const normalizeRender = vm => {\n+  const { render, template } = vm.$options\n+  if (!render && template) {\n+    const renderFns = (\n+      compilationCache[template] ||\n+      (compilationCache[template] = compileToFunctions(template))\n+    )\n+    Object.assign(vm.$options, renderFns)\n+  }\n+}\n+\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n@@ -77,9 +90,11 @@ export function createRenderFunction (\n   }\n \n   function renderComponent (node, write, next, isRoot) {\n-    const child = createComponentInstanceForVnode(node)._render()\n-    child.parent = node\n-    renderNode(child, write, next, isRoot)\n+    const child = createComponentInstanceForVnode(node)\n+    normalizeRender(child)\n+    const childNode = child._render()\n+    childNode.parent = node\n+    renderNode(childNode, write, next, isRoot)\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n@@ -179,6 +194,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    normalizeRender(component)\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "e17f2ba20cdc44fabe9a6ca2baa6881debc1a992",
                "additions": 1,
                "deletions": 4,
                "patch": "@@ -1,11 +1,8 @@\n /* @flow */\n \n-import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-const encodeHTMLCached = cached(encodeHTML)\n-\n const normalizeAsync = (cache, method) => {\n   const fn = cache[method]\n   if (!fn) {\n@@ -74,7 +71,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.raw ? node.text : encodeHTMLCached(node.text), next)\n+        write(node.raw ? node.text : encodeHTML(node.text), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "bf9c46f435bad7fb8872febc03f577ee622e4df6",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -39,7 +39,7 @@ export function createRenderFunction (\n     if (node.componentOptions) {\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n-      const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+      const getKey = Ctor.options.serverCacheKey\n       if (getKey && cache) {\n         const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n@@ -62,7 +62,9 @@ export function createRenderFunction (\n       } else {\n         if (getKey) {\n           console.error(\n-            'Component implemented server.getCacheKey, ' +\n+            `[vue-server-renderer] Component ${\n+              Ctor.options.name || '(anonymous)'\n+            } implemented serverCacheKey, ` +\n             'but no cache was provided to the renderer.'\n           )\n         }"
            },
            {
                "commitId": "ba3bec824d9d12e7508291f788645c4b613b9fbe",
                "additions": 67,
                "deletions": 34,
                "patch": "@@ -2,21 +2,33 @@\n \n import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n-import LRU from 'lru-cache'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const encodeHTMLCached = cached(encodeHTML)\n-const defaultOptions = {\n-  max: 5000\n+\n+const normalizeAsync = (cache, method) => {\n+  const fn = cache[method]\n+  if (!fn) {\n+    return\n+  } else if (fn.length > 1) {\n+    return (key, cb) => fn.call(cache, key, cb)\n+  } else {\n+    return (key, cb) => cb(fn.call(cache, key))\n+  }\n }\n \n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n   isUnaryTag: Function,\n-  cacheOptions: Object\n+  cache: any\n ) {\n-  const cache = LRU(Object.assign({}, defaultOptions, cacheOptions))\n+  if (cache && (!cache.get || !cache.set)) {\n+    throw new Error('renderer cache must implement at least get & set.')\n+  }\n+\n+  const get = cache && normalizeAsync(cache, 'get')\n+  const has = cache && normalizeAsync(cache, 'has')\n \n   function renderNode (\n     node: VNode,\n@@ -28,35 +40,34 @@ export function createRenderFunction (\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n       const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n-      if (getKey) {\n+      if (getKey && cache) {\n         const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n-        if (cache.has(key)) {\n-          return write(cache.get(key), next)\n+        if (has) {\n+          has(key, hit => {\n+            if (hit) {\n+              get(key, res => write(res, next))\n+            } else {\n+              renderComponentWithCache(node, write, next, isRoot, cache, key)\n+            }\n+          })\n         } else {\n-          write.caching = true\n-          const buffer = write.cacheBuffer\n-          const bufferIndex = buffer.push('') - 1\n-          const _next = next\n-          next = () => {\n-            const result = buffer[bufferIndex]\n-            cache.set(key, result)\n-            if (bufferIndex === 0) {\n-              // this is a top-level cached component,\n-              // exit caching mode.\n-              write.caching = false\n+          get(key, res => {\n+            if (res) {\n+              write(res, next)\n             } else {\n-              // parent component is also being cached,\n-              // merge self into parent's result\n-              buffer[bufferIndex - 1] += result\n+              renderComponentWithCache(node, write, next, isRoot, cache, key)\n             }\n-            buffer.length = bufferIndex\n-            _next()\n-          }\n+          })\n         }\n+      } else {\n+        if (getKey) {\n+          console.error(\n+            'Component implemented server.getCacheKey, ' +\n+            'but no cache was provided to the renderer.'\n+          )\n+        }\n+        renderComponent(node, write, next, isRoot)\n       }\n-      const child = createComponentInstanceForVnode(node)._render()\n-      child.parent = node\n-      renderNode(child, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -66,12 +77,34 @@ export function createRenderFunction (\n     }\n   }\n \n-  function renderElement (\n-    el: VNode,\n-    write: Function,\n-    next: Function,\n-    isRoot: boolean\n-  ) {\n+  function renderComponent (node, write, next, isRoot) {\n+    const child = createComponentInstanceForVnode(node)._render()\n+    child.parent = node\n+    renderNode(child, write, next, isRoot)\n+  }\n+\n+  function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n+    write.caching = true\n+    const buffer = write.cacheBuffer\n+    const bufferIndex = buffer.push('') - 1\n+    renderComponent(node, write, () => {\n+      const result = buffer[bufferIndex]\n+      cache.set(key, result)\n+      if (bufferIndex === 0) {\n+        // this is a top-level cached component,\n+        // exit caching mode.\n+        write.caching = false\n+      } else {\n+        // parent component is also being cached,\n+        // merge self into parent's result\n+        buffer[bufferIndex - 1] += result\n+      }\n+      buffer.length = bufferIndex\n+      next()\n+    }, isRoot)\n+  }\n+\n+  function renderElement (el, write, next, isRoot) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}"
            },
            {
                "commitId": "1b3b19491fd47f3634e30d7fcce991881de16530",
                "additions": 19,
                "deletions": 21,
                "patch": "@@ -8,11 +8,7 @@ import {\n   nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n-import {\n-  renderElement,\n-  renderElementWithChildren,\n-  renderStatic\n-} from '../vdom/create-element'\n+import { createElement } from '../vdom/create-element'\n \n export const renderState: {\n   activeInstance: ?Component\n@@ -26,14 +22,7 @@ export function initRender (vm: Component) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(function (\n-    tag?: string | Class<Component> | Function | Object,\n-    data?: VNodeData,\n-    children?: VNodeChildren,\n-    namespace?: string\n-  ) {\n-    return this._h(this._e(tag, data, namespace), children)\n-  }, vm)\n+  vm.$createElement = bind(createElement, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -88,22 +77,29 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype._h = renderElementWithChildren\n-  Vue.prototype._e = renderElement\n-  Vue.prototype._m = renderStatic\n+  Vue.prototype._h = createElement\n   // toString for mustaches\n   Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n \n+  //\n+  Vue.prototype._m = function renderStatic (index?: number): Object | void {\n+    return this._staticTrees[index] || (\n+      this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n+        this._renderProxy\n+      )\n+    )\n+  }\n+\n   // filter resolution helper\n   const identity = _ => _\n-  Vue.prototype._f = function (id) {\n+  Vue.prototype._f = function resolveFilter (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }\n \n   // render v-for\n-  Vue.prototype._l = function (\n+  Vue.prototype._l = function renderList (\n     val: any,\n     render: () => VNode\n   ): ?Array<VNode> {\n@@ -130,7 +126,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // apply v-bind object\n-  Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n+  Vue.prototype._b = function bindProps (vnode: VNodeWithData, value: any) {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -153,15 +149,17 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // expose v-on keyCodes\n-  Vue.prototype._k = key => config.keyCodes[key]\n+  Vue.prototype._k = function getKeyCodes (key: string): any {\n+    return config.keyCodes[key]\n+  }\n }\n \n function resolveSlots (\n   vm: Component,\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n   if (renderChildren) {\n-    const children = normalizeChildren(renderChildren)\n+    const children = normalizeChildren(renderChildren) || []\n     const slots = {}\n     const defaultSlot = []\n     let name, child"
            },
            {
                "commitId": "cf8aeddc122dc13870ac07eff1574b2c172feb18",
                "additions": 2,
                "deletions": 5,
                "patch": "@@ -5,13 +5,12 @@ import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, bind, isObject, toObject,\n-  nextTick, resolveAsset, renderString, toNumber\n+  nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n import {\n   renderElement,\n   renderElementWithChildren,\n-  renderText,\n   renderStatic\n } from '../vdom/create-element'\n \n@@ -91,11 +90,9 @@ export function renderMixin (Vue: Class<Component>) {\n   // shorthands used in render functions\n   Vue.prototype._h = renderElementWithChildren\n   Vue.prototype._e = renderElement\n-  Vue.prototype._t = renderText\n   Vue.prototype._m = renderStatic\n-\n   // toString for mustaches\n-  Vue.prototype._s = renderString\n+  Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n "
            },
            {
                "commitId": "51db34103a8f76dc314578d202af0465177d30f8",
                "additions": 16,
                "deletions": 8,
                "patch": "@@ -33,16 +33,24 @@ export function createRenderFunction (\n         if (cache.has(key)) {\n           return write(cache.get(key), next)\n         } else {\n-          if (!write.caching) {\n-            // initialize if not already caching\n-            write.caching = true\n-            const _next = next\n-            next = () => {\n-              cache.set(key, write.buffer)\n+          write.caching = true\n+          const buffer = write.cacheBuffer\n+          const bufferIndex = buffer.push('') - 1\n+          const _next = next\n+          next = () => {\n+            const result = buffer[bufferIndex]\n+            cache.set(key, result)\n+            if (bufferIndex === 0) {\n+              // this is a top-level cached component,\n+              // exit caching mode.\n               write.caching = false\n-              write.buffer = ''\n-              _next()\n+            } else {\n+              // parent component is also being cached,\n+              // merge self into parent's result\n+              buffer[bufferIndex - 1] += result\n             }\n+            buffer.length = bufferIndex\n+            _next()\n           }\n         }\n       }"
            },
            {
                "commitId": "651263bb78bb4de3d0c9bfeda767a5290f6018c8",
                "additions": 26,
                "deletions": 26,
                "patch": "@@ -25,9 +25,28 @@ export function createRenderFunction (\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child =\n-        getCachedComponent(node) ||\n-        createComponentInstanceForVnode(node)._render()\n+      // check cache hit\n+      const Ctor = node.componentOptions.Ctor\n+      const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+      if (getKey) {\n+        const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+        if (cache.has(key)) {\n+          return write(cache.get(key), next)\n+        } else {\n+          if (!write.caching) {\n+            // initialize if not already caching\n+            write.caching = true\n+            const _next = next\n+            next = () => {\n+              cache.set(key, write.buffer)\n+              write.caching = false\n+              write.buffer = ''\n+              _next()\n+            }\n+          }\n+        }\n+      }\n+      const child = createComponentInstanceForVnode(node)._render()\n       child.parent = node\n       renderNode(child, write, next, isRoot)\n     } else {\n@@ -39,21 +58,6 @@ export function createRenderFunction (\n     }\n   }\n \n-  function getCachedComponent (node) {\n-    const Ctor = node.componentOptions.Ctor\n-    const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n-    if (getKey) {\n-      const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n-      if (cache.has(key)) {\n-        return cache.get(key)\n-      } else {\n-        const res = createComponentInstanceForVnode(node)._render()\n-        cache.set(key, res)\n-        return res\n-      }\n-    }\n-  }\n-\n   function renderElement (\n     el: VNode,\n     write: Function,\n@@ -94,9 +98,6 @@ export function createRenderFunction (\n   }\n \n   function renderStartingTag (node: VNode) {\n-    if (node._rendered) {\n-      return node._rendered\n-    }\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -124,14 +125,13 @@ export function createRenderFunction (\n     if (node.host && (scopeId = node.host.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n-    let _node = node\n-    while (_node) {\n-      if ((scopeId = _node.context.$options._scopeId)) {\n+    while (node) {\n+      if ((scopeId = node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n-      _node = _node.parent\n+      node = node.parent\n     }\n-    return (node._rendered = markup + '>')\n+    return markup + '>'\n   }\n \n   return function render ("
            },
            {
                "commitId": "c902e1f9ab91b3a8048f1a576396abdeeea41d20",
                "additions": 34,
                "deletions": 6,
                "patch": "@@ -2,23 +2,32 @@\n \n import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n+import LRU from 'lru-cache'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const encodeHTMLCached = cached(encodeHTML)\n+const defaultOptions = {\n+  max: 5000\n+}\n \n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n-  isUnaryTag: Function\n+  isUnaryTag: Function,\n+  cacheOptions: Object\n ) {\n+  const cache = LRU(Object.assign({}, defaultOptions, cacheOptions))\n+\n   function renderNode (\n     node: VNode,\n     write: Function,\n     next: Function,\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child = createComponentInstanceForVnode(node)._render()\n+      const child =\n+        getCachedComponent(node) ||\n+        createComponentInstanceForVnode(node)._render()\n       child.parent = node\n       renderNode(child, write, next, isRoot)\n     } else {\n@@ -30,6 +39,21 @@ export function createRenderFunction (\n     }\n   }\n \n+  function getCachedComponent (node) {\n+    const Ctor = node.componentOptions.Ctor\n+    const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+    if (getKey) {\n+      const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+      if (cache.has(key)) {\n+        return cache.get(key)\n+      } else {\n+        const res = createComponentInstanceForVnode(node)._render()\n+        cache.set(key, res)\n+        return res\n+      }\n+    }\n+  }\n+\n   function renderElement (\n     el: VNode,\n     write: Function,\n@@ -70,6 +94,9 @@ export function createRenderFunction (\n   }\n \n   function renderStartingTag (node: VNode) {\n+    if (node._rendered) {\n+      return node._rendered\n+    }\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -97,13 +124,14 @@ export function createRenderFunction (\n     if (node.host && (scopeId = node.host.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n-    while (node) {\n-      if ((scopeId = node.context.$options._scopeId)) {\n+    let _node = node\n+    while (_node) {\n+      if ((scopeId = _node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n-      node = node.parent\n+      _node = _node.parent\n     }\n-    return markup + '>'\n+    return (node._rendered = markup + '>')\n   }\n \n   return function render ("
            },
            {
                "commitId": "3fe127b05a0e12b5d05d4ddd0d2e5f85f223d475",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -5,7 +5,7 @@ import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, bind, isObject, toObject,\n-  nextTick, resolveAsset, renderString\n+  nextTick, resolveAsset, renderString, toNumber\n } from '../util/index'\n \n import {\n@@ -96,6 +96,8 @@ export function renderMixin (Vue: Class<Component>) {\n \n   // toString for mustaches\n   Vue.prototype._s = renderString\n+  // number conversion\n+  Vue.prototype._n = toNumber\n \n   // filter resolution helper\n   const identity = _ => _"
            },
            {
                "commitId": "f0efa9aad2f33c45ea8dfc5098cef86900b9ef98",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -154,7 +154,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // expose v-on keyCodes\n-  Vue.prototype._keyCode = key => config.keyCodes[key]\n+  Vue.prototype._k = key => config.keyCodes[key]\n }\n \n function resolveSlots ("
            },
            {
                "commitId": "4fe51a75a94464075055b45550a05e4680bb2b9f",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -152,6 +152,9 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n   }\n+\n+  // expose v-on keyCodes\n+  Vue.prototype._keyCode = key => config.keyCodes[key]\n }\n \n function resolveSlots ("
            },
            {
                "commitId": "41e46476a50c4fe08bd1de6423e84eef26e2b8f1",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -69,7 +69,7 @@ export function renderMixin (Vue: Class<Component>) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    let vnode = render.call(vm._renderProxy)\n+    let vnode = render.call(vm._renderProxy, vm.$createElement)\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -93,9 +93,12 @@ export function createRenderFunction (\n       }\n     }\n     // attach scoped CSS ID\n+    let scopeId\n+    if (node.host && (scopeId = node.host.$options._scopeId)) {\n+      markup += ` ${scopeId}`\n+    }\n     while (node) {\n-      const scopeId = node.context.$options._scopeId\n-      if (scopeId) {\n+      if ((scopeId = node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n       node = node.parent"
            },
            {
                "commitId": "b1351be073eda59724b3ede02753379fdc7d6829",
                "additions": 11,
                "deletions": 2,
                "patch": "@@ -18,8 +18,9 @@ export function createRenderFunction (\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child = createComponentInstanceForVnode(node)\n-      renderNode(child._render(), write, next, isRoot)\n+      const child = createComponentInstanceForVnode(node)._render()\n+      child.parent = node\n+      renderNode(child, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -91,6 +92,14 @@ export function createRenderFunction (\n         }\n       }\n     }\n+    // attach scoped CSS ID\n+    while (node) {\n+      const scopeId = node.context.$options._scopeId\n+      if (scopeId) {\n+        markup += ` ${scopeId}`\n+      }\n+      node = node.parent\n+    }\n     return markup + '>'\n   }\n "
            },
            {
                "commitId": "b0ad94fc876826a8ee3226320aacd40b8967f8dd",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,7 +1,11 @@\n /* @flow */\n \n+import { cached } from 'shared/util'\n+import { encodeHTML } from 'entities'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+const encodeHTMLCached = cached(encodeHTML)\n+\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n@@ -20,7 +24,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.text, next)\n+        write(node.raw ? node.text : encodeHTMLCached(node.text), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "cec833a9e8d71a9ed5deaecdccaceb1168641a2e",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -112,19 +112,19 @@ export function renderMixin (Vue: Class<Component>) {\n     if (Array.isArray(val)) {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n-        ret[i] = render(val[i], i, i)\n+        ret[i] = render(val[i], i)\n       }\n     } else if (typeof val === 'number') {\n       ret = new Array(val)\n       for (i = 0; i < val; i++) {\n-        ret[i] = render(i + 1, i, i)\n+        ret[i] = render(i + 1, i)\n       }\n     } else if (isObject(val)) {\n       keys = Object.keys(val)\n       ret = new Array(keys.length)\n       for (i = 0, l = keys.length; i < l; i++) {\n         key = keys[i]\n-        ret[i] = render(val[key], i, key)\n+        ret[i] = render(val[key], key, i)\n       }\n     }\n     return ret"
            },
            {
                "commitId": "894d214e9367be653bf22429085906682fcd874a",
                "additions": 16,
                "deletions": 10,
                "patch": "@@ -47,13 +47,22 @@ export function renderMixin (Vue: Class<Component>) {\n \n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n+\n+    // set current active instance\n     const prev = renderState.activeInstance\n     renderState.activeInstance = vm\n-    if (!vm._isMounted) {\n+\n+    const {\n+      render,\n+      staticRenderFns,\n+      _renderChildren,\n+      _parentVnode\n+    } = vm.$options\n+\n+    if (staticRenderFns && !vm._staticTrees) {\n       // render static sub-trees for once on initial render\n-      renderStaticTrees(vm)\n+      renderStaticTrees(vm, staticRenderFns)\n     }\n-    const { render, _renderChildren, _parentVnode } = vm.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n@@ -145,13 +154,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-function renderStaticTrees (vm: Component) {\n-  const staticRenderFns = vm.$options.staticRenderFns\n-  if (staticRenderFns) {\n-    const trees = vm._staticTrees = new Array(staticRenderFns.length)\n-    for (let i = 0; i < staticRenderFns.length; i++) {\n-      trees[i] = staticRenderFns[i].call(vm._renderProxy)\n-    }\n+function renderStaticTrees (vm: Component, fns: Array<Function>) {\n+  const trees = vm._staticTrees = new Array(fns.length)\n+  for (let i = 0; i < fns.length; i++) {\n+    trees[i] = fns[i].call(vm._renderProxy)\n   }\n }\n "
            },
            {
                "commitId": "a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -70,7 +70,7 @@ export function renderMixin (Vue: Class<Component>) {\n           vm\n         )\n       }\n-      vnode = emptyVNode\n+      vnode = emptyVNode()\n     }\n     // set parent\n     vnode.parent = _parentVnode"
            },
            {
                "commitId": "026198caf1545bf0f82831f19e1f18f1212e84d2",
                "additions": 1,
                "deletions": 15,
                "patch": "@@ -35,20 +35,6 @@ export function initRender (vm: Component) {\n   ) {\n     return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n-  // for abstract components, determine first non-abstract parent\n-  // so that the children of abstract components are considered children\n-  // of the first non-abstract parent.\n-  // this is used by internal abstract components like <keep-alive>.\n-  if (vm.$options._abstract) {\n-    let parent = vm.$parent\n-    /* istanbul ignore next */\n-    while (parent && parent.$options._abstract) {\n-      parent = parent.$parent\n-    }\n-    vm._renderParent = parent\n-  } else {\n-    vm._renderParent = vm\n-  }\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -62,7 +48,7 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n     const prev = renderState.activeInstance\n-    renderState.activeInstance = vm._renderParent\n+    renderState.activeInstance = vm\n     if (!vm._isMounted) {\n       // render static sub-trees for once on initial render\n       renderStaticTrees(vm)"
            },
            {
                "commitId": "2091c8525f5e0dca47c9672323f91449832688b7",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -41,6 +41,7 @@ export function initRender (vm: Component) {\n   // this is used by internal abstract components like <keep-alive>.\n   if (vm.$options._abstract) {\n     let parent = vm.$parent\n+    /* istanbul ignore next */\n     while (parent && parent.$options._abstract) {\n       parent = parent.$parent\n     }"
            },
            {
                "commitId": "cb67ffe4429ebfbdf42b5d18e1e1b168109d472e",
                "additions": 15,
                "deletions": 2,
                "patch": "@@ -16,7 +16,7 @@ import {\n } from '../vdom/create-element'\n \n export const renderState: {\n-  activeInstance: Component | null\n+  activeInstance: ?Component\n } = {\n   activeInstance: null\n }\n@@ -35,6 +35,19 @@ export function initRender (vm: Component) {\n   ) {\n     return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n+  // for abstract components, determine first non-abstract parent\n+  // so that the children of abstract components are considered children\n+  // of the first non-abstract parent.\n+  // this is used by internal abstract components like <keep-alive>.\n+  if (vm.$options._abstract) {\n+    let parent = vm.$parent\n+    while (parent && parent.$options._abstract) {\n+      parent = parent.$parent\n+    }\n+    vm._renderParent = parent\n+  } else {\n+    vm._renderParent = vm\n+  }\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -48,7 +61,7 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n     const prev = renderState.activeInstance\n-    renderState.activeInstance = vm\n+    renderState.activeInstance = vm._renderParent\n     if (!vm._isMounted) {\n       // render static sub-trees for once on initial render\n       renderStaticTrees(vm)"
            },
            {
                "commitId": "113232f960c359bdbe56fac59b6f9e3b7cc9290a",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -66,7 +66,8 @@ export function renderMixin (Vue: Class<Component>) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n         warn(\n           'Multiple root nodes returned from render function. Render function ' +\n-          'should return a single root node.'\n+          'should return a single root node.',\n+          vm\n         )\n       }\n       vnode = emptyVNode"
            },
            {
                "commitId": "060fab9ec1d7df09312fb301f092b6790cf1cd46",
                "additions": 1,
                "deletions": 29,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, remove, isObject, toObject,\n+  warn, bind, isObject, toObject,\n   nextTick, resolveAsset, renderString\n } from '../util/index'\n \n@@ -120,34 +120,6 @@ export function renderMixin (Vue: Class<Component>) {\n     return ret\n   }\n \n-  // register ref\n-  Vue.prototype._r = function (\n-    key: string,\n-    ref: Vue | Element,\n-    vFor: boolean,\n-    isRemoval: boolean\n-  ) {\n-    const vm: Component = this\n-    const refs = vm.$refs\n-    if (isRemoval) {\n-      if (Array.isArray(refs[key])) {\n-        remove(refs[key], ref)\n-      } else {\n-        refs[key] = undefined\n-      }\n-    } else {\n-      if (vFor) {\n-        if (Array.isArray(refs[key])) {\n-          refs[key].push(ref)\n-        } else {\n-          refs[key] = [ref]\n-        }\n-      } else {\n-        refs[key] = ref\n-      }\n-    }\n-  }\n-\n   // apply v-bind object\n   Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n     if (value) {"
            },
            {
                "commitId": "43da334ec164a83aafcaa475e10611dbf0d941db",
                "additions": 6,
                "deletions": 0,
                "patch": "@@ -63,6 +63,12 @@ export function renderMixin (Vue: Class<Component>) {\n     let vnode = render.call(vm._renderProxy)\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n+      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n+        warn(\n+          'Multiple root nodes returned from render function. Render function ' +\n+          'should return a single root node.'\n+        )\n+      }\n       vnode = emptyVNode\n     }\n     // set parent"
            },
            {
                "commitId": "3a0557a317d6e8fd96bf543e7b71d39e4e7c257b",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -184,9 +184,8 @@ function resolveSlots (\n     const children = normalizeChildren(renderChildren)\n     const slots = {}\n     const defaultSlot = []\n-    let i = children.length\n     let name, child\n-    while (i--) {\n+    for (let i = 0, l = children.length; i < l; i++) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n         const slot = (slots[name] || (slots[name] = []))"
            },
            {
                "commitId": "cb915d012074e79b9f81a758ed0253ba4d98ebc4",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, remove, extend, isObject, toObject,\n+  warn, bind, remove, isObject, toObject,\n   nextTick, resolveAsset, renderString\n } from '../util/index'\n "
            },
            {
                "commitId": "8d229b2442e8cc5b2801fa55a4ea8ea766721381",
                "additions": 28,
                "deletions": 2,
                "patch": "@@ -1,9 +1,12 @@\n /* @flow */\n \n+import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n-import { resolveAsset, nextTick } from '../util/index'\n-import { bind, remove, extend, isObject, renderString } from 'shared/util'\n+import {\n+  warn, bind, remove, extend, isObject, toObject,\n+  nextTick, resolveAsset, renderString\n+} from '../util/index'\n \n import {\n   renderElement,\n@@ -138,6 +141,29 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n   }\n+\n+  // apply v-bind object\n+  Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n+    if (value) {\n+      if (!isObject(value)) {\n+        process.env.NODE_ENV !== 'production' && warn(\n+          'v-bind without argument expects an Object or Array value',\n+          this\n+        )\n+      } else {\n+        if (Array.isArray(value)) {\n+          value = toObject(value)\n+        }\n+        const data = vnode.data\n+        for (const key in value) {\n+          const hash = config.mustUseProp(key)\n+            ? data.props || (data.props = {})\n+            : data.attrs || (data.attrs = {})\n+          hash[key] = value[key]\n+        }\n+      }\n+    }\n+  }\n }\n \n function renderStaticTrees (vm: Component) {"
            },
            {
                "commitId": "54e648e49f3ef6e671a23430047c5c40b75809a7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -2,8 +2,8 @@\n \n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n-import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n+import { bind, remove, extend, isObject, renderString } from 'shared/util'\n \n import {\n   renderElement,"
            },
            {
                "commitId": "0a15d9ee27a9314c0192c6174509a230279ed344",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import { emptyVNode } from '../vdom/vnode'\n+import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n@@ -57,7 +57,11 @@ export function renderMixin (Vue: Class<Component>) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(vm._renderProxy) || emptyVNode\n+    let vnode = render.call(vm._renderProxy)\n+    // return empty vnode in case the render function errored out\n+    if (!(vnode instanceof VNode)) {\n+      vnode = emptyVNode\n+    }\n     // set parent\n     vnode.parent = _parentVnode\n     // restore render state"
            },
            {
                "commitId": "6fe268874ca2ea9297ca64830b38f8179d51fce2",
                "additions": 9,
                "deletions": 9,
                "patch": "@@ -30,7 +30,7 @@ export function initRender (vm: Component) {\n     children?: VNodeChildren,\n     namespace?: string\n   ) {\n-    return this.__r__(this.__s__(tag, data, namespace), children)\n+    return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n@@ -66,22 +66,22 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__r__ = renderElementWithChildren\n-  Vue.prototype.__s__ = renderElement\n-  Vue.prototype.__t__ = renderText\n-  Vue.prototype.__m__ = renderStatic\n+  Vue.prototype._h = renderElementWithChildren\n+  Vue.prototype._e = renderElement\n+  Vue.prototype._t = renderText\n+  Vue.prototype._m = renderStatic\n \n   // toString for mustaches\n-  Vue.prototype.__toString__ = renderString\n+  Vue.prototype._s = renderString\n \n   // filter resolution helper\n   const identity = _ => _\n-  Vue.prototype.__resolveFilter__ = function (id) {\n+  Vue.prototype._f = function (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }\n \n   // render v-for\n-  Vue.prototype.__renderList__ = function (\n+  Vue.prototype._l = function (\n     val: any,\n     render: () => VNode\n   ): ?Array<VNode> {\n@@ -108,7 +108,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // register ref\n-  Vue.prototype.__registerRef__ = function (\n+  Vue.prototype._r = function (\n     key: string,\n     ref: Vue | Element,\n     vFor: boolean,"
            },
            {
                "commitId": "2dc5b1782871d87a7c795361eac0d49fd396c05f",
                "additions": 9,
                "deletions": 3,
                "patch": "@@ -1,11 +1,17 @@\n /* @flow */\n \n-import { renderElement, renderSelf, renderText, renderStatic } from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n \n+import {\n+  renderElement,\n+  renderElementWithChildren,\n+  renderText,\n+  renderStatic\n+} from '../vdom/create-element'\n+\n export const renderState: {\n   activeInstance: Component | null\n } = {\n@@ -60,8 +66,8 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__r__ = renderElement\n-  Vue.prototype.__s__ = renderSelf\n+  Vue.prototype.__r__ = renderElementWithChildren\n+  Vue.prototype.__s__ = renderElement\n   Vue.prototype.__t__ = renderText\n   Vue.prototype.__m__ = renderStatic\n "
            },
            {
                "commitId": "20fb79a1ea098bedda6fec8bebbb184ac51fce20",
                "additions": 13,
                "deletions": 3,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import createElement from '../vdom/create-element'\n+import { renderElement, renderSelf, renderText, renderStatic } from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n@@ -18,7 +18,14 @@ export function initRender (vm: Component) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(createElement, vm)\n+  vm.$createElement = bind(function (\n+    tag?: string | Class<Component> | Function | Object,\n+    data?: VNodeData,\n+    children?: VNodeChildren,\n+    namespace?: string\n+  ) {\n+    return this.__r__(this.__s__(tag, data, namespace), children)\n+  }, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -53,7 +60,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__h__ = createElement\n+  Vue.prototype.__r__ = renderElement\n+  Vue.prototype.__s__ = renderSelf\n+  Vue.prototype.__t__ = renderText\n+  Vue.prototype.__m__ = renderStatic\n \n   // toString for mustaches\n   Vue.prototype.__toString__ = renderString"
            },
            {
                "commitId": "ff16f7491f546c5acd40ee2290caa5d553eff3be",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -1,6 +1,5 @@\n /* @flow */\n \n-import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n export function createRenderFunction ("
            },
            {
                "commitId": "45d96c7dbc399696138c9d020e13f97cf94ce181",
                "additions": 17,
                "deletions": 3,
                "patch": "@@ -8,7 +8,12 @@ export function createRenderFunction (\n   directives: Object,\n   isUnaryTag: Function\n ) {\n-  function renderNode (node: VNode, write: Function, next: Function, isRoot: boolean) {\n+  function renderNode (\n+    node: VNode,\n+    write: Function,\n+    next: Function,\n+    isRoot: boolean\n+  ) {\n     if (node.componentOptions) {\n       const child = createComponentInstanceForVnode(node)\n       renderNode(child._render(), write, next, isRoot)\n@@ -21,7 +26,12 @@ export function createRenderFunction (\n     }\n   }\n \n-  function renderElement (el: VNode, write: Function, next: Function, isRoot: boolean) {\n+  function renderElement (\n+    el: VNode,\n+    write: Function,\n+    next: Function,\n+    isRoot: boolean\n+  ) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}\n@@ -81,7 +91,11 @@ export function createRenderFunction (\n     return markup + '>'\n   }\n \n-  return function render (component: Component, write: Function, done: Function) {\n+  return function render (\n+    component: Component,\n+    write: (text: string, next: Function) => void,\n+    done: Function\n+  ) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "1b7ab89a5deb49fbdaec8fb474108863714f99a7",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -1,6 +1,5 @@\n /* @flow */\n \n-import type Vue from 'core/instance/index'\n import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n@@ -82,7 +81,7 @@ export function createRenderFunction (\n     return markup + '>'\n   }\n \n-  return function render (component: Vue, write: Function, done: Function) {\n+  return function render (component: Component, write: Function, done: Function) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "a953bdeeb642fafb0a5426f54f68026d26fe345f",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,7 +5,7 @@ import type VNode from '../vdom/vnode'\n import createElement from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n-import { bind, remove, isArray, isObject, renderString } from 'shared/util'\n+import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n \n export const renderState = {\n@@ -69,7 +69,7 @@ export function renderMixin (Vue: Class<Vue>) {\n     render: () => VNode\n   ): ?Array<VNode> {\n     let ret: ?Array<VNode>, i, l, keys, key\n-    if (isArray(val)) {\n+    if (Array.isArray(val)) {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n         ret[i] = render(val[i], i, i)"
            },
            {
                "commitId": "354ea616b5ec4826e23a88465e404fd3b382d9f4",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -1,5 +1,7 @@\n /* @flow */\n \n+import type Vue from 'core/instance/index'\n+import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n export function createRenderFunction ("
            },
            {
                "commitId": "6d712753d8982d587d1dcfdbce2833f19f0b5a26",
                "additions": 17,
                "deletions": 10,
                "patch": "@@ -1,7 +1,13 @@\n+/* @flow */\n+\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-export function createRenderFunction (modules, directives, isUnaryTag) {\n-  function renderNode (node, write, next, isRoot) {\n+export function createRenderFunction (\n+  modules: Array<Function>,\n+  directives: Object,\n+  isUnaryTag: Function\n+) {\n+  function renderNode (node: VNode, write: Function, next: Function, isRoot: boolean) {\n     if (node.componentOptions) {\n       const child = createComponentInstanceForVnode(node)\n       renderNode(child._render(), write, next, isRoot)\n@@ -14,7 +20,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  function renderElement (el, write, next, isRoot) {\n+  function renderElement (el: VNode, write: Function, next: Function, isRoot: boolean) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}\n@@ -27,27 +33,28 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     } else if (!el.children || !el.children.length) {\n       write(startTag + endTag, next)\n     } else {\n+      const children: Array<VNode> = el.children || []\n       write(startTag, () => {\n-        const total = el.children.length\n+        const total = children.length\n         let rendered = 0\n \n-        function renderChild (child) {\n+        function renderChild (child: VNode) {\n           renderNode(child, write, () => {\n             rendered++\n             if (rendered < total) {\n-              renderChild(el.children[rendered])\n+              renderChild(children[rendered])\n             } else {\n               write(endTag, next)\n             }\n-          })\n+          }, false)\n         }\n \n-        renderChild(el.children[0])\n+        renderChild(children[0])\n       })\n     }\n   }\n \n-  function renderStartingTag (node) {\n+  function renderStartingTag (node: VNode) {\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -73,7 +80,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     return markup + '>'\n   }\n \n-  return function render (component, write, done) {\n+  return function render (component: Vue, write: Function, done: Function) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "76d06ba422e32303f906941fe0d4f19e51b30720",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -1,3 +1,4 @@\n+import config from '../config'\n import createElement from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n@@ -25,6 +26,12 @@ export function renderMixin (Vue) {\n     nextTick(fn, this)\n   }\n \n+  Object.defineProperty(Vue.prototype, '$isServer', {\n+    get () {\n+      return config._isServer\n+    }\n+  })\n+\n   Vue.prototype._render = function () {\n     if (!this._mounted) {\n       // render static sub-trees for once on initial render"
            },
            {
                "commitId": "6593be9f75ea229e71e5b0530bb0f27aeee57afc",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,4 +1,5 @@\n import createElement from '../vdom/create-element'\n+import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n@@ -38,7 +39,7 @@ export function renderMixin (Vue) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(this._renderProxy)\n+    const vnode = render.call(this._renderProxy) || emptyVNode\n     // set parent\n     vnode.parent = _parentVnode\n     // restore render state"
            },
            {
                "commitId": "8172e7e25728a696df32df063443cf3d7cc8029b",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -74,7 +74,6 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n   }\n \n   return function render (component, write, done) {\n-    component._renderStaticTrees()\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "8f5a32b91cca7901c47f27d983649d00eef35609",
                "additions": 4,
                "deletions": 19,
                "patch": "@@ -1,25 +1,10 @@\n+import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n+\n export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n-      const options = {\n-        parent,\n-        propsData,\n-        _parentVnode: node,\n-        _parentListeners: listeners,\n-        _renderChildren: children\n-      }\n-      // check inline-template render functions\n-      const inlineTemplate = node.data.inlineTemplate\n-      if (inlineTemplate) {\n-        options.render = inlineTemplate.render\n-        options.staticRenderFns = inlineTemplate.staticRenderFns\n-      }\n-      const child = new Ctor(options)\n-      child._renderStaticTrees()\n-      const childRoot = child._render()\n-      childRoot.parent = node\n-      renderNode(childRoot, write, next, isRoot)\n+      const child = createComponentInstanceForVnode(node)\n+      renderNode(child._render(), write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)"
            },
            {
                "commitId": "2b7c26d108b31e0cf91f4931fe5b19e77f75bb7e",
                "additions": 31,
                "deletions": 8,
                "patch": "@@ -1,5 +1,3 @@\n-import { renderStartingTag } from './render-starting-tag'\n-\n export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n@@ -18,11 +16,10 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n         options.staticRenderFns = inlineTemplate.staticRenderFns\n       }\n       const child = new Ctor(options)\n-      child._mount = () => {\n-        child._renderStaticTrees()\n-        renderNode(child._render(), write, next)\n-      }\n-      child.$mount(node.elm)\n+      child._renderStaticTrees()\n+      const childRoot = child._render()\n+      childRoot.parent = node\n+      renderNode(childRoot, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -38,7 +35,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n       if (!el.data.attrs) el.data.attrs = {}\n       el.data.attrs['server-rendered'] = 'true'\n     }\n-    const startTag = renderStartingTag(el, modules, directives)\n+    const startTag = renderStartingTag(el)\n     const endTag = `</${el.tag}>`\n     if (isUnaryTag(el.tag)) {\n       write(startTag, next)\n@@ -65,6 +62,32 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     }\n   }\n \n+  function renderStartingTag (node) {\n+    let markup = `<${node.tag}`\n+    if (node.data) {\n+      // check directives\n+      const dirs = node.data.directives\n+      if (dirs) {\n+        for (let i = 0; i < dirs.length; i++) {\n+          const dirRenderer = directives[dirs[i].name]\n+          if (dirRenderer) {\n+            // directives mutate the node's data\n+            // which then gets rendered by modules\n+            dirRenderer(node, dirs[i])\n+          }\n+        }\n+      }\n+      // apply other modules\n+      for (let i = 0; i < modules.length; i++) {\n+        const res = modules[i](node)\n+        if (res) {\n+          markup += res\n+        }\n+      }\n+    }\n+    return markup + '>'\n+  }\n+\n   return function render (component, write, done) {\n     component._renderStaticTrees()\n     renderNode(component._render(), write, done, true)"
            },
            {
                "commitId": "430fe64bb5907cefc21b8f670f86f268f68e5ad8",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,6 +1,6 @@\n import { renderStartingTag } from './render-starting-tag'\n \n-export function render (modules, directives, isUnaryTag) {\n+export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n       const { Ctor, propsData, listeners, parent, children } = node.componentOptions"
            },
            {
                "commitId": "270b0ac021ee5bfff6b2ed1eacaf91a09f2a9d5e",
                "additions": 24,
                "deletions": 13,
                "patch": "@@ -1,16 +1,28 @@\n-import RenderStream from './render-stream'\n import { renderStartingTag } from './render-starting-tag'\n \n-export function createStreamingRenderer (modules, directives, isUnaryTag) {\n-  function renderComponent (component, write, next, isRoot) {\n-    component.$mount()\n-    renderNode(component._vnode, write, next, isRoot)\n-  }\n-\n+export function render (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      node.data.hook.init(node)\n-      renderComponent(node.child, write, next, isRoot)\n+      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n+      const options = {\n+        parent,\n+        propsData,\n+        _parentVnode: node,\n+        _parentListeners: listeners,\n+        _renderChildren: children\n+      }\n+      // check inline-template render functions\n+      const inlineTemplate = node.data.inlineTemplate\n+      if (inlineTemplate) {\n+        options.render = inlineTemplate.render\n+        options.staticRenderFns = inlineTemplate.staticRenderFns\n+      }\n+      const child = new Ctor(options)\n+      child._mount = () => {\n+        child._renderStaticTrees()\n+        renderNode(child._render(), write, next)\n+      }\n+      child.$mount(node.elm)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -53,9 +65,8 @@ export function createStreamingRenderer (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  return function renderToStream (component) {\n-    return new RenderStream((write, done) => {\n-      renderComponent(component, write, done, true)\n-    })\n+  return function render (component, write, done) {\n+    component._renderStaticTrees()\n+    renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "96f02660a2f72cf2b2f4087f51a24942f55af7dd",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,7 +1,7 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n-import { resolveAsset } from '../util/options'\n+import { resolveAsset, nextTick } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -21,6 +21,10 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  Vue.prototype.$nextTick = function (fn) {\n+    nextTick(fn, this)\n+  }\n+\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this"
            },
            {
                "commitId": "d89c674cb53128f21bac25962760fff8bd5917b5",
                "additions": 22,
                "deletions": 8,
                "patch": "@@ -1,15 +1,28 @@\n import { renderStartingTag } from './render-starting-tag'\n \n export function render (modules, directives, isUnaryTag) {\n-  function renderComponent (component, write, next, isRoot) {\n-    component.$mount()\n-    renderNode(component._vnode, write, next, isRoot)\n-  }\n-\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      node.data.hook.init(node)\n-      renderComponent(node.child, write, next, isRoot)\n+      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n+      const options = {\n+        parent,\n+        propsData,\n+        _parentVnode: node,\n+        _parentListeners: listeners,\n+        _renderChildren: children\n+      }\n+      // check inline-template render functions\n+      const inlineTemplate = node.data.inlineTemplate\n+      if (inlineTemplate) {\n+        options.render = inlineTemplate.render\n+        options.staticRenderFns = inlineTemplate.staticRenderFns\n+      }\n+      const child = new Ctor(options)\n+      child._mount = () => {\n+        child._renderStaticTrees()\n+        renderNode(child._render(), write, next)\n+      }\n+      child.$mount(node.elm)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -53,6 +66,7 @@ export function render (modules, directives, isUnaryTag) {\n   }\n \n   return function render (component, write, done) {\n-    renderComponent(component, write, done, true)\n+    component._renderStaticTrees()\n+    renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "a233e4dbfae51173aefc4a1329aa0415d632ca25",
                "additions": 3,
                "deletions": 6,
                "patch": "@@ -1,7 +1,6 @@\n-import RenderStream from './render-stream'\n import { renderStartingTag } from './render-starting-tag'\n \n-export function createStreamingRenderer (modules, directives, isUnaryTag) {\n+export function render (modules, directives, isUnaryTag) {\n   function renderComponent (component, write, next, isRoot) {\n     component.$mount()\n     renderNode(component._vnode, write, next, isRoot)\n@@ -53,9 +52,7 @@ export function createStreamingRenderer (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  return function renderToStream (component) {\n-    return new RenderStream((write, done) => {\n-      renderComponent(component, write, done, true)\n-    })\n+  return function render (component, write, done) {\n+    renderComponent(component, write, done, true)\n   }\n }"
            },
            {
                "commitId": "9cc9393e73750943b9a254f80a02110144ee0288",
                "additions": 10,
                "deletions": 2,
                "patch": "@@ -99,7 +99,8 @@ export function renderMixin (Vue) {\n function resolveSlots (vm, renderChildren) {\n   if (renderChildren) {\n     const children = flatten(renderChildren())\n-    const slots = { default: children }\n+    const slots = {}\n+    const defaultSlot = []\n     let i = children.length\n     let name, child\n     while (i--) {\n@@ -111,9 +112,16 @@ function resolveSlots (vm, renderChildren) {\n         } else {\n           slot.push(child)\n         }\n-        children.splice(i, 1)\n+      } else {\n+        defaultSlot.push(child)\n       }\n     }\n+    if (defaultSlot.length && !(\n+      defaultSlot.length === 1 &&\n+      defaultSlot[0].text === ' '\n+    )) {\n+      slots['default'] = defaultSlot\n+    }\n     vm.$slots = slots\n   }\n }"
            },
            {
                "commitId": "3aa7503472d1a2fbfd789a7df309102de49f8fcf",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -105,7 +105,7 @@ function resolveSlots (vm, renderChildren) {\n     while (i--) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n-        let slot = (slots[name] || (slots[name] = []))\n+        const slot = (slots[name] || (slots[name] = []))\n         if (child.tag === 'template') {\n           slot.push.apply(slot, child.children)\n         } else {"
            },
            {
                "commitId": "9ff87a357eba00e40d44a2d5a25f6ac44fca70b9",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -1,6 +1,7 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n+import { resolveAsset } from '../util/options'\n \n export const renderState = {\n   activeInstance: null\n@@ -42,6 +43,12 @@ export function renderMixin (Vue) {\n   // toString for mustaches\n   Vue.prototype.__toString__ = renderString\n \n+  // filter resolution helper\n+  const identity = _ => _\n+  Vue.prototype.__resolveFilter__ = function (id) {\n+    return resolveAsset(this.$options, 'filters', id, true) || identity\n+  }\n+\n   // render v-for\n   Vue.prototype.__renderList__ = function (val, render) {\n     let ret, i, l, keys, key"
            },
            {
                "commitId": "6d889c011680f231ed5036b9233f23764c43e16a",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -89,9 +89,9 @@ export function renderMixin (Vue) {\n   }\n }\n \n-function resolveSlots (vm, children) {\n-  if (children) {\n-    children = flatten(isArray(children) ? children : children())\n+function resolveSlots (vm, renderChildren) {\n+  if (renderChildren) {\n+    const children = flatten(renderChildren())\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "a347820518388ae8c83cf8c665823daebfbd0da8",
                "additions": 2,
                "deletions": 8,
                "patch": "@@ -1,6 +1,6 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n-import { bind, isArray, isObject } from '../util/index'\n+import { bind, isArray, isObject, renderString } from 'shared/util'\n \n export const renderState = {\n   activeInstance: null\n@@ -40,13 +40,7 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = createElement\n \n   // toString for mustaches\n-  Vue.prototype.__toString__ = function (val) {\n-    return val == null\n-      ? ''\n-      : typeof val === 'object'\n-        ? JSON.stringify(val, null, 2)\n-        : val\n-  }\n+  Vue.prototype.__toString__ = renderString\n \n   // render v-for\n   Vue.prototype.__renderList__ = function (val, render) {"
            },
            {
                "commitId": "f4a2afb3b33991c1694e8fcb7d62641c30eeaf53",
                "additions": 1,
                "deletions": 18,
                "patch": "@@ -1,6 +1,6 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n-import { bind, resolveAsset, isArray, isObject } from '../util/index'\n+import { bind, isArray, isObject } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -39,23 +39,6 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n-  Vue.prototype.__static__ = function (id) {\n-    return this._staticTrees[id]\n-  }\n-\n-  // resolve directive\n-  Vue.prototype.__resolveDirective__ = function (id) {\n-    return resolveAsset(this.$options, 'directives', id, true)\n-  }\n-\n-  // resolve transition\n-  Vue.prototype.__resolveTransition__ = function (id, appear) {\n-    const definition = id && typeof id === 'string'\n-      ? resolveAsset(this.$options, 'transitions', id) || id\n-      : id\n-    return { definition, appear, context: this }\n-  }\n-\n   // toString for mustaches\n   Vue.prototype.__toString__ = function (val) {\n     return val == null"
            },
            {
                "commitId": "d6ce314c35bcc2a05d30ed14f18b21b5b81d928d",
                "additions": 0,
                "deletions": 7,
                "patch": "@@ -1,7 +0,0 @@\n-import attrs from './modules/attrs'\n-import style from './modules/style'\n-import klass from './modules/class'\n-\n-export function render () {\n-\n-}"
            },
            {
                "commitId": "1a21db9c9aef437122de86cb2dbc30c1feff8166",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -0,0 +1,7 @@\n+import attrs from './modules/attrs'\n+import style from './modules/style'\n+import klass from './modules/class'\n+\n+export function render () {\n+\n+}"
            },
            {
                "commitId": "955e2f839175fadbd0218f7b78c48ebbbcca6349",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "b882844f6ed8fb9e7d0ba493fcdd10a95d17b497",
                "additions": 5,
                "deletions": 0,
                "patch": "@@ -9,6 +9,7 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n+  vm._staticTrees = null\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -38,6 +39,10 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n+  Vue.prototype.__static__ = function (id) {\n+    return this._staticTrees[id]\n+  }\n+\n   // resolve directive\n   Vue.prototype.__resolveDirective__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)"
            },
            {
                "commitId": "6c8182ee4d3e60ee46d6fece9a21c7f59ae0e61c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -89,7 +89,7 @@ export function renderMixin (Vue) {\n     const refs = this.$refs\n     if (remove) {\n       if (vFor) {\n-        refs[key].$remove(ref)\n+        remove(refs[key], ref)\n       } else {\n         refs[key] = undefined\n       }"
            },
            {
                "commitId": "732c10a7e9559d26b0a54681d2bd90ddad63da52",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -44,10 +44,11 @@ export function renderMixin (Vue) {\n   }\n \n   // resolve transition\n-  Vue.prototype.__resolveTransition__ = function (id) {\n-    return id && typeof id === 'string'\n+  Vue.prototype.__resolveTransition__ = function (id, appear) {\n+    const definition = id && typeof id === 'string'\n       ? resolveAsset(this.$options, 'transitions', id) || id\n       : id\n+    return { definition, appear, context: this }\n   }\n \n   // toString for mustaches"
            },
            {
                "commitId": "7f7040c156951b392fb6ef75d15be65fd83007a0",
                "additions": 18,
                "deletions": 48,
                "patch": "@@ -1,13 +1,6 @@\n-import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten, updateListeners } from '../vdom/helpers'\n-import {\n-  bind,\n-  resolveAsset,\n-  isArray,\n-  isObject,\n-  validateProp\n-} from '../util/index'\n+import { flatten } from '../vdom/helpers'\n+import { bind, resolveAsset, isArray, isObject } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -26,6 +19,22 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  Vue.prototype._render = function () {\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const { render, _renderChildren } = this.$options\n+    // resolve slots. becaues slots are rendered in parent scope,\n+    // we set the activeInstance to parent.\n+    if (_renderChildren) {\n+      resolveSlots(this, _renderChildren)\n+    }\n+    // render self\n+    const vnode = render.call(this._renderProxy)\n+    // restore render state\n+    renderState.activeInstance = prev\n+    return vnode\n+  }\n+\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n@@ -95,45 +104,6 @@ export function renderMixin (Vue) {\n       }\n     }\n   }\n-\n-  Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, children) {\n-    this.$options._parentVnode = parentVnode\n-    this.$options._renderChildren = children\n-    // update props\n-    if (propsData && this.$options.props) {\n-      observerState.shouldConvert = false\n-      const propKeys = this.$options.propKeys\n-      for (let i = 0; i < propKeys.length; i++) {\n-        let key = propKeys[i]\n-        this[key] = validateProp(this, key, propsData)\n-      }\n-      observerState.shouldConvert = true\n-    }\n-    // update listeners\n-    if (listeners) {\n-      const oldListeners = this.$options._parentListeners\n-      this.$options._parentListeners = listeners\n-      updateListeners(listeners, oldListeners || {}, (event, handler) => {\n-        this.$on(event, handler)\n-      })\n-    }\n-  }\n-\n-  Vue.prototype._render = function () {\n-    const prev = renderState.activeInstance\n-    renderState.activeInstance = this\n-    const { render, _renderChildren } = this.$options\n-    // resolve slots. becaues slots are rendered in parent scope,\n-    // we set the activeInstance to parent.\n-    if (_renderChildren) {\n-      resolveSlots(this, _renderChildren)\n-    }\n-    // render self\n-    const vnode = render.call(this._renderProxy)\n-    // restore render state\n-    renderState.activeInstance = prev\n-    return vnode\n-  }\n }\n \n function resolveSlots (vm, children) {"
            },
            {
                "commitId": "23c253012f8f58848c33445f4f8ea045453029bf",
                "additions": 10,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten } from '../vdom/helpers'\n+import { flatten, updateListeners } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n@@ -96,7 +96,7 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._updateFromParent = function (propsData, parentVnode, children) {\n+  Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, children) {\n     this.$options._parentVnode = parentVnode\n     this.$options._renderChildren = children\n     // update props\n@@ -109,6 +109,14 @@ export function renderMixin (Vue) {\n       }\n       observerState.shouldConvert = true\n     }\n+    // update listeners\n+    if (listeners) {\n+      const oldListeners = this.$options._parentListeners\n+      this.$options._parentListeners = listeners\n+      updateListeners(listeners, oldListeners || {}, (event, handler) => {\n+        this.$on(event, handler)\n+      })\n+    }\n   }\n \n   Vue.prototype._render = function () {"
            },
            {
                "commitId": "1b9343f7e0d3930d85419b97a03998583297c083",
                "additions": 13,
                "deletions": 133,
                "patch": "@@ -1,12 +1,12 @@\n import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten, updateListeners } from '../vdom/helpers'\n+import { flatten } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n   isArray,\n   isObject,\n-  getPropValue\n+  validateProp\n } from '../util/index'\n \n export const renderState = {\n@@ -96,40 +96,32 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._updateFromParent = function (parentData, children, key) {\n-    const oldParentData = this.$options._renderData\n-    this.$options._renderData = parentData\n+  Vue.prototype._updateFromParent = function (propsData, parentVnode, children) {\n+    this.$options._parentVnode = parentVnode\n     this.$options._renderChildren = children\n-    // update props and listeners\n-    if (parentData) {\n-      updateEvents(this, parentData, oldParentData)\n-      // if any prop has changed it would trigger and queue an update,\n-      // but if no props changed, nothing happens\n-      const propsChanged = updateProps(this, parentData)\n-      // diff parent data (attrs on the placeholder) and queue update\n-      // if anything changed. only do this if props didn't change, because\n-      // if props changed then an update has already been queued.\n-      if (!propsChanged && parentDataChanged(parentData, oldParentData)) {\n-        this.$forceUpdate()\n+    // update props\n+    if (propsData && this.$options.props) {\n+      observerState.shouldConvert = false\n+      const propKeys = this.$options.propKeys\n+      for (let i = 0; i < propKeys.length; i++) {\n+        let key = propKeys[i]\n+        this[key] = validateProp(this, key, propsData)\n       }\n+      observerState.shouldConvert = true\n     }\n   }\n \n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const { render, _renderData, _renderChildren } = this.$options\n+    const { render, _renderChildren } = this.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n     const vnode = render.call(this._renderProxy)\n-    // update parent data\n-    if (_renderData) {\n-      mergeParentData(this, vnode.data, _renderData)\n-    }\n     // restore render state\n     renderState.activeInstance = prev\n     return vnode\n@@ -157,115 +149,3 @@ function resolveSlots (vm, children) {\n     vm.$slots = slots\n   }\n }\n-\n-const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives', 'transition']\n-function parentDataChanged (data, oldData) {\n-  let key, old, cur, i, l, j, k\n-  for (i = 0, l = keysToDiff.length; i < l; i++) {\n-    key = keysToDiff[i]\n-    cur = data[key]\n-    old = oldData[key]\n-    if (!old) {\n-      if (!cur) {\n-        continue\n-      } else {\n-        return true\n-      }\n-    }\n-    if (isArray(old)) {\n-      if (!isArray(cur)) return true\n-      if (cur.length !== old.length) return true\n-      for (j = 0, k = old.length; j < k; j++) {\n-        if (isObject(old[i])) {\n-          if (!isObject(cur[i])) return true\n-          if (diffObject(cur, old)) return true\n-        } else if (old[i] !== cur[i]) {\n-          return true\n-        }\n-      }\n-    } else if (diffObject(cur, old)) {\n-      return true\n-    }\n-  }\n-  return false\n-}\n-\n-function diffObject (cur, old) {\n-  for (let key in old) {\n-    if (cur[key] !== old[key]) return true\n-  }\n-}\n-\n-function mergeParentData (vm, data, parentData) {\n-  const props = vm.$options.props\n-  if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = {})\n-    for (let key in parentData.attrs) {\n-      if (!props || !props[key]) {\n-        attrs[key] = parentData.attrs[key]\n-      }\n-    }\n-  }\n-  if (parentData.props) {\n-    const props = data.props || (data.props = {})\n-    for (let key in parentData.props) {\n-      if (!props || !props[key]) {\n-        props[key] = parentData.props[key]\n-      }\n-    }\n-  }\n-  if (parentData.staticClass) {\n-    data.staticClass = data.staticClass\n-      ? data.staticClass + ' ' + parentData.staticClass\n-      : parentData.staticClass\n-  }\n-  if (parentData.class) {\n-    if (!data.class) {\n-      data.class = parentData.class\n-    } else {\n-      data.class = (isArray(data.class) ? data.class : []).concat(parentData.class)\n-    }\n-  }\n-  if (parentData.style) {\n-    if (!data.style) {\n-      data.style = parentData.style\n-    } else {\n-      data.style = (isArray(data.style) ? data.style : []).concat(parentData.style)\n-    }\n-  }\n-  if (parentData.directives) {\n-    data.directives = parentData.directives.concat(data.directives || [])\n-  }\n-  if (parentData.transition != null) {\n-    data.transition = parentData.transition\n-  }\n-}\n-\n-function updateProps (vm, data) {\n-  let changed = false\n-  if (data.attrs || data.props) {\n-    let keys = vm.$options.propKeys\n-    if (keys) {\n-      observerState.shouldConvert = false\n-      for (let i = 0; i < keys.length; i++) {\n-        let key = keys[i]\n-        let oldVal = vm[key]\n-        let newVal = getPropValue(data, key, vm)\n-        if (oldVal !== newVal) {\n-          vm[key] = newVal\n-          changed = true\n-        }\n-      }\n-      observerState.shouldConvert = true\n-    }\n-  }\n-  return changed\n-}\n-\n-function updateEvents (vm, data, oldData) {\n-  if (data.on) {\n-    updateListeners(data.on, oldData.on || {}, (event, handler) => {\n-      vm.$on(event, handler)\n-    })\n-  }\n-}"
            },
            {
                "commitId": "7b97d97e2fff49c84fc5048eda9d5ab8daf0ec7f",
                "additions": 4,
                "deletions": 1,
                "patch": "@@ -158,7 +158,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives']\n+const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives', 'transition']\n function parentDataChanged (data, oldData) {\n   let key, old, cur, i, l, j, k\n   for (i = 0, l = keysToDiff.length; i < l; i++) {\n@@ -236,6 +236,9 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.concat(data.directives || [])\n   }\n+  if (parentData.transition != null) {\n+    data.transition = parentData.transition\n+  }\n }\n \n function updateProps (vm, data) {"
            },
            {
                "commitId": "52ac04d2355a91957388a4bee336fa044d9ad57c",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -34,6 +34,13 @@ export function renderMixin (Vue) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  // resolve transition\n+  Vue.prototype.__resolveTransition__ = function (id) {\n+    return id && typeof id === 'string'\n+      ? resolveAsset(this.$options, 'transitions', id) || id\n+      : id\n+  }\n+\n   // toString for mustaches\n   Vue.prototype.__toString__ = function (val) {\n     return val == null"
            },
            {
                "commitId": "4512406f775a6c258fa13400358d25d8a37892c7",
                "additions": 3,
                "deletions": 27,
                "patch": "@@ -1,11 +1,6 @@\n-import { callHook } from './lifecycle'\n import { observerState } from '../observer/index'\n-import {\n-  createElement,\n-  patch,\n-  updateListeners,\n-  flatten\n-} from '../vdom/index'\n+import createElement from '../vdom/create-element'\n+import { flatten, updateListeners } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n@@ -24,7 +19,7 @@ export function initRender (vm) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(vm.__h__, vm)\n+  vm.$createElement = bind(createElement, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -94,21 +89,6 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._update = function (vnode) {\n-    if (this._mounted) {\n-      callHook(this, 'beforeUpdate')\n-    }\n-    if (!this._vnode) {\n-      this.$el = patch(this.$el, vnode)\n-    } else {\n-      this.$el = patch(this._vnode, vnode)\n-    }\n-    this._vnode = vnode\n-    if (this._mounted) {\n-      callHook(this, 'updated')\n-    }\n-  }\n-\n   Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n     this.$options._renderData = parentData\n@@ -147,10 +127,6 @@ export function renderMixin (Vue) {\n     renderState.activeInstance = prev\n     return vnode\n   }\n-\n-  Vue.prototype.$forceUpdate = function () {\n-    this._watcher.update()\n-  }\n }\n \n function resolveSlots (vm, children) {"
            },
            {
                "commitId": "a1ebdbbb7a34f842d090e208863be7168eaa9803",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -138,7 +138,7 @@ export function renderMixin (Vue) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(this)\n+    const vnode = render.call(this._renderProxy)\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)"
            },
            {
                "commitId": "c13bbcb32794fbb443a4f86d3b0526951ca3f7ba",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -251,7 +251,7 @@ function mergeParentData (vm, data, parentData) {\n     }\n   }\n   if (parentData.directives) {\n-    data.directives = parentData.directives.conact(data.directives || [])\n+    data.directives = parentData.directives.concat(data.directives || [])\n   }\n }\n "
            },
            {
                "commitId": "86bc00e0e57076a1a7a6d64ddb3f97d1a455be46",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -8,7 +8,6 @@ import {\n } from '../vdom/index'\n import {\n   bind,\n-  extend,\n   resolveAsset,\n   isArray,\n   isObject,\n@@ -248,7 +247,7 @@ function mergeParentData (vm, data, parentData) {\n     if (!data.style) {\n       data.style = parentData.style\n     } else {\n-      extend(data.style, parentData.style)\n+      data.style = (isArray(data.style) ? data.style : []).concat(parentData.style)\n     }\n   }\n   if (parentData.directives) {"
            },
            {
                "commitId": "24ef7f489a0f2452266974b1f01648e504e7bc96",
                "additions": 1,
                "deletions": 4,
                "patch": "@@ -209,10 +209,7 @@ function parentDataChanged (data, oldData) {\n }\n \n function diffObject (cur, old) {\n-  const keys = Object.keys(old)\n-  let i, l, key\n-  for (i = 0, l = keys.length; i < l; i++) {\n-    key = keys[i]\n+  for (let key in old) {\n     if (cur[key] !== old[key]) return true\n   }\n }"
            },
            {
                "commitId": "368b2ff03a61fa4879ea4c69ba4b9fa71387d298",
                "additions": 27,
                "deletions": 3,
                "patch": "@@ -36,21 +36,45 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = createElement\n \n   // resolve directive\n-  Vue.prototype.__d__ = function (id) {\n+  Vue.prototype.__resolveDirective__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n   // toString for mustaches\n-  Vue.prototype.__s__ = function (val) {\n+  Vue.prototype.__toString__ = function (val) {\n     return val == null\n       ? ''\n       : typeof val === 'object'\n         ? JSON.stringify(val, null, 2)\n         : val\n   }\n \n+  // render v-for\n+  Vue.prototype.__renderList__ = function (val, render) {\n+    let ret, i, l, keys, key\n+    if (isArray(val)) {\n+      ret = new Array(val.length)\n+      for (i = 0, l = val.length; i < l; i++) {\n+        ret[i] = render(val[i], i, i)\n+      }\n+    } else if (typeof val === 'number') {\n+      ret = new Array(val)\n+      for (i = 0; i < val; i++) {\n+        ret[i] = render(i + 1, i, i)\n+      }\n+    } else if (isObject(val)) {\n+      keys = Object.keys(val)\n+      ret = new Array(keys.length)\n+      for (i = 0, l = keys.length; i < l; i++) {\n+        key = keys[i]\n+        ret[i] = render(val[key], i, key)\n+      }\n+    }\n+    return ret\n+  }\n+\n   // register ref\n-  Vue.prototype.__r__ = function (key, ref, vFor, remove) {\n+  Vue.prototype.__registerRef__ = function (key, ref, vFor, remove) {\n     const refs = this.$refs\n     if (remove) {\n       if (vFor) {"
            },
            {
                "commitId": "d6bef7957541e38cec3051eb4d8c54bda3280eaf",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -1,4 +1,5 @@\n import { callHook } from './lifecycle'\n+import { observerState } from '../observer/index'\n import {\n   createElement,\n   patch,\n@@ -197,15 +198,15 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.attrs) {\n     const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n-      if (!props[key]) {\n+      if (!props || !props[key]) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n     const props = data.props || (data.props = {})\n     for (let key in parentData.props) {\n-      if (!props[key]) {\n+      if (!props || !props[key]) {\n         props[key] = parentData.props[key]\n       }\n     }\n@@ -239,6 +240,7 @@ function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n     let keys = vm.$options.propKeys\n     if (keys) {\n+      observerState.shouldConvert = false\n       for (let i = 0; i < keys.length; i++) {\n         let key = keys[i]\n         let oldVal = vm[key]\n@@ -248,6 +250,7 @@ function updateProps (vm, data) {\n           changed = true\n         }\n       }\n+      observerState.shouldConvert = true\n     }\n   }\n   return changed"
            },
            {
                "commitId": "7b2dc500b7a06381716639acea21d0fcf3b8b732",
                "additions": 22,
                "deletions": 0,
                "patch": "@@ -48,6 +48,28 @@ export function renderMixin (Vue) {\n         : val\n   }\n \n+  // register ref\n+  Vue.prototype.__r__ = function (key, ref, vFor, remove) {\n+    const refs = this.$refs\n+    if (remove) {\n+      if (vFor) {\n+        refs[key].$remove(ref)\n+      } else {\n+        refs[key] = undefined\n+      }\n+    } else {\n+      if (vFor) {\n+        if (refs[key]) {\n+          refs[key].push(ref)\n+        } else {\n+          refs[key] = [ref]\n+        }\n+      } else {\n+        refs[key] = ref\n+      }\n+    }\n+  }\n+\n   Vue.prototype._update = function (vnode) {\n     if (this._mounted) {\n       callHook(this, 'beforeUpdate')"
            },
            {
                "commitId": "c2ad444982541faa8b7e0a652e68d4d0f6ef4bc6",
                "additions": 6,
                "deletions": 18,
                "patch": "@@ -6,6 +6,7 @@ import {\n   flatten\n } from '../vdom/index'\n import {\n+  bind,\n   extend,\n   resolveAsset,\n   isArray,\n@@ -14,14 +15,16 @@ import {\n } from '../util/index'\n \n export const renderState = {\n-  activeInstance: null,\n-  context: null\n+  activeInstance: null\n }\n \n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm.$slots = {}\n+  // bind the public createElement fn to this instance\n+  // so that we get proper render context inside it.\n+  vm.$createElement = bind(vm.__h__, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -79,21 +82,6 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  /**\n-   * Call a render function with this instance as the context.\n-   * This is used to wrap all children thunks in codegen.\n-   */\n-\n-  Vue.prototype._renderWithContext = function (fn) {\n-    return () => {\n-      const prev = renderState.context\n-      renderState.context = this\n-      const children = flatten(fn())\n-      renderState.context = prev\n-      return children\n-    }\n-  }\n-\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n@@ -121,7 +109,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children()\n+    children = flatten(isArray(children) ? children : children())\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "78e82bb8e454fcac088f4b40ec66e424c84dab89",
                "additions": 14,
                "deletions": 3,
                "patch": "@@ -1,6 +1,17 @@\n-import { extend, resolveAsset, isArray, isObject, getPropValue } from '../util/index'\n-import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n+import {\n+  createElement,\n+  patch,\n+  updateListeners,\n+  flatten\n+} from '../vdom/index'\n+import {\n+  extend,\n+  resolveAsset,\n+  isArray,\n+  isObject,\n+  getPropValue\n+} from '../util/index'\n \n export const renderState = {\n   activeInstance: null,\n@@ -110,7 +121,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children().slice()\n+    children = children()\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "d3c64fa6a67faf610466277caf9c839dd11d1934",
                "additions": 13,
                "deletions": 5,
                "patch": "@@ -55,13 +55,14 @@ export function renderMixin (Vue) {\n     this.$options._renderChildren = children\n     // update props and listeners\n     if (parentData) {\n+      updateEvents(this, parentData, oldParentData)\n       // if any prop has changed it would trigger and queue an update,\n       // but if no props changed, nothing happens\n-      updateProps(this, parentData)\n-      updateEvents(this, parentData, oldParentData)\n+      const propsChanged = updateProps(this, parentData)\n       // diff parent data (attrs on the placeholder) and queue update\n-      // if anything changed\n-      if (parentDataChanged(parentData, oldParentData)) {\n+      // if anything changed. only do this if props didn't change, because\n+      // if props changed then an update has already been queued.\n+      if (!propsChanged && parentDataChanged(parentData, oldParentData)) {\n         this.$forceUpdate()\n       }\n     }\n@@ -213,15 +214,22 @@ function mergeParentData (vm, data, parentData) {\n }\n \n function updateProps (vm, data) {\n+  let changed = false\n   if (data.attrs || data.props) {\n     let keys = vm.$options.propKeys\n     if (keys) {\n       for (let i = 0; i < keys.length; i++) {\n         let key = keys[i]\n-        vm[key] = getPropValue(data, key, vm)\n+        let oldVal = vm[key]\n+        let newVal = getPropValue(data, key, vm)\n+        if (oldVal !== newVal) {\n+          vm[key] = newVal\n+          changed = true\n+        }\n       }\n     }\n   }\n+  return changed\n }\n \n function updateEvents (vm, data, oldData) {"
            },
            {
                "commitId": "d2ca5c5e8ad7b10b1a886c3acc50f4936bffa102",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,4 +1,4 @@\n-import { extend, resolveAsset, hasOwn, isArray, isObject, getPropValue } from '../util/index'\n+import { extend, resolveAsset, isArray, isObject, getPropValue } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n "
            },
            {
                "commitId": "91455a6618c4c34e5d8b3f8299f427d3b612c142",
                "additions": 14,
                "deletions": 11,
                "patch": "@@ -1,7 +1,6 @@\n-import { extend, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n+import { extend, resolveAsset, hasOwn, isArray, isObject, getPropValue } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n-import { getPropValue } from './state'\n \n export const renderState = {\n   activeInstance: null,\n@@ -60,11 +59,11 @@ export function renderMixin (Vue) {\n       // but if no props changed, nothing happens\n       updateProps(this, parentData)\n       updateEvents(this, parentData, oldParentData)\n-    }\n-    // diff parent data (attrs on the placeholder) and queue update\n-    // if anything changed\n-    if (parentDataChanged(parentData, oldParentData)) {\n-      this.$forceUpdate()\n+      // diff parent data (attrs on the placeholder) and queue update\n+      // if anything changed\n+      if (parentDataChanged(parentData, oldParentData)) {\n+        this.$forceUpdate()\n+      }\n     }\n   }\n \n@@ -176,15 +175,15 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.attrs) {\n     const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n-      if (!hasOwn(props, key)) {\n+      if (!props[key]) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n     const props = data.props || (data.props = {})\n     for (let key in parentData.props) {\n-      if (!hasOwn(props, key)) {\n+      if (!props[key]) {\n         props[key] = parentData.props[key]\n       }\n     }\n@@ -215,8 +214,12 @@ function mergeParentData (vm, data, parentData) {\n \n function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n-    for (let key in vm.$options.props) {\n-      vm[key] = getPropValue(data, key)\n+    let keys = vm.$options.propKeys\n+    if (keys) {\n+      for (let i = 0; i < keys.length; i++) {\n+        let key = keys[i]\n+        vm[key] = getPropValue(data, key, vm)\n+      }\n     }\n   }\n }"
            },
            {
                "commitId": "403e2380b8d3c430ac67e6a072f159bcf8c00b5e",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -21,13 +21,18 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n+  // resolve directive\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  // toString for mustaches\n   Vue.prototype.__s__ = function (val) {\n-    console.log(val)\n-    return typeof val === 'string' ? val : JSON.stringify(val)\n+    return val == null\n+      ? ''\n+      : typeof val === 'object'\n+        ? JSON.stringify(val, null, 2)\n+        : val\n   }\n \n   Vue.prototype._update = function (vnode) {"
            },
            {
                "commitId": "09a4ba84a9e4a0219423c85599fea87c1d34737d",
                "additions": 6,
                "deletions": 4,
                "patch": "@@ -25,6 +25,11 @@ export function renderMixin (Vue) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  Vue.prototype.__s__ = function (val) {\n+    console.log(val)\n+    return typeof val === 'string' ? val : JSON.stringify(val)\n+  }\n+\n   Vue.prototype._update = function (vnode) {\n     if (this._mounted) {\n       callHook(this, 'beforeUpdate')\n@@ -42,7 +47,6 @@ export function renderMixin (Vue) {\n \n   Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n-    this.$options._renderKey = key\n     this.$options._renderData = parentData\n     this.$options._renderChildren = children\n     // update props and listeners\n@@ -77,16 +81,14 @@ export function renderMixin (Vue) {\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const { render, _renderKey, _renderData, _renderChildren } = this.$options\n+    const { render, _renderData, _renderChildren } = this.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n     const vnode = render.call(this)\n-    // set key\n-    vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)"
            },
            {
                "commitId": "e666fb4ee1ee8e15f94d3065ead7a213fed98253",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -12,15 +12,15 @@ export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm.$slots = {}\n-  const el = vm.$options.el\n-  if (el) {\n-    vm.$mount(el)\n+  if (vm.$options.el) {\n+    vm.$mount(vm.$options.el)\n   }\n }\n \n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n+\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }"
            },
            {
                "commitId": "2ef8d1028be7b9e80c4f3b53c8c8993599c28a9e",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -130,8 +130,13 @@ function parentDataChanged (data, oldData) {\n     key = keysToDiff[i]\n     cur = data[key]\n     old = oldData[key]\n-    if (key === 'on') continue\n-    if (!cur) return true\n+    if (!old) {\n+      if (!cur) {\n+        continue\n+      } else {\n+        return true\n+      }\n+    }\n     if (isArray(old)) {\n       if (!isArray(cur)) return true\n       if (cur.length !== old.length) return true"
            },
            {
                "commitId": "32ca8e7722cc46e0e24b812c893c5c7dc2108b8f",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -123,11 +123,11 @@ function resolveSlots (vm, children) {\n   }\n }\n \n+const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives']\n function parentDataChanged (data, oldData) {\n-  const keys = Object.keys(oldData)\n   let key, old, cur, i, l, j, k\n-  for (i = 0, l = keys.length; i < l; i++) {\n-    key = keys[i]\n+  for (i = 0, l = keysToDiff.length; i < l; i++) {\n+    key = keysToDiff[i]\n     cur = data[key]\n     old = oldData[key]\n     if (key === 'on') continue"
            },
            {
                "commitId": "0c6c748d9df45341b5c787e9401c32536161feca",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -40,7 +40,7 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._tryUpdate = function (parentData, children, key) {\n+  Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n     this.$options._renderKey = key\n     this.$options._renderData = parentData\n@@ -54,7 +54,7 @@ export function renderMixin (Vue) {\n     }\n     // diff parent data (attrs on the placeholder) and queue update\n     // if anything changed\n-    if (diffParentData(parentData, oldParentData)) {\n+    if (parentDataChanged(parentData, oldParentData)) {\n       this.$forceUpdate()\n     }\n   }\n@@ -123,7 +123,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function diffParentData (data, oldData) {\n+function parentDataChanged (data, oldData) {\n   const keys = Object.keys(oldData)\n   let key, old, cur, i, l, j, k\n   for (i = 0, l = keys.length; i < l; i++) {"
            },
            {
                "commitId": "8ff21757a1a3eb10c9c239b2b92eff9711aa7b21",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -212,7 +212,6 @@ function updateProps (vm, data) {\n function updateEvents (vm, data, oldData) {\n   if (data.on) {\n     updateListeners(data.on, oldData.on || {}, (event, handler) => {\n-      console.log(11)\n       vm.$on(event, handler)\n     })\n   }"
            },
            {
                "commitId": "4d508dcbfa440459fb6bc331537c0c90278aa3a8",
                "additions": 1,
                "deletions": 22,
                "patch": "@@ -1,5 +1,4 @@\n-import Watcher from '../observer/watcher'\n-import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n+import { extend, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -97,26 +96,6 @@ export function renderMixin (Vue) {\n     return vnode\n   }\n \n-  Vue.prototype.$mount = function (el) {\n-    callHook(this, 'beforeMount')\n-    el = this.$el = el && query(el)\n-    if (el) {\n-      // clean element\n-      el.innerHTML = ''\n-      if (el.hasAttributes()) {\n-        const attrs = el.attributes\n-        for (let i = 0, l = attrs.length; i < l; i++) {\n-          el.removeAttribute(attrs[i].name)\n-        }\n-      }\n-    }\n-    this._watcher = new Watcher(this, this._render, this._update)\n-    this._update(this._watcher.value)\n-    callHook(this, 'mounted')\n-    this._mounted = true\n-    return this\n-  }\n-\n   Vue.prototype.$forceUpdate = function () {\n     this._watcher.update()\n   }"
            },
            {
                "commitId": "af1f1d349f8276d3fe0c38af34eafab2b0c50424",
                "additions": 8,
                "deletions": 7,
                "patch": "@@ -1,6 +1,6 @@\n import Watcher from '../observer/watcher'\n import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n-import { createElement, patch, updateListeners } from '../vdom/index'\n+import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n \n@@ -48,13 +48,14 @@ export function renderMixin (Vue) {\n     this.$options._renderChildren = children\n     // update props and listeners\n     if (parentData) {\n+      // if any prop has changed it would trigger and queue an update,\n+      // but if no props changed, nothing happens\n       updateProps(this, parentData)\n       updateEvents(this, parentData, oldParentData)\n     }\n-    // for now, if the component has content it always updates\n-    // because we don't know whether the children have changed.\n-    // need to optimize in the future.\n-    if (children || diffParentData(parentData, oldParentData)) {\n+    // diff parent data (attrs on the placeholder) and queue update\n+    // if anything changed\n+    if (diffParentData(parentData, oldParentData)) {\n       this.$forceUpdate()\n     }\n   }\n@@ -64,11 +65,11 @@ export function renderMixin (Vue) {\n    * This is used to wrap all children thunks in codegen.\n    */\n \n-  Vue.prototype._withContext = function (fn) {\n+  Vue.prototype._renderWithContext = function (fn) {\n     return () => {\n       const prev = renderState.context\n       renderState.context = this\n-      const children = fn()\n+      const children = flatten(fn())\n       renderState.context = prev\n       return children\n     }"
            },
            {
                "commitId": "61a5249a0e71008d7560d188b62efe36788619c1",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -68,8 +68,9 @@ export function renderMixin (Vue) {\n     return () => {\n       const prev = renderState.context\n       renderState.context = this\n-      return fn()\n+      const children = fn()\n       renderState.context = prev\n+      return children\n     }\n   }\n "
            },
            {
                "commitId": "c16fc2c427b221510b51d98c1051460d2ffbe02e",
                "additions": 24,
                "deletions": 12,
                "patch": "@@ -5,7 +5,8 @@ import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n \n export const renderState = {\n-  activeInstance: null\n+  activeInstance: null,\n+  context: null\n }\n \n export function initRender (vm) {\n@@ -58,28 +59,39 @@ export function renderMixin (Vue) {\n     }\n   }\n \n+  /**\n+   * Call a render function with this instance as the context.\n+   * This is used to wrap all children thunks in codegen.\n+   */\n+\n+  Vue.prototype._withContext = function (fn) {\n+    return () => {\n+      const prev = renderState.context\n+      renderState.context = this\n+      return fn()\n+      renderState.context = prev\n+    }\n+  }\n+\n   Vue.prototype._render = function () {\n-    const {\n-      render,\n-      _renderKey,\n-      _renderData,\n-      _renderChildren\n-    } = this.$options\n-    // resolve slots\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const { render, _renderKey, _renderData, _renderChildren } = this.$options\n+    // resolve slots. becaues slots are rendered in parent scope,\n+    // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n-    // render\n-    const prev = renderState.activeInstance\n-    renderState.activeInstance = this\n+    // render self\n     const vnode = render.call(this)\n-    renderState.activeInstance = prev\n     // set key\n     vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)\n     }\n+    // restore render state\n+    renderState.activeInstance = prev\n     return vnode\n   }\n "
            },
            {
                "commitId": "1df748d57d366ff426604e58a46897a2f49424aa",
                "additions": 11,
                "deletions": 4,
                "patch": "@@ -85,9 +85,16 @@ export function renderMixin (Vue) {\n \n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n-    this.$el = el && query(el)\n-    if (this.$el) {\n-      this.$el.innerHTML = ''\n+    el = this.$el = el && query(el)\n+    if (el) {\n+      // clean element\n+      el.innerHTML = ''\n+      if (el.hasAttributes()) {\n+        const attrs = el.attributes\n+        for (let i = 0, l = attrs.length; i < l; i++) {\n+          el.removeAttribute(attrs[i].name)\n+        }\n+      }\n     }\n     this._watcher = new Watcher(this, this._render, this._update)\n     this._update(this._watcher.value)\n@@ -103,7 +110,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children.slice()\n+    children = children().slice()\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "38204b747dad3c05c63401e2a27ef846bcb998bc",
                "additions": 4,
                "deletions": 3,
                "patch": "@@ -48,7 +48,7 @@ export function renderMixin (Vue) {\n     // update props and listeners\n     if (parentData) {\n       updateProps(this, parentData)\n-      updateEvents(this, parentData)\n+      updateEvents(this, parentData, oldParentData)\n     }\n     // for now, if the component has content it always updates\n     // because we don't know whether the children have changed.\n@@ -209,9 +209,10 @@ function updateProps (vm, data) {\n   }\n }\n \n-function updateEvents (vm, data) {\n+function updateEvents (vm, data, oldData) {\n   if (data.on) {\n-    updateListeners(data.on, vm._vnode.data.on || {}, (event, handler) => {\n+    updateListeners(data.on, oldData.on || {}, (event, handler) => {\n+      console.log(11)\n       vm.$on(event, handler)\n     })\n   }"
            },
            {
                "commitId": "542035f3c1550bf4d733a7b9c161cdb8db63740f",
                "additions": 10,
                "deletions": 4,
                "patch": "@@ -124,16 +124,18 @@ function resolveSlots (vm, children) {\n }\n \n function diffParentData (data, oldData) {\n-  let key, old, cur\n-  for (key in oldData) {\n+  const keys = Object.keys(oldData)\n+  let key, old, cur, i, l, j, k\n+  for (i = 0, l = keys.length; i < l; i++) {\n+    key = keys[i]\n     cur = data[key]\n     old = oldData[key]\n     if (key === 'on') continue\n     if (!cur) return true\n     if (isArray(old)) {\n       if (!isArray(cur)) return true\n       if (cur.length !== old.length) return true\n-      for (let i = 0; i < old.length; i++) {\n+      for (j = 0, k = old.length; j < k; j++) {\n         if (isObject(old[i])) {\n           if (!isObject(cur[i])) return true\n           if (diffObject(cur, old)) return true\n@@ -145,10 +147,14 @@ function diffParentData (data, oldData) {\n       return true\n     }\n   }\n+  return false\n }\n \n function diffObject (cur, old) {\n-  for (var key in old) {\n+  const keys = Object.keys(old)\n+  let i, l, key\n+  for (i = 0, l = keys.length; i < l; i++) {\n+    key = keys[i]\n     if (cur[key] !== old[key]) return true\n   }\n }"
            },
            {
                "commitId": "0257afbb7f8a6a4c986a577e904225cef13e67ec",
                "additions": 119,
                "deletions": 81,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { extend, query, resolveAsset, hasOwn } from '../util/index'\n+import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -18,78 +18,6 @@ export function initRender (vm) {\n   }\n }\n \n-function resolveSlots (vm, children) {\n-  if (children) {\n-    children = children.slice()\n-    const slots = { default: children }\n-    let i = children.length\n-    let name, child\n-    while (i--) {\n-      child = children[i]\n-      if ((name = child.data && child.data.slot)) {\n-        let slot = (slots[name] || (slots[name] = []))\n-        if (child.tag === 'template') {\n-          slot.push.apply(slot, child.children)\n-        } else {\n-          slot.push(child)\n-        }\n-        children.splice(i, 1)\n-      }\n-    }\n-    vm.$slots = slots\n-  }\n-}\n-\n-function mergeParentData (vm, data, parentData) {\n-  const props = vm.$options.props\n-  if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = {})\n-    for (let key in parentData.attrs) {\n-      if (!hasOwn(props, key)) {\n-        attrs[key] = parentData.attrs[key]\n-      }\n-    }\n-  }\n-  if (parentData.props) {\n-    const props = data.props || (data.props = {})\n-    for (let key in parentData.props) {\n-      if (!hasOwn(props, key)) {\n-        props[key] = parentData.props[key]\n-      }\n-    }\n-  }\n-  if (parentData.staticClass) {\n-    data.staticClass = data.staticClass\n-      ? data.staticClass + ' ' + parentData.staticClass\n-      : parentData.staticClass\n-  }\n-  if (parentData.class) {\n-    extend((data.class || (data.class = {})), parentData.class)\n-  }\n-  if (parentData.style) {\n-    extend((data.style || (data.style = {})), parentData.style)\n-  }\n-  if (parentData.directives) {\n-    data.directives = parentData.directives.conact(data.directives || [])\n-  }\n-  if (parentData.on) {\n-    updateListeners(parentData.on, data.on || {}, (event, handler) => {\n-      vm.$on(event, handler)\n-    })\n-  }\n-}\n-\n-function updateProps (vm, data) {\n-  if (data.attrs || data.props) {\n-    for (let key in vm.$options.props) {\n-      let newVal = getPropValue(data, key)\n-      if (vm[key] !== newVal) {\n-        vm[key] = newVal\n-      }\n-    }\n-  }\n-}\n-\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -112,21 +40,21 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._tryUpdate = function (data, children, key) {\n+  Vue.prototype._tryUpdate = function (parentData, children, key) {\n+    const oldParentData = this.$options._renderData\n     this.$options._renderKey = key\n-    this.$options._renderData = data\n+    this.$options._renderData = parentData\n     this.$options._renderChildren = children\n-    // set props - this will trigger update if any of them changed\n-    // but not guaranteed\n-    if (data) {\n-      updateProps(this, data)\n+    // update props and listeners\n+    if (parentData) {\n+      updateProps(this, parentData)\n+      updateEvents(this, parentData)\n     }\n     // for now, if the component has content it always updates\n     // because we don't know whether the children have changed.\n     // need to optimize in the future.\n-    if (children) {\n+    if (children || diffParentData(parentData, oldParentData)) {\n       this.$forceUpdate()\n-      return\n     }\n   }\n \n@@ -172,3 +100,113 @@ export function renderMixin (Vue) {\n     this._watcher.update()\n   }\n }\n+\n+function resolveSlots (vm, children) {\n+  if (children) {\n+    children = children.slice()\n+    const slots = { default: children }\n+    let i = children.length\n+    let name, child\n+    while (i--) {\n+      child = children[i]\n+      if ((name = child.data && child.data.slot)) {\n+        let slot = (slots[name] || (slots[name] = []))\n+        if (child.tag === 'template') {\n+          slot.push.apply(slot, child.children)\n+        } else {\n+          slot.push(child)\n+        }\n+        children.splice(i, 1)\n+      }\n+    }\n+    vm.$slots = slots\n+  }\n+}\n+\n+function diffParentData (data, oldData) {\n+  let key, old, cur\n+  for (key in oldData) {\n+    cur = data[key]\n+    old = oldData[key]\n+    if (key === 'on') continue\n+    if (!cur) return true\n+    if (isArray(old)) {\n+      if (!isArray(cur)) return true\n+      if (cur.length !== old.length) return true\n+      for (let i = 0; i < old.length; i++) {\n+        if (isObject(old[i])) {\n+          if (!isObject(cur[i])) return true\n+          if (diffObject(cur, old)) return true\n+        } else if (old[i] !== cur[i]) {\n+          return true\n+        }\n+      }\n+    } else if (diffObject(cur, old)) {\n+      return true\n+    }\n+  }\n+}\n+\n+function diffObject (cur, old) {\n+  for (var key in old) {\n+    if (cur[key] !== old[key]) return true\n+  }\n+}\n+\n+function mergeParentData (vm, data, parentData) {\n+  const props = vm.$options.props\n+  if (parentData.attrs) {\n+    const attrs = data.attrs || (data.attrs = {})\n+    for (let key in parentData.attrs) {\n+      if (!hasOwn(props, key)) {\n+        attrs[key] = parentData.attrs[key]\n+      }\n+    }\n+  }\n+  if (parentData.props) {\n+    const props = data.props || (data.props = {})\n+    for (let key in parentData.props) {\n+      if (!hasOwn(props, key)) {\n+        props[key] = parentData.props[key]\n+      }\n+    }\n+  }\n+  if (parentData.staticClass) {\n+    data.staticClass = data.staticClass\n+      ? data.staticClass + ' ' + parentData.staticClass\n+      : parentData.staticClass\n+  }\n+  if (parentData.class) {\n+    if (!data.class) {\n+      data.class = parentData.class\n+    } else {\n+      data.class = (isArray(data.class) ? data.class : []).concat(parentData.class)\n+    }\n+  }\n+  if (parentData.style) {\n+    if (!data.style) {\n+      data.style = parentData.style\n+    } else {\n+      extend(data.style, parentData.style)\n+    }\n+  }\n+  if (parentData.directives) {\n+    data.directives = parentData.directives.conact(data.directives || [])\n+  }\n+}\n+\n+function updateProps (vm, data) {\n+  if (data.attrs || data.props) {\n+    for (let key in vm.$options.props) {\n+      vm[key] = getPropValue(data, key)\n+    }\n+  }\n+}\n+\n+function updateEvents (vm, data) {\n+  if (data.on) {\n+    updateListeners(data.on, vm._vnode.data.on || {}, (event, handler) => {\n+      vm.$on(event, handler)\n+    })\n+  }\n+}"
            },
            {
                "commitId": "d1fc82dbba86a91704269e62699f63d645dd8baf",
                "additions": 21,
                "deletions": 14,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hasOwn } from '../util/index'\n+import { extend, query, resolveAsset, hasOwn } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -40,28 +40,38 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function mergeParentAttrs (vm, data, parentData) {\n+function mergeParentData (vm, data, parentData) {\n   const props = vm.$options.props\n   if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = [])\n+    const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n-\n+    const props = data.props || (data.props = {})\n+    for (let key in parentData.props) {\n+      if (!hasOwn(props, key)) {\n+        props[key] = parentData.props[key]\n+      }\n+    }\n+  }\n+  if (parentData.staticClass) {\n+    data.staticClass = data.staticClass\n+      ? data.staticClass + ' ' + parentData.staticClass\n+      : parentData.staticClass\n+  }\n+  if (parentData.class) {\n+    extend((data.class || (data.class = {})), parentData.class)\n+  }\n+  if (parentData.style) {\n+    extend((data.style || (data.style = {})), parentData.style)\n   }\n-}\n-\n-function mergeParentDirectives (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.conact(data.directives || [])\n   }\n-}\n-\n-function updateParentCallbacks (vm, data, parentData) {\n   if (parentData.on) {\n     updateListeners(parentData.on, data.on || {}, (event, handler) => {\n       vm.$on(event, handler)\n@@ -140,10 +150,7 @@ export function renderMixin (Vue) {\n     vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n-      const data = vnode.data\n-      mergeParentAttrs(this, data, _renderData)\n-      mergeParentDirectives(this, data, _renderData)\n-      updateParentCallbacks(this, data, _renderData)\n+      mergeParentData(this, vnode.data, _renderData)\n     }\n     return vnode\n   }"
            },
            {
                "commitId": "2fa6e6f73f81439374c02008fb4169b7df2f7b98",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -106,14 +106,18 @@ export function renderMixin (Vue) {\n     this.$options._renderKey = key\n     this.$options._renderData = data\n     this.$options._renderChildren = children\n-    if (children) {\n-      this.$forceUpdate()\n-      return\n-    }\n     // set props - this will trigger update if any of them changed\n+    // but not guaranteed\n     if (data) {\n       updateProps(this, data)\n     }\n+    // for now, if the component has content it always updates\n+    // because we don't know whether the children have changed.\n+    // need to optimize in the future.\n+    if (children) {\n+      this.$forceUpdate()\n+      return\n+    }\n   }\n \n   Vue.prototype._render = function () {"
            },
            {
                "commitId": "0e940ac5af072e1c85b6346c43c20d0a66c75393",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -72,7 +72,7 @@ function updateParentCallbacks (vm, data, parentData) {\n function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n     for (let key in vm.$options.props) {\n-      let newVal = getPropValue(data)\n+      let newVal = getPropValue(data, key)\n       if (vm[key] !== newVal) {\n         vm[key] = newVal\n       }"
            },
            {
                "commitId": "fdfcb9319970298e0c2f4318e6360db1b8dd3d8e",
                "additions": 4,
                "deletions": 16,
                "patch": "@@ -1,7 +1,8 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n+import { query, resolveAsset, hasOwn } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n+import { getPropValue } from './state'\n \n export const renderState = {\n   activeInstance: null\n@@ -69,29 +70,16 @@ function updateParentCallbacks (vm, data, parentData) {\n }\n \n function updateProps (vm, data) {\n-  const attrs = data.attrs\n-  const props = data.props\n-  if (attrs || props) {\n+  if (data.attrs || data.props) {\n     for (let key in vm.$options.props) {\n-      let altKey = hyphenate(key)\n-      let newVal =\n-        getPropValue(attrs, key, altKey) ||\n-        getPropValue(props, key, altKey)\n+      let newVal = getPropValue(data)\n       if (vm[key] !== newVal) {\n         vm[key] = newVal\n       }\n     }\n   }\n }\n \n-function getPropValue (hash, key, altKey) {\n-  return hash\n-    ? hasOwn(hash, key)\n-      ? hash[key]\n-      : hash[altKey]\n-    : undefined\n-}\n-\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement"
            },
            {
                "commitId": "57bb93ef02de063dc12d375b0fc2ca25063b5fc8",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -100,14 +100,18 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._update = function (vnode) {\n-    callHook(this, 'beforeUpdate')\n+    if (this._mounted) {\n+      callHook(this, 'beforeUpdate')\n+    }\n     if (!this._vnode) {\n       this.$el = patch(this.$el, vnode)\n     } else {\n       this.$el = patch(this._vnode, vnode)\n     }\n     this._vnode = vnode\n-    callHook(this, 'updated')\n+    if (this._mounted) {\n+      callHook(this, 'updated')\n+    }\n   }\n \n   Vue.prototype._tryUpdate = function (data, children, key) {"
            },
            {
                "commitId": "c12ddd9ab9f66bdbad8d5f91c2796f6cfe0a659c",
                "additions": 30,
                "deletions": 11,
                "patch": "@@ -40,15 +40,18 @@ function resolveSlots (vm, children) {\n }\n \n function mergeParentAttrs (vm, data, parentData) {\n+  const props = vm.$options.props\n   if (parentData.attrs) {\n-    const props = vm.$options.props\n     const attrs = data.attrs || (data.attrs = [])\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n+  if (parentData.props) {\n+\n+  }\n }\n \n function mergeParentDirectives (vm, data, parentData) {\n@@ -65,6 +68,30 @@ function updateParentCallbacks (vm, data, parentData) {\n   }\n }\n \n+function updateProps (vm, data) {\n+  const attrs = data.attrs\n+  const props = data.props\n+  if (attrs || props) {\n+    for (let key in vm.$options.props) {\n+      let altKey = hyphenate(key)\n+      let newVal =\n+        getPropValue(attrs, key, altKey) ||\n+        getPropValue(props, key, altKey)\n+      if (vm[key] !== newVal) {\n+        vm[key] = newVal\n+      }\n+    }\n+  }\n+}\n+\n+function getPropValue (hash, key, altKey) {\n+  return hash\n+    ? hasOwn(hash, key)\n+      ? hash[key]\n+      : hash[altKey]\n+    : undefined\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -92,16 +119,8 @@ export function renderMixin (Vue) {\n       return\n     }\n     // set props - this will trigger update if any of them changed\n-    const attrs = data && data.attrs\n-    if (attrs) {\n-      for (let key in this.$options.props) {\n-        let newVal = hasOwn(attrs, key)\n-          ? attrs[key]\n-          : attrs[hyphenate(key)]\n-        if (this[key] !== newVal) {\n-          this[key] = newVal\n-        }\n-      }\n+    if (data) {\n+      updateProps(this, data)\n     }\n   }\n "
            },
            {
                "commitId": "054c2c3de2976c8f87b7a52980bc89c12d3d90ee",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -42,9 +42,10 @@ function resolveSlots (vm, children) {\n function mergeParentAttrs (vm, data, parentData) {\n   if (parentData.attrs) {\n     const props = vm.$options.props\n+    const attrs = data.attrs || (data.attrs = [])\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n-        data.attrs[key] = parentData.attrs[key]\n+        attrs[key] = parentData.attrs[key]\n       }\n     }\n   }"
            },
            {
                "commitId": "1a35cf4a21e8c8e897c2d6f291b99376b12b9fac",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -19,13 +19,19 @@ export function initRender (vm) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n+    children = children.slice()\n     const slots = { default: children }\n     let i = children.length\n     let name, child\n     while (i--) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n-        (slots[name] || (slots[name] = [])).push(child)\n+        let slot = (slots[name] || (slots[name] = []))\n+        if (child.tag === 'template') {\n+          slot.push.apply(slot, child.children)\n+        } else {\n+          slot.push(child)\n+        }\n         children.splice(i, 1)\n       }\n     }\n@@ -123,7 +129,6 @@ export function renderMixin (Vue) {\n       mergeParentDirectives(this, data, _renderData)\n       updateParentCallbacks(this, data, _renderData)\n     }\n-    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "e9ae8187c2be7e03da425a23545b4523eca70c45",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -123,6 +123,7 @@ export function renderMixin (Vue) {\n       mergeParentDirectives(this, data, _renderData)\n       updateParentCallbacks(this, data, _renderData)\n     }\n+    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "4e86d3aba9d734bf2b50327933d221f3ceb522f2",
                "additions": 26,
                "deletions": 15,
                "patch": "@@ -10,10 +10,7 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n-  vm._renderData = vm.$options._renderData\n   vm.$slots = {}\n-  // props are set in initState\n-  resolveSlots(vm, vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -79,14 +76,15 @@ export function renderMixin (Vue) {\n     callHook(this, 'updated')\n   }\n \n-  Vue.prototype._tryUpdate = function (data, children) {\n-    this._renderData = data\n+  Vue.prototype._tryUpdate = function (data, children, key) {\n+    this.$options._renderKey = key\n+    this.$options._renderData = data\n+    this.$options._renderChildren = children\n     if (children) {\n-      resolveSlots(this, children)\n       this.$forceUpdate()\n       return\n     }\n-    // set props if they have changed.\n+    // set props - this will trigger update if any of them changed\n     const attrs = data && data.attrs\n     if (attrs) {\n       for (let key in this.$options.props) {\n@@ -101,17 +99,30 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._render = function () {\n+    const {\n+      render,\n+      _renderKey,\n+      _renderData,\n+      _renderChildren\n+    } = this.$options\n+    // resolve slots\n+    if (_renderChildren) {\n+      resolveSlots(this, _renderChildren)\n+    }\n+    // render\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const vnode = this.$options.render.call(this)\n-    const data = vnode.data\n-    const parentData = this._renderData\n-    if (parentData) {\n-      mergeParentAttrs(this, data, parentData)\n-      mergeParentDirectives(this, data, parentData)\n-      updateParentCallbacks(this, data, parentData)\n-    }\n+    const vnode = render.call(this)\n     renderState.activeInstance = prev\n+    // set key\n+    vnode.key = _renderKey\n+    // update parent data\n+    if (_renderData) {\n+      const data = vnode.data\n+      mergeParentAttrs(this, data, _renderData)\n+      mergeParentDirectives(this, data, _renderData)\n+      updateParentCallbacks(this, data, _renderData)\n+    }\n     return vnode\n   }\n "
            },
            {
                "commitId": "be9e16e20fce0d6c9b5ab72be02894dc05a2734f",
                "additions": 16,
                "deletions": 5,
                "patch": "@@ -1,6 +1,6 @@\n import Watcher from '../observer/watcher'\n import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n-import { createElement, patch } from '../vdom/index'\n+import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export const renderState = {\n@@ -36,8 +36,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function mergeParentData (vm, data, parentData) {\n-  // attrs\n+function mergeParentAttrs (vm, data, parentData) {\n   if (parentData.attrs) {\n     const props = vm.$options.props\n     for (let key in parentData.attrs) {\n@@ -46,12 +45,22 @@ function mergeParentData (vm, data, parentData) {\n       }\n     }\n   }\n-  // directives\n+}\n+\n+function mergeParentDirectives (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.conact(data.directives || [])\n   }\n }\n \n+function updateParentCallbacks (vm, data, parentData) {\n+  if (parentData.on) {\n+    updateListeners(parentData.on, data.on || {}, (event, handler) => {\n+      vm.$on(event, handler)\n+    })\n+  }\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -98,7 +107,9 @@ export function renderMixin (Vue) {\n     const data = vnode.data\n     const parentData = this._renderData\n     if (parentData) {\n-      mergeParentData(this, data, parentData)\n+      mergeParentAttrs(this, data, parentData)\n+      mergeParentDirectives(this, data, parentData)\n+      updateParentCallbacks(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n     return vnode"
            },
            {
                "commitId": "56073ca8532d90706cd50b8a3177011093b01675",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -77,14 +77,16 @@ export function renderMixin (Vue) {\n       this.$forceUpdate()\n       return\n     }\n-    // set props. because props are reactive,\n-    // if any of them has changed it will trigger an update.\n+    // set props if they have changed.\n     const attrs = data && data.attrs\n     if (attrs) {\n       for (let key in this.$options.props) {\n-        this[key] = hasOwn(attrs, key)\n+        let newVal = hasOwn(attrs, key)\n           ? attrs[key]\n           : attrs[hyphenate(key)]\n+        if (this[key] !== newVal) {\n+          this[key] = newVal\n+        }\n       }\n     }\n   }\n@@ -99,7 +101,6 @@ export function renderMixin (Vue) {\n       mergeParentData(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n-    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "48f328bcaf2ebcc256d1c9114cf9cc2da54f15ae",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -99,6 +99,7 @@ export function renderMixin (Vue) {\n       mergeParentData(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n+    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "5c1063a5e4167d1938febc4d4fd4f4edee260505",
                "additions": 7,
                "deletions": 12,
                "patch": "@@ -77,19 +77,14 @@ export function renderMixin (Vue) {\n       this.$forceUpdate()\n       return\n     }\n-    // check props\n-    if (data && data.attrs) {\n-      let changed = false\n+    // set props. because props are reactive,\n+    // if any of them has changed it will trigger an update.\n+    const attrs = data && data.attrs\n+    if (attrs) {\n       for (let key in this.$options.props) {\n-        let oldVal = this[key]\n-        let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n-        if (oldVal !== newVal) {\n-          this[key] = newVal\n-          changed = true\n-        }\n-      }\n-      if (changed) {\n-        this.$forceUpdate()\n+        this[key] = hasOwn(attrs, key)\n+          ? attrs[key]\n+          : attrs[hyphenate(key)]\n       }\n     }\n   }"
            },
            {
                "commitId": "5970dbd2f5694efb1328789f4f0f83d89a5e4beb",
                "additions": 6,
                "deletions": 12,
                "patch": "@@ -20,16 +20,6 @@ export function initRender (vm) {\n   }\n }\n \n-export function setProps (vm, data) {\n-  const attrs = (data && data.attrs) || {}\n-  const props = vm.$options.props\n-  if (props) {\n-    for (let key in props) {\n-      vm[key] = attrs[key]\n-    }\n-  }\n-}\n-\n function resolveSlots (vm, children) {\n   if (children) {\n     const slots = { default: children }\n@@ -89,14 +79,18 @@ export function renderMixin (Vue) {\n     }\n     // check props\n     if (data && data.attrs) {\n-      setProps(this, data)\n+      let changed = false\n       for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n         if (oldVal !== newVal) {\n-          this.$forceUpdate()\n+          this[key] = newVal\n+          changed = true\n         }\n       }\n+      if (changed) {\n+        this.$forceUpdate()\n+      }\n     }\n   }\n "
            },
            {
                "commitId": "8218eae1f91ab3d777b594821c55a687f647ca9b",
                "additions": 39,
                "deletions": 9,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hyphenate } from '../util/index'\n+import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n@@ -11,18 +11,28 @@ export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm._renderData = vm.$options._renderData\n-  vm.$slots = resolveSlots(vm.$options._renderChildren)\n+  vm.$slots = {}\n+  // props are set in initState\n+  resolveSlots(vm, vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n   }\n }\n \n-function resolveSlots (children) {\n-  const slots = {\n-    default: children\n+export function setProps (vm, data) {\n+  const attrs = (data && data.attrs) || {}\n+  const props = vm.$options.props\n+  if (props) {\n+    for (let key in props) {\n+      vm[key] = attrs[key]\n+    }\n   }\n+}\n+\n+function resolveSlots (vm, children) {\n   if (children) {\n+    const slots = { default: children }\n     let i = children.length\n     let name, child\n     while (i--) {\n@@ -32,8 +42,24 @@ function resolveSlots (children) {\n         children.splice(i, 1)\n       }\n     }\n+    vm.$slots = slots\n+  }\n+}\n+\n+function mergeParentData (vm, data, parentData) {\n+  // attrs\n+  if (parentData.attrs) {\n+    const props = vm.$options.props\n+    for (let key in parentData.attrs) {\n+      if (!hasOwn(props, key)) {\n+        data.attrs[key] = parentData.attrs[key]\n+      }\n+    }\n+  }\n+  // directives\n+  if (parentData.directives) {\n+    data.directives = parentData.directives.conact(data.directives || [])\n   }\n-  return slots\n }\n \n export function renderMixin (Vue) {\n@@ -56,13 +82,14 @@ export function renderMixin (Vue) {\n \n   Vue.prototype._tryUpdate = function (data, children) {\n     this._renderData = data\n-    this.$slots = resolveSlots(children)\n     if (children) {\n+      resolveSlots(this, children)\n       this.$forceUpdate()\n       return\n     }\n     // check props\n     if (data && data.attrs) {\n+      setProps(this, data)\n       for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n@@ -77,8 +104,11 @@ export function renderMixin (Vue) {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n     const vnode = this.$options.render.call(this)\n-    // merge parent data\n-    // TODO\n+    const data = vnode.data\n+    const parentData = this._renderData\n+    if (parentData) {\n+      mergeParentData(this, data, parentData)\n+    }\n     renderState.activeInstance = prev\n     return vnode\n   }"
            },
            {
                "commitId": "d6c5abbf35af32ee6a166fc3e63e2b25343a0a61",
                "additions": 33,
                "deletions": 10,
                "patch": "@@ -10,13 +10,32 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n-  // TODO: handle _renderData and _renderChildren\n+  vm._renderData = vm.$options._renderData\n+  vm.$slots = resolveSlots(vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n   }\n }\n \n+function resolveSlots (children) {\n+  const slots = {\n+    default: children\n+  }\n+  if (children) {\n+    let i = children.length\n+    let name, child\n+    while (i--) {\n+      child = children[i]\n+      if ((name = child.data && child.data.slot)) {\n+        (slots[name] || (slots[name] = [])).push(child)\n+        children.splice(i, 1)\n+      }\n+    }\n+  }\n+  return slots\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -36,8 +55,9 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._tryUpdate = function (data, children) {\n+    this._renderData = data\n+    this.$slots = resolveSlots(children)\n     if (children) {\n-      // TODO: handle content slots\n       this.$forceUpdate()\n       return\n     }\n@@ -53,20 +73,23 @@ export function renderMixin (Vue) {\n     }\n   }\n \n+  Vue.prototype._render = function () {\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const vnode = this.$options.render.call(this)\n+    // merge parent data\n+    // TODO\n+    renderState.activeInstance = prev\n+    return vnode\n+  }\n+\n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n     this.$el = el && query(el)\n     if (this.$el) {\n       this.$el.innerHTML = ''\n     }\n-    const render = this.$options.render\n-    this._watcher = new Watcher(this, () => {\n-      const prev = renderState.activeInstance\n-      renderState.activeInstance = this\n-      const vnode = render.call(this)\n-      renderState.activeInstance = prev\n-      return vnode\n-    }, this._update)\n+    this._watcher = new Watcher(this, this._render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true"
            },
            {
                "commitId": "84ce91df72928f622ba993ee89e41a642eb92fb0",
                "additions": 6,
                "deletions": 4,
                "patch": "@@ -3,7 +3,9 @@ import { query, resolveAsset, hyphenate } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n-export const target = { _: null }\n+export const renderState = {\n+  activeInstance: null\n+}\n \n export function initRender (vm) {\n   vm._vnode = null\n@@ -59,10 +61,10 @@ export function renderMixin (Vue) {\n     }\n     const render = this.$options.render\n     this._watcher = new Watcher(this, () => {\n-      const prev = target._\n-      target._ = this\n+      const prev = renderState.activeInstance\n+      renderState.activeInstance = this\n       const vnode = render.call(this)\n-      target._ = prev\n+      renderState.activeInstance = prev\n       return vnode\n     }, this._update)\n     this._update(this._watcher.value)"
            },
            {
                "commitId": "8bc6915ce129b7642121c8462222d375343b9d3a",
                "additions": 10,
                "deletions": 1,
                "patch": "@@ -3,6 +3,8 @@ import { query, resolveAsset, hyphenate } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n+export const target = { _: null }\n+\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n@@ -55,7 +57,14 @@ export function renderMixin (Vue) {\n     if (this.$el) {\n       this.$el.innerHTML = ''\n     }\n-    this._watcher = new Watcher(this, this.$options.render, this._update)\n+    const render = this.$options.render\n+    this._watcher = new Watcher(this, () => {\n+      const prev = target._\n+      target._ = this\n+      const vnode = render.call(this)\n+      target._ = prev\n+      return vnode\n+    }, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true"
            },
            {
                "commitId": "058c555dac875d1c979b92ccaeb36412d6912c82",
                "additions": 2,
                "deletions": 3,
                "patch": "@@ -38,9 +38,8 @@ export function renderMixin (Vue) {\n       return\n     }\n     // check props\n-    const props = this.$options.props\n-    if (props && data && data.attrs) {\n-      for (let key in props) {\n+    if (data && data.attrs) {\n+      for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n         if (oldVal !== newVal) {"
            },
            {
                "commitId": "5c3edf850bcf7dacf0fd4d6b625fce2e937ebe93",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -39,7 +39,7 @@ export function renderMixin (Vue) {\n     }\n     // check props\n     const props = this.$options.props\n-    if (props && data.attrs) {\n+    if (props && data && data.attrs) {\n       for (let key in props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]"
            },
            {
                "commitId": "f2c8880041bd845b4af28ed20e2f67c2e2c8d6ff",
                "additions": 35,
                "deletions": 11,
                "patch": "@@ -1,10 +1,12 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset } from '../util/index'\n-import { h, patch } from '../vdom/index'\n+import { query, resolveAsset, hyphenate } from '../util/index'\n+import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n+  vm._vnode = null\n   vm._mounted = false\n+  // TODO: handle _renderData and _renderChildren\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -13,33 +15,55 @@ export function initRender (vm) {\n \n export function renderMixin (Vue) {\n   // shorthands used in render functions\n-  Vue.prototype.__h__ = h\n+  Vue.prototype.__h__ = createElement\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n-  Vue.prototype._update = function (vtree) {\n+  Vue.prototype._update = function (vnode) {\n     callHook(this, 'beforeUpdate')\n-    if (!this._tree) {\n-      this.$el = patch(this.$el, vtree)\n+    if (!this._vnode) {\n+      this.$el = patch(this.$el, vnode)\n     } else {\n-      this.$el = patch(this._tree, vtree)\n+      this.$el = patch(this._vnode, vnode)\n     }\n-    this._tree = vtree\n+    this._vnode = vnode\n     callHook(this, 'updated')\n   }\n \n+  Vue.prototype._tryUpdate = function (data, children) {\n+    if (children) {\n+      // TODO: handle content slots\n+      this.$forceUpdate()\n+      return\n+    }\n+    // check props\n+    const props = this.$options.props\n+    if (props && data.attrs) {\n+      for (let key in props) {\n+        let oldVal = this[key]\n+        let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n+        if (oldVal !== newVal) {\n+          this.$forceUpdate()\n+        }\n+      }\n+    }\n+  }\n+\n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n-    this.$el = el ? query(el) : document.createElement('div')\n-    this.$el.innerHTML = ''\n+    this.$el = el && query(el)\n+    if (this.$el) {\n+      this.$el.innerHTML = ''\n+    }\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true\n+    return this\n   }\n \n   Vue.prototype.$forceUpdate = function () {\n-    this._watcher.run()\n+    this._watcher.update()\n   }\n }"
            },
            {
                "commitId": "0b5e962943e88d6b5bc7b5c06851b2983d6201be",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -4,6 +4,7 @@ import { h, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n+  vm._mounted = false\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -35,6 +36,7 @@ export function renderMixin (Vue) {\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n+    this._mounted = true\n   }\n \n   Vue.prototype.$forceUpdate = function () {"
            },
            {
                "commitId": "8cf836f2ecb876a17305287cb18e7009555c11f3",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query } from '../util/index'\n+import { query, resolveAsset } from '../util/index'\n import { h, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n@@ -11,7 +11,11 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  // shorthands used in render functions\n   Vue.prototype.__h__ = h\n+  Vue.prototype.__d__ = function (id) {\n+    return resolveAsset(this.$options, 'directives', id, true)\n+  }\n \n   Vue.prototype._update = function (vtree) {\n     callHook(this, 'beforeUpdate')"
            },
            {
                "commitId": "914da492bf456de05205d0a0f82ecc4aa8719f6b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -16,9 +16,9 @@ export function renderMixin (Vue) {\n   Vue.prototype._update = function (vtree) {\n     callHook(this, 'beforeUpdate')\n     if (!this._tree) {\n-      patch(this.$el, vtree)\n+      this.$el = patch(this.$el, vtree)\n     } else {\n-      patch(this._tree, vtree)\n+      this.$el = patch(this._tree, vtree)\n     }\n     this._tree = vtree\n     callHook(this, 'updated')"
            },
            {
                "commitId": "0694a9bfb63350d2cb7ed992fee82e6a632ec74a",
                "additions": 5,
                "deletions": 0,
                "patch": "@@ -1,6 +1,7 @@\n import Watcher from '../observer/watcher'\n import { query } from '../util/index'\n import { h, patch } from '../vdom/index'\n+import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n   const el = vm.$options.el\n@@ -13,19 +14,23 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = h\n \n   Vue.prototype._update = function (vtree) {\n+    callHook(this, 'beforeUpdate')\n     if (!this._tree) {\n       patch(this.$el, vtree)\n     } else {\n       patch(this._tree, vtree)\n     }\n     this._tree = vtree\n+    callHook(this, 'updated')\n   }\n \n   Vue.prototype.$mount = function (el) {\n+    callHook(this, 'beforeMount')\n     this.$el = el ? query(el) : document.createElement('div')\n     this.$el.innerHTML = ''\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n+    callHook(this, 'mounted')\n   }\n \n   Vue.prototype.$forceUpdate = function () {"
            },
            {
                "commitId": "0e1ac079198044f22ea6c92d669a9a5f2336e9e0",
                "additions": 12,
                "deletions": 6,
                "patch": "@@ -3,25 +3,31 @@ import { query } from '../util/index'\n import { h, patch } from '../vdom/index'\n \n export function initRender (vm) {\n-  const options = vm.$options\n-  vm._el = query(options.el)\n-  vm._el.innerHTML = ''\n-  vm._watcher = new Watcher(vm, options.render, vm._update)\n-  vm._update(vm._watcher.value)\n+  const el = vm.$options.el\n+  if (el) {\n+    vm.$mount(el)\n+  }\n }\n \n export function renderMixin (Vue) {\n   Vue.prototype.__h__ = h\n \n   Vue.prototype._update = function (vtree) {\n     if (!this._tree) {\n-      patch(this._el, vtree)\n+      patch(this.$el, vtree)\n     } else {\n       patch(this._tree, vtree)\n     }\n     this._tree = vtree\n   }\n \n+  Vue.prototype.$mount = function (el) {\n+    this.$el = el ? query(el) : document.createElement('div')\n+    this.$el.innerHTML = ''\n+    this._watcher = new Watcher(this, this.$options.render, this._update)\n+    this._update(this._watcher.value)\n+  }\n+\n   Vue.prototype.$forceUpdate = function () {\n     this._watcher.run()\n   }"
            },
            {
                "commitId": "b5800b274c472897e64184ea716566422b3046cb",
                "additions": 28,
                "deletions": 0,
                "patch": "@@ -0,0 +1,28 @@\n+import Watcher from '../observer/watcher'\n+import { query } from '../util/index'\n+import { h, patch } from '../vdom/index'\n+\n+export function initRender (vm) {\n+  const options = vm.$options\n+  vm._el = query(options.el)\n+  vm._el.innerHTML = ''\n+  vm._watcher = new Watcher(vm, options.render, vm._update)\n+  vm._update(vm._watcher.value)\n+}\n+\n+export function renderMixin (Vue) {\n+  Vue.prototype.__h__ = h\n+\n+  Vue.prototype._update = function (vtree) {\n+    if (!this._tree) {\n+      patch(this._el, vtree)\n+    } else {\n+      patch(this._tree, vtree)\n+    }\n+    this._tree = vtree\n+  }\n+\n+  Vue.prototype.$forceUpdate = function () {\n+    this._watcher.run()\n+  }\n+}"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "give me all the commits for vnode.js file?",
        "number": 6,
        "category": 2,
        "response": "Here are all the commits for the `vnode.js` file, ordered by their committed date from most recent to oldest:\n\n1. Commit ID: 9949ab5d14e3620f40b876cffbc710a33d0237b2\n   - Message: \"Merge pull request #3 from dwelch2344/move_to_typescript\\n\\nWIP: typescript love on the tests\"\n   - Date: 2022-05-04T21:25:34Z\n\n2. Commit ID: 40dccfedd1d92ef9d61ee350ed8fbd7fc525b5b9\n   - Message: \"chore: fix test harness; most of the tooling + test harness is happy; coverage still needs fixing\"\n   - Date: 2022-05-03T17:04:55Z\n\n3. Commit ID: 982d5a492fb95577217e2dacaa044eabe78a8601\n   - Message: \"fix(types): support string type for style in VNode data (#9728)\\n\\nfix #9727\"\n   - Date: 2019-03-18T07:47:43Z\n\n4. Commit ID: dbc0582587f90e78867809bb6ae683301cd0626b\n   - Message: \"feat: dynamic directive arguments for v-on, v-bind and custom directives (#9373)\"\n   - Date: 2019-01-26T04:22:44Z\n\n5. Commit ID: 097f6229dffc34af452b106ad2a3b58845588807\n   - Message: \"fix(core): avoid mutating original children when cloning vnode\\n\\nThe on-demand clone strategy introduced in 956756b mutates the owner\\narray of the cloned vnode. This causes the newly cloned vnode to be\\ndestroyed when the parent node is destroyed. This is fixed by cloning\\nthe children array when cloning a vnode.\\n\\nfix #7975\"\n   - Date: 2018-12-01T22:05:36Z\n\n6. Commit ID: 4ecc21c29ec12bb33d3b426cb4d42c579e9b0f2d\n   - Message: \"feat(devtools): store functional render context on vnode in development (#8586)\"\n   - Date: 2018-11-30T22:31:44Z\n\n7. Commit ID: 8227fb35240ab1f301c30a6ad5d4d25071fa7996\n   - Message: \"fix: add missing `asyncMeta` during VNode cloning (#7861)\"\n   - Date: 2018-03-23T23:13:10Z\n\n8. Commit ID: d7d9b002fd60d246b1ef65f71b55b45f46563b4d\n   - Message: \"chore: fix typo (#7781)\"\n   - Date: 2018-03-09T13:54:55Z\n\n9. Commit ID: 956756b1be7084daf8b6afb92ac0da7c24cde2a5\n   - Message: \"refactor: use more efficient on-demand clone to handle reused node edge cases\\n\\nremoves unnecessary slot/static node clones, fix #7292\"\n   - Date: 2017-12-21T00:44:24Z\n\n10. Commit ID: 604e081d0456ed136b24b5f759c608d153dfae93\n    - Message: \"fix: ensure functionalContext is cloned during slot clones\\n\\nfix #7106\"\n    - Date: 2017-11-22T21:37:24Z\n\n11. Commit ID: 1cf02efda206185cb72bbaafb00037fa6269e3f3\n    - Message: \"fix: also clone component slot children during deepClone\\n\\nfix #6891, fix #6915\"\n    - Date: 2017-10-26T16:00:19Z\n\n12. Commit ID: 53431c63a9033bb9a73c915bca8525f0d7988c26\n    - Message: \"types: fix flow typing\"\n    - Date: 2017-10-11T15:24:39Z\n\n13. Commit ID: 421658884f7ca786747abf9b89e00925fdfdfba8\n    - Message: \"fix: fix scoped CSS for nested nodes in functional components\"\n    - Date: 2017-10-11T15:17:46Z\n\n14. Commit ID: 050bb33f9b02589357c037623ea8cbf8ff13555b\n    - Message: \"feat: scoped CSS support for functional components\"\n    - Date: 2017-10-11T14:38:46Z\n\n15. Commit ID: 53463619e5d19d35dfad1a4245a8dc583681feb3\n    - Message: \"perf: deep clone slot vnodes on re-render (#6478)\\n\\navoid unnecessary assignment.\"\n    - Date: 2017-09-01T16:14:55Z\n\n16. Commit ID: 0529040c17b8632032a43d142aac88386f6b4a1f\n    - Message: \"fix: deep clone slot vnodes on re-render\\n\\nfix #6372\"\n    - Date: 2017-08-29T22:47:10Z\n\n17. Commit ID: 11614d63b7862b68b11cc45c0891437c62a832d7\n    - Message: \"feat(v-on): support v-on object syntax with no arguments\\n\\nNote this does not support modifiers and is meant to be used for handling\\nevents proxying in higher-order-components.\"\n    - Date: 2017-07-11T08:36:04Z\n\n18. Commit ID: fed602b90be89a43b4ec41b5a2e0a526d3a5f4a2\n    - Message: \"refactor: also clone vnode.asyncFactory\"\n    - Date: 2017-07-11T05:06:23Z\n\n19. Commit ID: e4da249ab8ef32a0b8156c840c9d2b9773090f8a\n    - Message: \"feat: add `comments` option to allow preserving comments in template  (#5951)\\n\\nclose #5392\"\n    - Date: 2017-06-30T00:56:23Z\n\n20. Commit ID: d33c1250ee77dd337eb4979851ade331f177b890\n    - Message: \"fix:when using object syntax in v-bind, special attribute have no effect\"\n    - Date: 2017-06-16T18:02:37Z\n\n21. Commit ID: 9cf6646f46ef3c13236677e58e72d2c6dd5c8abf\n    - Message: \"support directly rendering async components in SSR\"\n    - Date: 2017-05-24T08:50:17Z\n\n22. Commit ID: 7404091896fda2c87ecac64efc24324ff1885e2c\n    - Message: \"support async hydration\"\n    - Date: 2017-05-24T08:50:17Z\n\n23. Commit ID: 43485fbc5b779e02122c3b7fc64296a2cfee31f6\n    - Message: \"Merge branch ssr-optimize into dev\"\n    - Date: 2017-05-18T08:56:05Z\n\n24. Commit ID: 26953f5cacc03440df394ebbc74023efd364b7e0\n    - Message: \"add semis to flow decls for better syntax highlighting\"\n    - Date: 2017-05-15T08:01:30Z\n\n25. Commit ID: 0ccefff794c5fe73b80b9faf5ae5bfd8ec1a500f\n    - Message: \"support v-for on scoped slots (fix #5615)\"\n    - Date: 2017-05-09T15:22:55Z\n\n26. Commit ID: 5d965d5b3bbe0e76cdb97e41e01a704322253e09\n    - Message: \"clone `isComment` when cloneVNode (#5633)\"\n    - Date: 2017-05-09T13:12:59Z\n\n27. Commit ID: 1073035164b809872bf35a3b007848979f86f48a\n    - Message: \"fix activate hook call timing (fix vue-router#1212)\"\n    - Date: 2017-04-07T07:30:37Z\n\n28. Commit ID: a12d32a56df2519c9cdf8d2da9d9425876263f89\n    - Message: \"fix style diffing on cached/slot elements (fix #5318)\"\n    - Date: 2017-04-03T06:13:57Z\n\n29. Commit ID: 2afaac2b397b4b04713488aeb62e5e222e5dc121\n    - Message: \"cache vnodes length (#5125)\"\n    - Date: 2017-03-08T02:24:25Z\n\n30. Commit ID: 9d6c8ec268f659a715e3b38c97a1e03964961703\n    - Message: \"feat: allow customization of component v-model prop/event via model option (close #4515)\"\n    - Date: 2017-01-22T19:31:43Z\n\n31. Commit ID: fe02bc3a27b3b33f9467980f61126edf97105287\n    - Message: \"ignore deprecated alias\"\n    - Date: 2017-01-12T23:24:37Z\n\n32. Commit ID: ced2dfc8f704b07cd59467eca38c58c590d0c012\n    - Message: \"expose vnode.child for backwards compat, update .flowconfig & ts types\"\n    - Date: 2017-01-12T23:04:36Z\n\n33. Commit ID: 30258a9a60b96c25c95685cb17ee35838830ee4c\n    - Message: \"rename vnode.child -> vnode.componentInstance\"\n    - Date: 2017-01-12T22:44:19Z\n\n34. Commit ID: 207c18c47f8c94f6d92675b28bc67511b7897246\n    - Message: \"further reduce normalizeChildren usage\"\n    - Date: 2016-12-05T01:36:40Z\n\n35. Commit ID: 7c3c86f36044ada983c09e7733841cb4c55de9d1\n    - Message: \"fix namespace hoisting\"\n    - Date: 2016-12-05T01:36:40Z\n\n36. Commit ID: 79e1058799dcde0b7e341ef44b590ecbf1e3a722\n    - Message: \"wip: refactor compiler to skip normalization when possible\\n\\nwip fix\\n\\nwip fix\\n\\nwip fix\"\n    - Date: 2016-12-05T01:36:40Z\n\n37. Commit ID: 7431e4d16c92862ac74fdb3053de9295c809b586\n    - Message: \"emptyVNode -> createEmptyVNode\"\n    - Date: 2016-12-05T01:36:40Z\n\n38. Commit ID: 7b389bc34e12442663de1939882b523345a9e46d\n    - Message: \"avoid warning unknown custom elements in v-pre\"\n    - Date: 2016-11-24T17:47:27Z\n\n39. Commit ID: 303378f85b26934396e2f6dc0973f6982da2beb1\n    - Message: \"support default scoped slot + function children as scoped slot\"\n    - Date: 2016-11-20T17:03:43Z\n\n40. Commit ID: ff551029bf872ad067ac7c5ba7c6311fdde7c674\n    - Message: \"wip: fix flow type for weex merge\"\n    - Date: 2016-11-07T21:26:06Z\n\n41. Commit ID: b69b4a4eeff204488c3eb60cac951f9808581e1c\n    - Message: \"tweak style merge for performance\"\n    - Date: 2016-11-07T21:20:10Z\n\n42. Commit ID: e960cd104e67e8e410956fa589090fe171382528\n    - Message: \"enable style merge behavior between parent-child components (fix #3997) (#4138)\\n\\n* merge style between components\\r\\n\\r\\n* update test case\\r\\n\\r\\n* update style compiler\\r\\n\\r\\n* add paren to style binding code\\r\\n\\r\\n* update background property parsing\\r\\n\\r\\n* introduce interpolation warning and refactor var to const\"\n    - Date: 2016-11-07T21:19:48Z\n\n43. Commit ID: ec824be88e9bc71b31e5c4a43f80d921674dca66\n    - Message: \"fix v-once inside v-for (fix #3964)\"\n    - Date: 2016-11-03T02:34:36Z\n\n44. Commit ID: 0cd1489e68891e4ca532ce7299d09e8af5ae3f52\n    - Message: \".number modifier should work with select, radio, checkbox (fix #4018) (#4022)\\n\\n* support number modifier in select, radio, checkbox\\r\\n\\r\\n* add test case\\r\\n\\r\\n* add ASTModifier type to specify modifiers type\\r\\n\\r\\n* fix typo\\r\\n\\r\\n* keep code consistent\"\n    - Date: 2016-11-01T15:50:22Z\n\n45. Commit ID: 1a8720d6ead500eed5d40457a3e7f59fe8972472\n    - Message: \"Fix typo in component (#3978)\"\n    - Date: 2016-10-19T14:33:17Z\n\n46. Commit ID: 1fa3844dc26745b4cb855b0934bd1b132ba33d9b\n    - Message: \"refactor directive update implementation\"\n    - Date: 2016-10-12T00:31:13Z\n\n47. Commit ID: 3446d1485d36b91ef42c53268cb69ecb047538a5\n    - Message: \"support functional components as named slot (fix #3872)\"\n    - Date: 2016-10-11T02:41:14Z\n\n48. Commit ID: d6a7568891d0c3368471322de5d730172d92b9e4\n    - Message: \"improve v-bind implementation and make it work on components (fix #3670)\"\n    - Date: 2016-09-14T14:14:45Z\n\n49. Commit ID: f6b1a51729f705bc49c6eaaf32ec095efd97401c\n    - Message: \"fix hot-reload not updating static nodes\"\n    - Date: 2016-08-29T15:45:08Z\n\n50. Commit ID: 014d2f8599f9afc0754e603b1528a12e74bd209a\n    - Message: \"fix vdom patch edge case for static nodes being reused and as insertion reference node (fix #3533)\"\n    - Date: 2016-08-27T20:29:07Z\n\n51. Commit ID: ed2085974b2a385ca1fd8cd696917d6cda8322e7\n    - Message: \"ensure mergeVNodeHook does not inject duplicate hooks\"\n    - Date: 2016-08-26T23:19:51Z\n\n52. Commit ID: d2df58e547a7e1018c72a52714be7dee4ad06922\n    - Message: \"move v-show marker to runtime so that render functions work as expected (fix #3488)\"\n    - Date: 2016-08-20T15:14:41Z\n\n53. Commit ID: ba5fb31188467c9f07cdcfa94e9469e172098ec5\n    - Message: \"fix transition insert hook duplicate invocation on slot nodes (fix #3474)\"\n    - Date: 2016-08-18T16:00:31Z\n\n54. Commit ID: 18386c4cf4fe829f447687734a5bf03905d0db44\n    - Message: \"fix static nodes optimization inside v-for (fix #3406)\"\n    - Date: 2016-08-08T23:03:00Z\n\n55. Commit ID: fe801b16e4da63513bce95bfa762a8a36d83fe59\n    - Message: \"wip: fix $parent after children change\"\n    - Date: 2016-08-05T16:43:35Z\n\n56. Commit ID: b5b963f51df1fa3124cd8a9846be5455408bc52a\n    - Message: \"wip: refactor children resolution (remove thunk mechanism)\"\n    - Date: 2016-08-05T16:10:13Z\n\n57. Commit ID: c66b7566c682af653dc475fab1475db5484e40ee\n    - Message: \"fix flow\"\n    - Date: 2016-08-05T07:10:40Z\n\n58. Commit ID: 59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8\n    - Message: \"support class/style in v-bind object\"\n    - Date: 2016-08-05T06:59:33Z\n\n59. Commit ID: 351aef3cb4ada980f105f98f8b835876e8d4d689\n    - Message: \"use comment node as empty placeholder (fix <transition> SSR hydration)\"\n    - Date: 2016-08-05T05:52:09Z\n\n60. Commit ID: 40b93e6527d9ecdb308925114bf14cb60b36eae0\n    - Message: \"avoid unnecessary enter transitions on nested inserted elements\"\n    - Date: 2016-08-05T02:17:59Z\n\n61. Commit ID: 35ee5b105e8a517571b9bb9a87160c6ffbdad779\n    - Message: \"remove staticAttrs\"\n    - Date: 2016-07-29T14:45:43Z\n\n62. Commit ID: 74f8b98509d24487e1a8d1588b4128a7a1046a41\n    - Message: \"handle static vnodes properly during patch (fix #3325)\"\n    - Date: 2016-07-26T19:49:40Z\n\n63. Commit ID: 3ce450b6dc5f2135266c8a38818371e9d4f1f460\n    - Message: \"use more proper flow type syntax\"\n    - Date: 2016-07-26T01:28:46Z\n\n64. Commit ID: ea9c6c37c3ef0ef3706afa94070b89a7464c559c\n    - Message: \"support v-on .native modifier on components\"\n    - Date: 2016-07-19T22:56:10Z\n\n65. Commit ID: 69ecdcb05e3f5db32af889962fe8253d49d7390d\n    - Message: \"rename vnode.data.props -> domProps\"\n    - Date: 2016-07-19T21:52:10Z\n\n66. Commit ID: e6871a33c17fd7dfd58fba6c7c6b6182f0ff2f0e\n    - Message: \"update flow annotations\"\n    - Date: 2016-07-15T21:48:42Z\n\n67. Commit ID: 9421bd48066906e20052e04cf88c4ae623080a95\n    - Message: \"extract getRealChild for abstract components\"\n    - Date: 2016-07-06T21:07:46Z\n\n68. Commit ID: 06b470369a7bde2a7f36468191e424b4c455db67\n    - Message: \"element namespace should be resolved at runtime for render function / jsx usage\"\n    - Date: 2016-06-27T18:02:14Z\n\n69. Commit ID: 1b3b19491fd47f3634e30d7fcce991881de16530\n    - Message: \"merge renderElement and renderElementWithChildren\"\n    - Date: 2016-06-27T16:25:02Z\n\n70. Commit ID: cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9\n    - Message: \"apply scopeId to slot contents too\"\n    - Date: 2016-06-15T17:33:12Z\n\n71. Commit ID: b0ad94fc876826a8ee3226320aacd40b8967f8dd\n    - Message: \"properly encode HTML in server-side rendering (fix #3078)\"\n    - Date: 2016-06-14T18:15:41Z\n\n72. Commit ID: a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6\n    - Message: \"fix whitespace vnode identity breaking patch (fix #3043)\"\n    - Date: 2016-06-08T17:28:55Z\n\n73. Commit ID: a5a9dc9b694da007a13bd5adfd64b0ab0750ad57\n    - Message: \"support keep-alive\"\n    - Date: 2016-06-04T14:53:05Z\n\n74. Commit ID: 4bcdce895c5dc0403b6a94b0ad71b2bc57734234\n    - Message: \"record original tag name on vnode for components using is attribute\"\n    - Date: 2016-06-02T22:18:32Z\n\n75. Commit ID: d40ab0ca8760b9d8ec8be630e2360e6927ba8b3e\n    - Message: \"fix component client-side hydration\"\n    - Date: 2016-06-01T22:20:13Z\n\n76. Commit ID: f8cfc81826715b23dac054b6d1727594d2caeebd\n    - Message: \"remove unnecessary v-pre related code\"\n    - Date: 2016-06-01T19:03:09Z\n\n77. Commit ID: 8d229b2442e8cc5b2801fa55a4ea8ea766721381\n    - Message: \"support v-bind on objects\"\n    - Date: 2016-05-25T00:41:06Z\n\n78. Commit ID: 7f85acb4e5c28052e07d5e2c4cf2903cac0e4bd5\n    - Message: \"expose oldValue on directive bindings\"\n    - Date: 2016-05-24T22:28:17Z\n\n79. Commit ID: 48f22c9b17a9def00dcfa4899fee9e60c8933dbc\n    - Message: \"fix flow error\"\n    - Date: 2016-05-24T04:27:18Z\n\n80. Commit ID: 837853d95ad1224ed12ba2454b791591884caf2e\n    - Message: \"better inferring of component names in warnings\"\n    - Date: 2016-05-19T17:58:11Z\n\n81. Commit ID: 20fb79a1ea098bedda6fec8bebbb184ac51fce20\n    - Message: \"new render mechanism (#2857)\\n\\n* updated compiler with new render functions\\r\\n\\r\\n* separated createElement into renderSelf & renderElement\\r\\nsupported getters for text node & static root\\r\\n\\r\\n* adapted new element creator into render call\\r\\n\\r\\n* improved \\\\$createElement\\r\\n\\r\\n* fixed by flow check\\r\\n\\r\\n* fixed ssr bugs for $createElement\"\n    - Date: 2016-05-14T19:49:18Z\n\n82. Commit ID: 750bec1024478022453277a4d175cff5a8445672\n    - Message: \"annotate platforms/web\"\n    - Date: 2016-05-14T11:40:56Z\n\n83. Commit ID: 59fcd4e7a749561ad6acf3ec50c32c24b33d8ec4\n    - Message: \"finish annotating vdom\"\n    - Date: 2016-05-14T07:38:41Z\n\n84. Commit ID: 45d96c7dbc399696138c9d020e13f97cf94ce181\n    - Message: \"annotation for vdom (wip)\"\n    - Date: 2016-05-14T07:08:21Z\n\n85. Commit ID: 354ea616b5ec4826e23a88465e404fd3b382d9f4\n    - Message: \"annotate Vue class\"\n    - Date: 2016-05-12T23:13:38Z\n\n86. Commit ID: 6593be9f75ea229e71e5b0530bb0f27aeee57afc\n    - Message: \"update unit tests convention + basic component tests\"\n    - Date: 2016-05-09T22:08:18Z\n\n87. Commit ID: f4a2afb3b33991c1694e8fcb7d62641c30eeaf53\n    - Message: \"expose context on vnode, simplify render methods\"\n    - Date: 2016-04-25T03:31:07Z\n\n88. Commit ID: 955e2f839175fadbd0218f7b78c48ebbbcca6349\n    - Message: \"restructure (build pass)\"\n    - Date: 2016-04-23T20:12:19Z\n\n89. Commit ID: ec5bcefca73160e6d283b8a0c4e1457f42f87081\n    - Message: \"tweak namespace changes\"\n    - Date: 2016-04-23T17:37:47Z\n\n90. Commit ID: 6e251e0721b4dbb4896999df78450d912dcba30d\n    - Message: \"Change svg parameter to namespace (#3)\\n\\n* change svg parameter into namespace\\r\\n\\r\\n* fixed svg to namespace bug\\r\\n\\r\\n* change svg detecting into namespace detecting in parser\\r\\n\\r\\n* fixed eslint error\"\n    - Date: 2016-04-23T17:29:31Z\n\n91. Commit ID: 9a347e02b4b1fd8ddc51db6c2ba08a1831f4dfd0\n    - Message: \"allow data to be undefined\"\n    - Date: 2016-04-21T16:37:12Z\n\n92. Commit ID: d87987780a208fe3c65415a4a1cab58250ffa9a3\n    - Message: \"rename\"\n    - Date: 2016-04-21T08:24:26Z\n\n93. Commit ID: 1a35cf4a21e8c8e897c2d6f291b99376b12b9fac\n    - Message: \"support template slot\"\n    - Date: 2016-04-15T02:55:29Z\n\n94. Commit ID: 0ab0600599dcc593695560382af1c1a8119ce848\n    - Message: \"restructure\"\n    - Date: 2016-04-12T23:42:15Z\n\n95. Commit ID: 69e94eb453ee0da21f9a0506d2f01269865a4776\n    - Message: \"move flatten into vdom implementation\"\n    - Date: 2016-04-11T03:54:53Z\n\n96. Commit ID: a879ec06ef9504db8df2a19aac0d07609fe36131\n    - Message: \"init\"\n    - Date: 2016-04-11T02:47:28Z\n\nThese commits detail the changes made to the `vnode.js` file over time, including bug fixes, feature additions, and refactoring efforts.",
        "chain_of_thought": "To address the question, \"give me all the commits for vnode.js file,\" we need to identify the relevant nodes and relationships in the schema. The file in question is \"vnode.js,\" which corresponds to the File node. We are interested in finding all the commits associated with this file, which involves the Commit node. The relationship between Commit and File is the changed relationship, which indicates that a commit has modified a file.\n\nHere's how we can construct the query:\n\n1. Identify the File node with the name \"vnode.js.\"\n2. Find all Commit nodes that have a changed relationship with this File node.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'vnode.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\nORDER BY c.committedDate DESC\n```\n\nThis query will return all commits that have modified the file \"vnode.js,\" along with their commit IDs, messages, and committed dates, sorted by the committed date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'vnode.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\nORDER BY c.committedDate DESC\n",
        "result": [
            {
                "commitId": "9949ab5d14e3620f40b876cffbc710a33d0237b2",
                "commitMessage": "\"Merge pull request #3 from dwelch2344/move_to_typescript\n\nWIP: typescript love on the tests\"",
                "committedDate": "2022-05-04T21:25:34Z"
            },
            {
                "commitId": "40dccfedd1d92ef9d61ee350ed8fbd7fc525b5b9",
                "commitMessage": "\"chore: fix test harness; most of the tooling + test harness is happy; coverage still needs fixing\"",
                "committedDate": "2022-05-03T17:04:55Z"
            },
            {
                "commitId": "982d5a492fb95577217e2dacaa044eabe78a8601",
                "commitMessage": "\"fix(types): support string type for style in VNode data (#9728)\n\nfix #9727\"",
                "committedDate": "2019-03-18T07:47:43Z"
            },
            {
                "commitId": "dbc0582587f90e78867809bb6ae683301cd0626b",
                "commitMessage": "\"feat: dynamic directive arguments for v-on, v-bind and custom directives (#9373)\"",
                "committedDate": "2019-01-26T04:22:44Z"
            },
            {
                "commitId": "097f6229dffc34af452b106ad2a3b58845588807",
                "commitMessage": "\"fix(core): avoid mutating original children when cloning vnode\n\nThe on-demand clone strategy introduced in 956756b mutates the owner\narray of the cloned vnode. This causes the newly cloned vnode to be\ndestroyed when the parent node is destroyed. This is fixed by cloning\nthe children array when cloning a vnode.\n\nfix #7975\"",
                "committedDate": "2018-12-01T22:05:36Z"
            },
            {
                "commitId": "4ecc21c29ec12bb33d3b426cb4d42c579e9b0f2d",
                "commitMessage": "\"feat(devtools): store functional render context on vnode in development (#8586)\"",
                "committedDate": "2018-11-30T22:31:44Z"
            },
            {
                "commitId": "8227fb35240ab1f301c30a6ad5d4d25071fa7996",
                "commitMessage": "\"fix: add missing `asyncMeta` during VNode cloning (#7861)\"",
                "committedDate": "2018-03-23T23:13:10Z"
            },
            {
                "commitId": "d7d9b002fd60d246b1ef65f71b55b45f46563b4d",
                "commitMessage": "\"chore: fix typo (#7781)\"",
                "committedDate": "2018-03-09T13:54:55Z"
            },
            {
                "commitId": "956756b1be7084daf8b6afb92ac0da7c24cde2a5",
                "commitMessage": "\"refactor: use more efficient on-demand clone to handle reused node edge cases\n\nremoves unnecessary slot/static node clones, fix #7292\"",
                "committedDate": "2017-12-21T00:44:24Z"
            },
            {
                "commitId": "604e081d0456ed136b24b5f759c608d153dfae93",
                "commitMessage": "\"fix: ensure functionalContext is cloned during slot clones\n\nfix #7106\"",
                "committedDate": "2017-11-22T21:37:24Z"
            },
            {
                "commitId": "1cf02efda206185cb72bbaafb00037fa6269e3f3",
                "commitMessage": "\"fix: also clone component slot children during deepClone\n\nfix #6891, fix #6915\"",
                "committedDate": "2017-10-26T16:00:19Z"
            },
            {
                "commitId": "53431c63a9033bb9a73c915bca8525f0d7988c26",
                "commitMessage": "\"types: fix flow typing\"",
                "committedDate": "2017-10-11T15:24:39Z"
            },
            {
                "commitId": "421658884f7ca786747abf9b89e00925fdfdfba8",
                "commitMessage": "\"fix: fix scoped CSS for nested nodes in functional components\"",
                "committedDate": "2017-10-11T15:17:46Z"
            },
            {
                "commitId": "050bb33f9b02589357c037623ea8cbf8ff13555b",
                "commitMessage": "\"feat: scoped CSS support for functional components\"",
                "committedDate": "2017-10-11T14:38:46Z"
            },
            {
                "commitId": "53463619e5d19d35dfad1a4245a8dc583681feb3",
                "commitMessage": "\"perf: deep clone slot vnodes on re-render (#6478)\n\navoid unnecessary assignment.\"",
                "committedDate": "2017-09-01T16:14:55Z"
            },
            {
                "commitId": "0529040c17b8632032a43d142aac88386f6b4a1f",
                "commitMessage": "\"fix: deep clone slot vnodes on re-render\n\nfix #6372\"",
                "committedDate": "2017-08-29T22:47:10Z"
            },
            {
                "commitId": "11614d63b7862b68b11cc45c0891437c62a832d7",
                "commitMessage": "\"feat(v-on): support v-on object syntax with no arguments\n\nNote this does not support modifiers and is meant to be used for handling\nevents proxying in higher-order-components.\"",
                "committedDate": "2017-07-11T08:36:04Z"
            },
            {
                "commitId": "fed602b90be89a43b4ec41b5a2e0a526d3a5f4a2",
                "commitMessage": "\"refactor: also clone vnode.asyncFactory\"",
                "committedDate": "2017-07-11T05:06:23Z"
            },
            {
                "commitId": "e4da249ab8ef32a0b8156c840c9d2b9773090f8a",
                "commitMessage": "\"feat: add `comments` option to allow preserving comments in template  (#5951)\n\nclose #5392\"",
                "committedDate": "2017-06-30T00:56:23Z"
            },
            {
                "commitId": "d33c1250ee77dd337eb4979851ade331f177b890",
                "commitMessage": "\"fix:when using object syntax in v-bind, special attribute have no effect\"",
                "committedDate": "2017-06-16T18:02:37Z"
            },
            {
                "commitId": "9cf6646f46ef3c13236677e58e72d2c6dd5c8abf",
                "commitMessage": "\"support directly rendering async components in SSR\"",
                "committedDate": "2017-05-24T08:50:17Z"
            },
            {
                "commitId": "7404091896fda2c87ecac64efc24324ff1885e2c",
                "commitMessage": "\"support async hydration\"",
                "committedDate": "2017-05-24T08:50:17Z"
            },
            {
                "commitId": "43485fbc5b779e02122c3b7fc64296a2cfee31f6",
                "commitMessage": "\"Merge branch ssr-optimize into dev\"",
                "committedDate": "2017-05-18T08:56:05Z"
            },
            {
                "commitId": "26953f5cacc03440df394ebbc74023efd364b7e0",
                "commitMessage": "\"add semis to flow decls for better syntax highlighting\"",
                "committedDate": "2017-05-15T08:01:30Z"
            },
            {
                "commitId": "0ccefff794c5fe73b80b9faf5ae5bfd8ec1a500f",
                "commitMessage": "\"support v-for on scoped slots (fix #5615)\"",
                "committedDate": "2017-05-09T15:22:55Z"
            },
            {
                "commitId": "5d965d5b3bbe0e76cdb97e41e01a704322253e09",
                "commitMessage": "\"clone `isComment` when cloneVNode (#5633)\"",
                "committedDate": "2017-05-09T13:12:59Z"
            },
            {
                "commitId": "1073035164b809872bf35a3b007848979f86f48a",
                "commitMessage": "\"fix activate hook call timing (fix vue-router#1212)\"",
                "committedDate": "2017-04-07T07:30:37Z"
            },
            {
                "commitId": "a12d32a56df2519c9cdf8d2da9d9425876263f89",
                "commitMessage": "\"fix style diffing on cached/slot elements (fix #5318)\"",
                "committedDate": "2017-04-03T06:13:57Z"
            },
            {
                "commitId": "2afaac2b397b4b04713488aeb62e5e222e5dc121",
                "commitMessage": "\"cache vnodes length (#5125)\"",
                "committedDate": "2017-03-08T02:24:25Z"
            },
            {
                "commitId": "9d6c8ec268f659a715e3b38c97a1e03964961703",
                "commitMessage": "\"feat: allow customization of component v-model prop/event via model option (close #4515)\"",
                "committedDate": "2017-01-22T19:31:43Z"
            },
            {
                "commitId": "fe02bc3a27b3b33f9467980f61126edf97105287",
                "commitMessage": "\"ignore deprecated alias\"",
                "committedDate": "2017-01-12T23:24:37Z"
            },
            {
                "commitId": "ced2dfc8f704b07cd59467eca38c58c590d0c012",
                "commitMessage": "\"expose vnode.child for backwards compat, update .flowconfig & ts types\"",
                "committedDate": "2017-01-12T23:04:36Z"
            },
            {
                "commitId": "30258a9a60b96c25c95685cb17ee35838830ee4c",
                "commitMessage": "\"rename vnode.child -> vnode.componentInstance\"",
                "committedDate": "2017-01-12T22:44:19Z"
            },
            {
                "commitId": "207c18c47f8c94f6d92675b28bc67511b7897246",
                "commitMessage": "\"further reduce normalizeChildren usage\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7c3c86f36044ada983c09e7733841cb4c55de9d1",
                "commitMessage": "\"fix namespace hoisting\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "79e1058799dcde0b7e341ef44b590ecbf1e3a722",
                "commitMessage": "\"wip: refactor compiler to skip normalization when possible\n\nwip fix\n\nwip fix\n\nwip fix\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7431e4d16c92862ac74fdb3053de9295c809b586",
                "commitMessage": "\"emptyVNode -> createEmptyVNode\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7b389bc34e12442663de1939882b523345a9e46d",
                "commitMessage": "\"avoid warning unknown custom elements in v-pre\"",
                "committedDate": "2016-11-24T17:47:27Z"
            },
            {
                "commitId": "303378f85b26934396e2f6dc0973f6982da2beb1",
                "commitMessage": "\"support default scoped slot + function children as scoped slot\"",
                "committedDate": "2016-11-20T17:03:43Z"
            },
            {
                "commitId": "ff551029bf872ad067ac7c5ba7c6311fdde7c674",
                "commitMessage": "\"wip: fix flow type for weex merge\"",
                "committedDate": "2016-11-07T21:26:06Z"
            },
            {
                "commitId": "b69b4a4eeff204488c3eb60cac951f9808581e1c",
                "commitMessage": "\"tweak style merge for performance\"",
                "committedDate": "2016-11-07T21:20:10Z"
            },
            {
                "commitId": "e960cd104e67e8e410956fa589090fe171382528",
                "commitMessage": "\"enable style merge behavior between parent-child components (fix #3997) (#4138)\n\n* merge style between components\r\n\r\n* update test case\r\n\r\n* update style compiler\r\n\r\n* add paren to style binding code\r\n\r\n* update background property parsing\r\n\r\n* introduce interpolation warning and refactor var to const\"",
                "committedDate": "2016-11-07T21:19:48Z"
            },
            {
                "commitId": "ec824be88e9bc71b31e5c4a43f80d921674dca66",
                "commitMessage": "\"fix v-once inside v-for (fix #3964)\"",
                "committedDate": "2016-11-03T02:34:36Z"
            },
            {
                "commitId": "0cd1489e68891e4ca532ce7299d09e8af5ae3f52",
                "commitMessage": "\".number modifier should work with select, radio, checkbox (fix #4018) (#4022)\n\n* support number modifier in select, radio, checkbox\r\n\r\n* add test case\r\n\r\n* add ASTModifier type to specify modifiers type\r\n\r\n* fix typo\r\n\r\n* keep code consistent\"",
                "committedDate": "2016-11-01T15:50:22Z"
            },
            {
                "commitId": "1a8720d6ead500eed5d40457a3e7f59fe8972472",
                "commitMessage": "\"Fix typo in component (#3978)\"",
                "committedDate": "2016-10-19T14:33:17Z"
            },
            {
                "commitId": "1fa3844dc26745b4cb855b0934bd1b132ba33d9b",
                "commitMessage": "\"refactor directive update implementation\"",
                "committedDate": "2016-10-12T00:31:13Z"
            },
            {
                "commitId": "3446d1485d36b91ef42c53268cb69ecb047538a5",
                "commitMessage": "\"support functional components as named slot (fix #3872)\"",
                "committedDate": "2016-10-11T02:41:14Z"
            },
            {
                "commitId": "d6a7568891d0c3368471322de5d730172d92b9e4",
                "commitMessage": "\"improve v-bind implementation and make it work on components (fix #3670)\"",
                "committedDate": "2016-09-14T14:14:45Z"
            },
            {
                "commitId": "f6b1a51729f705bc49c6eaaf32ec095efd97401c",
                "commitMessage": "\"fix hot-reload not updating static nodes\"",
                "committedDate": "2016-08-29T15:45:08Z"
            },
            {
                "commitId": "014d2f8599f9afc0754e603b1528a12e74bd209a",
                "commitMessage": "\"fix vdom patch edge case for static nodes being reused and as insertion reference node (fix #3533)\"",
                "committedDate": "2016-08-27T20:29:07Z"
            },
            {
                "commitId": "ed2085974b2a385ca1fd8cd696917d6cda8322e7",
                "commitMessage": "\"ensure mergeVNodeHook does not inject duplicate hooks\"",
                "committedDate": "2016-08-26T23:19:51Z"
            },
            {
                "commitId": "d2df58e547a7e1018c72a52714be7dee4ad06922",
                "commitMessage": "\"move v-show marker to runtime so that render functions work as expected (fix #3488)\"",
                "committedDate": "2016-08-20T15:14:41Z"
            },
            {
                "commitId": "ba5fb31188467c9f07cdcfa94e9469e172098ec5",
                "commitMessage": "\"fix transition insert hook duplicate invocation on slot nodes (fix #3474)\"",
                "committedDate": "2016-08-18T16:00:31Z"
            },
            {
                "commitId": "18386c4cf4fe829f447687734a5bf03905d0db44",
                "commitMessage": "\"fix static nodes optimization inside v-for (fix #3406)\"",
                "committedDate": "2016-08-08T23:03:00Z"
            },
            {
                "commitId": "fe801b16e4da63513bce95bfa762a8a36d83fe59",
                "commitMessage": "\"wip: fix $parent after children change\"",
                "committedDate": "2016-08-05T16:43:35Z"
            },
            {
                "commitId": "b5b963f51df1fa3124cd8a9846be5455408bc52a",
                "commitMessage": "\"wip: refactor children resolution (remove thunk mechanism)\"",
                "committedDate": "2016-08-05T16:10:13Z"
            },
            {
                "commitId": "c66b7566c682af653dc475fab1475db5484e40ee",
                "commitMessage": "\"fix flow\"",
                "committedDate": "2016-08-05T07:10:40Z"
            },
            {
                "commitId": "59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8",
                "commitMessage": "\"support class/style in v-bind object\"",
                "committedDate": "2016-08-05T06:59:33Z"
            },
            {
                "commitId": "351aef3cb4ada980f105f98f8b835876e8d4d689",
                "commitMessage": "\"use comment node as empty placeholder (fix <transition> SSR hydration)\"",
                "committedDate": "2016-08-05T05:52:09Z"
            },
            {
                "commitId": "40b93e6527d9ecdb308925114bf14cb60b36eae0",
                "commitMessage": "\"avoid unnecessary enter transitions on nested inserted elements\"",
                "committedDate": "2016-08-05T02:17:59Z"
            },
            {
                "commitId": "35ee5b105e8a517571b9bb9a87160c6ffbdad779",
                "commitMessage": "\"remove staticAttrs\"",
                "committedDate": "2016-07-29T14:45:43Z"
            },
            {
                "commitId": "74f8b98509d24487e1a8d1588b4128a7a1046a41",
                "commitMessage": "\"handle static vnodes properly during patch (fix #3325)\"",
                "committedDate": "2016-07-26T19:49:40Z"
            },
            {
                "commitId": "3ce450b6dc5f2135266c8a38818371e9d4f1f460",
                "commitMessage": "\"use more proper flow type syntax\"",
                "committedDate": "2016-07-26T01:28:46Z"
            },
            {
                "commitId": "ea9c6c37c3ef0ef3706afa94070b89a7464c559c",
                "commitMessage": "\"support v-on .native modifier on components\"",
                "committedDate": "2016-07-19T22:56:10Z"
            },
            {
                "commitId": "69ecdcb05e3f5db32af889962fe8253d49d7390d",
                "commitMessage": "\"rename vnode.data.props -> domProps\"",
                "committedDate": "2016-07-19T21:52:10Z"
            },
            {
                "commitId": "e6871a33c17fd7dfd58fba6c7c6b6182f0ff2f0e",
                "commitMessage": "\"update flow annotations\"",
                "committedDate": "2016-07-15T21:48:42Z"
            },
            {
                "commitId": "9421bd48066906e20052e04cf88c4ae623080a95",
                "commitMessage": "\"extract getRealChild for abstract components\"",
                "committedDate": "2016-07-06T21:07:46Z"
            },
            {
                "commitId": "06b470369a7bde2a7f36468191e424b4c455db67",
                "commitMessage": "\"element namespace should be resolved at runtime for render function / jsx usage\"",
                "committedDate": "2016-06-27T18:02:14Z"
            },
            {
                "commitId": "1b3b19491fd47f3634e30d7fcce991881de16530",
                "commitMessage": "\"merge renderElement and renderElementWithChildren\"",
                "committedDate": "2016-06-27T16:25:02Z"
            },
            {
                "commitId": "cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9",
                "commitMessage": "\"apply scopeId to slot contents too\"",
                "committedDate": "2016-06-15T17:33:12Z"
            },
            {
                "commitId": "b0ad94fc876826a8ee3226320aacd40b8967f8dd",
                "commitMessage": "\"properly encode HTML in server-side rendering (fix #3078)\"",
                "committedDate": "2016-06-14T18:15:41Z"
            },
            {
                "commitId": "a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6",
                "commitMessage": "\"fix whitespace vnode identity breaking patch (fix #3043)\"",
                "committedDate": "2016-06-08T17:28:55Z"
            },
            {
                "commitId": "a5a9dc9b694da007a13bd5adfd64b0ab0750ad57",
                "commitMessage": "\"support keep-alive\"",
                "committedDate": "2016-06-04T14:53:05Z"
            },
            {
                "commitId": "4bcdce895c5dc0403b6a94b0ad71b2bc57734234",
                "commitMessage": "\"record original tag name on vnode for components using is attribute\"",
                "committedDate": "2016-06-02T22:18:32Z"
            },
            {
                "commitId": "d40ab0ca8760b9d8ec8be630e2360e6927ba8b3e",
                "commitMessage": "\"fix component client-side hydration\"",
                "committedDate": "2016-06-01T22:20:13Z"
            },
            {
                "commitId": "f8cfc81826715b23dac054b6d1727594d2caeebd",
                "commitMessage": "\"remove unnecessary v-pre related code\"",
                "committedDate": "2016-06-01T19:03:09Z"
            },
            {
                "commitId": "8d229b2442e8cc5b2801fa55a4ea8ea766721381",
                "commitMessage": "\"support v-bind on objects\"",
                "committedDate": "2016-05-25T00:41:06Z"
            },
            {
                "commitId": "7f85acb4e5c28052e07d5e2c4cf2903cac0e4bd5",
                "commitMessage": "\"expose oldValue on directive bindings\"",
                "committedDate": "2016-05-24T22:28:17Z"
            },
            {
                "commitId": "48f22c9b17a9def00dcfa4899fee9e60c8933dbc",
                "commitMessage": "\"fix flow error\"",
                "committedDate": "2016-05-24T04:27:18Z"
            },
            {
                "commitId": "837853d95ad1224ed12ba2454b791591884caf2e",
                "commitMessage": "\"better inferring of component names in warnings\"",
                "committedDate": "2016-05-19T17:58:11Z"
            },
            {
                "commitId": "20fb79a1ea098bedda6fec8bebbb184ac51fce20",
                "commitMessage": "\"new render mechanism (#2857)\n\n* updated compiler with new render functions\r\n\r\n* separated createElement into renderSelf & renderElement\r\nsupported getters for text node & static root\r\n\r\n* adapted new element creator into render call\r\n\r\n* improved \\$createElement\r\n\r\n* fixed by flow check\r\n\r\n* fixed ssr bugs for $createElement\"",
                "committedDate": "2016-05-14T19:49:18Z"
            },
            {
                "commitId": "750bec1024478022453277a4d175cff5a8445672",
                "commitMessage": "\"annotate platforms/web\"",
                "committedDate": "2016-05-14T11:40:56Z"
            },
            {
                "commitId": "59fcd4e7a749561ad6acf3ec50c32c24b33d8ec4",
                "commitMessage": "\"finish annotating vdom\"",
                "committedDate": "2016-05-14T07:38:41Z"
            },
            {
                "commitId": "45d96c7dbc399696138c9d020e13f97cf94ce181",
                "commitMessage": "\"annotation for vdom (wip)\"",
                "committedDate": "2016-05-14T07:08:21Z"
            },
            {
                "commitId": "354ea616b5ec4826e23a88465e404fd3b382d9f4",
                "commitMessage": "\"annotate Vue class\"",
                "committedDate": "2016-05-12T23:13:38Z"
            },
            {
                "commitId": "6593be9f75ea229e71e5b0530bb0f27aeee57afc",
                "commitMessage": "\"update unit tests convention + basic component tests\"",
                "committedDate": "2016-05-09T22:08:18Z"
            },
            {
                "commitId": "f4a2afb3b33991c1694e8fcb7d62641c30eeaf53",
                "commitMessage": "\"expose context on vnode, simplify render methods\"",
                "committedDate": "2016-04-25T03:31:07Z"
            },
            {
                "commitId": "955e2f839175fadbd0218f7b78c48ebbbcca6349",
                "commitMessage": "\"restructure (build pass)\"",
                "committedDate": "2016-04-23T20:12:19Z"
            },
            {
                "commitId": "ec5bcefca73160e6d283b8a0c4e1457f42f87081",
                "commitMessage": "\"tweak namespace changes\"",
                "committedDate": "2016-04-23T17:37:47Z"
            },
            {
                "commitId": "6e251e0721b4dbb4896999df78450d912dcba30d",
                "commitMessage": "\"Change svg parameter to namespace (#3)\n\n* change svg parameter into namespace\r\n\r\n* fixed svg to namespace bug\r\n\r\n* change svg detecting into namespace detecting in parser\r\n\r\n* fixed eslint error\"",
                "committedDate": "2016-04-23T17:29:31Z"
            },
            {
                "commitId": "9a347e02b4b1fd8ddc51db6c2ba08a1831f4dfd0",
                "commitMessage": "\"allow data to be undefined\"",
                "committedDate": "2016-04-21T16:37:12Z"
            },
            {
                "commitId": "d87987780a208fe3c65415a4a1cab58250ffa9a3",
                "commitMessage": "\"rename\"",
                "committedDate": "2016-04-21T08:24:26Z"
            },
            {
                "commitId": "1a35cf4a21e8c8e897c2d6f291b99376b12b9fac",
                "commitMessage": "\"support template slot\"",
                "committedDate": "2016-04-15T02:55:29Z"
            },
            {
                "commitId": "0ab0600599dcc593695560382af1c1a8119ce848",
                "commitMessage": "\"restructure\"",
                "committedDate": "2016-04-12T23:42:15Z"
            },
            {
                "commitId": "69e94eb453ee0da21f9a0506d2f01269865a4776",
                "commitMessage": "\"move flatten into vdom implementation\"",
                "committedDate": "2016-04-11T03:54:53Z"
            },
            {
                "commitId": "a879ec06ef9504db8df2a19aac0d07609fe36131",
                "commitMessage": "\"init\"",
                "committedDate": "2016-04-11T02:47:28Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "Determine the developers that had the most unfixed bugs?",
        "number": 7,
        "category": 2,
        "response": "The developer with the most unfixed bugs is Justineo, with a total of 1 unfixed bug.",
        "chain_of_thought": "To determine the developers that had the most unfixed bugs, we need to interpret the question in the context of the provided schema. An unfixed bug can be interpreted as an issue that has been introduced by a commit but not yet fixed by another commit. Therefore, we need to find users who have authored commits that introduced issues, and those issues have not been fixed by any other commit.\n\nHere's how we can construct the query:\n\n1. Identify the relevant nodes and relationships:\n   - We need the `User` node to identify developers.\n   - The `Commit` node is needed to find commits authored by users.\n   - The `Issue` node is needed to find issues introduced by commits.\n   - The `author` relationship connects `User` to `Commit`.\n   - The `introduced` relationship connects `Commit` to `Issue`.\n   - The `fixed` relationship connects `Commit` to `Issue` to identify fixed issues.\n\n2. Find issues that have been introduced but not fixed:\n   - Match users who authored commits that introduced issues.\n   - Ensure those issues are not fixed by any commit.\n\n3. Aggregate the number of unfixed issues for each developer.\n\nThe query to achieve this is:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE NOT EXISTS {\n  MATCH (c2:Commit)-[:fixed]->(i)\n}\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n```\n\nThis query matches users who have authored commits that introduced issues and ensures those issues are not fixed by any other commit. It then counts the number of such unfixed issues for each developer and orders the results in descending order to find the developers with the most unfixed bugs.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE NOT EXISTS {\n  MATCH (c2:Commit)-[:fixed]->(i)\n}\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n",
        "result": [
            {
                "developer": "Justineo",
                "unfixed_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 3,
        "label": "partial"
    },
    {
        "question": "which developer has most number of bugs yet to be fixed?",
        "number": 8,
        "category": 2,
        "response": "The developer with the most number of bugs yet to be fixed is Evan You, with 1 open issue.",
        "chain_of_thought": "To determine which developer has the most number of bugs yet to be fixed, we need to consider the following:\n\n1. **Identify Bugs**: Bugs are represented by issues in the schema. We need to find issues that are still open, which means their `state` property should be \"open\".\n\n2. **Developer Association**: We need to associate these open issues with developers. A developer can be associated with an issue if they are assigned to it. This is represented by the `assigned` relationship between the `User` and `Issue` nodes.\n\n3. **Count Open Issues**: For each developer, we need to count the number of open issues they are assigned to.\n\nBased on this understanding, the query should:\n\n- Match users assigned to open issues.\n- Count the number of open issues for each user.\n- Sort the results to find the developer with the most open issues.\n\nHere's the complete Cypher query:\n\n```cypher\nMATCH (u:User)-[:assigned]->(i:Issue {state: 'open'})\nRETURN u.name AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n```\n\nThis query will return the developer with the most open issues, indicating the developer with the most number of bugs yet to be fixed.",
        "query": "cypher\nMATCH (u:User)-[:assigned]->(i:Issue {state: 'open'})\nRETURN u.name AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "Evan You",
                "open_issues": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "Determine the developers that fixed the most bugs in helpers.js?",
        "number": 9,
        "category": 3,
        "response": "The developer who fixed the most bugs in helpers.js is Evan You, with 11 bugs fixed. Following Evan, chengchao fixed 2 bugs, and Jason fixed 1 bug.",
        "chain_of_thought": "To determine the developers who fixed the most bugs in the file `helpers.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We are interested in the `User`, `Commit`, `Issue`, and `File` nodes.\n   - The `User` node is connected to the `Commit` node via the `author` relationship.\n   - The `Commit` node is connected to the `Issue` node via the `fixed` relationship, indicating that the commit fixed a bug.\n   - The `Issue` node is connected to the `File` node via the `impacted` relationship, indicating that the file was impacted by the issue.\n\n2. **Filter for the specific file**: \n   - We need to filter the `File` node to find the file with the name `helpers.js`.\n\n3. **Aggregate the number of bugs fixed by each developer**:\n   - We need to count the number of issues fixed by each developer for the file `helpers.js`.\n\nThe Cypher query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'helpers.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n```\n\nThis query will return a list of developers and the number of bugs they have fixed in `helpers.js`, sorted in descending order by the number of bugs fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'helpers.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n",
        "result": [
            {
                "developer": "Evan You",
                "bugs_fixed": 11
            },
            {
                "developer": "chengchao",
                "bugs_fixed": 2
            },
            {
                "developer": "Jason",
                "bugs_fixed": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "who did most fixed bugs in client.js?",
        "number": 10,
        "category": 3,
        "response": "The developer who fixed the most bugs in \"client.js\" is Xin Du (Clark), with a total of 1 fixed bug.",
        "chain_of_thought": "To determine who fixed the most bugs in the file `client.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We need the `User` node to identify the developers.\n   - The `Commit` node is needed to find the commits that fixed bugs.\n   - The `File` node is needed to identify the specific file `client.js`.\n   - The `Issue` node is needed to identify the bugs.\n   - The relationships involved are:\n     - `(:User)-[:author]->(:Commit)` to find which user authored the commit.\n     - `(:Commit)-[:fixed]->(:Issue)` to find which commit fixed a bug.\n     - `(:Issue)-[:impacted]->(:File)` to find which file was impacted by the bug.\n\n2. **Filter for the specific file**: We need to filter the `File` node to only include `client.js`.\n\n3. **Aggregate the number of fixed bugs by each user**: We need to count the number of times each user has fixed a bug in `client.js`.\n\nHere is the Cypher query to achieve this:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'client.js'})\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n```\n\nThis query will return the developer who has fixed the most bugs in `client.js`, along with the count of bugs they have fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'client.js'})\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "Xin Du (Clark)",
                "fixed_bugs": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "Determine the files that introduce the most bugs?",
        "number": 11,
        "category": 2,
        "response": "The files that introduce the most bugs are as follows:\n\n1. `index.js` with 85 bugs.\n2. `model.js` with 45 bugs.\n3. `render.js` with 42 bugs.\n4. `events.js` with 35 bugs.\n5. `patch.js` with 32 bugs.\n6. `lifecycle.js` with 27 bugs.\n7. `codegen.spec.js` with 24 bugs.\n8. `html-parser.js` with 21 bugs.\n9. `transition.js` with 20 bugs.\n10. `options.js` with 19 bugs.",
        "chain_of_thought": "To determine the files that introduce the most bugs, we need to identify the files that are associated with the most issues introduced by commits. The schema provides a relationship between Commit and Issue through the introduced relationship, and between Issue and File through the impacted relationship. Therefore, we need to traverse from File to Issue and then to Commit to count how many times each file is associated with an introduced issue.\n\nHere's the step-by-step breakdown of the query:\n\n1. Identify the relevant nodes: File, Issue, and Commit.\n2. Use the impacted relationship to find issues associated with each file.\n3. Use the introduced relationship to find commits that introduced these issues.\n4. Count the number of times each file is associated with an introduced issue.\n5. Sort the files by the number of introduced issues in descending order to find the files that introduce the most bugs.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (f:File)<-[:impacted]-(i:Issue)<-[:introduced]-(c:Commit)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n```\n\nThis query will return the top 10 files that are associated with the most introduced bugs.",
        "query": "cypher\nMATCH (f:File)<-[:impacted]-(i:Issue)<-[:introduced]-(c:Commit)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "index.js",
                "bug_count": 85
            },
            {
                "file": "model.js",
                "bug_count": 45
            },
            {
                "file": "render.js",
                "bug_count": 42
            },
            {
                "file": "events.js",
                "bug_count": 35
            },
            {
                "file": "patch.js",
                "bug_count": 32
            },
            {
                "file": "lifecycle.js",
                "bug_count": 27
            },
            {
                "file": "codegen.spec.js",
                "bug_count": 24
            },
            {
                "file": "html-parser.js",
                "bug_count": 21
            },
            {
                "file": "transition.js",
                "bug_count": 20
            },
            {
                "file": "options.js",
                "bug_count": 19
            }
        ],
        "isAmbiguous": true,
        "iteration": 3,
        "label": "partial"
    },
    {
        "question": "What are the most buggy files?",
        "number": 12,
        "category": 2,
        "response": "The most buggy files, based on the number of issues impacting them, are as follows:\n\n1. index.js with 105 issues\n2. model.js with 46 issues\n3. render.js with 42 issues\n4. events.js with 38 issues\n5. lifecycle.js with 37 issues\n6. patch.js with 32 issues\n7. transition.js with 32 issues\n8. component.js with 29 issues\n9. codegen.spec.js with 24 issues\n10. options.js with 24 issues\n\nThese files have the highest issue counts in the repository.",
        "chain_of_thought": "To determine the most buggy files, we need to identify files that have been impacted by the most issues. In the given schema, the relevant nodes are the File and Issue nodes. The relationship that connects these nodes is the impacted relationship, which indicates that changes in the file are related to a bug.\n\nHere's how we can construct the query:\n\n1. Identify the files that have been impacted by issues:\n   - Use the impacted relationship between Issue and File.\n\n2. Aggregate the number of issues impacting each file:\n   - Count the number of issues for each file.\n\n3. Sort the files in descending order based on the number of issues to find the most buggy files.\n\n4. Limit the results to the top 10 most buggy files for a concise list.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n```\n\nThis query will return the names of the files and the count of issues impacting them, sorted by the number of issues in descending order, showing the top 10 most buggy files.",
        "query": "cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "index.js",
                "issue_count": 105
            },
            {
                "file": "model.js",
                "issue_count": 46
            },
            {
                "file": "render.js",
                "issue_count": 42
            },
            {
                "file": "events.js",
                "issue_count": 38
            },
            {
                "file": "lifecycle.js",
                "issue_count": 37
            },
            {
                "file": "patch.js",
                "issue_count": 32
            },
            {
                "file": "transition.js",
                "issue_count": 32
            },
            {
                "file": "component.js",
                "issue_count": 29
            },
            {
                "file": "codegen.spec.js",
                "issue_count": 24
            },
            {
                "file": "options.js",
                "issue_count": 24
            }
        ],
        "isAmbiguous": true,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "what are the buggy commits that happened on August 18, 2022?",
        "number": 13,
        "category": 2,
        "response": "On August 18, 2022, the following commits introduced bugs:\n\n1. Commit ID: 5221d4d3b6049c87d196d99dbb64bcd3f3b07279\n   - Message: \"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\"\n   - Date: 2022-08-18T08:01:00Z\n\n2. Commit ID: b4bf4c52ad31e02307cfd4d643dc5610c893e3ba\n   - Message: \"fix(types): allow attaching unknown options to defined component\\n\\nfix #12742\"\n   - Date: 2022-08-18T07:32:12Z",
        "chain_of_thought": "To determine the buggy commits that happened on August 18, 2022, we need to identify commits that introduced bugs. In the schema, a commit that introduced a bug is represented by the `introduced` relationship between a `Commit` node and an `Issue` node. We also need to filter these commits by the date they were committed, which is represented by the `committedDate` property of the `Commit` node.\n\nThe date provided in the question is August 18, 2022. We need to format this date in ISO format as \"2022-08-18\" and use a regex to match the date part of the `committedDate` property, as it might include a timestamp.\n\nHere's the step-by-step breakdown of the query:\n\n1. Match commits that introduced an issue (bug).\n2. Filter these commits by the `committedDate` to only include those that happened on August 18, 2022.\n3. Return the relevant information about these commits.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-08-18.*'\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS date\n```\n\nThis query will return the IDs, messages, and committed dates of the commits that introduced bugs on August 18, 2022.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-08-18.*'\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS date\n",
        "result": [
            {
                "commitId": "5221d4d3b6049c87d196d99dbb64bcd3f3b07279",
                "commitMessage": "\"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\"",
                "date": "2022-08-18T08:01:00Z"
            },
            {
                "commitId": "5221d4d3b6049c87d196d99dbb64bcd3f3b07279",
                "commitMessage": "\"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\"",
                "date": "2022-08-18T08:01:00Z"
            },
            {
                "commitId": "b4bf4c52ad31e02307cfd4d643dc5610c893e3ba",
                "commitMessage": "\"fix(types): allow attaching unknown options to defined component\n\nfix #12742\"",
                "date": "2022-08-18T07:32:12Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "what commits were buggy on May 24, 2022?",
        "number": 14,
        "category": 2,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To determine which commits were buggy on May 24, 2022, we need to identify the commits that introduced issues on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship. We need to filter the issues by the date they were created, which is represented by the created_at property in the Issue node.\n\nFirst, we need to match the commits that introduced issues:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\n```\n\nNext, we filter the issues by the created_at date to find those created on May 24, 2022. We use the ISO format for the date and a regex to match any time on that day:\n```cypher\nWHERE i.created_at =~ '2022-05-24T.*'\n```\n\nFinally, we return the commit IDs that introduced these issues:\n```cypher\nRETURN c.id AS buggy_commit\n```\n\nTherefore, the complete query is:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2022-05-24T.*'\nRETURN c.id AS buggy_commit\n```",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2022-05-24T.*'\nRETURN c.id AS buggy_commit\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "incorrect"
    },
    {
        "question": "commit(s) that fixed the bug ticket 12892?",
        "number": 15,
        "category": 2,
        "response": "The commit that fixed the bug ticket 12892 is identified by the commit ID: 25f97a5033187372e7b8c591c79336197ee5c833.",
        "chain_of_thought": "To find the commit(s) that fixed the bug ticket with the number 12892, we need to identify the relevant nodes and relationships. The bug ticket is represented by the Issue node, and the commit that fixed the bug is represented by the Commit node. The relevant relationship between Commit and Issue for this question is the fixed relationship, which indicates that a commit fixed a particular issue.\n\nFirst, we need to match the Issue node with the specific number 12892. Then, we find the Commit nodes that have a fixed relationship with this Issue node.\n\nThe query to find the commit(s) that fixed the bug ticket 12892 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 12892})\nRETURN c.id AS commit_id\n```\n\nThis query will return the ID(s) of the commit(s) that fixed the specified bug ticket.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 12892})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "25f97a5033187372e7b8c591c79336197ee5c833"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "which commit fixed the bug ticket 11575?",
        "number": 16,
        "category": 2,
        "response": "The commit with the ID `af5e05d87ecd218f73302a1b08dcaedd2b46814a` fixed the bug ticket 11575.",
        "chain_of_thought": "To determine which commit fixed the bug associated with ticket 11575, we need to identify the relevant nodes and relationships. The ticket is represented by an Issue node, and the commit that fixed the bug is represented by a Commit node. The relationship between a commit and an issue that indicates a bug was fixed is the fixed relationship.\n\nHere's how we can construct the query:\n\n1. Identify the Issue node with the specific ticket number 11575.\n2. Find the Commit node that has a fixed relationship with this Issue node.\n\nThe query to find the commit that fixed the bug ticket 11575 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 11575})\nRETURN c.id AS commit_id\n```\n\nThis query matches the commit that has a fixed relationship with the issue having the number 11575 and returns the ID of that commit.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 11575})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "af5e05d87ecd218f73302a1b08dcaedd2b46814a"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "Determine the bug(s) that were introduced because of commit hash fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be?",
        "number": 17,
        "category": 2,
        "response": "The commit with hash fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be introduced the following bugs:\n\n1. Issue ID 12608: \"implement and export defineAsyncComponent compatible version in 2.7.x\" (https://github.com/vuejs/vue/issues/12608)\n2. Issue ID 12622: \"Vue.component(id, component) mismatch type of DefineComponent\" (https://github.com/vuejs/vue/issues/12622)\n3. Issue ID 12748: \"Export type `DefineComponent`\" (https://github.com/vuejs/vue/issues/12748)\n4. Issue ID 13078: \"import type { CSSProperties } from vue is error\" (https://github.com/vuejs/vue/issues/13078)\n5. Issue ID 13128: \"Vue 2.7.16 bug: Some types has not export\" (https://github.com/vuejs/vue/issues/13128)",
        "chain_of_thought": "To determine the bug(s) introduced by a specific commit, we need to identify the relevant nodes and relationships. The commit in question is identified by its hash, which corresponds to the `Commit` node. We are interested in finding the `Issue` nodes that were introduced by this commit. The relevant relationship between `Commit` and `Issue` for this question is the `introduced` relationship.\n\nTherefore, the query to find the bug(s) introduced by the commit with hash `fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be` is:\n\n```cypher\nMATCH (c:Commit {id: 'fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query matches the commit with the specified hash and finds all issues that were introduced by this commit, returning the issue ID, title, and URL for each issue.",
        "query": "cypher\nMATCH (c:Commit {id: 'fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [
            {
                "issue_id": 12608,
                "issue_title": "\"implement and export defineAsyncComponent compatible version in 2.7.x\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12608"
            },
            {
                "issue_id": 12622,
                "issue_title": "\"Vue.component(id, component) mismatch type of DefineComponent\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12622"
            },
            {
                "issue_id": 12748,
                "issue_title": "\"Export type `DefineComponent`\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12748"
            },
            {
                "issue_id": 13078,
                "issue_title": "\"import type { CSSProperties } from vue is error\"",
                "issue_url": "https://github.com/vuejs/vue/issues/13078"
            },
            {
                "issue_id": 13128,
                "issue_title": "\"Vue 2.7.16 bug: Some types has not export\"",
                "issue_url": "https://github.com/vuejs/vue/issues/13128"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "what are the bugs caused by commit c678e3134b927645f79270b52d4d660a7e3654ce?",
        "number": 18,
        "category": 2,
        "response": "The commit with ID c678e3134b927645f79270b52d4d660a7e3654ce introduced the following bugs:\n\n1. Issue ID 12758: \"[2.7.x] Here is a type error when using ref() on attribute ref in TSX\". You can view more details at the URL: [https://github.com/vuejs/vue/issues/12758](https://github.com/vuejs/vue/issues/12758).\n\n2. Issue ID 12832: \"EventHandlers type error, DOMs Event was tainted by `@types/node`\". You can view more details at the URL: [https://github.com/vuejs/vue/issues/12832](https://github.com/vuejs/vue/issues/12832).",
        "chain_of_thought": "To determine the bugs caused by a specific commit, we need to identify the relevant nodes and relationships in the schema. The commit in question is identified by its ID, which corresponds to the Commit node. We are interested in finding the issues (bugs) that this commit has introduced, which is represented by the introduced relationship between Commit and Issue nodes.\n\nHere's how we can construct the query:\n\n1. Identify the Commit node with the given ID.\n2. Use the introduced relationship to find the associated Issue nodes.\n\nThe query to find the bugs caused by the specified commit is:\n\n```cypher\nMATCH (c:Commit {id: 'c678e3134b927645f79270b52d4d660a7e3654ce'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query will return the ID, title, and URL of the issues (bugs) introduced by the specified commit.",
        "query": "cypher\nMATCH (c:Commit {id: 'c678e3134b927645f79270b52d4d660a7e3654ce'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [
            {
                "issue_id": 12758,
                "issue_title": "\"[2.7.x] Here is a type error when using ref() on attribute ref in TSX\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12758"
            },
            {
                "issue_id": 12832,
                "issue_title": "\"EventHandlers type error, DOMs Event  was tainted by `@types/node`\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12832"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "Determine the percentage of the fixing commits that introduced bugs on Oct 2017?",
        "number": 19,
        "category": 3,
        "response": "The percentage of fixing commits that introduced bugs in October 2017 is 20.0%.",
        "chain_of_thought": "To determine the percentage of fixing commits that introduced bugs in October 2017, we need to interpret the question and identify the relevant nodes and relationships in the schema.\n\n### Interpretation:\n1. **Fixing Commits**: These are commits that have a `fixed` relationship with an `Issue`.\n2. **Commits that Introduced Bugs**: These are commits that have an `introduced` relationship with an `Issue`.\n3. **Time Frame**: We are interested in commits from October 2017. The `committedDate` property of the `Commit` node will be used to filter commits from this time period.\n\n### Steps to Construct the Query:\n1. **Identify Fixing Commits**: Find commits that have a `fixed` relationship with an `Issue`.\n2. **Identify Commits that Introduced Bugs**: Find commits that have an `introduced` relationship with an `Issue`.\n3. **Filter by Date**: Ensure the commits are from October 2017.\n4. **Calculate the Percentage**: Determine how many of the fixing commits also introduced bugs and calculate the percentage.\n\n### Cypher Query:\n```cypher\n// Find all fixing commits in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\n\n// Count total fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Find fixing commits that also introduced bugs in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\n\n// Count fixing commits that introduced bugs\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n```\n\n### Explanation:\n- The first `MATCH` clause finds all commits that fixed issues in October 2017.\n- The `WHERE` clause uses a regex to filter commits by the `committedDate` for October 2017.\n- The `WITH` clause is used to store the count of total fixing commits.\n- The second `MATCH` clause finds commits that both fixed and introduced issues in the same time frame.\n- The final `RETURN` statement calculates the percentage of fixing commits that also introduced bugs.",
        "query": "cypher\n// Find all fixing commits in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\n\n// Count total fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Find fixing commits that also introduced bugs in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10.*'\n\n// Count fixing commits that introduced bugs\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n",
        "result": [
            {
                "percentage": 20.0
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "How many fixing commits caused bugs on Oct 2017?",
        "number": 20,
        "category": 3,
        "response": "There were 7 fixing commits that caused bugs in October 2017.",
        "chain_of_thought": "To address the question, we need to determine the number of commits that both fixed an issue and introduced a bug in October 2017. The schema provides the necessary relationships and properties to achieve this.\n\n1. **Identify the relevant nodes and relationships:**\n   - We need to focus on the `Commit` node, as it is involved in both fixing and introducing bugs.\n   - The `fixed` relationship connects a `Commit` to an `Issue` it fixed.\n   - The `introduced` relationship connects a `Commit` to an `Issue` it introduced.\n\n2. **Filter commits by date:**\n   - We need to filter commits based on the `committedDate` property to only include those from October 2017. The date format should be in ISO format, and since the time is not specified, we will use a regex to match any time on the specified date.\n\n3. **Construct the query:**\n   - We will match commits that have both `fixed` and `introduced` relationships.\n   - We will filter these commits to only include those from October 2017.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n```\n\nThis query matches commits that have both fixed and introduced relationships to issues and filters them to only include those committed in October 2017. The result is the count of such commits.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n",
        "result": [
            {
                "fixing_commits_causing_bugs": 7
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "how many commits happened in last month?",
        "number": 1,
        "category": 1,
        "response": "There were 0 commits that happened in the last month.",
        "chain_of_thought": "To determine how many commits happened in the last month, we need to consider the current date, which is 2024-08-26T00:00:00Z. The last month would be from 2024-07-26T00:00:00Z to 2024-08-25T23:59:59Z.\n\nThe relevant nodes for this query are the Commit nodes, and we need to filter these nodes based on the `committedDate` property. The `committedDate` should be within the specified date range.\n\nHere's the Cypher query to find the number of commits that happened in the last month:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n```\n\nThis query matches all Commit nodes and filters them based on the `committedDate` property to ensure they fall within the last month. It then returns the count of these commits.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n",
        "result": [
            {
                "numberOfCommits": 0
            }
        ],
        "isAmbiguous": true,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "what is the latest commit?",
        "number": 2,
        "category": 1,
        "response": "The latest commit has the ID '73486cb5f5862a443b42c2aff68b82320218cbcd' and was committed on June 14, 2024, at 12:52:12 UTC.",
        "chain_of_thought": "To determine the latest commit, we need to identify the Commit node with the most recent `committedDate`. The relevant property for this query is `committedDate` in the Commit node. We will sort the commits by `committedDate` in descending order and return the top result.\n\nThe query to find the latest commit is:\n\n```cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS committedDate\nORDER BY c.committedDate DESC\nLIMIT 1\n```",
        "query": "cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS committedDate\nORDER BY c.committedDate DESC\nLIMIT 1\n",
        "result": [
            {
                "commitId": "73486cb5f5862a443b42c2aff68b82320218cbcd",
                "committedDate": "2024-06-14T12:52:12Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "can you tell me the details of the commits between Dec 1st 2023 and Dec 7th 2023?",
        "number": 3,
        "category": 1,
        "response": "Certainly! Here are the details of the commits made between December 1st, 2023, and December 7th, 2023:\n\n1. **Commit ID**: 947993f7e8e445b9032dd59d7f484593c3174452\n   - **Message**: \"chore: bump vitest to 1.0\"\n   - **Additions**: 323\n   - **Deletions**: 154\n   - **Changed Files**: 2\n   - **Comments Count**: 0\n   - **Committed Date**: 2023-12-06T07:08:23Z\n\n2. **Commit ID**: 08382f008016c3b3b93f84594266f2e191fee91d\n   - **Message**: \"fix(props): should not unwrap props that are raw refs\\n\\nclose #12930\"\n   - **Additions**: 36\n   - **Deletions**: 12\n   - **Changed Files**: 2\n   - **Comments Count**: 0\n   - **Committed Date**: 2023-12-06T07:10:49Z\n\n3. **Commit ID**: d30f6fd25f90973a84fadb43eef75a54c4b42ea2\n   - **Message**: \"test: fix tests\"\n   - **Additions**: 39\n   - **Deletions**: 39\n   - **Changed Files**: 4\n   - **Comments Count**: 0\n   - **Committed Date**: 2023-12-06T07:21:00Z\n\n4. **Commit ID**: 0ad8e8d94f3a3bf4429f25850c85a6bbb2b81364\n   - **Message**: \"fix(shallowReactive): should track value if already reactive when set in shallowReactive\"\n   - **Additions**: 6\n   - **Deletions**: 5\n   - **Changed Files**: 2\n   - **Comments Count**: 0\n   - **Committed Date**: 2023-12-06T07:45:15Z\n\n5. **Commit ID**: 45d6ad6645e960a3ee52ad9667520a1625f10dfd\n   - **Message**: \"chore(compiler-sfc): specify prettier version (#13053)\\n\\nclose: #13052\"\n   - **Additions**: 7\n   - **Deletions**: 1\n   - **Changed Files**: 2\n   - **Comments Count**: 0\n   - **Committed Date**: 2023-12-06T07:49:41Z\n\n6. **Commit ID**: de0b97b3eadae120eda505b45df2de2115dcb6f0\n   - **Message**: \"fix(types): fix type augmentation and compiler-sfc types w/moduleResolution: bundler (#13107)\\n\\nclose #13106\"\n   - **Additions**: 4\n   - **Deletions**: 3\n   - **Changed Files**: 1\n   - **Comments Count**: 0\n   - **Committed Date**: 2023-12-06T07:52:18Z\n\n7. **Commit ID**: ae3e4b1c706b8d61a4a312ca5d23441df021b4b4\n   - **Message**: \"fix(utils): unwrap refs when stringifying values in template\\n\\nclose #12884\\nclose #12888\"\n   - **Additions**: 20\n   - **Deletions**: 1\n   - **Changed Files**: 2\n   - **Comments Count**: 0\n   - **Committed Date**: 2023-12-06T08:40:49Z\n\n8. **Commit ID**: 10c2a87c7038f2f80df23044c48a130bea253bf8\n   - **Message**: \"chore(deps): bump @babel/parser\"\n   - **Additions**: 673\n   - **Deletions**: 701\n   - **Changed Files**: 3\n   - **Comments Count**: 0\n   - **Committed Date**: 2023-12-06T09:09:56Z\n\n9. **Commit ID**: 25f97a5033187372e7b8c591c79336197ee5c833\n   - **Message**: \"fix(compiler-sfc): fix rewriteDefault edge cases\\n\\nclose #13060\\nclose #12892\\nclose #12906\"\n   - **Additions**: 79\n   - **Deletions**: 7\n   - **Changed Files**: 3\n   - **Comments Count**: 0\n   - **Committed Date**: 2023-12-06T09:25:12Z\n\n10. **Commit ID**: d6468c4c383184acd66f3c9091005e83836a43f3\n    - **Message**: \"chore(deps): bump esbuild\"\n    - **Additions**: 6\n    - **Deletions**: 234\n    - **Changed Files**: 2\n    - **Comments Count**: 0\n    - **Committed Date**: 2023-12-06T09:29:47Z\n\n11. **Commit ID**: f5ef882a781b8a62c9ca00e95006d07636567c8e\n    - **Message**: \"fix(style): always set new styles\\n\\nclose #12901\\nclose #12946\"\n    - **Additions**: 17\n    - **Deletions**: 4\n    - **Changed Files**: 2\n    - **Comments Count**: 0\n    - **Committed Date**: 2023-12-06T15:17:02Z\n\n12. **Commit ID**: a174c29dab2cf655b06f7870e0ac5a78ef35ec8a\n    - **Message**: \"fix(types): fix shallowRefs return type  (#12979)\\n\\nclose #12978\"\n    - **Additions**: 30\n    - **Deletions**: 8\n    - **Changed Files**: 3\n    - **Comments Count**: 0\n    - **Committed Date**: 2023-12-06T15:51:56Z\n\n13. **Commit ID**: 6d857f5bee275dc98106e3b2cbc7722f5ec0cfc0\n    - **Message**: \"fix(watch): new property addition should trigger deep watcher with getter\\n\\nclose #12967\\nclose #12972\"\n    - **Additions**: 37\n    - **Deletions**: 2\n    - **Changed Files**: 2\n    - **Comments Count**: 0\n    - **Committed Date**: 2023-12-06T16:13:31Z\n\n14. **Commit ID**: 24fcf69624a633d43dfc0aa5fa6b93d11de7fad5\n    - **Message**: \"fix(types): type VNodeChildren should allow type number  (#13067)\\n\\nclose #12973\"\n    - **Additions**: 2\n    - **Deletions**: 0\n    - **Changed Files**: 1\n    - **Comments Count**: 0\n    - **Committed Date**: 2023-12-07T05:59:43Z\n\n15. **Commit ID**: 83d95351a9f809311d624fc3398e7f6829b72447\n    - **Message**: \"fix(compiler-sfc): check template `ref` usage,  (#12985)\\n\\nclose #12984\"\n    - **Additions**: 29\n    - **Deletions**: 0\n    - **Changed Files**: 3\n    - **Comments Count**: 0\n    - **Committed Date**: 2023-12-07T06:14:27Z\n\n16. **Commit ID**: 3650c12f7d3a20f3155bc1fd2b068e84289e0d33\n    - **Message**: \"fix(types): provide types for built-in components\\n\\nclose #13002\"\n    - **Additions**: 65\n    - **Deletions**: 0\n    - **Changed Files**: 2\n    - **Comments Count**: 0\n    - **Committed Date**: 2023-12-07T06:41:10Z\n\n17. **Commit ID**: 2632249925e632e56f6dfc8fdbcf682c82e4081b\n    - **Message**: \"fix(keep-alive): fix keep-alive memory leak\\n\\nclose #12827\"\n    - **Additions**: 2\n    - **Deletions**: 0\n    - **Changed Files**: 1\n    - **Comments Count**: 0\n    - **Committed Date**: 2023-12-07T08:12:36Z\n\n18. **Commit ID**: e0747f40a879b4000a1959d21377b51d1f1ed988\n    - **Message**: \"fix(keep-alive): fix memory leak without breaking transition tests\"\n    - **Additions**: 8\n    - **Deletions**: 4\n    - **Changed Files**: 2\n    - **Comments Count**: 0\n    - **Committed Date**: 2023-12-07T09:07:15Z\n\nThese commits reflect a range of improvements, bug fixes, and updates to the codebase.",
        "chain_of_thought": "To address the question, we need to find the details of commits made between December 1st, 2023, and December 7th, 2023. The relevant node for this query is the Commit node, and we will use the `committedDate` property to filter the commits within the specified date range.\n\nFirst, we need to format the dates in ISO format. The start date is \"2023-12-01T00:00:00Z\" and the end date is \"2023-12-07T23:59:59Z\" to include the entire day of December 7th.\n\nThe query will match all commits and filter them based on the `committedDate` property to fall within the specified range. We will then return the details of these commits.\n\nThe complete query is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2023-12-01T00:00:00Z\" AND c.committedDate <= \"2023-12-07T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n```\n\nThis query will return the details of the commits, including the commit ID, message, number of additions, deletions, changed files, comments count, and the committed date, all ordered by the committed date.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2023-12-01T00:00:00Z\" AND c.committedDate <= \"2023-12-07T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n",
        "result": [
            {
                "commitId": "947993f7e8e445b9032dd59d7f484593c3174452",
                "message": "\"chore: bump vitest to 1.0\"",
                "additions": 323,
                "deletions": 154,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:08:23Z"
            },
            {
                "commitId": "08382f008016c3b3b93f84594266f2e191fee91d",
                "message": "\"fix(props): should not unwrap props that are raw refs\n\nclose #12930\"",
                "additions": 36,
                "deletions": 12,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:10:49Z"
            },
            {
                "commitId": "d30f6fd25f90973a84fadb43eef75a54c4b42ea2",
                "message": "\"test: fix tests\"",
                "additions": 39,
                "deletions": 39,
                "changedFiles": 4,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:21:00Z"
            },
            {
                "commitId": "0ad8e8d94f3a3bf4429f25850c85a6bbb2b81364",
                "message": "\"fix(shallowReactive): should track value if already reactive when set in shallowReactive\"",
                "additions": 6,
                "deletions": 5,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:45:15Z"
            },
            {
                "commitId": "45d6ad6645e960a3ee52ad9667520a1625f10dfd",
                "message": "\"chore(compiler-sfc): specify prettier version (#13053)\n\nclose: #13052\"",
                "additions": 7,
                "deletions": 1,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:49:41Z"
            },
            {
                "commitId": "de0b97b3eadae120eda505b45df2de2115dcb6f0",
                "message": "\"fix(types): fix type augmentation and compiler-sfc types w/moduleResolution: bundler (#13107)\n\nclose #13106\"",
                "additions": 4,
                "deletions": 3,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-06T07:52:18Z"
            },
            {
                "commitId": "ae3e4b1c706b8d61a4a312ca5d23441df021b4b4",
                "message": "\"fix(utils): unwrap refs when stringifying values in template\n\nclose #12884\nclose #12888\"",
                "additions": 20,
                "deletions": 1,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T08:40:49Z"
            },
            {
                "commitId": "10c2a87c7038f2f80df23044c48a130bea253bf8",
                "message": "\"chore(deps): bump @babel/parser\"",
                "additions": 673,
                "deletions": 701,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:09:56Z"
            },
            {
                "commitId": "25f97a5033187372e7b8c591c79336197ee5c833",
                "message": "\"fix(compiler-sfc): fix rewriteDefault edge cases\n\nclose #13060\nclose #12892\nclose #12906\"",
                "additions": 79,
                "deletions": 7,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:25:12Z"
            },
            {
                "commitId": "d6468c4c383184acd66f3c9091005e83836a43f3",
                "message": "\"chore(deps): bump esbuild\"",
                "additions": 6,
                "deletions": 234,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T09:29:47Z"
            },
            {
                "commitId": "f5ef882a781b8a62c9ca00e95006d07636567c8e",
                "message": "\"fix(style): always set new styles\n\nclose #12901\nclose #12946\"",
                "additions": 17,
                "deletions": 4,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T15:17:02Z"
            },
            {
                "commitId": "a174c29dab2cf655b06f7870e0ac5a78ef35ec8a",
                "message": "\"fix(types): fix shallowRefs return type  (#12979)\n\nclose #12978\"",
                "additions": 30,
                "deletions": 8,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-06T15:51:56Z"
            },
            {
                "commitId": "6d857f5bee275dc98106e3b2cbc7722f5ec0cfc0",
                "message": "\"fix(watch): new property addition should trigger deep watcher with getter\n\nclose #12967\nclose #12972\"",
                "additions": 37,
                "deletions": 2,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-06T16:13:31Z"
            },
            {
                "commitId": "24fcf69624a633d43dfc0aa5fa6b93d11de7fad5",
                "message": "\"fix(types): type VNodeChildren should allow type number  (#13067)\n\nclose #12973\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-07T05:59:43Z"
            },
            {
                "commitId": "83d95351a9f809311d624fc3398e7f6829b72447",
                "message": "\"fix(compiler-sfc): check template `ref` usage,  (#12985)\n\nclose #12984\"",
                "additions": 29,
                "deletions": 0,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2023-12-07T06:14:27Z"
            },
            {
                "commitId": "3650c12f7d3a20f3155bc1fd2b068e84289e0d33",
                "message": "\"fix(types): provide types for built-in components\n\nclose #13002\"",
                "additions": 65,
                "deletions": 0,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-07T06:41:10Z"
            },
            {
                "commitId": "2632249925e632e56f6dfc8fdbcf682c82e4081b",
                "message": "\"fix(keep-alive): fix keep-alive memory leak\n\nclose #12827\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2023-12-07T08:12:36Z"
            },
            {
                "commitId": "e0747f40a879b4000a1959d21377b51d1f1ed988",
                "message": "\"fix(keep-alive): fix memory leak without breaking transition tests\"",
                "additions": 8,
                "deletions": 4,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2023-12-07T09:07:15Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "return a commit message on July 31?",
        "number": 4,
        "category": 1,
        "response": "I'm sorry, but it looks like there are no commit messages available for July 31, 2024. Can I help with anything else?",
        "chain_of_thought": "To address the question, we need to find commit messages from a specific date, July 31. The schema provides us with the Commit node, which has a property called `committedDate` that stores the date and time of the commit. The question specifies a date without a year, so we need to assume the current year, 2024, and format the date in ISO format with a regex to account for any time of day.\n\nThe relevant nodes and properties for this query are:\n- Commit node with the `committedDate` property.\n- We need to filter commits that have a `committedDate` matching \"2024-07-31\" with any time.\n\nThe query to find commit messages from July 31, 2024, is as follows:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commitMessage\n```\n\nThis query matches all commits with a `committedDate` on July 31, 2024, regardless of the time, and returns their commit messages.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commitMessage\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "incorrect"
    },
    {
        "question": "show me the changes for render.js file?",
        "number": 5,
        "category": 2,
        "response": "Here are the changes made to the `render.js` file across various commits:\n\n1. **Commit `f64765fa03c1eb1d37f3301ea5beb4d18e57158a`:**\n   - A typographical error was corrected in a comment within the `renderMixin` function.\n   ```diff\n   - // There's no need to maintain a stack becaues all render fns are called\n   + // There's no need to maintain a stack because all render fns are called\n   ```\n\n2. **Commit `099f3ba60085a089ff369442bdb835f3868e47c0`:**\n   - Added a new line to the `normalizeScopedSlots` function call within the `renderMixin` function.\n   ```diff\n   - vm.$slots\n   + vm.$slots,\n   + vm.$scopedSlots\n   ```\n\n3. **Commit `b9de23b1008b52deca7e7df40843e318a42f3f53`:**\n   - Introduced the `currentRenderingInstance` variable and related functions for testing purposes.\n   - Modified the `renderMixin` function to include logic for managing `currentRenderingInstance`.\n   ```diff\n   +export let currentRenderingInstance: Component | null = null\n   +\n   +// for testing only\n   +export function setCurrentRenderingInstance (vm: Component) {\n   +  currentRenderingInstance = vm\n   +}\n   ...\n   + // There's no need to maintain a stack becaues all render fns are called\n   + // separately from one another. Nested component's render fns are called\n   + // when parent component is patched.\n   + currentRenderingInstance = vm\n   ...\n   + } finally {\n   + currentRenderingInstance = null\n   ```\n\n4. **Commit `42fdf3f8378e5dc379808a4fa67b39c4a74ae191`:**\n   - Renamed functions and variables related to server prefetching.\n   ```diff\n   - function waitForSsrPrefetch (vm, resolve, reject) {\n   + function waitForServerPrefetch (vm, resolve, reject) {\n   ...\n   - waitForSsrPrefetch(child, resolve, reject)\n   + waitForServerPrefetch(child, resolve, reject)\n   ```\n\nThese patches reflect various improvements and updates to the `render.js` file, including bug fixes, feature additions, and refactoring changes.",
        "chain_of_thought": "To address the question \"show me the changes for render.js file,\" we need to identify the changes made to the file named \"render.js.\" The relevant nodes are the File and Commit nodes. The relationship between Commit and File is the changed relationship, which contains details about the changes made to the file.\n\nHere's how we can construct the query:\n\n1. Identify the File node with the name \"render.js.\"\n2. Find the Commit nodes that have a changed relationship with this File node.\n3. Retrieve the details of the changes, such as additions, deletions, and the patch.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'render.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n```\n\nThis query will return the commit ID, the number of additions and deletions, and the patch details for each commit that modified the file \"render.js,\" ordered by the commit date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'render.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n",
        "result": [
            {
                "commitId": "f64765fa03c1eb1d37f3301ea5beb4d18e57158a",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -84,7 +84,7 @@ export function renderMixin (Vue: Class<Component>) {\n     // render self\n     let vnode\n     try {\n-      // There's no need to maintain a stack becaues all render fns are called\n+      // There's no need to maintain a stack because all render fns are called\n       // separately from one another. Nested component's render fns are called\n       // when parent component is patched.\n       currentRenderingInstance = vm"
            },
            {
                "commitId": "099f3ba60085a089ff369442bdb835f3868e47c0",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -73,7 +73,8 @@ export function renderMixin (Vue: Class<Component>) {\n     if (_parentVnode) {\n       vm.$scopedSlots = normalizeScopedSlots(\n         _parentVnode.data.scopedSlots,\n-        vm.$slots\n+        vm.$slots,\n+        vm.$scopedSlots\n       )\n     }\n "
            },
            {
                "commitId": "b9de23b1008b52deca7e7df40843e318a42f3f53",
                "additions": 13,
                "deletions": 0,
                "patch": "@@ -51,6 +51,13 @@ export function initRender (vm: Component) {\n   }\n }\n \n+export let currentRenderingInstance: Component | null = null\n+\n+// for testing only\n+export function setCurrentRenderingInstance (vm: Component) {\n+  currentRenderingInstance = vm\n+}\n+\n export function renderMixin (Vue: Class<Component>) {\n   // install runtime convenience helpers\n   installRenderHelpers(Vue.prototype)\n@@ -76,6 +83,10 @@ export function renderMixin (Vue: Class<Component>) {\n     // render self\n     let vnode\n     try {\n+      // There's no need to maintain a stack becaues all render fns are called\n+      // separately from one another. Nested component's render fns are called\n+      // when parent component is patched.\n+      currentRenderingInstance = vm\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n       handleError(e, vm, `render`)\n@@ -92,6 +103,8 @@ export function renderMixin (Vue: Class<Component>) {\n       } else {\n         vnode = vm._vnode\n       }\n+    } finally {\n+      currentRenderingInstance = null\n     }\n     // if the returned array contains only a single node, allow it\n     if (Array.isArray(vnode) && vnode.length === 1) {"
            },
            {
                "commitId": "42fdf3f8378e5dc379808a4fa67b39c4a74ae191",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -50,8 +50,8 @@ const normalizeRender = vm => {\n   }\n }\n \n-function waitForSsrPrefetch (vm, resolve, reject) {\n-  let handlers = vm.$options.ssrPrefetch\n+function waitForServerPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.serverPrefetch\n   if (isDef(handlers)) {\n     if (!Array.isArray(handlers)) handlers = [handlers]\n     try {\n@@ -206,7 +206,7 @@ function renderComponentInner (node, isRoot, context) {\n \n   const reject = context.done\n \n-  waitForSsrPrefetch(child, resolve, reject)\n+  waitForServerPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -432,6 +432,6 @@ export function createRenderFunction (\n     const resolve = () => {\n       renderNode(component._render(), true, context)\n     }\n-    waitForSsrPrefetch(component, resolve, done)\n+    waitForServerPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "6fe07ebf5ab3fea1860c59fe7cdd2ec1b760f9b0",
                "additions": 47,
                "deletions": 9,
                "patch": "@@ -19,6 +19,7 @@ let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n     warned[msg] = true\n+    // eslint-disable-next-line no-console\n     console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n   }\n }\n@@ -49,6 +50,27 @@ const normalizeRender = vm => {\n   }\n }\n \n+function waitForSsrPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.ssrPrefetch\n+  if (isDef(handlers)) {\n+    if (!Array.isArray(handlers)) handlers = [handlers]\n+    try {\n+      const promises = []\n+      for (let i = 0, j = handlers.length; i < j; i++) {\n+        const result = handlers[i].call(vm, vm)\n+        if (result && typeof result.then === 'function') {\n+          promises.push(result)\n+        }\n+      }\n+      Promise.all(promises).then(resolve).catch(reject)\n+      return\n+    } catch (e) {\n+      reject(e)\n+    }\n+  }\n+  resolve()\n+}\n+\n function renderNode (node, isRoot, context) {\n   if (node.isString) {\n     renderStringNode(node, context)\n@@ -92,7 +114,12 @@ function renderComponent (node, isRoot, context) {\n   const registerComponent = registerComponentForCache(Ctor.options, write)\n \n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const rawKey = getKey(node.componentOptions.propsData)\n+    if (rawKey === false) {\n+      renderComponentInner(node, isRoot, context)\n+      return\n+    }\n+    const key = name + '::' + rawKey\n     const { has, get } = context\n     if (isDef(has)) {\n       has(key, hit => {\n@@ -166,13 +193,20 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+\n+  const resolve = () => {\n+    const childNode = child._render()\n+    childNode.parent = node\n+    context.renderStates.push({\n+      type: 'Component',\n+      prevActive\n+    })\n+    renderNode(childNode, isRoot, context)\n+  }\n+\n+  const reject = context.done\n+\n+  waitForSsrPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -394,6 +428,10 @@ export function createRenderFunction (\n     })\n     installSSRHelpers(component)\n     normalizeRender(component)\n-    renderNode(component._render(), true, context)\n+\n+    const resolve = () => {\n+      renderNode(component._render(), true, context)\n+    }\n+    waitForSsrPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "5d52262f1ce56d080c3438c4773a81dc5c8397aa",
                "additions": 4,
                "deletions": 1,
                "patch": "@@ -64,7 +64,10 @@ export function renderMixin (Vue: Class<Component>) {\n     const { render, _parentVnode } = vm.$options\n \n     if (_parentVnode) {\n-      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots)\n+      vm.$scopedSlots = normalizeScopedSlots(\n+        _parentVnode.data.scopedSlots,\n+        vm.$slots\n+      )\n     }\n \n     // set parent vnode. this allows render functions to have access"
            },
            {
                "commitId": "c7c13c2a156269d29fd9c9f8f6a3e53a2f2cac3d",
                "additions": 6,
                "deletions": 1,
                "patch": "@@ -11,6 +11,7 @@ import {\n import { createElement } from '../vdom/create-element'\n import { installRenderHelpers } from './render-helpers/index'\n import { resolveSlots } from './render-helpers/resolve-slots'\n+import { normalizeScopedSlots } from '../vdom/helpers/normalize-scoped-slots'\n import VNode, { createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n@@ -63,7 +64,7 @@ export function renderMixin (Vue: Class<Component>) {\n     const { render, _parentVnode } = vm.$options\n \n     if (_parentVnode) {\n-      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n+      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots)\n     }\n \n     // set parent vnode. this allows render functions to have access\n@@ -89,6 +90,10 @@ export function renderMixin (Vue: Class<Component>) {\n         vnode = vm._vnode\n       }\n     }\n+    // if the returned array contains only a single node, allow it\n+    if (Array.isArray(vnode) && vnode.length === 1) {\n+      vnode = vnode[0]\n+    }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "ab24285458c98e25d5749beb4edebef73672de4b",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -114,7 +114,12 @@ function renderComponent (node, isRoot, context) {\n   const registerComponent = registerComponentForCache(Ctor.options, write)\n \n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const rawKey = getKey(node.componentOptions.propsData)\n+    if (rawKey === false) {\n+      renderComponentInner(node, isRoot, context)\n+      return\n+    }\n+    const key = name + '::' + rawKey\n     const { has, get } = context\n     if (isDef(has)) {\n       has(key, hit => {\n@@ -188,7 +193,7 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  \n+\n   const resolve = () => {\n     const childNode = child._render()\n     childNode.parent = node"
            },
            {
                "commitId": "d7a533d6f85aae52aed03202fa5ccb774f0cb2ec",
                "additions": 41,
                "deletions": 8,
                "patch": "@@ -19,6 +19,7 @@ let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n     warned[msg] = true\n+    // eslint-disable-next-line no-console\n     console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n   }\n }\n@@ -49,6 +50,27 @@ const normalizeRender = vm => {\n   }\n }\n \n+function waitForSsrPrefetch (vm, resolve, reject) {\n+  let handlers = vm.$options.ssrPrefetch\n+  if (isDef(handlers)) {\n+    if (!Array.isArray(handlers)) handlers = [handlers]\n+    try {\n+      const promises = []\n+      for (let i = 0, j = handlers.length; i < j; i++) {\n+        const result = handlers[i].call(vm, vm)\n+        if (result && typeof result.then === 'function') {\n+          promises.push(result)\n+        }\n+      }\n+      Promise.all(promises).then(resolve).catch(reject)\n+      return\n+    } catch (e) {\n+      reject(e)\n+    }\n+  }\n+  resolve()\n+}\n+\n function renderNode (node, isRoot, context) {\n   if (node.isString) {\n     renderStringNode(node, context)\n@@ -166,13 +188,20 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+  \n+  const resolve = () => {\n+    const childNode = child._render()\n+    childNode.parent = node\n+    context.renderStates.push({\n+      type: 'Component',\n+      prevActive\n+    })\n+    renderNode(childNode, isRoot, context)\n+  }\n+\n+  const reject = context.done\n+\n+  waitForSsrPrefetch(child, resolve, reject)\n }\n \n function renderAsyncComponent (node, isRoot, context) {\n@@ -394,6 +423,10 @@ export function createRenderFunction (\n     })\n     installSSRHelpers(component)\n     normalizeRender(component)\n-    renderNode(component._render(), true, context)\n+\n+    const resolve = () => {\n+      renderNode(component._render(), true, context)\n+    }\n+    waitForSsrPrefetch(component, resolve, done)\n   }\n }"
            },
            {
                "commitId": "780dac561b9cd6c3cec28f154f76e7d28352ebf3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -326,7 +326,7 @@ function renderStartingTag (node: VNode, context) {\n       for (let i = 0; i < dirs.length; i++) {\n         const name = dirs[i].name\n         if (name !== 'show') {\n-          const dirRenderer = resolveAsset(context, 'directives', name, true)\n+          const dirRenderer = resolveAsset(context, 'directives', name)\n           if (dirRenderer) {\n             // directives mutate the node's data\n             // which then gets rendered by modules"
            },
            {
                "commitId": "307835284a326569ea12c4a22c7dcb8f36d2d8ca",
                "additions": 8,
                "deletions": 5,
                "patch": "@@ -3,6 +3,7 @@\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n+import { resolveAsset } from 'core/util/options'\n import { generateComponentTrace } from 'core/util/debug'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n@@ -324,11 +325,13 @@ function renderStartingTag (node: VNode, context) {\n     if (dirs) {\n       for (let i = 0; i < dirs.length; i++) {\n         const name = dirs[i].name\n-        const dirRenderer = directives[name]\n-        if (dirRenderer && name !== 'show') {\n-          // directives mutate the node's data\n-          // which then gets rendered by modules\n-          dirRenderer(node, dirs[i])\n+        if (name !== 'show') {\n+          const dirRenderer = resolveAsset(context, 'directives', name, true)\n+          if (dirRenderer) {\n+            // directives mutate the node's data\n+            // which then gets rendered by modules\n+            dirRenderer(node, dirs[i])\n+          }\n         }\n       }\n     }"
            },
            {
                "commitId": "530ca1b2db315fbd0e360807b2031d26665c5d3d",
                "additions": 0,
                "deletions": 8,
                "patch": "@@ -62,14 +62,6 @@ export function renderMixin (Vue: Class<Component>) {\n     const vm: Component = this\n     const { render, _parentVnode } = vm.$options\n \n-    // reset _rendered flag on slots for duplicate slot check\n-    if (process.env.NODE_ENV !== 'production') {\n-      for (const key in vm.$slots) {\n-        // $flow-disable-line\n-        vm.$slots[key]._rendered = false\n-      }\n-    }\n-\n     if (_parentVnode) {\n       vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n     }"
            },
            {
                "commitId": "1129d184482720bb52fa61f0a309645b7caaddd9",
                "additions": 5,
                "deletions": 9,
                "patch": "@@ -86,15 +86,11 @@ export function renderMixin (Vue: Class<Component>) {\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n       /* istanbul ignore else */\n-      if (process.env.NODE_ENV !== 'production') {\n-        if (vm.$options.renderError) {\n-          try {\n-            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n-          } catch (e) {\n-            handleError(e, vm, `renderError`)\n-            vnode = vm._vnode\n-          }\n-        } else {\n+      if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n+        try {\n+          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+        } catch (e) {\n+          handleError(e, vm, `renderError`)\n           vnode = vm._vnode\n         }\n       } else {"
            },
            {
                "commitId": "702000971c5a355c937607edb930b67311c78f5d",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -191,7 +191,8 @@ function renderAsyncComponent (node, isRoot, context) {\n       tag\n     )\n     if (resolvedNode) {\n-      if (resolvedNode.componnetInstance) {\n+      if (resolvedNode.componentOptions) {\n+        // normal component\n         renderComponent(resolvedNode, isRoot, context)\n       } else if (!Array.isArray(resolvedNode)) {\n         // single return node from functional component"
            },
            {
                "commitId": "882e7199fd8eee039291c4b9f7f324dcf46f32fd",
                "additions": 19,
                "deletions": 3,
                "patch": "@@ -191,7 +191,21 @@ function renderAsyncComponent (node, isRoot, context) {\n       tag\n     )\n     if (resolvedNode) {\n-      renderComponent(resolvedNode, isRoot, context)\n+      if (resolvedNode.componnetInstance) {\n+        renderComponent(resolvedNode, isRoot, context)\n+      } else if (!Array.isArray(resolvedNode)) {\n+        // single return node from functional component\n+        renderNode(resolvedNode, isRoot, context)\n+      } else {\n+        // multiple return nodes from functional component\n+        context.renderStates.push({\n+          type: 'Fragment',\n+          children: resolvedNode,\n+          rendered: 0,\n+          total: resolvedNode.length\n+        })\n+        context.next()\n+      }\n     } else {\n       // invalid component, but this does not throw on the client\n       // so render empty comment node\n@@ -232,9 +246,10 @@ function renderStringNode (el, context) {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n       type: 'Element',\n+      children,\n       rendered: 0,\n       total: children.length,\n-      endTag: el.close, children\n+      endTag: el.close\n     })\n     write(el.open, next)\n   }\n@@ -263,9 +278,10 @@ function renderElement (el, isRoot, context) {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n       type: 'Element',\n+      children,\n       rendered: 0,\n       total: children.length,\n-      endTag, children\n+      endTag\n     })\n     write(startTag, next)\n   }"
            },
            {
                "commitId": "956756b1be7084daf8b6afb92ac0da7c24cde2a5",
                "additions": 8,
                "deletions": 11,
                "patch": "@@ -11,7 +11,7 @@ import {\n import { createElement } from '../vdom/create-element'\n import { installRenderHelpers } from './render-helpers/index'\n import { resolveSlots } from './render-helpers/resolve-slots'\n-import VNode, { cloneVNodes, createEmptyVNode } from '../vdom/vnode'\n+import VNode, { createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n \n@@ -62,20 +62,17 @@ export function renderMixin (Vue: Class<Component>) {\n     const vm: Component = this\n     const { render, _parentVnode } = vm.$options\n \n-    if (vm._isMounted) {\n-      // if the parent didn't update, the slot nodes will be the ones from\n-      // last render. They need to be cloned to ensure \"freshness\" for this render.\n+    // reset _rendered flag on slots for duplicate slot check\n+    if (process.env.NODE_ENV !== 'production') {\n       for (const key in vm.$slots) {\n-        const slot = vm.$slots[key]\n-        // _rendered is a flag added by renderSlot, but may not be present\n-        // if the slot is passed from manually written render functions\n-        if (slot._rendered || (slot[0] && slot[0].elm)) {\n-          vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n-        }\n+        // $flow-disable-line\n+        vm.$slots[key]._rendered = false\n       }\n     }\n \n-    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n+    if (_parentVnode) {\n+      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject\n+    }\n \n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node."
            },
            {
                "commitId": "8936b8d9c147441555fcfd4ac748d817ba5ff60e",
                "additions": 4,
                "deletions": 7,
                "patch": "@@ -193,21 +193,18 @@ function renderAsyncComponent (node, isRoot, context) {\n     if (resolvedNode) {\n       renderComponent(resolvedNode, isRoot, context)\n     } else {\n-      reject()\n+      // invalid component, but this does not throw on the client\n+      // so render empty comment node\n+      context.write(`<!---->`, context.next)\n     }\n   }\n \n-  const reject = err => {\n-    console.error(`[vue-server-renderer] error when rendering async component:\\n`)\n-    if (err) console.error(err.stack)\n-    context.write(`<!--${node.text}-->`, context.next)\n-  }\n-\n   if (factory.resolved) {\n     resolve(factory.resolved)\n     return\n   }\n \n+  const reject = context.done\n   let res\n   try {\n     res = factory(resolve, reject)"
            },
            {
                "commitId": "604e081d0456ed136b24b5f759c608d153dfae93",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -252,8 +252,8 @@ function renderElement (el, isRoot, context) {\n     el.data.attrs[SSR_ATTR] = 'true'\n   }\n \n-  if (el.functionalOptions) {\n-    registerComponentForCache(el.functionalOptions, write)\n+  if (el.fnOptions) {\n+    registerComponentForCache(el.fnOptions, write)\n   }\n \n   const startTag = renderStartingTag(el, context)"
            },
            {
                "commitId": "f5cd29e1d8197613c4dfb4013b240784c3b64e43",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -17,6 +17,7 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n+  vm._staticTrees = null // v-once cached trees\n   const options = vm.$options\n   const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context"
            },
            {
                "commitId": "13196b25b8a0a84b3936982177195d2e04f13f79",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -66,7 +66,9 @@ export function renderMixin (Vue: Class<Component>) {\n       // last render. They need to be cloned to ensure \"freshness\" for this render.\n       for (const key in vm.$slots) {\n         const slot = vm.$slots[key]\n-        if (slot._rendered) {\n+        // _rendered is a flag added by renderSlot, but may not be present\n+        // if the slot is passed from manually written render functions\n+        if (slot._rendered || (slot[0] && slot[0].elm)) {\n           vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n         }\n       }"
            },
            {
                "commitId": "12255ff220ac8cd0171aa0ed56ce630a6843b2bd",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -17,9 +17,10 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n-  const parentVnode = vm.$vnode = vm.$options._parentVnode // the placeholder node in parent tree\n+  const options = vm.$options\n+  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context\n-  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n+  vm.$slots = resolveSlots(options._renderChildren, renderContext)\n   vm.$scopedSlots = emptyObject\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -39,12 +40,12 @@ export function initRender (vm: Component) {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, () => {\n+    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true)\n+    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true)\n   }\n }\n "
            },
            {
                "commitId": "bb1d888d44ddc39f06de5232883c8e3766a47be0",
                "additions": 1,
                "deletions": 9,
                "patch": "@@ -17,7 +17,6 @@ import { isUpdatingChildComponent } from './lifecycle'\n \n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n-  vm._staticTrees = null\n   const parentVnode = vm.$vnode = vm.$options._parentVnode // the placeholder node in parent tree\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n@@ -59,11 +58,7 @@ export function renderMixin (Vue: Class<Component>) {\n \n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n-    const {\n-      render,\n-      staticRenderFns,\n-      _parentVnode\n-    } = vm.$options\n+    const { render, _parentVnode } = vm.$options\n \n     if (vm._isMounted) {\n       // if the parent didn't update, the slot nodes will be the ones from\n@@ -78,9 +73,6 @@ export function renderMixin (Vue: Class<Component>) {\n \n     vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n \n-    if (staticRenderFns && !vm._staticTrees) {\n-      vm._staticTrees = []\n-    }\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n     vm.$vnode = _parentVnode"
            },
            {
                "commitId": "050bb33f9b02589357c037623ea8cbf8ff13555b",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -342,11 +342,15 @@ function renderStartingTag (node: VNode, context) {\n   ) {\n     markup += ` ${(scopeId: any)}`\n   }\n-  while (isDef(node)) {\n-    if (isDef(scopeId = node.context.$options._scopeId)) {\n-      markup += ` ${scopeId}`\n+  if (isDef(node.fnScopeId)) {\n+    markup += ` ${node.fnScopeId}`\n+  } else {\n+    while (isDef(node)) {\n+      if (isDef(scopeId = node.context.$options._scopeId)) {\n+        markup += ` ${scopeId}`\n+      }\n+      node = node.parent\n     }\n-    node = node.parent\n   }\n   return markup + '>'\n }"
            },
            {
                "commitId": "ea0d227d2ddfa5fc5e1112acf9cd485b4eae62cb",
                "additions": 7,
                "deletions": 38,
                "patch": "@@ -3,33 +3,18 @@\n import {\n   warn,\n   nextTick,\n-  toNumber,\n-  toString,\n-  looseEqual,\n   emptyObject,\n   handleError,\n-  looseIndexOf,\n   defineReactive\n } from '../util/index'\n \n-import VNode, {\n-  cloneVNodes,\n-  createTextVNode,\n-  createEmptyVNode\n-} from '../vdom/vnode'\n+import { createElement } from '../vdom/create-element'\n+import { installRenderHelpers } from './render-helpers/index'\n+import { resolveSlots } from './render-helpers/resolve-slots'\n+import VNode, { cloneVNodes, createEmptyVNode } from '../vdom/vnode'\n \n import { isUpdatingChildComponent } from './lifecycle'\n \n-import { createElement } from '../vdom/create-element'\n-import { renderList } from './render-helpers/render-list'\n-import { renderSlot } from './render-helpers/render-slot'\n-import { resolveFilter } from './render-helpers/resolve-filter'\n-import { checkKeyCodes } from './render-helpers/check-keycodes'\n-import { bindObjectProps } from './render-helpers/bind-object-props'\n-import { renderStatic, markOnce } from './render-helpers/render-static'\n-import { bindObjectListeners } from './render-helpers/bind-object-listeners'\n-import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n-\n export function initRender (vm: Component) {\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n@@ -65,6 +50,9 @@ export function initRender (vm: Component) {\n }\n \n export function renderMixin (Vue: Class<Component>) {\n+  // install runtime convenience helpers\n+  installRenderHelpers(Vue.prototype)\n+\n   Vue.prototype.$nextTick = function (fn: Function) {\n     return nextTick(fn, this)\n   }\n@@ -135,23 +123,4 @@ export function renderMixin (Vue: Class<Component>) {\n     vnode.parent = _parentVnode\n     return vnode\n   }\n-\n-  // internal render helpers.\n-  // these are exposed on the instance prototype to reduce generated render\n-  // code size.\n-  Vue.prototype._o = markOnce\n-  Vue.prototype._n = toNumber\n-  Vue.prototype._s = toString\n-  Vue.prototype._l = renderList\n-  Vue.prototype._t = renderSlot\n-  Vue.prototype._q = looseEqual\n-  Vue.prototype._i = looseIndexOf\n-  Vue.prototype._m = renderStatic\n-  Vue.prototype._f = resolveFilter\n-  Vue.prototype._k = checkKeyCodes\n-  Vue.prototype._b = bindObjectProps\n-  Vue.prototype._v = createTextVNode\n-  Vue.prototype._e = createEmptyVNode\n-  Vue.prototype._u = resolveScopedSlots\n-  Vue.prototype._g = bindObjectListeners\n }"
            },
            {
                "commitId": "dff85b230abda63839ed6b80d56ccfc6068b9ae0",
                "additions": 15,
                "deletions": 10,
                "patch": "@@ -1,18 +1,14 @@\n /* @flow */\n \n-import {\n-  isDef,\n-  isUndef,\n-  isTrue,\n-  extend\n-} from 'shared/util'\n-\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n+import { generateComponentTrace } from 'core/util/debug'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n \n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n import {\n   createComponent,\n   createComponentInstanceForVnode\n@@ -26,13 +22,22 @@ const warnOnce = msg => {\n   }\n }\n \n+const onCompilationError = (err, vm) => {\n+  const trace = vm ? generateComponentTrace(vm) : ''\n+  throw new Error(`\\n\\u001b[31m${err}${trace}\\u001b[39m\\n`)\n+}\n+\n const normalizeRender = vm => {\n   const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      extend(vm.$options, ssrCompileToFunctions(template, {\n-        scopeId: _scopeId\n-      }))\n+      const compiled = ssrCompileToFunctions(template, {\n+        scopeId: _scopeId,\n+        warn: onCompilationError\n+      }, vm)\n+\n+      vm.$options.render = compiled.render\n+      vm.$options.staticRenderFns = compiled.staticRenderFns\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${"
            },
            {
                "commitId": "b3cd9bc3940eb1e01da7081450929557d9c1651e",
                "additions": 11,
                "deletions": 4,
                "patch": "@@ -101,14 +101,21 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      handleError(e, vm, `render function`)\n+      handleError(e, vm, `render`)\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n       /* istanbul ignore else */\n       if (process.env.NODE_ENV !== 'production') {\n-        vnode = vm.$options.renderError\n-          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n-          : vm._vnode\n+        if (vm.$options.renderError) {\n+          try {\n+            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+          } catch (e) {\n+            handleError(e, vm, `renderError`)\n+            vnode = vm._vnode\n+          }\n+        } else {\n+          vnode = vm._vnode\n+        }\n       } else {\n         vnode = vm._vnode\n       }"
            },
            {
                "commitId": "e76e648bc8b6a9df64f0b44716f76a1e4b259ed6",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -3,7 +3,8 @@\n import {\n   isDef,\n   isUndef,\n-  isTrue\n+  isTrue,\n+  extend\n } from 'shared/util'\n \n import { escape } from 'web/server/util'\n@@ -29,7 +30,7 @@ const normalizeRender = vm => {\n   const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+      extend(vm.$options, ssrCompileToFunctions(template, {\n         scopeId: _scopeId\n       }))\n     } else {"
            },
            {
                "commitId": "0529040c17b8632032a43d142aac88386f6b4a1f",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -78,9 +78,13 @@ export function renderMixin (Vue: Class<Component>) {\n     } = vm.$options\n \n     if (vm._isMounted) {\n-      // clone slot nodes on re-renders\n+      // if the parent didn't update, the slot nodes will be the ones from\n+      // last render. They need to be cloned to ensure \"freshness\" for this render.\n       for (const key in vm.$slots) {\n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+        const slot = vm.$slots[key]\n+        if (slot._rendered) {\n+          vm.$slots[key] = cloneVNodes(slot, true /* deep */)\n+        }\n       }\n     }\n "
            },
            {
                "commitId": "59dbd4a414394a3ce581f9fbd9554da9af9e4b1d",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -49,17 +49,18 @@ export function initRender (vm: Component) {\n   // $attrs & $listeners are exposed for easier HOC creation.\n   // they need to be reactive so that HOCs using them are always updated\n   const parentData = parentVnode && parentVnode.data\n+\n   /* istanbul ignore else */\n   if (process.env.NODE_ENV !== 'production') {\n-    defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners, () => {\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n-    defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n-    defineReactive(vm, '$listeners', vm.$options._parentListeners, null, true)\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true)\n   }\n }\n "
            },
            {
                "commitId": "17130611261fdbab70d0e5ab45036e4b612b17fe",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -54,12 +54,12 @@ export function initRender (vm: Component) {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n     }, true)\n-    defineReactive(vm, '$listeners', parentData && parentData.on, () => {\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners, () => {\n       !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n     }, true)\n   } else {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n-    defineReactive(vm, '$listeners', parentData && parentData.on, null, true)\n+    defineReactive(vm, '$listeners', vm.$options._parentListeners, null, true)\n   }\n }\n "
            },
            {
                "commitId": "e0ca894dfb465106094af440667c15f7eded0a25",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -49,6 +49,7 @@ export function initRender (vm: Component) {\n   // $attrs & $listeners are exposed for easier HOC creation.\n   // they need to be reactive so that HOCs using them are always updated\n   const parentData = parentVnode && parentVnode.data\n+  /* istanbul ignore else */\n   if (process.env.NODE_ENV !== 'production') {\n     defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n       !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)"
            },
            {
                "commitId": "61187596b9af48f1cb7b1848ad3eccc02ac2509d",
                "additions": 19,
                "deletions": 1,
                "patch": "@@ -8,7 +8,8 @@ import {\n   looseEqual,\n   emptyObject,\n   handleError,\n-  looseIndexOf\n+  looseIndexOf,\n+  defineReactive\n } from '../util/index'\n \n import VNode, {\n@@ -17,6 +18,8 @@ import VNode, {\n   createEmptyVNode\n } from '../vdom/vnode'\n \n+import { isUpdatingChildComponent } from './lifecycle'\n+\n import { createElement } from '../vdom/create-element'\n import { renderList } from './render-helpers/render-list'\n import { renderSlot } from './render-helpers/render-slot'\n@@ -42,6 +45,21 @@ export function initRender (vm: Component) {\n   // normalization is always applied for the public version, used in\n   // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n+\n+  // $attrs & $listeners are exposed for easier HOC creation.\n+  // they need to be reactive so that HOCs using them are always updated\n+  const parentData = parentVnode && parentVnode.data\n+  if (process.env.NODE_ENV !== 'production') {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs, () => {\n+      !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)\n+    }, true)\n+    defineReactive(vm, '$listeners', parentData && parentData.on, () => {\n+      !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)\n+    }, true)\n+  } else {\n+    defineReactive(vm, '$attrs', parentData && parentData.attrs, null, true)\n+    defineReactive(vm, '$listeners', parentData && parentData.on, null, true)\n+  }\n }\n \n export function renderMixin (Vue: Class<Component>) {"
            },
            {
                "commitId": "11614d63b7862b68b11cc45c0891437c62a832d7",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -24,6 +24,7 @@ import { resolveFilter } from './render-helpers/resolve-filter'\n import { checkKeyCodes } from './render-helpers/check-keycodes'\n import { bindObjectProps } from './render-helpers/bind-object-props'\n import { renderStatic, markOnce } from './render-helpers/render-static'\n+import { bindObjectListeners } from './render-helpers/bind-object-listeners'\n import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n \n export function initRender (vm: Component) {\n@@ -121,4 +122,5 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._v = createTextVNode\n   Vue.prototype._e = createEmptyVNode\n   Vue.prototype._u = resolveScopedSlots\n+  Vue.prototype._g = bindObjectListeners\n }"
            },
            {
                "commitId": "0cd6ef321b3168d6c46c7a870c3d2a53fd9d4bde",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -172,6 +172,9 @@ function renderAsyncComponent (node, isRoot, context) {\n   const factory = node.asyncFactory\n \n   const resolve = comp => {\n+    if (comp.__esModule && comp.default) {\n+      comp = comp.default\n+    }\n     const { data, children, tag } = node.asyncMeta\n     const nodeContext = node.asyncMeta.context\n     const resolvedNode: any = createComponent("
            },
            {
                "commitId": "c994e5cf48a912d98c1a302375bb9964dba98113",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -343,7 +343,7 @@ function renderStartingTag (node: VNode, context) {\n }\n \n export function createRenderFunction (\n-  modules: Array<Function>,\n+  modules: Array<(node: VNode) => ?string>,\n   directives: Object,\n   isUnaryTag: Function,\n   cache: any"
            },
            {
                "commitId": "9cf6646f46ef3c13236677e58e72d2c6dd5c8abf",
                "additions": 72,
                "deletions": 14,
                "patch": "@@ -1,13 +1,21 @@\n /* @flow */\n \n+import {\n+  isDef,\n+  isUndef,\n+  isTrue\n+} from 'shared/util'\n+\n import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n-import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue } from 'shared/util'\n+import {\n+  createComponent,\n+  createComponentInstanceForVnode\n+} from 'core/vdom/create-component'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -39,20 +47,20 @@ function renderNode (node, isRoot, context) {\n     renderStringNode(node, context)\n   } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n-  } else {\n-    if (isDef(node.tag)) {\n-      renderElement(node, isRoot, context)\n-    } else if (isTrue(node.isComment)) {\n-      context.write(\n-        `<!--${node.text}-->`,\n-        context.next\n-      )\n+  } else if (isDef(node.tag)) {\n+    renderElement(node, isRoot, context)\n+  } else if (isTrue(node.isComment)) {\n+    if (isDef(node.asyncFactory)) {\n+      // async component\n+      renderAsyncComponent(node, isRoot, context)\n     } else {\n-      context.write(\n-        node.raw ? node.text : escape(String(node.text)),\n-        context.next\n-      )\n+      context.write(`<!--${node.text}-->`, context.next)\n     }\n+  } else {\n+    context.write(\n+      node.raw ? node.text : escape(String(node.text)),\n+      context.next\n+    )\n   }\n }\n \n@@ -160,6 +168,56 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderAsyncComponent (node, isRoot, context) {\n+  const factory = node.asyncFactory\n+\n+  const resolve = comp => {\n+    const { data, children, tag } = node.asyncMeta\n+    const nodeContext = node.asyncMeta.context\n+    const resolvedNode: any = createComponent(\n+      comp,\n+      data,\n+      nodeContext,\n+      children,\n+      tag\n+    )\n+    if (resolvedNode) {\n+      renderComponent(resolvedNode, isRoot, context)\n+    } else {\n+      reject()\n+    }\n+  }\n+\n+  const reject = err => {\n+    console.error(`[vue-server-renderer] error when rendering async component:\\n`)\n+    if (err) console.error(err.stack)\n+    context.write(`<!--${node.text}-->`, context.next)\n+  }\n+\n+  if (factory.resolved) {\n+    resolve(factory.resolved)\n+    return\n+  }\n+\n+  let res\n+  try {\n+    res = factory(resolve, reject)\n+  } catch (e) {\n+    reject(e)\n+  }\n+  if (res) {\n+    if (typeof res.then === 'function') {\n+      res.then(resolve, reject).catch(reject)\n+    } else {\n+      // new syntax in 2.3\n+      const comp = res.component\n+      if (comp && typeof comp.then === 'function') {\n+        comp.then(resolve, reject).catch(reject)\n+      }\n+    }\n+  }\n+}\n+\n function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {"
            },
            {
                "commitId": "43485fbc5b779e02122c3b7fc64296a2cfee31f6",
                "additions": 27,
                "deletions": 11,
                "patch": "@@ -1,10 +1,10 @@\n /* @flow */\n \n-const { escape } = require('he')\n-\n+import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n-import { compileToFunctions } from 'web/compiler/index'\n+import { ssrCompileToFunctions } from 'web/server/compiler'\n+import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n import { isDef, isUndef, isTrue } from 'shared/util'\n@@ -17,16 +17,13 @@ const warnOnce = msg => {\n   }\n }\n \n-const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n-  const { render, template } = vm.$options\n+  const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      const renderFns = (\n-        compilationCache[template] ||\n-        (compilationCache[template] = compileToFunctions(template))\n-      )\n-      Object.assign(vm.$options, renderFns)\n+      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+        scopeId: _scopeId\n+      }))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${\n@@ -38,7 +35,9 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (isDef(node.componentOptions)) {\n+  if (node.isString) {\n+    renderStringNode(node, context)\n+  } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n@@ -161,6 +160,22 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderStringNode (el, context) {\n+  const { write, next } = context\n+  if (isUndef(el.children) || el.children.length === 0) {\n+    write(el.open + (el.close || ''), next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag: el.close, children\n+    })\n+    write(el.open, next)\n+  }\n+}\n+\n function renderElement (el, isRoot, context) {\n   const { write, next } = context\n \n@@ -289,6 +304,7 @@ export function createRenderFunction (\n       isUnaryTag, modules, directives,\n       cache\n     })\n+    installSSRHelpers(component)\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "55d8bfd6fdda38f31b17cffa07e5ab743c9f2670",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -18,10 +18,12 @@ const warnOnce = msg => {\n }\n \n const normalizeRender = vm => {\n-  const { render, template } = vm.$options\n+  const { render, template, _scopeId } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      Object.assign(vm.$options, ssrCompileToFunctions(template))\n+      Object.assign(vm.$options, ssrCompileToFunctions(template, {\n+        scopeId: _scopeId\n+      }))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${"
            },
            {
                "commitId": "c0b9b6d8300ded5a1ceb7f190ced92e4cd3f5870",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -1,7 +1,6 @@\n /* @flow */\n \n-const { escape } = require('he')\n-\n+import { escape } from 'web/server/util'\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'"
            },
            {
                "commitId": "9fbca0dc792e94eb775a8f08694a04963dc20e07",
                "additions": 2,
                "deletions": 8,
                "patch": "@@ -5,15 +5,11 @@ const { escape } = require('he')\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { ssrCompileToFunctions } from 'web/server/compiler'\n+import { installSSRHelpers } from './optimizing-compiler/runtime-helpers'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n import { isDef, isUndef, isTrue } from 'shared/util'\n \n-import {\n-  createStringNode,\n-  createStringList\n-} from './optimizing-compiler/runtime-helpers'\n-\n let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n@@ -23,9 +19,6 @@ const warnOnce = msg => {\n }\n \n const normalizeRender = vm => {\n-  vm._ssrEscape = escape\n-  vm._ssrNode = createStringNode\n-  vm._ssrList = createStringList\n   const { render, template } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n@@ -310,6 +303,7 @@ export function createRenderFunction (\n       isUnaryTag, modules, directives,\n       cache\n     })\n+    installSSRHelpers(component)\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "5b58526a525f67ed7a3dffcaf38a51ab2affd357",
                "additions": 13,
                "deletions": 48,
                "patch": "@@ -4,10 +4,15 @@ const { escape } = require('he')\n \n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n-import { compileToFunctions } from 'web/compiler/index'\n+import { ssrCompileToFunctions } from 'web/server/compiler'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue, isObject } from 'shared/util'\n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n+import {\n+  createStringNode,\n+  createStringList\n+} from './optimizing-compiler/runtime-helpers'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -17,16 +22,14 @@ const warnOnce = msg => {\n   }\n }\n \n-const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n+  vm._ssrEscape = escape\n+  vm._ssrNode = createStringNode\n+  vm._ssrList = createStringList\n   const { render, template } = vm.$options\n   if (isUndef(render)) {\n     if (template) {\n-      const renderFns = (\n-        compilationCache[template] ||\n-        (compilationCache[template] = compileToFunctions(template))\n-      )\n-      Object.assign(vm.$options, renderFns)\n+      Object.assign(vm.$options, ssrCompileToFunctions(template))\n     } else {\n       throw new Error(\n         `render function or template not defined in component: ${\n@@ -145,39 +148,6 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   renderComponentInner(node, isRoot, context)\n }\n \n-function StringNode (open, close, children) {\n-  this.isString = true\n-  this.open = open\n-  this.close = close\n-  this.children = children\n-}\n-\n-function createStringNode (open, close, children) {\n-  return new StringNode(open, close, children)\n-}\n-\n-function createSSRList (val, render) {\n-  let ret = ''\n-  let i, l, keys, key\n-  if (Array.isArray(val) || typeof val === 'string') {\n-    for (i = 0, l = val.length; i < l; i++) {\n-      ret += render(val[i], i)\n-    }\n-  } else if (typeof val === 'number') {\n-    for (i = 0; i < val; i++) {\n-      ret += render(i + 1, i)\n-    }\n-  } else if (isObject(val)) {\n-    keys = Object.keys(val)\n-    ret = new Array(keys.length)\n-    for (i = 0, l = keys.length; i < l; i++) {\n-      key = keys[i]\n-      ret += render(val[key], key, i)\n-    }\n-  }\n-  return ret\n-}\n-\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -187,11 +157,6 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-\n-  child._ssrNode = createStringNode\n-  child._ssrEscape = escape\n-  child._ssrList = createSSRList\n-\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({\n@@ -204,7 +169,7 @@ function renderComponentInner (node, isRoot, context) {\n function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {\n-    write(el.open() + (el.close || ''), next)\n+    write(el.open + (el.close || ''), next)\n   } else {\n     const children: Array<VNode> = el.children\n     context.renderStates.push({\n@@ -213,7 +178,7 @@ function renderStringNode (el, context) {\n       total: children.length,\n       endTag: el.close, children\n     })\n-    write(el.open(), next)\n+    write(el.open, next)\n   }\n }\n "
            },
            {
                "commitId": "8efa3a2b2245d534d042f109ad7fc9311f47fa27",
                "additions": 29,
                "deletions": 4,
                "patch": "@@ -7,7 +7,7 @@ import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-import { isDef, isUndef, isTrue } from 'shared/util'\n+import { isDef, isUndef, isTrue, isObject } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -152,11 +152,32 @@ function StringNode (open, close, children) {\n   this.children = children\n }\n \n-function createStringNode (id, children) {\n-  const { open, close } = this.$options.stringRenderFns[id]\n+function createStringNode (open, close, children) {\n   return new StringNode(open, close, children)\n }\n \n+function createSSRList (val, render) {\n+  let ret = ''\n+  let i, l, keys, key\n+  if (Array.isArray(val) || typeof val === 'string') {\n+    for (i = 0, l = val.length; i < l; i++) {\n+      ret += render(val[i], i)\n+    }\n+  } else if (typeof val === 'number') {\n+    for (i = 0; i < val; i++) {\n+      ret += render(i + 1, i)\n+    }\n+  } else if (isObject(val)) {\n+    keys = Object.keys(val)\n+    ret = new Array(keys.length)\n+    for (i = 0, l = keys.length; i < l; i++) {\n+      key = keys[i]\n+      ret += render(val[key], key, i)\n+    }\n+  }\n+  return ret\n+}\n+\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -166,7 +187,11 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n-  child._ss = createStringNode\n+\n+  child._ssrNode = createStringNode\n+  child._ssrEscape = escape\n+  child._ssrList = createSSRList\n+\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({"
            },
            {
                "commitId": "85e24b3b31adc29ccd18b2159e84e4413f327fd9",
                "additions": 16,
                "deletions": 3,
                "patch": "@@ -38,8 +38,8 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (node.isTextNode) {\n-    renderTextNode(node, context)\n+  if (node.isString) {\n+    renderStringNode(node, context)\n   } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n@@ -145,6 +145,18 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   renderComponentInner(node, isRoot, context)\n }\n \n+function StringNode (open, close, children) {\n+  this.isString = true\n+  this.open = open\n+  this.close = close\n+  this.children = children\n+}\n+\n+function createStringNode (id, children) {\n+  const { open, close } = this.$options.stringRenderFns[id]\n+  return new StringNode(open, close, children)\n+}\n+\n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n   // expose userContext on vnode\n@@ -154,6 +166,7 @@ function renderComponentInner (node, isRoot, context) {\n     context.activeInstance\n   )\n   normalizeRender(child)\n+  child._ss = createStringNode\n   const childNode = child._render()\n   childNode.parent = node\n   context.renderStates.push({\n@@ -163,7 +176,7 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n-function renderTextNode (el, context) {\n+function renderStringNode (el, context) {\n   const { write, next } = context\n   if (isUndef(el.children) || el.children.length === 0) {\n     write(el.open() + (el.close || ''), next)"
            },
            {
                "commitId": "da1db7af31b397eab1608217d1f6dee26f753a59",
                "additions": 19,
                "deletions": 1,
                "patch": "@@ -38,7 +38,9 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  if (isDef(node.componentOptions)) {\n+  if (node.isTextNode) {\n+    renderTextNode(node, context)\n+  } else if (isDef(node.componentOptions)) {\n     renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n@@ -161,6 +163,22 @@ function renderComponentInner (node, isRoot, context) {\n   renderNode(childNode, isRoot, context)\n }\n \n+function renderTextNode (el, context) {\n+  const { write, next } = context\n+  if (isUndef(el.children) || el.children.length === 0) {\n+    write(el.open() + (el.close || ''), next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag: el.close, children\n+    })\n+    write(el.open(), next)\n+  }\n+}\n+\n function renderElement (el, isRoot, context) {\n   const { write, next } = context\n "
            },
            {
                "commitId": "b5b1ac373a8f4d464454e7770a888fdd178891c4",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -255,8 +255,9 @@ function renderStartingTag (node: VNode, context) {\n   let scopeId\n   const activeInstance = context.activeInstance\n   if (isDef(activeInstance) &&\n-      activeInstance !== node.context &&\n-      isDef(scopeId = activeInstance.$options._scopeId)) {\n+    activeInstance !== node.context &&\n+    isDef(scopeId = activeInstance.$options._scopeId)\n+  ) {\n     markup += ` ${(scopeId: any)}`\n   }\n   while (isDef(node)) {"
            },
            {
                "commitId": "8dc4215994a8d4e4046b428b837863e96275de0e",
                "additions": 19,
                "deletions": 10,
                "patch": "@@ -57,22 +57,26 @@ function renderNode (node, isRoot, context) {\n   }\n }\n \n+function registerComponentForCache (options, write) {\n+  // exposed by vue-loader, need to call this if cache hit because\n+  // component lifecycle hooks will not be called.\n+  const register = options._ssrRegister\n+  if (write.caching && isDef(register)) {\n+    write.componentBuffer[write.componentBuffer.length - 1].add(register)\n+  }\n+  return register\n+}\n+\n function renderComponent (node, isRoot, context) {\n   const { write, next, userContext } = context\n \n   // check cache hit\n   const Ctor = node.componentOptions.Ctor\n   const getKey = Ctor.options.serverCacheKey\n   const name = Ctor.options.name\n-\n-  // exposed by vue-loader, need to call this if cache hit because\n-  // component lifecycle hooks will not be called.\n-  const registerComponent = Ctor.options._ssrRegister\n-  if (write.caching && isDef(registerComponent)) {\n-    write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n-  }\n-\n   const cache = context.cache\n+  const registerComponent = registerComponentForCache(Ctor.options, write)\n+\n   if (isDef(getKey) && isDef(cache) && isDef(name)) {\n     const key = name + '::' + getKey(node.componentOptions.propsData)\n     const { has, get } = context\n@@ -147,7 +151,6 @@ function renderComponentInner (node, isRoot, context) {\n     node,\n     context.activeInstance\n   )\n-  node.ssrContext = null\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node\n@@ -159,14 +162,20 @@ function renderComponentInner (node, isRoot, context) {\n }\n \n function renderElement (el, isRoot, context) {\n+  const { write, next } = context\n+\n   if (isTrue(isRoot)) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n     el.data.attrs[SSR_ATTR] = 'true'\n   }\n+\n+  if (el.functionalOptions) {\n+    registerComponentForCache(el.functionalOptions, write)\n+  }\n+\n   const startTag = renderStartingTag(el, context)\n   const endTag = `</${el.tag}>`\n-  const { write, next } = context\n   if (context.isUnaryTag(el.tag)) {\n     write(startTag, next)\n   } else if (isUndef(el.children) || el.children.length === 0) {"
            },
            {
                "commitId": "228f0f8f3b08312d926f99b3d57757fee40e4870",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -77,9 +77,9 @@ function renderComponent (node, isRoot, context) {\n     const key = name + '::' + getKey(node.componentOptions.propsData)\n     const { has, get } = context\n     if (isDef(has)) {\n-      (has: any)(key, hit => {\n+      has(key, hit => {\n         if (hit === true && isDef(get)) {\n-          (get: any)(key, res => {\n+          get(key, res => {\n             if (isDef(registerComponent)) {\n               registerComponent(userContext)\n             }\n@@ -91,7 +91,7 @@ function renderComponent (node, isRoot, context) {\n         }\n       })\n     } else if (isDef(get)) {\n-      (get: any)(key, res => {\n+      get(key, res => {\n         if (isDef(res)) {\n           if (isDef(registerComponent)) {\n             registerComponent(userContext)"
            },
            {
                "commitId": "9ca0c35a3fadd1f97c9b5c68b7b51d4f96b40a72",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -141,10 +141,13 @@ function renderComponentWithCache (node, isRoot, key, context) {\n \n function renderComponentInner (node, isRoot, context) {\n   const prevActive = context.activeInstance\n+  // expose userContext on vnode\n+  node.ssrContext = context.userContext\n   const child = context.activeInstance = createComponentInstanceForVnode(\n     node,\n     context.activeInstance\n   )\n+  node.ssrContext = null\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node"
            },
            {
                "commitId": "914879f1ce61a67fb7b9f367e6caaaf002c18fe3",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n-import { escape } from 'he'\n+const { escape } = require('he')\n+\n import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'"
            },
            {
                "commitId": "3b04547c0c4fc56d786f5d03446c81b2d7501297",
                "additions": 89,
                "deletions": 74,
                "patch": "@@ -37,89 +37,88 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  const { write, next, userContext } = context\n   if (isDef(node.componentOptions)) {\n-    // check cache hit\n-    const Ctor = node.componentOptions.Ctor\n-    const getKey = Ctor.options.serverCacheKey\n-    const name = Ctor.options.name\n-\n-    // exposed by vue-loader, need to call this if cache hit because\n-    // component lifecycle hooks will not be called.\n-    const registerComponent = Ctor.options._ssrRegister\n-    if (write.caching && isDef(registerComponent)) {\n-      write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n-    }\n-\n-    const cache = context.cache\n-    if (isDef(getKey) && isDef(cache) && isDef(name)) {\n-      const key = name + '::' + getKey(node.componentOptions.propsData)\n-      const { has, get } = context\n-      if (isDef(has)) {\n-        (has: any)(key, hit => {\n-          if (hit === true && isDef(get)) {\n-            (get: any)(key, res => {\n-              registerComponent && registerComponent(userContext)\n-              res.components.forEach(register => register(userContext))\n-              write(res.html, next)\n-            })\n-          } else {\n-            renderComponentWithCache(node, isRoot, key, context)\n-          }\n-        })\n-      } else if (isDef(get)) {\n-        (get: any)(key, res => {\n-          if (isDef(res)) {\n-            registerComponent && registerComponent(userContext)\n-            res.components.forEach(register => register(userContext))\n-            write(res.html, next)\n-          } else {\n-            renderComponentWithCache(node, isRoot, key, context)\n-          }\n-        })\n-      }\n-    } else {\n-      if (isDef(getKey) && isUndef(cache)) {\n-        warnOnce(\n-          `[vue-server-renderer] Component ${\n-            Ctor.options.name || '(anonymous)'\n-          } implemented serverCacheKey, ` +\n-          'but no cache was provided to the renderer.'\n-        )\n-      }\n-      if (isDef(getKey) && isUndef(name)) {\n-        warnOnce(\n-          `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n-          `must also define a unique \"name\" option.`\n-        )\n-      }\n-      renderComponent(node, isRoot, context)\n-    }\n+    renderComponent(node, isRoot, context)\n   } else {\n     if (isDef(node.tag)) {\n       renderElement(node, isRoot, context)\n     } else if (isTrue(node.isComment)) {\n-      write(`<!--${node.text}-->`, next)\n+      context.write(\n+        `<!--${node.text}-->`,\n+        context.next\n+      )\n     } else {\n-      write(node.raw ? node.text : escape(String(node.text)), next)\n+      context.write(\n+        node.raw ? node.text : escape(String(node.text)),\n+        context.next\n+      )\n     }\n   }\n }\n \n function renderComponent (node, isRoot, context) {\n-  const prevActive = context.activeInstance\n-  const child = context.activeInstance = createComponentInstanceForVnode(\n-    node,\n-    context.activeInstance\n-  )\n-  normalizeRender(child)\n-  const childNode = child._render()\n-  childNode.parent = node\n-  context.renderStates.push({\n-    type: 'Component',\n-    prevActive\n-  })\n-  renderNode(childNode, isRoot, context)\n+  const { write, next, userContext } = context\n+\n+  // check cache hit\n+  const Ctor = node.componentOptions.Ctor\n+  const getKey = Ctor.options.serverCacheKey\n+  const name = Ctor.options.name\n+\n+  // exposed by vue-loader, need to call this if cache hit because\n+  // component lifecycle hooks will not be called.\n+  const registerComponent = Ctor.options._ssrRegister\n+  if (write.caching && isDef(registerComponent)) {\n+    write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n+  }\n+\n+  const cache = context.cache\n+  if (isDef(getKey) && isDef(cache) && isDef(name)) {\n+    const key = name + '::' + getKey(node.componentOptions.propsData)\n+    const { has, get } = context\n+    if (isDef(has)) {\n+      (has: any)(key, hit => {\n+        if (hit === true && isDef(get)) {\n+          (get: any)(key, res => {\n+            if (isDef(registerComponent)) {\n+              registerComponent(userContext)\n+            }\n+            res.components.forEach(register => register(userContext))\n+            write(res.html, next)\n+          })\n+        } else {\n+          renderComponentWithCache(node, isRoot, key, context)\n+        }\n+      })\n+    } else if (isDef(get)) {\n+      (get: any)(key, res => {\n+        if (isDef(res)) {\n+          if (isDef(registerComponent)) {\n+            registerComponent(userContext)\n+          }\n+          res.components.forEach(register => register(userContext))\n+          write(res.html, next)\n+        } else {\n+          renderComponentWithCache(node, isRoot, key, context)\n+        }\n+      })\n+    }\n+  } else {\n+    if (isDef(getKey) && isUndef(cache)) {\n+      warnOnce(\n+        `[vue-server-renderer] Component ${\n+          Ctor.options.name || '(anonymous)'\n+        } implemented serverCacheKey, ` +\n+        'but no cache was provided to the renderer.'\n+      )\n+    }\n+    if (isDef(getKey) && isUndef(name)) {\n+      warnOnce(\n+        `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+        `must also define a unique \"name\" option.`\n+      )\n+    }\n+    renderComponentInner(node, isRoot, context)\n+  }\n }\n \n function renderComponentWithCache (node, isRoot, key, context) {\n@@ -136,7 +135,23 @@ function renderComponentWithCache (node, isRoot, key, context) {\n     bufferIndex,\n     componentBuffer\n   })\n-  renderComponent(node, isRoot, context)\n+  renderComponentInner(node, isRoot, context)\n+}\n+\n+function renderComponentInner (node, isRoot, context) {\n+  const prevActive = context.activeInstance\n+  const child = context.activeInstance = createComponentInstanceForVnode(\n+    node,\n+    context.activeInstance\n+  )\n+  normalizeRender(child)\n+  const childNode = child._render()\n+  childNode.parent = node\n+  context.renderStates.push({\n+    type: 'Component',\n+    prevActive\n+  })\n+  renderNode(childNode, isRoot, context)\n }\n \n function renderElement (el, isRoot, context) {\n@@ -166,7 +181,7 @@ function renderElement (el, isRoot, context) {\n \n function hasAncestorData (node: VNode) {\n   const parentNode = node.parent\n-  return parentNode && (parentNode.data || hasAncestorData(parentNode))\n+  return isDef(parentNode) && (isDef(parentNode.data) || hasAncestorData(parentNode))\n }\n \n function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {"
            },
            {
                "commitId": "4e40666d53b13c292472dfd0c678c707ad39afd9",
                "additions": 25,
                "deletions": 8,
                "patch": "@@ -37,15 +37,20 @@ const normalizeRender = vm => {\n }\n \n function renderNode (node, isRoot, context) {\n-  const { write, next } = context\n+  const { write, next, userContext } = context\n   if (isDef(node.componentOptions)) {\n     // check cache hit\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+\n     // exposed by vue-loader, need to call this if cache hit because\n     // component lifecycle hooks will not be called.\n-    const injectStyles = Ctor.options._injectStyles\n+    const registerComponent = Ctor.options._ssrRegister\n+    if (write.caching && isDef(registerComponent)) {\n+      write.componentBuffer[write.componentBuffer.length - 1].add(registerComponent)\n+    }\n+\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n@@ -54,8 +59,9 @@ function renderNode (node, isRoot, context) {\n         (has: any)(key, hit => {\n           if (hit === true && isDef(get)) {\n             (get: any)(key, res => {\n-              injectStyles && injectStyles.call({})\n-              write(res, next)\n+              registerComponent && registerComponent(userContext)\n+              res.components.forEach(register => register(userContext))\n+              write(res.html, next)\n             })\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n@@ -64,8 +70,9 @@ function renderNode (node, isRoot, context) {\n       } else if (isDef(get)) {\n         (get: any)(key, res => {\n           if (isDef(res)) {\n-            injectStyles && injectStyles.call({})\n-            write(res, next)\n+            registerComponent && registerComponent(userContext)\n+            res.components.forEach(register => register(userContext))\n+            write(res.html, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n@@ -101,7 +108,10 @@ function renderNode (node, isRoot, context) {\n \n function renderComponent (node, isRoot, context) {\n   const prevActive = context.activeInstance\n-  const child = context.activeInstance = createComponentInstanceForVnode(node, context.activeInstance)\n+  const child = context.activeInstance = createComponentInstanceForVnode(\n+    node,\n+    context.activeInstance\n+  )\n   normalizeRender(child)\n   const childNode = child._render()\n   childNode.parent = node\n@@ -117,9 +127,14 @@ function renderComponentWithCache (node, isRoot, key, context) {\n   write.caching = true\n   const buffer = write.cacheBuffer\n   const bufferIndex = buffer.push('') - 1\n+  const componentBuffer = write.componentBuffer\n+  componentBuffer.push(new Set())\n   context.renderStates.push({\n     type: 'ComponentWithCache',\n-    buffer, bufferIndex, key\n+    key,\n+    buffer,\n+    bufferIndex,\n+    componentBuffer\n   })\n   renderComponent(node, isRoot, context)\n }\n@@ -234,11 +249,13 @@ export function createRenderFunction (\n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n+    userContext: ?Object,\n     done: Function\n   ) {\n     warned = Object.create(null)\n     const context = new RenderContext({\n       activeInstance: component,\n+      userContext,\n       write, done, renderNode,\n       isUnaryTag, modules, directives,\n       cache"
            },
            {
                "commitId": "37fb98827141d95dc1f60c9ea0519d6c49e61fbc",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -43,6 +43,8 @@ function renderNode (node, isRoot, context) {\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+    // exposed by vue-loader, need to call this if cache hit because\n+    // component lifecycle hooks will not be called.\n     const injectStyles = Ctor.options._injectStyles\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {"
            },
            {
                "commitId": "5ec2a7b82cf1819b5e465c4c91f303ca75561e71",
                "additions": 6,
                "deletions": 1,
                "patch": "@@ -43,21 +43,26 @@ function renderNode (node, isRoot, context) {\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n+    const injectStyles = Ctor.options._injectStyles\n     const cache = context.cache\n     if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n       const { has, get } = context\n       if (isDef(has)) {\n         (has: any)(key, hit => {\n           if (hit === true && isDef(get)) {\n-            (get: any)(key, res => write(res, next))\n+            (get: any)(key, res => {\n+              injectStyles && injectStyles.call({})\n+              write(res, next)\n+            })\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n       } else if (isDef(get)) {\n         (get: any)(key, res => {\n           if (isDef(res)) {\n+            injectStyles && injectStyles.call({})\n             write(res, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)"
            },
            {
                "commitId": "5213ec7bbf13928a389e566e99222fa1e77d2161",
                "additions": 26,
                "deletions": 24,
                "patch": "@@ -6,6 +6,8 @@ import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+import { isDef, isUndef, isTrue } from 'shared/util'\n+\n let warned = Object.create(null)\n const warnOnce = msg => {\n   if (!warned[msg]) {\n@@ -17,7 +19,7 @@ const warnOnce = msg => {\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n-  if (!render) {\n+  if (isUndef(render)) {\n     if (template) {\n       const renderFns = (\n         compilationCache[template] ||\n@@ -36,42 +38,42 @@ const normalizeRender = vm => {\n \n function renderNode (node, isRoot, context) {\n   const { write, next } = context\n-  if (node.componentOptions) {\n+  if (isDef(node.componentOptions)) {\n     // check cache hit\n     const Ctor = node.componentOptions.Ctor\n     const getKey = Ctor.options.serverCacheKey\n     const name = Ctor.options.name\n     const cache = context.cache\n-    if (getKey && cache && name) {\n+    if (isDef(getKey) && isDef(cache) && isDef(name)) {\n       const key = name + '::' + getKey(node.componentOptions.propsData)\n       const { has, get } = context\n-      if (has) {\n-        has(key, hit => {\n-          if (hit && get) {\n-            get(key, res => write(res, next))\n+      if (isDef(has)) {\n+        (has: any)(key, hit => {\n+          if (hit === true && isDef(get)) {\n+            (get: any)(key, res => write(res, next))\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n-      } else if (get) {\n-        get(key, res => {\n-          if (res) {\n+      } else if (isDef(get)) {\n+        (get: any)(key, res => {\n+          if (isDef(res)) {\n             write(res, next)\n           } else {\n             renderComponentWithCache(node, isRoot, key, context)\n           }\n         })\n       }\n     } else {\n-      if (getKey && !cache) {\n+      if (isDef(getKey) && isUndef(cache)) {\n         warnOnce(\n           `[vue-server-renderer] Component ${\n             Ctor.options.name || '(anonymous)'\n           } implemented serverCacheKey, ` +\n           'but no cache was provided to the renderer.'\n         )\n       }\n-      if (getKey && !name) {\n+      if (isDef(getKey) && isUndef(name)) {\n         warnOnce(\n           `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n           `must also define a unique \"name\" option.`\n@@ -80,9 +82,9 @@ function renderNode (node, isRoot, context) {\n       renderComponent(node, isRoot, context)\n     }\n   } else {\n-    if (node.tag) {\n+    if (isDef(node.tag)) {\n       renderElement(node, isRoot, context)\n-    } else if (node.isComment) {\n+    } else if (isTrue(node.isComment)) {\n       write(`<!--${node.text}-->`, next)\n     } else {\n       write(node.raw ? node.text : escape(String(node.text)), next)\n@@ -116,7 +118,7 @@ function renderComponentWithCache (node, isRoot, key, context) {\n }\n \n function renderElement (el, isRoot, context) {\n-  if (isRoot) {\n+  if (isTrue(isRoot)) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n     el.data.attrs[SSR_ATTR] = 'true'\n@@ -126,7 +128,7 @@ function renderElement (el, isRoot, context) {\n   const { write, next } = context\n   if (context.isUnaryTag(el.tag)) {\n     write(startTag, next)\n-  } else if (!el.children || !el.children.length) {\n+  } else if (isUndef(el.children) || el.children.length === 0) {\n     write(startTag + endTag, next)\n   } else {\n     const children: Array<VNode> = el.children\n@@ -149,7 +151,7 @@ function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {\n   let dir: VNodeDirective\n   let tmp\n \n-  while (node) {\n+  while (isDef(node)) {\n     if (node.data && node.data.directives) {\n       tmp = node.data.directives.find(dir => dir.name === 'show')\n       if (tmp) {\n@@ -167,10 +169,10 @@ function renderStartingTag (node: VNode, context) {\n \n   // construct synthetic data for module processing\n   // because modules like style also produce code by parent VNode data\n-  if (!node.data && hasAncestorData(node)) {\n+  if (isUndef(node.data) && hasAncestorData(node)) {\n     node.data = {}\n   }\n-  if (node.data) {\n+  if (isDef(node.data)) {\n     // check directives\n     const dirs = node.data.directives\n     if (dirs) {\n@@ -202,13 +204,13 @@ function renderStartingTag (node: VNode, context) {\n   // attach scoped CSS ID\n   let scopeId\n   const activeInstance = context.activeInstance\n-  if (activeInstance &&\n+  if (isDef(activeInstance) &&\n       activeInstance !== node.context &&\n-      (scopeId = activeInstance.$options._scopeId)) {\n-    markup += ` ${scopeId}`\n+      isDef(scopeId = activeInstance.$options._scopeId)) {\n+    markup += ` ${(scopeId: any)}`\n   }\n-  while (node) {\n-    if ((scopeId = node.context.$options._scopeId)) {\n+  while (isDef(node)) {\n+    if (isDef(scopeId = node.context.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n     node = node.parent"
            },
            {
                "commitId": "69e62f0a74b6a6baab1d66dd0433cdfb410bdae7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import { escape } from 'he'\n-import { SSR_ATTR } from 'shared/util'\n+import { SSR_ATTR } from 'shared/constants'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'"
            },
            {
                "commitId": "e0a7c1ac68fbfa5b0d7714db549569d5cefa2bd9",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n import { escape } from 'he'\n+import { SSR_ATTR } from 'shared/util'\n import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n@@ -118,7 +119,7 @@ function renderElement (el, isRoot, context) {\n   if (isRoot) {\n     if (!el.data) el.data = {}\n     if (!el.data.attrs) el.data.attrs = {}\n-    el.data.attrs['server-rendered'] = 'true'\n+    el.data.attrs[SSR_ATTR] = 'true'\n   }\n   const startTag = renderStartingTag(el, context)\n   const endTag = `</${el.tag}>`"
            },
            {
                "commitId": "e733e5cee8585fdf4a0c0e5e77e7816befa24ad4",
                "additions": 26,
                "deletions": 2,
                "patch": "@@ -144,6 +144,22 @@ function hasAncestorData (node: VNode) {\n   return parentNode && (parentNode.data || hasAncestorData(parentNode))\n }\n \n+function getVShowDirectiveInfo (node: VNode): ?VNodeDirective {\n+  let dir: VNodeDirective\n+  let tmp\n+\n+  while (node) {\n+    if (node.data && node.data.directives) {\n+      tmp = node.data.directives.find(dir => dir.name === 'show')\n+      if (tmp) {\n+        dir = tmp\n+      }\n+    }\n+    node = node.parent\n+  }\n+  return dir\n+}\n+\n function renderStartingTag (node: VNode, context) {\n   let markup = `<${node.tag}`\n   const { directives, modules } = context\n@@ -158,14 +174,22 @@ function renderStartingTag (node: VNode, context) {\n     const dirs = node.data.directives\n     if (dirs) {\n       for (let i = 0; i < dirs.length; i++) {\n-        const dirRenderer = directives[dirs[i].name]\n-        if (dirRenderer) {\n+        const name = dirs[i].name\n+        const dirRenderer = directives[name]\n+        if (dirRenderer && name !== 'show') {\n           // directives mutate the node's data\n           // which then gets rendered by modules\n           dirRenderer(node, dirs[i])\n         }\n       }\n     }\n+\n+    // v-show directive needs to be merged from parent to child\n+    const vshowDirectiveInfo = getVShowDirectiveInfo(node)\n+    if (vshowDirectiveInfo) {\n+      directives.show(node, vshowDirectiveInfo)\n+    }\n+\n     // apply other modules\n     for (let i = 0; i < modules.length; i++) {\n       const res = modules[i](node)"
            },
            {
                "commitId": "29f6902d1959c35eb38ef110bee6c13124903442",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -80,6 +80,7 @@ export function renderMixin (Vue: Class<Component>) {\n       handleError(e, vm, `render function`)\n       // return error render result,\n       // or previous vnode to prevent render error causing blank component\n+      /* istanbul ignore else */\n       if (process.env.NODE_ENV !== 'production') {\n         vnode = vm.$options.renderError\n           ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)"
            },
            {
                "commitId": "1861ee9570730149e01f225323c3a52392e5900f",
                "additions": 9,
                "deletions": 2,
                "patch": "@@ -78,8 +78,15 @@ export function renderMixin (Vue: Class<Component>) {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n       handleError(e, vm, `render function`)\n-      // return previous vnode to prevent render error causing blank component\n-      vnode = vm._vnode\n+      // return error render result,\n+      // or previous vnode to prevent render error causing blank component\n+      if (process.env.NODE_ENV !== 'production') {\n+        vnode = vm.$options.renderError\n+          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n+          : vm._vnode\n+      } else {\n+        vnode = vm._vnode\n+      }\n     }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {"
            },
            {
                "commitId": "3c0cdb553590db84a3bdb2a299947e7424e23464",
                "additions": 3,
                "deletions": 13,
                "patch": "@@ -1,16 +1,14 @@\n /* @flow */\n \n-import config from '../config'\n-\n import {\n   warn,\n   nextTick,\n   toNumber,\n   _toString,\n   looseEqual,\n   emptyObject,\n-  looseIndexOf,\n-  formatComponentName\n+  handleError,\n+  looseIndexOf\n } from '../util/index'\n \n import VNode, {\n@@ -79,15 +77,7 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      /* istanbul ignore else */\n-      if (config.errorHandler) {\n-        config.errorHandler.call(null, e, vm)\n-      } else {\n-        if (process.env.NODE_ENV !== 'production') {\n-          warn(`Error when rendering ${formatComponentName(vm)}:`)\n-        }\n-        throw e\n-      }\n+      handleError(e, vm, `render function`)\n       // return previous vnode to prevent render error causing blank component\n       vnode = vm._vnode\n     }"
            },
            {
                "commitId": "e7083d09f1eec1d8853b65720f1a8c6e0f22836e",
                "additions": 5,
                "deletions": 5,
                "patch": "@@ -8,6 +8,7 @@ import {\n   toNumber,\n   _toString,\n   looseEqual,\n+  emptyObject,\n   looseIndexOf,\n   formatComponentName\n } from '../util/index'\n@@ -21,11 +22,11 @@ import VNode, {\n import { createElement } from '../vdom/create-element'\n import { renderList } from './render-helpers/render-list'\n import { renderSlot } from './render-helpers/render-slot'\n-import { resolveSlots } from './render-helpers/resolve-slots'\n import { resolveFilter } from './render-helpers/resolve-filter'\n import { checkKeyCodes } from './render-helpers/check-keycodes'\n import { bindObjectProps } from './render-helpers/bind-object-props'\n import { renderStatic, markOnce } from './render-helpers/render-static'\n+import { resolveSlots, resolveScopedSlots } from './render-helpers/resolve-slots'\n \n export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n@@ -34,7 +35,7 @@ export function initRender (vm: Component) {\n   const parentVnode = vm.$options._parentVnode\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n-  vm.$scopedSlots = {}\n+  vm.$scopedSlots = emptyObject\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n   // args order: tag, data, children, normalizationType, alwaysNormalize\n@@ -65,9 +66,7 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n-    if (_parentVnode && _parentVnode.data.scopedSlots) {\n-      vm.$scopedSlots = _parentVnode.data.scopedSlots\n-    }\n+    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject\n \n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n@@ -124,4 +123,5 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._b = bindObjectProps\n   Vue.prototype._v = createTextVNode\n   Vue.prototype._e = createEmptyVNode\n+  Vue.prototype._u = resolveScopedSlots\n }"
            },
            {
                "commitId": "b1e66b489144ec31ad3d4f3298e3809f00d6c4e6",
                "additions": 27,
                "deletions": 211,
                "patch": "@@ -1,28 +1,31 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, {\n-  cloneVNode,\n-  cloneVNodes,\n-  createTextVNode,\n-  createEmptyVNode\n-} from '../vdom/vnode'\n+\n import {\n   warn,\n-  extend,\n-  identity,\n-  isObject,\n-  toObject,\n   nextTick,\n   toNumber,\n   _toString,\n   looseEqual,\n   looseIndexOf,\n-  resolveAsset,\n   formatComponentName\n } from '../util/index'\n \n+import VNode, {\n+  cloneVNodes,\n+  createTextVNode,\n+  createEmptyVNode\n+} from '../vdom/vnode'\n+\n import { createElement } from '../vdom/create-element'\n+import { renderList } from './render-helpers/render-list'\n+import { renderSlot } from './render-helpers/render-slot'\n+import { resolveSlots } from './render-helpers/resolve-slots'\n+import { resolveFilter } from './render-helpers/resolve-filter'\n+import { checkKeyCodes } from './render-helpers/check-keycodes'\n+import { bindObjectProps } from './render-helpers/bind-object-props'\n+import { renderStatic, markOnce } from './render-helpers/render-static'\n \n export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n@@ -105,207 +108,20 @@ export function renderMixin (Vue: Class<Component>) {\n     return vnode\n   }\n \n-  // toString for mustaches\n-  Vue.prototype._s = _toString\n-  // convert text to vnode\n-  Vue.prototype._v = createTextVNode\n-  // number conversion\n+  // internal render helpers.\n+  // these are exposed on the instance prototype to reduce generated render\n+  // code size.\n+  Vue.prototype._o = markOnce\n   Vue.prototype._n = toNumber\n-  // empty vnode\n-  Vue.prototype._e = createEmptyVNode\n-  // loose equal\n+  Vue.prototype._s = _toString\n+  Vue.prototype._l = renderList\n+  Vue.prototype._t = renderSlot\n   Vue.prototype._q = looseEqual\n-  // loose indexOf\n   Vue.prototype._i = looseIndexOf\n-\n-  // render static tree by index\n-  Vue.prototype._m = function renderStatic (\n-    index: number,\n-    isInFor?: boolean\n-  ): VNode | Array<VNode> {\n-    let tree = this._staticTrees[index]\n-    // if has already-rendered static tree and not inside v-for,\n-    // we can reuse the same tree by doing a shallow clone.\n-    if (tree && !isInFor) {\n-      return Array.isArray(tree)\n-        ? cloneVNodes(tree)\n-        : cloneVNode(tree)\n-    }\n-    // otherwise, render a fresh tree.\n-    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n-    markStatic(tree, `__static__${index}`, false)\n-    return tree\n-  }\n-\n-  // mark node as static (v-once)\n-  Vue.prototype._o = function markOnce (\n-    tree: VNode | Array<VNode>,\n-    index: number,\n-    key: string\n-  ) {\n-    markStatic(tree, `__once__${index}${key ? `_${key}` : ``}`, true)\n-    return tree\n-  }\n-\n-  function markStatic (tree, key, isOnce) {\n-    if (Array.isArray(tree)) {\n-      for (let i = 0; i < tree.length; i++) {\n-        if (tree[i] && typeof tree[i] !== 'string') {\n-          markStaticNode(tree[i], `${key}_${i}`, isOnce)\n-        }\n-      }\n-    } else {\n-      markStaticNode(tree, key, isOnce)\n-    }\n-  }\n-\n-  function markStaticNode (node, key, isOnce) {\n-    node.isStatic = true\n-    node.key = key\n-    node.isOnce = isOnce\n-  }\n-\n-  // filter resolution helper\n-  Vue.prototype._f = function resolveFilter (id) {\n-    return resolveAsset(this.$options, 'filters', id, true) || identity\n-  }\n-\n-  // render v-for\n-  Vue.prototype._l = function renderList (\n-    val: any,\n-    render: () => VNode\n-  ): ?Array<VNode> {\n-    let ret: ?Array<VNode>, i, l, keys, key\n-    if (Array.isArray(val) || typeof val === 'string') {\n-      ret = new Array(val.length)\n-      for (i = 0, l = val.length; i < l; i++) {\n-        ret[i] = render(val[i], i)\n-      }\n-    } else if (typeof val === 'number') {\n-      ret = new Array(val)\n-      for (i = 0; i < val; i++) {\n-        ret[i] = render(i + 1, i)\n-      }\n-    } else if (isObject(val)) {\n-      keys = Object.keys(val)\n-      ret = new Array(keys.length)\n-      for (i = 0, l = keys.length; i < l; i++) {\n-        key = keys[i]\n-        ret[i] = render(val[key], key, i)\n-      }\n-    }\n-    return ret\n-  }\n-\n-  // renderSlot\n-  Vue.prototype._t = function (\n-    name: string,\n-    fallback: ?Array<VNode>,\n-    props: ?Object,\n-    bindObject: ?Object\n-  ): ?Array<VNode> {\n-    const scopedSlotFn = this.$scopedSlots[name]\n-    if (scopedSlotFn) { // scoped slot\n-      props = props || {}\n-      if (bindObject) {\n-        extend(props, bindObject)\n-      }\n-      return scopedSlotFn(props) || fallback\n-    } else {\n-      const slotNodes = this.$slots[name]\n-      // warn duplicate slot usage\n-      if (slotNodes && process.env.NODE_ENV !== 'production') {\n-        slotNodes._rendered && warn(\n-          `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n-          `- this will likely cause render errors.`,\n-          this\n-        )\n-        slotNodes._rendered = true\n-      }\n-      return slotNodes || fallback\n-    }\n-  }\n-\n-  // apply v-bind object\n-  Vue.prototype._b = function bindProps (\n-    data: any,\n-    tag: string,\n-    value: any,\n-    asProp?: boolean\n-  ): VNodeData {\n-    if (value) {\n-      if (!isObject(value)) {\n-        process.env.NODE_ENV !== 'production' && warn(\n-          'v-bind without argument expects an Object or Array value',\n-          this\n-        )\n-      } else {\n-        if (Array.isArray(value)) {\n-          value = toObject(value)\n-        }\n-        for (const key in value) {\n-          if (key === 'class' || key === 'style') {\n-            data[key] = value[key]\n-          } else {\n-            const type = data.attrs && data.attrs.type\n-            const hash = asProp || config.mustUseProp(tag, type, key)\n-              ? data.domProps || (data.domProps = {})\n-              : data.attrs || (data.attrs = {})\n-            hash[key] = value[key]\n-          }\n-        }\n-      }\n-    }\n-    return data\n-  }\n-\n-  // check v-on keyCodes\n-  Vue.prototype._k = function checkKeyCodes (\n-    eventKeyCode: number,\n-    key: string,\n-    builtInAlias: number | Array<number> | void\n-  ): boolean {\n-    const keyCodes = config.keyCodes[key] || builtInAlias\n-    if (Array.isArray(keyCodes)) {\n-      return keyCodes.indexOf(eventKeyCode) === -1\n-    } else {\n-      return keyCodes !== eventKeyCode\n-    }\n-  }\n-}\n-\n-export function resolveSlots (\n-  children: ?Array<VNode>,\n-  context: ?Component\n-): { [key: string]: Array<VNode> } {\n-  const slots = {}\n-  if (!children) {\n-    return slots\n-  }\n-  const defaultSlot = []\n-  let name, child\n-  for (let i = 0, l = children.length; i < l; i++) {\n-    child = children[i]\n-    // named slots should only be respected if the vnode was rendered in the\n-    // same context.\n-    if ((child.context === context || child.functionalContext === context) &&\n-        child.data && (name = child.data.slot)) {\n-      const slot = (slots[name] || (slots[name] = []))\n-      if (child.tag === 'template') {\n-        slot.push.apply(slot, child.children)\n-      } else {\n-        slot.push(child)\n-      }\n-    } else {\n-      defaultSlot.push(child)\n-    }\n-  }\n-  // ignore single whitespace\n-  if (defaultSlot.length && !(\n-    defaultSlot.length === 1 &&\n-    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n-  )) {\n-    slots.default = defaultSlot\n-  }\n-  return slots\n+  Vue.prototype._m = renderStatic\n+  Vue.prototype._f = resolveFilter\n+  Vue.prototype._k = checkKeyCodes\n+  Vue.prototype._b = bindObjectProps\n+  Vue.prototype._v = createTextVNode\n+  Vue.prototype._e = createEmptyVNode\n }"
            },
            {
                "commitId": "05b070fd41b61a953388a34ff3374f301a9f7540",
                "additions": 5,
                "deletions": 68,
                "patch": "@@ -1,9 +1,9 @@\n /* @flow */\n \n import { escape } from 'he'\n+import { RenderContext } from './render-context'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n-import { noop } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -13,17 +13,6 @@ const warnOnce = msg => {\n   }\n }\n \n-const normalizeAsync = (cache, method) => {\n-  const fn = cache[method]\n-  if (!fn) {\n-    return\n-  } else if (fn.length > 1) {\n-    return (key, cb) => fn.call(cache, key, cb)\n-  } else {\n-    return (key, cb) => cb(fn.call(cache, key))\n-  }\n-}\n-\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n@@ -202,76 +191,24 @@ function renderStartingTag (node: VNode, context) {\n   return markup + '>'\n }\n \n-const nextFactory = context => function next () {\n-  const lastState = context.renderStates.pop()\n-  if (!lastState) {\n-    context.done()\n-    // cleanup context, avoid leakage\n-    context = (null: any)\n-    return\n-  }\n-  switch (lastState.type) {\n-    case 'Component':\n-      context.activeInstance = lastState.prevActive\n-      next()\n-      break\n-    case 'Element':\n-      const { children, total } = lastState\n-      const rendered = lastState.rendered++\n-      if (rendered < total) {\n-        context.renderStates.push(lastState)\n-        renderNode(children[rendered], false, context)\n-      } else {\n-        context.write(lastState.endTag, next)\n-      }\n-      break\n-    case 'ComponentWithCache':\n-      const { buffer, bufferIndex, key } = lastState\n-      const result = buffer[bufferIndex]\n-      context.cache.set(key, result)\n-      if (bufferIndex === 0) {\n-        // this is a top-level cached component,\n-        // exit caching mode.\n-        context.write.caching = false\n-      } else {\n-        // parent component is also being cached,\n-        // merge self into parent's result\n-        buffer[bufferIndex - 1] += result\n-      }\n-      buffer.length = bufferIndex\n-      next()\n-      break\n-  }\n-}\n-\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n   isUnaryTag: Function,\n   cache: any\n ) {\n-  if (cache && (!cache.get || !cache.set)) {\n-    throw new Error('renderer cache must implement at least get & set.')\n-  }\n-\n-  const get = cache && normalizeAsync(cache, 'get')\n-  const has = cache && normalizeAsync(cache, 'has')\n-\n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n     warned = Object.create(null)\n-    const context = {\n+    const context = new RenderContext({\n       activeInstance: component,\n-      renderStates: [],\n-      next: noop, // for flow\n-      write, done,\n+      write, done, renderNode,\n       isUnaryTag, modules, directives,\n-      cache, get, has\n-    }\n-    context.next = nextFactory(context)\n+      cache\n+    })\n     normalizeRender(component)\n     renderNode(component._render(), true, context)\n   }"
            },
            {
                "commitId": "08bd81f8c0bd39816b5b509c5132a12188b412d7",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -247,7 +247,8 @@ export function renderMixin (Vue: Class<Component>) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n           } else {\n-            const hash = asProp || config.mustUseProp(tag, key)\n+            const type = data.attrs && data.attrs.type\n+            const hash = asProp || config.mustUseProp(tag, type, key)\n               ? data.domProps || (data.domProps = {})\n               : data.attrs || (data.attrs = {})\n             hash[key] = value[key]"
            },
            {
                "commitId": "7131bc48155fb5224f4d6f0fb1c4b7eed6a79db4",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -40,9 +40,6 @@ export function initRender (vm: Component) {\n   // normalization is always applied for the public version, used in\n   // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n-  if (vm.$options.el) {\n-    vm.$mount(vm.$options.el)\n-  }\n }\n \n export function renderMixin (Vue: Class<Component>) {"
            },
            {
                "commitId": "b60182d996ed1e976ce1697a3017cb702ddc0920",
                "additions": 0,
                "deletions": 21,
                "patch": "@@ -262,7 +262,6 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n-    checkBuild(component)\n     warned = Object.create(null)\n     const context = {\n       activeInstance: component,\n@@ -277,23 +276,3 @@ export function createRenderFunction (\n     renderNode(component._render(), true, context)\n   }\n }\n-\n-function checkBuild (component) {\n-  let Vue: any = component.constructor\n-  while (Vue.super) {\n-    Vue = Vue.super\n-  }\n-  if (Vue.compile && Vue.config.devtools !== false) {\n-    console.error(\n-      red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n-      `server-side rendering. It is recommended to use the CommonJS build ` +\n-      `(vue/dist/vue.common.js) instead so that the code can run in ` +\n-      `production mode by setting NODE_ENV=production. The server renderer ` +\n-      `supports the template option regardless of what build you are using.\\n`)\n-    )\n-  }\n-}\n-\n-function red (str) {\n-  return '\\u001B[1m\\u001B[31m' + str + '\\u001B[39m\\u001B[22m'\n-}"
            },
            {
                "commitId": "0eb8cdc7f7cff484ebe0b12a781a4ab020f82b4a",
                "additions": 8,
                "deletions": 2,
                "patch": "@@ -9,6 +9,7 @@ import VNode, {\n } from '../vdom/vnode'\n import {\n   warn,\n+  extend,\n   identity,\n   isObject,\n   toObject,\n@@ -203,11 +204,16 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._t = function (\n     name: string,\n     fallback: ?Array<VNode>,\n-    props: ?Object\n+    props: ?Object,\n+    bindObject: ?Object\n   ): ?Array<VNode> {\n     const scopedSlotFn = this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n-      return scopedSlotFn(props || {}) || fallback\n+      props = props || {}\n+      if (bindObject) {\n+        extend(props, bindObject)\n+      }\n+      return scopedSlotFn(props) || fallback\n     } else {\n       const slotNodes = this.$slots[name]\n       // warn duplicate slot usage"
            },
            {
                "commitId": "974247fd8e6b57840c9b7686964ddb38bc6affc8",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -178,7 +178,7 @@ export function renderMixin (Vue: Class<Component>) {\n     render: () => VNode\n   ): ?Array<VNode> {\n     let ret: ?Array<VNode>, i, l, keys, key\n-    if (Array.isArray(val)) {\n+    if (Array.isArray(val) || typeof val === 'string') {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n         ret[i] = render(val[i], i)"
            },
            {
                "commitId": "f1c38674f28116e1e335873ecbc6716fb70448a3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -33,7 +33,7 @@ export function initRender (vm: Component) {\n   vm.$scopedSlots = {}\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  // args order: tag, data, children, needNormalization, alwaysNormalize\n+  // args order: tag, data, children, normalizationType, alwaysNormalize\n   // internal version is used by render functions compiled from templates\n   vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n   // normalization is always applied for the public version, used in"
            },
            {
                "commitId": "5fa45c3bf80100469039d3b9c160ddfdaf90f8ec",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -279,11 +279,11 @@ export function createRenderFunction (\n }\n \n function checkBuild (component) {\n-  let Vue = component.constructor\n+  let Vue: any = component.constructor\n   while (Vue.super) {\n     Vue = Vue.super\n   }\n-  if (Vue.compile) {\n+  if (Vue.compile && Vue.config.devtools !== false) {\n     console.error(\n       red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n       `server-side rendering. It is recommended to use the CommonJS build ` +"
            },
            {
                "commitId": "8567e7dcedfdf0d8fb21e2c2f7ee935229b6a9e9",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -9,6 +9,7 @@ import VNode, {\n } from '../vdom/vnode'\n import {\n   warn,\n+  identity,\n   isObject,\n   toObject,\n   nextTick,\n@@ -167,7 +168,6 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // filter resolution helper\n-  const identity = _ => _\n   Vue.prototype._f = function resolveFilter (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }"
            },
            {
                "commitId": "4b51ad048306367a6fb6fbee7445e086d855f31e",
                "additions": 5,
                "deletions": 3,
                "patch": "@@ -32,9 +32,11 @@ export function initRender (vm: Component) {\n   vm.$scopedSlots = {}\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  // args order: tag, data, children, needNormalization\n-  // the needNormalization flag is disabled for the public version.\n-  vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  // args order: tag, data, children, needNormalization, alwaysNormalize\n+  // internal version is used by render functions compiled from templates\n+  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  // normalization is always applied for the public version, used in\n+  // user-written render functions.\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)"
            },
            {
                "commitId": "207c18c47f8c94f6d92675b28bc67511b7897246",
                "additions": 3,
                "deletions": 5,
                "patch": "@@ -1,7 +1,6 @@\n /* @flow */\n \n import config from '../config'\n-import { normalizeChildren } from '../vdom/helpers/index'\n import VNode, {\n   cloneVNode,\n   cloneVNodes,\n@@ -34,7 +33,7 @@ export function initRender (vm: Component) {\n   // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n   // args order: tag, data, children, needNormalization\n-  // the needNormalization flag is flipped and defaults to true for the public version.\n+  // the needNormalization flag is disabled for the public version.\n   vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n   vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n@@ -270,14 +269,13 @@ export function renderMixin (Vue: Class<Component>) {\n }\n \n export function resolveSlots (\n-  renderChildren: ?VNodeChildren,\n+  children: ?Array<VNode>,\n   context: ?Component\n ): { [key: string]: Array<VNode> } {\n   const slots = {}\n-  if (!renderChildren) {\n+  if (!children) {\n     return slots\n   }\n-  const children = normalizeChildren(renderChildren) || []\n   const defaultSlot = []\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {"
            },
            {
                "commitId": "79e1058799dcde0b7e341ef44b590ecbf1e3a722",
                "additions": 23,
                "deletions": 7,
                "patch": "@@ -1,11 +1,24 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { createEmptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n+import VNode, {\n+  cloneVNode,\n+  cloneVNodes,\n+  createTextVNode,\n+  createEmptyVNode\n+} from '../vdom/vnode'\n import {\n-  warn, formatComponentName, bind, isObject, toObject,\n-  nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n+  warn,\n+  isObject,\n+  toObject,\n+  nextTick,\n+  toNumber,\n+  _toString,\n+  looseEqual,\n+  looseIndexOf,\n+  resolveAsset,\n+  formatComponentName\n } from '../util/index'\n \n import { createElement } from '../vdom/create-element'\n@@ -18,9 +31,12 @@ export function initRender (vm: Component) {\n   const renderContext = parentVnode && parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n   vm.$scopedSlots = {}\n-  // bind the public createElement fn to this instance\n+  // bind the createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(createElement, vm)\n+  // args order: tag, data, children, needNormalization\n+  // the needNormalization flag is flipped and defaults to true for the public version.\n+  vm._h = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n+  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -89,10 +105,10 @@ export function renderMixin (Vue: Class<Component>) {\n     return vnode\n   }\n \n-  // shorthands used in render functions\n-  Vue.prototype._h = createElement\n   // toString for mustaches\n   Vue.prototype._s = _toString\n+  // convert text to vnode\n+  Vue.prototype._v = createTextVNode\n   // number conversion\n   Vue.prototype._n = toNumber\n   // empty vnode"
            },
            {
                "commitId": "7431e4d16c92862ac74fdb3053de9295c809b586",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n+import VNode, { createEmptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n@@ -82,7 +82,7 @@ export function renderMixin (Vue: Class<Component>) {\n           vm\n         )\n       }\n-      vnode = emptyVNode()\n+      vnode = createEmptyVNode()\n     }\n     // set parent\n     vnode.parent = _parentVnode\n@@ -96,7 +96,7 @@ export function renderMixin (Vue: Class<Component>) {\n   // number conversion\n   Vue.prototype._n = toNumber\n   // empty vnode\n-  Vue.prototype._e = emptyVNode\n+  Vue.prototype._e = createEmptyVNode\n   // loose equal\n   Vue.prototype._q = looseEqual\n   // loose indexOf"
            },
            {
                "commitId": "e8d6bd9dc73cacbc665ce132d81a7b629bef764b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -242,9 +242,9 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._k = function checkKeyCodes (\n     eventKeyCode: number,\n     key: string,\n-    buildinAlias: number | Array<number> | void\n+    builtInAlias: number | Array<number> | void\n   ): boolean {\n-    const keyCodes = config.keyCodes[key] || buildinAlias\n+    const keyCodes = config.keyCodes[key] || builtInAlias\n     if (Array.isArray(keyCodes)) {\n       return keyCodes.indexOf(eventKeyCode) === -1\n     } else {"
            },
            {
                "commitId": "6ea9a4db4221b7264ee8ebad9cef4f076762d697",
                "additions": 12,
                "deletions": 3,
                "patch": "@@ -238,9 +238,18 @@ export function renderMixin (Vue: Class<Component>) {\n     return data\n   }\n \n-  // expose v-on keyCodes\n-  Vue.prototype._k = function getKeyCodes (key: string): any {\n-    return config.keyCodes[key]\n+  // check v-on keyCodes\n+  Vue.prototype._k = function checkKeyCodes (\n+    eventKeyCode: number,\n+    key: string,\n+    buildinAlias: number | Array<number> | void\n+  ): boolean {\n+    const keyCodes = config.keyCodes[key] || buildinAlias\n+    if (Array.isArray(keyCodes)) {\n+      return keyCodes.indexOf(eventKeyCode) === -1\n+    } else {\n+      return keyCodes !== eventKeyCode\n+    }\n   }\n }\n "
            },
            {
                "commitId": "c7147e3b60cb8b4147f0132f63b70a527a47b2b6",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -257,7 +257,6 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    debugger\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n     if ((child.context === context || child.functionalContext === context) &&"
            },
            {
                "commitId": "326aef4a6ab84d044d9ed807c5dc4326249aa856",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -14,8 +14,9 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n-  vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n+  const parentVnode = vm.$options._parentVnode\n+  const renderContext = parentVnode && parentVnode.context\n+  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext)\n   vm.$scopedSlots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -256,6 +257,7 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n+    debugger\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n     if ((child.context === context || child.functionalContext === context) &&"
            },
            {
                "commitId": "16e3dae2455aa0f2955d95698c7dddb5b4c9440d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers/index'\n import {\n-  warn, formatComponentName, bind, isObject, toObject, isServerRendering,\n+  warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n } from '../util/index'\n "
            },
            {
                "commitId": "a52a094befb0b1f660771db04deebaa37555e84e",
                "additions": 3,
                "deletions": 7,
                "patch": "@@ -60,18 +60,14 @@ export function renderMixin (Vue: Class<Component>) {\n     try {\n       vnode = render.call(vm._renderProxy, vm.$createElement)\n     } catch (e) {\n-      if (process.env.NODE_ENV !== 'production') {\n-        warn(`Error when rendering ${formatComponentName(vm)}:`)\n-      }\n       /* istanbul ignore else */\n       if (config.errorHandler) {\n         config.errorHandler.call(null, e, vm)\n       } else {\n-        if (isServerRendering()) {\n-          throw e\n-        } else {\n-          console.error(e)\n+        if (process.env.NODE_ENV !== 'production') {\n+          warn(`Error when rendering ${formatComponentName(vm)}:`)\n         }\n+        throw e\n       }\n       // return previous vnode to prevent render error causing blank component\n       vnode = vm._vnode"
            },
            {
                "commitId": "aa5f5d1198db2c9480a317b1db48c470c850949d",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -16,7 +16,7 @@ export function initRender (vm: Component) {\n   vm._staticTrees = null\n   vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n-  vm.$scopedSlots = null\n+  vm.$scopedSlots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -45,7 +45,7 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n-    if (_parentVnode) {\n+    if (_parentVnode && _parentVnode.data.scopedSlots) {\n       vm.$scopedSlots = _parentVnode.data.scopedSlots\n     }\n \n@@ -191,7 +191,7 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n+    const scopedSlotFn = this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n       return scopedSlotFn(props || {}) || fallback\n     } else {"
            },
            {
                "commitId": "303378f85b26934396e2f6dc0973f6982da2beb1",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -191,9 +191,6 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    if (process.env.NODE_ENV !== 'production' && name === 'default' && props) {\n-      warn(`Scoped slots must be named`, this)\n-    }\n     const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n     if (scopedSlotFn) { // scoped slot\n       return scopedSlotFn(props || {}) || fallback"
            },
            {
                "commitId": "7f36f99f6c9bf6130f298fb79538f09fce7ef2fc",
                "additions": 7,
                "deletions": 6,
                "patch": "@@ -191,12 +191,13 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>,\n     props: ?Object\n   ): ?Array<VNode> {\n-    if (props) { // scoped slot\n-      const scopedSlotFn = this.$scopedSlots[name]\n-      return scopedSlotFn\n-        ? scopedSlotFn(props) || fallback\n-        : fallback\n-    } else { // static slot\n+    if (process.env.NODE_ENV !== 'production' && name === 'default' && props) {\n+      warn(`Scoped slots must be named`, this)\n+    }\n+    const scopedSlotFn = this.$scopedSlots && this.$scopedSlots[name]\n+    if (scopedSlotFn) { // scoped slot\n+      return scopedSlotFn(props || {}) || fallback\n+    } else {\n       const slotNodes = this.$slots[name]\n       // warn duplicate slot usage\n       if (slotNodes && process.env.NODE_ENV !== 'production') {"
            },
            {
                "commitId": "9ddbbcc340aa092699aca349492ffd50e18f1ba4",
                "additions": 24,
                "deletions": 11,
                "patch": "@@ -16,6 +16,7 @@ export function initRender (vm: Component) {\n   vm._staticTrees = null\n   vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n   vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n+  vm.$scopedSlots = null\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -44,6 +45,10 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n \n+    if (_parentVnode) {\n+      vm.$scopedSlots = _parentVnode.data.scopedSlots\n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -183,19 +188,27 @@ export function renderMixin (Vue: Class<Component>) {\n   // renderSlot\n   Vue.prototype._t = function (\n     name: string,\n-    fallback: ?Array<VNode>\n+    fallback: ?Array<VNode>,\n+    props: ?Object\n   ): ?Array<VNode> {\n-    const slotNodes = this.$slots[name]\n-    // warn duplicate slot usage\n-    if (slotNodes && process.env.NODE_ENV !== 'production') {\n-      slotNodes._rendered && warn(\n-        `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n-        `- this will likely cause render errors.`,\n-        this\n-      )\n-      slotNodes._rendered = true\n+    if (props) { // scoped slot\n+      const scopedSlotFn = this.$scopedSlots[name]\n+      return scopedSlotFn\n+        ? scopedSlotFn(props) || fallback\n+        : fallback\n+    } else { // static slot\n+      const slotNodes = this.$slots[name]\n+      // warn duplicate slot usage\n+      if (slotNodes && process.env.NODE_ENV !== 'production') {\n+        slotNodes._rendered && warn(\n+          `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n+          `- this will likely cause render errors.`,\n+          this\n+        )\n+        slotNodes._rendered = true\n+      }\n+      return slotNodes || fallback\n     }\n-    return slotNodes || fallback\n   }\n \n   // apply v-bind object"
            },
            {
                "commitId": "2dc2d062b1af826add087d832a3f68806e2ef2b1",
                "additions": 21,
                "deletions": 0,
                "patch": "@@ -262,6 +262,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    checkBuild(component)\n     warned = Object.create(null)\n     const context = {\n       activeInstance: component,\n@@ -276,3 +277,23 @@ export function createRenderFunction (\n     renderNode(component._render(), true, context)\n   }\n }\n+\n+function checkBuild (component) {\n+  let Vue = component.constructor\n+  while (Vue.super) {\n+    Vue = Vue.super\n+  }\n+  if (Vue.compile) {\n+    console.error(\n+      red(`\\n[vue-server-renderer] You are using the standalone build (vue/dist/vue.js) for ` +\n+      `server-side rendering. It is recommended to use the CommonJS build ` +\n+      `(vue/dist/vue.common.js) instead so that the code can run in ` +\n+      `production mode by setting NODE_ENV=production. The server renderer ` +\n+      `supports the template option regardless of what build you are using.\\n`)\n+    )\n+  }\n+}\n+\n+function red (str) {\n+  return '\\u001B[1m\\u001B[31m' + str + '\\u001B[39m\\u001B[22m'\n+}"
            },
            {
                "commitId": "8bf26536d3b4b5d139070e1730fed7f9df59c9db",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -26,7 +26,7 @@ export function initRender (vm: Component) {\n \n export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype.$nextTick = function (fn: Function) {\n-    nextTick(fn, this)\n+    return nextTick(fn, this)\n   }\n \n   Vue.prototype._render = function (): VNode {"
            },
            {
                "commitId": "9a742cb423690acb29990bd38f5c17f7b21f12f8",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -201,6 +201,7 @@ export function renderMixin (Vue: Class<Component>) {\n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n     data: any,\n+    tag: string,\n     value: any,\n     asProp?: boolean\n   ): VNodeData {\n@@ -218,7 +219,7 @@ export function renderMixin (Vue: Class<Component>) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n           } else {\n-            const hash = asProp || config.mustUseProp(key)\n+            const hash = asProp || config.mustUseProp(tag, key)\n               ? data.domProps || (data.domProps = {})\n               : data.attrs || (data.attrs = {})\n             hash[key] = value[key]"
            },
            {
                "commitId": "6e3e989a90e8685c2cf0c029fa9c657354762b04",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -65,7 +65,7 @@ export function renderMixin (Vue: Class<Component>) {\n         if (config._isServer) {\n           throw e\n         } else {\n-          setTimeout(() => { throw e }, 0)\n+          console.error(e)\n         }\n       }\n       // return previous vnode to prevent render error causing blank component"
            },
            {
                "commitId": "240df147f11824db5811d23c8704225aa586b96b",
                "additions": 11,
                "deletions": 0,
                "patch": "@@ -150,9 +150,20 @@ function renderElement (el, isRoot, context) {\n   }\n }\n \n+function hasAncestorData (node: VNode) {\n+  const parentNode = node.parent\n+  return parentNode && (parentNode.data || hasAncestorData(parentNode))\n+}\n+\n function renderStartingTag (node: VNode, context) {\n   let markup = `<${node.tag}`\n   const { directives, modules } = context\n+\n+  // construct synthetic data for module processing\n+  // because modules like style also produce code by parent VNode data\n+  if (!node.data && hasAncestorData(node)) {\n+    node.data = {}\n+  }\n   if (node.data) {\n     // check directives\n     const dirs = node.data.directives"
            },
            {
                "commitId": "ec824be88e9bc71b31e5c4a43f80d921674dca66",
                "additions": 24,
                "deletions": 6,
                "patch": "@@ -115,18 +115,36 @@ export function renderMixin (Vue: Class<Component>) {\n     }\n     // otherwise, render a fresh tree.\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n+    markStatic(tree, `__static__${index}`, false)\n+    return tree\n+  }\n+\n+  // mark node as static (v-once)\n+  Vue.prototype._o = function markOnce (\n+    tree: VNode | Array<VNode>,\n+    index: number,\n+    key: string\n+  ) {\n+    markStatic(tree, `__once__${index}${key ? `_${key}` : ``}`, true)\n+    return tree\n+  }\n+\n+  function markStatic (tree, key, isOnce) {\n     if (Array.isArray(tree)) {\n       for (let i = 0; i < tree.length; i++) {\n-        if (typeof tree[i] !== 'string') {\n-          tree[i].isStatic = true\n-          tree[i].key = `__static__${index}_${i}`\n+        if (tree[i] && typeof tree[i] !== 'string') {\n+          markStaticNode(tree[i], `${key}_${i}`, isOnce)\n         }\n       }\n     } else {\n-      tree.isStatic = true\n-      tree.key = `__static__${index}`\n+      markStaticNode(tree, key, isOnce)\n     }\n-    return tree\n+  }\n+\n+  function markStaticNode (node, key, isOnce) {\n+    node.isStatic = true\n+    node.key = key\n+    node.isOnce = isOnce\n   }\n \n   // filter resolution helper"
            },
            {
                "commitId": "2ac581bb7f34b1ef0f35c3e6945acd630a92453e",
                "additions": 186,
                "deletions": 155,
                "patch": "@@ -3,6 +3,7 @@\n import { escape } from 'he'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n+import { noop } from 'shared/util'\n \n let warned = Object.create(null)\n const warnOnce = msg => {\n@@ -43,194 +44,224 @@ const normalizeRender = vm => {\n   }\n }\n \n-export function createRenderFunction (\n-  modules: Array<Function>,\n-  directives: Object,\n-  isUnaryTag: Function,\n-  cache: any\n-) {\n-  if (cache && (!cache.get || !cache.set)) {\n-    throw new Error('renderer cache must implement at least get & set.')\n+function renderNode (node, isRoot, context) {\n+  const { write, next } = context\n+  if (node.componentOptions) {\n+    // check cache hit\n+    const Ctor = node.componentOptions.Ctor\n+    const getKey = Ctor.options.serverCacheKey\n+    const name = Ctor.options.name\n+    const cache = context.cache\n+    if (getKey && cache && name) {\n+      const key = name + '::' + getKey(node.componentOptions.propsData)\n+      const { has, get } = context\n+      if (has) {\n+        has(key, hit => {\n+          if (hit && get) {\n+            get(key, res => write(res, next))\n+          } else {\n+            renderComponentWithCache(node, isRoot, key, context)\n+          }\n+        })\n+      } else if (get) {\n+        get(key, res => {\n+          if (res) {\n+            write(res, next)\n+          } else {\n+            renderComponentWithCache(node, isRoot, key, context)\n+          }\n+        })\n+      }\n+    } else {\n+      if (getKey && !cache) {\n+        warnOnce(\n+          `[vue-server-renderer] Component ${\n+            Ctor.options.name || '(anonymous)'\n+          } implemented serverCacheKey, ` +\n+          'but no cache was provided to the renderer.'\n+        )\n+      }\n+      if (getKey && !name) {\n+        warnOnce(\n+          `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+          `must also define a unique \"name\" option.`\n+        )\n+      }\n+      renderComponent(node, isRoot, context)\n+    }\n+  } else {\n+    if (node.tag) {\n+      renderElement(node, isRoot, context)\n+    } else if (node.isComment) {\n+      write(`<!--${node.text}-->`, next)\n+    } else {\n+      write(node.raw ? node.text : escape(String(node.text)), next)\n+    }\n   }\n+}\n \n-  const get = cache && normalizeAsync(cache, 'get')\n-  const has = cache && normalizeAsync(cache, 'has')\n+function renderComponent (node, isRoot, context) {\n+  const prevActive = context.activeInstance\n+  const child = context.activeInstance = createComponentInstanceForVnode(node, context.activeInstance)\n+  normalizeRender(child)\n+  const childNode = child._render()\n+  childNode.parent = node\n+  context.renderStates.push({\n+    type: 'Component',\n+    prevActive\n+  })\n+  renderNode(childNode, isRoot, context)\n+}\n \n-  // used to track and apply scope ids\n-  let activeInstance: any\n+function renderComponentWithCache (node, isRoot, key, context) {\n+  const write = context.write\n+  write.caching = true\n+  const buffer = write.cacheBuffer\n+  const bufferIndex = buffer.push('') - 1\n+  context.renderStates.push({\n+    type: 'ComponentWithCache',\n+    buffer, bufferIndex, key\n+  })\n+  renderComponent(node, isRoot, context)\n+}\n \n-  function renderNode (\n-    node: VNode,\n-    write: Function,\n-    next: Function,\n-    isRoot: boolean\n-  ) {\n-    if (node.componentOptions) {\n-      // check cache hit\n-      const Ctor = node.componentOptions.Ctor\n-      const getKey = Ctor.options.serverCacheKey\n-      const name = Ctor.options.name\n-      if (getKey && cache && name) {\n-        const key = name + '::' + getKey(node.componentOptions.propsData)\n-        if (has) {\n-          has(key, hit => {\n-            if (hit && get) {\n-              get(key, res => write(res, next))\n-            } else {\n-              renderComponentWithCache(node, write, next, isRoot, cache, key)\n-            }\n-          })\n-        } else if (get) {\n-          get(key, res => {\n-            if (res) {\n-              write(res, next)\n-            } else {\n-              renderComponentWithCache(node, write, next, isRoot, cache, key)\n-            }\n-          })\n-        }\n-      } else {\n-        if (getKey && !cache) {\n-          warnOnce(\n-            `[vue-server-renderer] Component ${\n-              Ctor.options.name || '(anonymous)'\n-            } implemented serverCacheKey, ` +\n-            'but no cache was provided to the renderer.'\n-          )\n-        }\n-        if (getKey && !name) {\n-          warnOnce(\n-            `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n-            `must also define a unique \"name\" option.`\n-          )\n+function renderElement (el, isRoot, context) {\n+  if (isRoot) {\n+    if (!el.data) el.data = {}\n+    if (!el.data.attrs) el.data.attrs = {}\n+    el.data.attrs['server-rendered'] = 'true'\n+  }\n+  const startTag = renderStartingTag(el, context)\n+  const endTag = `</${el.tag}>`\n+  const { write, next } = context\n+  if (context.isUnaryTag(el.tag)) {\n+    write(startTag, next)\n+  } else if (!el.children || !el.children.length) {\n+    write(startTag + endTag, next)\n+  } else {\n+    const children: Array<VNode> = el.children\n+    context.renderStates.push({\n+      type: 'Element',\n+      rendered: 0,\n+      total: children.length,\n+      endTag, children\n+    })\n+    write(startTag, next)\n+  }\n+}\n+\n+function renderStartingTag (node: VNode, context) {\n+  let markup = `<${node.tag}`\n+  const { directives, modules } = context\n+  if (node.data) {\n+    // check directives\n+    const dirs = node.data.directives\n+    if (dirs) {\n+      for (let i = 0; i < dirs.length; i++) {\n+        const dirRenderer = directives[dirs[i].name]\n+        if (dirRenderer) {\n+          // directives mutate the node's data\n+          // which then gets rendered by modules\n+          dirRenderer(node, dirs[i])\n         }\n-        renderComponent(node, write, next, isRoot)\n       }\n-    } else {\n-      if (node.tag) {\n-        renderElement(node, write, next, isRoot)\n-      } else if (node.isComment) {\n-        write(`<!--${node.text}-->`, next)\n-      } else {\n-        write(node.raw ? node.text : escape(String(node.text)), next)\n+    }\n+    // apply other modules\n+    for (let i = 0; i < modules.length; i++) {\n+      const res = modules[i](node)\n+      if (res) {\n+        markup += res\n       }\n     }\n   }\n-\n-  function renderComponent (node, write, next, isRoot) {\n-    const prevActive = activeInstance\n-    const child = activeInstance = createComponentInstanceForVnode(node, activeInstance)\n-    normalizeRender(child)\n-    const childNode = child._render()\n-    childNode.parent = node\n-    renderNode(childNode, write, () => {\n-      activeInstance = prevActive\n-      next()\n-    }, isRoot)\n+  // attach scoped CSS ID\n+  let scopeId\n+  const activeInstance = context.activeInstance\n+  if (activeInstance &&\n+      activeInstance !== node.context &&\n+      (scopeId = activeInstance.$options._scopeId)) {\n+    markup += ` ${scopeId}`\n   }\n+  while (node) {\n+    if ((scopeId = node.context.$options._scopeId)) {\n+      markup += ` ${scopeId}`\n+    }\n+    node = node.parent\n+  }\n+  return markup + '>'\n+}\n \n-  function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n-    write.caching = true\n-    const buffer = write.cacheBuffer\n-    const bufferIndex = buffer.push('') - 1\n-    renderComponent(node, write, () => {\n+const nextFactory = context => function next () {\n+  const lastState = context.renderStates.pop()\n+  if (!lastState) {\n+    context.done()\n+    // cleanup context, avoid leakage\n+    context = (null: any)\n+    return\n+  }\n+  switch (lastState.type) {\n+    case 'Component':\n+      context.activeInstance = lastState.prevActive\n+      next()\n+      break\n+    case 'Element':\n+      const { children, total } = lastState\n+      const rendered = lastState.rendered++\n+      if (rendered < total) {\n+        context.renderStates.push(lastState)\n+        renderNode(children[rendered], false, context)\n+      } else {\n+        context.write(lastState.endTag, next)\n+      }\n+      break\n+    case 'ComponentWithCache':\n+      const { buffer, bufferIndex, key } = lastState\n       const result = buffer[bufferIndex]\n-      cache.set(key, result)\n+      context.cache.set(key, result)\n       if (bufferIndex === 0) {\n         // this is a top-level cached component,\n         // exit caching mode.\n-        write.caching = false\n+        context.write.caching = false\n       } else {\n         // parent component is also being cached,\n         // merge self into parent's result\n         buffer[bufferIndex - 1] += result\n       }\n       buffer.length = bufferIndex\n       next()\n-    }, isRoot)\n+      break\n   }\n+}\n \n-  function renderElement (el, write, next, isRoot) {\n-    if (isRoot) {\n-      if (!el.data) el.data = {}\n-      if (!el.data.attrs) el.data.attrs = {}\n-      el.data.attrs['server-rendered'] = 'true'\n-    }\n-    const startTag = renderStartingTag(el)\n-    const endTag = `</${el.tag}>`\n-    if (isUnaryTag(el.tag)) {\n-      write(startTag, next)\n-    } else if (!el.children || !el.children.length) {\n-      write(startTag + endTag, next)\n-    } else {\n-      const children: Array<VNode> = el.children || []\n-      write(startTag, () => {\n-        const total = children.length\n-        let rendered = 0\n-\n-        function renderChild (child: VNode) {\n-          renderNode(child, write, () => {\n-            rendered++\n-            if (rendered < total) {\n-              renderChild(children[rendered])\n-            } else {\n-              write(endTag, next)\n-            }\n-          }, false)\n-        }\n-\n-        renderChild(children[0])\n-      })\n-    }\n+export function createRenderFunction (\n+  modules: Array<Function>,\n+  directives: Object,\n+  isUnaryTag: Function,\n+  cache: any\n+) {\n+  if (cache && (!cache.get || !cache.set)) {\n+    throw new Error('renderer cache must implement at least get & set.')\n   }\n \n-  function renderStartingTag (node: VNode) {\n-    let markup = `<${node.tag}`\n-    if (node.data) {\n-      // check directives\n-      const dirs = node.data.directives\n-      if (dirs) {\n-        for (let i = 0; i < dirs.length; i++) {\n-          const dirRenderer = directives[dirs[i].name]\n-          if (dirRenderer) {\n-            // directives mutate the node's data\n-            // which then gets rendered by modules\n-            dirRenderer(node, dirs[i])\n-          }\n-        }\n-      }\n-      // apply other modules\n-      for (let i = 0; i < modules.length; i++) {\n-        const res = modules[i](node)\n-        if (res) {\n-          markup += res\n-        }\n-      }\n-    }\n-    // attach scoped CSS ID\n-    let scopeId\n-    if (activeInstance &&\n-        activeInstance !== node.context &&\n-        (scopeId = activeInstance.$options._scopeId)) {\n-      markup += ` ${scopeId}`\n-    }\n-    while (node) {\n-      if ((scopeId = node.context.$options._scopeId)) {\n-        markup += ` ${scopeId}`\n-      }\n-      node = node.parent\n-    }\n-    return markup + '>'\n-  }\n+  const get = cache && normalizeAsync(cache, 'get')\n+  const has = cache && normalizeAsync(cache, 'has')\n \n   return function render (\n     component: Component,\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n     warned = Object.create(null)\n-    activeInstance = component\n+    const context = {\n+      activeInstance: component,\n+      renderStates: [],\n+      next: noop, // for flow\n+      write, done,\n+      isUnaryTag, modules, directives,\n+      cache, get, has\n+    }\n+    context.next = nextFactory(context)\n     normalizeRender(component)\n-    renderNode(component._render(), write, done, true)\n+    renderNode(component._render(), true, context)\n   }\n }"
            },
            {
                "commitId": "d362d64633f00f8cbf1613c424d8852fb45c7596",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import { encodeHTML } from 'entities'\n+import { escape } from 'he'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n@@ -112,7 +112,7 @@ export function createRenderFunction (\n       } else if (node.isComment) {\n         write(`<!--${node.text}-->`, next)\n       } else {\n-        write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n+        write(node.raw ? node.text : escape(String(node.text)), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "e774ce2353e28c813728f508a5a83d8236f5e36e",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -2,7 +2,7 @@\n \n import config from '../config'\n import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n-import { normalizeChildren } from '../vdom/helpers'\n+import { normalizeChildren } from '../vdom/helpers/index'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf"
            },
            {
                "commitId": "3446d1485d36b91ef42c53268cb69ecb047538a5",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -232,7 +232,7 @@ export function resolveSlots (\n     child = children[i]\n     // named slots should only be respected if the vnode was rendered in the\n     // same context.\n-    if (child.context === context &&\n+    if ((child.context === context || child.functionalContext === context) &&\n         child.data && (name = child.data.slot)) {\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {"
            },
            {
                "commitId": "c835ce57ff4e0ba3617a189bb2736599f1ffb471",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -117,8 +117,10 @@ export function renderMixin (Vue: Class<Component>) {\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n     if (Array.isArray(tree)) {\n       for (let i = 0; i < tree.length; i++) {\n-        tree[i].isStatic = true\n-        tree[i].key = `__static__${index}_${i}`\n+        if (typeof tree[i] !== 'string') {\n+          tree[i].isStatic = true\n+          tree[i].key = `__static__${index}_${i}`\n+        }\n       }\n     } else {\n       tree.isStatic = true"
            },
            {
                "commitId": "99ea0f8229f108baa54f8791758315e2eda4f779",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -14,7 +14,8 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm.$slots = resolveSlots(vm.$options._renderChildren)\n+  vm._renderContext = vm.$options._parentVnode && vm.$options._parentVnode.context\n+  vm.$slots = resolveSlots(vm.$options._renderChildren, vm._renderContext)\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -215,7 +216,8 @@ export function renderMixin (Vue: Class<Component>) {\n }\n \n export function resolveSlots (\n-  renderChildren: ?VNodeChildren\n+  renderChildren: ?VNodeChildren,\n+  context: ?Component\n ): { [key: string]: Array<VNode> } {\n   const slots = {}\n   if (!renderChildren) {\n@@ -226,8 +228,10 @@ export function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    if (child.data && (name = child.data.slot)) {\n-      delete child.data.slot\n+    // named slots should only be respected if the vnode was rendered in the\n+    // same context.\n+    if (child.context === context &&\n+        child.data && (name = child.data.slot)) {\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {\n         slot.push.apply(slot, child.children)"
            },
            {
                "commitId": "56960b5fbcf82d2160a7c9645ebddecc258bc0ec",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -5,7 +5,7 @@ import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n-  nextTick, resolveAsset, _toString, toNumber\n+  nextTick, resolveAsset, _toString, toNumber, looseEqual, looseIndexOf\n } from '../util/index'\n \n import { createElement } from '../vdom/create-element'\n@@ -94,6 +94,10 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._n = toNumber\n   // empty vnode\n   Vue.prototype._e = emptyVNode\n+  // loose equal\n+  Vue.prototype._q = looseEqual\n+  // loose indexOf\n+  Vue.prototype._i = looseIndexOf\n \n   // render static tree by index\n   Vue.prototype._m = function renderStatic ("
            },
            {
                "commitId": "d6a7568891d0c3368471322de5d730172d92b9e4",
                "additions": 4,
                "deletions": 3,
                "patch": "@@ -175,9 +175,10 @@ export function renderMixin (Vue: Class<Component>) {\n \n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n-    vnode: VNodeWithData,\n+    data: any,\n     value: any,\n-    asProp?: boolean) {\n+    asProp?: boolean\n+  ): VNodeData {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -188,7 +189,6 @@ export function renderMixin (Vue: Class<Component>) {\n         if (Array.isArray(value)) {\n           value = toObject(value)\n         }\n-        const data: any = vnode.data\n         for (const key in value) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]\n@@ -201,6 +201,7 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n       }\n     }\n+    return data\n   }\n \n   // expose v-on keyCodes"
            },
            {
                "commitId": "673dec6040bcfc510866761b38439b9d34dd91f7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -164,7 +164,7 @@ export function renderMixin (Vue: Class<Component>) {\n     // warn duplicate slot usage\n     if (slotNodes && process.env.NODE_ENV !== 'production') {\n       slotNodes._rendered && warn(\n-        `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+        `Duplicate presence of slot \"${name}\" found in the same render tree ` +\n         `- this will likely cause render errors.`,\n         this\n       )"
            },
            {
                "commitId": "179ec92019dd098487c720ba8d1667bbedb9c380",
                "additions": 6,
                "deletions": 6,
                "patch": "@@ -36,11 +36,11 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (vm._isMounted) {    \n-      // clone slot nodes on re-renders   \n-      for (const key in vm.$slots) {    \n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])    \n-      }   \n+    if (vm._isMounted) {\n+      // clone slot nodes on re-renders\n+      for (const key in vm.$slots) {\n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+      }\n     }\n \n     if (staticRenderFns && !vm._staticTrees) {\n@@ -160,7 +160,7 @@ export function renderMixin (Vue: Class<Component>) {\n     name: string,\n     fallback: ?Array<VNode>\n   ): ?Array<VNode> {\n-    let slotNodes = this.$slots[name]\n+    const slotNodes = this.$slots[name]\n     // warn duplicate slot usage\n     if (slotNodes && process.env.NODE_ENV !== 'production') {\n       slotNodes._rendered && warn("
            },
            {
                "commitId": "100a2969aa5c64bd71758c79881cf4531e9907be",
                "additions": 15,
                "deletions": 14,
                "patch": "@@ -36,6 +36,13 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n+    if (vm._isMounted) {    \n+      // clone slot nodes on re-renders   \n+      for (const key in vm.$slots) {    \n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])    \n+      }   \n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -154,20 +161,14 @@ export function renderMixin (Vue: Class<Component>) {\n     fallback: ?Array<VNode>\n   ): ?Array<VNode> {\n     let slotNodes = this.$slots[name]\n-    if (slotNodes) {\n-      // warn duplicate slot usage\n-      if (process.env.NODE_ENV !== 'production') {\n-        slotNodes._rendered && warn(\n-          `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n-          `- this will likely cause render errors.`,\n-          this\n-        )\n-        slotNodes._rendered = true\n-      }\n-      // clone slot nodes on re-renders\n-      if (this._isMounted) {\n-        slotNodes = cloneVNodes(slotNodes)\n-      }\n+    // warn duplicate slot usage\n+    if (slotNodes && process.env.NODE_ENV !== 'production') {\n+      slotNodes._rendered && warn(\n+        `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+        `- this will likely cause render errors.`,\n+        this\n+      )\n+      slotNodes._rendered = true\n     }\n     return slotNodes || fallback\n   }"
            },
            {
                "commitId": "4afccc8eece43956f6f84189923a60d9a5a45e36",
                "additions": 24,
                "deletions": 7,
                "patch": "@@ -36,13 +36,6 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (vm._isMounted) {\n-      // clone slot nodes on re-renders\n-      for (const key in vm.$slots) {\n-        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n-      }\n-    }\n-\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -155,6 +148,30 @@ export function renderMixin (Vue: Class<Component>) {\n     return ret\n   }\n \n+  // renderSlot\n+  Vue.prototype._t = function (\n+    name: string,\n+    fallback: ?Array<VNode>\n+  ): ?Array<VNode> {\n+    let slotNodes = this.$slots[name]\n+    if (slotNodes) {\n+      // warn duplicate slot usage\n+      if (process.env.NODE_ENV !== 'production') {\n+        slotNodes._rendered && warn(\n+          `Duplicate presense of slot \"${name}\" found in the same render tree ` +\n+          `- this will likely cause render errors.`,\n+          this\n+        )\n+        slotNodes._rendered = true\n+      }\n+      // clone slot nodes on re-renders\n+      if (this._isMounted) {\n+        slotNodes = cloneVNodes(slotNodes)\n+      }\n+    }\n+    return slotNodes || fallback\n+  }\n+\n   // apply v-bind object\n   Vue.prototype._b = function bindProps (\n     vnode: VNodeWithData,"
            },
            {
                "commitId": "f6b1a51729f705bc49c6eaaf32ec095efd97401c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -102,7 +102,7 @@ export function renderMixin (Vue: Class<Component>) {\n   ): VNode | Array<VNode> {\n     let tree = this._staticTrees[index]\n     // if has already-rendered static tree and not inside v-for,\n-    // we can reuse the same tree by indentity.\n+    // we can reuse the same tree by doing a shallow clone.\n     if (tree && !isInFor) {\n       return Array.isArray(tree)\n         ? cloneVNodes(tree)"
            },
            {
                "commitId": "982913fb1e06916a782b2789916f0038c9dfd98b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -74,13 +74,13 @@ export function createRenderFunction (\n         const key = name + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n           has(key, hit => {\n-            if (hit) {\n+            if (hit && get) {\n               get(key, res => write(res, next))\n             } else {\n               renderComponentWithCache(node, write, next, isRoot, cache, key)\n             }\n           })\n-        } else {\n+        } else if (get) {\n           get(key, res => {\n             if (res) {\n               write(res, next)"
            },
            {
                "commitId": "4d640ce4d9fd638bcd0e4a61a8bb346458046ced",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -92,6 +92,8 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n+  // empty vnode\n+  Vue.prototype._e = emptyVNode\n \n   // render static tree by index\n   Vue.prototype._m = function renderStatic (\n@@ -216,7 +218,7 @@ export function resolveSlots (\n   // ignore single whitespace\n   if (defaultSlot.length && !(\n     defaultSlot.length === 1 &&\n-    defaultSlot[0].text === ' '\n+    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n   )) {\n     slots.default = defaultSlot\n   }"
            },
            {
                "commitId": "014d2f8599f9afc0754e603b1528a12e74bd209a",
                "additions": 12,
                "deletions": 3,
                "patch": "@@ -1,7 +1,7 @@\n /* @flow */\n \n import config from '../config'\n-import VNode, { emptyVNode } from '../vdom/vnode'\n+import VNode, { emptyVNode, cloneVNode, cloneVNodes } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, formatComponentName, bind, isObject, toObject,\n@@ -36,6 +36,13 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n+    if (vm._isMounted) {\n+      // clone slot nodes on re-renders\n+      for (const key in vm.$slots) {\n+        vm.$slots[key] = cloneVNodes(vm.$slots[key])\n+      }\n+    }\n+\n     if (staticRenderFns && !vm._staticTrees) {\n       vm._staticTrees = []\n     }\n@@ -90,12 +97,14 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._m = function renderStatic (\n     index: number,\n     isInFor?: boolean\n-  ): VNode | VNodeChildren {\n+  ): VNode | Array<VNode> {\n     let tree = this._staticTrees[index]\n     // if has already-rendered static tree and not inside v-for,\n     // we can reuse the same tree by indentity.\n     if (tree && !isInFor) {\n-      return tree\n+      return Array.isArray(tree)\n+        ? cloneVNodes(tree)\n+        : cloneVNode(tree)\n     }\n     // otherwise, render a fresh tree.\n     tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)"
            },
            {
                "commitId": "0e75fb93df9fd83391959989836c120f2662adab",
                "additions": 20,
                "deletions": 4,
                "patch": "@@ -4,6 +4,14 @@ import { encodeHTML } from 'entities'\n import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+let warned = Object.create(null)\n+const warnOnce = msg => {\n+  if (!warned[msg]) {\n+    warned[msg] = true\n+    console.warn(`\\n\\u001b[31m${msg}\\u001b[39m\\n`)\n+  }\n+}\n+\n const normalizeAsync = (cache, method) => {\n   const fn = cache[method]\n   if (!fn) {\n@@ -61,8 +69,9 @@ export function createRenderFunction (\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n       const getKey = Ctor.options.serverCacheKey\n-      if (getKey && cache) {\n-        const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+      const name = Ctor.options.name\n+      if (getKey && cache && name) {\n+        const key = name + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n           has(key, hit => {\n             if (hit) {\n@@ -81,14 +90,20 @@ export function createRenderFunction (\n           })\n         }\n       } else {\n-        if (getKey) {\n-          console.error(\n+        if (getKey && !cache) {\n+          warnOnce(\n             `[vue-server-renderer] Component ${\n               Ctor.options.name || '(anonymous)'\n             } implemented serverCacheKey, ` +\n             'but no cache was provided to the renderer.'\n           )\n         }\n+        if (getKey && !name) {\n+          warnOnce(\n+            `[vue-server-renderer] Components that implement \"serverCacheKey\" ` +\n+            `must also define a unique \"name\" option.`\n+          )\n+        }\n         renderComponent(node, write, next, isRoot)\n       }\n     } else {\n@@ -213,6 +228,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    warned = Object.create(null)\n     activeInstance = component\n     normalizeRender(component)\n     renderNode(component._render(), write, done, true)"
            },
            {
                "commitId": "7c3db415a7e4e006f529b27123280ec7c2ae75d0",
                "additions": 14,
                "deletions": 6,
                "patch": "@@ -18,12 +18,20 @@ const normalizeAsync = (cache, method) => {\n const compilationCache = Object.create(null)\n const normalizeRender = vm => {\n   const { render, template } = vm.$options\n-  if (!render && template) {\n-    const renderFns = (\n-      compilationCache[template] ||\n-      (compilationCache[template] = compileToFunctions(template))\n-    )\n-    Object.assign(vm.$options, renderFns)\n+  if (!render) {\n+    if (template) {\n+      const renderFns = (\n+        compilationCache[template] ||\n+        (compilationCache[template] = compileToFunctions(template))\n+      )\n+      Object.assign(vm.$options, renderFns)\n+    } else {\n+      throw new Error(\n+        `render function or template not defined in component: ${\n+          vm.$options.name || vm.$options._componentTag || 'anonymous'\n+        }`\n+      )\n+    }\n   }\n }\n "
            },
            {
                "commitId": "18386c4cf4fe829f447687734a5bf03905d0db44",
                "additions": 18,
                "deletions": 5,
                "patch": "@@ -87,13 +87,26 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._n = toNumber\n \n   // render static tree by index\n-  Vue.prototype._m = function renderStatic (index?: number): Object | void {\n+  Vue.prototype._m = function renderStatic (\n+    index: number,\n+    isInFor?: boolean\n+  ): VNode | VNodeChildren {\n     let tree = this._staticTrees[index]\n-    if (!tree) {\n-      tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n-        this._renderProxy\n-      )\n+    // if has already-rendered static tree and not inside v-for,\n+    // we can reuse the same tree by indentity.\n+    if (tree && !isInFor) {\n+      return tree\n+    }\n+    // otherwise, render a fresh tree.\n+    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy)\n+    if (Array.isArray(tree)) {\n+      for (let i = 0; i < tree.length; i++) {\n+        tree[i].isStatic = true\n+        tree[i].key = `__static__${index}_${i}`\n+      }\n+    } else {\n       tree.isStatic = true\n+      tree.key = `__static__${index}`\n     }\n     return tree\n   }"
            },
            {
                "commitId": "21908b7267a9ff6b425b8261f9a38a2a0df2b72d",
                "additions": 4,
                "deletions": 6,
                "patch": "@@ -14,7 +14,7 @@ export function initRender (vm: Component) {\n   vm.$vnode = null // the placeholder node in parent tree\n   vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n-  vm.$slots = {}\n+  vm.$slots = resolveSlots(vm.$options._renderChildren)\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n   vm.$createElement = bind(createElement, vm)\n@@ -33,7 +33,6 @@ export function renderMixin (Vue: Class<Component>) {\n     const {\n       render,\n       staticRenderFns,\n-      _renderChildren,\n       _parentVnode\n     } = vm.$options\n \n@@ -43,9 +42,6 @@ export function renderMixin (Vue: Class<Component>) {\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n     vm.$vnode = _parentVnode\n-    // resolve slots. becaues slots are rendered in parent scope,\n-    // we set the activeInstance to parent.\n-    vm.$slots = resolveSlots(_renderChildren)\n     // render self\n     let vnode\n     try {\n@@ -171,7 +167,9 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-export function resolveSlots (renderChildren: ?VNodeChildren): Object {\n+export function resolveSlots (\n+  renderChildren: ?VNodeChildren\n+): { [key: string]: Array<VNode> } {\n   const slots = {}\n   if (!renderChildren) {\n     return slots"
            },
            {
                "commitId": "fe801b16e4da63513bce95bfa762a8a36d83fe59",
                "additions": 6,
                "deletions": 5,
                "patch": "@@ -95,14 +95,15 @@ export function createRenderFunction (\n   }\n \n   function renderComponent (node, write, next, isRoot) {\n-    const child = createComponentInstanceForVnode(node)\n+    const prevActive = activeInstance\n+    const child = activeInstance = createComponentInstanceForVnode(node, activeInstance)\n     normalizeRender(child)\n     const childNode = child._render()\n     childNode.parent = node\n-    const prevActive = activeInstance\n-    activeInstance = child\n-    renderNode(childNode, write, next, isRoot)\n-    activeInstance = prevActive\n+    renderNode(childNode, write, () => {\n+      activeInstance = prevActive\n+      next()\n+    }, isRoot)\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {"
            },
            {
                "commitId": "b5b963f51df1fa3124cd8a9846be5455408bc52a",
                "additions": 10,
                "deletions": 1,
                "patch": "@@ -40,6 +40,9 @@ export function createRenderFunction (\n   const get = cache && normalizeAsync(cache, 'get')\n   const has = cache && normalizeAsync(cache, 'has')\n \n+  // used to track and apply scope ids\n+  let activeInstance: any\n+\n   function renderNode (\n     node: VNode,\n     write: Function,\n@@ -96,7 +99,10 @@ export function createRenderFunction (\n     normalizeRender(child)\n     const childNode = child._render()\n     childNode.parent = node\n+    const prevActive = activeInstance\n+    activeInstance = child\n     renderNode(childNode, write, next, isRoot)\n+    activeInstance = prevActive\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n@@ -179,7 +185,9 @@ export function createRenderFunction (\n     }\n     // attach scoped CSS ID\n     let scopeId\n-    if (node.host && (scopeId = node.host.$options._scopeId)) {\n+    if (activeInstance &&\n+        activeInstance !== node.context &&\n+        (scopeId = activeInstance.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n     while (node) {\n@@ -196,6 +204,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    activeInstance = component\n     normalizeRender(component)\n     renderNode(component._render(), write, done, true)\n   }"
            },
            {
                "commitId": "c66b7566c682af653dc475fab1475db5484e40ee",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -163,7 +163,7 @@ export function renderMixin (Vue: Class<Component>) {\n         if (Array.isArray(value)) {\n           value = toObject(value)\n         }\n-        const data = vnode.data\n+        const data: any = vnode.data\n         for (const key in value) {\n           if (key === 'class' || key === 'style') {\n             data[key] = value[key]"
            },
            {
                "commitId": "59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -165,10 +165,14 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n         const data = vnode.data\n         for (const key in value) {\n-          const hash = asProp || config.mustUseProp(key)\n-            ? data.domProps || (data.domProps = {})\n-            : data.attrs || (data.attrs = {})\n-          hash[key] = value[key]\n+          if (key === 'class' || key === 'style') {\n+            data[key] = value[key]\n+          } else {\n+            const hash = asProp || config.mustUseProp(key)\n+              ? data.domProps || (data.domProps = {})\n+              : data.attrs || (data.attrs = {})\n+            hash[key] = value[key]\n+          }\n         }\n       }\n     }"
            },
            {
                "commitId": "351aef3cb4ada980f105f98f8b835876e8d4d689",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -83,6 +83,8 @@ export function createRenderFunction (\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n+      } else if (node.isComment) {\n+        write(`<!--${node.text}-->`, next)\n       } else {\n         write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n       }"
            },
            {
                "commitId": "74f8b98509d24487e1a8d1588b4128a7a1046a41",
                "additions": 7,
                "deletions": 4,
                "patch": "@@ -103,13 +103,16 @@ export function renderMixin (Vue: Class<Component>) {\n   // number conversion\n   Vue.prototype._n = toNumber\n \n-  //\n+  // render static tree by index\n   Vue.prototype._m = function renderStatic (index?: number): Object | void {\n-    return this._staticTrees[index] || (\n-      this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n+    let tree = this._staticTrees[index]\n+    if (!tree) {\n+      tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n         this._renderProxy\n       )\n-    )\n+      tree.isStatic = true\n+    }\n+    return tree\n   }\n \n   // filter resolution helper"
            },
            {
                "commitId": "65d4ae9d0f0f3c6b72c4c606d8066a2abca74db2",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -84,7 +84,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.raw ? node.text : encodeHTML(node.text), next)\n+        write(node.raw ? node.text : encodeHTML(String(node.text)), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "0f5bcdfac81e5428d2029f86ecb6bb77aef82335",
                "additions": 1,
                "deletions": 3,
                "patch": "@@ -177,9 +177,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-export function resolveSlots (\n-  renderChildren?: Array<any> | () => Array<any> | string\n-): Object {\n+export function resolveSlots (renderChildren: any): Object {\n   const slots = {}\n   if (!renderChildren) {\n     return slots"
            },
            {
                "commitId": "23a22cbb44f8a6796e2489a101b6de4f997f4340",
                "additions": 9,
                "deletions": 8,
                "patch": "@@ -56,9 +56,7 @@ export function renderMixin (Vue: Class<Component>) {\n     vm.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n-    if (_renderChildren) {\n-      resolveSlots(vm, _renderChildren)\n-    }\n+    vm.$slots = resolveSlots(_renderChildren)\n     // render self\n     let vnode\n     try {\n@@ -179,11 +177,13 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-function resolveSlots (\n-  vm: Component,\n-  renderChildren: Array<any> | () => Array<any> | string\n-) {\n-  const slots = vm.$slots = {}\n+export function resolveSlots (\n+  renderChildren?: Array<any> | () => Array<any> | string\n+): Object {\n+  const slots = {}\n+  if (!renderChildren) {\n+    return slots\n+  }\n   const children = normalizeChildren(renderChildren) || []\n   const defaultSlot = []\n   let name, child\n@@ -208,4 +208,5 @@ function resolveSlots (\n   )) {\n     slots.default = defaultSlot\n   }\n+  return slots\n }"
            },
            {
                "commitId": "154e17abaed2f9c2d80507c28a474adea72337e6",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -148,7 +148,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // apply v-bind object\n-  Vue.prototype._b = function bindProps (vnode: VNodeWithData, value: any) {\n+  Vue.prototype._b = function bindProps (\n+    vnode: VNodeWithData,\n+    value: any,\n+    asProp?: boolean) {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -161,7 +164,7 @@ export function renderMixin (Vue: Class<Component>) {\n         }\n         const data = vnode.data\n         for (const key in value) {\n-          const hash = config.mustUseProp(key)\n+          const hash = asProp || config.mustUseProp(key)\n             ? data.domProps || (data.domProps = {})\n             : data.attrs || (data.attrs = {})\n           hash[key] = value[key]"
            },
            {
                "commitId": "69ecdcb05e3f5db32af889962fe8253d49d7390d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -162,7 +162,7 @@ export function renderMixin (Vue: Class<Component>) {\n         const data = vnode.data\n         for (const key in value) {\n           const hash = config.mustUseProp(key)\n-            ? data.props || (data.props = {})\n+            ? data.domProps || (data.domProps = {})\n             : data.attrs || (data.attrs = {})\n           hash[key] = value[key]\n         }"
            },
            {
                "commitId": "2732fec59ed592c187b499b2ba5872d2242339cc",
                "additions": 24,
                "deletions": 5,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, isObject, toObject,\n+  warn, formatComponentName, bind, isObject, toObject,\n   nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n@@ -48,19 +48,38 @@ export function renderMixin (Vue: Class<Component>) {\n       _parentVnode\n     } = vm.$options\n \n-    if (staticRenderFns && !this._staticTrees) {\n-      this._staticTrees = []\n+    if (staticRenderFns && !vm._staticTrees) {\n+      vm._staticTrees = []\n     }\n     // set parent vnode. this allows render functions to have access\n     // to the data on the placeholder node.\n-    this.$vnode = _parentVnode\n+    vm.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    let vnode = render.call(vm._renderProxy, vm.$createElement)\n+    let vnode\n+    try {\n+      vnode = render.call(vm._renderProxy, vm.$createElement)\n+    } catch (e) {\n+      if (process.env.NODE_ENV !== 'production') {\n+        warn(`Error when rendering ${formatComponentName(vm)}:`)\n+      }\n+      /* istanbul ignore else */\n+      if (config.errorHandler) {\n+        config.errorHandler.call(null, e, vm)\n+      } else {\n+        if (config._isServer) {\n+          throw e\n+        } else {\n+          setTimeout(() => { throw e }, 0)\n+        }\n+      }\n+      // return previous vnode to prevent render error causing blank component\n+      vnode = vm._vnode\n+    }\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "d0482a0faeeb79c250fc17e06de6c777e74bc618",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -167,7 +167,8 @@ function resolveSlots (\n   let name, child\n   for (let i = 0, l = children.length; i < l; i++) {\n     child = children[i]\n-    if ((name = child.data && child.data.slot)) {\n+    if (child.data && (name = child.data.slot)) {\n+      delete child.data.slot\n       const slot = (slots[name] || (slots[name] = []))\n       if (child.tag === 'template') {\n         slot.push.apply(slot, child.children)"
            },
            {
                "commitId": "75a221e95fa797a7472ac8a25f97a8248a605737",
                "additions": 19,
                "deletions": 21,
                "patch": "@@ -162,29 +162,27 @@ function resolveSlots (\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n   const slots = vm.$slots = {}\n-  if (renderChildren) {\n-    const children = normalizeChildren(renderChildren) || []\n-    const defaultSlot = []\n-    let name, child\n-    for (let i = 0, l = children.length; i < l; i++) {\n-      child = children[i]\n-      if ((name = child.data && child.data.slot)) {\n-        const slot = (slots[name] || (slots[name] = []))\n-        if (child.tag === 'template') {\n-          slot.push.apply(slot, child.children)\n-        } else {\n-          slot.push(child)\n-        }\n+  const children = normalizeChildren(renderChildren) || []\n+  const defaultSlot = []\n+  let name, child\n+  for (let i = 0, l = children.length; i < l; i++) {\n+    child = children[i]\n+    if ((name = child.data && child.data.slot)) {\n+      const slot = (slots[name] || (slots[name] = []))\n+      if (child.tag === 'template') {\n+        slot.push.apply(slot, child.children)\n       } else {\n-        defaultSlot.push(child)\n+        slot.push(child)\n       }\n+    } else {\n+      defaultSlot.push(child)\n     }\n-    // ignore single whitespace\n-    if (defaultSlot.length && !(\n-      defaultSlot.length === 1 &&\n-      defaultSlot[0].text === ' '\n-    )) {\n-      slots.default = defaultSlot\n-    }\n+  }\n+  // ignore single whitespace\n+  if (defaultSlot.length && !(\n+    defaultSlot.length === 1 &&\n+    defaultSlot[0].text === ' '\n+  )) {\n+    slots.default = defaultSlot\n   }\n }"
            },
            {
                "commitId": "1a064a6dc94c9dd183963ebd00a6e25680786b96",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -161,9 +161,9 @@ function resolveSlots (\n   vm: Component,\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n+  const slots = vm.$slots = {}\n   if (renderChildren) {\n     const children = normalizeChildren(renderChildren) || []\n-    const slots = {}\n     const defaultSlot = []\n     let name, child\n     for (let i = 0, l = children.length; i < l; i++) {\n@@ -179,12 +179,12 @@ function resolveSlots (\n         defaultSlot.push(child)\n       }\n     }\n+    // ignore single whitespace\n     if (defaultSlot.length && !(\n       defaultSlot.length === 1 &&\n       defaultSlot[0].text === ' '\n     )) {\n-      slots['default'] = defaultSlot\n+      slots.default = defaultSlot\n     }\n-    vm.$slots = slots\n   }\n }"
            },
            {
                "commitId": "7630622689587b947c3ba03678a8f1d1e24ac71f",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -17,7 +17,8 @@ export const renderState: {\n }\n \n export function initRender (vm: Component) {\n-  vm._vnode = null\n+  vm.$vnode = null // the placeholder node in parent tree\n+  vm._vnode = null // the root of the child tree\n   vm._staticTrees = null\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n@@ -50,7 +51,9 @@ export function renderMixin (Vue: Class<Component>) {\n     if (staticRenderFns && !this._staticTrees) {\n       this._staticTrees = []\n     }\n-\n+    // set parent vnode. this allows render functions to have access\n+    // to the data on the placeholder node.\n+    this.$vnode = _parentVnode\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {"
            },
            {
                "commitId": "5c6c8c7ed0b72461f1ed2e673c8f04cba300aaff",
                "additions": 19,
                "deletions": 3,
                "patch": "@@ -1,6 +1,7 @@\n /* @flow */\n \n import { encodeHTML } from 'entities'\n+import { compileToFunctions } from 'web/compiler/index'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const normalizeAsync = (cache, method) => {\n@@ -14,6 +15,18 @@ const normalizeAsync = (cache, method) => {\n   }\n }\n \n+const compilationCache = Object.create(null)\n+const normalizeRender = vm => {\n+  const { render, template } = vm.$options\n+  if (!render && template) {\n+    const renderFns = (\n+      compilationCache[template] ||\n+      (compilationCache[template] = compileToFunctions(template))\n+    )\n+    Object.assign(vm.$options, renderFns)\n+  }\n+}\n+\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n@@ -77,9 +90,11 @@ export function createRenderFunction (\n   }\n \n   function renderComponent (node, write, next, isRoot) {\n-    const child = createComponentInstanceForVnode(node)._render()\n-    child.parent = node\n-    renderNode(child, write, next, isRoot)\n+    const child = createComponentInstanceForVnode(node)\n+    normalizeRender(child)\n+    const childNode = child._render()\n+    childNode.parent = node\n+    renderNode(childNode, write, next, isRoot)\n   }\n \n   function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n@@ -179,6 +194,7 @@ export function createRenderFunction (\n     write: (text: string, next: Function) => void,\n     done: Function\n   ) {\n+    normalizeRender(component)\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "e17f2ba20cdc44fabe9a6ca2baa6881debc1a992",
                "additions": 1,
                "deletions": 4,
                "patch": "@@ -1,11 +1,8 @@\n /* @flow */\n \n-import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-const encodeHTMLCached = cached(encodeHTML)\n-\n const normalizeAsync = (cache, method) => {\n   const fn = cache[method]\n   if (!fn) {\n@@ -74,7 +71,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.raw ? node.text : encodeHTMLCached(node.text), next)\n+        write(node.raw ? node.text : encodeHTML(node.text), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "bf9c46f435bad7fb8872febc03f577ee622e4df6",
                "additions": 4,
                "deletions": 2,
                "patch": "@@ -39,7 +39,7 @@ export function createRenderFunction (\n     if (node.componentOptions) {\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n-      const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+      const getKey = Ctor.options.serverCacheKey\n       if (getKey && cache) {\n         const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n         if (has) {\n@@ -62,7 +62,9 @@ export function createRenderFunction (\n       } else {\n         if (getKey) {\n           console.error(\n-            'Component implemented server.getCacheKey, ' +\n+            `[vue-server-renderer] Component ${\n+              Ctor.options.name || '(anonymous)'\n+            } implemented serverCacheKey, ` +\n             'but no cache was provided to the renderer.'\n           )\n         }"
            },
            {
                "commitId": "ba3bec824d9d12e7508291f788645c4b613b9fbe",
                "additions": 67,
                "deletions": 34,
                "patch": "@@ -2,21 +2,33 @@\n \n import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n-import LRU from 'lru-cache'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const encodeHTMLCached = cached(encodeHTML)\n-const defaultOptions = {\n-  max: 5000\n+\n+const normalizeAsync = (cache, method) => {\n+  const fn = cache[method]\n+  if (!fn) {\n+    return\n+  } else if (fn.length > 1) {\n+    return (key, cb) => fn.call(cache, key, cb)\n+  } else {\n+    return (key, cb) => cb(fn.call(cache, key))\n+  }\n }\n \n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n   isUnaryTag: Function,\n-  cacheOptions: Object\n+  cache: any\n ) {\n-  const cache = LRU(Object.assign({}, defaultOptions, cacheOptions))\n+  if (cache && (!cache.get || !cache.set)) {\n+    throw new Error('renderer cache must implement at least get & set.')\n+  }\n+\n+  const get = cache && normalizeAsync(cache, 'get')\n+  const has = cache && normalizeAsync(cache, 'has')\n \n   function renderNode (\n     node: VNode,\n@@ -28,35 +40,34 @@ export function createRenderFunction (\n       // check cache hit\n       const Ctor = node.componentOptions.Ctor\n       const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n-      if (getKey) {\n+      if (getKey && cache) {\n         const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n-        if (cache.has(key)) {\n-          return write(cache.get(key), next)\n+        if (has) {\n+          has(key, hit => {\n+            if (hit) {\n+              get(key, res => write(res, next))\n+            } else {\n+              renderComponentWithCache(node, write, next, isRoot, cache, key)\n+            }\n+          })\n         } else {\n-          write.caching = true\n-          const buffer = write.cacheBuffer\n-          const bufferIndex = buffer.push('') - 1\n-          const _next = next\n-          next = () => {\n-            const result = buffer[bufferIndex]\n-            cache.set(key, result)\n-            if (bufferIndex === 0) {\n-              // this is a top-level cached component,\n-              // exit caching mode.\n-              write.caching = false\n+          get(key, res => {\n+            if (res) {\n+              write(res, next)\n             } else {\n-              // parent component is also being cached,\n-              // merge self into parent's result\n-              buffer[bufferIndex - 1] += result\n+              renderComponentWithCache(node, write, next, isRoot, cache, key)\n             }\n-            buffer.length = bufferIndex\n-            _next()\n-          }\n+          })\n         }\n+      } else {\n+        if (getKey) {\n+          console.error(\n+            'Component implemented server.getCacheKey, ' +\n+            'but no cache was provided to the renderer.'\n+          )\n+        }\n+        renderComponent(node, write, next, isRoot)\n       }\n-      const child = createComponentInstanceForVnode(node)._render()\n-      child.parent = node\n-      renderNode(child, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -66,12 +77,34 @@ export function createRenderFunction (\n     }\n   }\n \n-  function renderElement (\n-    el: VNode,\n-    write: Function,\n-    next: Function,\n-    isRoot: boolean\n-  ) {\n+  function renderComponent (node, write, next, isRoot) {\n+    const child = createComponentInstanceForVnode(node)._render()\n+    child.parent = node\n+    renderNode(child, write, next, isRoot)\n+  }\n+\n+  function renderComponentWithCache (node, write, next, isRoot, cache, key) {\n+    write.caching = true\n+    const buffer = write.cacheBuffer\n+    const bufferIndex = buffer.push('') - 1\n+    renderComponent(node, write, () => {\n+      const result = buffer[bufferIndex]\n+      cache.set(key, result)\n+      if (bufferIndex === 0) {\n+        // this is a top-level cached component,\n+        // exit caching mode.\n+        write.caching = false\n+      } else {\n+        // parent component is also being cached,\n+        // merge self into parent's result\n+        buffer[bufferIndex - 1] += result\n+      }\n+      buffer.length = bufferIndex\n+      next()\n+    }, isRoot)\n+  }\n+\n+  function renderElement (el, write, next, isRoot) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}"
            },
            {
                "commitId": "1b3b19491fd47f3634e30d7fcce991881de16530",
                "additions": 19,
                "deletions": 21,
                "patch": "@@ -8,11 +8,7 @@ import {\n   nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n-import {\n-  renderElement,\n-  renderElementWithChildren,\n-  renderStatic\n-} from '../vdom/create-element'\n+import { createElement } from '../vdom/create-element'\n \n export const renderState: {\n   activeInstance: ?Component\n@@ -26,14 +22,7 @@ export function initRender (vm: Component) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(function (\n-    tag?: string | Class<Component> | Function | Object,\n-    data?: VNodeData,\n-    children?: VNodeChildren,\n-    namespace?: string\n-  ) {\n-    return this._h(this._e(tag, data, namespace), children)\n-  }, vm)\n+  vm.$createElement = bind(createElement, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -88,22 +77,29 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype._h = renderElementWithChildren\n-  Vue.prototype._e = renderElement\n-  Vue.prototype._m = renderStatic\n+  Vue.prototype._h = createElement\n   // toString for mustaches\n   Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n \n+  //\n+  Vue.prototype._m = function renderStatic (index?: number): Object | void {\n+    return this._staticTrees[index] || (\n+      this._staticTrees[index] = this.$options.staticRenderFns[index].call(\n+        this._renderProxy\n+      )\n+    )\n+  }\n+\n   // filter resolution helper\n   const identity = _ => _\n-  Vue.prototype._f = function (id) {\n+  Vue.prototype._f = function resolveFilter (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }\n \n   // render v-for\n-  Vue.prototype._l = function (\n+  Vue.prototype._l = function renderList (\n     val: any,\n     render: () => VNode\n   ): ?Array<VNode> {\n@@ -130,7 +126,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // apply v-bind object\n-  Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n+  Vue.prototype._b = function bindProps (vnode: VNodeWithData, value: any) {\n     if (value) {\n       if (!isObject(value)) {\n         process.env.NODE_ENV !== 'production' && warn(\n@@ -153,15 +149,17 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // expose v-on keyCodes\n-  Vue.prototype._k = key => config.keyCodes[key]\n+  Vue.prototype._k = function getKeyCodes (key: string): any {\n+    return config.keyCodes[key]\n+  }\n }\n \n function resolveSlots (\n   vm: Component,\n   renderChildren: Array<any> | () => Array<any> | string\n ) {\n   if (renderChildren) {\n-    const children = normalizeChildren(renderChildren)\n+    const children = normalizeChildren(renderChildren) || []\n     const slots = {}\n     const defaultSlot = []\n     let name, child"
            },
            {
                "commitId": "cf8aeddc122dc13870ac07eff1574b2c172feb18",
                "additions": 2,
                "deletions": 5,
                "patch": "@@ -5,13 +5,12 @@ import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, bind, isObject, toObject,\n-  nextTick, resolveAsset, renderString, toNumber\n+  nextTick, resolveAsset, _toString, toNumber\n } from '../util/index'\n \n import {\n   renderElement,\n   renderElementWithChildren,\n-  renderText,\n   renderStatic\n } from '../vdom/create-element'\n \n@@ -91,11 +90,9 @@ export function renderMixin (Vue: Class<Component>) {\n   // shorthands used in render functions\n   Vue.prototype._h = renderElementWithChildren\n   Vue.prototype._e = renderElement\n-  Vue.prototype._t = renderText\n   Vue.prototype._m = renderStatic\n-\n   // toString for mustaches\n-  Vue.prototype._s = renderString\n+  Vue.prototype._s = _toString\n   // number conversion\n   Vue.prototype._n = toNumber\n "
            },
            {
                "commitId": "51db34103a8f76dc314578d202af0465177d30f8",
                "additions": 16,
                "deletions": 8,
                "patch": "@@ -33,16 +33,24 @@ export function createRenderFunction (\n         if (cache.has(key)) {\n           return write(cache.get(key), next)\n         } else {\n-          if (!write.caching) {\n-            // initialize if not already caching\n-            write.caching = true\n-            const _next = next\n-            next = () => {\n-              cache.set(key, write.buffer)\n+          write.caching = true\n+          const buffer = write.cacheBuffer\n+          const bufferIndex = buffer.push('') - 1\n+          const _next = next\n+          next = () => {\n+            const result = buffer[bufferIndex]\n+            cache.set(key, result)\n+            if (bufferIndex === 0) {\n+              // this is a top-level cached component,\n+              // exit caching mode.\n               write.caching = false\n-              write.buffer = ''\n-              _next()\n+            } else {\n+              // parent component is also being cached,\n+              // merge self into parent's result\n+              buffer[bufferIndex - 1] += result\n             }\n+            buffer.length = bufferIndex\n+            _next()\n           }\n         }\n       }"
            },
            {
                "commitId": "651263bb78bb4de3d0c9bfeda767a5290f6018c8",
                "additions": 26,
                "deletions": 26,
                "patch": "@@ -25,9 +25,28 @@ export function createRenderFunction (\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child =\n-        getCachedComponent(node) ||\n-        createComponentInstanceForVnode(node)._render()\n+      // check cache hit\n+      const Ctor = node.componentOptions.Ctor\n+      const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+      if (getKey) {\n+        const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+        if (cache.has(key)) {\n+          return write(cache.get(key), next)\n+        } else {\n+          if (!write.caching) {\n+            // initialize if not already caching\n+            write.caching = true\n+            const _next = next\n+            next = () => {\n+              cache.set(key, write.buffer)\n+              write.caching = false\n+              write.buffer = ''\n+              _next()\n+            }\n+          }\n+        }\n+      }\n+      const child = createComponentInstanceForVnode(node)._render()\n       child.parent = node\n       renderNode(child, write, next, isRoot)\n     } else {\n@@ -39,21 +58,6 @@ export function createRenderFunction (\n     }\n   }\n \n-  function getCachedComponent (node) {\n-    const Ctor = node.componentOptions.Ctor\n-    const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n-    if (getKey) {\n-      const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n-      if (cache.has(key)) {\n-        return cache.get(key)\n-      } else {\n-        const res = createComponentInstanceForVnode(node)._render()\n-        cache.set(key, res)\n-        return res\n-      }\n-    }\n-  }\n-\n   function renderElement (\n     el: VNode,\n     write: Function,\n@@ -94,9 +98,6 @@ export function createRenderFunction (\n   }\n \n   function renderStartingTag (node: VNode) {\n-    if (node._rendered) {\n-      return node._rendered\n-    }\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -124,14 +125,13 @@ export function createRenderFunction (\n     if (node.host && (scopeId = node.host.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n-    let _node = node\n-    while (_node) {\n-      if ((scopeId = _node.context.$options._scopeId)) {\n+    while (node) {\n+      if ((scopeId = node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n-      _node = _node.parent\n+      node = node.parent\n     }\n-    return (node._rendered = markup + '>')\n+    return markup + '>'\n   }\n \n   return function render ("
            },
            {
                "commitId": "c902e1f9ab91b3a8048f1a576396abdeeea41d20",
                "additions": 34,
                "deletions": 6,
                "patch": "@@ -2,23 +2,32 @@\n \n import { cached } from 'shared/util'\n import { encodeHTML } from 'entities'\n+import LRU from 'lru-cache'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n const encodeHTMLCached = cached(encodeHTML)\n+const defaultOptions = {\n+  max: 5000\n+}\n \n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n-  isUnaryTag: Function\n+  isUnaryTag: Function,\n+  cacheOptions: Object\n ) {\n+  const cache = LRU(Object.assign({}, defaultOptions, cacheOptions))\n+\n   function renderNode (\n     node: VNode,\n     write: Function,\n     next: Function,\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child = createComponentInstanceForVnode(node)._render()\n+      const child =\n+        getCachedComponent(node) ||\n+        createComponentInstanceForVnode(node)._render()\n       child.parent = node\n       renderNode(child, write, next, isRoot)\n     } else {\n@@ -30,6 +39,21 @@ export function createRenderFunction (\n     }\n   }\n \n+  function getCachedComponent (node) {\n+    const Ctor = node.componentOptions.Ctor\n+    const getKey = Ctor.options.server && Ctor.options.server.getCacheKey\n+    if (getKey) {\n+      const key = Ctor.cid + '::' + getKey(node.componentOptions.propsData)\n+      if (cache.has(key)) {\n+        return cache.get(key)\n+      } else {\n+        const res = createComponentInstanceForVnode(node)._render()\n+        cache.set(key, res)\n+        return res\n+      }\n+    }\n+  }\n+\n   function renderElement (\n     el: VNode,\n     write: Function,\n@@ -70,6 +94,9 @@ export function createRenderFunction (\n   }\n \n   function renderStartingTag (node: VNode) {\n+    if (node._rendered) {\n+      return node._rendered\n+    }\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -97,13 +124,14 @@ export function createRenderFunction (\n     if (node.host && (scopeId = node.host.$options._scopeId)) {\n       markup += ` ${scopeId}`\n     }\n-    while (node) {\n-      if ((scopeId = node.context.$options._scopeId)) {\n+    let _node = node\n+    while (_node) {\n+      if ((scopeId = _node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n-      node = node.parent\n+      _node = _node.parent\n     }\n-    return markup + '>'\n+    return (node._rendered = markup + '>')\n   }\n \n   return function render ("
            },
            {
                "commitId": "3fe127b05a0e12b5d05d4ddd0d2e5f85f223d475",
                "additions": 3,
                "deletions": 1,
                "patch": "@@ -5,7 +5,7 @@ import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n   warn, bind, isObject, toObject,\n-  nextTick, resolveAsset, renderString\n+  nextTick, resolveAsset, renderString, toNumber\n } from '../util/index'\n \n import {\n@@ -96,6 +96,8 @@ export function renderMixin (Vue: Class<Component>) {\n \n   // toString for mustaches\n   Vue.prototype._s = renderString\n+  // number conversion\n+  Vue.prototype._n = toNumber\n \n   // filter resolution helper\n   const identity = _ => _"
            },
            {
                "commitId": "f0efa9aad2f33c45ea8dfc5098cef86900b9ef98",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -154,7 +154,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // expose v-on keyCodes\n-  Vue.prototype._keyCode = key => config.keyCodes[key]\n+  Vue.prototype._k = key => config.keyCodes[key]\n }\n \n function resolveSlots ("
            },
            {
                "commitId": "4fe51a75a94464075055b45550a05e4680bb2b9f",
                "additions": 3,
                "deletions": 0,
                "patch": "@@ -152,6 +152,9 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n   }\n+\n+  // expose v-on keyCodes\n+  Vue.prototype._keyCode = key => config.keyCodes[key]\n }\n \n function resolveSlots ("
            },
            {
                "commitId": "41e46476a50c4fe08bd1de6423e84eef26e2b8f1",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -69,7 +69,7 @@ export function renderMixin (Vue: Class<Component>) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    let vnode = render.call(vm._renderProxy)\n+    let vnode = render.call(vm._renderProxy, vm.$createElement)\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {"
            },
            {
                "commitId": "cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -93,9 +93,12 @@ export function createRenderFunction (\n       }\n     }\n     // attach scoped CSS ID\n+    let scopeId\n+    if (node.host && (scopeId = node.host.$options._scopeId)) {\n+      markup += ` ${scopeId}`\n+    }\n     while (node) {\n-      const scopeId = node.context.$options._scopeId\n-      if (scopeId) {\n+      if ((scopeId = node.context.$options._scopeId)) {\n         markup += ` ${scopeId}`\n       }\n       node = node.parent"
            },
            {
                "commitId": "b1351be073eda59724b3ede02753379fdc7d6829",
                "additions": 11,
                "deletions": 2,
                "patch": "@@ -18,8 +18,9 @@ export function createRenderFunction (\n     isRoot: boolean\n   ) {\n     if (node.componentOptions) {\n-      const child = createComponentInstanceForVnode(node)\n-      renderNode(child._render(), write, next, isRoot)\n+      const child = createComponentInstanceForVnode(node)._render()\n+      child.parent = node\n+      renderNode(child, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -91,6 +92,14 @@ export function createRenderFunction (\n         }\n       }\n     }\n+    // attach scoped CSS ID\n+    while (node) {\n+      const scopeId = node.context.$options._scopeId\n+      if (scopeId) {\n+        markup += ` ${scopeId}`\n+      }\n+      node = node.parent\n+    }\n     return markup + '>'\n   }\n "
            },
            {
                "commitId": "b0ad94fc876826a8ee3226320aacd40b8967f8dd",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,7 +1,11 @@\n /* @flow */\n \n+import { cached } from 'shared/util'\n+import { encodeHTML } from 'entities'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n+const encodeHTMLCached = cached(encodeHTML)\n+\n export function createRenderFunction (\n   modules: Array<Function>,\n   directives: Object,\n@@ -20,7 +24,7 @@ export function createRenderFunction (\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n       } else {\n-        write(node.text, next)\n+        write(node.raw ? node.text : encodeHTMLCached(node.text), next)\n       }\n     }\n   }"
            },
            {
                "commitId": "cec833a9e8d71a9ed5deaecdccaceb1168641a2e",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -112,19 +112,19 @@ export function renderMixin (Vue: Class<Component>) {\n     if (Array.isArray(val)) {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n-        ret[i] = render(val[i], i, i)\n+        ret[i] = render(val[i], i)\n       }\n     } else if (typeof val === 'number') {\n       ret = new Array(val)\n       for (i = 0; i < val; i++) {\n-        ret[i] = render(i + 1, i, i)\n+        ret[i] = render(i + 1, i)\n       }\n     } else if (isObject(val)) {\n       keys = Object.keys(val)\n       ret = new Array(keys.length)\n       for (i = 0, l = keys.length; i < l; i++) {\n         key = keys[i]\n-        ret[i] = render(val[key], i, key)\n+        ret[i] = render(val[key], key, i)\n       }\n     }\n     return ret"
            },
            {
                "commitId": "894d214e9367be653bf22429085906682fcd874a",
                "additions": 16,
                "deletions": 10,
                "patch": "@@ -47,13 +47,22 @@ export function renderMixin (Vue: Class<Component>) {\n \n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n+\n+    // set current active instance\n     const prev = renderState.activeInstance\n     renderState.activeInstance = vm\n-    if (!vm._isMounted) {\n+\n+    const {\n+      render,\n+      staticRenderFns,\n+      _renderChildren,\n+      _parentVnode\n+    } = vm.$options\n+\n+    if (staticRenderFns && !vm._staticTrees) {\n       // render static sub-trees for once on initial render\n-      renderStaticTrees(vm)\n+      renderStaticTrees(vm, staticRenderFns)\n     }\n-    const { render, _renderChildren, _parentVnode } = vm.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n@@ -145,13 +154,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n }\n \n-function renderStaticTrees (vm: Component) {\n-  const staticRenderFns = vm.$options.staticRenderFns\n-  if (staticRenderFns) {\n-    const trees = vm._staticTrees = new Array(staticRenderFns.length)\n-    for (let i = 0; i < staticRenderFns.length; i++) {\n-      trees[i] = staticRenderFns[i].call(vm._renderProxy)\n-    }\n+function renderStaticTrees (vm: Component, fns: Array<Function>) {\n+  const trees = vm._staticTrees = new Array(fns.length)\n+  for (let i = 0; i < fns.length; i++) {\n+    trees[i] = fns[i].call(vm._renderProxy)\n   }\n }\n "
            },
            {
                "commitId": "a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -70,7 +70,7 @@ export function renderMixin (Vue: Class<Component>) {\n           vm\n         )\n       }\n-      vnode = emptyVNode\n+      vnode = emptyVNode()\n     }\n     // set parent\n     vnode.parent = _parentVnode"
            },
            {
                "commitId": "026198caf1545bf0f82831f19e1f18f1212e84d2",
                "additions": 1,
                "deletions": 15,
                "patch": "@@ -35,20 +35,6 @@ export function initRender (vm: Component) {\n   ) {\n     return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n-  // for abstract components, determine first non-abstract parent\n-  // so that the children of abstract components are considered children\n-  // of the first non-abstract parent.\n-  // this is used by internal abstract components like <keep-alive>.\n-  if (vm.$options._abstract) {\n-    let parent = vm.$parent\n-    /* istanbul ignore next */\n-    while (parent && parent.$options._abstract) {\n-      parent = parent.$parent\n-    }\n-    vm._renderParent = parent\n-  } else {\n-    vm._renderParent = vm\n-  }\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -62,7 +48,7 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n     const prev = renderState.activeInstance\n-    renderState.activeInstance = vm._renderParent\n+    renderState.activeInstance = vm\n     if (!vm._isMounted) {\n       // render static sub-trees for once on initial render\n       renderStaticTrees(vm)"
            },
            {
                "commitId": "2091c8525f5e0dca47c9672323f91449832688b7",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -41,6 +41,7 @@ export function initRender (vm: Component) {\n   // this is used by internal abstract components like <keep-alive>.\n   if (vm.$options._abstract) {\n     let parent = vm.$parent\n+    /* istanbul ignore next */\n     while (parent && parent.$options._abstract) {\n       parent = parent.$parent\n     }"
            },
            {
                "commitId": "cb67ffe4429ebfbdf42b5d18e1e1b168109d472e",
                "additions": 15,
                "deletions": 2,
                "patch": "@@ -16,7 +16,7 @@ import {\n } from '../vdom/create-element'\n \n export const renderState: {\n-  activeInstance: Component | null\n+  activeInstance: ?Component\n } = {\n   activeInstance: null\n }\n@@ -35,6 +35,19 @@ export function initRender (vm: Component) {\n   ) {\n     return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n+  // for abstract components, determine first non-abstract parent\n+  // so that the children of abstract components are considered children\n+  // of the first non-abstract parent.\n+  // this is used by internal abstract components like <keep-alive>.\n+  if (vm.$options._abstract) {\n+    let parent = vm.$parent\n+    while (parent && parent.$options._abstract) {\n+      parent = parent.$parent\n+    }\n+    vm._renderParent = parent\n+  } else {\n+    vm._renderParent = vm\n+  }\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -48,7 +61,7 @@ export function renderMixin (Vue: Class<Component>) {\n   Vue.prototype._render = function (): VNode {\n     const vm: Component = this\n     const prev = renderState.activeInstance\n-    renderState.activeInstance = vm\n+    renderState.activeInstance = vm._renderParent\n     if (!vm._isMounted) {\n       // render static sub-trees for once on initial render\n       renderStaticTrees(vm)"
            },
            {
                "commitId": "113232f960c359bdbe56fac59b6f9e3b7cc9290a",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -66,7 +66,8 @@ export function renderMixin (Vue: Class<Component>) {\n       if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n         warn(\n           'Multiple root nodes returned from render function. Render function ' +\n-          'should return a single root node.'\n+          'should return a single root node.',\n+          vm\n         )\n       }\n       vnode = emptyVNode"
            },
            {
                "commitId": "060fab9ec1d7df09312fb301f092b6790cf1cd46",
                "additions": 1,
                "deletions": 29,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, remove, isObject, toObject,\n+  warn, bind, isObject, toObject,\n   nextTick, resolveAsset, renderString\n } from '../util/index'\n \n@@ -120,34 +120,6 @@ export function renderMixin (Vue: Class<Component>) {\n     return ret\n   }\n \n-  // register ref\n-  Vue.prototype._r = function (\n-    key: string,\n-    ref: Vue | Element,\n-    vFor: boolean,\n-    isRemoval: boolean\n-  ) {\n-    const vm: Component = this\n-    const refs = vm.$refs\n-    if (isRemoval) {\n-      if (Array.isArray(refs[key])) {\n-        remove(refs[key], ref)\n-      } else {\n-        refs[key] = undefined\n-      }\n-    } else {\n-      if (vFor) {\n-        if (Array.isArray(refs[key])) {\n-          refs[key].push(ref)\n-        } else {\n-          refs[key] = [ref]\n-        }\n-      } else {\n-        refs[key] = ref\n-      }\n-    }\n-  }\n-\n   // apply v-bind object\n   Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n     if (value) {"
            },
            {
                "commitId": "43da334ec164a83aafcaa475e10611dbf0d941db",
                "additions": 6,
                "deletions": 0,
                "patch": "@@ -63,6 +63,12 @@ export function renderMixin (Vue: Class<Component>) {\n     let vnode = render.call(vm._renderProxy)\n     // return empty vnode in case the render function errored out\n     if (!(vnode instanceof VNode)) {\n+      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n+        warn(\n+          'Multiple root nodes returned from render function. Render function ' +\n+          'should return a single root node.'\n+        )\n+      }\n       vnode = emptyVNode\n     }\n     // set parent"
            },
            {
                "commitId": "3a0557a317d6e8fd96bf543e7b71d39e4e7c257b",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -184,9 +184,8 @@ function resolveSlots (\n     const children = normalizeChildren(renderChildren)\n     const slots = {}\n     const defaultSlot = []\n-    let i = children.length\n     let name, child\n-    while (i--) {\n+    for (let i = 0, l = children.length; i < l; i++) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n         const slot = (slots[name] || (slots[name] = []))"
            },
            {
                "commitId": "cb915d012074e79b9f81a758ed0253ba4d98ebc4",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -4,7 +4,7 @@ import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import {\n-  warn, bind, remove, extend, isObject, toObject,\n+  warn, bind, remove, isObject, toObject,\n   nextTick, resolveAsset, renderString\n } from '../util/index'\n "
            },
            {
                "commitId": "8d229b2442e8cc5b2801fa55a4ea8ea766721381",
                "additions": 28,
                "deletions": 2,
                "patch": "@@ -1,9 +1,12 @@\n /* @flow */\n \n+import config from '../config'\n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n-import { resolveAsset, nextTick } from '../util/index'\n-import { bind, remove, extend, isObject, renderString } from 'shared/util'\n+import {\n+  warn, bind, remove, extend, isObject, toObject,\n+  nextTick, resolveAsset, renderString\n+} from '../util/index'\n \n import {\n   renderElement,\n@@ -138,6 +141,29 @@ export function renderMixin (Vue: Class<Component>) {\n       }\n     }\n   }\n+\n+  // apply v-bind object\n+  Vue.prototype._b = function (vnode: VNodeWithData, value: any) {\n+    if (value) {\n+      if (!isObject(value)) {\n+        process.env.NODE_ENV !== 'production' && warn(\n+          'v-bind without argument expects an Object or Array value',\n+          this\n+        )\n+      } else {\n+        if (Array.isArray(value)) {\n+          value = toObject(value)\n+        }\n+        const data = vnode.data\n+        for (const key in value) {\n+          const hash = config.mustUseProp(key)\n+            ? data.props || (data.props = {})\n+            : data.attrs || (data.attrs = {})\n+          hash[key] = value[key]\n+        }\n+      }\n+    }\n+  }\n }\n \n function renderStaticTrees (vm: Component) {"
            },
            {
                "commitId": "54e648e49f3ef6e671a23430047c5c40b75809a7",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -2,8 +2,8 @@\n \n import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n-import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n+import { bind, remove, extend, isObject, renderString } from 'shared/util'\n \n import {\n   renderElement,"
            },
            {
                "commitId": "0a15d9ee27a9314c0192c6174509a230279ed344",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import { emptyVNode } from '../vdom/vnode'\n+import VNode, { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n@@ -57,7 +57,11 @@ export function renderMixin (Vue: Class<Component>) {\n       resolveSlots(vm, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(vm._renderProxy) || emptyVNode\n+    let vnode = render.call(vm._renderProxy)\n+    // return empty vnode in case the render function errored out\n+    if (!(vnode instanceof VNode)) {\n+      vnode = emptyVNode\n+    }\n     // set parent\n     vnode.parent = _parentVnode\n     // restore render state"
            },
            {
                "commitId": "6fe268874ca2ea9297ca64830b38f8179d51fce2",
                "additions": 9,
                "deletions": 9,
                "patch": "@@ -30,7 +30,7 @@ export function initRender (vm: Component) {\n     children?: VNodeChildren,\n     namespace?: string\n   ) {\n-    return this.__r__(this.__s__(tag, data, namespace), children)\n+    return this._h(this._e(tag, data, namespace), children)\n   }, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n@@ -66,22 +66,22 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__r__ = renderElementWithChildren\n-  Vue.prototype.__s__ = renderElement\n-  Vue.prototype.__t__ = renderText\n-  Vue.prototype.__m__ = renderStatic\n+  Vue.prototype._h = renderElementWithChildren\n+  Vue.prototype._e = renderElement\n+  Vue.prototype._t = renderText\n+  Vue.prototype._m = renderStatic\n \n   // toString for mustaches\n-  Vue.prototype.__toString__ = renderString\n+  Vue.prototype._s = renderString\n \n   // filter resolution helper\n   const identity = _ => _\n-  Vue.prototype.__resolveFilter__ = function (id) {\n+  Vue.prototype._f = function (id) {\n     return resolveAsset(this.$options, 'filters', id, true) || identity\n   }\n \n   // render v-for\n-  Vue.prototype.__renderList__ = function (\n+  Vue.prototype._l = function (\n     val: any,\n     render: () => VNode\n   ): ?Array<VNode> {\n@@ -108,7 +108,7 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // register ref\n-  Vue.prototype.__registerRef__ = function (\n+  Vue.prototype._r = function (\n     key: string,\n     ref: Vue | Element,\n     vFor: boolean,"
            },
            {
                "commitId": "2dc5b1782871d87a7c795361eac0d49fd396c05f",
                "additions": 9,
                "deletions": 3,
                "patch": "@@ -1,11 +1,17 @@\n /* @flow */\n \n-import { renderElement, renderSelf, renderText, renderStatic } from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n \n+import {\n+  renderElement,\n+  renderElementWithChildren,\n+  renderText,\n+  renderStatic\n+} from '../vdom/create-element'\n+\n export const renderState: {\n   activeInstance: Component | null\n } = {\n@@ -60,8 +66,8 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__r__ = renderElement\n-  Vue.prototype.__s__ = renderSelf\n+  Vue.prototype.__r__ = renderElementWithChildren\n+  Vue.prototype.__s__ = renderElement\n   Vue.prototype.__t__ = renderText\n   Vue.prototype.__m__ = renderStatic\n "
            },
            {
                "commitId": "20fb79a1ea098bedda6fec8bebbb184ac51fce20",
                "additions": 13,
                "deletions": 3,
                "patch": "@@ -1,6 +1,6 @@\n /* @flow */\n \n-import createElement from '../vdom/create-element'\n+import { renderElement, renderSelf, renderText, renderStatic } from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { normalizeChildren } from '../vdom/helpers'\n import { bind, remove, isObject, renderString } from 'shared/util'\n@@ -18,7 +18,14 @@ export function initRender (vm: Component) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(createElement, vm)\n+  vm.$createElement = bind(function (\n+    tag?: string | Class<Component> | Function | Object,\n+    data?: VNodeData,\n+    children?: VNodeChildren,\n+    namespace?: string\n+  ) {\n+    return this.__r__(this.__s__(tag, data, namespace), children)\n+  }, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -53,7 +60,10 @@ export function renderMixin (Vue: Class<Component>) {\n   }\n \n   // shorthands used in render functions\n-  Vue.prototype.__h__ = createElement\n+  Vue.prototype.__r__ = renderElement\n+  Vue.prototype.__s__ = renderSelf\n+  Vue.prototype.__t__ = renderText\n+  Vue.prototype.__m__ = renderStatic\n \n   // toString for mustaches\n   Vue.prototype.__toString__ = renderString"
            },
            {
                "commitId": "ff16f7491f546c5acd40ee2290caa5d553eff3be",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -1,6 +1,5 @@\n /* @flow */\n \n-import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n export function createRenderFunction ("
            },
            {
                "commitId": "45d96c7dbc399696138c9d020e13f97cf94ce181",
                "additions": 17,
                "deletions": 3,
                "patch": "@@ -8,7 +8,12 @@ export function createRenderFunction (\n   directives: Object,\n   isUnaryTag: Function\n ) {\n-  function renderNode (node: VNode, write: Function, next: Function, isRoot: boolean) {\n+  function renderNode (\n+    node: VNode,\n+    write: Function,\n+    next: Function,\n+    isRoot: boolean\n+  ) {\n     if (node.componentOptions) {\n       const child = createComponentInstanceForVnode(node)\n       renderNode(child._render(), write, next, isRoot)\n@@ -21,7 +26,12 @@ export function createRenderFunction (\n     }\n   }\n \n-  function renderElement (el: VNode, write: Function, next: Function, isRoot: boolean) {\n+  function renderElement (\n+    el: VNode,\n+    write: Function,\n+    next: Function,\n+    isRoot: boolean\n+  ) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}\n@@ -81,7 +91,11 @@ export function createRenderFunction (\n     return markup + '>'\n   }\n \n-  return function render (component: Component, write: Function, done: Function) {\n+  return function render (\n+    component: Component,\n+    write: (text: string, next: Function) => void,\n+    done: Function\n+  ) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "1b7ab89a5deb49fbdaec8fb474108863714f99a7",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -1,6 +1,5 @@\n /* @flow */\n \n-import type Vue from 'core/instance/index'\n import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n@@ -82,7 +81,7 @@ export function createRenderFunction (\n     return markup + '>'\n   }\n \n-  return function render (component: Vue, write: Function, done: Function) {\n+  return function render (component: Component, write: Function, done: Function) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "a953bdeeb642fafb0a5426f54f68026d26fe345f",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,7 +5,7 @@ import type VNode from '../vdom/vnode'\n import createElement from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n-import { bind, remove, isArray, isObject, renderString } from 'shared/util'\n+import { bind, remove, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n \n export const renderState = {\n@@ -69,7 +69,7 @@ export function renderMixin (Vue: Class<Vue>) {\n     render: () => VNode\n   ): ?Array<VNode> {\n     let ret: ?Array<VNode>, i, l, keys, key\n-    if (isArray(val)) {\n+    if (Array.isArray(val)) {\n       ret = new Array(val.length)\n       for (i = 0, l = val.length; i < l; i++) {\n         ret[i] = render(val[i], i, i)"
            },
            {
                "commitId": "354ea616b5ec4826e23a88465e404fd3b382d9f4",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -1,5 +1,7 @@\n /* @flow */\n \n+import type Vue from 'core/instance/index'\n+import type VNode from 'core/vdom/vnode'\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n export function createRenderFunction ("
            },
            {
                "commitId": "6d712753d8982d587d1dcfdbce2833f19f0b5a26",
                "additions": 17,
                "deletions": 10,
                "patch": "@@ -1,7 +1,13 @@\n+/* @flow */\n+\n import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n \n-export function createRenderFunction (modules, directives, isUnaryTag) {\n-  function renderNode (node, write, next, isRoot) {\n+export function createRenderFunction (\n+  modules: Array<Function>,\n+  directives: Object,\n+  isUnaryTag: Function\n+) {\n+  function renderNode (node: VNode, write: Function, next: Function, isRoot: boolean) {\n     if (node.componentOptions) {\n       const child = createComponentInstanceForVnode(node)\n       renderNode(child._render(), write, next, isRoot)\n@@ -14,7 +20,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  function renderElement (el, write, next, isRoot) {\n+  function renderElement (el: VNode, write: Function, next: Function, isRoot: boolean) {\n     if (isRoot) {\n       if (!el.data) el.data = {}\n       if (!el.data.attrs) el.data.attrs = {}\n@@ -27,27 +33,28 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     } else if (!el.children || !el.children.length) {\n       write(startTag + endTag, next)\n     } else {\n+      const children: Array<VNode> = el.children || []\n       write(startTag, () => {\n-        const total = el.children.length\n+        const total = children.length\n         let rendered = 0\n \n-        function renderChild (child) {\n+        function renderChild (child: VNode) {\n           renderNode(child, write, () => {\n             rendered++\n             if (rendered < total) {\n-              renderChild(el.children[rendered])\n+              renderChild(children[rendered])\n             } else {\n               write(endTag, next)\n             }\n-          })\n+          }, false)\n         }\n \n-        renderChild(el.children[0])\n+        renderChild(children[0])\n       })\n     }\n   }\n \n-  function renderStartingTag (node) {\n+  function renderStartingTag (node: VNode) {\n     let markup = `<${node.tag}`\n     if (node.data) {\n       // check directives\n@@ -73,7 +80,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     return markup + '>'\n   }\n \n-  return function render (component, write, done) {\n+  return function render (component: Vue, write: Function, done: Function) {\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "76d06ba422e32303f906941fe0d4f19e51b30720",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -1,3 +1,4 @@\n+import config from '../config'\n import createElement from '../vdom/create-element'\n import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n@@ -25,6 +26,12 @@ export function renderMixin (Vue) {\n     nextTick(fn, this)\n   }\n \n+  Object.defineProperty(Vue.prototype, '$isServer', {\n+    get () {\n+      return config._isServer\n+    }\n+  })\n+\n   Vue.prototype._render = function () {\n     if (!this._mounted) {\n       // render static sub-trees for once on initial render"
            },
            {
                "commitId": "6593be9f75ea229e71e5b0530bb0f27aeee57afc",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -1,4 +1,5 @@\n import createElement from '../vdom/create-element'\n+import { emptyVNode } from '../vdom/vnode'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n import { resolveAsset, nextTick } from '../util/index'\n@@ -38,7 +39,7 @@ export function renderMixin (Vue) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(this._renderProxy)\n+    const vnode = render.call(this._renderProxy) || emptyVNode\n     // set parent\n     vnode.parent = _parentVnode\n     // restore render state"
            },
            {
                "commitId": "8172e7e25728a696df32df063443cf3d7cc8029b",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -74,7 +74,6 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n   }\n \n   return function render (component, write, done) {\n-    component._renderStaticTrees()\n     renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "8f5a32b91cca7901c47f27d983649d00eef35609",
                "additions": 4,
                "deletions": 19,
                "patch": "@@ -1,25 +1,10 @@\n+import { createComponentInstanceForVnode } from 'core/vdom/create-component'\n+\n export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n-      const options = {\n-        parent,\n-        propsData,\n-        _parentVnode: node,\n-        _parentListeners: listeners,\n-        _renderChildren: children\n-      }\n-      // check inline-template render functions\n-      const inlineTemplate = node.data.inlineTemplate\n-      if (inlineTemplate) {\n-        options.render = inlineTemplate.render\n-        options.staticRenderFns = inlineTemplate.staticRenderFns\n-      }\n-      const child = new Ctor(options)\n-      child._renderStaticTrees()\n-      const childRoot = child._render()\n-      childRoot.parent = node\n-      renderNode(childRoot, write, next, isRoot)\n+      const child = createComponentInstanceForVnode(node)\n+      renderNode(child._render(), write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)"
            },
            {
                "commitId": "2b7c26d108b31e0cf91f4931fe5b19e77f75bb7e",
                "additions": 31,
                "deletions": 8,
                "patch": "@@ -1,5 +1,3 @@\n-import { renderStartingTag } from './render-starting-tag'\n-\n export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n@@ -18,11 +16,10 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n         options.staticRenderFns = inlineTemplate.staticRenderFns\n       }\n       const child = new Ctor(options)\n-      child._mount = () => {\n-        child._renderStaticTrees()\n-        renderNode(child._render(), write, next)\n-      }\n-      child.$mount(node.elm)\n+      child._renderStaticTrees()\n+      const childRoot = child._render()\n+      childRoot.parent = node\n+      renderNode(childRoot, write, next, isRoot)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -38,7 +35,7 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n       if (!el.data.attrs) el.data.attrs = {}\n       el.data.attrs['server-rendered'] = 'true'\n     }\n-    const startTag = renderStartingTag(el, modules, directives)\n+    const startTag = renderStartingTag(el)\n     const endTag = `</${el.tag}>`\n     if (isUnaryTag(el.tag)) {\n       write(startTag, next)\n@@ -65,6 +62,32 @@ export function createRenderFunction (modules, directives, isUnaryTag) {\n     }\n   }\n \n+  function renderStartingTag (node) {\n+    let markup = `<${node.tag}`\n+    if (node.data) {\n+      // check directives\n+      const dirs = node.data.directives\n+      if (dirs) {\n+        for (let i = 0; i < dirs.length; i++) {\n+          const dirRenderer = directives[dirs[i].name]\n+          if (dirRenderer) {\n+            // directives mutate the node's data\n+            // which then gets rendered by modules\n+            dirRenderer(node, dirs[i])\n+          }\n+        }\n+      }\n+      // apply other modules\n+      for (let i = 0; i < modules.length; i++) {\n+        const res = modules[i](node)\n+        if (res) {\n+          markup += res\n+        }\n+      }\n+    }\n+    return markup + '>'\n+  }\n+\n   return function render (component, write, done) {\n     component._renderStaticTrees()\n     renderNode(component._render(), write, done, true)"
            },
            {
                "commitId": "430fe64bb5907cefc21b8f670f86f268f68e5ad8",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,6 +1,6 @@\n import { renderStartingTag } from './render-starting-tag'\n \n-export function render (modules, directives, isUnaryTag) {\n+export function createRenderFunction (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n       const { Ctor, propsData, listeners, parent, children } = node.componentOptions"
            },
            {
                "commitId": "270b0ac021ee5bfff6b2ed1eacaf91a09f2a9d5e",
                "additions": 24,
                "deletions": 13,
                "patch": "@@ -1,16 +1,28 @@\n-import RenderStream from './render-stream'\n import { renderStartingTag } from './render-starting-tag'\n \n-export function createStreamingRenderer (modules, directives, isUnaryTag) {\n-  function renderComponent (component, write, next, isRoot) {\n-    component.$mount()\n-    renderNode(component._vnode, write, next, isRoot)\n-  }\n-\n+export function render (modules, directives, isUnaryTag) {\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      node.data.hook.init(node)\n-      renderComponent(node.child, write, next, isRoot)\n+      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n+      const options = {\n+        parent,\n+        propsData,\n+        _parentVnode: node,\n+        _parentListeners: listeners,\n+        _renderChildren: children\n+      }\n+      // check inline-template render functions\n+      const inlineTemplate = node.data.inlineTemplate\n+      if (inlineTemplate) {\n+        options.render = inlineTemplate.render\n+        options.staticRenderFns = inlineTemplate.staticRenderFns\n+      }\n+      const child = new Ctor(options)\n+      child._mount = () => {\n+        child._renderStaticTrees()\n+        renderNode(child._render(), write, next)\n+      }\n+      child.$mount(node.elm)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -53,9 +65,8 @@ export function createStreamingRenderer (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  return function renderToStream (component) {\n-    return new RenderStream((write, done) => {\n-      renderComponent(component, write, done, true)\n-    })\n+  return function render (component, write, done) {\n+    component._renderStaticTrees()\n+    renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "96f02660a2f72cf2b2f4087f51a24942f55af7dd",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,7 +1,7 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n-import { resolveAsset } from '../util/options'\n+import { resolveAsset, nextTick } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -21,6 +21,10 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  Vue.prototype.$nextTick = function (fn) {\n+    nextTick(fn, this)\n+  }\n+\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this"
            },
            {
                "commitId": "d89c674cb53128f21bac25962760fff8bd5917b5",
                "additions": 22,
                "deletions": 8,
                "patch": "@@ -1,15 +1,28 @@\n import { renderStartingTag } from './render-starting-tag'\n \n export function render (modules, directives, isUnaryTag) {\n-  function renderComponent (component, write, next, isRoot) {\n-    component.$mount()\n-    renderNode(component._vnode, write, next, isRoot)\n-  }\n-\n   function renderNode (node, write, next, isRoot) {\n     if (node.componentOptions) {\n-      node.data.hook.init(node)\n-      renderComponent(node.child, write, next, isRoot)\n+      const { Ctor, propsData, listeners, parent, children } = node.componentOptions\n+      const options = {\n+        parent,\n+        propsData,\n+        _parentVnode: node,\n+        _parentListeners: listeners,\n+        _renderChildren: children\n+      }\n+      // check inline-template render functions\n+      const inlineTemplate = node.data.inlineTemplate\n+      if (inlineTemplate) {\n+        options.render = inlineTemplate.render\n+        options.staticRenderFns = inlineTemplate.staticRenderFns\n+      }\n+      const child = new Ctor(options)\n+      child._mount = () => {\n+        child._renderStaticTrees()\n+        renderNode(child._render(), write, next)\n+      }\n+      child.$mount(node.elm)\n     } else {\n       if (node.tag) {\n         renderElement(node, write, next, isRoot)\n@@ -53,6 +66,7 @@ export function render (modules, directives, isUnaryTag) {\n   }\n \n   return function render (component, write, done) {\n-    renderComponent(component, write, done, true)\n+    component._renderStaticTrees()\n+    renderNode(component._render(), write, done, true)\n   }\n }"
            },
            {
                "commitId": "a233e4dbfae51173aefc4a1329aa0415d632ca25",
                "additions": 3,
                "deletions": 6,
                "patch": "@@ -1,7 +1,6 @@\n-import RenderStream from './render-stream'\n import { renderStartingTag } from './render-starting-tag'\n \n-export function createStreamingRenderer (modules, directives, isUnaryTag) {\n+export function render (modules, directives, isUnaryTag) {\n   function renderComponent (component, write, next, isRoot) {\n     component.$mount()\n     renderNode(component._vnode, write, next, isRoot)\n@@ -53,9 +52,7 @@ export function createStreamingRenderer (modules, directives, isUnaryTag) {\n     }\n   }\n \n-  return function renderToStream (component) {\n-    return new RenderStream((write, done) => {\n-      renderComponent(component, write, done, true)\n-    })\n+  return function render (component, write, done) {\n+    renderComponent(component, write, done, true)\n   }\n }"
            },
            {
                "commitId": "9cc9393e73750943b9a254f80a02110144ee0288",
                "additions": 10,
                "deletions": 2,
                "patch": "@@ -99,7 +99,8 @@ export function renderMixin (Vue) {\n function resolveSlots (vm, renderChildren) {\n   if (renderChildren) {\n     const children = flatten(renderChildren())\n-    const slots = { default: children }\n+    const slots = {}\n+    const defaultSlot = []\n     let i = children.length\n     let name, child\n     while (i--) {\n@@ -111,9 +112,16 @@ function resolveSlots (vm, renderChildren) {\n         } else {\n           slot.push(child)\n         }\n-        children.splice(i, 1)\n+      } else {\n+        defaultSlot.push(child)\n       }\n     }\n+    if (defaultSlot.length && !(\n+      defaultSlot.length === 1 &&\n+      defaultSlot[0].text === ' '\n+    )) {\n+      slots['default'] = defaultSlot\n+    }\n     vm.$slots = slots\n   }\n }"
            },
            {
                "commitId": "3aa7503472d1a2fbfd789a7df309102de49f8fcf",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -105,7 +105,7 @@ function resolveSlots (vm, renderChildren) {\n     while (i--) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n-        let slot = (slots[name] || (slots[name] = []))\n+        const slot = (slots[name] || (slots[name] = []))\n         if (child.tag === 'template') {\n           slot.push.apply(slot, child.children)\n         } else {"
            },
            {
                "commitId": "9ff87a357eba00e40d44a2d5a25f6ac44fca70b9",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -1,6 +1,7 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n import { bind, isArray, isObject, renderString } from 'shared/util'\n+import { resolveAsset } from '../util/options'\n \n export const renderState = {\n   activeInstance: null\n@@ -42,6 +43,12 @@ export function renderMixin (Vue) {\n   // toString for mustaches\n   Vue.prototype.__toString__ = renderString\n \n+  // filter resolution helper\n+  const identity = _ => _\n+  Vue.prototype.__resolveFilter__ = function (id) {\n+    return resolveAsset(this.$options, 'filters', id, true) || identity\n+  }\n+\n   // render v-for\n   Vue.prototype.__renderList__ = function (val, render) {\n     let ret, i, l, keys, key"
            },
            {
                "commitId": "6d889c011680f231ed5036b9233f23764c43e16a",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -89,9 +89,9 @@ export function renderMixin (Vue) {\n   }\n }\n \n-function resolveSlots (vm, children) {\n-  if (children) {\n-    children = flatten(isArray(children) ? children : children())\n+function resolveSlots (vm, renderChildren) {\n+  if (renderChildren) {\n+    const children = flatten(renderChildren())\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "a347820518388ae8c83cf8c665823daebfbd0da8",
                "additions": 2,
                "deletions": 8,
                "patch": "@@ -1,6 +1,6 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n-import { bind, isArray, isObject } from '../util/index'\n+import { bind, isArray, isObject, renderString } from 'shared/util'\n \n export const renderState = {\n   activeInstance: null\n@@ -40,13 +40,7 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = createElement\n \n   // toString for mustaches\n-  Vue.prototype.__toString__ = function (val) {\n-    return val == null\n-      ? ''\n-      : typeof val === 'object'\n-        ? JSON.stringify(val, null, 2)\n-        : val\n-  }\n+  Vue.prototype.__toString__ = renderString\n \n   // render v-for\n   Vue.prototype.__renderList__ = function (val, render) {"
            },
            {
                "commitId": "f4a2afb3b33991c1694e8fcb7d62641c30eeaf53",
                "additions": 1,
                "deletions": 18,
                "patch": "@@ -1,6 +1,6 @@\n import createElement from '../vdom/create-element'\n import { flatten } from '../vdom/helpers'\n-import { bind, resolveAsset, isArray, isObject } from '../util/index'\n+import { bind, isArray, isObject } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -39,23 +39,6 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n-  Vue.prototype.__static__ = function (id) {\n-    return this._staticTrees[id]\n-  }\n-\n-  // resolve directive\n-  Vue.prototype.__resolveDirective__ = function (id) {\n-    return resolveAsset(this.$options, 'directives', id, true)\n-  }\n-\n-  // resolve transition\n-  Vue.prototype.__resolveTransition__ = function (id, appear) {\n-    const definition = id && typeof id === 'string'\n-      ? resolveAsset(this.$options, 'transitions', id) || id\n-      : id\n-    return { definition, appear, context: this }\n-  }\n-\n   // toString for mustaches\n   Vue.prototype.__toString__ = function (val) {\n     return val == null"
            },
            {
                "commitId": "d6ce314c35bcc2a05d30ed14f18b21b5b81d928d",
                "additions": 0,
                "deletions": 7,
                "patch": "@@ -1,7 +0,0 @@\n-import attrs from './modules/attrs'\n-import style from './modules/style'\n-import klass from './modules/class'\n-\n-export function render () {\n-\n-}"
            },
            {
                "commitId": "1a21db9c9aef437122de86cb2dbc30c1feff8166",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -0,0 +1,7 @@\n+import attrs from './modules/attrs'\n+import style from './modules/style'\n+import klass from './modules/class'\n+\n+export function render () {\n+\n+}"
            },
            {
                "commitId": "955e2f839175fadbd0218f7b78c48ebbbcca6349",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "b882844f6ed8fb9e7d0ba493fcdd10a95d17b497",
                "additions": 5,
                "deletions": 0,
                "patch": "@@ -9,6 +9,7 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n+  vm._staticTrees = null\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n@@ -38,6 +39,10 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n+  Vue.prototype.__static__ = function (id) {\n+    return this._staticTrees[id]\n+  }\n+\n   // resolve directive\n   Vue.prototype.__resolveDirective__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)"
            },
            {
                "commitId": "6c8182ee4d3e60ee46d6fece9a21c7f59ae0e61c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -89,7 +89,7 @@ export function renderMixin (Vue) {\n     const refs = this.$refs\n     if (remove) {\n       if (vFor) {\n-        refs[key].$remove(ref)\n+        remove(refs[key], ref)\n       } else {\n         refs[key] = undefined\n       }"
            },
            {
                "commitId": "732c10a7e9559d26b0a54681d2bd90ddad63da52",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -44,10 +44,11 @@ export function renderMixin (Vue) {\n   }\n \n   // resolve transition\n-  Vue.prototype.__resolveTransition__ = function (id) {\n-    return id && typeof id === 'string'\n+  Vue.prototype.__resolveTransition__ = function (id, appear) {\n+    const definition = id && typeof id === 'string'\n       ? resolveAsset(this.$options, 'transitions', id) || id\n       : id\n+    return { definition, appear, context: this }\n   }\n \n   // toString for mustaches"
            },
            {
                "commitId": "7f7040c156951b392fb6ef75d15be65fd83007a0",
                "additions": 18,
                "deletions": 48,
                "patch": "@@ -1,13 +1,6 @@\n-import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten, updateListeners } from '../vdom/helpers'\n-import {\n-  bind,\n-  resolveAsset,\n-  isArray,\n-  isObject,\n-  validateProp\n-} from '../util/index'\n+import { flatten } from '../vdom/helpers'\n+import { bind, resolveAsset, isArray, isObject } from '../util/index'\n \n export const renderState = {\n   activeInstance: null\n@@ -26,6 +19,22 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  Vue.prototype._render = function () {\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const { render, _renderChildren } = this.$options\n+    // resolve slots. becaues slots are rendered in parent scope,\n+    // we set the activeInstance to parent.\n+    if (_renderChildren) {\n+      resolveSlots(this, _renderChildren)\n+    }\n+    // render self\n+    const vnode = render.call(this._renderProxy)\n+    // restore render state\n+    renderState.activeInstance = prev\n+    return vnode\n+  }\n+\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n@@ -95,45 +104,6 @@ export function renderMixin (Vue) {\n       }\n     }\n   }\n-\n-  Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, children) {\n-    this.$options._parentVnode = parentVnode\n-    this.$options._renderChildren = children\n-    // update props\n-    if (propsData && this.$options.props) {\n-      observerState.shouldConvert = false\n-      const propKeys = this.$options.propKeys\n-      for (let i = 0; i < propKeys.length; i++) {\n-        let key = propKeys[i]\n-        this[key] = validateProp(this, key, propsData)\n-      }\n-      observerState.shouldConvert = true\n-    }\n-    // update listeners\n-    if (listeners) {\n-      const oldListeners = this.$options._parentListeners\n-      this.$options._parentListeners = listeners\n-      updateListeners(listeners, oldListeners || {}, (event, handler) => {\n-        this.$on(event, handler)\n-      })\n-    }\n-  }\n-\n-  Vue.prototype._render = function () {\n-    const prev = renderState.activeInstance\n-    renderState.activeInstance = this\n-    const { render, _renderChildren } = this.$options\n-    // resolve slots. becaues slots are rendered in parent scope,\n-    // we set the activeInstance to parent.\n-    if (_renderChildren) {\n-      resolveSlots(this, _renderChildren)\n-    }\n-    // render self\n-    const vnode = render.call(this._renderProxy)\n-    // restore render state\n-    renderState.activeInstance = prev\n-    return vnode\n-  }\n }\n \n function resolveSlots (vm, children) {"
            },
            {
                "commitId": "23c253012f8f58848c33445f4f8ea045453029bf",
                "additions": 10,
                "deletions": 2,
                "patch": "@@ -1,6 +1,6 @@\n import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten } from '../vdom/helpers'\n+import { flatten, updateListeners } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n@@ -96,7 +96,7 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._updateFromParent = function (propsData, parentVnode, children) {\n+  Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, children) {\n     this.$options._parentVnode = parentVnode\n     this.$options._renderChildren = children\n     // update props\n@@ -109,6 +109,14 @@ export function renderMixin (Vue) {\n       }\n       observerState.shouldConvert = true\n     }\n+    // update listeners\n+    if (listeners) {\n+      const oldListeners = this.$options._parentListeners\n+      this.$options._parentListeners = listeners\n+      updateListeners(listeners, oldListeners || {}, (event, handler) => {\n+        this.$on(event, handler)\n+      })\n+    }\n   }\n \n   Vue.prototype._render = function () {"
            },
            {
                "commitId": "1b9343f7e0d3930d85419b97a03998583297c083",
                "additions": 13,
                "deletions": 133,
                "patch": "@@ -1,12 +1,12 @@\n import { observerState } from '../observer/index'\n import createElement from '../vdom/create-element'\n-import { flatten, updateListeners } from '../vdom/helpers'\n+import { flatten } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n   isArray,\n   isObject,\n-  getPropValue\n+  validateProp\n } from '../util/index'\n \n export const renderState = {\n@@ -96,40 +96,32 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._updateFromParent = function (parentData, children, key) {\n-    const oldParentData = this.$options._renderData\n-    this.$options._renderData = parentData\n+  Vue.prototype._updateFromParent = function (propsData, parentVnode, children) {\n+    this.$options._parentVnode = parentVnode\n     this.$options._renderChildren = children\n-    // update props and listeners\n-    if (parentData) {\n-      updateEvents(this, parentData, oldParentData)\n-      // if any prop has changed it would trigger and queue an update,\n-      // but if no props changed, nothing happens\n-      const propsChanged = updateProps(this, parentData)\n-      // diff parent data (attrs on the placeholder) and queue update\n-      // if anything changed. only do this if props didn't change, because\n-      // if props changed then an update has already been queued.\n-      if (!propsChanged && parentDataChanged(parentData, oldParentData)) {\n-        this.$forceUpdate()\n+    // update props\n+    if (propsData && this.$options.props) {\n+      observerState.shouldConvert = false\n+      const propKeys = this.$options.propKeys\n+      for (let i = 0; i < propKeys.length; i++) {\n+        let key = propKeys[i]\n+        this[key] = validateProp(this, key, propsData)\n       }\n+      observerState.shouldConvert = true\n     }\n   }\n \n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const { render, _renderData, _renderChildren } = this.$options\n+    const { render, _renderChildren } = this.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n     const vnode = render.call(this._renderProxy)\n-    // update parent data\n-    if (_renderData) {\n-      mergeParentData(this, vnode.data, _renderData)\n-    }\n     // restore render state\n     renderState.activeInstance = prev\n     return vnode\n@@ -157,115 +149,3 @@ function resolveSlots (vm, children) {\n     vm.$slots = slots\n   }\n }\n-\n-const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives', 'transition']\n-function parentDataChanged (data, oldData) {\n-  let key, old, cur, i, l, j, k\n-  for (i = 0, l = keysToDiff.length; i < l; i++) {\n-    key = keysToDiff[i]\n-    cur = data[key]\n-    old = oldData[key]\n-    if (!old) {\n-      if (!cur) {\n-        continue\n-      } else {\n-        return true\n-      }\n-    }\n-    if (isArray(old)) {\n-      if (!isArray(cur)) return true\n-      if (cur.length !== old.length) return true\n-      for (j = 0, k = old.length; j < k; j++) {\n-        if (isObject(old[i])) {\n-          if (!isObject(cur[i])) return true\n-          if (diffObject(cur, old)) return true\n-        } else if (old[i] !== cur[i]) {\n-          return true\n-        }\n-      }\n-    } else if (diffObject(cur, old)) {\n-      return true\n-    }\n-  }\n-  return false\n-}\n-\n-function diffObject (cur, old) {\n-  for (let key in old) {\n-    if (cur[key] !== old[key]) return true\n-  }\n-}\n-\n-function mergeParentData (vm, data, parentData) {\n-  const props = vm.$options.props\n-  if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = {})\n-    for (let key in parentData.attrs) {\n-      if (!props || !props[key]) {\n-        attrs[key] = parentData.attrs[key]\n-      }\n-    }\n-  }\n-  if (parentData.props) {\n-    const props = data.props || (data.props = {})\n-    for (let key in parentData.props) {\n-      if (!props || !props[key]) {\n-        props[key] = parentData.props[key]\n-      }\n-    }\n-  }\n-  if (parentData.staticClass) {\n-    data.staticClass = data.staticClass\n-      ? data.staticClass + ' ' + parentData.staticClass\n-      : parentData.staticClass\n-  }\n-  if (parentData.class) {\n-    if (!data.class) {\n-      data.class = parentData.class\n-    } else {\n-      data.class = (isArray(data.class) ? data.class : []).concat(parentData.class)\n-    }\n-  }\n-  if (parentData.style) {\n-    if (!data.style) {\n-      data.style = parentData.style\n-    } else {\n-      data.style = (isArray(data.style) ? data.style : []).concat(parentData.style)\n-    }\n-  }\n-  if (parentData.directives) {\n-    data.directives = parentData.directives.concat(data.directives || [])\n-  }\n-  if (parentData.transition != null) {\n-    data.transition = parentData.transition\n-  }\n-}\n-\n-function updateProps (vm, data) {\n-  let changed = false\n-  if (data.attrs || data.props) {\n-    let keys = vm.$options.propKeys\n-    if (keys) {\n-      observerState.shouldConvert = false\n-      for (let i = 0; i < keys.length; i++) {\n-        let key = keys[i]\n-        let oldVal = vm[key]\n-        let newVal = getPropValue(data, key, vm)\n-        if (oldVal !== newVal) {\n-          vm[key] = newVal\n-          changed = true\n-        }\n-      }\n-      observerState.shouldConvert = true\n-    }\n-  }\n-  return changed\n-}\n-\n-function updateEvents (vm, data, oldData) {\n-  if (data.on) {\n-    updateListeners(data.on, oldData.on || {}, (event, handler) => {\n-      vm.$on(event, handler)\n-    })\n-  }\n-}"
            },
            {
                "commitId": "7b97d97e2fff49c84fc5048eda9d5ab8daf0ec7f",
                "additions": 4,
                "deletions": 1,
                "patch": "@@ -158,7 +158,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives']\n+const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives', 'transition']\n function parentDataChanged (data, oldData) {\n   let key, old, cur, i, l, j, k\n   for (i = 0, l = keysToDiff.length; i < l; i++) {\n@@ -236,6 +236,9 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.concat(data.directives || [])\n   }\n+  if (parentData.transition != null) {\n+    data.transition = parentData.transition\n+  }\n }\n \n function updateProps (vm, data) {"
            },
            {
                "commitId": "52ac04d2355a91957388a4bee336fa044d9ad57c",
                "additions": 7,
                "deletions": 0,
                "patch": "@@ -34,6 +34,13 @@ export function renderMixin (Vue) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  // resolve transition\n+  Vue.prototype.__resolveTransition__ = function (id) {\n+    return id && typeof id === 'string'\n+      ? resolveAsset(this.$options, 'transitions', id) || id\n+      : id\n+  }\n+\n   // toString for mustaches\n   Vue.prototype.__toString__ = function (val) {\n     return val == null"
            },
            {
                "commitId": "4512406f775a6c258fa13400358d25d8a37892c7",
                "additions": 3,
                "deletions": 27,
                "patch": "@@ -1,11 +1,6 @@\n-import { callHook } from './lifecycle'\n import { observerState } from '../observer/index'\n-import {\n-  createElement,\n-  patch,\n-  updateListeners,\n-  flatten\n-} from '../vdom/index'\n+import createElement from '../vdom/create-element'\n+import { flatten, updateListeners } from '../vdom/helpers'\n import {\n   bind,\n   resolveAsset,\n@@ -24,7 +19,7 @@ export function initRender (vm) {\n   vm.$slots = {}\n   // bind the public createElement fn to this instance\n   // so that we get proper render context inside it.\n-  vm.$createElement = bind(vm.__h__, vm)\n+  vm.$createElement = bind(createElement, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -94,21 +89,6 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._update = function (vnode) {\n-    if (this._mounted) {\n-      callHook(this, 'beforeUpdate')\n-    }\n-    if (!this._vnode) {\n-      this.$el = patch(this.$el, vnode)\n-    } else {\n-      this.$el = patch(this._vnode, vnode)\n-    }\n-    this._vnode = vnode\n-    if (this._mounted) {\n-      callHook(this, 'updated')\n-    }\n-  }\n-\n   Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n     this.$options._renderData = parentData\n@@ -147,10 +127,6 @@ export function renderMixin (Vue) {\n     renderState.activeInstance = prev\n     return vnode\n   }\n-\n-  Vue.prototype.$forceUpdate = function () {\n-    this._watcher.update()\n-  }\n }\n \n function resolveSlots (vm, children) {"
            },
            {
                "commitId": "a1ebdbbb7a34f842d090e208863be7168eaa9803",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -138,7 +138,7 @@ export function renderMixin (Vue) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n-    const vnode = render.call(this)\n+    const vnode = render.call(this._renderProxy)\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)"
            },
            {
                "commitId": "c13bbcb32794fbb443a4f86d3b0526951ca3f7ba",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -251,7 +251,7 @@ function mergeParentData (vm, data, parentData) {\n     }\n   }\n   if (parentData.directives) {\n-    data.directives = parentData.directives.conact(data.directives || [])\n+    data.directives = parentData.directives.concat(data.directives || [])\n   }\n }\n "
            },
            {
                "commitId": "86bc00e0e57076a1a7a6d64ddb3f97d1a455be46",
                "additions": 1,
                "deletions": 2,
                "patch": "@@ -8,7 +8,6 @@ import {\n } from '../vdom/index'\n import {\n   bind,\n-  extend,\n   resolveAsset,\n   isArray,\n   isObject,\n@@ -248,7 +247,7 @@ function mergeParentData (vm, data, parentData) {\n     if (!data.style) {\n       data.style = parentData.style\n     } else {\n-      extend(data.style, parentData.style)\n+      data.style = (isArray(data.style) ? data.style : []).concat(parentData.style)\n     }\n   }\n   if (parentData.directives) {"
            },
            {
                "commitId": "24ef7f489a0f2452266974b1f01648e504e7bc96",
                "additions": 1,
                "deletions": 4,
                "patch": "@@ -209,10 +209,7 @@ function parentDataChanged (data, oldData) {\n }\n \n function diffObject (cur, old) {\n-  const keys = Object.keys(old)\n-  let i, l, key\n-  for (i = 0, l = keys.length; i < l; i++) {\n-    key = keys[i]\n+  for (let key in old) {\n     if (cur[key] !== old[key]) return true\n   }\n }"
            },
            {
                "commitId": "368b2ff03a61fa4879ea4c69ba4b9fa71387d298",
                "additions": 27,
                "deletions": 3,
                "patch": "@@ -36,21 +36,45 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = createElement\n \n   // resolve directive\n-  Vue.prototype.__d__ = function (id) {\n+  Vue.prototype.__resolveDirective__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n   // toString for mustaches\n-  Vue.prototype.__s__ = function (val) {\n+  Vue.prototype.__toString__ = function (val) {\n     return val == null\n       ? ''\n       : typeof val === 'object'\n         ? JSON.stringify(val, null, 2)\n         : val\n   }\n \n+  // render v-for\n+  Vue.prototype.__renderList__ = function (val, render) {\n+    let ret, i, l, keys, key\n+    if (isArray(val)) {\n+      ret = new Array(val.length)\n+      for (i = 0, l = val.length; i < l; i++) {\n+        ret[i] = render(val[i], i, i)\n+      }\n+    } else if (typeof val === 'number') {\n+      ret = new Array(val)\n+      for (i = 0; i < val; i++) {\n+        ret[i] = render(i + 1, i, i)\n+      }\n+    } else if (isObject(val)) {\n+      keys = Object.keys(val)\n+      ret = new Array(keys.length)\n+      for (i = 0, l = keys.length; i < l; i++) {\n+        key = keys[i]\n+        ret[i] = render(val[key], i, key)\n+      }\n+    }\n+    return ret\n+  }\n+\n   // register ref\n-  Vue.prototype.__r__ = function (key, ref, vFor, remove) {\n+  Vue.prototype.__registerRef__ = function (key, ref, vFor, remove) {\n     const refs = this.$refs\n     if (remove) {\n       if (vFor) {"
            },
            {
                "commitId": "d6bef7957541e38cec3051eb4d8c54bda3280eaf",
                "additions": 5,
                "deletions": 2,
                "patch": "@@ -1,4 +1,5 @@\n import { callHook } from './lifecycle'\n+import { observerState } from '../observer/index'\n import {\n   createElement,\n   patch,\n@@ -197,15 +198,15 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.attrs) {\n     const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n-      if (!props[key]) {\n+      if (!props || !props[key]) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n     const props = data.props || (data.props = {})\n     for (let key in parentData.props) {\n-      if (!props[key]) {\n+      if (!props || !props[key]) {\n         props[key] = parentData.props[key]\n       }\n     }\n@@ -239,6 +240,7 @@ function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n     let keys = vm.$options.propKeys\n     if (keys) {\n+      observerState.shouldConvert = false\n       for (let i = 0; i < keys.length; i++) {\n         let key = keys[i]\n         let oldVal = vm[key]\n@@ -248,6 +250,7 @@ function updateProps (vm, data) {\n           changed = true\n         }\n       }\n+      observerState.shouldConvert = true\n     }\n   }\n   return changed"
            },
            {
                "commitId": "7b2dc500b7a06381716639acea21d0fcf3b8b732",
                "additions": 22,
                "deletions": 0,
                "patch": "@@ -48,6 +48,28 @@ export function renderMixin (Vue) {\n         : val\n   }\n \n+  // register ref\n+  Vue.prototype.__r__ = function (key, ref, vFor, remove) {\n+    const refs = this.$refs\n+    if (remove) {\n+      if (vFor) {\n+        refs[key].$remove(ref)\n+      } else {\n+        refs[key] = undefined\n+      }\n+    } else {\n+      if (vFor) {\n+        if (refs[key]) {\n+          refs[key].push(ref)\n+        } else {\n+          refs[key] = [ref]\n+        }\n+      } else {\n+        refs[key] = ref\n+      }\n+    }\n+  }\n+\n   Vue.prototype._update = function (vnode) {\n     if (this._mounted) {\n       callHook(this, 'beforeUpdate')"
            },
            {
                "commitId": "c2ad444982541faa8b7e0a652e68d4d0f6ef4bc6",
                "additions": 6,
                "deletions": 18,
                "patch": "@@ -6,6 +6,7 @@ import {\n   flatten\n } from '../vdom/index'\n import {\n+  bind,\n   extend,\n   resolveAsset,\n   isArray,\n@@ -14,14 +15,16 @@ import {\n } from '../util/index'\n \n export const renderState = {\n-  activeInstance: null,\n-  context: null\n+  activeInstance: null\n }\n \n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm.$slots = {}\n+  // bind the public createElement fn to this instance\n+  // so that we get proper render context inside it.\n+  vm.$createElement = bind(vm.__h__, vm)\n   if (vm.$options.el) {\n     vm.$mount(vm.$options.el)\n   }\n@@ -79,21 +82,6 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  /**\n-   * Call a render function with this instance as the context.\n-   * This is used to wrap all children thunks in codegen.\n-   */\n-\n-  Vue.prototype._renderWithContext = function (fn) {\n-    return () => {\n-      const prev = renderState.context\n-      renderState.context = this\n-      const children = flatten(fn())\n-      renderState.context = prev\n-      return children\n-    }\n-  }\n-\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n@@ -121,7 +109,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children()\n+    children = flatten(isArray(children) ? children : children())\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "78e82bb8e454fcac088f4b40ec66e424c84dab89",
                "additions": 14,
                "deletions": 3,
                "patch": "@@ -1,6 +1,17 @@\n-import { extend, resolveAsset, isArray, isObject, getPropValue } from '../util/index'\n-import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n+import {\n+  createElement,\n+  patch,\n+  updateListeners,\n+  flatten\n+} from '../vdom/index'\n+import {\n+  extend,\n+  resolveAsset,\n+  isArray,\n+  isObject,\n+  getPropValue\n+} from '../util/index'\n \n export const renderState = {\n   activeInstance: null,\n@@ -110,7 +121,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children().slice()\n+    children = children()\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "d3c64fa6a67faf610466277caf9c839dd11d1934",
                "additions": 13,
                "deletions": 5,
                "patch": "@@ -55,13 +55,14 @@ export function renderMixin (Vue) {\n     this.$options._renderChildren = children\n     // update props and listeners\n     if (parentData) {\n+      updateEvents(this, parentData, oldParentData)\n       // if any prop has changed it would trigger and queue an update,\n       // but if no props changed, nothing happens\n-      updateProps(this, parentData)\n-      updateEvents(this, parentData, oldParentData)\n+      const propsChanged = updateProps(this, parentData)\n       // diff parent data (attrs on the placeholder) and queue update\n-      // if anything changed\n-      if (parentDataChanged(parentData, oldParentData)) {\n+      // if anything changed. only do this if props didn't change, because\n+      // if props changed then an update has already been queued.\n+      if (!propsChanged && parentDataChanged(parentData, oldParentData)) {\n         this.$forceUpdate()\n       }\n     }\n@@ -213,15 +214,22 @@ function mergeParentData (vm, data, parentData) {\n }\n \n function updateProps (vm, data) {\n+  let changed = false\n   if (data.attrs || data.props) {\n     let keys = vm.$options.propKeys\n     if (keys) {\n       for (let i = 0; i < keys.length; i++) {\n         let key = keys[i]\n-        vm[key] = getPropValue(data, key, vm)\n+        let oldVal = vm[key]\n+        let newVal = getPropValue(data, key, vm)\n+        if (oldVal !== newVal) {\n+          vm[key] = newVal\n+          changed = true\n+        }\n       }\n     }\n   }\n+  return changed\n }\n \n function updateEvents (vm, data, oldData) {"
            },
            {
                "commitId": "d2ca5c5e8ad7b10b1a886c3acc50f4936bffa102",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,4 +1,4 @@\n-import { extend, resolveAsset, hasOwn, isArray, isObject, getPropValue } from '../util/index'\n+import { extend, resolveAsset, isArray, isObject, getPropValue } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n "
            },
            {
                "commitId": "91455a6618c4c34e5d8b3f8299f427d3b612c142",
                "additions": 14,
                "deletions": 11,
                "patch": "@@ -1,7 +1,6 @@\n-import { extend, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n+import { extend, resolveAsset, hasOwn, isArray, isObject, getPropValue } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n-import { getPropValue } from './state'\n \n export const renderState = {\n   activeInstance: null,\n@@ -60,11 +59,11 @@ export function renderMixin (Vue) {\n       // but if no props changed, nothing happens\n       updateProps(this, parentData)\n       updateEvents(this, parentData, oldParentData)\n-    }\n-    // diff parent data (attrs on the placeholder) and queue update\n-    // if anything changed\n-    if (parentDataChanged(parentData, oldParentData)) {\n-      this.$forceUpdate()\n+      // diff parent data (attrs on the placeholder) and queue update\n+      // if anything changed\n+      if (parentDataChanged(parentData, oldParentData)) {\n+        this.$forceUpdate()\n+      }\n     }\n   }\n \n@@ -176,15 +175,15 @@ function mergeParentData (vm, data, parentData) {\n   if (parentData.attrs) {\n     const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n-      if (!hasOwn(props, key)) {\n+      if (!props[key]) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n     const props = data.props || (data.props = {})\n     for (let key in parentData.props) {\n-      if (!hasOwn(props, key)) {\n+      if (!props[key]) {\n         props[key] = parentData.props[key]\n       }\n     }\n@@ -215,8 +214,12 @@ function mergeParentData (vm, data, parentData) {\n \n function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n-    for (let key in vm.$options.props) {\n-      vm[key] = getPropValue(data, key)\n+    let keys = vm.$options.propKeys\n+    if (keys) {\n+      for (let i = 0; i < keys.length; i++) {\n+        let key = keys[i]\n+        vm[key] = getPropValue(data, key, vm)\n+      }\n     }\n   }\n }"
            },
            {
                "commitId": "403e2380b8d3c430ac67e6a072f159bcf8c00b5e",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -21,13 +21,18 @@ export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n \n+  // resolve directive\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  // toString for mustaches\n   Vue.prototype.__s__ = function (val) {\n-    console.log(val)\n-    return typeof val === 'string' ? val : JSON.stringify(val)\n+    return val == null\n+      ? ''\n+      : typeof val === 'object'\n+        ? JSON.stringify(val, null, 2)\n+        : val\n   }\n \n   Vue.prototype._update = function (vnode) {"
            },
            {
                "commitId": "09a4ba84a9e4a0219423c85599fea87c1d34737d",
                "additions": 6,
                "deletions": 4,
                "patch": "@@ -25,6 +25,11 @@ export function renderMixin (Vue) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n+  Vue.prototype.__s__ = function (val) {\n+    console.log(val)\n+    return typeof val === 'string' ? val : JSON.stringify(val)\n+  }\n+\n   Vue.prototype._update = function (vnode) {\n     if (this._mounted) {\n       callHook(this, 'beforeUpdate')\n@@ -42,7 +47,6 @@ export function renderMixin (Vue) {\n \n   Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n-    this.$options._renderKey = key\n     this.$options._renderData = parentData\n     this.$options._renderChildren = children\n     // update props and listeners\n@@ -77,16 +81,14 @@ export function renderMixin (Vue) {\n   Vue.prototype._render = function () {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const { render, _renderKey, _renderData, _renderChildren } = this.$options\n+    const { render, _renderData, _renderChildren } = this.$options\n     // resolve slots. becaues slots are rendered in parent scope,\n     // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n     // render self\n     const vnode = render.call(this)\n-    // set key\n-    vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)"
            },
            {
                "commitId": "e666fb4ee1ee8e15f94d3065ead7a213fed98253",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -12,15 +12,15 @@ export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm.$slots = {}\n-  const el = vm.$options.el\n-  if (el) {\n-    vm.$mount(el)\n+  if (vm.$options.el) {\n+    vm.$mount(vm.$options.el)\n   }\n }\n \n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n+\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }"
            },
            {
                "commitId": "2ef8d1028be7b9e80c4f3b53c8c8993599c28a9e",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -130,8 +130,13 @@ function parentDataChanged (data, oldData) {\n     key = keysToDiff[i]\n     cur = data[key]\n     old = oldData[key]\n-    if (key === 'on') continue\n-    if (!cur) return true\n+    if (!old) {\n+      if (!cur) {\n+        continue\n+      } else {\n+        return true\n+      }\n+    }\n     if (isArray(old)) {\n       if (!isArray(cur)) return true\n       if (cur.length !== old.length) return true"
            },
            {
                "commitId": "32ca8e7722cc46e0e24b812c893c5c7dc2108b8f",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -123,11 +123,11 @@ function resolveSlots (vm, children) {\n   }\n }\n \n+const keysToDiff = ['class', 'style', 'attrs', 'props', 'directives']\n function parentDataChanged (data, oldData) {\n-  const keys = Object.keys(oldData)\n   let key, old, cur, i, l, j, k\n-  for (i = 0, l = keys.length; i < l; i++) {\n-    key = keys[i]\n+  for (i = 0, l = keysToDiff.length; i < l; i++) {\n+    key = keysToDiff[i]\n     cur = data[key]\n     old = oldData[key]\n     if (key === 'on') continue"
            },
            {
                "commitId": "0c6c748d9df45341b5c787e9401c32536161feca",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -40,7 +40,7 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._tryUpdate = function (parentData, children, key) {\n+  Vue.prototype._updateFromParent = function (parentData, children, key) {\n     const oldParentData = this.$options._renderData\n     this.$options._renderKey = key\n     this.$options._renderData = parentData\n@@ -54,7 +54,7 @@ export function renderMixin (Vue) {\n     }\n     // diff parent data (attrs on the placeholder) and queue update\n     // if anything changed\n-    if (diffParentData(parentData, oldParentData)) {\n+    if (parentDataChanged(parentData, oldParentData)) {\n       this.$forceUpdate()\n     }\n   }\n@@ -123,7 +123,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function diffParentData (data, oldData) {\n+function parentDataChanged (data, oldData) {\n   const keys = Object.keys(oldData)\n   let key, old, cur, i, l, j, k\n   for (i = 0, l = keys.length; i < l; i++) {"
            },
            {
                "commitId": "8ff21757a1a3eb10c9c239b2b92eff9711aa7b21",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -212,7 +212,6 @@ function updateProps (vm, data) {\n function updateEvents (vm, data, oldData) {\n   if (data.on) {\n     updateListeners(data.on, oldData.on || {}, (event, handler) => {\n-      console.log(11)\n       vm.$on(event, handler)\n     })\n   }"
            },
            {
                "commitId": "4d508dcbfa440459fb6bc331537c0c90278aa3a8",
                "additions": 1,
                "deletions": 22,
                "patch": "@@ -1,5 +1,4 @@\n-import Watcher from '../observer/watcher'\n-import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n+import { extend, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -97,26 +96,6 @@ export function renderMixin (Vue) {\n     return vnode\n   }\n \n-  Vue.prototype.$mount = function (el) {\n-    callHook(this, 'beforeMount')\n-    el = this.$el = el && query(el)\n-    if (el) {\n-      // clean element\n-      el.innerHTML = ''\n-      if (el.hasAttributes()) {\n-        const attrs = el.attributes\n-        for (let i = 0, l = attrs.length; i < l; i++) {\n-          el.removeAttribute(attrs[i].name)\n-        }\n-      }\n-    }\n-    this._watcher = new Watcher(this, this._render, this._update)\n-    this._update(this._watcher.value)\n-    callHook(this, 'mounted')\n-    this._mounted = true\n-    return this\n-  }\n-\n   Vue.prototype.$forceUpdate = function () {\n     this._watcher.update()\n   }"
            },
            {
                "commitId": "af1f1d349f8276d3fe0c38af34eafab2b0c50424",
                "additions": 8,
                "deletions": 7,
                "patch": "@@ -1,6 +1,6 @@\n import Watcher from '../observer/watcher'\n import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n-import { createElement, patch, updateListeners } from '../vdom/index'\n+import { createElement, patch, updateListeners, flatten } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n \n@@ -48,13 +48,14 @@ export function renderMixin (Vue) {\n     this.$options._renderChildren = children\n     // update props and listeners\n     if (parentData) {\n+      // if any prop has changed it would trigger and queue an update,\n+      // but if no props changed, nothing happens\n       updateProps(this, parentData)\n       updateEvents(this, parentData, oldParentData)\n     }\n-    // for now, if the component has content it always updates\n-    // because we don't know whether the children have changed.\n-    // need to optimize in the future.\n-    if (children || diffParentData(parentData, oldParentData)) {\n+    // diff parent data (attrs on the placeholder) and queue update\n+    // if anything changed\n+    if (diffParentData(parentData, oldParentData)) {\n       this.$forceUpdate()\n     }\n   }\n@@ -64,11 +65,11 @@ export function renderMixin (Vue) {\n    * This is used to wrap all children thunks in codegen.\n    */\n \n-  Vue.prototype._withContext = function (fn) {\n+  Vue.prototype._renderWithContext = function (fn) {\n     return () => {\n       const prev = renderState.context\n       renderState.context = this\n-      const children = fn()\n+      const children = flatten(fn())\n       renderState.context = prev\n       return children\n     }"
            },
            {
                "commitId": "61a5249a0e71008d7560d188b62efe36788619c1",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -68,8 +68,9 @@ export function renderMixin (Vue) {\n     return () => {\n       const prev = renderState.context\n       renderState.context = this\n-      return fn()\n+      const children = fn()\n       renderState.context = prev\n+      return children\n     }\n   }\n "
            },
            {
                "commitId": "c16fc2c427b221510b51d98c1051460d2ffbe02e",
                "additions": 24,
                "deletions": 12,
                "patch": "@@ -5,7 +5,8 @@ import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n \n export const renderState = {\n-  activeInstance: null\n+  activeInstance: null,\n+  context: null\n }\n \n export function initRender (vm) {\n@@ -58,28 +59,39 @@ export function renderMixin (Vue) {\n     }\n   }\n \n+  /**\n+   * Call a render function with this instance as the context.\n+   * This is used to wrap all children thunks in codegen.\n+   */\n+\n+  Vue.prototype._withContext = function (fn) {\n+    return () => {\n+      const prev = renderState.context\n+      renderState.context = this\n+      return fn()\n+      renderState.context = prev\n+    }\n+  }\n+\n   Vue.prototype._render = function () {\n-    const {\n-      render,\n-      _renderKey,\n-      _renderData,\n-      _renderChildren\n-    } = this.$options\n-    // resolve slots\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const { render, _renderKey, _renderData, _renderChildren } = this.$options\n+    // resolve slots. becaues slots are rendered in parent scope,\n+    // we set the activeInstance to parent.\n     if (_renderChildren) {\n       resolveSlots(this, _renderChildren)\n     }\n-    // render\n-    const prev = renderState.activeInstance\n-    renderState.activeInstance = this\n+    // render self\n     const vnode = render.call(this)\n-    renderState.activeInstance = prev\n     // set key\n     vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n       mergeParentData(this, vnode.data, _renderData)\n     }\n+    // restore render state\n+    renderState.activeInstance = prev\n     return vnode\n   }\n "
            },
            {
                "commitId": "1df748d57d366ff426604e58a46897a2f49424aa",
                "additions": 11,
                "deletions": 4,
                "patch": "@@ -85,9 +85,16 @@ export function renderMixin (Vue) {\n \n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n-    this.$el = el && query(el)\n-    if (this.$el) {\n-      this.$el.innerHTML = ''\n+    el = this.$el = el && query(el)\n+    if (el) {\n+      // clean element\n+      el.innerHTML = ''\n+      if (el.hasAttributes()) {\n+        const attrs = el.attributes\n+        for (let i = 0, l = attrs.length; i < l; i++) {\n+          el.removeAttribute(attrs[i].name)\n+        }\n+      }\n     }\n     this._watcher = new Watcher(this, this._render, this._update)\n     this._update(this._watcher.value)\n@@ -103,7 +110,7 @@ export function renderMixin (Vue) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n-    children = children.slice()\n+    children = children().slice()\n     const slots = { default: children }\n     let i = children.length\n     let name, child"
            },
            {
                "commitId": "38204b747dad3c05c63401e2a27ef846bcb998bc",
                "additions": 4,
                "deletions": 3,
                "patch": "@@ -48,7 +48,7 @@ export function renderMixin (Vue) {\n     // update props and listeners\n     if (parentData) {\n       updateProps(this, parentData)\n-      updateEvents(this, parentData)\n+      updateEvents(this, parentData, oldParentData)\n     }\n     // for now, if the component has content it always updates\n     // because we don't know whether the children have changed.\n@@ -209,9 +209,10 @@ function updateProps (vm, data) {\n   }\n }\n \n-function updateEvents (vm, data) {\n+function updateEvents (vm, data, oldData) {\n   if (data.on) {\n-    updateListeners(data.on, vm._vnode.data.on || {}, (event, handler) => {\n+    updateListeners(data.on, oldData.on || {}, (event, handler) => {\n+      console.log(11)\n       vm.$on(event, handler)\n     })\n   }"
            },
            {
                "commitId": "542035f3c1550bf4d733a7b9c161cdb8db63740f",
                "additions": 10,
                "deletions": 4,
                "patch": "@@ -124,16 +124,18 @@ function resolveSlots (vm, children) {\n }\n \n function diffParentData (data, oldData) {\n-  let key, old, cur\n-  for (key in oldData) {\n+  const keys = Object.keys(oldData)\n+  let key, old, cur, i, l, j, k\n+  for (i = 0, l = keys.length; i < l; i++) {\n+    key = keys[i]\n     cur = data[key]\n     old = oldData[key]\n     if (key === 'on') continue\n     if (!cur) return true\n     if (isArray(old)) {\n       if (!isArray(cur)) return true\n       if (cur.length !== old.length) return true\n-      for (let i = 0; i < old.length; i++) {\n+      for (j = 0, k = old.length; j < k; j++) {\n         if (isObject(old[i])) {\n           if (!isObject(cur[i])) return true\n           if (diffObject(cur, old)) return true\n@@ -145,10 +147,14 @@ function diffParentData (data, oldData) {\n       return true\n     }\n   }\n+  return false\n }\n \n function diffObject (cur, old) {\n-  for (var key in old) {\n+  const keys = Object.keys(old)\n+  let i, l, key\n+  for (i = 0, l = keys.length; i < l; i++) {\n+    key = keys[i]\n     if (cur[key] !== old[key]) return true\n   }\n }"
            },
            {
                "commitId": "0257afbb7f8a6a4c986a577e904225cef13e67ec",
                "additions": 119,
                "deletions": 81,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { extend, query, resolveAsset, hasOwn } from '../util/index'\n+import { extend, query, resolveAsset, hasOwn, isArray, isObject } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -18,78 +18,6 @@ export function initRender (vm) {\n   }\n }\n \n-function resolveSlots (vm, children) {\n-  if (children) {\n-    children = children.slice()\n-    const slots = { default: children }\n-    let i = children.length\n-    let name, child\n-    while (i--) {\n-      child = children[i]\n-      if ((name = child.data && child.data.slot)) {\n-        let slot = (slots[name] || (slots[name] = []))\n-        if (child.tag === 'template') {\n-          slot.push.apply(slot, child.children)\n-        } else {\n-          slot.push(child)\n-        }\n-        children.splice(i, 1)\n-      }\n-    }\n-    vm.$slots = slots\n-  }\n-}\n-\n-function mergeParentData (vm, data, parentData) {\n-  const props = vm.$options.props\n-  if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = {})\n-    for (let key in parentData.attrs) {\n-      if (!hasOwn(props, key)) {\n-        attrs[key] = parentData.attrs[key]\n-      }\n-    }\n-  }\n-  if (parentData.props) {\n-    const props = data.props || (data.props = {})\n-    for (let key in parentData.props) {\n-      if (!hasOwn(props, key)) {\n-        props[key] = parentData.props[key]\n-      }\n-    }\n-  }\n-  if (parentData.staticClass) {\n-    data.staticClass = data.staticClass\n-      ? data.staticClass + ' ' + parentData.staticClass\n-      : parentData.staticClass\n-  }\n-  if (parentData.class) {\n-    extend((data.class || (data.class = {})), parentData.class)\n-  }\n-  if (parentData.style) {\n-    extend((data.style || (data.style = {})), parentData.style)\n-  }\n-  if (parentData.directives) {\n-    data.directives = parentData.directives.conact(data.directives || [])\n-  }\n-  if (parentData.on) {\n-    updateListeners(parentData.on, data.on || {}, (event, handler) => {\n-      vm.$on(event, handler)\n-    })\n-  }\n-}\n-\n-function updateProps (vm, data) {\n-  if (data.attrs || data.props) {\n-    for (let key in vm.$options.props) {\n-      let newVal = getPropValue(data, key)\n-      if (vm[key] !== newVal) {\n-        vm[key] = newVal\n-      }\n-    }\n-  }\n-}\n-\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -112,21 +40,21 @@ export function renderMixin (Vue) {\n     }\n   }\n \n-  Vue.prototype._tryUpdate = function (data, children, key) {\n+  Vue.prototype._tryUpdate = function (parentData, children, key) {\n+    const oldParentData = this.$options._renderData\n     this.$options._renderKey = key\n-    this.$options._renderData = data\n+    this.$options._renderData = parentData\n     this.$options._renderChildren = children\n-    // set props - this will trigger update if any of them changed\n-    // but not guaranteed\n-    if (data) {\n-      updateProps(this, data)\n+    // update props and listeners\n+    if (parentData) {\n+      updateProps(this, parentData)\n+      updateEvents(this, parentData)\n     }\n     // for now, if the component has content it always updates\n     // because we don't know whether the children have changed.\n     // need to optimize in the future.\n-    if (children) {\n+    if (children || diffParentData(parentData, oldParentData)) {\n       this.$forceUpdate()\n-      return\n     }\n   }\n \n@@ -172,3 +100,113 @@ export function renderMixin (Vue) {\n     this._watcher.update()\n   }\n }\n+\n+function resolveSlots (vm, children) {\n+  if (children) {\n+    children = children.slice()\n+    const slots = { default: children }\n+    let i = children.length\n+    let name, child\n+    while (i--) {\n+      child = children[i]\n+      if ((name = child.data && child.data.slot)) {\n+        let slot = (slots[name] || (slots[name] = []))\n+        if (child.tag === 'template') {\n+          slot.push.apply(slot, child.children)\n+        } else {\n+          slot.push(child)\n+        }\n+        children.splice(i, 1)\n+      }\n+    }\n+    vm.$slots = slots\n+  }\n+}\n+\n+function diffParentData (data, oldData) {\n+  let key, old, cur\n+  for (key in oldData) {\n+    cur = data[key]\n+    old = oldData[key]\n+    if (key === 'on') continue\n+    if (!cur) return true\n+    if (isArray(old)) {\n+      if (!isArray(cur)) return true\n+      if (cur.length !== old.length) return true\n+      for (let i = 0; i < old.length; i++) {\n+        if (isObject(old[i])) {\n+          if (!isObject(cur[i])) return true\n+          if (diffObject(cur, old)) return true\n+        } else if (old[i] !== cur[i]) {\n+          return true\n+        }\n+      }\n+    } else if (diffObject(cur, old)) {\n+      return true\n+    }\n+  }\n+}\n+\n+function diffObject (cur, old) {\n+  for (var key in old) {\n+    if (cur[key] !== old[key]) return true\n+  }\n+}\n+\n+function mergeParentData (vm, data, parentData) {\n+  const props = vm.$options.props\n+  if (parentData.attrs) {\n+    const attrs = data.attrs || (data.attrs = {})\n+    for (let key in parentData.attrs) {\n+      if (!hasOwn(props, key)) {\n+        attrs[key] = parentData.attrs[key]\n+      }\n+    }\n+  }\n+  if (parentData.props) {\n+    const props = data.props || (data.props = {})\n+    for (let key in parentData.props) {\n+      if (!hasOwn(props, key)) {\n+        props[key] = parentData.props[key]\n+      }\n+    }\n+  }\n+  if (parentData.staticClass) {\n+    data.staticClass = data.staticClass\n+      ? data.staticClass + ' ' + parentData.staticClass\n+      : parentData.staticClass\n+  }\n+  if (parentData.class) {\n+    if (!data.class) {\n+      data.class = parentData.class\n+    } else {\n+      data.class = (isArray(data.class) ? data.class : []).concat(parentData.class)\n+    }\n+  }\n+  if (parentData.style) {\n+    if (!data.style) {\n+      data.style = parentData.style\n+    } else {\n+      extend(data.style, parentData.style)\n+    }\n+  }\n+  if (parentData.directives) {\n+    data.directives = parentData.directives.conact(data.directives || [])\n+  }\n+}\n+\n+function updateProps (vm, data) {\n+  if (data.attrs || data.props) {\n+    for (let key in vm.$options.props) {\n+      vm[key] = getPropValue(data, key)\n+    }\n+  }\n+}\n+\n+function updateEvents (vm, data) {\n+  if (data.on) {\n+    updateListeners(data.on, vm._vnode.data.on || {}, (event, handler) => {\n+      vm.$on(event, handler)\n+    })\n+  }\n+}"
            },
            {
                "commitId": "d1fc82dbba86a91704269e62699f63d645dd8baf",
                "additions": 21,
                "deletions": 14,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hasOwn } from '../util/index'\n+import { extend, query, resolveAsset, hasOwn } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n import { getPropValue } from './state'\n@@ -40,28 +40,38 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function mergeParentAttrs (vm, data, parentData) {\n+function mergeParentData (vm, data, parentData) {\n   const props = vm.$options.props\n   if (parentData.attrs) {\n-    const attrs = data.attrs || (data.attrs = [])\n+    const attrs = data.attrs || (data.attrs = {})\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n   if (parentData.props) {\n-\n+    const props = data.props || (data.props = {})\n+    for (let key in parentData.props) {\n+      if (!hasOwn(props, key)) {\n+        props[key] = parentData.props[key]\n+      }\n+    }\n+  }\n+  if (parentData.staticClass) {\n+    data.staticClass = data.staticClass\n+      ? data.staticClass + ' ' + parentData.staticClass\n+      : parentData.staticClass\n+  }\n+  if (parentData.class) {\n+    extend((data.class || (data.class = {})), parentData.class)\n+  }\n+  if (parentData.style) {\n+    extend((data.style || (data.style = {})), parentData.style)\n   }\n-}\n-\n-function mergeParentDirectives (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.conact(data.directives || [])\n   }\n-}\n-\n-function updateParentCallbacks (vm, data, parentData) {\n   if (parentData.on) {\n     updateListeners(parentData.on, data.on || {}, (event, handler) => {\n       vm.$on(event, handler)\n@@ -140,10 +150,7 @@ export function renderMixin (Vue) {\n     vnode.key = _renderKey\n     // update parent data\n     if (_renderData) {\n-      const data = vnode.data\n-      mergeParentAttrs(this, data, _renderData)\n-      mergeParentDirectives(this, data, _renderData)\n-      updateParentCallbacks(this, data, _renderData)\n+      mergeParentData(this, vnode.data, _renderData)\n     }\n     return vnode\n   }"
            },
            {
                "commitId": "2fa6e6f73f81439374c02008fb4169b7df2f7b98",
                "additions": 8,
                "deletions": 4,
                "patch": "@@ -106,14 +106,18 @@ export function renderMixin (Vue) {\n     this.$options._renderKey = key\n     this.$options._renderData = data\n     this.$options._renderChildren = children\n-    if (children) {\n-      this.$forceUpdate()\n-      return\n-    }\n     // set props - this will trigger update if any of them changed\n+    // but not guaranteed\n     if (data) {\n       updateProps(this, data)\n     }\n+    // for now, if the component has content it always updates\n+    // because we don't know whether the children have changed.\n+    // need to optimize in the future.\n+    if (children) {\n+      this.$forceUpdate()\n+      return\n+    }\n   }\n \n   Vue.prototype._render = function () {"
            },
            {
                "commitId": "0e940ac5af072e1c85b6346c43c20d0a66c75393",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -72,7 +72,7 @@ function updateParentCallbacks (vm, data, parentData) {\n function updateProps (vm, data) {\n   if (data.attrs || data.props) {\n     for (let key in vm.$options.props) {\n-      let newVal = getPropValue(data)\n+      let newVal = getPropValue(data, key)\n       if (vm[key] !== newVal) {\n         vm[key] = newVal\n       }"
            },
            {
                "commitId": "fdfcb9319970298e0c2f4318e6360db1b8dd3d8e",
                "additions": 4,
                "deletions": 16,
                "patch": "@@ -1,7 +1,8 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n+import { query, resolveAsset, hasOwn } from '../util/index'\n import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n+import { getPropValue } from './state'\n \n export const renderState = {\n   activeInstance: null\n@@ -69,29 +70,16 @@ function updateParentCallbacks (vm, data, parentData) {\n }\n \n function updateProps (vm, data) {\n-  const attrs = data.attrs\n-  const props = data.props\n-  if (attrs || props) {\n+  if (data.attrs || data.props) {\n     for (let key in vm.$options.props) {\n-      let altKey = hyphenate(key)\n-      let newVal =\n-        getPropValue(attrs, key, altKey) ||\n-        getPropValue(props, key, altKey)\n+      let newVal = getPropValue(data)\n       if (vm[key] !== newVal) {\n         vm[key] = newVal\n       }\n     }\n   }\n }\n \n-function getPropValue (hash, key, altKey) {\n-  return hash\n-    ? hasOwn(hash, key)\n-      ? hash[key]\n-      : hash[altKey]\n-    : undefined\n-}\n-\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement"
            },
            {
                "commitId": "57bb93ef02de063dc12d375b0fc2ca25063b5fc8",
                "additions": 6,
                "deletions": 2,
                "patch": "@@ -100,14 +100,18 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._update = function (vnode) {\n-    callHook(this, 'beforeUpdate')\n+    if (this._mounted) {\n+      callHook(this, 'beforeUpdate')\n+    }\n     if (!this._vnode) {\n       this.$el = patch(this.$el, vnode)\n     } else {\n       this.$el = patch(this._vnode, vnode)\n     }\n     this._vnode = vnode\n-    callHook(this, 'updated')\n+    if (this._mounted) {\n+      callHook(this, 'updated')\n+    }\n   }\n \n   Vue.prototype._tryUpdate = function (data, children, key) {"
            },
            {
                "commitId": "c12ddd9ab9f66bdbad8d5f91c2796f6cfe0a659c",
                "additions": 30,
                "deletions": 11,
                "patch": "@@ -40,15 +40,18 @@ function resolveSlots (vm, children) {\n }\n \n function mergeParentAttrs (vm, data, parentData) {\n+  const props = vm.$options.props\n   if (parentData.attrs) {\n-    const props = vm.$options.props\n     const attrs = data.attrs || (data.attrs = [])\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n         attrs[key] = parentData.attrs[key]\n       }\n     }\n   }\n+  if (parentData.props) {\n+\n+  }\n }\n \n function mergeParentDirectives (vm, data, parentData) {\n@@ -65,6 +68,30 @@ function updateParentCallbacks (vm, data, parentData) {\n   }\n }\n \n+function updateProps (vm, data) {\n+  const attrs = data.attrs\n+  const props = data.props\n+  if (attrs || props) {\n+    for (let key in vm.$options.props) {\n+      let altKey = hyphenate(key)\n+      let newVal =\n+        getPropValue(attrs, key, altKey) ||\n+        getPropValue(props, key, altKey)\n+      if (vm[key] !== newVal) {\n+        vm[key] = newVal\n+      }\n+    }\n+  }\n+}\n+\n+function getPropValue (hash, key, altKey) {\n+  return hash\n+    ? hasOwn(hash, key)\n+      ? hash[key]\n+      : hash[altKey]\n+    : undefined\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -92,16 +119,8 @@ export function renderMixin (Vue) {\n       return\n     }\n     // set props - this will trigger update if any of them changed\n-    const attrs = data && data.attrs\n-    if (attrs) {\n-      for (let key in this.$options.props) {\n-        let newVal = hasOwn(attrs, key)\n-          ? attrs[key]\n-          : attrs[hyphenate(key)]\n-        if (this[key] !== newVal) {\n-          this[key] = newVal\n-        }\n-      }\n+    if (data) {\n+      updateProps(this, data)\n     }\n   }\n "
            },
            {
                "commitId": "054c2c3de2976c8f87b7a52980bc89c12d3d90ee",
                "additions": 2,
                "deletions": 1,
                "patch": "@@ -42,9 +42,10 @@ function resolveSlots (vm, children) {\n function mergeParentAttrs (vm, data, parentData) {\n   if (parentData.attrs) {\n     const props = vm.$options.props\n+    const attrs = data.attrs || (data.attrs = [])\n     for (let key in parentData.attrs) {\n       if (!hasOwn(props, key)) {\n-        data.attrs[key] = parentData.attrs[key]\n+        attrs[key] = parentData.attrs[key]\n       }\n     }\n   }"
            },
            {
                "commitId": "1a35cf4a21e8c8e897c2d6f291b99376b12b9fac",
                "additions": 7,
                "deletions": 2,
                "patch": "@@ -19,13 +19,19 @@ export function initRender (vm) {\n \n function resolveSlots (vm, children) {\n   if (children) {\n+    children = children.slice()\n     const slots = { default: children }\n     let i = children.length\n     let name, child\n     while (i--) {\n       child = children[i]\n       if ((name = child.data && child.data.slot)) {\n-        (slots[name] || (slots[name] = [])).push(child)\n+        let slot = (slots[name] || (slots[name] = []))\n+        if (child.tag === 'template') {\n+          slot.push.apply(slot, child.children)\n+        } else {\n+          slot.push(child)\n+        }\n         children.splice(i, 1)\n       }\n     }\n@@ -123,7 +129,6 @@ export function renderMixin (Vue) {\n       mergeParentDirectives(this, data, _renderData)\n       updateParentCallbacks(this, data, _renderData)\n     }\n-    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "e9ae8187c2be7e03da425a23545b4523eca70c45",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -123,6 +123,7 @@ export function renderMixin (Vue) {\n       mergeParentDirectives(this, data, _renderData)\n       updateParentCallbacks(this, data, _renderData)\n     }\n+    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "4e86d3aba9d734bf2b50327933d221f3ceb522f2",
                "additions": 26,
                "deletions": 15,
                "patch": "@@ -10,10 +10,7 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n-  vm._renderData = vm.$options._renderData\n   vm.$slots = {}\n-  // props are set in initState\n-  resolveSlots(vm, vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -79,14 +76,15 @@ export function renderMixin (Vue) {\n     callHook(this, 'updated')\n   }\n \n-  Vue.prototype._tryUpdate = function (data, children) {\n-    this._renderData = data\n+  Vue.prototype._tryUpdate = function (data, children, key) {\n+    this.$options._renderKey = key\n+    this.$options._renderData = data\n+    this.$options._renderChildren = children\n     if (children) {\n-      resolveSlots(this, children)\n       this.$forceUpdate()\n       return\n     }\n-    // set props if they have changed.\n+    // set props - this will trigger update if any of them changed\n     const attrs = data && data.attrs\n     if (attrs) {\n       for (let key in this.$options.props) {\n@@ -101,17 +99,30 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._render = function () {\n+    const {\n+      render,\n+      _renderKey,\n+      _renderData,\n+      _renderChildren\n+    } = this.$options\n+    // resolve slots\n+    if (_renderChildren) {\n+      resolveSlots(this, _renderChildren)\n+    }\n+    // render\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n-    const vnode = this.$options.render.call(this)\n-    const data = vnode.data\n-    const parentData = this._renderData\n-    if (parentData) {\n-      mergeParentAttrs(this, data, parentData)\n-      mergeParentDirectives(this, data, parentData)\n-      updateParentCallbacks(this, data, parentData)\n-    }\n+    const vnode = render.call(this)\n     renderState.activeInstance = prev\n+    // set key\n+    vnode.key = _renderKey\n+    // update parent data\n+    if (_renderData) {\n+      const data = vnode.data\n+      mergeParentAttrs(this, data, _renderData)\n+      mergeParentDirectives(this, data, _renderData)\n+      updateParentCallbacks(this, data, _renderData)\n+    }\n     return vnode\n   }\n "
            },
            {
                "commitId": "be9e16e20fce0d6c9b5ab72be02894dc05a2734f",
                "additions": 16,
                "deletions": 5,
                "patch": "@@ -1,6 +1,6 @@\n import Watcher from '../observer/watcher'\n import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n-import { createElement, patch } from '../vdom/index'\n+import { createElement, patch, updateListeners } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export const renderState = {\n@@ -36,8 +36,7 @@ function resolveSlots (vm, children) {\n   }\n }\n \n-function mergeParentData (vm, data, parentData) {\n-  // attrs\n+function mergeParentAttrs (vm, data, parentData) {\n   if (parentData.attrs) {\n     const props = vm.$options.props\n     for (let key in parentData.attrs) {\n@@ -46,12 +45,22 @@ function mergeParentData (vm, data, parentData) {\n       }\n     }\n   }\n-  // directives\n+}\n+\n+function mergeParentDirectives (vm, data, parentData) {\n   if (parentData.directives) {\n     data.directives = parentData.directives.conact(data.directives || [])\n   }\n }\n \n+function updateParentCallbacks (vm, data, parentData) {\n+  if (parentData.on) {\n+    updateListeners(parentData.on, data.on || {}, (event, handler) => {\n+      vm.$on(event, handler)\n+    })\n+  }\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -98,7 +107,9 @@ export function renderMixin (Vue) {\n     const data = vnode.data\n     const parentData = this._renderData\n     if (parentData) {\n-      mergeParentData(this, data, parentData)\n+      mergeParentAttrs(this, data, parentData)\n+      mergeParentDirectives(this, data, parentData)\n+      updateParentCallbacks(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n     return vnode"
            },
            {
                "commitId": "56073ca8532d90706cd50b8a3177011093b01675",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -77,14 +77,16 @@ export function renderMixin (Vue) {\n       this.$forceUpdate()\n       return\n     }\n-    // set props. because props are reactive,\n-    // if any of them has changed it will trigger an update.\n+    // set props if they have changed.\n     const attrs = data && data.attrs\n     if (attrs) {\n       for (let key in this.$options.props) {\n-        this[key] = hasOwn(attrs, key)\n+        let newVal = hasOwn(attrs, key)\n           ? attrs[key]\n           : attrs[hyphenate(key)]\n+        if (this[key] !== newVal) {\n+          this[key] = newVal\n+        }\n       }\n     }\n   }\n@@ -99,7 +101,6 @@ export function renderMixin (Vue) {\n       mergeParentData(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n-    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "48f328bcaf2ebcc256d1c9114cf9cc2da54f15ae",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -99,6 +99,7 @@ export function renderMixin (Vue) {\n       mergeParentData(this, data, parentData)\n     }\n     renderState.activeInstance = prev\n+    console.log(vnode)\n     return vnode\n   }\n "
            },
            {
                "commitId": "5c1063a5e4167d1938febc4d4fd4f4edee260505",
                "additions": 7,
                "deletions": 12,
                "patch": "@@ -77,19 +77,14 @@ export function renderMixin (Vue) {\n       this.$forceUpdate()\n       return\n     }\n-    // check props\n-    if (data && data.attrs) {\n-      let changed = false\n+    // set props. because props are reactive,\n+    // if any of them has changed it will trigger an update.\n+    const attrs = data && data.attrs\n+    if (attrs) {\n       for (let key in this.$options.props) {\n-        let oldVal = this[key]\n-        let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n-        if (oldVal !== newVal) {\n-          this[key] = newVal\n-          changed = true\n-        }\n-      }\n-      if (changed) {\n-        this.$forceUpdate()\n+        this[key] = hasOwn(attrs, key)\n+          ? attrs[key]\n+          : attrs[hyphenate(key)]\n       }\n     }\n   }"
            },
            {
                "commitId": "5970dbd2f5694efb1328789f4f0f83d89a5e4beb",
                "additions": 6,
                "deletions": 12,
                "patch": "@@ -20,16 +20,6 @@ export function initRender (vm) {\n   }\n }\n \n-export function setProps (vm, data) {\n-  const attrs = (data && data.attrs) || {}\n-  const props = vm.$options.props\n-  if (props) {\n-    for (let key in props) {\n-      vm[key] = attrs[key]\n-    }\n-  }\n-}\n-\n function resolveSlots (vm, children) {\n   if (children) {\n     const slots = { default: children }\n@@ -89,14 +79,18 @@ export function renderMixin (Vue) {\n     }\n     // check props\n     if (data && data.attrs) {\n-      setProps(this, data)\n+      let changed = false\n       for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n         if (oldVal !== newVal) {\n-          this.$forceUpdate()\n+          this[key] = newVal\n+          changed = true\n         }\n       }\n+      if (changed) {\n+        this.$forceUpdate()\n+      }\n     }\n   }\n "
            },
            {
                "commitId": "8218eae1f91ab3d777b594821c55a687f647ca9b",
                "additions": 39,
                "deletions": 9,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset, hyphenate } from '../util/index'\n+import { query, resolveAsset, hyphenate, hasOwn } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n@@ -11,18 +11,28 @@ export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n   vm._renderData = vm.$options._renderData\n-  vm.$slots = resolveSlots(vm.$options._renderChildren)\n+  vm.$slots = {}\n+  // props are set in initState\n+  resolveSlots(vm, vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n   }\n }\n \n-function resolveSlots (children) {\n-  const slots = {\n-    default: children\n+export function setProps (vm, data) {\n+  const attrs = (data && data.attrs) || {}\n+  const props = vm.$options.props\n+  if (props) {\n+    for (let key in props) {\n+      vm[key] = attrs[key]\n+    }\n   }\n+}\n+\n+function resolveSlots (vm, children) {\n   if (children) {\n+    const slots = { default: children }\n     let i = children.length\n     let name, child\n     while (i--) {\n@@ -32,8 +42,24 @@ function resolveSlots (children) {\n         children.splice(i, 1)\n       }\n     }\n+    vm.$slots = slots\n+  }\n+}\n+\n+function mergeParentData (vm, data, parentData) {\n+  // attrs\n+  if (parentData.attrs) {\n+    const props = vm.$options.props\n+    for (let key in parentData.attrs) {\n+      if (!hasOwn(props, key)) {\n+        data.attrs[key] = parentData.attrs[key]\n+      }\n+    }\n+  }\n+  // directives\n+  if (parentData.directives) {\n+    data.directives = parentData.directives.conact(data.directives || [])\n   }\n-  return slots\n }\n \n export function renderMixin (Vue) {\n@@ -56,13 +82,14 @@ export function renderMixin (Vue) {\n \n   Vue.prototype._tryUpdate = function (data, children) {\n     this._renderData = data\n-    this.$slots = resolveSlots(children)\n     if (children) {\n+      resolveSlots(this, children)\n       this.$forceUpdate()\n       return\n     }\n     // check props\n     if (data && data.attrs) {\n+      setProps(this, data)\n       for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n@@ -77,8 +104,11 @@ export function renderMixin (Vue) {\n     const prev = renderState.activeInstance\n     renderState.activeInstance = this\n     const vnode = this.$options.render.call(this)\n-    // merge parent data\n-    // TODO\n+    const data = vnode.data\n+    const parentData = this._renderData\n+    if (parentData) {\n+      mergeParentData(this, data, parentData)\n+    }\n     renderState.activeInstance = prev\n     return vnode\n   }"
            },
            {
                "commitId": "d6c5abbf35af32ee6a166fc3e63e2b25343a0a61",
                "additions": 33,
                "deletions": 10,
                "patch": "@@ -10,13 +10,32 @@ export const renderState = {\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n-  // TODO: handle _renderData and _renderChildren\n+  vm._renderData = vm.$options._renderData\n+  vm.$slots = resolveSlots(vm.$options._renderChildren)\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n   }\n }\n \n+function resolveSlots (children) {\n+  const slots = {\n+    default: children\n+  }\n+  if (children) {\n+    let i = children.length\n+    let name, child\n+    while (i--) {\n+      child = children[i]\n+      if ((name = child.data && child.data.slot)) {\n+        (slots[name] || (slots[name] = [])).push(child)\n+        children.splice(i, 1)\n+      }\n+    }\n+  }\n+  return slots\n+}\n+\n export function renderMixin (Vue) {\n   // shorthands used in render functions\n   Vue.prototype.__h__ = createElement\n@@ -36,8 +55,9 @@ export function renderMixin (Vue) {\n   }\n \n   Vue.prototype._tryUpdate = function (data, children) {\n+    this._renderData = data\n+    this.$slots = resolveSlots(children)\n     if (children) {\n-      // TODO: handle content slots\n       this.$forceUpdate()\n       return\n     }\n@@ -53,20 +73,23 @@ export function renderMixin (Vue) {\n     }\n   }\n \n+  Vue.prototype._render = function () {\n+    const prev = renderState.activeInstance\n+    renderState.activeInstance = this\n+    const vnode = this.$options.render.call(this)\n+    // merge parent data\n+    // TODO\n+    renderState.activeInstance = prev\n+    return vnode\n+  }\n+\n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n     this.$el = el && query(el)\n     if (this.$el) {\n       this.$el.innerHTML = ''\n     }\n-    const render = this.$options.render\n-    this._watcher = new Watcher(this, () => {\n-      const prev = renderState.activeInstance\n-      renderState.activeInstance = this\n-      const vnode = render.call(this)\n-      renderState.activeInstance = prev\n-      return vnode\n-    }, this._update)\n+    this._watcher = new Watcher(this, this._render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true"
            },
            {
                "commitId": "84ce91df72928f622ba993ee89e41a642eb92fb0",
                "additions": 6,
                "deletions": 4,
                "patch": "@@ -3,7 +3,9 @@ import { query, resolveAsset, hyphenate } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n-export const target = { _: null }\n+export const renderState = {\n+  activeInstance: null\n+}\n \n export function initRender (vm) {\n   vm._vnode = null\n@@ -59,10 +61,10 @@ export function renderMixin (Vue) {\n     }\n     const render = this.$options.render\n     this._watcher = new Watcher(this, () => {\n-      const prev = target._\n-      target._ = this\n+      const prev = renderState.activeInstance\n+      renderState.activeInstance = this\n       const vnode = render.call(this)\n-      target._ = prev\n+      renderState.activeInstance = prev\n       return vnode\n     }, this._update)\n     this._update(this._watcher.value)"
            },
            {
                "commitId": "8bc6915ce129b7642121c8462222d375343b9d3a",
                "additions": 10,
                "deletions": 1,
                "patch": "@@ -3,6 +3,8 @@ import { query, resolveAsset, hyphenate } from '../util/index'\n import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n+export const target = { _: null }\n+\n export function initRender (vm) {\n   vm._vnode = null\n   vm._mounted = false\n@@ -55,7 +57,14 @@ export function renderMixin (Vue) {\n     if (this.$el) {\n       this.$el.innerHTML = ''\n     }\n-    this._watcher = new Watcher(this, this.$options.render, this._update)\n+    const render = this.$options.render\n+    this._watcher = new Watcher(this, () => {\n+      const prev = target._\n+      target._ = this\n+      const vnode = render.call(this)\n+      target._ = prev\n+      return vnode\n+    }, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true"
            },
            {
                "commitId": "058c555dac875d1c979b92ccaeb36412d6912c82",
                "additions": 2,
                "deletions": 3,
                "patch": "@@ -38,9 +38,8 @@ export function renderMixin (Vue) {\n       return\n     }\n     // check props\n-    const props = this.$options.props\n-    if (props && data && data.attrs) {\n-      for (let key in props) {\n+    if (data && data.attrs) {\n+      for (let key in this.$options.props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n         if (oldVal !== newVal) {"
            },
            {
                "commitId": "5c3edf850bcf7dacf0fd4d6b625fce2e937ebe93",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -39,7 +39,7 @@ export function renderMixin (Vue) {\n     }\n     // check props\n     const props = this.$options.props\n-    if (props && data.attrs) {\n+    if (props && data && data.attrs) {\n       for (let key in props) {\n         let oldVal = this[key]\n         let newVal = data.attrs[key] || data.attrs[hyphenate(key)]"
            },
            {
                "commitId": "f2c8880041bd845b4af28ed20e2f67c2e2c8d6ff",
                "additions": 35,
                "deletions": 11,
                "patch": "@@ -1,10 +1,12 @@\n import Watcher from '../observer/watcher'\n-import { query, resolveAsset } from '../util/index'\n-import { h, patch } from '../vdom/index'\n+import { query, resolveAsset, hyphenate } from '../util/index'\n+import { createElement, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n+  vm._vnode = null\n   vm._mounted = false\n+  // TODO: handle _renderData and _renderChildren\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -13,33 +15,55 @@ export function initRender (vm) {\n \n export function renderMixin (Vue) {\n   // shorthands used in render functions\n-  Vue.prototype.__h__ = h\n+  Vue.prototype.__h__ = createElement\n   Vue.prototype.__d__ = function (id) {\n     return resolveAsset(this.$options, 'directives', id, true)\n   }\n \n-  Vue.prototype._update = function (vtree) {\n+  Vue.prototype._update = function (vnode) {\n     callHook(this, 'beforeUpdate')\n-    if (!this._tree) {\n-      this.$el = patch(this.$el, vtree)\n+    if (!this._vnode) {\n+      this.$el = patch(this.$el, vnode)\n     } else {\n-      this.$el = patch(this._tree, vtree)\n+      this.$el = patch(this._vnode, vnode)\n     }\n-    this._tree = vtree\n+    this._vnode = vnode\n     callHook(this, 'updated')\n   }\n \n+  Vue.prototype._tryUpdate = function (data, children) {\n+    if (children) {\n+      // TODO: handle content slots\n+      this.$forceUpdate()\n+      return\n+    }\n+    // check props\n+    const props = this.$options.props\n+    if (props && data.attrs) {\n+      for (let key in props) {\n+        let oldVal = this[key]\n+        let newVal = data.attrs[key] || data.attrs[hyphenate(key)]\n+        if (oldVal !== newVal) {\n+          this.$forceUpdate()\n+        }\n+      }\n+    }\n+  }\n+\n   Vue.prototype.$mount = function (el) {\n     callHook(this, 'beforeMount')\n-    this.$el = el ? query(el) : document.createElement('div')\n-    this.$el.innerHTML = ''\n+    this.$el = el && query(el)\n+    if (this.$el) {\n+      this.$el.innerHTML = ''\n+    }\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n     this._mounted = true\n+    return this\n   }\n \n   Vue.prototype.$forceUpdate = function () {\n-    this._watcher.run()\n+    this._watcher.update()\n   }\n }"
            },
            {
                "commitId": "0b5e962943e88d6b5bc7b5c06851b2983d6201be",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -4,6 +4,7 @@ import { h, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n+  vm._mounted = false\n   const el = vm.$options.el\n   if (el) {\n     vm.$mount(el)\n@@ -35,6 +36,7 @@ export function renderMixin (Vue) {\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n     callHook(this, 'mounted')\n+    this._mounted = true\n   }\n \n   Vue.prototype.$forceUpdate = function () {"
            },
            {
                "commitId": "8cf836f2ecb876a17305287cb18e7009555c11f3",
                "additions": 5,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n import Watcher from '../observer/watcher'\n-import { query } from '../util/index'\n+import { query, resolveAsset } from '../util/index'\n import { h, patch } from '../vdom/index'\n import { callHook } from './lifecycle'\n \n@@ -11,7 +11,11 @@ export function initRender (vm) {\n }\n \n export function renderMixin (Vue) {\n+  // shorthands used in render functions\n   Vue.prototype.__h__ = h\n+  Vue.prototype.__d__ = function (id) {\n+    return resolveAsset(this.$options, 'directives', id, true)\n+  }\n \n   Vue.prototype._update = function (vtree) {\n     callHook(this, 'beforeUpdate')"
            },
            {
                "commitId": "914da492bf456de05205d0a0f82ecc4aa8719f6b",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -16,9 +16,9 @@ export function renderMixin (Vue) {\n   Vue.prototype._update = function (vtree) {\n     callHook(this, 'beforeUpdate')\n     if (!this._tree) {\n-      patch(this.$el, vtree)\n+      this.$el = patch(this.$el, vtree)\n     } else {\n-      patch(this._tree, vtree)\n+      this.$el = patch(this._tree, vtree)\n     }\n     this._tree = vtree\n     callHook(this, 'updated')"
            },
            {
                "commitId": "0694a9bfb63350d2cb7ed992fee82e6a632ec74a",
                "additions": 5,
                "deletions": 0,
                "patch": "@@ -1,6 +1,7 @@\n import Watcher from '../observer/watcher'\n import { query } from '../util/index'\n import { h, patch } from '../vdom/index'\n+import { callHook } from './lifecycle'\n \n export function initRender (vm) {\n   const el = vm.$options.el\n@@ -13,19 +14,23 @@ export function renderMixin (Vue) {\n   Vue.prototype.__h__ = h\n \n   Vue.prototype._update = function (vtree) {\n+    callHook(this, 'beforeUpdate')\n     if (!this._tree) {\n       patch(this.$el, vtree)\n     } else {\n       patch(this._tree, vtree)\n     }\n     this._tree = vtree\n+    callHook(this, 'updated')\n   }\n \n   Vue.prototype.$mount = function (el) {\n+    callHook(this, 'beforeMount')\n     this.$el = el ? query(el) : document.createElement('div')\n     this.$el.innerHTML = ''\n     this._watcher = new Watcher(this, this.$options.render, this._update)\n     this._update(this._watcher.value)\n+    callHook(this, 'mounted')\n   }\n \n   Vue.prototype.$forceUpdate = function () {"
            },
            {
                "commitId": "0e1ac079198044f22ea6c92d669a9a5f2336e9e0",
                "additions": 12,
                "deletions": 6,
                "patch": "@@ -3,25 +3,31 @@ import { query } from '../util/index'\n import { h, patch } from '../vdom/index'\n \n export function initRender (vm) {\n-  const options = vm.$options\n-  vm._el = query(options.el)\n-  vm._el.innerHTML = ''\n-  vm._watcher = new Watcher(vm, options.render, vm._update)\n-  vm._update(vm._watcher.value)\n+  const el = vm.$options.el\n+  if (el) {\n+    vm.$mount(el)\n+  }\n }\n \n export function renderMixin (Vue) {\n   Vue.prototype.__h__ = h\n \n   Vue.prototype._update = function (vtree) {\n     if (!this._tree) {\n-      patch(this._el, vtree)\n+      patch(this.$el, vtree)\n     } else {\n       patch(this._tree, vtree)\n     }\n     this._tree = vtree\n   }\n \n+  Vue.prototype.$mount = function (el) {\n+    this.$el = el ? query(el) : document.createElement('div')\n+    this.$el.innerHTML = ''\n+    this._watcher = new Watcher(this, this.$options.render, this._update)\n+    this._update(this._watcher.value)\n+  }\n+\n   Vue.prototype.$forceUpdate = function () {\n     this._watcher.run()\n   }"
            },
            {
                "commitId": "b5800b274c472897e64184ea716566422b3046cb",
                "additions": 28,
                "deletions": 0,
                "patch": "@@ -0,0 +1,28 @@\n+import Watcher from '../observer/watcher'\n+import { query } from '../util/index'\n+import { h, patch } from '../vdom/index'\n+\n+export function initRender (vm) {\n+  const options = vm.$options\n+  vm._el = query(options.el)\n+  vm._el.innerHTML = ''\n+  vm._watcher = new Watcher(vm, options.render, vm._update)\n+  vm._update(vm._watcher.value)\n+}\n+\n+export function renderMixin (Vue) {\n+  Vue.prototype.__h__ = h\n+\n+  Vue.prototype._update = function (vtree) {\n+    if (!this._tree) {\n+      patch(this._el, vtree)\n+    } else {\n+      patch(this._tree, vtree)\n+    }\n+    this._tree = vtree\n+  }\n+\n+  Vue.prototype.$forceUpdate = function () {\n+    this._watcher.run()\n+  }\n+}"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "give me all the commits for vnode.js file?",
        "number": 6,
        "category": 2,
        "response": "Here are all the commits for the `vnode.js` file:\n\n1. Commit ID: 9949ab5d14e3620f40b876cffbc710a33d0237b2\n   - Message: \"Merge pull request #3 from dwelch2344/move_to_typescript\\n\\nWIP: typescript love on the tests\"\n   - Date: 2022-05-04T21:25:34Z\n\n2. Commit ID: 40dccfedd1d92ef9d61ee350ed8fbd7fc525b5b9\n   - Message: \"chore: fix test harness; most of the tooling + test harness is happy; coverage still needs fixing\"\n   - Date: 2022-05-03T17:04:55Z\n\n3. Commit ID: 982d5a492fb95577217e2dacaa044eabe78a8601\n   - Message: \"fix(types): support string type for style in VNode data (#9728)\\n\\nfix #9727\"\n   - Date: 2019-03-18T07:47:43Z\n\n4. Commit ID: dbc0582587f90e78867809bb6ae683301cd0626b\n   - Message: \"feat: dynamic directive arguments for v-on, v-bind and custom directives (#9373)\"\n   - Date: 2019-01-26T04:22:44Z\n\n5. Commit ID: 097f6229dffc34af452b106ad2a3b58845588807\n   - Message: \"fix(core): avoid mutating original children when cloning vnode\\n\\nThe on-demand clone strategy introduced in 956756b mutates the owner\\narray of the cloned vnode. This causes the newly cloned vnode to be\\ndestroyed when the parent node is destroyed. This is fixed by cloning\\nthe children array when cloning a vnode.\\n\\nfix #7975\"\n   - Date: 2018-12-01T22:05:36Z\n\n6. Commit ID: 4ecc21c29ec12bb33d3b426cb4d42c579e9b0f2d\n   - Message: \"feat(devtools): store functional render context on vnode in development (#8586)\"\n   - Date: 2018-11-30T22:31:44Z\n\n7. Commit ID: 8227fb35240ab1f301c30a6ad5d4d25071fa7996\n   - Message: \"fix: add missing `asyncMeta` during VNode cloning (#7861)\"\n   - Date: 2018-03-23T23:13:10Z\n\n8. Commit ID: d7d9b002fd60d246b1ef65f71b55b45f46563b4d\n   - Message: \"chore: fix typo (#7781)\"\n   - Date: 2018-03-09T13:54:55Z\n\n9. Commit ID: 956756b1be7084daf8b6afb92ac0da7c24cde2a5\n   - Message: \"refactor: use more efficient on-demand clone to handle reused node edge cases\\n\\nremoves unnecessary slot/static node clones, fix #7292\"\n   - Date: 2017-12-21T00:44:24Z\n\n10. Commit ID: 604e081d0456ed136b24b5f759c608d153dfae93\n    - Message: \"fix: ensure functionalContext is cloned during slot clones\\n\\nfix #7106\"\n    - Date: 2017-11-22T21:37:24Z\n\n11. Commit ID: 1cf02efda206185cb72bbaafb00037fa6269e3f3\n    - Message: \"fix: also clone component slot children during deepClone\\n\\nfix #6891, fix #6915\"\n    - Date: 2017-10-26T16:00:19Z\n\n12. Commit ID: 53431c63a9033bb9a73c915bca8525f0d7988c26\n    - Message: \"types: fix flow typing\"\n    - Date: 2017-10-11T15:24:39Z\n\n13. Commit ID: 421658884f7ca786747abf9b89e00925fdfdfba8\n    - Message: \"fix: fix scoped CSS for nested nodes in functional components\"\n    - Date: 2017-10-11T15:17:46Z\n\n14. Commit ID: 050bb33f9b02589357c037623ea8cbf8ff13555b\n    - Message: \"feat: scoped CSS support for functional components\"\n    - Date: 2017-10-11T14:38:46Z\n\n15. Commit ID: 53463619e5d19d35dfad1a4245a8dc583681feb3\n    - Message: \"perf: deep clone slot vnodes on re-render (#6478)\\n\\navoid unnecessary assignment.\"\n    - Date: 2017-09-01T16:14:55Z\n\n16. Commit ID: 0529040c17b8632032a43d142aac88386f6b4a1f\n    - Message: \"fix: deep clone slot vnodes on re-render\\n\\nfix #6372\"\n    - Date: 2017-08-29T22:47:10Z\n\n17. Commit ID: 11614d63b7862b68b11cc45c0891437c62a832d7\n    - Message: \"feat(v-on): support v-on object syntax with no arguments\\n\\nNote this does not support modifiers and is meant to be used for handling\\nevents proxying in higher-order-components.\"\n    - Date: 2017-07-11T08:36:04Z\n\n18. Commit ID: fed602b90be89a43b4ec41b5a2e0a526d3a5f4a2\n    - Message: \"refactor: also clone vnode.asyncFactory\"\n    - Date: 2017-07-11T05:06:23Z\n\n19. Commit ID: e4da249ab8ef32a0b8156c840c9d2b9773090f8a\n    - Message: \"feat: add `comments` option to allow preserving comments in template  (#5951)\\n\\nclose #5392\"\n    - Date: 2017-06-30T00:56:23Z\n\n20. Commit ID: d33c1250ee77dd337eb4979851ade331f177b890\n    - Message: \"fix:when using object syntax in v-bind, special attribute have no effect\"\n    - Date: 2017-06-16T18:02:37Z\n\n21. Commit ID: 9cf6646f46ef3c13236677e58e72d2c6dd5c8abf\n    - Message: \"support directly rendering async components in SSR\"\n    - Date: 2017-05-24T08:50:17Z\n\n22. Commit ID: 7404091896fda2c87ecac64efc24324ff1885e2c\n    - Message: \"support async hydration\"\n    - Date: 2017-05-24T08:50:17Z\n\n23. Commit ID: 43485fbc5b779e02122c3b7fc64296a2cfee31f6\n    - Message: \"Merge branch ssr-optimize into dev\"\n    - Date: 2017-05-18T08:56:05Z\n\n24. Commit ID: 26953f5cacc03440df394ebbc74023efd364b7e0\n    - Message: \"add semis to flow decls for better syntax highlighting\"\n    - Date: 2017-05-15T08:01:30Z\n\n25. Commit ID: 0ccefff794c5fe73b80b9faf5ae5bfd8ec1a500f\n    - Message: \"support v-for on scoped slots (fix #5615)\"\n    - Date: 2017-05-09T15:22:55Z\n\n26. Commit ID: 5d965d5b3bbe0e76cdb97e41e01a704322253e09\n    - Message: \"clone `isComment` when cloneVNode (#5633)\"\n    - Date: 2017-05-09T13:12:59Z\n\n27. Commit ID: 1073035164b809872bf35a3b007848979f86f48a\n    - Message: \"fix activate hook call timing (fix vue-router#1212)\"\n    - Date: 2017-04-07T07:30:37Z\n\n28. Commit ID: a12d32a56df2519c9cdf8d2da9d9425876263f89\n    - Message: \"fix style diffing on cached/slot elements (fix #5318)\"\n    - Date: 2017-04-03T06:13:57Z\n\n29. Commit ID: 2afaac2b397b4b04713488aeb62e5e222e5dc121\n    - Message: \"cache vnodes length (#5125)\"\n    - Date: 2017-03-08T02:24:25Z\n\n30. Commit ID: 9d6c8ec268f659a715e3b38c97a1e03964961703\n    - Message: \"feat: allow customization of component v-model prop/event via model option (close #4515)\"\n    - Date: 2017-01-22T19:31:43Z\n\n31. Commit ID: fe02bc3a27b3b33f9467980f61126edf97105287\n    - Message: \"ignore deprecated alias\"\n    - Date: 2017-01-12T23:24:37Z\n\n32. Commit ID: ced2dfc8f704b07cd59467eca38c58c590d0c012\n    - Message: \"expose vnode.child for backwards compat, update .flowconfig & ts types\"\n    - Date: 2017-01-12T23:04:36Z\n\n33. Commit ID: 30258a9a60b96c25c95685cb17ee35838830ee4c\n    - Message: \"rename vnode.child -> vnode.componentInstance\"\n    - Date: 2017-01-12T22:44:19Z\n\n34. Commit ID: 207c18c47f8c94f6d92675b28bc67511b7897246\n    - Message: \"further reduce normalizeChildren usage\"\n    - Date: 2016-12-05T01:36:40Z\n\n35. Commit ID: 7c3c86f36044ada983c09e7733841cb4c55de9d1\n    - Message: \"fix namespace hoisting\"\n    - Date: 2016-12-05T01:36:40Z\n\n36. Commit ID: 79e1058799dcde0b7e341ef44b590ecbf1e3a722\n    - Message: \"wip: refactor compiler to skip normalization when possible\\n\\nwip fix\\n\\nwip fix\\n\\nwip fix\"\n    - Date: 2016-12-05T01:36:40Z\n\n37. Commit ID: 7431e4d16c92862ac74fdb3053de9295c809b586\n    - Message: \"emptyVNode -> createEmptyVNode\"\n    - Date: 2016-12-05T01:36:40Z\n\n38. Commit ID: 7b389bc34e12442663de1939882b523345a9e46d\n    - Message: \"avoid warning unknown custom elements in v-pre\"\n    - Date: 2016-11-24T17:47:27Z\n\n39. Commit ID: 303378f85b26934396e2f6dc0973f6982da2beb1\n    - Message: \"support default scoped slot + function children as scoped slot\"\n    - Date: 2016-11-20T17:03:43Z\n\n40. Commit ID: ff551029bf872ad067ac7c5ba7c6311fdde7c674\n    - Message: \"wip: fix flow type for weex merge\"\n    - Date: 2016-11-07T21:26:06Z\n\n41. Commit ID: b69b4a4eeff204488c3eb60cac951f9808581e1c\n    - Message: \"tweak style merge for performance\"\n    - Date: 2016-11-07T21:20:10Z\n\n42. Commit ID: e960cd104e67e8e410956fa589090fe171382528\n    - Message: \"enable style merge behavior between parent-child components (fix #3997) (#4138)\\n\\n* merge style between components\\r\\n\\r\\n* update test case\\r\\n\\r\\n* update style compiler\\r\\n\\r\\n* add paren to style binding code\\r\\n\\r\\n* update background property parsing\\r\\n\\r\\n* introduce interpolation warning and refactor var to const\"\n    - Date: 2016-11-07T21:19:48Z\n\n43. Commit ID: ec824be88e9bc71b31e5c4a43f80d921674dca66\n    - Message: \"fix v-once inside v-for (fix #3964)\"\n    - Date: 2016-11-03T02:34:36Z\n\n44. Commit ID: 0cd1489e68891e4ca532ce7299d09e8af5ae3f52\n    - Message: \".number modifier should work with select, radio, checkbox (fix #4018) (#4022)\\n\\n* support number modifier in select, radio, checkbox\\r\\n\\r\\n* add test case\\r\\n\\r\\n* add ASTModifier type to specify modifiers type\\r\\n\\r\\n* fix typo\\r\\n\\r\\n* keep code consistent\"\n    - Date: 2016-11-01T15:50:22Z\n\n45. Commit ID: 1a8720d6ead500eed5d40457a3e7f59fe8972472\n    - Message: \"Fix typo in component (#3978)\"\n    - Date: 2016-10-19T14:33:17Z\n\n46. Commit ID: 1fa3844dc26745b4cb855b0934bd1b132ba33d9b\n    - Message: \"refactor directive update implementation\"\n    - Date: 2016-10-12T00:31:13Z\n\n47. Commit ID: 3446d1485d36b91ef42c53268cb69ecb047538a5\n    - Message: \"support functional components as named slot (fix #3872)\"\n    - Date: 2016-10-11T02:41:14Z\n\n48. Commit ID: d6a7568891d0c3368471322de5d730172d92b9e4\n    - Message: \"improve v-bind implementation and make it work on components (fix #3670)\"\n    - Date: 2016-09-14T14:14:45Z\n\n49. Commit ID: f6b1a51729f705bc49c6eaaf32ec095efd97401c\n    - Message: \"fix hot-reload not updating static nodes\"\n    - Date: 2016-08-29T15:45:08Z\n\n50. Commit ID: 014d2f8599f9afc0754e603b1528a12e74bd209a\n    - Message: \"fix vdom patch edge case for static nodes being reused and as insertion reference node (fix #3533)\"\n    - Date: 2016-08-27T20:29:07Z\n\n51. Commit ID: ed2085974b2a385ca1fd8cd696917d6cda8322e7\n    - Message: \"ensure mergeVNodeHook does not inject duplicate hooks\"\n    - Date: 2016-08-26T23:19:51Z\n\n52. Commit ID: d2df58e547a7e1018c72a52714be7dee4ad06922\n    - Message: \"move v-show marker to runtime so that render functions work as expected (fix #3488)\"\n    - Date: 2016-08-20T15:14:41Z\n\n53. Commit ID: ba5fb31188467c9f07cdcfa94e9469e172098ec5\n    - Message: \"fix transition insert hook duplicate invocation on slot nodes (fix #3474)\"\n    - Date: 2016-08-18T16:00:31Z\n\n54. Commit ID: 18386c4cf4fe829f447687734a5bf03905d0db44\n    - Message: \"fix static nodes optimization inside v-for (fix #3406)\"\n    - Date: 2016-08-08T23:03:00Z\n\n55. Commit ID: fe801b16e4da63513bce95bfa762a8a36d83fe59\n    - Message: \"wip: fix $parent after children change\"\n    - Date: 2016-08-05T16:43:35Z\n\n56. Commit ID: b5b963f51df1fa3124cd8a9846be5455408bc52a\n    - Message: \"wip: refactor children resolution (remove thunk mechanism)\"\n    - Date: 2016-08-05T16:10:13Z\n\n57. Commit ID: c66b7566c682af653dc475fab1475db5484e40ee\n    - Message: \"fix flow\"\n    - Date: 2016-08-05T07:10:40Z\n\n58. Commit ID: 59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8\n    - Message: \"support class/style in v-bind object\"\n    - Date: 2016-08-05T06:59:33Z\n\n59. Commit ID: 351aef3cb4ada980f105f98f8b835876e8d4d689\n    - Message: \"use comment node as empty placeholder (fix <transition> SSR hydration)\"\n    - Date: 2016-08-05T05:52:09Z\n\n60. Commit ID: 40b93e6527d9ecdb308925114bf14cb60b36eae0\n    - Message: \"avoid unnecessary enter transitions on nested inserted elements\"\n    - Date: 2016-08-05T02:17:59Z\n\n61. Commit ID: 35ee5b105e8a517571b9bb9a87160c6ffbdad779\n    - Message: \"remove staticAttrs\"\n    - Date: 2016-07-29T14:45:43Z\n\n62. Commit ID: 74f8b98509d24487e1a8d1588b4128a7a1046a41\n    - Message: \"handle static vnodes properly during patch (fix #3325)\"\n    - Date: 2016-07-26T19:49:40Z\n\n63. Commit ID: 3ce450b6dc5f2135266c8a38818371e9d4f1f460\n    - Message: \"use more proper flow type syntax\"\n    - Date: 2016-07-26T01:28:46Z\n\n64. Commit ID: ea9c6c37c3ef0ef3706afa94070b89a7464c559c\n    - Message: \"support v-on .native modifier on components\"\n    - Date: 2016-07-19T22:56:10Z\n\n65. Commit ID: 69ecdcb05e3f5db32af889962fe8253d49d7390d\n    - Message: \"rename vnode.data.props -> domProps\"\n    - Date: 2016-07-19T21:52:10Z\n\n66. Commit ID: e6871a33c17fd7dfd58fba6c7c6b6182f0ff2f0e\n    - Message: \"update flow annotations\"\n    - Date: 2016-07-15T21:48:42Z\n\n67. Commit ID: 9421bd48066906e20052e04cf88c4ae623080a95\n    - Message: \"extract getRealChild for abstract components\"\n    - Date: 2016-07-06T21:07:46Z\n\n68. Commit ID: 06b470369a7bde2a7f36468191e424b4c455db67\n    - Message: \"element namespace should be resolved at runtime for render function / jsx usage\"\n    - Date: 2016-06-27T18:02:14Z\n\n69. Commit ID: 1b3b19491fd47f3634e30d7fcce991881de16530\n    - Message: \"merge renderElement and renderElementWithChildren\"\n    - Date: 2016-06-27T16:25:02Z\n\n70. Commit ID: cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9\n    - Message: \"apply scopeId to slot contents too\"\n    - Date: 2016-06-15T17:33:12Z\n\n71. Commit ID: b0ad94fc876826a8ee3226320aacd40b8967f8dd\n    - Message: \"properly encode HTML in server-side rendering (fix #3078)\"\n    - Date: 2016-06-14T18:15:41Z\n\n72. Commit ID: a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6\n    - Message: \"fix whitespace vnode identity breaking patch (fix #3043)\"\n    - Date: 2016-06-08T17:28:55Z\n\n73. Commit ID: a5a9dc9b694da007a13bd5adfd64b0ab0750ad57\n    - Message: \"support keep-alive\"\n    - Date: 2016-06-04T14:53:05Z\n\n74. Commit ID: 4bcdce895c5dc0403b6a94b0ad71b2bc57734234\n    - Message: \"record original tag name on vnode for components using is attribute\"\n    - Date: 2016-06-02T22:18:32Z\n\n75. Commit ID: d40ab0ca8760b9d8ec8be630e2360e6927ba8b3e\n    - Message: \"fix component client-side hydration\"\n    - Date: 2016-06-01T22:20:13Z\n\n76. Commit ID: f8cfc81826715b23dac054b6d1727594d2caeebd\n    - Message: \"remove unnecessary v-pre related code\"\n    - Date: 2016-06-01T19:03:09Z\n\n77. Commit ID: 8d229b2442e8cc5b2801fa55a4ea8ea766721381\n    - Message: \"support v-bind on objects\"\n    - Date: 2016-05-25T00:41:06Z\n\n78. Commit ID: 7f85acb4e5c28052e07d5e2c4cf2903cac0e4bd5\n    - Message: \"expose oldValue on directive bindings\"\n    - Date: 2016-05-24T22:28:17Z\n\n79. Commit ID: 48f22c9b17a9def00dcfa4899fee9e60c8933dbc\n    - Message: \"fix flow error\"\n    - Date: 2016-05-24T04:27:18Z\n\n80. Commit ID: 837853d95ad1224ed12ba2454b791591884caf2e\n    - Message: \"better inferring of component names in warnings\"\n    - Date: 2016-05-19T17:58:11Z\n\n81. Commit ID: 20fb79a1ea098bedda6fec8bebbb184ac51fce20\n    - Message: \"new render mechanism (#2857)\\n\\n* updated compiler with new render functions\\r\\n\\r\\n* separated createElement into renderSelf & renderElement\\r\\nsupported getters for text node & static root\\r\\n\\r\\n* adapted new element creator into render call\\r\\n\\r\\n* improved \\\\$createElement\\r\\n\\r\\n* fixed by flow check\\r\\n\\r\\n* fixed ssr bugs for $createElement\"\n    - Date: 2016-05-14T19:49:18Z\n\n82. Commit ID: 750bec1024478022453277a4d175cff5a8445672\n    - Message: \"annotate platforms/web\"\n    - Date: 2016-05-14T11:40:56Z\n\n83. Commit ID: 59fcd4e7a749561ad6acf3ec50c32c24b33d8ec4\n    - Message: \"finish annotating vdom\"\n    - Date: 2016-05-14T07:38:41Z\n\n84. Commit ID: 45d96c7dbc399696138c9d020e13f97cf94ce181\n    - Message: \"annotation for vdom (wip)\"\n    - Date: 2016-05-14T07:08:21Z\n\n85. Commit ID: 354ea616b5ec4826e23a88465e404fd3b382d9f4\n    - Message: \"annotate Vue class\"\n    - Date: 2016-05-12T23:13:38Z\n\n86. Commit ID: 6593be9f75ea229e71e5b0530bb0f27aeee57afc\n    - Message: \"update unit tests convention + basic component tests\"\n    - Date: 2016-05-09T22:08:18Z\n\n87. Commit ID: f4a2afb3b33991c1694e8fcb7d62641c30eeaf53\n    - Message: \"expose context on vnode, simplify render methods\"\n    - Date: 2016-04-25T03:31:07Z\n\n88. Commit ID: 955e2f839175fadbd0218f7b78c48ebbbcca6349\n    - Message: \"restructure (build pass)\"\n    - Date: 2016-04-23T20:12:19Z\n\n89. Commit ID: ec5bcefca73160e6d283b8a0c4e1457f42f87081\n    - Message: \"tweak namespace changes\"\n    - Date: 2016-04-23T17:37:47Z\n\n90. Commit ID: 6e251e0721b4dbb4896999df78450d912dcba30d\n    - Message: \"Change svg parameter to namespace (#3)\\n\\n* change svg parameter into namespace\\r\\n\\r\\n* fixed svg to namespace bug\\r\\n\\r\\n* change svg detecting into namespace detecting in parser\\r\\n\\r\\n* fixed eslint error\"\n    - Date: 2016-04-23T17:29:31Z\n\n91. Commit ID: 9a347e02b4b1fd8ddc51db6c2ba08a1831f4dfd0\n    - Message: \"allow data to be undefined\"\n    - Date: 2016-04-21T16:37:12Z\n\n92. Commit ID: d87987780a208fe3c65415a4a1cab58250ffa9a3\n    - Message: \"rename\"\n    - Date: 2016-04-21T08:24:26Z\n\n93. Commit ID: 1a35cf4a21e8c8e897c2d6f291b99376b12b9fac\n    - Message: \"support template slot\"\n    - Date: 2016-04-15T02:55:29Z\n\n94. Commit ID: 0ab0600599dcc593695560382af1c1a8119ce848\n    - Message: \"restructure\"\n    - Date: 2016-04-12T23:42:15Z\n\n95. Commit ID: 69e94eb453ee0da21f9a0506d2f01269865a4776\n    - Message: \"move flatten into vdom implementation\"\n    - Date: 2016-04-11T03:54:53Z\n\n96. Commit ID: a879ec06ef9504db8df2a19aac0d07609fe36131\n    - Message: \"init\"\n    - Date: 2016-04-11T02:47:28Z",
        "chain_of_thought": "To address the question, \"give me all the commits for vnode.js file,\" we need to identify the relevant nodes and relationships in the schema. The file in question is \"vnode.js,\" which corresponds to the File node. We are interested in finding all the commits associated with this file, which involves the Commit node. The relationship between Commit and File is the changed relationship, which indicates that a commit has modified a file.\n\nHere's how we can construct the query:\n\n1. Identify the File node with the name \"vnode.js.\"\n2. Find all Commit nodes that have a changed relationship with this File node.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'vnode.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\nORDER BY committedDate DESC\n```\n\nThis query will return all commits that have modified the file \"vnode.js,\" along with their commit IDs, messages, and committed dates, sorted by the committed date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'vnode.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\nORDER BY committedDate DESC\n",
        "result": [
            {
                "commitId": "9949ab5d14e3620f40b876cffbc710a33d0237b2",
                "commitMessage": "\"Merge pull request #3 from dwelch2344/move_to_typescript\n\nWIP: typescript love on the tests\"",
                "committedDate": "2022-05-04T21:25:34Z"
            },
            {
                "commitId": "40dccfedd1d92ef9d61ee350ed8fbd7fc525b5b9",
                "commitMessage": "\"chore: fix test harness; most of the tooling + test harness is happy; coverage still needs fixing\"",
                "committedDate": "2022-05-03T17:04:55Z"
            },
            {
                "commitId": "982d5a492fb95577217e2dacaa044eabe78a8601",
                "commitMessage": "\"fix(types): support string type for style in VNode data (#9728)\n\nfix #9727\"",
                "committedDate": "2019-03-18T07:47:43Z"
            },
            {
                "commitId": "dbc0582587f90e78867809bb6ae683301cd0626b",
                "commitMessage": "\"feat: dynamic directive arguments for v-on, v-bind and custom directives (#9373)\"",
                "committedDate": "2019-01-26T04:22:44Z"
            },
            {
                "commitId": "097f6229dffc34af452b106ad2a3b58845588807",
                "commitMessage": "\"fix(core): avoid mutating original children when cloning vnode\n\nThe on-demand clone strategy introduced in 956756b mutates the owner\narray of the cloned vnode. This causes the newly cloned vnode to be\ndestroyed when the parent node is destroyed. This is fixed by cloning\nthe children array when cloning a vnode.\n\nfix #7975\"",
                "committedDate": "2018-12-01T22:05:36Z"
            },
            {
                "commitId": "4ecc21c29ec12bb33d3b426cb4d42c579e9b0f2d",
                "commitMessage": "\"feat(devtools): store functional render context on vnode in development (#8586)\"",
                "committedDate": "2018-11-30T22:31:44Z"
            },
            {
                "commitId": "8227fb35240ab1f301c30a6ad5d4d25071fa7996",
                "commitMessage": "\"fix: add missing `asyncMeta` during VNode cloning (#7861)\"",
                "committedDate": "2018-03-23T23:13:10Z"
            },
            {
                "commitId": "d7d9b002fd60d246b1ef65f71b55b45f46563b4d",
                "commitMessage": "\"chore: fix typo (#7781)\"",
                "committedDate": "2018-03-09T13:54:55Z"
            },
            {
                "commitId": "956756b1be7084daf8b6afb92ac0da7c24cde2a5",
                "commitMessage": "\"refactor: use more efficient on-demand clone to handle reused node edge cases\n\nremoves unnecessary slot/static node clones, fix #7292\"",
                "committedDate": "2017-12-21T00:44:24Z"
            },
            {
                "commitId": "604e081d0456ed136b24b5f759c608d153dfae93",
                "commitMessage": "\"fix: ensure functionalContext is cloned during slot clones\n\nfix #7106\"",
                "committedDate": "2017-11-22T21:37:24Z"
            },
            {
                "commitId": "1cf02efda206185cb72bbaafb00037fa6269e3f3",
                "commitMessage": "\"fix: also clone component slot children during deepClone\n\nfix #6891, fix #6915\"",
                "committedDate": "2017-10-26T16:00:19Z"
            },
            {
                "commitId": "53431c63a9033bb9a73c915bca8525f0d7988c26",
                "commitMessage": "\"types: fix flow typing\"",
                "committedDate": "2017-10-11T15:24:39Z"
            },
            {
                "commitId": "421658884f7ca786747abf9b89e00925fdfdfba8",
                "commitMessage": "\"fix: fix scoped CSS for nested nodes in functional components\"",
                "committedDate": "2017-10-11T15:17:46Z"
            },
            {
                "commitId": "050bb33f9b02589357c037623ea8cbf8ff13555b",
                "commitMessage": "\"feat: scoped CSS support for functional components\"",
                "committedDate": "2017-10-11T14:38:46Z"
            },
            {
                "commitId": "53463619e5d19d35dfad1a4245a8dc583681feb3",
                "commitMessage": "\"perf: deep clone slot vnodes on re-render (#6478)\n\navoid unnecessary assignment.\"",
                "committedDate": "2017-09-01T16:14:55Z"
            },
            {
                "commitId": "0529040c17b8632032a43d142aac88386f6b4a1f",
                "commitMessage": "\"fix: deep clone slot vnodes on re-render\n\nfix #6372\"",
                "committedDate": "2017-08-29T22:47:10Z"
            },
            {
                "commitId": "11614d63b7862b68b11cc45c0891437c62a832d7",
                "commitMessage": "\"feat(v-on): support v-on object syntax with no arguments\n\nNote this does not support modifiers and is meant to be used for handling\nevents proxying in higher-order-components.\"",
                "committedDate": "2017-07-11T08:36:04Z"
            },
            {
                "commitId": "fed602b90be89a43b4ec41b5a2e0a526d3a5f4a2",
                "commitMessage": "\"refactor: also clone vnode.asyncFactory\"",
                "committedDate": "2017-07-11T05:06:23Z"
            },
            {
                "commitId": "e4da249ab8ef32a0b8156c840c9d2b9773090f8a",
                "commitMessage": "\"feat: add `comments` option to allow preserving comments in template  (#5951)\n\nclose #5392\"",
                "committedDate": "2017-06-30T00:56:23Z"
            },
            {
                "commitId": "d33c1250ee77dd337eb4979851ade331f177b890",
                "commitMessage": "\"fix:when using object syntax in v-bind, special attribute have no effect\"",
                "committedDate": "2017-06-16T18:02:37Z"
            },
            {
                "commitId": "9cf6646f46ef3c13236677e58e72d2c6dd5c8abf",
                "commitMessage": "\"support directly rendering async components in SSR\"",
                "committedDate": "2017-05-24T08:50:17Z"
            },
            {
                "commitId": "7404091896fda2c87ecac64efc24324ff1885e2c",
                "commitMessage": "\"support async hydration\"",
                "committedDate": "2017-05-24T08:50:17Z"
            },
            {
                "commitId": "43485fbc5b779e02122c3b7fc64296a2cfee31f6",
                "commitMessage": "\"Merge branch ssr-optimize into dev\"",
                "committedDate": "2017-05-18T08:56:05Z"
            },
            {
                "commitId": "26953f5cacc03440df394ebbc74023efd364b7e0",
                "commitMessage": "\"add semis to flow decls for better syntax highlighting\"",
                "committedDate": "2017-05-15T08:01:30Z"
            },
            {
                "commitId": "0ccefff794c5fe73b80b9faf5ae5bfd8ec1a500f",
                "commitMessage": "\"support v-for on scoped slots (fix #5615)\"",
                "committedDate": "2017-05-09T15:22:55Z"
            },
            {
                "commitId": "5d965d5b3bbe0e76cdb97e41e01a704322253e09",
                "commitMessage": "\"clone `isComment` when cloneVNode (#5633)\"",
                "committedDate": "2017-05-09T13:12:59Z"
            },
            {
                "commitId": "1073035164b809872bf35a3b007848979f86f48a",
                "commitMessage": "\"fix activate hook call timing (fix vue-router#1212)\"",
                "committedDate": "2017-04-07T07:30:37Z"
            },
            {
                "commitId": "a12d32a56df2519c9cdf8d2da9d9425876263f89",
                "commitMessage": "\"fix style diffing on cached/slot elements (fix #5318)\"",
                "committedDate": "2017-04-03T06:13:57Z"
            },
            {
                "commitId": "2afaac2b397b4b04713488aeb62e5e222e5dc121",
                "commitMessage": "\"cache vnodes length (#5125)\"",
                "committedDate": "2017-03-08T02:24:25Z"
            },
            {
                "commitId": "9d6c8ec268f659a715e3b38c97a1e03964961703",
                "commitMessage": "\"feat: allow customization of component v-model prop/event via model option (close #4515)\"",
                "committedDate": "2017-01-22T19:31:43Z"
            },
            {
                "commitId": "fe02bc3a27b3b33f9467980f61126edf97105287",
                "commitMessage": "\"ignore deprecated alias\"",
                "committedDate": "2017-01-12T23:24:37Z"
            },
            {
                "commitId": "ced2dfc8f704b07cd59467eca38c58c590d0c012",
                "commitMessage": "\"expose vnode.child for backwards compat, update .flowconfig & ts types\"",
                "committedDate": "2017-01-12T23:04:36Z"
            },
            {
                "commitId": "30258a9a60b96c25c95685cb17ee35838830ee4c",
                "commitMessage": "\"rename vnode.child -> vnode.componentInstance\"",
                "committedDate": "2017-01-12T22:44:19Z"
            },
            {
                "commitId": "207c18c47f8c94f6d92675b28bc67511b7897246",
                "commitMessage": "\"further reduce normalizeChildren usage\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7c3c86f36044ada983c09e7733841cb4c55de9d1",
                "commitMessage": "\"fix namespace hoisting\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "79e1058799dcde0b7e341ef44b590ecbf1e3a722",
                "commitMessage": "\"wip: refactor compiler to skip normalization when possible\n\nwip fix\n\nwip fix\n\nwip fix\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7431e4d16c92862ac74fdb3053de9295c809b586",
                "commitMessage": "\"emptyVNode -> createEmptyVNode\"",
                "committedDate": "2016-12-05T01:36:40Z"
            },
            {
                "commitId": "7b389bc34e12442663de1939882b523345a9e46d",
                "commitMessage": "\"avoid warning unknown custom elements in v-pre\"",
                "committedDate": "2016-11-24T17:47:27Z"
            },
            {
                "commitId": "303378f85b26934396e2f6dc0973f6982da2beb1",
                "commitMessage": "\"support default scoped slot + function children as scoped slot\"",
                "committedDate": "2016-11-20T17:03:43Z"
            },
            {
                "commitId": "ff551029bf872ad067ac7c5ba7c6311fdde7c674",
                "commitMessage": "\"wip: fix flow type for weex merge\"",
                "committedDate": "2016-11-07T21:26:06Z"
            },
            {
                "commitId": "b69b4a4eeff204488c3eb60cac951f9808581e1c",
                "commitMessage": "\"tweak style merge for performance\"",
                "committedDate": "2016-11-07T21:20:10Z"
            },
            {
                "commitId": "e960cd104e67e8e410956fa589090fe171382528",
                "commitMessage": "\"enable style merge behavior between parent-child components (fix #3997) (#4138)\n\n* merge style between components\r\n\r\n* update test case\r\n\r\n* update style compiler\r\n\r\n* add paren to style binding code\r\n\r\n* update background property parsing\r\n\r\n* introduce interpolation warning and refactor var to const\"",
                "committedDate": "2016-11-07T21:19:48Z"
            },
            {
                "commitId": "ec824be88e9bc71b31e5c4a43f80d921674dca66",
                "commitMessage": "\"fix v-once inside v-for (fix #3964)\"",
                "committedDate": "2016-11-03T02:34:36Z"
            },
            {
                "commitId": "0cd1489e68891e4ca532ce7299d09e8af5ae3f52",
                "commitMessage": "\".number modifier should work with select, radio, checkbox (fix #4018) (#4022)\n\n* support number modifier in select, radio, checkbox\r\n\r\n* add test case\r\n\r\n* add ASTModifier type to specify modifiers type\r\n\r\n* fix typo\r\n\r\n* keep code consistent\"",
                "committedDate": "2016-11-01T15:50:22Z"
            },
            {
                "commitId": "1a8720d6ead500eed5d40457a3e7f59fe8972472",
                "commitMessage": "\"Fix typo in component (#3978)\"",
                "committedDate": "2016-10-19T14:33:17Z"
            },
            {
                "commitId": "1fa3844dc26745b4cb855b0934bd1b132ba33d9b",
                "commitMessage": "\"refactor directive update implementation\"",
                "committedDate": "2016-10-12T00:31:13Z"
            },
            {
                "commitId": "3446d1485d36b91ef42c53268cb69ecb047538a5",
                "commitMessage": "\"support functional components as named slot (fix #3872)\"",
                "committedDate": "2016-10-11T02:41:14Z"
            },
            {
                "commitId": "d6a7568891d0c3368471322de5d730172d92b9e4",
                "commitMessage": "\"improve v-bind implementation and make it work on components (fix #3670)\"",
                "committedDate": "2016-09-14T14:14:45Z"
            },
            {
                "commitId": "f6b1a51729f705bc49c6eaaf32ec095efd97401c",
                "commitMessage": "\"fix hot-reload not updating static nodes\"",
                "committedDate": "2016-08-29T15:45:08Z"
            },
            {
                "commitId": "014d2f8599f9afc0754e603b1528a12e74bd209a",
                "commitMessage": "\"fix vdom patch edge case for static nodes being reused and as insertion reference node (fix #3533)\"",
                "committedDate": "2016-08-27T20:29:07Z"
            },
            {
                "commitId": "ed2085974b2a385ca1fd8cd696917d6cda8322e7",
                "commitMessage": "\"ensure mergeVNodeHook does not inject duplicate hooks\"",
                "committedDate": "2016-08-26T23:19:51Z"
            },
            {
                "commitId": "d2df58e547a7e1018c72a52714be7dee4ad06922",
                "commitMessage": "\"move v-show marker to runtime so that render functions work as expected (fix #3488)\"",
                "committedDate": "2016-08-20T15:14:41Z"
            },
            {
                "commitId": "ba5fb31188467c9f07cdcfa94e9469e172098ec5",
                "commitMessage": "\"fix transition insert hook duplicate invocation on slot nodes (fix #3474)\"",
                "committedDate": "2016-08-18T16:00:31Z"
            },
            {
                "commitId": "18386c4cf4fe829f447687734a5bf03905d0db44",
                "commitMessage": "\"fix static nodes optimization inside v-for (fix #3406)\"",
                "committedDate": "2016-08-08T23:03:00Z"
            },
            {
                "commitId": "fe801b16e4da63513bce95bfa762a8a36d83fe59",
                "commitMessage": "\"wip: fix $parent after children change\"",
                "committedDate": "2016-08-05T16:43:35Z"
            },
            {
                "commitId": "b5b963f51df1fa3124cd8a9846be5455408bc52a",
                "commitMessage": "\"wip: refactor children resolution (remove thunk mechanism)\"",
                "committedDate": "2016-08-05T16:10:13Z"
            },
            {
                "commitId": "c66b7566c682af653dc475fab1475db5484e40ee",
                "commitMessage": "\"fix flow\"",
                "committedDate": "2016-08-05T07:10:40Z"
            },
            {
                "commitId": "59b2a0eeb32126cd6a35c0c82cfdcddf216e0df8",
                "commitMessage": "\"support class/style in v-bind object\"",
                "committedDate": "2016-08-05T06:59:33Z"
            },
            {
                "commitId": "351aef3cb4ada980f105f98f8b835876e8d4d689",
                "commitMessage": "\"use comment node as empty placeholder (fix <transition> SSR hydration)\"",
                "committedDate": "2016-08-05T05:52:09Z"
            },
            {
                "commitId": "40b93e6527d9ecdb308925114bf14cb60b36eae0",
                "commitMessage": "\"avoid unnecessary enter transitions on nested inserted elements\"",
                "committedDate": "2016-08-05T02:17:59Z"
            },
            {
                "commitId": "35ee5b105e8a517571b9bb9a87160c6ffbdad779",
                "commitMessage": "\"remove staticAttrs\"",
                "committedDate": "2016-07-29T14:45:43Z"
            },
            {
                "commitId": "74f8b98509d24487e1a8d1588b4128a7a1046a41",
                "commitMessage": "\"handle static vnodes properly during patch (fix #3325)\"",
                "committedDate": "2016-07-26T19:49:40Z"
            },
            {
                "commitId": "3ce450b6dc5f2135266c8a38818371e9d4f1f460",
                "commitMessage": "\"use more proper flow type syntax\"",
                "committedDate": "2016-07-26T01:28:46Z"
            },
            {
                "commitId": "ea9c6c37c3ef0ef3706afa94070b89a7464c559c",
                "commitMessage": "\"support v-on .native modifier on components\"",
                "committedDate": "2016-07-19T22:56:10Z"
            },
            {
                "commitId": "69ecdcb05e3f5db32af889962fe8253d49d7390d",
                "commitMessage": "\"rename vnode.data.props -> domProps\"",
                "committedDate": "2016-07-19T21:52:10Z"
            },
            {
                "commitId": "e6871a33c17fd7dfd58fba6c7c6b6182f0ff2f0e",
                "commitMessage": "\"update flow annotations\"",
                "committedDate": "2016-07-15T21:48:42Z"
            },
            {
                "commitId": "9421bd48066906e20052e04cf88c4ae623080a95",
                "commitMessage": "\"extract getRealChild for abstract components\"",
                "committedDate": "2016-07-06T21:07:46Z"
            },
            {
                "commitId": "06b470369a7bde2a7f36468191e424b4c455db67",
                "commitMessage": "\"element namespace should be resolved at runtime for render function / jsx usage\"",
                "committedDate": "2016-06-27T18:02:14Z"
            },
            {
                "commitId": "1b3b19491fd47f3634e30d7fcce991881de16530",
                "commitMessage": "\"merge renderElement and renderElementWithChildren\"",
                "committedDate": "2016-06-27T16:25:02Z"
            },
            {
                "commitId": "cfe745e9d204ed5ff5eb2d6f0f387b381a29b3b9",
                "commitMessage": "\"apply scopeId to slot contents too\"",
                "committedDate": "2016-06-15T17:33:12Z"
            },
            {
                "commitId": "b0ad94fc876826a8ee3226320aacd40b8967f8dd",
                "commitMessage": "\"properly encode HTML in server-side rendering (fix #3078)\"",
                "committedDate": "2016-06-14T18:15:41Z"
            },
            {
                "commitId": "a53d54aa8a169e52e895ff1a888ddea0cc8d7ac6",
                "commitMessage": "\"fix whitespace vnode identity breaking patch (fix #3043)\"",
                "committedDate": "2016-06-08T17:28:55Z"
            },
            {
                "commitId": "a5a9dc9b694da007a13bd5adfd64b0ab0750ad57",
                "commitMessage": "\"support keep-alive\"",
                "committedDate": "2016-06-04T14:53:05Z"
            },
            {
                "commitId": "4bcdce895c5dc0403b6a94b0ad71b2bc57734234",
                "commitMessage": "\"record original tag name on vnode for components using is attribute\"",
                "committedDate": "2016-06-02T22:18:32Z"
            },
            {
                "commitId": "d40ab0ca8760b9d8ec8be630e2360e6927ba8b3e",
                "commitMessage": "\"fix component client-side hydration\"",
                "committedDate": "2016-06-01T22:20:13Z"
            },
            {
                "commitId": "f8cfc81826715b23dac054b6d1727594d2caeebd",
                "commitMessage": "\"remove unnecessary v-pre related code\"",
                "committedDate": "2016-06-01T19:03:09Z"
            },
            {
                "commitId": "8d229b2442e8cc5b2801fa55a4ea8ea766721381",
                "commitMessage": "\"support v-bind on objects\"",
                "committedDate": "2016-05-25T00:41:06Z"
            },
            {
                "commitId": "7f85acb4e5c28052e07d5e2c4cf2903cac0e4bd5",
                "commitMessage": "\"expose oldValue on directive bindings\"",
                "committedDate": "2016-05-24T22:28:17Z"
            },
            {
                "commitId": "48f22c9b17a9def00dcfa4899fee9e60c8933dbc",
                "commitMessage": "\"fix flow error\"",
                "committedDate": "2016-05-24T04:27:18Z"
            },
            {
                "commitId": "837853d95ad1224ed12ba2454b791591884caf2e",
                "commitMessage": "\"better inferring of component names in warnings\"",
                "committedDate": "2016-05-19T17:58:11Z"
            },
            {
                "commitId": "20fb79a1ea098bedda6fec8bebbb184ac51fce20",
                "commitMessage": "\"new render mechanism (#2857)\n\n* updated compiler with new render functions\r\n\r\n* separated createElement into renderSelf & renderElement\r\nsupported getters for text node & static root\r\n\r\n* adapted new element creator into render call\r\n\r\n* improved \\$createElement\r\n\r\n* fixed by flow check\r\n\r\n* fixed ssr bugs for $createElement\"",
                "committedDate": "2016-05-14T19:49:18Z"
            },
            {
                "commitId": "750bec1024478022453277a4d175cff5a8445672",
                "commitMessage": "\"annotate platforms/web\"",
                "committedDate": "2016-05-14T11:40:56Z"
            },
            {
                "commitId": "59fcd4e7a749561ad6acf3ec50c32c24b33d8ec4",
                "commitMessage": "\"finish annotating vdom\"",
                "committedDate": "2016-05-14T07:38:41Z"
            },
            {
                "commitId": "45d96c7dbc399696138c9d020e13f97cf94ce181",
                "commitMessage": "\"annotation for vdom (wip)\"",
                "committedDate": "2016-05-14T07:08:21Z"
            },
            {
                "commitId": "354ea616b5ec4826e23a88465e404fd3b382d9f4",
                "commitMessage": "\"annotate Vue class\"",
                "committedDate": "2016-05-12T23:13:38Z"
            },
            {
                "commitId": "6593be9f75ea229e71e5b0530bb0f27aeee57afc",
                "commitMessage": "\"update unit tests convention + basic component tests\"",
                "committedDate": "2016-05-09T22:08:18Z"
            },
            {
                "commitId": "f4a2afb3b33991c1694e8fcb7d62641c30eeaf53",
                "commitMessage": "\"expose context on vnode, simplify render methods\"",
                "committedDate": "2016-04-25T03:31:07Z"
            },
            {
                "commitId": "955e2f839175fadbd0218f7b78c48ebbbcca6349",
                "commitMessage": "\"restructure (build pass)\"",
                "committedDate": "2016-04-23T20:12:19Z"
            },
            {
                "commitId": "ec5bcefca73160e6d283b8a0c4e1457f42f87081",
                "commitMessage": "\"tweak namespace changes\"",
                "committedDate": "2016-04-23T17:37:47Z"
            },
            {
                "commitId": "6e251e0721b4dbb4896999df78450d912dcba30d",
                "commitMessage": "\"Change svg parameter to namespace (#3)\n\n* change svg parameter into namespace\r\n\r\n* fixed svg to namespace bug\r\n\r\n* change svg detecting into namespace detecting in parser\r\n\r\n* fixed eslint error\"",
                "committedDate": "2016-04-23T17:29:31Z"
            },
            {
                "commitId": "9a347e02b4b1fd8ddc51db6c2ba08a1831f4dfd0",
                "commitMessage": "\"allow data to be undefined\"",
                "committedDate": "2016-04-21T16:37:12Z"
            },
            {
                "commitId": "d87987780a208fe3c65415a4a1cab58250ffa9a3",
                "commitMessage": "\"rename\"",
                "committedDate": "2016-04-21T08:24:26Z"
            },
            {
                "commitId": "1a35cf4a21e8c8e897c2d6f291b99376b12b9fac",
                "commitMessage": "\"support template slot\"",
                "committedDate": "2016-04-15T02:55:29Z"
            },
            {
                "commitId": "0ab0600599dcc593695560382af1c1a8119ce848",
                "commitMessage": "\"restructure\"",
                "committedDate": "2016-04-12T23:42:15Z"
            },
            {
                "commitId": "69e94eb453ee0da21f9a0506d2f01269865a4776",
                "commitMessage": "\"move flatten into vdom implementation\"",
                "committedDate": "2016-04-11T03:54:53Z"
            },
            {
                "commitId": "a879ec06ef9504db8df2a19aac0d07609fe36131",
                "commitMessage": "\"init\"",
                "committedDate": "2016-04-11T02:47:28Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "Determine the developers that had the most unfixed bugs?",
        "number": 7,
        "category": 2,
        "response": "The developer with the most unfixed bugs is Evan You, with a total of 2 unfixed bugs. Can I help with anything else?",
        "chain_of_thought": "To determine the developers that had the most unfixed bugs, we need to interpret the question correctly. The question is asking for developers who have introduced bugs that have not been fixed. In the schema, a bug is represented by an Issue node, and a developer is represented by a User node. The relevant relationships are:\n\n1. `(:Commit)-[:introduced]->(:Issue)`: This relationship indicates that a commit introduced a bug.\n2. `(:User)-[:author]->(:Commit)`: This relationship indicates that a user authored a commit.\n\nTo find unfixed bugs, we need to consider issues that are still open. The `state` property of the Issue node can be used to determine if an issue is open or closed.\n\nThe query should:\n\n1. Find all issues that are still open.\n2. Identify the commits that introduced these issues.\n3. Find the users who authored these commits.\n4. Count the number of unfixed bugs introduced by each user.\n\nHere's the complete Cypher query:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.name AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n```\n\nThis query will return a list of developers along with the count of unfixed bugs they have introduced, sorted in descending order by the number of unfixed bugs.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.name AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n",
        "result": [
            {
                "developer": "Evan You",
                "unfixed_bugs": 2
            },
            {
                "developer": "Divya",
                "unfixed_bugs": 1
            },
            {
                "developer": "GU Yiling",
                "unfixed_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 4,
        "label": "partial"
    },
    {
        "question": "which developer has most number of bugs yet to be fixed?",
        "number": 8,
        "category": 2,
        "response": "The developer with the most number of bugs yet to be fixed is KaelWD, with 6 open issues.",
        "chain_of_thought": "To determine which developer has the most number of bugs yet to be fixed, we need to identify the issues that are still open and find the user who is responsible for them. The relevant nodes are the User and Issue nodes. The relevant relationships are the assigned relationship to find the user assigned to the issue and the creates relationship to find the user who created the issue. The metric to measure the number of bugs yet to be fixed is the count of open issues assigned to or created by a user.\n\nHere's how we can construct the query:\n\n1. Identify open issues. An open issue is one where the `state` property is not \"closed\".\n2. Find the users who are assigned to these open issues or who created these open issues.\n3. Count the number of open issues for each user.\n4. Sort the users by the number of open issues in descending order to find the user with the most open issues.\n\nThe complete query is:\n\n```cypher\nMATCH (u:User)-[:assigned|creates]->(i:Issue {state: 'open'})\nRETURN u.login AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n```\n\nThis query will return the developer with the most number of open issues, indicating the developer with the most bugs yet to be fixed.",
        "query": "cypher\nMATCH (u:User)-[:assigned|creates]->(i:Issue {state: 'open'})\nRETURN u.login AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "KaelWD",
                "open_issues": 6
            }
        ],
        "isAmbiguous": true,
        "iteration": 4,
        "label": "partial"
    },
    {
        "question": "Determine the developers that fixed the most bugs in helpers.js?",
        "number": 9,
        "category": 3,
        "response": "The developer who fixed the most bugs in `helpers.js` is Evan You, with 11 bugs fixed. He is followed by chengchao, who fixed 2 bugs, and Jason, who fixed 1 bug.",
        "chain_of_thought": "To determine the developers who fixed the most bugs in the file `helpers.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**:\n   - We are interested in the `User`, `Commit`, `Issue`, and `File` nodes.\n   - The `User` node is connected to the `Commit` node via the `author` relationship.\n   - The `Commit` node is connected to the `Issue` node via the `fixed` relationship, indicating that the commit fixed a bug.\n   - The `Issue` node is connected to the `File` node via the `impacted` relationship, indicating that the file was impacted by the issue.\n\n2. **Filter for the specific file**:\n   - We need to filter the `File` node to find the specific file `helpers.js`.\n\n3. **Aggregate the number of bugs fixed by each developer**:\n   - We need to count the number of times each developer has fixed a bug in `helpers.js`.\n\nThe Cypher query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'helpers.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n```\n\nThis query will return a list of developers and the number of bugs they have fixed in `helpers.js`, sorted in descending order by the number of bugs fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'helpers.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n",
        "result": [
            {
                "developer": "Evan You",
                "bugs_fixed": 11
            },
            {
                "developer": "chengchao",
                "bugs_fixed": 2
            },
            {
                "developer": "Jason",
                "bugs_fixed": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "who did most fixed bugs in client.js?",
        "number": 10,
        "category": 3,
        "response": "The developer who fixed the most bugs in \"client.js\" is Xin Du (Clark), with a total of 1 fixed bug.",
        "chain_of_thought": "To determine who fixed the most bugs in the file `client.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We need the `User` node to identify the developers.\n   - The `Commit` node is needed to find the commits that fixed bugs.\n   - The `File` node is needed to identify the specific file `client.js`.\n   - The `Issue` node is needed to identify the bugs.\n   - The relationships involved are:\n     - `(:User)-[:author]->(:Commit)` to find which user authored the commit.\n     - `(:Commit)-[:fixed]->(:Issue)` to find which commit fixed a bug.\n     - `(:Issue)-[:impacted]->(:File)` to find which file was impacted by the bug.\n\n2. **Filter for the specific file**: We need to filter the `File` node to only include `client.js`.\n\n3. **Count the number of bugs fixed by each user**: We need to aggregate the number of bugs fixed by each user for the file `client.js`.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'client.js'})\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n```\n\nThis query will return the developer who has fixed the most bugs in the file `client.js`.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'client.js'})\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "Xin Du (Clark)",
                "fixed_bugs": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "Determine the files that introduce the most bugs?",
        "number": 11,
        "category": 2,
        "response": "The files that introduce the most bugs are as follows:\n\n1. `index.js` with 85 bugs\n2. `model.js` with 45 bugs\n3. `render.js` with 42 bugs\n4. `events.js` with 35 bugs\n5. `patch.js` with 32 bugs\n6. `lifecycle.js` with 27 bugs\n7. `codegen.spec.js` with 24 bugs\n8. `html-parser.js` with 21 bugs\n9. `transition.js` with 20 bugs\n10. `options.js` with 19 bugs",
        "chain_of_thought": "To determine the files that introduce the most bugs, we need to identify the files that are associated with the most issues introduced by commits. The schema provides a relationship between Commit and Issue through the introduced relationship, and between Issue and File through the impacted relationship. Therefore, we need to traverse from File to Issue and then to Commit to count how many times each file is associated with an introduced issue.\n\nHere's the step-by-step breakdown of the query:\n\n1. Identify the relevant nodes: File, Issue, and Commit.\n2. Use the impacted relationship to find issues associated with each file.\n3. Use the introduced relationship to find commits that introduced these issues.\n4. Count the number of times each file is associated with an introduced issue.\n5. Sort the files by the number of introduced issues in descending order to find the files that introduce the most bugs.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (f:File)<-[:impacted]-(i:Issue)<-[:introduced]-(c:Commit)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n```\n\nThis query will return the top 10 files that are associated with the most introduced bugs, sorted by the number of bugs in descending order.",
        "query": "cypher\nMATCH (f:File)<-[:impacted]-(i:Issue)<-[:introduced]-(c:Commit)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "index.js",
                "bug_count": 85
            },
            {
                "file": "model.js",
                "bug_count": 45
            },
            {
                "file": "render.js",
                "bug_count": 42
            },
            {
                "file": "events.js",
                "bug_count": 35
            },
            {
                "file": "patch.js",
                "bug_count": 32
            },
            {
                "file": "lifecycle.js",
                "bug_count": 27
            },
            {
                "file": "codegen.spec.js",
                "bug_count": 24
            },
            {
                "file": "html-parser.js",
                "bug_count": 21
            },
            {
                "file": "transition.js",
                "bug_count": 20
            },
            {
                "file": "options.js",
                "bug_count": 19
            }
        ],
        "isAmbiguous": true,
        "iteration": 4,
        "label": "partial"
    },
    {
        "question": "What are the most buggy files?",
        "number": 12,
        "category": 2,
        "response": "The most buggy files are ranked based on the number of issues they have impacted. The top files with the highest issue counts are as follows:\n\n1. `index.js` with 105 issues\n2. `model.js` with 46 issues\n3. `render.js` with 42 issues\n4. `events.js` with 38 issues\n5. `lifecycle.js` with 37 issues\n6. `patch.js` with 32 issues\n7. `transition.js` with 32 issues\n8. `component.js` with 29 issues\n9. `codegen.spec.js` with 24 issues\n10. `options.js` with 24 issues",
        "chain_of_thought": "To determine the most buggy files, we need to identify files that have been impacted by the most issues. In the given schema, the relevant nodes are the `File` and `Issue` nodes. The relationship that connects these nodes is the `impacted` relationship, which indicates that a file is associated with an issue.\n\nThe interpretation of \"most buggy files\" is the files that have been linked to the highest number of issues. Therefore, we need to count the number of issues impacting each file and sort them in descending order to find the files with the most issues.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n```\n\nThis query matches all `Issue` nodes that have an `impacted` relationship with `File` nodes, counts the number of issues for each file, and returns the top 10 files with the highest issue count.",
        "query": "cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "index.js",
                "issue_count": 105
            },
            {
                "file": "model.js",
                "issue_count": 46
            },
            {
                "file": "render.js",
                "issue_count": 42
            },
            {
                "file": "events.js",
                "issue_count": 38
            },
            {
                "file": "lifecycle.js",
                "issue_count": 37
            },
            {
                "file": "patch.js",
                "issue_count": 32
            },
            {
                "file": "transition.js",
                "issue_count": 32
            },
            {
                "file": "component.js",
                "issue_count": 29
            },
            {
                "file": "codegen.spec.js",
                "issue_count": 24
            },
            {
                "file": "options.js",
                "issue_count": 24
            }
        ],
        "isAmbiguous": true,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "what are the buggy commits that happened on August 18, 2022?",
        "number": 13,
        "category": 2,
        "response": "On August 18, 2022, the following commits were identified as having introduced bugs:\n\n1. Commit ID: 5221d4d3b6049c87d196d99dbb64bcd3f3b07279\n   - Commit Message: \"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\"\n   - Date: 2022-08-18T08:01:00Z\n\n2. Commit ID: b4bf4c52ad31e02307cfd4d643dc5610c893e3ba\n   - Commit Message: \"fix(types): allow attaching unknown options to defined component\\n\\nfix #12742\"\n   - Date: 2022-08-18T07:32:12Z",
        "chain_of_thought": "To determine the buggy commits that happened on August 18, 2022, we need to identify commits that introduced bugs on that specific date. The schema provides a relationship between Commit and Issue through the introduced relationship, which indicates that a commit introduced a bug. We also need to filter these commits by the committedDate property to match the specified date.\n\nHere's how we can construct the query:\n\n1. Identify the relevant nodes and relationships:\n   - Commit nodes represent the commits.\n   - Issue nodes represent the issues (bugs).\n   - The introduced relationship connects Commit and Issue nodes.\n\n2. Filter the commits by the specific date:\n   - Use the committedDate property of the Commit node to filter for August 18, 2022.\n\n3. Format the date in ISO format as \"2022-08-18T.*\" to match any time on that date.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-08-18T.*'\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS date\n```\n\nThis query will return the IDs, messages, and committed dates of the commits that introduced bugs on August 18, 2022.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-08-18T.*'\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS date\n",
        "result": [
            {
                "commitId": "5221d4d3b6049c87d196d99dbb64bcd3f3b07279",
                "commitMessage": "\"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\"",
                "date": "2022-08-18T08:01:00Z"
            },
            {
                "commitId": "5221d4d3b6049c87d196d99dbb64bcd3f3b07279",
                "commitMessage": "\"fix(compiler-sfc): rewriteDefault for class with decorators (#12747)\"",
                "date": "2022-08-18T08:01:00Z"
            },
            {
                "commitId": "b4bf4c52ad31e02307cfd4d643dc5610c893e3ba",
                "commitMessage": "\"fix(types): allow attaching unknown options to defined component\n\nfix #12742\"",
                "date": "2022-08-18T07:32:12Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "what commits were buggy on May 24, 2022?",
        "number": 14,
        "category": 2,
        "response": "I don't know. Can I help with anything else?",
        "chain_of_thought": "To determine which commits were buggy on May 24, 2022, we need to identify the commits that introduced issues on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship. We also need to filter the issues based on their creation date, which is represented by the created_at property in the Issue node.\n\nFirst, we need to match the commits that introduced issues:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\n```\n\nNext, we filter the issues to only include those created on May 24, 2022. We use the created_at property and format the date in ISO format:\n```cypher\nWHERE i.created_at =~ '2022-05-24T.*'\n```\n\nFinally, we return the commit IDs that introduced these issues:\n```cypher\nRETURN c.id AS buggy_commit\n```\n\nTherefore, the complete query is:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2022-05-24T.*'\nRETURN c.id AS buggy_commit\n```",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2022-05-24T.*'\nRETURN c.id AS buggy_commit\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "incorrect"
    },
    {
        "question": "commit(s) that fixed the bug ticket 12892?",
        "number": 15,
        "category": 2,
        "response": "The commit that fixed the bug ticket 12892 is identified by the commit ID '25f97a5033187372e7b8c591c79336197ee5c833'.",
        "chain_of_thought": "To find the commit(s) that fixed the bug ticket with the number 12892, we need to identify the relevant nodes and relationships. The bug ticket corresponds to an Issue node, and we are interested in the Commit nodes that have a fixed relationship with this Issue node.\n\nHere's how we can construct the query:\n\n1. Identify the Issue node with the number 12892.\n2. Find the Commit nodes that have a fixed relationship with this Issue node.\n\nThe relevant nodes are Commit and Issue, and the relevant relationship is fixed.\n\nTherefore, the query to find the commit(s) that fixed the bug ticket 12892 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 12892})\nRETURN c.id AS commit_id\n```\n\nThis query will return the IDs of the commits that fixed the specified bug ticket.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 12892})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "25f97a5033187372e7b8c591c79336197ee5c833"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "which commit fixed the bug ticket 11575?",
        "number": 16,
        "category": 2,
        "response": "The commit with the ID 'af5e05d87ecd218f73302a1b08dcaedd2b46814a' fixed the bug ticket 11575.",
        "chain_of_thought": "To determine which commit fixed the bug associated with ticket 11575, we need to identify the relevant nodes and relationships. The ticket is represented by an Issue node, and the commit that fixed the bug is represented by a Commit node. The relationship between a commit and an issue that indicates a bug was fixed is the fixed relationship.\n\nHere's how we can construct the query:\n\n1. Identify the Issue node with the specific ticket number 11575.\n2. Find the Commit node that has a fixed relationship with this Issue node.\n\nThe query to find the commit that fixed the bug ticket 11575 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 11575})\nRETURN c.id AS commit_id\n```\n\nThis query matches the commit that has a fixed relationship with the issue having the number 11575 and returns the ID of that commit.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 11575})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "af5e05d87ecd218f73302a1b08dcaedd2b46814a"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "Determine the bug(s) that were introduced because of commit hash fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be?",
        "number": 17,
        "category": 2,
        "response": "The commit with hash `fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be` introduced the following bugs:\n\n1. Issue ID 12608: \"implement and export defineAsyncComponent compatible version in 2.7.x\" - [GitHub Issue URL](https://github.com/vuejs/vue/issues/12608)\n2. Issue ID 12622: \"Vue.component(id, component) mismatch type of DefineComponent\" - [GitHub Issue URL](https://github.com/vuejs/vue/issues/12622)\n3. Issue ID 12748: \"Export type `DefineComponent`\" - [GitHub Issue URL](https://github.com/vuejs/vue/issues/12748)\n4. Issue ID 13078: \"import type { CSSProperties } from vue is error\" - [GitHub Issue URL](https://github.com/vuejs/vue/issues/13078)\n5. Issue ID 13128: \"Vue 2.7.16 bug: Some types has not export\" - [GitHub Issue URL](https://github.com/vuejs/vue/issues/13128)",
        "chain_of_thought": "To determine the bug(s) introduced by a specific commit, we need to identify the relevant nodes and relationships. The commit in question is identified by its hash, which corresponds to the `Commit` node. We are interested in finding the `Issue` nodes that were introduced by this commit. The relevant relationship between `Commit` and `Issue` for this question is the `introduced` relationship.\n\nTherefore, the query to find the bug(s) introduced by the commit with hash `fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be` is:\n\n```cypher\nMATCH (c:Commit {id: 'fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query matches the specific commit by its ID and finds all issues that were introduced by this commit, returning the issue ID, title, and URL for each issue.",
        "query": "cypher\nMATCH (c:Commit {id: 'fb93c1be77f12ea1375c5e8b47d168e4d5ceb7be'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [
            {
                "issue_id": 12608,
                "issue_title": "\"implement and export defineAsyncComponent compatible version in 2.7.x\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12608"
            },
            {
                "issue_id": 12622,
                "issue_title": "\"Vue.component(id, component) mismatch type of DefineComponent\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12622"
            },
            {
                "issue_id": 12748,
                "issue_title": "\"Export type `DefineComponent`\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12748"
            },
            {
                "issue_id": 13078,
                "issue_title": "\"import type { CSSProperties } from vue is error\"",
                "issue_url": "https://github.com/vuejs/vue/issues/13078"
            },
            {
                "issue_id": 13128,
                "issue_title": "\"Vue 2.7.16 bug: Some types has not export\"",
                "issue_url": "https://github.com/vuejs/vue/issues/13128"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "what are the bugs caused by commit c678e3134b927645f79270b52d4d660a7e3654ce?",
        "number": 18,
        "category": 2,
        "response": "The bugs caused by commit c678e3134b927645f79270b52d4d660a7e3654ce are:\n\n1. \"[2.7.x] Here is a type error when using ref() on attribute ref in TSX\" - You can find more details at: [GitHub Issue 12758](https://github.com/vuejs/vue/issues/12758)\n\n2. \"EventHandlers type error, DOMs Event was tainted by `@types/node`\" - More information is available at: [GitHub Issue 12832](https://github.com/vuejs/vue/issues/12832)",
        "chain_of_thought": "To determine the bugs caused by a specific commit, we need to identify the relevant nodes and relationships in the schema. The commit in question is identified by its ID, which corresponds to the Commit node. We are interested in finding the issues (bugs) that this commit has introduced, which is represented by the introduced relationship between the Commit and Issue nodes.\n\nHere's how we can construct the query:\n\n1. Identify the commit node with the given ID.\n2. Use the introduced relationship to find the issues (bugs) that this commit has introduced.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit {id: 'c678e3134b927645f79270b52d4d660a7e3654ce'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query will return the IDs, titles, and URLs of the issues (bugs) that were introduced by the specified commit.",
        "query": "cypher\nMATCH (c:Commit {id: 'c678e3134b927645f79270b52d4d660a7e3654ce'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [
            {
                "issue_id": 12758,
                "issue_title": "\"[2.7.x] Here is a type error when using ref() on attribute ref in TSX\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12758"
            },
            {
                "issue_id": 12832,
                "issue_title": "\"EventHandlers type error, DOMs Event  was tainted by `@types/node`\"",
                "issue_url": "https://github.com/vuejs/vue/issues/12832"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "Determine the percentage of the fixing commits that introduced bugs on Oct 2017?",
        "number": 19,
        "category": 3,
        "response": "The percentage of fixing commits that introduced bugs in October 2017 is 20.0%.",
        "chain_of_thought": "To determine the percentage of fixing commits that introduced bugs in October 2017, we need to interpret the question and identify the relevant nodes and relationships in the schema.\n\n### Interpretation:\n1. **Fixing Commits**: These are commits that have a `fixed` relationship with an `Issue`.\n2. **Introduced Bugs**: These are commits that have an `introduced` relationship with an `Issue`.\n3. **Time Frame**: We are interested in commits from October 2017.\n\n### Steps to Construct the Query:\n1. **Identify Fixing Commits**: Find commits that have a `fixed` relationship with an `Issue`.\n2. **Identify Introduced Bug Commits**: Find commits that have an `introduced` relationship with an `Issue`.\n3. **Filter by Date**: Ensure the `committedDate` of the commits is within October 2017.\n4. **Calculate Percentage**: Determine the percentage of fixing commits that also introduced bugs.\n\n### Query Construction:\n1. **Find Fixing Commits in October 2017**:\n   - Use the `fixed` relationship to find commits that fixed issues.\n   - Filter by `committedDate` to include only those from October 2017.\n\n2. **Find Introduced Bug Commits in October 2017**:\n   - Use the `introduced` relationship to find commits that introduced issues.\n   - Filter by `committedDate` to include only those from October 2017.\n\n3. **Calculate the Percentage**:\n   - Count the total number of fixing commits.\n   - Count the number of fixing commits that also introduced bugs.\n   - Calculate the percentage.\n\nHere is the complete Cypher query:\n\n```cypher\n// Find all fixing commits in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\n\n// Count total fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Find fixing commits that also introduced bugs in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\n\n// Count fixing commits that introduced bugs\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n```\n\nThis query will return the percentage of fixing commits that also introduced bugs in October 2017.",
        "query": "cypher\n// Find all fixing commits in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\n\n// Count total fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Find fixing commits that also introduced bugs in October 2017\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\n\n// Count fixing commits that introduced bugs\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n",
        "result": [
            {
                "percentage": 20.0
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "How many fixing commits caused bugs on Oct 2017?",
        "number": 20,
        "category": 3,
        "response": "There were 7 fixing commits that caused bugs in October 2017.",
        "chain_of_thought": "To address the question, we need to determine the number of commits that both fixed an issue and introduced a bug in October 2017. The schema provides the necessary relationships and properties to achieve this.\n\n1. **Identify the relevant nodes and relationships:**\n   - We need to focus on the `Commit` node, as it is involved in both fixing and introducing bugs.\n   - The `fixed` relationship connects a `Commit` to an `Issue` it fixed.\n   - The `introduced` relationship connects a `Commit` to an `Issue` it introduced.\n\n2. **Filter commits by date:**\n   - We need to filter commits based on the `committedDate` property to only include those from October 2017. The date format should be in ISO format, and since the time is not specified, we will use a regex to match any time on the specified date.\n\n3. **Construct the query:**\n   - We will match commits that have both `fixed` and `introduced` relationships.\n   - We will filter these commits to only include those from October 2017.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n```\n\nThis query matches commits that have both fixed and introduced issues, filters them to those committed in October 2017, and returns the count of such commits.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2017-10-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n",
        "result": [
            {
                "fixing_commits_causing_bugs": 7
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    }
]