[
    {
        "question": "how many commits happened in last month?",
        "number": 1,
        "category": 1,
        "response": "A total of 166 commits were made in the last month.",
        "chain_of_thought": "To determine how many commits happened in the last month, we need to consider the current date, which is 2024-08-26T00:00:00Z. The last month would be from 2024-07-26T00:00:00Z to 2024-08-25T23:59:59Z.\n\nThe relevant nodes for this query are the Commit nodes, and we need to filter these nodes based on the `committedDate` property. We will use a date range to find commits that occurred within the last month.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n```\n\nThis query matches all commits and filters them based on the `committedDate` property to ensure they fall within the specified date range. It then returns the count of these commits.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n",
        "result": [
            {
                "numberOfCommits": 166
            }
        ],
        "isAmbiguous": true,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "what is the latest commit?",
        "number": 2,
        "category": 1,
        "response": "The latest commit has the ID 'a960b92cb93e7d006e5e8de850f9b8b51f655c90' and was made on August 20, 2024, at 02:34:20 UTC.",
        "chain_of_thought": "To determine the latest commit, we need to identify the Commit node with the most recent committedDate. The relevant property for this query is committedDate, which is a string representing the date and time when the commit was made. We will sort the commits by this date in descending order and return the top result.\n\nThe query to find the latest commit is as follows:\n\n```cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n```\n\nThis query matches all Commit nodes, orders them by the committedDate in descending order, and returns the commit ID and committed date of the latest commit.",
        "query": "cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n",
        "result": [
            {
                "commitId": "a960b92cb93e7d006e5e8de850f9b8b51f655c90",
                "commitDate": "2024-08-20T02:34:20Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "can you tell me the details of the commits between May 27th 2018 and May 31st 2018?",
        "number": 3,
        "category": 1,
        "response": "Certainly! Here are the details of the commits between May 27th, 2018, and May 31st, 2018:\n\n1. **Commit ID:** a32f857ac78ad1b33c61e6fbd47ccd57f21155c2\n   - **Message:** \"Use --frozen-lockfile for Yarn in CI build (#12914)\"\n   - **Additions:** 1\n   - **Deletions:** 1\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-28T18:52:42Z\n\n2. **Commit ID:** aa85b0fd5ffc92de38720c29833a54c67285abfb\n   - **Message:** \"Upgrade to Jest 23 (#12894)\"\n   - **Additions:** 602\n   - **Deletions:** 1004\n   - **Changed Files:** 28\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-28T22:03:15Z\n\n3. **Commit ID:** 8aeea5afa2d688968545b1cc5a30a48ddc0fa503\n   - **Message:** \"Do not assign node.value on input creation if no change will occur (#12925)\"\n   - **Additions:** 30\n   - **Deletions:** 7\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T13:48:58Z\n\n4. **Commit ID:** 4f1f909b5b5ffe28675eed3fdb645dfaf975c1ef\n   - **Message:** \"Disable Flow on AppVeyor again\"\n   - **Additions:** 1\n   - **Deletions:** 1\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T14:47:14Z\n\n5. **Commit ID:** 83f76e4db9a060911774f497b5715bd4d4f42a9c\n   - **Message:** \"ForwardRefs supports propTypes (#12911)\"\n   - **Additions:** 194\n   - **Deletions:** 103\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T16:50:49Z\n\n6. **Commit ID:** 001f9ef4717a0928b4875cbad3421a17f49f95a5\n   - **Message:** \"Release script prompts for NPM 2FA code (#12908)\"\n   - **Additions:** 48\n   - **Deletions:** 3\n   - **Changed Files:** 6\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T19:50:04Z\n\n7. **Commit ID:** ff724d3c286a1753723ea71e8c046498ed1aac98\n   - **Message:** \"[scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)\"\n   - **Additions:** 64\n   - **Deletions:** 5\n   - **Changed Files:** 8\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T20:30:04Z\n\n8. **Commit ID:** 79a740c6e32ca300d4e7ff55ab06de172d4237fd\n   - **Message:** \"Rename variables to remove references to global global (#12931)\"\n   - **Additions:** 10\n   - **Deletions:** 10\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-30T00:54:38Z\n\n9. **Commit ID:** e0a03c1b4d84453122c4e9d1a5e0cec52bef9066\n   - **Message:** \"Extend input type check in selection capabilities (#12062) (#12135)\"\n   - **Additions:** 71\n   - **Deletions:** 2\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-30T11:08:21Z\n\n10. **Commit ID:** ae57b125c798418fb6846094cfa911530206e074\n    - **Message:** \"[simple-cache-provider] Use LRU cache eviction (#12851)\"\n    - **Additions:** 153\n    - **Deletions:** 31\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2018-05-30T20:12:29Z\n\nThese commits include various changes such as upgrades, fixes, and improvements related to different components and features.",
        "chain_of_thought": "To address the question, we need to find the details of commits made between May 27th, 2018, and May 31st, 2018. The relevant node for this query is the Commit node, and we will use the `committedDate` property to filter the commits within the specified date range.\n\nFirst, we need to format the dates in ISO format. The start date is \"2018-05-27T00:00:00Z\" and the end date is \"2018-05-31T23:59:59Z\" to include the entire day of May 31st.\n\nThe query will match all commits and filter them based on the `committedDate` property to fall within the specified range. We will then return the details of these commits.\n\nThe complete query is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2018-05-27T00:00:00Z\" AND c.committedDate <= \"2018-05-31T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n```\n\nThis query will return the details of the commits made between May 27th, 2018, and May 31st, 2018, ordered by the commit date.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2018-05-27T00:00:00Z\" AND c.committedDate <= \"2018-05-31T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n",
        "result": [
            {
                "commitId": "a32f857ac78ad1b33c61e6fbd47ccd57f21155c2",
                "message": "\"Use --frozen-lockfile for Yarn in CI build (#12914)\n\nCI builds should always use the `--frozen-lockfile` option. It will fail the build if the lockfile is out-of-date:\r\n\r\n> If you need reproducible dependencies, which is usually the case with the continuous integration systems, you should pass --frozen-lockfile flag.\r\n\r\n(https://yarnpkg.com/en/docs/cli/install/)\"",
                "additions": 1,
                "deletions": 1,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-28T18:52:42Z"
            },
            {
                "commitId": "aa85b0fd5ffc92de38720c29833a54c67285abfb",
                "message": "\"Upgrade to Jest 23 (#12894)\n\n* Upgrade to Jest 23 beta\r\n\r\n* prefer `.toHaveBeenCalledTimes`\r\n\r\n* 23 stable\"",
                "additions": 602,
                "deletions": 1004,
                "changedFiles": 28,
                "commentsCount": 0,
                "committedDate": "2018-05-28T22:03:15Z"
            },
            {
                "commitId": "8aeea5afa2d688968545b1cc5a30a48ddc0fa503",
                "message": "\"Do not assign node.value on input creation if no change will occur (#12925)\n\nThis commit fixes an issue where assigning an empty string to required\r\ntext inputs triggers the invalid state in Firefox (~60.0.1).\r\n\r\nIt does this by first comparing the initial state value to the current\r\nvalue property on the text element. This:\r\n\r\n1. Prevents the validation issue\r\n2. Avoids an extra DOM Mutation in some cases\"",
                "additions": 30,
                "deletions": 7,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-29T13:48:58Z"
            },
            {
                "commitId": "4f1f909b5b5ffe28675eed3fdb645dfaf975c1ef",
                "message": "\"Disable Flow on AppVeyor again\n\nIt runs out of memory.\"",
                "additions": 1,
                "deletions": 1,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-29T14:47:14Z"
            },
            {
                "commitId": "83f76e4db9a060911774f497b5715bd4d4f42a9c",
                "message": "\"ForwardRefs supports propTypes (#12911)\n\n* Moved some internal forwardRef tests to not be internal\r\n* ForwardRef supports propTypes\"",
                "additions": 194,
                "deletions": 103,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-29T16:50:49Z"
            },
            {
                "commitId": "001f9ef4717a0928b4875cbad3421a17f49f95a5",
                "message": "\"Release script prompts for NPM 2FA code (#12908)\n\n* Release script prompts for NPM 2fa code\"",
                "additions": 48,
                "deletions": 3,
                "changedFiles": 6,
                "commentsCount": 0,
                "committedDate": "2018-05-29T19:50:04Z"
            },
            {
                "commitId": "ff724d3c286a1753723ea71e8c046498ed1aac98",
                "message": "\"[scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)\n\n* Use local references to global things inside scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nWe want to avoid initially calling one version of an API and then later\r\naccessing a polyfilled version.\r\n\r\n**test plan:**\r\nRun existing tests.\r\n\r\n* Shim ReactScheduler for www\r\n\r\n**what is the change?:**\r\nIn www we want to reference the separate build of ReactScheduler,\r\nwhich allows treating it as a separate module internally.\r\n\r\n**why make this change?:**\r\nWe need to require the ReactScheduler before our rAF polyfill activates,\r\nin order to customize which custom behaviors we want.\r\n\r\nThis is also a step towards being able to experiment with using it\r\noutside of React.\r\n\r\n**test plan:**\r\nRan tests, ran the build, and ran `test-build`.\r\n\r\n* Generate a bundle for fb-www\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nSplitting out the schedule module allows us to load it before\r\npolyfills kick in for rAF and other APIs.\r\n\r\nAnd long term we want to split this into a separate module anyway, this\r\nis a step towards that.\r\n\r\n**test plan:**\r\nIll run the sync next week and verify that this all works. :)\r\n\r\n* ran prettier\r\n\r\n* fix rebase issues\r\n\r\n* Change names of variables used for holding globals\"",
                "additions": 64,
                "deletions": 5,
                "changedFiles": 8,
                "commentsCount": 0,
                "committedDate": "2018-05-29T20:30:04Z"
            },
            {
                "commitId": "79a740c6e32ca300d4e7ff55ab06de172d4237fd",
                "message": "\"Rename variables to remove references to global global (#12931)\n\n**what is the change?:**\r\nIn a recent PR we were referencing some global variables and storing\r\nlocal references to them.\r\n\r\nTo make things more natural, we co-opted the original name of the global\r\nfor our local reference. To make this work with Flow, we get the\r\noriginal reference from window.requestAnimationFrame and assign it to\r\nconst requestAnimationFrame.\r\n\r\nSometimes React is used in an environment where window is not defined\r\n- in that case we need to use something else, or hide the window\r\nreference somewhere.\r\n\r\nWe opted to use global thinking that Babel transforms would fill that\r\nin with the proper thing.\r\n\r\nBut for some of our fixtures we are not doing that transform on the\r\nbundle.\r\n\r\n**why make this change?:**\r\nI want to unbreak this on master and then investigate more about what we\r\nshould do to fix this.\r\n\r\n**test plan:**\r\nrun `yarn build` and open the fixtures.\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12930\"",
                "additions": 10,
                "deletions": 10,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-30T00:54:38Z"
            },
            {
                "commitId": "e0a03c1b4d84453122c4e9d1a5e0cec52bef9066",
                "message": "\"Extend input type check in selection capabilities (#12062) (#12135)\n\n* Do not set selection when prior selection is undefined (#12062)\r\n\r\n`restoreSelection` did not account for input elements that have changed\r\ntype after the commit phase. The new `text` input supported selection\r\nbut the old `email` did not and `setSelection` was incorrectly trying to\r\nrestore `null` selection state.\r\n\r\nWe also extend input type check in selection capabilities to cover cases\r\nwhere input type is `search`, `tel`, `url`, or `password`.\r\n\r\n* Add link to HTML spec for element types and selection\r\n\r\n* Add reset button to ReplaceEmailInput\r\n\r\nThis commit adds a button to restore the original state of the\r\nReplaceEmailInput fixture so that it can be run multiple times without\r\nrefreshing the page.\"",
                "additions": 71,
                "deletions": 2,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-30T11:08:21Z"
            },
            {
                "commitId": "ae57b125c798418fb6846094cfa911530206e074",
                "message": "\"[simple-cache-provider] Use LRU cache eviction (#12851)\n\n* [simple-cache-provider] Use LRU cache eviction\r\n\r\nMax size is hard-coded to 500. In the future, we should make this\r\nconfigurable per resource.\r\n\r\n* Evict PAGE_SIZE records from cache when max limit is reached\"",
                "additions": 153,
                "deletions": 31,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-30T20:12:29Z"
            },
            {
                "commitId": "524a74331399fd7102037c878f327afbd5e14f53",
                "message": "\"Fix for Flow issues in SimpleCacheProvider (#12942)\n\n* Fix for Flow issues in SimpleCacheProvider\r\n\r\n**what is the change?:**\r\n- Fixed some flow errors which were somehow swallowed when CI\r\noriginally\r\n- Loosen flow types to avoid issue with recursive loop in Flow; https://github.com/facebook/flow/issues/5870\r\n\r\n**why make this change?:**\r\nTo unbreak master and unblock other changes we want to make.\r\n\r\n**test plan:**\r\nFlow passes!\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12941\r\n\r\n* Fix lints\"",
                "additions": 42,
                "deletions": 21,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:31:41Z"
            },
            {
                "commitId": "3118ed9d640ad28af306de308301f4fcd029ffca",
                "message": "\"Expose unstable_interactiveUpdates on ReactDOM (#12943)\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:31:59Z"
            },
            {
                "commitId": "15767a8f8f798f0d80df4ddbc7cfaebdc29996a8",
                "message": "\"[scheduler] 5/n Error handling in scheduler (#12920)\n\n* Initial failing unit test for error handling in schedule\r\n\r\n**what is the change?:**\r\nsee title\r\n\r\n**why make this change?:**\r\nAdding tests for the error handling behavior we are about to add. This\r\ntest is failing, which gives us the chance to make it pass.\r\n\r\nWrote skeletons of some other tests to add.\r\n\r\nUnit testing this way is really hacky, and Im also adding to the\r\nfixture to test this in the real browser environment.\r\n\r\n**test plan:**\r\nRan new test, saw it fail!\r\n\r\n* Add fixture for testing error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded a fixture which does the following -\r\nlogs in the console to show what happens when you use\r\n`requestAnimationFrame` to schedule a series of callbacks and some of\r\nthem throw errors.\r\n\r\nThen does the same actions with the `scheduler` and verifies that it\r\nbehaves in a similar way.\r\n\r\nHard to really verify the errors get thrown at the proper time without\r\nlooking at the console.\r\n\r\n**why make this change?:**\r\nWe want the most authentic, accurate test of how errors are handled in\r\nthe scheduler. Thats what this fixture should be.\r\n\r\n**test plan:**\r\nManually verified that this test does what I expect - right now its\r\nfailing but follow up commits will fix that.\r\n\r\n* Handle errors in scheduler\r\n\r\n**what is the change?:**\r\nWe set a flag before calling any callback, and then use a try/finally\r\nblock to wrap it. Note that we *do not* catch the error, if one is\r\nthrown. But, we only unset the flag after the callback successfully\r\nfinishes.\r\n\r\nIf we reach the finally block and the flag was not unset, then it\r\nmeans an error was thrown.\r\n\r\nIn that case we start a new postMessage callback, to finish calling any\r\nother pending callbacks if there is time.\r\n\r\n**why make this change?:**\r\nWe need to make sure that an error thrown from one callback doesnt stop\r\nother callbacks from firing, but we also dont want to catch or swallow\r\nthe error because we want engineers to still be able to log and debug\r\nerrors.\r\n\r\n**test plan:**\r\nNew tests added are passing, and we verified that they fail without this\r\nchange.\r\n\r\n* Add more tests for error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded tests for more situations where error handling may come up.\r\n\r\n**why make this change?:**\r\nTo get additional protection against this being broken in the future.\r\n\r\n**test plan:**\r\nRan new tests and verified that they fail when error handling fails.\r\n\r\n* callSafely -> callUnsafely\r\n\r\n* Fix bugs with error handling in schedule\r\n\r\n**what is the change?:**\r\n- ensure that we properly remove the callback from the linked list, even\r\nif it throws an error and is timed out.\r\n- ensure that you can call cancelScheduledWork more than once and it\r\nis idempotent.\r\n\r\n**why make this change?:**\r\nTo fix bugs :)\r\n\r\n**test plan:**\r\nExisting tests pass, and well add more tests in a follow up commit.\r\n\r\n* Unit tests for error handling with timed out callbacks\r\n\r\n**what is the change?:**\r\nMore unit tests, to cover behavior which we missed; error handling of\r\ntimed out callbacks.\r\n\r\n**why make this change?:**\r\nTo protect the future!~\r\n\r\n**test plan:**\r\nRun the new tests.\r\n\r\n* Adds fixture to test timed out callbacks with scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\nIn the other error handling fixture we compare scheduleWork error\r\nhandling to requestAnimationFrame and try to get as close as possible.\r\nThere is no timing out feature with requestAnimationFrame but\r\neffectively the timing out feature changes the order in which things\r\nare called. So we just changed the order in the requestAnimationFrame\r\nversion and that works well for illustrating the behavior we expect in\r\nthe scheduleWork test.\r\n\r\n**why make this change?:**\r\nWe need more test coverage of timed out callbacks.\r\n\r\n**test plan:**\r\nExecuted the fixture manually in Firefox and Chrome. Results looked\r\ngood.\r\n\r\n* fix rebase problems\r\n\r\n* make fixture compensate for chrome JS speed\r\n\r\n* ran prettier\r\n\r\n* Remove cancelled flag on callbackConfig in scheduler, add test\r\n\r\n**what is the change?:**\r\n- Instead of using a cancelled flag on the callbackConfig, its easier\r\nto just check the state of the callbackConfig inside\r\ncancelScheduledWork to determine if its already been cancelled. That\r\nway we dont have to remember to set the cancelled flag every time we\r\ncall a callback or cancel it. One less thing to remember.\r\n- We added a test for calling cancelScheduledWork more than once,\r\nwhich would have failed before.\r\n\r\nThanks @acdlite for suggesting this in code review. :)\r\n\r\n**why make this change?:**\r\nTo increase stability of the schedule module, increase test coverage.\r\n\r\n**test plan:**\r\nExisting tests pass and we added a new test to cover this behavior.\r\n\r\n* fix typo\"",
                "additions": 624,
                "deletions": 30,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:38:48Z"
            },
            {
                "commitId": "65ab53694f6edf4437034d5644a602dea162e249",
                "message": "\"Update token (#12956)\"",
                "additions": 2,
                "deletions": 2,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-31T20:36:55Z"
            },
            {
                "commitId": "36546b5137e9012ebdc62fc9ec11e3518c9e0aab",
                "message": "\"Set the correct initial value on input range (#12939)\n\n* Set the correct initial value on input range\r\n\r\n* Add description and update value diff check for input range\r\n\r\n* add isHydrating argument and tests\r\n\r\n* update node value according to isHydrating\"",
                "additions": 36,
                "deletions": 6,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-31T21:23:26Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "return a commit message on July 31?",
        "number": 4,
        "category": 1,
        "response": "Here is a commit message from July 31st:\n\n\"[compiler] More complete validation against locals being reassigned after render\n\nSummary:\nThis diff extends the existing work on validating against locals being reassigned after render, by propagating the reassignment 'effect' into the lvalues of instructions when the rvalue operands include values known to cause reassignments. In particular, this 'closes the loop' for function definitions and function calls: a function that returns a function that reassigns will be considered to also perform reassignments, but previous to this we didn't consider the result of a `Call` of a function that reassigns to itself be a value that reassigns.\n\nThis causes a number of new bailouts in test cases, all of which appear to me to be legit.\n\nghstack-source-id: 770bf02d079ea2480be243a49caa6f69573d8092\nPull Request resolved: https://github.com/facebook/react/pull/30540\"",
        "chain_of_thought": "To address the question, we need to find a commit message from a specific date, July 31. The schema provides us with the Commit node, which has a property called `committedDate` that stores the date and time when the commit was made. The question specifies a date without a year, so we will assume it refers to the most recent July 31, which would be July 31, 2024, given the current date is August 26, 2024.\n\nThe relevant relationship is not needed here since we are directly querying the Commit node based on the `committedDate` property. We will use a regular expression to match the date part of the `committedDate` to \"2024-07-31\" and ignore the time part.\n\nThe query to find the commit message from July 31, 2024, is as follows:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31.*'\nRETURN c.message AS commitMessage\n```\n\nThis query matches commits where the `committedDate` starts with \"2024-07-31\" and returns the `message` of those commits.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31.*'\nRETURN c.message AS commitMessage\n",
        "result": [
            {
                "commitMessage": "\"[compiler] More complete validation against locals being reassigned after render\n\nSummary:\nThis diff extends the existing work on validating against locals being reassigned after render, by propagating the reassignment \"effect\" into the lvalues of instructions when the rvalue operands include values known to cause reassignments. In particular, this \"closes the loop\" for function definitions and function calls: a function that returns a function that reassigns will be considered to also perform reassignments, but previous to this we didnt consider the result of a `Call` of a function that reassigns to itself be a value that reassigns.\n\nThis causes a number of new bailouts in test cases, all of which appear to me to be legit.\n\nghstack-source-id: 770bf02d079ea2480be243a49caa6f69573d8092\nPull Request resolved: https://github.com/facebook/react/pull/30540\""
            },
            {
                "commitMessage": "\"[Fizz] Update postpone abort semantics when prerendering (#30541)\n\nWhen aborting with a postpone value in Fizz if any tasks are still\r\npending in the root while prerendering the prerender will fatally error.\r\nThis is different from postponing imperatively in a root task and really\r\nthe semantics should be the same. This change updates React to treat an\r\nabort with a postpone value as a postponed root rather than a fatal\r\nerror.\""
            },
            {
                "commitMessage": "\"[DevTools] Track the parent DevToolsInstance while mounting a tree (#30542)\n\nThis just tracks the `.parent` field properly and uses DevToolsInstances\r\nin more places that used to use IDs or Fibers.\r\n\r\nI also use this new parent path when looking up a DevToolsInstance from\r\na DOM node. This should ideally be simple because the `.parent` field\r\nrepresents only the unfiltered parents and include any virtual parents.\r\nSo we should be able to just get one from nearest Fiber that has one.\r\n\r\nHowever, because we dont currently always clean up the map of\r\nDevToolsInstances (e.g. updateComponentFilters doesnt recursively clean\r\nout everything) it can leave matches hanging that shouldnt be there. So\r\nwe need to run the shouldFilterFiber filter to ignore those.\r\n\r\nAnother interesting implication is that without a FiberInstance we dont\r\nhave a way to get to a VirtualInstance from a HostComponent. Which means\r\nthat even filtered Fibers need to have a FiberInstance if they have a\r\nVirtualInstance parent. Even if we dont actually mount them into the\r\nfront-end.\""
            },
            {
                "commitMessage": "\"Build all bundles required by flight fixture with `build-for-flight-dev` (#30534)\""
            },
            {
                "commitMessage": "\"[Flight] Enable owner stacks on the client when replaying logs (#30473)\n\nTheres a special case that happens when we replay logs on the client\r\nbecause this doesnt happen within the context of any particular\r\nrendered component. So we need to reimplement things that would normally\r\nbe handled by a full client like Fiber.\r\n\r\nThe implementation of `getOwnerStackByComponentInfoInDev` is the\r\nsimplest version since it doesnt have any client components in it so I\r\nmove it to `shared/`. Its only used by Flight but both `react-server/`\r\nand `react-client/` packages. The ReactComponentInfo type is also more\r\ngeneric than just Flight anyway.\r\n\r\nIn a follow up I still need to implement this in React DevTools when\r\nnative tasks are not available so that it appends it to the console.\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "show me the changes for BeforeInputEventPlugin.js file?",
        "number": 5,
        "category": 2,
        "response": "Here are the changes for the `BeforeInputEventPlugin.js` file:\n\n1. The file has undergone multiple modifications, including additions and deletions in various commits.\n   \n2. Several commits introduced new imports, such as `FallbackCompositionState` and `SyntheticCompositionEvent`, and some modified existing imports, like `ExecutionEnvironment`.\n\n3. The handling of text input events has been refined over time. Initially, the file relied on detecting `TextEvent` in the window object to decide on using the `textInput` event, but this was later enhanced with additional checks for browser-specific quirks, such as detecting Opera's Presto engine.\n\n4. The event types have been expanded to include `compositionStart`, `compositionEnd`, and `compositionUpdate`, alongside `beforeInput`.\n\n5. Logic for handling spacebar keypresses was introduced to work around browser-specific issues where preventing default behavior could lead to unintended scrolling.\n\n6. Fallback mechanisms for handling text input in browsers that do not support `textInput` events have been integrated, using keypress and composition events to deduce the input characters.\n\n7. The license information in the file headers was updated from the Apache License to a BSD-style license in multiple instances.\n\n8. Various refactorings were made, such as replacing `var` with `const` or `let`, and improving function names for clarity.\n\nOverall, the changes reflect enhancements in handling text input and composition events robustly across different browsers and environments.",
        "chain_of_thought": "To address the question, \"show me the changes for BeforeInputEventPlugin.js file,\" we need to identify the relevant nodes and relationships in the schema. The file in question is represented by the `File` node, and we are interested in the changes made to this file, which are captured by the `changed` relationship from the `Commit` node to the `File` node.\n\nHere's the step-by-step breakdown of the query:\n\n1. **Identify the File Node**: We need to find the `File` node with the name \"BeforeInputEventPlugin.js\".\n\n2. **Find the Changes**: We need to traverse from the `Commit` node to the `File` node using the `changed` relationship to get the details of the changes.\n\n3. **Return the Change Details**: We want to return details about the changes, such as the number of additions, deletions, and the patch.\n\nThe complete Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'BeforeInputEventPlugin.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n```\n\nThis query will return the commit ID, the number of additions and deletions, and the patch details for each change made to the file \"BeforeInputEventPlugin.js\", ordered by the commit date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'BeforeInputEventPlugin.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n",
        "result": [
            {
                "commitId": "0b4f443020af386f2b48c47c074cb504ed672dc8",
                "additions": 10,
                "deletions": 10,
                "patch": "@@ -192,11 +192,11 @@ let isComposing = false;\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n-  dispatchQueue,\n-  domEventName,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n ) {\n   let eventType;\n   let fallbackData;\n@@ -379,11 +379,11 @@ function getFallbackBeforeInputChars(\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n-  dispatchQueue,\n-  domEventName,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n ) {\n   let chars;\n "
            },
            {
                "commitId": "ea04a486a7c27771f7eea896565c0980927ed3b4",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -227,10 +227,8 @@ function extractCompositionEvent(\n     }\n   }\n \n-  // $FlowFixMe[incompatible-call] found when upgrading Flow\n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n-    // $FlowFixMe[incompatible-type]\n     const event: ReactSyntheticEvent = new SyntheticCompositionEvent(\n       eventType,\n       domEventName,\n@@ -403,7 +401,6 @@ function extractBeforeInputEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n   if (listeners.length > 0) {\n-    // $FlowFixMe[incompatible-type]\n     const event: ReactSyntheticEvent = new SyntheticInputEvent(\n       'onBeforeInput',\n       'beforeinput',"
            },
            {
                "commitId": "64fe791be84ad04a4a1d005376ba5cf5701db9b7",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -227,6 +227,7 @@ function extractCompositionEvent(\n     }\n   }\n \n+  // $FlowFixMe[incompatible-call] found when upgrading Flow\n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n     // $FlowFixMe[incompatible-type]"
            },
            {
                "commitId": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "9328988c024800de05dfab70e55cfd0999445d8a",
                "additions": 8,
                "deletions": 2,
                "patch": "@@ -12,6 +12,7 @@ import type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n import type {AnyNativeEvent} from '../../events/PluginModuleType';\n import type {DispatchQueue} from '../DOMPluginEventSystem';\n import type {EventSystemFlags} from '../EventSystemFlags';\n+import type {ReactSyntheticEvent} from '../ReactSyntheticEventType';\n \n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n@@ -228,7 +229,8 @@ function extractCompositionEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n-    const event = new SyntheticCompositionEvent(\n+    // $FlowFixMe[incompatible-type]\n+    const event: ReactSyntheticEvent = new SyntheticCompositionEvent(\n       eventType,\n       domEventName,\n       null,\n@@ -239,10 +241,12 @@ function extractCompositionEvent(\n     if (fallbackData) {\n       // Inject data generated from fallback path into the synthetic event.\n       // This matches the property of native CompositionEventInterface.\n+      // $FlowFixMe[incompatible-use]\n       event.data = fallbackData;\n     } else {\n       const customData = getDataFromCustomEvent(nativeEvent);\n       if (customData !== null) {\n+        // $FlowFixMe[incompatible-use]\n         event.data = customData;\n       }\n     }\n@@ -398,14 +402,16 @@ function extractBeforeInputEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n   if (listeners.length > 0) {\n-    const event = new SyntheticInputEvent(\n+    // $FlowFixMe[incompatible-type]\n+    const event: ReactSyntheticEvent = new SyntheticInputEvent(\n       'onBeforeInput',\n       'beforeinput',\n       null,\n       nativeEvent,\n       nativeEventTarget,\n     );\n     dispatchQueue.push({event, listeners});\n+    // $FlowFixMe[incompatible-use]\n     event.data = chars;\n   }\n }"
            },
            {
                "commitId": "480626a9e920d5e04194c793a828318102ea4ff4",
                "additions": 31,
                "deletions": 26,
                "patch": "@@ -226,23 +226,25 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticCompositionEvent(\n-    eventType,\n-    domEventName,\n-    null,\n-    nativeEvent,\n-    nativeEventTarget,\n-  );\n-  accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n-\n-  if (fallbackData) {\n-    // Inject data generated from fallback path into the synthetic event.\n-    // This matches the property of native CompositionEventInterface.\n-    event.data = fallbackData;\n-  } else {\n-    const customData = getDataFromCustomEvent(nativeEvent);\n-    if (customData !== null) {\n-      event.data = customData;\n+  const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n+  if (listeners.length > 0) {\n+    const event = new SyntheticCompositionEvent(\n+      eventType,\n+      domEventName,\n+      null,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+    dispatchQueue.push({event, listeners});\n+    if (fallbackData) {\n+      // Inject data generated from fallback path into the synthetic event.\n+      // This matches the property of native CompositionEventInterface.\n+      event.data = fallbackData;\n+    } else {\n+      const customData = getDataFromCustomEvent(nativeEvent);\n+      if (customData !== null) {\n+        event.data = customData;\n+      }\n     }\n   }\n }\n@@ -394,15 +396,18 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticInputEvent(\n-    'onBeforeInput',\n-    'beforeinput',\n-    null,\n-    nativeEvent,\n-    nativeEventTarget,\n-  );\n-  accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n-  event.data = chars;\n+  const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n+  if (listeners.length > 0) {\n+    const event = new SyntheticInputEvent(\n+      'onBeforeInput',\n+      'beforeinput',\n+      null,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+    dispatchQueue.push({event, listeners});\n+    event.data = chars;\n+  }\n }\n \n /**"
            },
            {
                "commitId": "1890159a5d362e76ee949dfcace1ccb9677abc45",
                "additions": 4,
                "deletions": 7,
                "patch": "@@ -22,9 +22,8 @@ import {\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n import {\n-  CompositionEventInterface,\n-  InputEventInterface,\n-  SyntheticEvent,\n+  SyntheticCompositionEvent,\n+  SyntheticInputEvent,\n } from '../SyntheticEvent';\n import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n@@ -227,13 +226,12 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticEvent(\n+  const event = new SyntheticCompositionEvent(\n     eventType,\n     domEventName,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n-    CompositionEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n \n@@ -396,13 +394,12 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticEvent(\n+  const event = new SyntheticInputEvent(\n     'onBeforeInput',\n     'beforeinput',\n     null,\n     nativeEvent,\n     nativeEventTarget,\n-    InputEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n   event.data = chars;"
            },
            {
                "commitId": "7f696bd99c39348a631c20378d2a8704634bab04",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -229,6 +229,7 @@ function extractCompositionEvent(\n \n   const event = new SyntheticEvent(\n     eventType,\n+    domEventName,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n@@ -397,6 +398,7 @@ function extractBeforeInputEvent(\n \n   const event = new SyntheticEvent(\n     'onBeforeInput',\n+    'beforeinput',\n     null,\n     nativeEvent,\n     nativeEventTarget,"
            },
            {
                "commitId": "22d16cc15df8e570b79c2825fb495c2b98b40bf5",
                "additions": 87,
                "deletions": 101,
                "patch": "@@ -3,25 +3,19 @@\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n  */\n \n-import type {TopLevelType} from '../../events/TopLevelEventTypes';\n+import type {DOMEventName} from '../../events/DOMEventNames';\n+import type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n+import type {AnyNativeEvent} from '../../events/PluginModuleType';\n+import type {DispatchQueue} from '../DOMPluginEventSystem';\n+import type {EventSystemFlags} from '../EventSystemFlags';\n \n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {registerTwoPhaseEvent} from '../EventRegistry';\n-import {\n-  TOP_FOCUS_OUT,\n-  TOP_COMPOSITION_START,\n-  TOP_COMPOSITION_END,\n-  TOP_COMPOSITION_UPDATE,\n-  TOP_KEY_DOWN,\n-  TOP_KEY_PRESS,\n-  TOP_KEY_UP,\n-  TOP_MOUSE_DOWN,\n-  TOP_TEXT_INPUT,\n-  TOP_PASTE,\n-} from '../DOMTopLevelEventTypes';\n import {\n   getData as FallbackCompositionStateGetData,\n   initialize as FallbackCompositionStateInitialize,\n@@ -63,34 +57,34 @@ const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n function registerEvents() {\n   registerTwoPhaseEvent('onBeforeInput', [\n-    TOP_COMPOSITION_END,\n-    TOP_KEY_PRESS,\n-    TOP_TEXT_INPUT,\n-    TOP_PASTE,\n+    'compositionend',\n+    'keypress',\n+    'textInput',\n+    'paste',\n   ]);\n   registerTwoPhaseEvent('onCompositionEnd', [\n-    TOP_COMPOSITION_END,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionend',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n   registerTwoPhaseEvent('onCompositionStart', [\n-    TOP_COMPOSITION_START,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionstart',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n   registerTwoPhaseEvent('onCompositionUpdate', [\n-    TOP_COMPOSITION_UPDATE,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionupdate',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n }\n \n@@ -102,7 +96,7 @@ let hasSpaceKeypress = false;\n  * This is required because Firefox fires `keypress` events for key commands\n  * (cut, copy, select-all, etc.) even though no character is inserted.\n  */\n-function isKeypressCommand(nativeEvent) {\n+function isKeypressCommand(nativeEvent: any) {\n   return (\n     (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n     // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n@@ -112,52 +106,47 @@ function isKeypressCommand(nativeEvent) {\n \n /**\n  * Translate native top level events into event types.\n- *\n- * @param {string} topLevelType\n- * @return {object}\n  */\n-function getCompositionEventType(topLevelType) {\n-  switch (topLevelType) {\n-    case TOP_COMPOSITION_START:\n+function getCompositionEventType(domEventName: DOMEventName) {\n+  switch (domEventName) {\n+    case 'compositionstart':\n       return 'onCompositionStart';\n-    case TOP_COMPOSITION_END:\n+    case 'compositionend':\n       return 'onCompositionEnd';\n-    case TOP_COMPOSITION_UPDATE:\n+    case 'compositionupdate':\n       return 'onCompositionUpdate';\n   }\n }\n \n /**\n  * Does our fallback best-guess model think this event signifies that\n  * composition has begun?\n- *\n- * @param {string} topLevelType\n- * @param {object} nativeEvent\n- * @return {boolean}\n  */\n-function isFallbackCompositionStart(topLevelType, nativeEvent) {\n-  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;\n+function isFallbackCompositionStart(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): boolean {\n+  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;\n }\n \n /**\n  * Does our fallback mode think that this event is the end of composition?\n- *\n- * @param {string} topLevelType\n- * @param {object} nativeEvent\n- * @return {boolean}\n  */\n-function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n-  switch (topLevelType) {\n-    case TOP_KEY_UP:\n+function isFallbackCompositionEnd(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): boolean {\n+  switch (domEventName) {\n+    case 'keyup':\n       // Command keys insert or clear IME input.\n       return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n-    case TOP_KEY_DOWN:\n+    case 'keydown':\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return nativeEvent.keyCode !== START_KEYCODE;\n-    case TOP_KEY_PRESS:\n-    case TOP_MOUSE_DOWN:\n-    case TOP_FOCUS_OUT:\n+    case 'keypress':\n+    case 'mousedown':\n+    case 'focusout':\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -174,7 +163,7 @@ function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  * @param {object} nativeEvent\n  * @return {?string}\n  */\n-function getDataFromCustomEvent(nativeEvent) {\n+function getDataFromCustomEvent(nativeEvent: any) {\n   const detail = nativeEvent.detail;\n   if (typeof detail === 'object' && 'data' in detail) {\n     return detail.data;\n@@ -192,7 +181,7 @@ function getDataFromCustomEvent(nativeEvent) {\n  * @param {object} nativeEvent\n  * @return {boolean}\n  */\n-function isUsingKoreanIME(nativeEvent) {\n+function isUsingKoreanIME(nativeEvent: any) {\n   return nativeEvent.locale === 'ko';\n }\n \n@@ -204,7 +193,7 @@ let isComposing = false;\n  */\n function extractCompositionEvent(\n   dispatchQueue,\n-  topLevelType,\n+  domEventName,\n   targetInst,\n   nativeEvent,\n   nativeEventTarget,\n@@ -213,12 +202,12 @@ function extractCompositionEvent(\n   let fallbackData;\n \n   if (canUseCompositionEvent) {\n-    eventType = getCompositionEventType(topLevelType);\n+    eventType = getCompositionEventType(domEventName);\n   } else if (!isComposing) {\n-    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+    if (isFallbackCompositionStart(domEventName, nativeEvent)) {\n       eventType = 'onCompositionStart';\n     }\n-  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {\n     eventType = 'onCompositionEnd';\n   }\n \n@@ -259,16 +248,14 @@ function extractCompositionEvent(\n   }\n }\n \n-/**\n- * @param {TopLevelType} topLevelType Number from `TopLevelType`.\n- * @param {object} nativeEvent Native browser event.\n- * @return {?string} The string corresponding to this `beforeInput` event.\n- */\n-function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n-  switch (topLevelType) {\n-    case TOP_COMPOSITION_END:\n+function getNativeBeforeInputChars(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): ?string {\n+  switch (domEventName) {\n+    case 'compositionend':\n       return getDataFromCustomEvent(nativeEvent);\n-    case TOP_KEY_PRESS:\n+    case 'keypress':\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -291,7 +278,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case TOP_TEXT_INPUT:\n+    case 'textInput':\n       // Record the characters to be added to the DOM.\n       const chars = nativeEvent.data;\n \n@@ -313,21 +300,20 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n /**\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n- *\n- * @param {number} topLevelType Number from `TopLevelEventTypes`.\n- * @param {object} nativeEvent Native browser event.\n- * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n+function getFallbackBeforeInputChars(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): ?string {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n   if (isComposing) {\n     if (\n-      topLevelType === TOP_COMPOSITION_END ||\n+      domEventName === 'compositionend' ||\n       (!canUseCompositionEvent &&\n-        isFallbackCompositionEnd(topLevelType, nativeEvent))\n+        isFallbackCompositionEnd(domEventName, nativeEvent))\n     ) {\n       const chars = FallbackCompositionStateGetData();\n       FallbackCompositionStateReset();\n@@ -337,12 +323,12 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n     return null;\n   }\n \n-  switch (topLevelType) {\n-    case TOP_PASTE:\n+  switch (domEventName) {\n+    case 'paste':\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case TOP_KEY_PRESS:\n+    case 'keypress':\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -373,7 +359,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n         }\n       }\n       return null;\n-    case TOP_COMPOSITION_END:\n+    case 'compositionend':\n       return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)\n         ? null\n         : nativeEvent.data;\n@@ -390,17 +376,17 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n  */\n function extractBeforeInputEvent(\n   dispatchQueue,\n-  topLevelType,\n+  domEventName,\n   targetInst,\n   nativeEvent,\n   nativeEventTarget,\n ) {\n   let chars;\n \n   if (canUseTextInputEvent) {\n-    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+    chars = getNativeBeforeInputChars(domEventName, nativeEvent);\n   } else {\n-    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);\n   }\n \n   // If no characters are being inserted, no BeforeInput event should\n@@ -439,24 +425,24 @@ function extractBeforeInputEvent(\n  * `composition` event types.\n  */\n function extractEvents(\n-  dispatchQueue,\n-  topLevelType,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n-  eventSystemFlags,\n-  targetContainer,\n-) {\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n+  eventSystemFlags: EventSystemFlags,\n+  targetContainer: EventTarget,\n+): void {\n   extractCompositionEvent(\n     dispatchQueue,\n-    topLevelType,\n+    domEventName,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,\n   );\n   extractBeforeInputEvent(\n     dispatchQueue,\n-    topLevelType,\n+    domEventName,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,"
            },
            {
                "commitId": "76ce685d0fc7821a6c8be486d7cbb2c3d22f6fb7",
                "additions": 7,
                "deletions": 4,
                "patch": "@@ -28,8 +28,9 @@ import {\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n import {\n-  SyntheticCompositionEvent,\n-  SyntheticInputEvent,\n+  CompositionEventInterface,\n+  InputEventInterface,\n+  SyntheticEvent,\n } from '../SyntheticEvent';\n import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n@@ -237,11 +238,12 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticCompositionEvent(\n+  const event = new SyntheticEvent(\n     eventType,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n+    CompositionEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n \n@@ -407,11 +409,12 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticInputEvent(\n+  const event = new SyntheticEvent(\n     'onBeforeInput',\n     null,\n     nativeEvent,\n     nativeEventTarget,\n+    InputEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n   event.data = chars;"
            },
            {
                "commitId": "125d1a19a211c51d5ee52ec0c1cc1f538eb44d5c",
                "additions": 5,
                "deletions": 3,
                "patch": "@@ -27,9 +27,11 @@ import {\n   initialize as FallbackCompositionStateInitialize,\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n-import SyntheticCompositionEvent from '../SyntheticCompositionEvent';\n-import SyntheticInputEvent from '../SyntheticInputEvent';\n-import {accumulateTwoPhaseListeners} from '../DOMModernPluginEventSystem';\n+import {\n+  SyntheticCompositionEvent,\n+  SyntheticInputEvent,\n+} from '../SyntheticEvent';\n+import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;"
            },
            {
                "commitId": "d3ec42020d220777bf589bec36c9cd8300ec9742",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -28,7 +28,7 @@ import {\n } from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n-import {accumulateTwoPhaseListeners} from './DOMModernPluginEventSystem';\n+import accumulateTwoPhaseListeners from './accumulateTwoPhaseListeners';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;"
            },
            {
                "commitId": "30a998debf79f8c8efb3fa9b6ff5458fb319d7a1",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -7,7 +7,6 @@\n \n import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatchesSingle} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n@@ -29,6 +28,7 @@ import {\n } from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n+import {accumulateTwoPhaseListeners} from './DOMModernPluginEventSystem';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;\n@@ -276,7 +276,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  accumulateTwoPhaseDispatchesSingle(event);\n+  accumulateTwoPhaseListeners(event);\n   return event;\n }\n \n@@ -437,7 +437,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  accumulateTwoPhaseDispatchesSingle(event);\n+  accumulateTwoPhaseListeners(event);\n   return event;\n }\n "
            },
            {
                "commitId": "2fe0fbb05ef2c56db760122e995b923528e6ce8f",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -7,7 +7,7 @@\n \n import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n+import {accumulateTwoPhaseDispatchesSingle} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n@@ -276,7 +276,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatchesSingle(event);\n   return event;\n }\n \n@@ -437,7 +437,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatchesSingle(event);\n   return event;\n }\n "
            },
            {
                "commitId": "ab1a4f249e61045d523ddbbfb840e868afbbf785",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -464,10 +464,10 @@ const BeforeInputEventPlugin = {\n \n   extractEvents: function(\n     topLevelType,\n-    eventSystemFlags,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,\n+    eventSystemFlags,\n   ) {\n     const composition = extractCompositionEvent(\n       topLevelType,"
            },
            {
                "commitId": "0a527707cd8befd21a741ca9646a8551842190b0",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -464,6 +464,7 @@ const BeforeInputEventPlugin = {\n \n   extractEvents: function(\n     topLevelType,\n+    eventSystemFlags,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,"
            },
            {
                "commitId": "44e410900da8ef7b5e7daf18e7a0bf61b6612247",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,9 +5,9 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelType} from 'events/TopLevelEventTypes';\n+import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {"
            },
            {
                "commitId": "b1a03dfdc8e42d075422556553ffe59868150e95",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,9 +5,9 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelType} from 'events/TopLevelEventTypes';\n+import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {"
            },
            {
                "commitId": "c954efa70f44a44be9c33c60c57f87bea6f40a10",
                "additions": 9,
                "deletions": 5,
                "patch": "@@ -22,7 +22,11 @@ import {\n   TOP_TEXT_INPUT,\n   TOP_PASTE,\n } from './DOMTopLevelEventTypes';\n-import * as FallbackCompositionState from './FallbackCompositionState';\n+import {\n+  getData as FallbackCompositionStateGetData,\n+  initialize as FallbackCompositionStateInitialize,\n+  reset as FallbackCompositionStateReset,\n+} from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n@@ -246,10 +250,10 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!isComposing && eventType === eventTypes.compositionStart) {\n-      isComposing = FallbackCompositionState.initialize(nativeEventTarget);\n+      isComposing = FallbackCompositionStateInitialize(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (isComposing) {\n-        fallbackData = FallbackCompositionState.getData();\n+        fallbackData = FallbackCompositionStateGetData();\n       }\n     }\n   }\n@@ -346,8 +350,8 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      const chars = FallbackCompositionState.getData();\n-      FallbackCompositionState.reset();\n+      const chars = FallbackCompositionStateGetData();\n+      FallbackCompositionStateReset();\n       isComposing = false;\n       return chars;\n     }"
            },
            {
                "commitId": "8a8d973d3cc5623676a84f87af66ef9259c3937c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -314,7 +314,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n \n       // If it's a spacebar character, assume that we have already handled\n       // it at the keypress level and bail immediately. Android Chrome\n-      // doesn't give us keycodes, so we need to blacklist it.\n+      // doesn't give us keycodes, so we need to ignore it.\n       if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n         return null;\n       }"
            },
            {
                "commitId": "b87aabdfe1b7461e7331abb3601d9e6bb27544bc",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2013-present, Facebook, Inc.\n+ * Copyright (c) Facebook, Inc. and its affiliates.\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree."
            },
            {
                "commitId": "72434a7686035b4af766ee7d06c070d7f5d6a5f2",
                "additions": 5,
                "deletions": 6,
                "patch": "@@ -8,7 +8,7 @@\n import type {TopLevelType} from 'events/TopLevelEventTypes';\n \n import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n-import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n+import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n   TOP_BLUR,\n@@ -29,25 +29,24 @@ import SyntheticInputEvent from './SyntheticInputEvent';\n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;\n \n-const canUseCompositionEvent =\n-  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n+const canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;\n \n let documentMode = null;\n-if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+if (canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n const canUseTextInputEvent =\n-  ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;\n+  canUseDOM && 'TextEvent' in window && !documentMode;\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n const useFallbackCompositionData =\n-  ExecutionEnvironment.canUseDOM &&\n+  canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n "
            },
            {
                "commitId": "2e757790751ab8d165fc4df37e90a59d914c4527",
                "additions": 18,
                "deletions": 2,
                "patch": "@@ -200,6 +200,20 @@ function getDataFromCustomEvent(nativeEvent) {\n   return null;\n }\n \n+/**\n+ * Check if a composition event was triggered by Korean IME.\n+ * Our fallback mode does not work well with IE's Korean IME,\n+ * so just use native composition events when Korean IME is used.\n+ * Although CompositionEvent.locale property is deprecated,\n+ * it is available in IE, where our fallback mode is enabled.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isUsingKoreanIME(nativeEvent) {\n+  return nativeEvent.locale === 'ko';\n+}\n+\n // Track the current IME composition status, if any.\n let isComposing = false;\n \n@@ -229,7 +243,7 @@ function extractCompositionEvent(\n     return null;\n   }\n \n-  if (useFallbackCompositionData) {\n+  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!isComposing && eventType === eventTypes.compositionStart) {\n@@ -378,7 +392,9 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       }\n       return null;\n     case TOP_COMPOSITION_END:\n-      return useFallbackCompositionData ? null : nativeEvent.data;\n+      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)\n+        ? null\n+        : nativeEvent.data;\n     default:\n       return null;\n   }"
            },
            {
                "commitId": "e96dc140599363029bd05565d58bcd4a432db370",
                "additions": 55,
                "deletions": 43,
                "patch": "@@ -5,11 +5,23 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelTypes} from './BrowserEventConstants';\n+import type {TopLevelType} from 'events/TopLevelEventTypes';\n \n import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n+import {\n+  TOP_BLUR,\n+  TOP_COMPOSITION_START,\n+  TOP_COMPOSITION_END,\n+  TOP_COMPOSITION_UPDATE,\n+  TOP_KEY_DOWN,\n+  TOP_KEY_PRESS,\n+  TOP_KEY_UP,\n+  TOP_MOUSE_DOWN,\n+  TOP_TEXT_INPUT,\n+  TOP_PASTE,\n+} from './DOMTopLevelEventTypes';\n import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n@@ -50,10 +62,10 @@ const eventTypes = {\n       captured: 'onBeforeInputCapture',\n     },\n     dependencies: [\n-      'topCompositionEnd',\n-      'topKeyPress',\n-      'topTextInput',\n-      'topPaste',\n+      TOP_COMPOSITION_END,\n+      TOP_KEY_PRESS,\n+      TOP_TEXT_INPUT,\n+      TOP_PASTE,\n     ],\n   },\n   compositionEnd: {\n@@ -62,12 +74,12 @@ const eventTypes = {\n       captured: 'onCompositionEndCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionEnd',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_END,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n   compositionStart: {\n@@ -76,12 +88,12 @@ const eventTypes = {\n       captured: 'onCompositionStartCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionStart',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_START,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n   compositionUpdate: {\n@@ -90,12 +102,12 @@ const eventTypes = {\n       captured: 'onCompositionUpdateCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionUpdate',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_UPDATE,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n };\n@@ -124,11 +136,11 @@ function isKeypressCommand(nativeEvent) {\n  */\n function getCompositionEventType(topLevelType) {\n   switch (topLevelType) {\n-    case 'topCompositionStart':\n+    case TOP_COMPOSITION_START:\n       return eventTypes.compositionStart;\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return eventTypes.compositionEnd;\n-    case 'topCompositionUpdate':\n+    case TOP_COMPOSITION_UPDATE:\n       return eventTypes.compositionUpdate;\n   }\n }\n@@ -142,7 +154,7 @@ function getCompositionEventType(topLevelType) {\n  * @return {boolean}\n  */\n function isFallbackCompositionStart(topLevelType, nativeEvent) {\n-  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;\n+  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;\n }\n \n /**\n@@ -154,16 +166,16 @@ function isFallbackCompositionStart(topLevelType, nativeEvent) {\n  */\n function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case 'topKeyUp':\n+    case TOP_KEY_UP:\n       // Command keys insert or clear IME input.\n       return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n-    case 'topKeyDown':\n+    case TOP_KEY_DOWN:\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return nativeEvent.keyCode !== START_KEYCODE;\n-    case 'topKeyPress':\n-    case 'topMouseDown':\n-    case 'topBlur':\n+    case TOP_KEY_PRESS:\n+    case TOP_MOUSE_DOWN:\n+    case TOP_BLUR:\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -252,15 +264,15 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n+ * @param {TopLevelType} topLevelType Number from `TopLevelType`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n-function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n+function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return getDataFromCustomEvent(nativeEvent);\n-    case 'topKeyPress':\n+    case TOP_KEY_PRESS:\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -283,7 +295,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case 'topTextInput':\n+    case TOP_TEXT_INPUT:\n       // Record the characters to be added to the DOM.\n       const chars = nativeEvent.data;\n \n@@ -306,18 +318,18 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n  *\n- * @param {string} topLevelType Record from `BrowserEventConstants`.\n+ * @param {number} topLevelType Number from `TopLevelEventTypes`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n+function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n   if (isComposing) {\n     if (\n-      topLevelType === 'topCompositionEnd' ||\n+      topLevelType === TOP_COMPOSITION_END ||\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n@@ -330,11 +342,11 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   }\n \n   switch (topLevelType) {\n-    case 'topPaste':\n+    case TOP_PASTE:\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case 'topKeyPress':\n+    case TOP_KEY_PRESS:\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -365,7 +377,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n         }\n       }\n       return null;\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return useFallbackCompositionData ? null : nativeEvent.data;\n     default:\n       return null;"
            },
            {
                "commitId": "4d37040cbf914c9d3c282e8edd67fa97a3c31178",
                "additions": 1,
                "deletions": 18,
                "patch": "@@ -29,10 +29,7 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n const canUseTextInputEvent =\n-  ExecutionEnvironment.canUseDOM &&\n-  'TextEvent' in window &&\n-  !documentMode &&\n-  !isPresto();\n+  ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n@@ -42,20 +39,6 @@ const useFallbackCompositionData =\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n \n-/**\n- * Opera <= 12 includes TextEvent in window, but does not fire\n- * text input events. Rely on keypress instead.\n- */\n-function isPresto() {\n-  const opera = window.opera;\n-  return (\n-    opera !== null &&\n-    typeof opera === 'object' &&\n-    typeof opera.version === 'function' &&\n-    parseInt(opera.version(), 10) <= 12\n-  );\n-}\n-\n const SPACEBAR_CODE = 32;\n const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n "
            },
            {
                "commitId": "faa4218632ca21f3af731fb6c14849fc054fca15",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -49,6 +49,7 @@ const useFallbackCompositionData =\n function isPresto() {\n   const opera = window.opera;\n   return (\n+    opera !== null &&\n     typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n     parseInt(opera.version(), 10) <= 12"
            },
            {
                "commitId": "cc52e06b490e0dc2482b345aa5d0d65fae931095",
                "additions": 23,
                "deletions": 14,
                "patch": "@@ -453,20 +453,29 @@ const BeforeInputEventPlugin = {\n     nativeEvent,\n     nativeEventTarget,\n   ) {\n-    return [\n-      extractCompositionEvent(\n-        topLevelType,\n-        targetInst,\n-        nativeEvent,\n-        nativeEventTarget,\n-      ),\n-      extractBeforeInputEvent(\n-        topLevelType,\n-        targetInst,\n-        nativeEvent,\n-        nativeEventTarget,\n-      ),\n-    ];\n+    const composition = extractCompositionEvent(\n+      topLevelType,\n+      targetInst,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+\n+    const beforeInput = extractBeforeInputEvent(\n+      topLevelType,\n+      targetInst,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+\n+    if (composition === null) {\n+      return beforeInput;\n+    }\n+\n+    if (beforeInput === null) {\n+      return composition;\n+    }\n+\n+    return [composition, beforeInput];\n   },\n };\n "
            },
            {
                "commitId": "5bd2321ae3dd7d68ac02dee3c3f271e9d0ee8784",
                "additions": 23,
                "deletions": 23,
                "patch": "@@ -14,21 +14,21 @@ import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n-var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n-var START_KEYCODE = 229;\n+const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+const START_KEYCODE = 229;\n \n-var canUseCompositionEvent =\n+const canUseCompositionEvent =\n   ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n \n-var documentMode = null;\n+let documentMode = null;\n if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n-var canUseTextInputEvent =\n+const canUseTextInputEvent =\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n@@ -37,7 +37,7 @@ var canUseTextInputEvent =\n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n-var useFallbackCompositionData =\n+const useFallbackCompositionData =\n   ExecutionEnvironment.canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n@@ -47,19 +47,19 @@ var useFallbackCompositionData =\n  * text input events. Rely on keypress instead.\n  */\n function isPresto() {\n-  var opera = window.opera;\n+  const opera = window.opera;\n   return (\n     typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n     parseInt(opera.version(), 10) <= 12\n   );\n }\n \n-var SPACEBAR_CODE = 32;\n-var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n+const SPACEBAR_CODE = 32;\n+const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n // Events and their corresponding property names.\n-var eventTypes = {\n+const eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: 'onBeforeInput',\n@@ -117,7 +117,7 @@ var eventTypes = {\n };\n \n // Track whether we've ever handled a keypress on the space key.\n-var hasSpaceKeypress = false;\n+let hasSpaceKeypress = false;\n \n /**\n  * Return whether a native keypress event is assumed to be a command.\n@@ -197,15 +197,15 @@ function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  * @return {?string}\n  */\n function getDataFromCustomEvent(nativeEvent) {\n-  var detail = nativeEvent.detail;\n+  const detail = nativeEvent.detail;\n   if (typeof detail === 'object' && 'data' in detail) {\n     return detail.data;\n   }\n   return null;\n }\n \n // Track the current IME composition status, if any.\n-var isComposing = false;\n+let isComposing = false;\n \n /**\n  * @return {?object} A SyntheticCompositionEvent.\n@@ -216,8 +216,8 @@ function extractCompositionEvent(\n   nativeEvent,\n   nativeEventTarget,\n ) {\n-  var eventType;\n-  var fallbackData;\n+  let eventType;\n+  let fallbackData;\n \n   if (canUseCompositionEvent) {\n     eventType = getCompositionEventType(topLevelType);\n@@ -245,7 +245,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  var event = SyntheticCompositionEvent.getPooled(\n+  const event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     targetInst,\n     nativeEvent,\n@@ -257,7 +257,7 @@ function extractCompositionEvent(\n     // This matches the property of native CompositionEventInterface.\n     event.data = fallbackData;\n   } else {\n-    var customData = getDataFromCustomEvent(nativeEvent);\n+    const customData = getDataFromCustomEvent(nativeEvent);\n     if (customData !== null) {\n       event.data = customData;\n     }\n@@ -291,7 +291,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n        * To avoid this issue, use the keypress event as if no `textInput`\n        * event is available.\n        */\n-      var which = nativeEvent.which;\n+      const which = nativeEvent.which;\n       if (which !== SPACEBAR_CODE) {\n         return null;\n       }\n@@ -301,7 +301,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n \n     case 'topTextInput':\n       // Record the characters to be added to the DOM.\n-      var chars = nativeEvent.data;\n+      const chars = nativeEvent.data;\n \n       // If it's a spacebar character, assume that we have already handled\n       // it at the keypress level and bail immediately. Android Chrome\n@@ -337,7 +337,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      var chars = FallbackCompositionState.getData();\n+      const chars = FallbackCompositionState.getData();\n       FallbackCompositionState.reset();\n       isComposing = false;\n       return chars;\n@@ -400,7 +400,7 @@ function extractBeforeInputEvent(\n   nativeEvent,\n   nativeEventTarget,\n ) {\n-  var chars;\n+  let chars;\n \n   if (canUseTextInputEvent) {\n     chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n@@ -414,7 +414,7 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  var event = SyntheticInputEvent.getPooled(\n+  const event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     targetInst,\n     nativeEvent,\n@@ -444,7 +444,7 @@ function extractBeforeInputEvent(\n  * allowing us to share composition fallback code for both `beforeInput` and\n  * `composition` event types.\n  */\n-var BeforeInputEventPlugin = {\n+const BeforeInputEventPlugin = {\n   eventTypes: eventTypes,\n \n   extractEvents: function("
            },
            {
                "commitId": "92b7b172cce9958b846844f0b46fd7bbd8c5140d",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -7,10 +7,10 @@\n \n import type {TopLevelTypes} from './BrowserEventConstants';\n \n-import EventPropagators from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n-import FallbackCompositionState from './FallbackCompositionState';\n+import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n@@ -263,7 +263,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatches(event);\n   return event;\n }\n \n@@ -422,7 +422,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatches(event);\n   return event;\n }\n "
            },
            {
                "commitId": "45c1ff348e1c7d03567f5bba6cb32cffa9222972",
                "additions": 0,
                "deletions": 2,
                "patch": "@@ -5,8 +5,6 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-'use strict';\n-\n import type {TopLevelTypes} from './BrowserEventConstants';\n \n import EventPropagators from 'events/EventPropagators';"
            },
            {
                "commitId": "21d0c115238b4f38837020cf83e0c657d8c01c9f",
                "additions": 6,
                "deletions": 6,
                "patch": "@@ -9,12 +9,12 @@\n \n import type {TopLevelTypes} from './BrowserEventConstants';\n \n-var EventPropagators = require('events/EventPropagators');\n-var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n+import EventPropagators from 'events/EventPropagators';\n+import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n-var FallbackCompositionState = require('./FallbackCompositionState');\n-var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n-var SyntheticInputEvent = require('./SyntheticInputEvent');\n+import FallbackCompositionState from './FallbackCompositionState';\n+import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n+import SyntheticInputEvent from './SyntheticInputEvent';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n@@ -472,4 +472,4 @@ var BeforeInputEventPlugin = {\n   },\n };\n \n-module.exports = BeforeInputEventPlugin;\n+export default BeforeInputEventPlugin;"
            },
            {
                "commitId": "087c48bb36b88ef0b5bbca2b9b70a52d8d413102",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -7,14 +7,15 @@\n \n 'use strict';\n \n+import type {TopLevelTypes} from './BrowserEventConstants';\n+\n var EventPropagators = require('events/EventPropagators');\n var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n+\n var FallbackCompositionState = require('./FallbackCompositionState');\n var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n var SyntheticInputEvent = require('./SyntheticInputEvent');\n \n-import type {TopLevelTypes} from 'BrowserEventConstants';\n-\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n "
            },
            {
                "commitId": "1eed302d346bfb8f5db8d88b0e7096d8999d3548",
                "additions": 4,
                "deletions": 6,
                "patch": "@@ -3,17 +3,15 @@\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.\n- *\n- * @providesModule BeforeInputEventPlugin\n  */\n \n 'use strict';\n \n-var EventPropagators = require('EventPropagators');\n+var EventPropagators = require('events/EventPropagators');\n var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n-var FallbackCompositionState = require('FallbackCompositionState');\n-var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n-var SyntheticInputEvent = require('SyntheticInputEvent');\n+var FallbackCompositionState = require('./FallbackCompositionState');\n+var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n+var SyntheticInputEvent = require('./SyntheticInputEvent');\n \n import type {TopLevelTypes} from 'BrowserEventConstants';\n "
            },
            {
                "commitId": "e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "ab853e6f3ef69a56f042f5aa5c07da881fdb68a0",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "313611572b6567d229367ed20ff63d1bca8610bb",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "d9c1dbd61772f8f8ab0cdf389e70463d704c480b",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "d63249d03488fec1ea92a81ba29f0e87a82feeae",
                "additions": 3,
                "deletions": 5,
                "patch": "@@ -1,10 +1,8 @@\n /**\n- * Copyright 2013-present Facebook, Inc.\n- * All rights reserved.\n+ * Copyright (c) 2013-present, Facebook, Inc.\n  *\n- * This source code is licensed under the BSD-style license found in the\n- * LICENSE file in the root directory of this source tree. An additional grant\n- * of patent rights can be found in the PATENTS file in the same directory.\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n  *\n  * @providesModule BeforeInputEventPlugin\n  */"
            },
            {
                "commitId": "0e556fef24e9db468d00b05ef8ddfa0b06b08f0c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -273,7 +273,7 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {string} topLevelType Record from `BrowserEventConstants`.\n+ * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */"
            },
            {
                "commitId": "755724a24c4743b5507590e512cdf2f24d9b8435",
                "additions": 11,
                "deletions": 13,
                "patch": "@@ -209,8 +209,8 @@ function getDataFromCustomEvent(nativeEvent) {\n   return null;\n }\n \n-// Track the current IME composition fallback object, if any.\n-var currentComposition = null;\n+// Track the current IME composition status, if any.\n+var isComposing = false;\n \n /**\n  * @return {?object} A SyntheticCompositionEvent.\n@@ -226,7 +226,7 @@ function extractCompositionEvent(\n \n   if (canUseCompositionEvent) {\n     eventType = getCompositionEventType(topLevelType);\n-  } else if (!currentComposition) {\n+  } else if (!isComposing) {\n     if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n       eventType = eventTypes.compositionStart;\n     }\n@@ -241,13 +241,11 @@ function extractCompositionEvent(\n   if (useFallbackCompositionData) {\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n-    if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(\n-        nativeEventTarget,\n-      );\n+    if (!isComposing && eventType === eventTypes.compositionStart) {\n+      isComposing = FallbackCompositionState.initialize(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n-      if (currentComposition) {\n-        fallbackData = currentComposition.getData();\n+      if (isComposing) {\n+        fallbackData = FallbackCompositionState.getData();\n       }\n     }\n   }\n@@ -338,15 +336,15 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n-  if (currentComposition) {\n+  if (isComposing) {\n     if (\n       topLevelType === 'topCompositionEnd' ||\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      var chars = currentComposition.getData();\n-      FallbackCompositionState.release(currentComposition);\n-      currentComposition = null;\n+      var chars = FallbackCompositionState.getData();\n+      FallbackCompositionState.reset();\n+      isComposing = false;\n       return chars;\n     }\n     return null;"
            },
            {
                "commitId": "00ba97a354e841701b4b83983c3a3904895e7b87",
                "additions": 12,
                "deletions": 2,
                "patch": "@@ -374,8 +374,18 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n        *   being used. Ex: `Cmd+C`. No character is inserted, and no\n        *   `input` event will occur.\n        */\n-      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-        return String.fromCharCode(nativeEvent.which);\n+      if (!isKeypressCommand(nativeEvent)) {\n+        // IE fires the `keypress` event when a user types an emoji via\n+        // Touch keyboard of Windows.  In such a case, the `char` property\n+        // holds an emoji character like `\\uD83D\\uDE0A`.  Because its length\n+        // is 2, the property `which` does not represent an emoji correctly.\n+        // In such a case, we directly return the `char` property instead of\n+        // using `which`.\n+        if (nativeEvent.char && nativeEvent.char.length > 1) {\n+          return nativeEvent.char;\n+        } else if (nativeEvent.which) {\n+          return String.fromCharCode(nativeEvent.which);\n+        }\n       }\n       return null;\n     case 'topCompositionEnd':"
            },
            {
                "commitId": "a9d0deb8e13e9f0b1ee7d2f28a6eec0e7ad2e41d",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -17,7 +17,7 @@ var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n-import type {TopLevelTypes} from 'EventConstants';\n+import type {TopLevelTypes} from 'BrowserEventConstants';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n@@ -275,7 +275,7 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {string} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n@@ -329,7 +329,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {string} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */"
            },
            {
                "commitId": "b1768b5a48d1f82e4ef4150e0036c5f846d3758a",
                "additions": 14,
                "deletions": 8,
                "patch": "@@ -22,8 +22,8 @@ import type {TopLevelTypes} from 'EventConstants';\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n \n-var canUseCompositionEvent = ExecutionEnvironment.canUseDOM &&\n-  'CompositionEvent' in window;\n+var canUseCompositionEvent =\n+  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n \n var documentMode = null;\n if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n@@ -33,15 +33,17 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n-var canUseTextInputEvent = ExecutionEnvironment.canUseDOM &&\n+var canUseTextInputEvent =\n+  ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n   !isPresto();\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n-var useFallbackCompositionData = ExecutionEnvironment.canUseDOM &&\n+var useFallbackCompositionData =\n+  ExecutionEnvironment.canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n \n@@ -51,9 +53,11 @@ var useFallbackCompositionData = ExecutionEnvironment.canUseDOM &&\n  */\n function isPresto() {\n   var opera = window.opera;\n-  return typeof opera === 'object' &&\n+  return (\n+    typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n-    parseInt(opera.version(), 10) <= 12;\n+    parseInt(opera.version(), 10) <= 12\n+  );\n }\n \n var SPACEBAR_CODE = 32;\n@@ -126,9 +130,11 @@ var hasSpaceKeypress = false;\n  * (cut, copy, select-all, etc.) even though no character is inserted.\n  */\n function isKeypressCommand(nativeEvent) {\n-  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n+  return (\n+    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n     // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n-    !(nativeEvent.ctrlKey && nativeEvent.altKey);\n+    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n+  );\n }\n \n /**"
            },
            {
                "commitId": "b1b4a2fb252f26fe10d29ba60d85ff89a85ff3ec",
                "additions": 30,
                "deletions": 44,
                "patch": null
            },
            {
                "commitId": "1843f8716803d380df34a7362d80022352853931",
                "additions": 30,
                "deletions": 44,
                "patch": null
            },
            {
                "commitId": "8bc11649df767402c262b6c9b67c6dd811d42cd0",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -12,7 +12,7 @@\n 'use strict';\n \n var EventPropagators = require('EventPropagators');\n-var ExecutionEnvironment = require('ExecutionEnvironment');\n+var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');"
            },
            {
                "commitId": "e452e3374135c116ef687a8bb3a5d277e3cde8fb",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -12,7 +12,7 @@\n 'use strict';\n \n var EventPropagators = require('EventPropagators');\n-var ExecutionEnvironment = require('ExecutionEnvironment');\n+var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');"
            },
            {
                "commitId": "e3131c1d55d6695c2f0966379535f88b813f912b",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "a3fb0310ca6f7cad0707b5a9fd004c19e004186f",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "a64ca9b697d0808a2966465fea2e658e4f310080",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -345,11 +345,12 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n+  // If composition event is available, we extract a string only at\n+  // compositionevent, otherwise extract it at fallback events.\n   if (currentComposition) {\n-    if (\n-      topLevelType === 'topCompositionEnd' ||\n-      isFallbackCompositionEnd(topLevelType, nativeEvent)\n-    ) {\n+    if (topLevelType === 'topCompositionEnd'\n+        || (!canUseCompositionEvent\n+            && isFallbackCompositionEnd(topLevelType, nativeEvent))) {\n       var chars = currentComposition.getData();\n       FallbackCompositionState.release(currentComposition);\n       currentComposition = null;"
            },
            {
                "commitId": "f7076b7759c57b95da21ffca892ddbdcf3ffed02",
                "additions": 8,
                "deletions": 10,
                "patch": "@@ -17,8 +17,6 @@ var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n-var keyOf = require('keyOf');\n-\n import type { TopLevelTypes } from 'EventConstants';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n@@ -75,8 +73,8 @@ var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null}),\n+      bubbled: 'onBeforeInput',\n+      captured: 'onBeforeInputCapture',\n     },\n     dependencies: [\n       'topCompositionEnd',\n@@ -87,8 +85,8 @@ var eventTypes = {\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null}),\n+      bubbled: 'onCompositionEnd',\n+      captured: 'onCompositionEndCapture',\n     },\n     dependencies: [\n       'topBlur',\n@@ -101,8 +99,8 @@ var eventTypes = {\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null}),\n+      bubbled: 'onCompositionStart',\n+      captured: 'onCompositionStartCapture',\n     },\n     dependencies: [\n       'topBlur',\n@@ -115,8 +113,8 @@ var eventTypes = {\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null}),\n+      bubbled: 'onCompositionUpdate',\n+      captured: 'onCompositionUpdateCapture',\n     },\n     dependencies: [\n       'topBlur',"
            },
            {
                "commitId": "2f9a9dc4c56c1caee250626c54c587c5f233fcab",
                "additions": 42,
                "deletions": 43,
                "patch": "@@ -11,7 +11,6 @@\n \n 'use strict';\n \n-var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n@@ -20,6 +19,8 @@ var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+import type { TopLevelTypes } from 'EventConstants';\n+\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n \n@@ -70,8 +71,6 @@ function isPresto() {\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n-var topLevelTypes = EventConstants.topLevelTypes;\n-\n // Events and their corresponding property names.\n var eventTypes = {\n   beforeInput: {\n@@ -80,10 +79,10 @@ var eventTypes = {\n       captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topCompositionEnd,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste,\n+      'topCompositionEnd',\n+      'topKeyPress',\n+      'topTextInput',\n+      'topPaste',\n     ],\n   },\n   compositionEnd: {\n@@ -92,12 +91,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionEnd,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionEnd',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n   compositionStart: {\n@@ -106,12 +105,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionStart,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionStart',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n   compositionUpdate: {\n@@ -120,12 +119,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionUpdate,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionUpdate',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n };\n@@ -155,11 +154,11 @@ function isKeypressCommand(nativeEvent) {\n  */\n function getCompositionEventType(topLevelType) {\n   switch (topLevelType) {\n-    case topLevelTypes.topCompositionStart:\n+    case 'topCompositionStart':\n       return eventTypes.compositionStart;\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return eventTypes.compositionEnd;\n-    case topLevelTypes.topCompositionUpdate:\n+    case 'topCompositionUpdate':\n       return eventTypes.compositionUpdate;\n   }\n }\n@@ -174,7 +173,7 @@ function getCompositionEventType(topLevelType) {\n  */\n function isFallbackCompositionStart(topLevelType, nativeEvent) {\n   return (\n-    topLevelType === topLevelTypes.topKeyDown &&\n+    topLevelType === 'topKeyDown' &&\n     nativeEvent.keyCode === START_KEYCODE\n   );\n }\n@@ -188,16 +187,16 @@ function isFallbackCompositionStart(topLevelType, nativeEvent) {\n  */\n function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case topLevelTypes.topKeyUp:\n+    case 'topKeyUp':\n       // Command keys insert or clear IME input.\n       return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n-    case topLevelTypes.topKeyDown:\n+    case 'topKeyDown':\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return (nativeEvent.keyCode !== START_KEYCODE);\n-    case topLevelTypes.topKeyPress:\n-    case topLevelTypes.topMouseDown:\n-    case topLevelTypes.topBlur:\n+    case 'topKeyPress':\n+    case 'topMouseDown':\n+    case 'topBlur':\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -291,11 +290,11 @@ function extractCompositionEvent(\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n-function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   switch (topLevelType) {\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return getDataFromCustomEvent(nativeEvent);\n-    case topLevelTypes.topKeyPress:\n+    case 'topKeyPress':\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -318,7 +317,7 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case topLevelTypes.topTextInput:\n+    case 'topTextInput':\n       // Record the characters to be added to the DOM.\n       var chars = nativeEvent.data;\n \n@@ -345,12 +344,12 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   if (currentComposition) {\n     if (\n-      topLevelType === topLevelTypes.topCompositionEnd ||\n+      topLevelType === 'topCompositionEnd' ||\n       isFallbackCompositionEnd(topLevelType, nativeEvent)\n     ) {\n       var chars = currentComposition.getData();\n@@ -362,11 +361,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n   }\n \n   switch (topLevelType) {\n-    case topLevelTypes.topPaste:\n+    case 'topPaste':\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case topLevelTypes.topKeyPress:\n+    case 'topKeyPress':\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -387,7 +386,7 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n         return String.fromCharCode(nativeEvent.which);\n       }\n       return null;\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return useFallbackCompositionData ? null : nativeEvent.data;\n     default:\n       return null;"
            },
            {
                "commitId": "209b7522d99a8af36f8d9e06ce622c59b793e5a3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the"
            },
            {
                "commitId": "3b96650e39ddda5ba49245713ef16dbc52d25e9e",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the"
            },
            {
                "commitId": "bef45b0b1a98ea9b472ba664d955a039cf2f8068",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the"
            },
            {
                "commitId": "4f7a2766e4c29c2f25c0807ac21318c3963e6aec",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -7,7 +7,6 @@\n  * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n- * @typechecks static-only\n  */\n \n 'use strict';"
            },
            {
                "commitId": "46f5251c66dcb0895743db02265c07320d0a6089",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -7,7 +7,6 @@\n  * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n- * @typechecks static-only\n  */\n \n 'use strict';"
            },
            {
                "commitId": "35962a00084382b49d1f9e3bd36612925f360e5b",
                "additions": 9,
                "deletions": 29,
                "patch": "@@ -227,16 +227,11 @@ function getDataFromCustomEvent(nativeEvent) {\n var currentComposition = null;\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -261,7 +256,8 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+      currentComposition =\n+        FallbackCompositionState.getPooled(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (currentComposition) {\n         fallbackData = currentComposition.getData();\n@@ -271,7 +267,7 @@ function extractCompositionEvent(\n \n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -403,16 +399,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n  * `textInput` or fallback behavior.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -432,7 +423,7 @@ function extractBeforeInputEvent(\n \n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -464,33 +455,22 @@ var BeforeInputEventPlugin = {\n \n   eventTypes: eventTypes,\n \n-  /**\n-   * @param {string} topLevelType Record from `EventConstants`.\n-   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n-   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n-   * @param {object} nativeEvent Native browser event.\n-   * @return {*} An accumulation of synthetic events.\n-   * @see {EventPluginHub.extractEvents}\n-   */\n   extractEvents: function(\n     topLevelType,\n-    topLevelTarget,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),"
            },
            {
                "commitId": "f470cb88f88b4667419f170fcc7971dad4298494",
                "additions": 9,
                "deletions": 29,
                "patch": "@@ -227,16 +227,11 @@ function getDataFromCustomEvent(nativeEvent) {\n var currentComposition = null;\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -261,7 +256,8 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+      currentComposition =\n+        FallbackCompositionState.getPooled(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (currentComposition) {\n         fallbackData = currentComposition.getData();\n@@ -271,7 +267,7 @@ function extractCompositionEvent(\n \n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -403,16 +399,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n  * `textInput` or fallback behavior.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -432,7 +423,7 @@ function extractBeforeInputEvent(\n \n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -464,33 +455,22 @@ var BeforeInputEventPlugin = {\n \n   eventTypes: eventTypes,\n \n-  /**\n-   * @param {string} topLevelType Record from `EventConstants`.\n-   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n-   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n-   * @param {object} nativeEvent Native browser event.\n-   * @return {*} An accumulation of synthetic events.\n-   * @see {EventPluginHub.extractEvents}\n-   */\n   extractEvents: function(\n     topLevelType,\n-    topLevelTarget,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),"
            },
            {
                "commitId": "7b1f03f4f8e6ac110565e62035a042cb9a5ca612",
                "additions": 14,
                "deletions": 7,
                "patch": "@@ -237,7 +237,8 @@ function extractCompositionEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var eventType;\n   var fallbackData;\n@@ -271,7 +272,8 @@ function extractCompositionEvent(\n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   if (fallbackData) {\n@@ -411,7 +413,8 @@ function extractBeforeInputEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var chars;\n \n@@ -430,7 +433,8 @@ function extractBeforeInputEvent(\n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   event.data = chars;\n@@ -472,20 +476,23 @@ var BeforeInputEventPlugin = {\n     topLevelType,\n     topLevelTarget,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n     ];\n   },"
            },
            {
                "commitId": "4b804e485db51b49716736ce2dfcf23d020b6eb2",
                "additions": 14,
                "deletions": 7,
                "patch": "@@ -237,7 +237,8 @@ function extractCompositionEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var eventType;\n   var fallbackData;\n@@ -271,7 +272,8 @@ function extractCompositionEvent(\n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   if (fallbackData) {\n@@ -411,7 +413,8 @@ function extractBeforeInputEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var chars;\n \n@@ -430,7 +433,8 @@ function extractBeforeInputEvent(\n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   event.data = chars;\n@@ -472,20 +476,23 @@ var BeforeInputEventPlugin = {\n     topLevelType,\n     topLevelTarget,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n     ];\n   },"
            },
            {
                "commitId": "4c3e9650ba6c9ea90956a08542d9fa9b5d72ee88",
                "additions": 15,
                "deletions": 15,
                "patch": "@@ -78,57 +78,57 @@ var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null})\n+      captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste\n-    ]\n+      topLevelTypes.topPaste,\n+    ],\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null})\n+      captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null})\n+      captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionStart,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null})\n+      captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionUpdate,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n-  }\n+      topLevelTypes.topMouseDown,\n+    ],\n+  },\n };\n \n // Track whether we've ever handled a keypress on the space key.\n@@ -486,9 +486,9 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      )\n+      ),\n     ];\n-  }\n+  },\n };\n \n module.exports = BeforeInputEventPlugin;"
            },
            {
                "commitId": "c089eece509012a444dc770afb5b348b47c62d3a",
                "additions": 15,
                "deletions": 15,
                "patch": "@@ -78,57 +78,57 @@ var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null})\n+      captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste\n-    ]\n+      topLevelTypes.topPaste,\n+    ],\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null})\n+      captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null})\n+      captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionStart,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null})\n+      captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionUpdate,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n-  }\n+      topLevelTypes.topMouseDown,\n+    ],\n+  },\n };\n \n // Track whether we've ever handled a keypress on the space key.\n@@ -486,9 +486,9 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      )\n+      ),\n     ];\n-  }\n+  },\n };\n \n module.exports = BeforeInputEventPlugin;"
            },
            {
                "commitId": "52752446760dee0bc7232b4146f5a309ac57f065",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "0b063f8a09dae4b6b1de400ff2d9aba9108647de",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "d59a039ebdebebf5c98ab96026529f66063979bf",
                "additions": 0,
                "deletions": 4,
                "patch": "@@ -131,9 +131,6 @@ var eventTypes = {\n   }\n };\n \n-// Track characters inserted via keypress and composition events.\n-var fallbackBeforeInputChars = null;\n-\n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n \n@@ -437,7 +434,6 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  fallbackBeforeInputChars = null;\n   EventPropagators.accumulateTwoPhaseDispatches(event);\n   return event;\n }"
            },
            {
                "commitId": "dae1dc629272593f342fe22c6c795cb8fdf33d11",
                "additions": 0,
                "deletions": 4,
                "patch": "@@ -131,9 +131,6 @@ var eventTypes = {\n   }\n };\n \n-// Track characters inserted via keypress and composition events.\n-var fallbackBeforeInputChars = null;\n-\n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n \n@@ -437,7 +434,6 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  fallbackBeforeInputChars = null;\n   EventPropagators.accumulateTwoPhaseDispatches(event);\n   return event;\n }"
            },
            {
                "commitId": "2aeb8a2a6beb00617a4217f7f8284924fa2ad819",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013 Facebook, Inc.\n+ * Copyright 2013-2015 Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the"
            },
            {
                "commitId": "3e0750a4ad2444c2df708b144ff0c8af7628881d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013 Facebook, Inc.\n+ * Copyright 2013-2015 Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the"
            },
            {
                "commitId": "54c82da15f6b4717425edbf68e23ae82583a50af",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -10,7 +10,7 @@\n  * @typechecks static-only\n  */\n \n-\"use strict\";\n+'use strict';\n \n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n@@ -256,7 +256,7 @@ function extractCompositionEvent(\n   }\n \n   if (!eventType) {\n-    return;\n+    return null;\n   }\n \n   if (useFallbackCompositionData) {\n@@ -427,7 +427,7 @@ function extractBeforeInputEvent(\n   // If no characters are being inserted, no BeforeInput event should\n   // be fired.\n   if (!chars) {\n-    return;\n+    return null;\n   }\n \n   var event = SyntheticInputEvent.getPooled(\n@@ -490,7 +490,7 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      ),\n+      )\n     ];\n   }\n };"
            },
            {
                "commitId": "47ee780cafa650a61bd62c4a6c13ac5554efd05c",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -256,7 +256,7 @@ function extractCompositionEvent(\n   }\n \n   if (!eventType) {\n-    return;\n+    return null;\n   }\n \n   if (useFallbackCompositionData) {\n@@ -427,7 +427,7 @@ function extractBeforeInputEvent(\n   // If no characters are being inserted, no BeforeInput event should\n   // be fired.\n   if (!chars) {\n-    return;\n+    return null;\n   }\n \n   var event = SyntheticInputEvent.getPooled("
            },
            {
                "commitId": "e27da9973193a06a138d7098c58723a7f10ed2e5",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -490,7 +490,7 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      ),\n+      )\n     ];\n   }\n };"
            },
            {
                "commitId": "df64a67b7f930f90423e194637af624cdc155526",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -10,7 +10,7 @@\n  * @typechecks static-only\n  */\n \n-\"use strict\";\n+'use strict';\n \n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');"
            },
            {
                "commitId": "80ed4d870a628af57dfc6e45bf6d513084f677d7",
                "additions": 389,
                "deletions": 111,
                "patch": "@@ -15,14 +15,44 @@\n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n+var FallbackCompositionState = require('FallbackCompositionState');\n+var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+var START_KEYCODE = 229;\n+\n+var canUseCompositionEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'CompositionEvent' in window\n+);\n+\n+var documentMode = null;\n+if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+  documentMode = document.documentMode;\n+}\n+\n+// Webkit offers a very useful `textInput` event that can be used to\n+// directly represent `beforeInput`. The IE `textinput` event is not as\n+// useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document || isPresto())\n+  !documentMode &&\n+  !isPresto()\n+);\n+\n+// In IE9+, we have access to composition events, but the data supplied\n+// by the native compositionend event may be incorrect. Japanese ideographic\n+// spaces, for instance (\\u3000) are not recorded correctly.\n+var useFallbackCompositionData = (\n+  ExecutionEnvironment.canUseDOM &&\n+  (\n+    !canUseCompositionEvent ||\n+    (documentMode && documentMode > 8 && documentMode <= 11)\n+  )\n );\n \n /**\n@@ -56,11 +86,53 @@ var eventTypes = {\n       topLevelTypes.topTextInput,\n       topLevelTypes.topPaste\n     ]\n+  },\n+  compositionEnd: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionEnd: null}),\n+      captured: keyOf({onCompositionEndCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionStart: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionStart: null}),\n+      captured: keyOf({onCompositionStartCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionStart,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionUpdate: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionUpdate: null}),\n+      captured: keyOf({onCompositionUpdateCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionUpdate,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n   }\n };\n \n // Track characters inserted via keypress and composition events.\n-var fallbackChars = null;\n+var fallbackBeforeInputChars = null;\n \n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n@@ -78,6 +150,298 @@ function isKeypressCommand(nativeEvent) {\n   );\n }\n \n+\n+/**\n+ * Translate native top level events into event types.\n+ *\n+ * @param {string} topLevelType\n+ * @return {object}\n+ */\n+function getCompositionEventType(topLevelType) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionStart:\n+      return eventTypes.compositionStart;\n+    case topLevelTypes.topCompositionEnd:\n+      return eventTypes.compositionEnd;\n+    case topLevelTypes.topCompositionUpdate:\n+      return eventTypes.compositionUpdate;\n+  }\n+}\n+\n+/**\n+ * Does our fallback best-guess model think this event signifies that\n+ * composition has begun?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionStart(topLevelType, nativeEvent) {\n+  return (\n+    topLevelType === topLevelTypes.topKeyDown &&\n+    nativeEvent.keyCode === START_KEYCODE\n+  );\n+}\n+\n+/**\n+ * Does our fallback mode think that this event is the end of composition?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topKeyUp:\n+      // Command keys insert or clear IME input.\n+      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n+    case topLevelTypes.topKeyDown:\n+      // Expect IME keyCode on each keydown. If we get any other\n+      // code we must have exited earlier.\n+      return (nativeEvent.keyCode !== START_KEYCODE);\n+    case topLevelTypes.topKeyPress:\n+    case topLevelTypes.topMouseDown:\n+    case topLevelTypes.topBlur:\n+      // Events are not possible without cancelling IME.\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * Google Input Tools provides composition data via a CustomEvent,\n+ * with the `data` property populated in the `detail` object. If this\n+ * is available on the event object, use it. If not, this is a plain\n+ * composition event and we have nothing special to extract.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {?string}\n+ */\n+function getDataFromCustomEvent(nativeEvent) {\n+  var detail = nativeEvent.detail;\n+  if (typeof detail === 'object' && 'data' in detail) {\n+    return detail.data;\n+  }\n+  return null;\n+}\n+\n+// Track the current IME composition fallback object, if any.\n+var currentComposition = null;\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticCompositionEvent.\n+ */\n+function extractCompositionEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var eventType;\n+  var fallbackData;\n+\n+  if (canUseCompositionEvent) {\n+    eventType = getCompositionEventType(topLevelType);\n+  } else if (!currentComposition) {\n+    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+      eventType = eventTypes.compositionStart;\n+    }\n+  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+    eventType = eventTypes.compositionEnd;\n+  }\n+\n+  if (!eventType) {\n+    return;\n+  }\n+\n+  if (useFallbackCompositionData) {\n+    // The current composition is stored statically and must not be\n+    // overwritten while composition continues.\n+    if (!currentComposition && eventType === eventTypes.compositionStart) {\n+      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+    } else if (eventType === eventTypes.compositionEnd) {\n+      if (currentComposition) {\n+        fallbackData = currentComposition.getData();\n+      }\n+    }\n+  }\n+\n+  var event = SyntheticCompositionEvent.getPooled(\n+    eventType,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  if (fallbackData) {\n+    // Inject data generated from fallback path into the synthetic event.\n+    // This matches the property of native CompositionEventInterface.\n+    event.data = fallbackData;\n+  } else {\n+    var customData = getDataFromCustomEvent(nativeEvent);\n+    if (customData !== null) {\n+      event.data = customData;\n+    }\n+  }\n+\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The string corresponding to this `beforeInput` event.\n+ */\n+function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionEnd:\n+      return getDataFromCustomEvent(nativeEvent);\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * If native `textInput` events are available, our goal is to make\n+       * use of them. However, there is a special case: the spacebar key.\n+       * In Webkit, preventing default on a spacebar `textInput` event\n+       * cancels character insertion, but it *also* causes the browser\n+       * to fall back to its default spacebar behavior of scrolling the\n+       * page.\n+       *\n+       * Tracking at:\n+       * https://code.google.com/p/chromium/issues/detail?id=355103\n+       *\n+       * To avoid this issue, use the keypress event as if no `textInput`\n+       * event is available.\n+       */\n+      var which = nativeEvent.which;\n+      if (which !== SPACEBAR_CODE) {\n+        return null;\n+      }\n+\n+      hasSpaceKeypress = true;\n+      return SPACEBAR_CHAR;\n+\n+    case topLevelTypes.topTextInput:\n+      // Record the characters to be added to the DOM.\n+      var chars = nativeEvent.data;\n+\n+      // If it's a spacebar character, assume that we have already handled\n+      // it at the keypress level and bail immediately. Android Chrome\n+      // doesn't give us keycodes, so we need to blacklist it.\n+      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n+        return null;\n+      }\n+\n+      return chars;\n+\n+    default:\n+      // For other native event types, do nothing.\n+      return null;\n+  }\n+}\n+\n+/**\n+ * For browsers that do not provide the `textInput` event, extract the\n+ * appropriate string to use for SyntheticInputEvent.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The fallback string for this `beforeInput` event.\n+ */\n+function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+  // If we are currently composing (IME) and using a fallback to do so,\n+  // try to extract the composed characters from the fallback object.\n+  if (currentComposition) {\n+    if (\n+      topLevelType === topLevelTypes.topCompositionEnd ||\n+      isFallbackCompositionEnd(topLevelType, nativeEvent)\n+    ) {\n+      var chars = currentComposition.getData();\n+      FallbackCompositionState.release(currentComposition);\n+      currentComposition = null;\n+      return chars;\n+    }\n+    return null;\n+  }\n+\n+  switch (topLevelType) {\n+    case topLevelTypes.topPaste:\n+      // If a paste event occurs after a keypress, throw out the input\n+      // chars. Paste events should not lead to BeforeInput events.\n+      return null;\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * As of v27, Firefox may fire keypress events even when no character\n+       * will be inserted. A few possibilities:\n+       *\n+       * - `which` is `0`. Arrow keys, Esc key, etc.\n+       *\n+       * - `which` is the pressed key code, but no char is available.\n+       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+       *   this key combination and no character is inserted into the\n+       *   document, but FF fires the keypress for char code `100` anyway.\n+       *   No `input` event will occur.\n+       *\n+       * - `which` is the pressed key code, but a command combination is\n+       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+       *   `input` event will occur.\n+       */\n+      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+        return String.fromCharCode(nativeEvent.which);\n+      }\n+      return null;\n+    case topLevelTypes.topCompositionEnd:\n+      return useFallbackCompositionData ? null : nativeEvent.data;\n+    default:\n+      return null;\n+  }\n+}\n+\n+/**\n+ * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n+ * `textInput` or fallback behavior.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticInputEvent.\n+ */\n+function extractBeforeInputEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var chars;\n+\n+  if (canUseTextInputEvent) {\n+    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+  } else {\n+    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+  }\n+\n+  // If no characters are being inserted, no BeforeInput event should\n+  // be fired.\n+  if (!chars) {\n+    return;\n+  }\n+\n+  var event = SyntheticInputEvent.getPooled(\n+    eventTypes.beforeInput,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  event.data = chars;\n+  fallbackBeforeInputChars = null;\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n /**\n  * Create an `onBeforeInput` event to match\n  * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n@@ -91,6 +455,10 @@ function isKeypressCommand(nativeEvent) {\n  * actually been added, contrary to the spec. Thus, `textInput` is the best\n  * available event to identify the characters that have actually been inserted\n  * into the target node.\n+ *\n+ * This plugin is also responsible for emitting `composition` events, thus\n+ * allowing us to share composition fallback code for both `beforeInput` and\n+ * `composition` event types.\n  */\n var BeforeInputEventPlugin = {\n \n@@ -105,115 +473,25 @@ var BeforeInputEventPlugin = {\n    * @see {EventPluginHub.extractEvents}\n    */\n   extractEvents: function(\n-      topLevelType,\n-      topLevelTarget,\n-      topLevelTargetID,\n-      nativeEvent) {\n-\n-    var chars;\n-\n-    if (canUseTextInputEvent) {\n-      switch (topLevelType) {\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * If native `textInput` events are available, our goal is to make\n-           * use of them. However, there is a special case: the spacebar key.\n-           * In Webkit, preventing default on a spacebar `textInput` event\n-           * cancels character insertion, but it *also* causes the browser\n-           * to fall back to its default spacebar behavior of scrolling the\n-           * page.\n-           *\n-           * Tracking at:\n-           * https://code.google.com/p/chromium/issues/detail?id=355103\n-           *\n-           * To avoid this issue, use the keypress event as if no `textInput`\n-           * event is available.\n-           */\n-          var which = nativeEvent.which;\n-          if (which !== SPACEBAR_CODE) {\n-            return;\n-          }\n-\n-          hasSpaceKeypress = true;\n-          chars = SPACEBAR_CHAR;\n-          break;\n-\n-        case topLevelTypes.topTextInput:\n-          // Record the characters to be added to the DOM.\n-          chars = nativeEvent.data;\n-\n-          // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately. Android Chrome\n-          // doesn't give us keycodes, so we need to blacklist it.\n-          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n-            return;\n-          }\n-\n-          // Otherwise, carry on.\n-          break;\n-\n-        default:\n-          // For other native event types, do nothing.\n-          return;\n-      }\n-    } else {\n-      switch (topLevelType) {\n-        case topLevelTypes.topPaste:\n-          // If a paste event occurs after a keypress, throw out the input\n-          // chars. Paste events should not lead to BeforeInput events.\n-          fallbackChars = null;\n-          break;\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * As of v27, Firefox may fire keypress events even when no character\n-           * will be inserted. A few possibilities:\n-           *\n-           * - `which` is `0`. Arrow keys, Esc key, etc.\n-           *\n-           * - `which` is the pressed key code, but no char is available.\n-           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n-           *   this key combination and no character is inserted into the\n-           *   document, but FF fires the keypress for char code `100` anyway.\n-           *   No `input` event will occur.\n-           *\n-           * - `which` is the pressed key code, but a command combination is\n-           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n-           *   `input` event will occur.\n-           */\n-          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-            fallbackChars = String.fromCharCode(nativeEvent.which);\n-          }\n-          break;\n-        case topLevelTypes.topCompositionEnd:\n-          fallbackChars = nativeEvent.data;\n-          break;\n-      }\n-\n-      // If no changes have occurred to the fallback string, no relevant\n-      // event has fired and we're done.\n-      if (fallbackChars === null) {\n-        return;\n-      }\n-\n-      chars = fallbackChars;\n-    }\n-\n-    // If no characters are being inserted, no BeforeInput event should\n-    // be fired.\n-    if (!chars) {\n-      return;\n-    }\n-\n-    var event = SyntheticInputEvent.getPooled(\n-      eventTypes.beforeInput,\n-      topLevelTargetID,\n-      nativeEvent\n-    );\n-\n-    event.data = chars;\n-    fallbackChars = null;\n-    EventPropagators.accumulateTwoPhaseDispatches(event);\n-    return event;\n+    topLevelType,\n+    topLevelTarget,\n+    topLevelTargetID,\n+    nativeEvent\n+  ) {\n+    return [\n+      extractCompositionEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+      extractBeforeInputEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+    ];\n   }\n };\n "
            },
            {
                "commitId": "9ad0e1d846a4fe51f2397333d1df3e0b72d28067",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -34,14 +34,14 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n-// Webkit and Presto offer a very useful `textInput` event that can be used to\n+// Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n-  !isOldPresto()\n+  !isPresto()\n );\n \n // In IE9+, we have access to composition events, but the data supplied\n@@ -59,7 +59,7 @@ var useFallbackCompositionData = (\n  * Opera <= 12 includes TextEvent in window, but does not fire\n  * text input events. Rely on keypress instead.\n  */\n-function isOldPresto() {\n+function isPresto() {\n   var opera = window.opera;\n   return (\n     typeof opera === 'object' &&"
            },
            {
                "commitId": "ddaf215b03cee506c907474578c950367b344062",
                "additions": 390,
                "deletions": 112,
                "patch": "@@ -15,21 +15,51 @@\n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n+var FallbackCompositionState = require('FallbackCompositionState');\n+var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+var START_KEYCODE = 229;\n+\n+var canUseCompositionEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'CompositionEvent' in window\n+);\n+\n+var documentMode = null;\n+if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+  documentMode = document.documentMode;\n+}\n+\n+// Webkit and Presto offer a very useful `textInput` event that can be used to\n+// directly represent `beforeInput`. The IE `textinput` event is not as\n+// useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document || isPresto())\n+  !documentMode &&\n+  !isOldPresto()\n+);\n+\n+// In IE9+, we have access to composition events, but the data supplied\n+// by the native compositionend event may be incorrect. Japanese ideographic\n+// spaces, for instance (\\u3000) are not recorded correctly.\n+var useFallbackCompositionData = (\n+  ExecutionEnvironment.canUseDOM &&\n+  (\n+    !canUseCompositionEvent ||\n+    (documentMode && documentMode > 8 && documentMode <= 11)\n+  )\n );\n \n /**\n  * Opera <= 12 includes TextEvent in window, but does not fire\n  * text input events. Rely on keypress instead.\n  */\n-function isPresto() {\n+function isOldPresto() {\n   var opera = window.opera;\n   return (\n     typeof opera === 'object' &&\n@@ -56,11 +86,53 @@ var eventTypes = {\n       topLevelTypes.topTextInput,\n       topLevelTypes.topPaste\n     ]\n+  },\n+  compositionEnd: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionEnd: null}),\n+      captured: keyOf({onCompositionEndCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionStart: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionStart: null}),\n+      captured: keyOf({onCompositionStartCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionStart,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionUpdate: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionUpdate: null}),\n+      captured: keyOf({onCompositionUpdateCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionUpdate,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n   }\n };\n \n // Track characters inserted via keypress and composition events.\n-var fallbackChars = null;\n+var fallbackBeforeInputChars = null;\n \n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n@@ -78,6 +150,298 @@ function isKeypressCommand(nativeEvent) {\n   );\n }\n \n+\n+/**\n+ * Translate native top level events into event types.\n+ *\n+ * @param {string} topLevelType\n+ * @return {object}\n+ */\n+function getCompositionEventType(topLevelType) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionStart:\n+      return eventTypes.compositionStart;\n+    case topLevelTypes.topCompositionEnd:\n+      return eventTypes.compositionEnd;\n+    case topLevelTypes.topCompositionUpdate:\n+      return eventTypes.compositionUpdate;\n+  }\n+}\n+\n+/**\n+ * Does our fallback best-guess model think this event signifies that\n+ * composition has begun?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionStart(topLevelType, nativeEvent) {\n+  return (\n+    topLevelType === topLevelTypes.topKeyDown &&\n+    nativeEvent.keyCode === START_KEYCODE\n+  );\n+}\n+\n+/**\n+ * Does our fallback mode think that this event is the end of composition?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topKeyUp:\n+      // Command keys insert or clear IME input.\n+      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n+    case topLevelTypes.topKeyDown:\n+      // Expect IME keyCode on each keydown. If we get any other\n+      // code we must have exited earlier.\n+      return (nativeEvent.keyCode !== START_KEYCODE);\n+    case topLevelTypes.topKeyPress:\n+    case topLevelTypes.topMouseDown:\n+    case topLevelTypes.topBlur:\n+      // Events are not possible without cancelling IME.\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * Google Input Tools provides composition data via a CustomEvent,\n+ * with the `data` property populated in the `detail` object. If this\n+ * is available on the event object, use it. If not, this is a plain\n+ * composition event and we have nothing special to extract.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {?string}\n+ */\n+function getDataFromCustomEvent(nativeEvent) {\n+  var detail = nativeEvent.detail;\n+  if (typeof detail === 'object' && 'data' in detail) {\n+    return detail.data;\n+  }\n+  return null;\n+}\n+\n+// Track the current IME composition fallback object, if any.\n+var currentComposition = null;\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticCompositionEvent.\n+ */\n+function extractCompositionEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var eventType;\n+  var fallbackData;\n+\n+  if (canUseCompositionEvent) {\n+    eventType = getCompositionEventType(topLevelType);\n+  } else if (!currentComposition) {\n+    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+      eventType = eventTypes.compositionStart;\n+    }\n+  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+    eventType = eventTypes.compositionEnd;\n+  }\n+\n+  if (!eventType) {\n+    return;\n+  }\n+\n+  if (useFallbackCompositionData) {\n+    // The current composition is stored statically and must not be\n+    // overwritten while composition continues.\n+    if (!currentComposition && eventType === eventTypes.compositionStart) {\n+      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+    } else if (eventType === eventTypes.compositionEnd) {\n+      if (currentComposition) {\n+        fallbackData = currentComposition.getData();\n+      }\n+    }\n+  }\n+\n+  var event = SyntheticCompositionEvent.getPooled(\n+    eventType,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  if (fallbackData) {\n+    // Inject data generated from fallback path into the synthetic event.\n+    // This matches the property of native CompositionEventInterface.\n+    event.data = fallbackData;\n+  } else {\n+    var customData = getDataFromCustomEvent(nativeEvent);\n+    if (customData !== null) {\n+      event.data = customData;\n+    }\n+  }\n+\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The string corresponding to this `beforeInput` event.\n+ */\n+function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionEnd:\n+      return getDataFromCustomEvent(nativeEvent);\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * If native `textInput` events are available, our goal is to make\n+       * use of them. However, there is a special case: the spacebar key.\n+       * In Webkit, preventing default on a spacebar `textInput` event\n+       * cancels character insertion, but it *also* causes the browser\n+       * to fall back to its default spacebar behavior of scrolling the\n+       * page.\n+       *\n+       * Tracking at:\n+       * https://code.google.com/p/chromium/issues/detail?id=355103\n+       *\n+       * To avoid this issue, use the keypress event as if no `textInput`\n+       * event is available.\n+       */\n+      var which = nativeEvent.which;\n+      if (which !== SPACEBAR_CODE) {\n+        return null;\n+      }\n+\n+      hasSpaceKeypress = true;\n+      return SPACEBAR_CHAR;\n+\n+    case topLevelTypes.topTextInput:\n+      // Record the characters to be added to the DOM.\n+      var chars = nativeEvent.data;\n+\n+      // If it's a spacebar character, assume that we have already handled\n+      // it at the keypress level and bail immediately. Android Chrome\n+      // doesn't give us keycodes, so we need to blacklist it.\n+      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n+        return null;\n+      }\n+\n+      return chars;\n+\n+    default:\n+      // For other native event types, do nothing.\n+      return null;\n+  }\n+}\n+\n+/**\n+ * For browsers that do not provide the `textInput` event, extract the\n+ * appropriate string to use for SyntheticInputEvent.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The fallback string for this `beforeInput` event.\n+ */\n+function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+  // If we are currently composing (IME) and using a fallback to do so,\n+  // try to extract the composed characters from the fallback object.\n+  if (currentComposition) {\n+    if (\n+      topLevelType === topLevelTypes.topCompositionEnd ||\n+      isFallbackCompositionEnd(topLevelType, nativeEvent)\n+    ) {\n+      var chars = currentComposition.getData();\n+      FallbackCompositionState.release(currentComposition);\n+      currentComposition = null;\n+      return chars;\n+    }\n+    return null;\n+  }\n+\n+  switch (topLevelType) {\n+    case topLevelTypes.topPaste:\n+      // If a paste event occurs after a keypress, throw out the input\n+      // chars. Paste events should not lead to BeforeInput events.\n+      return null;\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * As of v27, Firefox may fire keypress events even when no character\n+       * will be inserted. A few possibilities:\n+       *\n+       * - `which` is `0`. Arrow keys, Esc key, etc.\n+       *\n+       * - `which` is the pressed key code, but no char is available.\n+       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+       *   this key combination and no character is inserted into the\n+       *   document, but FF fires the keypress for char code `100` anyway.\n+       *   No `input` event will occur.\n+       *\n+       * - `which` is the pressed key code, but a command combination is\n+       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+       *   `input` event will occur.\n+       */\n+      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+        return String.fromCharCode(nativeEvent.which);\n+      }\n+      return null;\n+    case topLevelTypes.topCompositionEnd:\n+      return useFallbackCompositionData ? null : nativeEvent.data;\n+    default:\n+      return null;\n+  }\n+}\n+\n+/**\n+ * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n+ * `textInput` or fallback behavior.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticInputEvent.\n+ */\n+function extractBeforeInputEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var chars;\n+\n+  if (canUseTextInputEvent) {\n+    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+  } else {\n+    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+  }\n+\n+  // If no characters are being inserted, no BeforeInput event should\n+  // be fired.\n+  if (!chars) {\n+    return;\n+  }\n+\n+  var event = SyntheticInputEvent.getPooled(\n+    eventTypes.beforeInput,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  event.data = chars;\n+  fallbackBeforeInputChars = null;\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n /**\n  * Create an `onBeforeInput` event to match\n  * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n@@ -91,6 +455,10 @@ function isKeypressCommand(nativeEvent) {\n  * actually been added, contrary to the spec. Thus, `textInput` is the best\n  * available event to identify the characters that have actually been inserted\n  * into the target node.\n+ *\n+ * This plugin is also responsible for emitting `composition` events, thus\n+ * allowing us to share composition fallback code for both `beforeInput` and\n+ * `composition` event types.\n  */\n var BeforeInputEventPlugin = {\n \n@@ -105,115 +473,25 @@ var BeforeInputEventPlugin = {\n    * @see {EventPluginHub.extractEvents}\n    */\n   extractEvents: function(\n-      topLevelType,\n-      topLevelTarget,\n-      topLevelTargetID,\n-      nativeEvent) {\n-\n-    var chars;\n-\n-    if (canUseTextInputEvent) {\n-      switch (topLevelType) {\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * If native `textInput` events are available, our goal is to make\n-           * use of them. However, there is a special case: the spacebar key.\n-           * In Webkit, preventing default on a spacebar `textInput` event\n-           * cancels character insertion, but it *also* causes the browser\n-           * to fall back to its default spacebar behavior of scrolling the\n-           * page.\n-           *\n-           * Tracking at:\n-           * https://code.google.com/p/chromium/issues/detail?id=355103\n-           *\n-           * To avoid this issue, use the keypress event as if no `textInput`\n-           * event is available.\n-           */\n-          var which = nativeEvent.which;\n-          if (which !== SPACEBAR_CODE) {\n-            return;\n-          }\n-\n-          hasSpaceKeypress = true;\n-          chars = SPACEBAR_CHAR;\n-          break;\n-\n-        case topLevelTypes.topTextInput:\n-          // Record the characters to be added to the DOM.\n-          chars = nativeEvent.data;\n-\n-          // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately. Android Chrome\n-          // doesn't give us keycodes, so we need to blacklist it.\n-          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n-            return;\n-          }\n-\n-          // Otherwise, carry on.\n-          break;\n-\n-        default:\n-          // For other native event types, do nothing.\n-          return;\n-      }\n-    } else {\n-      switch (topLevelType) {\n-        case topLevelTypes.topPaste:\n-          // If a paste event occurs after a keypress, throw out the input\n-          // chars. Paste events should not lead to BeforeInput events.\n-          fallbackChars = null;\n-          break;\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * As of v27, Firefox may fire keypress events even when no character\n-           * will be inserted. A few possibilities:\n-           *\n-           * - `which` is `0`. Arrow keys, Esc key, etc.\n-           *\n-           * - `which` is the pressed key code, but no char is available.\n-           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n-           *   this key combination and no character is inserted into the\n-           *   document, but FF fires the keypress for char code `100` anyway.\n-           *   No `input` event will occur.\n-           *\n-           * - `which` is the pressed key code, but a command combination is\n-           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n-           *   `input` event will occur.\n-           */\n-          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-            fallbackChars = String.fromCharCode(nativeEvent.which);\n-          }\n-          break;\n-        case topLevelTypes.topCompositionEnd:\n-          fallbackChars = nativeEvent.data;\n-          break;\n-      }\n-\n-      // If no changes have occurred to the fallback string, no relevant\n-      // event has fired and we're done.\n-      if (fallbackChars === null) {\n-        return;\n-      }\n-\n-      chars = fallbackChars;\n-    }\n-\n-    // If no characters are being inserted, no BeforeInput event should\n-    // be fired.\n-    if (!chars) {\n-      return;\n-    }\n-\n-    var event = SyntheticInputEvent.getPooled(\n-      eventTypes.beforeInput,\n-      topLevelTargetID,\n-      nativeEvent\n-    );\n-\n-    event.data = chars;\n-    fallbackChars = null;\n-    EventPropagators.accumulateTwoPhaseDispatches(event);\n-    return event;\n+    topLevelType,\n+    topLevelTarget,\n+    topLevelTargetID,\n+    nativeEvent\n+  ) {\n+    return [\n+      extractCompositionEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+      extractBeforeInputEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+    ];\n   }\n };\n "
            },
            {
                "commitId": "b5bcaba77fbe53cafd7c5f6b76752b09791caadf",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only"
            },
            {
                "commitId": "5d3b12bb3bd6a092cf00ede07b8255a8399c2e58",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only"
            },
            {
                "commitId": "dcf415c2b91ce52fd5d4dd02b70875ba9d33290f",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only"
            },
            {
                "commitId": "f71455fb319d1daf5a04cc03357fcd185d9f72ec",
                "additions": 8,
                "deletions": 3,
                "patch": "@@ -69,6 +69,9 @@ var eventTypes = {\n // Track characters inserted via keypress and composition events.\n var fallbackChars = null;\n \n+// Track whether we've ever handled a keypress on the space key.\n+var hasSpaceKeypress = false;\n+\n /**\n  * Return whether a native keypress event is assumed to be a command.\n  * This is required because Firefox fires `keypress` events for key commands\n@@ -138,16 +141,18 @@ var BeforeInputEventPlugin = {\n             return;\n           }\n \n-          chars = String.fromCharCode(which);\n+          hasSpaceKeypress = true;\n+          chars = SPACEBAR_CHAR;\n           break;\n \n         case topLevelTypes.topTextInput:\n           // Record the characters to be added to the DOM.\n           chars = nativeEvent.data;\n \n           // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately.\n-          if (chars === SPACEBAR_CHAR) {\n+          // it at the keypress level and bail immediately. Android Chrome\n+          // doesn't give us keycodes, so we need to blacklist it.\n+          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n             return;\n           }\n "
            },
            {
                "commitId": "468007612f4a6dabb228618d9a3274f067fc2c51",
                "additions": 14,
                "deletions": 1,
                "patch": "@@ -29,9 +29,22 @@ var keyOf = require('keyOf');\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document)\n+  !('documentMode' in document || isPresto())\n );\n \n+/**\n+ * Opera <= 12 includes TextEvent in window, but does not fire\n+ * text input events. Rely on keypress instead.\n+ */\n+function isPresto() {\n+  var opera = window.opera;\n+  return (\n+    typeof opera === 'object' &&\n+    typeof opera.version === 'function' &&\n+    parseInt(opera.version(), 10) <= 12\n+  );\n+}\n+\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n "
            },
            {
                "commitId": "807e3dc42375fbc15c41c847a38acfd518fba7a1",
                "additions": 14,
                "deletions": 1,
                "patch": "@@ -29,9 +29,22 @@ var keyOf = require('keyOf');\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document)\n+  !('documentMode' in document || isPresto())\n );\n \n+/**\n+ * Opera <= 12 includes TextEvent in window, but does not fire\n+ * text input events. Rely on keypress instead.\n+ */\n+function isPresto() {\n+  var opera = window.opera;\n+  return (\n+    typeof opera === 'object' &&\n+    typeof opera.version === 'function' &&\n+    parseInt(opera.version(), 10) <= 12\n+  );\n+}\n+\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n "
            },
            {
                "commitId": "5476f9168beadda74506d37fd779e7e4bca0bc1c",
                "additions": 45,
                "deletions": 7,
                "patch": "@@ -26,12 +26,15 @@ var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n-var useBeforeInputEvent = (\n+var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !('documentMode' in document)\n );\n \n+var SPACEBAR_CODE = 32;\n+var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n+\n var topLevelTypes = EventConstants.topLevelTypes;\n \n // Events and their corresponding property names.\n@@ -100,13 +103,48 @@ var BeforeInputEventPlugin = {\n \n     var chars;\n \n-    if (useBeforeInputEvent) {\n-      // For browsers that support `textInput` events natively, don't do\n-      // anything with keypress, composition, etc.\n-      if (topLevelType !== topLevelTypes.topTextInput) {\n-        return;\n+    if (canUseTextInputEvent) {\n+      switch (topLevelType) {\n+        case topLevelTypes.topKeyPress:\n+          /**\n+           * If native `textInput` events are available, our goal is to make\n+           * use of them. However, there is a special case: the spacebar key.\n+           * In Webkit, preventing default on a spacebar `textInput` event\n+           * cancels character insertion, but it *also* causes the browser\n+           * to fall back to its default spacebar behavior of scrolling the\n+           * page.\n+           *\n+           * Tracking at:\n+           * https://code.google.com/p/chromium/issues/detail?id=355103\n+           *\n+           * To avoid this issue, use the keypress event as if no `textInput`\n+           * event is available.\n+           */\n+          var which = nativeEvent.which;\n+          if (which !== SPACEBAR_CODE) {\n+            return;\n+          }\n+\n+          chars = String.fromCharCode(which);\n+          break;\n+\n+        case topLevelTypes.topTextInput:\n+          // Record the characters to be added to the DOM.\n+          chars = nativeEvent.data;\n+\n+          // If it's a spacebar character, assume that we have already handled\n+          // it at the keypress level and bail immediately.\n+          if (chars === SPACEBAR_CHAR) {\n+            return;\n+          }\n+\n+          // Otherwise, carry on.\n+          break;\n+\n+        default:\n+          // For other native event types, do nothing.\n+          return;\n       }\n-      chars = nativeEvent.data;\n     } else {\n       switch (topLevelType) {\n         case topLevelTypes.topPaste:"
            },
            {
                "commitId": "116ee058ebd76071a8aefcd95254f772ec18605f",
                "additions": 171,
                "deletions": 0,
                "patch": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright 2013 Facebook, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * @providesModule BeforeInputEventPlugin\n+ * @typechecks static-only\n+ */\n+\n+\"use strict\";\n+\n+var EventConstants = require('EventConstants');\n+var EventPropagators = require('EventPropagators');\n+var ExecutionEnvironment = require('ExecutionEnvironment');\n+var SyntheticInputEvent = require('SyntheticInputEvent');\n+\n+var keyOf = require('keyOf');\n+\n+var useBeforeInputEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'TextEvent' in window &&\n+  !('documentMode' in document)\n+);\n+\n+var topLevelTypes = EventConstants.topLevelTypes;\n+\n+// Events and their corresponding property names.\n+var eventTypes = {\n+  beforeInput: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onBeforeInput: null}),\n+      captured: keyOf({onBeforeInputCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topTextInput,\n+      topLevelTypes.topPaste\n+    ]\n+  }\n+};\n+\n+// Track characters inserted via keypress and composition events.\n+var fallbackChars = null;\n+\n+/**\n+ * Return whether a native keypress event is assumed to be a command.\n+ * This is required because Firefox fires `keypress` events for key commands\n+ * (cut, copy, select-all, etc.) even though no character is inserted.\n+ */\n+function isKeypressCommand(nativeEvent) {\n+  return (\n+    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n+    // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n+    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n+  );\n+}\n+\n+/**\n+ * Create an `onBeforeInput` event to match\n+ * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n+ *\n+ * This event plugin is based on the native `textInput` event\n+ * available in Chrome, Safari, Opera, and IE. This event fires after\n+ * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n+ *\n+ * `beforeInput` is spec'd but not implemented in any browsers, and\n+ * the `input` event does not provide any useful information about what has\n+ * actually been added, contrary to the spec. Thus, `textInput` is the best\n+ * available event to identify the characters that have actually been inserted\n+ * into the target node.\n+ */\n+var BeforeInputEventPlugin = {\n+\n+  eventTypes: eventTypes,\n+\n+  /**\n+   * @param {string} topLevelType Record from `EventConstants`.\n+   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+   * @param {object} nativeEvent Native browser event.\n+   * @return {*} An accumulation of synthetic events.\n+   * @see {EventPluginHub.extractEvents}\n+   */\n+  extractEvents: function(\n+      topLevelType,\n+      topLevelTarget,\n+      topLevelTargetID,\n+      nativeEvent) {\n+\n+    var chars;\n+\n+    if (useBeforeInputEvent) {\n+      // For browsers that support `textInput` events natively, don't do\n+      // anything with keypress, composition, etc.\n+      if (topLevelType !== topLevelTypes.topTextInput) {\n+        return;\n+      }\n+      chars = nativeEvent.data;\n+    } else {\n+      switch (topLevelType) {\n+        case topLevelTypes.topPaste:\n+          // If a paste event occurs after a keypress, throw out the input\n+          // chars. Paste events should not lead to BeforeInput events.\n+          fallbackChars = null;\n+          break;\n+        case topLevelTypes.topKeyPress:\n+          /**\n+           * As of v27, Firefox may fire keypress events even when no character\n+           * will be inserted. A few possibilities:\n+           *\n+           * - `which` is `0`. Arrow keys, Esc key, etc.\n+           *\n+           * - `which` is the pressed key code, but no char is available.\n+           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+           *   this key combination and no character is inserted into the\n+           *   document, but FF fires the keypress for char code `100` anyway.\n+           *   No `input` event will occur.\n+           *\n+           * - `which` is the pressed key code, but a command combination is\n+           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+           *   `input` event will occur.\n+           */\n+          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+            fallbackChars = String.fromCharCode(nativeEvent.which);\n+          }\n+          break;\n+        case topLevelTypes.topCompositionEnd:\n+          fallbackChars = nativeEvent.data;\n+          break;\n+      }\n+\n+      // If no changes have occurred to the fallback string, no relevant\n+      // event has fired and we're done.\n+      if (fallbackChars === null) {\n+        return;\n+      }\n+\n+      chars = fallbackChars;\n+    }\n+\n+    // If no characters are being inserted, no BeforeInput event should\n+    // be fired.\n+    if (!chars) {\n+      return;\n+    }\n+\n+    var event = SyntheticInputEvent.getPooled(\n+      eventTypes.beforeInput,\n+      topLevelTargetID,\n+      nativeEvent\n+    );\n+\n+    event.data = chars;\n+    fallbackChars = null;\n+    EventPropagators.accumulateTwoPhaseDispatches(event);\n+    return event;\n+  }\n+};\n+\n+module.exports = BeforeInputEventPlugin;"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "give me all the commits for React.js file?",
        "number": 6,
        "category": 2,
        "response": "Here are all the commits for the React.js file:\n\n1. **Commit ID:** ce2bc58a9f6f3b0bfc8c738a0d8e2a5f3a332ff5\n   - **Message:** \"[activity] rename unstable_Offscreen to unstable_Activity (#27640)\\n\\n`Activity` is the current candidate name. This PR starts the rename work by renaming the exported unstable component name.\\n\\nNOTE: downstream consumers need to rename the import when updating to this commit.\"\n   - **Committed Date:** 2023-11-02T20:13:21Z\n\n2. **Commit ID:** bfefb228422f7264a29b3a6b98ec95e05925e80e\n   - **Message:** \"Upgrade Server Actions to canary (#27459)\\n\\nUpgrades the stability of Server Actions from experimental to canary.\\n\\n- Turns on enableAsyncActions and enableFormActions\\n- Removes \"experimental_\" prefix from useOptimistic, useFormStatus, and useFormState\"\n   - **Committed Date:** 2023-10-04T18:51:36Z\n\n3. **Commit ID:** c7ba8c098889b6dc47fa9c807bbba3975a658584\n   - **Message:** \"Enforce that the \"react-server\" build of \"react\" is used (#27436)\\n\\nI do this by simply renaming the secret export name in the \"subset\" bundle and this renamed version is what the FlightServer uses.\\n\\nThis requires us to be more diligent about always using the correct instance of \"react\" in our tests so there's a bunch of clean up for that.\"\n   - **Committed Date:** 2023-09-29T22:24:05Z\n\n4. **Commit ID:** ac1a16c67e268fcb2c52e91717cbc918c7c24446\n   - **Message:** \"Add Postpone API (#27238)\\n\\nThis adds an experimental `unstable_postpone(reason)` API.\\n\\nCurrently we don't have a way to model effectively an Infinite Promise. I.e. something that suspends but never resolves. The reason this is useful is because you might have something else that unblocks it later. E.g. by updating in place later, or by client rendering.\"\n   - **Committed Date:** 2023-08-17T17:26:14Z\n\n5. **Commit ID:** eb2c2f7c2cf2652a168c2b433d2989131c69754b\n   - **Message:** \"rename SuspenseList export to unstable_SuspenseList (#27061)\\n\\n## Summary\\n\\nas we began [discussing yesterday](https://github.com/facebook/react/pull/27056#discussion_r1253282784),\\n`SuspenseList` is not actually stable yet, and should likely be exported\\nwith the `unstable_` prefix.\"\n   - **Committed Date:** 2023-07-06T18:09:53Z\n\n6. **Commit ID:** 80d9a40114bb43c07d021e8254790852f450bd2b\n   - **Message:** \"Remove useMutableSource (#27011)\\n\\n## Summary\\n\\nThis PR cleans up `useMutableSource`. This has been blocked by a\\nremaining dependency internally at Meta, but that has now been deleted.\"\n   - **Committed Date:** 2023-06-27T16:45:46Z\n\n7. **Commit ID:** b7972822b5887d05ae772ef757a453265b4b7aec\n   - **Message:** \"useOptimisticState -> useOptimistic (#26772)\\n\\nDrop the \"state\". Just \"useOptimistic\". Its cleaner.\\n\\nThis is still an experimental API. May not be the final name.\"\n   - **Committed Date:** 2023-05-03T18:26:00Z\n\n8. **Commit ID:** 491aec5d6113ce5bae7c10966bc38a4a8fc091a8\n   - **Message:** \"Implement experimental_useOptimisticState (#26740)\\n\\nThis adds an experimental hook tentatively called useOptimisticState.\\n(The actual name needs some bikeshedding.)\\n\\nThe headline feature is that you can use it to implement optimistic\\nupdates.\"\n   - **Committed Date:** 2023-05-01T17:19:20Z\n\n9. **Commit ID:** 84a0a171ea0ecd25e287bd3d3dd30e932beb4677\n   - **Message:** \"Rename experimental useEvent to useEffectEvent (#25881)\\n\\nWe originally had grand plans for using this Event concept for more but\\nnow its only meant to be used in combination with effects.\"\n   - **Committed Date:** 2022-12-14T20:08:29Z\n\n10. **Commit ID:** e7c5af45ceb8fa2b64d39ec68345254ce9abd65e\n    - **Message:** \"Update cache() and use() to the canary aka next channel (#25502)\\n\\nTesting what it would look like to move this to the `next` channel.\"\n    - **Committed Date:** 2022-10-24T03:20:52Z",
        "chain_of_thought": "To address the question, \"give me all the commits for React.js file,\" we need to identify the relevant nodes and relationships in the schema. The file in question is \"React.js,\" which corresponds to the File node. We are interested in finding all the commits that have modified this file. The relevant relationship between Commit and File is the changed relationship, which indicates that a commit has modified a file.\n\nHere's how we can construct the Cypher query:\n\n1. Identify the File node with the name \"React.js.\"\n2. Find all Commit nodes that have a changed relationship with this File node.\n\nThe query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'React.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\nORDER BY committedDate DESC\n```\n\nThis query will return all commits that have modified the \"React.js\" file, along with their commit IDs, messages, and committed dates, sorted by the committed date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'React.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\nORDER BY committedDate DESC\n",
        "result": [
            {
                "commitId": "ce2bc58a9f6f3b0bfc8c738a0d8e2a5f3a332ff5",
                "commitMessage": "\"[activity] rename unstable_Offscreen to unstable_Activity (#27640)\n\n`Activity` is the current candidate name. This PR starts the rename work\r\nby renaming the exported unstable component name.\r\n\r\nNOTE: downstream consumers need to rename the import when updating to\r\nthis commit.\"",
                "committedDate": "2023-11-02T20:13:21Z"
            },
            {
                "commitId": "bfefb228422f7264a29b3a6b98ec95e05925e80e",
                "commitMessage": "\"Upgrade Server Actions to canary (#27459)\n\nUpgrades the stability of Server Actions from experimental to canary.\r\n\r\n- Turns on enableAsyncActions and enableFormActions\r\n- Removes \"experimental_\" prefix from useOptimistic, useFormStatus, and\r\nuseFormState\"",
                "committedDate": "2023-10-04T18:51:36Z"
            },
            {
                "commitId": "c7ba8c098889b6dc47fa9c807bbba3975a658584",
                "commitMessage": "\"Enforce that the \"react-server\" build of \"react\" is used (#27436)\n\nI do this by simply renaming the secret export name in the \"subset\"\r\nbundle and this renamed version is what the FlightServer uses.\r\n\r\nThis requires us to be more diligent about always using the correct\r\ninstance of \"react\" in our tests so theres a bunch of clean up for\r\nthat.\"",
                "committedDate": "2023-09-29T22:24:05Z"
            },
            {
                "commitId": "ac1a16c67e268fcb2c52e91717cbc918c7c24446",
                "commitMessage": "\"Add Postpone API (#27238)\n\nThis adds an experimental `unstable_postpone(reason)` API.\r\n\r\nCurrently we dont have a way to model effectively an Infinite Promise.\r\nI.e. something that suspends but never resolves. The reason this is\r\nuseful is because you might have something else that unblocks it later.\r\nE.g. by updating in place later, or by client rendering.\r\n\r\nOn the client this works to model as an Infinite Promise (in fact,\r\nthats what this implementation does). However, in Fizz and Flight that\r\ndoesnt work because the stream needs to end at some point. We dont\r\nhave any way of knowing that were suspended on infinite promises. Its\r\nnot enough to tag the promises because you could await those and thus\r\ncreating new promises. The only way we really have to signal this\r\nthrough a series of indirections like async functions, is by throwing.\r\nIts not 100% safe because these values can be caught but its the best\r\nwe can do.\r\n\r\nEffectively `postpone(reason)` behaves like a built-in [Catch\r\nBoundary](https://github.com/facebook/react/pull/26854). Its like\r\n`raise(Postpone, reason)` except its built-in so it needs to be able to\r\nbe encoded and caught by Suspense boundaries.\r\n\r\nIn Flight and Fizz these behave pretty much the same as errors. Flight\r\njust forwards it to retrigger on the client. In Fizz they just trigger\r\nclient rendering which itself might just postpone again or fill in the\r\nvalue. The difference is how they get logged.\r\n\r\nIn Flight and Fizz they log to `onPostpone(reason)` instead of\r\n`onError(error)`. This log is meant to help find deopts on the server\r\nlike finding places where you fall back to client rendering. The reason\r\nthat you pass in is for that purpose to help the reason for any deopts.\r\n\r\nI do track the stack trace in DEV but I dont currently expose it to\r\n`onPostpone`. This seems like a limitation. It might be better to expose\r\nthe Postpone object which is an Error object but thats more of an\r\nimplementation detail. I could also pass it as a second argument.\r\n\r\nOn the client after hydration they dont get passed to\r\n`onRecoverableError`. Theres no global `onPostpone` API to capture\r\npostponed things on the client just like theres no `onError`. At that\r\npoint its just assumed to be intentional. It doesnt have any `digest`\r\nor reason passed to the client since its not logged.\r\n\r\nThere are some hacky solutions that currently just tries to reuse as\r\nmuch of the existing code as possible but should be more properly\r\nimplemented.\r\n- Fiber is currently just converting it to a fake Promise object so that\r\nit behaves like an infinite Promise.\r\n- Fizz is encoding the magic digest string `\"POSTPONE\"` in the HTML so\r\nwe know to ignore it but it should probably just be something neater\r\nthat doesnt share namespace with digests.\r\n\r\nNext I plan on using this in the `/static` entry points for additional\r\nfeatures.\r\n\r\nWhy \"postpone\"? Its basically a synonym to \"defer\" but we plan on using\r\n\"defer\" for other purposes and its overloaded anyway.\"",
                "committedDate": "2023-08-17T17:26:14Z"
            },
            {
                "commitId": "eb2c2f7c2cf2652a168c2b433d2989131c69754b",
                "commitMessage": "\"rename SuspenseList export to unstable_SuspenseList (#27061)\n\n## Summary\r\n\r\nas we began [discussing\r\nyesterday](https://github.com/facebook/react/pull/27056#discussion_r1253282784),\r\n`SuspenseList` is not actually stable yet, and should likely be exported\r\nwith the `unstable_` prefix.\r\n\r\nthe conversation yesterday began discussing this in the context of the\r\nfb-specific packages, but changing it there without updating everywhere\r\nelse leads to test failures, so here the change is made across packages.\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn flow dom-browser\r\nyarn test\r\n```\"",
                "committedDate": "2023-07-06T18:09:53Z"
            },
            {
                "commitId": "80d9a40114bb43c07d021e8254790852f450bd2b",
                "commitMessage": "\"Remove useMutableSource (#27011)\n\n## Summary\r\n\r\nThis PR cleans up `useMutableSource`. This has been blocked by a\r\nremaining dependency internally at Meta, but that has now been deleted.\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn flow\r\nyarn lint\r\nyarn test --prod\r\n```\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\"",
                "committedDate": "2023-06-27T16:45:46Z"
            },
            {
                "commitId": "b7972822b5887d05ae772ef757a453265b4b7aec",
                "commitMessage": "\"useOptimisticState -> useOptimistic (#26772)\n\nDrop the \"state\". Just \"useOptimistic\". Its cleaner.\r\n\r\nThis is still an experimental API. May not be the final name.\"",
                "committedDate": "2023-05-03T18:26:00Z"
            },
            {
                "commitId": "491aec5d6113ce5bae7c10966bc38a4a8fc091a8",
                "commitMessage": "\"Implement experimental_useOptimisticState (#26740)\n\nThis adds an experimental hook tentatively called useOptimisticState.\r\n(The actual name needs some bikeshedding.)\r\n\r\nThe headline feature is that you can use it to implement optimistic\r\nupdates. If you set some optimistic state during a transition/action,\r\nthe state will be automatically reverted once the transition completes.\r\n\r\nAnother feature is that the optimistic updates will be continually\r\nrebased on top of the latest state.\r\n\r\nIts easiest to explain with examples; well publish documentation as\r\nthe API gets closer to stabilizing. See tests for now.\r\n\r\nTechnically the use cases for this hook are broader than just optimistic\r\nupdates; you could use it implement any sort of \"pending\" state, such as\r\nthe ones exposed by useTransition and useFormStatus. But we expect\r\npeople will most often reach for this hook to implement the optimistic\r\nupdate pattern; simpler cases are covered by those other hooks.\"",
                "committedDate": "2023-05-01T17:19:20Z"
            },
            {
                "commitId": "84a0a171ea0ecd25e287bd3d3dd30e932beb4677",
                "commitMessage": "\"Rename experimental useEvent to useEffectEvent (#25881)\n\nWe originally had grand plans for using this Event concept for more but\r\nnow its only meant to be used in combination with effects.\r\n\r\nIts an Event in the FRP terms, that is triggered from an Effect.\r\nTechnically it can also be from another function that itself is\r\ntriggered from an existing side-effect but thats kind of an advanced\r\ncase.\r\n\r\nThe canonical case is an effect that triggers an event:\r\n\r\n```js\r\nconst onHappened = useEffectEvent(() => ...);\r\nuseEffect(() => {\r\n  onHappened();\r\n}, []);\r\n```\"",
                "committedDate": "2022-12-14T20:08:29Z"
            },
            {
                "commitId": "e7c5af45ceb8fa2b64d39ec68345254ce9abd65e",
                "commitMessage": "\"Update cache() and use() to the canary aka next channel (#25502)\n\nTesting what it would look like to move this to the `next` channel.\"",
                "committedDate": "2022-10-24T03:20:52Z"
            },
            {
                "commitId": "caa84c8da0aed390ec25783e577d91711dfd6bcc",
                "commitMessage": "\"Revert fetch instrumentation to only RSC (#25540)\n\nRevert fetch instrumentation so that it only affects RSC by applying it\r\nonly in the react-server condition of \"react\".\r\n\r\nThis helps make the rollout a little smoother because these affects\r\nexisting libraries that fetch during client components, and then gets\r\nforever cached. We need to implement the GC first.\r\n\r\nI havent fully implemented the SSR part anyway.\r\n\r\nThe main problem that we discovered is that `\"react\"` and\r\n`\"react/react.shared-subset\"` have separate dispatchers in an\r\nenvironment that runs both Fizz and Flight. Thats intentional and\r\nsometimes a feature. However, in this case it means that we instrument\r\nfetch twice and when you run Flight inside Fizz, that fetch goes into\r\nboth caches when its supposed to only see the inner one. Im not sure\r\nhow to solve that atm.\"",
                "committedDate": "2022-10-23T02:58:30Z"
            },
            {
                "commitId": "65e32e58b6057db1fdfed95a942fad4fc96da191",
                "commitMessage": "\"Add fetch Instrumentation to Dedupe Fetches (#25516)\n\n* Add fetch instrumentation in cached contexts\r\n\r\n* Avoid unhandled rejection errors for Promises that we intentionally ignore\r\n\r\nIn the final passes, we ignore the newly generated Promises and use\r\nthe previous ones. This ensures that if those generate errors, that we\r\nintentionally ignore those.\r\n\r\n* Add extra fetch properties if there were any\"",
                "committedDate": "2022-10-19T22:37:00Z"
            },
            {
                "commitId": "8e2bde6f2751aa6335f3cef488c05c3ea08e074a",
                "commitMessage": "\"Add cache() API (#25506)\n\nLike memo() but longer lived.\"",
                "committedDate": "2022-10-18T20:55:06Z"
            },
            {
                "commitId": "0a3072278ee5fb46ddb58e6f5ba9e2b78f6f715a",
                "commitMessage": "\"Flow: complete types first migration (#25389)\n\nThis complete the \"types first\" migration and enables the config everywhere.\"",
                "committedDate": "2022-10-04T01:59:33Z"
            },
            {
                "commitId": "c91a1e03be54733a7dbfcb5663d7a9e8606ab1c1",
                "commitMessage": "\"experimental_useEvent (#25229)\n\nThis commit adds a new hook `useEvent` per the RFC [here](https://github.com/reactjs/rfcs/pull/220), gated as experimental. \r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>\r\nCo-authored-by: Lauren Tan <poteto@users.noreply.github.com>\"",
                "committedDate": "2022-09-14T18:39:06Z"
            },
            {
                "commitId": "b6978bc38f6788c7e73982b9fd2771aabdf36f15",
                "commitMessage": "\"experimental_use(promise) (#25084)\n\n* Internal `act`: Unwrapping resolved promises\r\n\r\nThis update our internal implementation of `act` to support Reacts new\r\nbehavior for unwrapping promises. Like we did with Scheduler, when \r\nsomething suspends, it will yield to the main thread so the microtasks\r\ncan run, then continue in a new task.\r\n\r\nI need to implement the same behavior in the public version of `act`,\r\nbut there are some additional considerations so Ill do that in a\r\nseparate commit.\r\n\r\n* Move throwException to after work loop resumes\r\n\r\nthrowException is the function that finds the nearest boundary and\r\nschedules it for a second render pass. We should only call it right \r\nbefore we unwind the stack \u2014 not if we receive an immediate ping and\r\nrender the fiber again.\r\n\r\nThis was an oversight in 8ef3a7c that I didnt notice because it happens\r\nto mostly work, anyway. What made me notice the mistake is that\r\nthrowException also marks the entire render phase as suspended\r\n(RootDidSuspend or RootDidSuspendWithDelay), which is only supposed to\r\nbe happen if we show a fallback. One consequence was that, in the \r\nRootDidSuspendWithDelay case, the entire commit phase was blocked,\r\nbecause thats the exit status we use to block a bad fallback\r\nfrom appearing.\r\n\r\n* Use expando to check whether promise has resolved\r\n\r\nAdd a `status` expando to a thrown thenable to track when its value has\r\nresolved.\r\n\r\nIn a later step, well also use `value` and `reason` expandos to track\r\nthe resolved value.\r\n\r\nThis is not part of the official JavaScript spec \u2014 think of\r\nit as an extension of the Promise API, or a custom interface that is a\r\nsuperset of Thenable. However, its inspired by the terminology used\r\nby `Promise.allSettled`.\r\n\r\nThe intent is that this will be a public API \u2014 Suspense implementations\r\ncan set these expandos to allow React to unwrap the value synchronously\r\nwithout waiting a microtask.\r\n\r\n* Scaffolding for `experimental_use` hook\r\n\r\nSets up a new experimental hook behind a feature flag, but does not\r\nimplement it yet.\r\n\r\n* use(promise)\r\n\r\nAdds experimental support to Fiber for unwrapping the value of a promise\r\ninside a component. It is not yet implemented for Server Components, \r\nbut that is planned.\r\n\r\nIf promise has already resolved, the value can be unwrapped\r\n\"immediately\" without showing a fallback. The trick we use to implement\r\nthis is to yield to the main thread (literally suspending the work\r\nloop), wait for the microtask queue to drain, then check if the promise\r\nresolved in the meantime. If so, we can resume the last attempted fiber\r\nwithout unwinding the stack. This functionality was implemented in \r\nprevious commits.\r\n\r\nAnother feature is that the promises do not need to be cached between\r\nattempts. Because we assume idempotent execution of components, React\r\nwill track the promises that were used during the previous attempt and\r\nreuse the result. You shouldnt rely on this property, but during\r\ninitial render it mostly just works. Updates are trickier, though,\r\nbecause if you used an uncached promise, we have no way of knowing \r\nwhether the underlying data has changed, so we have to unwrap the\r\npromise every time. It will still work, but its inefficient and can\r\nlead to unnecessary fallbacks if it happens during a discrete update.\r\n\r\nWhen we implement this for Server Components, this will be less of an\r\nissue because there are no updates in that environment. However, its\r\nstill better for performance to cache data requests, so the same\r\nprinciples largely apply.\r\n\r\nThe intention is that this will eventually be the only supported way to\r\nsuspend on arbitrary promises. Throwing a promise directly will\r\nbe deprecated.\"",
                "committedDate": "2022-08-25T18:12:07Z"
            },
            {
                "commitId": "9e67e7a31582079263665fac0391220b99d8bb86",
                "commitMessage": "\"Scaffolding for useMemoCache hook (#25123)\n\n* Scaffolding for useMemoCache hook\r\n* cleanup leftovers from copy/paste of use() diff\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "committedDate": "2022-08-23T08:36:02Z"
            },
            {
                "commitId": "d5f1b067c8bbb826b823d0354a28ba31078b70c0",
                "commitMessage": "\"[ServerContext] Flight support for ServerContext (#23244)\n\n* Flight side of server context\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* reinline\r\n\r\n* rebase\r\n\r\n* add back changes lost due to rebase being hard\r\n\r\n* emit chunk for provider\r\n\r\n* remove case for React provider type\r\n\r\n* update type for SomeChunk\r\n\r\n* enable flag with experimental\r\n\r\n* add missing types\r\n\r\n* fix flow type\r\n\r\n* missing type\r\n\r\n* t: any\r\n\r\n* revert extraneous type change\r\n\r\n* better type\r\n\r\n* better type\r\n\r\n* feedback\r\n\r\n* change import to type import\r\n\r\n* test?\r\n\r\n* test?\r\n\r\n* remove react-dom\r\n\r\n* remove react-native-renderer from react-server-native-relay/package.json\r\n\r\n* gate change in FiberNewContext, getComponentNameFromType, use switch statement in FlightServer\r\n\r\n* getComponentNameFromTpe: server context type gated and use displayName if available\r\n\r\n* fallthrough\r\n\r\n* lint....\r\n\r\n* POP\r\n\r\n* lint\"",
                "committedDate": "2022-03-08T12:55:32Z"
            },
            {
                "commitId": "a6987bee730052dccdddd4645e15b1ce458fd9a6",
                "commitMessage": "\"add <TracingMarker> component boilerplate (#23275)\n\n- Add Tracing Marker component type to React exports\r\n- Add reconciler work tag\r\n- Add devtools work tag\r\n- Add boilerplate for the cache to render children\r\n\r\nNo functionality yet\"",
                "committedDate": "2022-02-11T16:42:55Z"
            },
            {
                "commitId": "5cccacd131242bdea2c2fe4b33fac50d2e3132b4",
                "commitMessage": "\"Upgrade useId to alpha channel (#22674)\"",
                "committedDate": "2021-11-01T22:26:42Z"
            },
            {
                "commitId": "75f3ddebfa0d9885ce8df42571cf0c09ad6c0a3b",
                "commitMessage": "\"Remove experimental useOpaqueIdentifier API (#22672)\n\nuseId is the updated version of this API.\"",
                "committedDate": "2021-11-01T22:02:39Z"
            },
            {
                "commitId": "ebf9ae8579230e7b1ed0b1d243e1cf802f56938b",
                "commitMessage": "\"useId (#22644)\n\n* Add useId to dispatcher\r\n\r\n* Initial useId implementation\r\n\r\nIds are base 32 strings whose binary representation corresponds to the\r\nposition of a node in a tree.\r\n\r\nEvery time the tree forks into multiple children, we add additional bits\r\nto the left of the sequence that represent the position of the child\r\nwithin the current level of children.\r\n\r\n    00101       00010001011010101\r\n    \u2570\u2500\u252c\u2500\u256f       \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\r\n  Fork 5 of 20       Parent id\r\n\r\nThe leading 0s are important. In the above example, you only need 3 bits\r\nto represent slot 5. However, you need 5 bits to represent all the forks\r\nat the current level, so we must account for the empty bits at the end.\r\n\r\nFor this same reason, slots are 1-indexed instead of 0-indexed.\r\nOtherwise, the zeroth id at a level would be indistinguishable from\r\nits parent.\r\n\r\nIf a node has only one child, and does not materialize an id (i.e. does\r\nnot contain a useId hook), then we dont need to allocate any space in\r\nthe sequence. Its treated as a transparent indirection. For example,\r\nthese two trees produce the same ids:\r\n\r\n<>                          <>\r\n  <Indirection>               <A />\r\n    <A />                     <B />\r\n  </Indirection>            </>\r\n  <B />\r\n</>\r\n\r\nHowever, we cannot skip any materializes an id. Otherwise, a parent id\r\nthat does not fork would be indistinguishable from its child id. For\r\nexample, this tree does not fork, but the parent and child must have\r\ndifferent ids.\r\n\r\n<Parent>\r\n  <Child />\r\n</Parent>\r\n\r\nTo handle this scenario, every time we materialize an id, we allocate a\r\nnew level with a single slot. You can think of this as a fork with only\r\none prong, or an array of children with length 1.\r\n\r\nIts possible for the the size of the sequence to exceed 32 bits, the\r\nmax size for bitwise operations. When this happens, we make more room by\r\nconverting the right part of the id to a string and storing it in an\r\noverflow variable. We use a base 32 string representation, because 32 is\r\nthe largest power of 2 that is supported by toString(). We want the base\r\nto be large so that the resulting ids are compact, and we want the base\r\nto be a power of 2 because every log2(base) bits corresponds to a single\r\ncharacter, i.e. every log2(32) = 5 bits. That means we can lop bits off\r\nthe end 5 at a time without affecting the final result.\r\n\r\n* Incremental hydration\r\n\r\nStores the tree context on the dehydrated Suspense boundarys state\r\nobject so it resume where it left off.\r\n\r\n* Add useId to react-debug-tools\r\n\r\n* Add selective hydration test\r\n\r\nDemonstrates that selective hydration works and ids are preserved even\r\nafter subsequent client updates.\"",
                "committedDate": "2021-11-01T20:30:44Z"
            },
            {
                "commitId": "fa9bea0c41ccfef5b528ef9b5517607f9f94c52a",
                "commitMessage": "\"Initial implementation of cache cleanup (#22510)\n\nThis is an initial, partial implementation of a cleanup mechanism for the experimental Cache API. The idea is that consumers of the Cache API can register to be informed when a given Cache instance is no longer needed so that they can perform associated cleanup tasks to free resources stored in the cache. A canonical example would be cancelling pending network requests.\r\n\r\nAn overview of the high-level changes:\r\n\r\n* Changes the `Cache` type from a Map of cache instances to be an object with the original Map of instances, a reference count (to count roughly \"active references\" to the cache instances - more below), and an AbortController.\r\n* Adds a new public API, `unstable_getCacheSignal(): AbortSignal`, which is callable during render. It returns an AbortSignal tied to the lifetime of the cache - developers can listen for the abort event on the signal, which React now triggers when a given cache instance is no longer referenced. \r\n  * Note that `AbortSignal` is a web standard that is supported by other platform APIs; for example a signal can be passed to `fetch()` to trigger cancellation of an HTTP request.\r\n* Implements the above - triggering the abort event - by handling passive mount/unmount for HostRoot and CacheComponent fiber nodes.\r\n\r\nCases handled:\r\n* Aborted transitions: we clean up a new cache created for an aborted transition\r\n* Suspense: we retain a fresh cache instance until a suspended tree resolves\r\n\r\nFor follow-ups:\r\n* When a subsequent cache refresh is issued before a previous refresh completes, the refreshes are queued. Fresh cache instances for previous refreshes in the queue should be cleared, retaining only the most recent cache. I plan to address this in a follow-up PR.\r\n* If a refresh is cancelled, the fresh cache should be cleaned up.\"",
                "committedDate": "2021-10-21T21:11:42Z"
            },
            {
                "commitId": "02f411578a8e58af8ec28e385f6b0dcb768cdc41",
                "commitMessage": "\"Upgrade useInsertionEffect to stable (#22589)\n\n@huozhi tried this out and says its working as expected. I think we\r\ncan go ahead and move this into the stable channel, so that it is\r\navailable in the React 18 alpha releases.\"",
                "committedDate": "2021-10-19T21:32:54Z"
            },
            {
                "commitId": "82c8fa90be86fc0afcbff2dc39486579cff1ac9a",
                "commitMessage": "\"Add back useMutableSource temporarily (#22396)\n\nRecoil uses useMutableSource behind a flag. I thought this was fine\r\nbecause Recoil isnt used in any concurrent roots, so the behavior\r\nwould be the same, but it turns out that it is used by concurrent\r\nroots in a few places.\r\n\r\nIm not expecting it to be hard to migrate to useSyncExternalStore, but\r\nto de-risk the change Im going to roll it out gradually with a flag. In\r\nthe meantime, Ive added back the useMutableSource API.\"",
                "committedDate": "2021-09-22T03:38:24Z"
            },
            {
                "commitId": "8209de269531767b33d8db26eda41db38bfb6a27",
                "commitMessage": "\"Delete useMutableSource implementation (#22292)\n\nThis API was replaced by useSyncExternalStore\"",
                "committedDate": "2021-09-20T04:11:50Z"
            },
            {
                "commitId": "263cfa6ecb9879ecb629d4e04a8c26422b4c4ff9",
                "commitMessage": "\"[Experimental] Add useInsertionEffect (#21913)\"",
                "committedDate": "2021-09-14T14:27:09Z"
            },
            {
                "commitId": "77912d9a05d7a90287fabdec76486f25869b2981",
                "commitMessage": "\"Wire up the native API for useSyncExternalStore (#22237)\n\nAdds useSyncExternalStore to the internal dispatcher, and exports\r\nthe native API from the React package without yet implementing it.\"",
                "committedDate": "2021-09-07T17:20:24Z"
            },
            {
                "commitId": "06f7b4f43a93eae9111cfbd972ab1ae1148f6afb",
                "commitMessage": "\"`act` should work without mock Scheduler (#21714)\n\nCurrently, in a React 18 root, `act` only works if you mock the\r\nScheduler package. This was because we didnt want to add additional\r\nchecks at runtime.\r\n\r\nBut now that the `act` testing API is dev-only, we can simplify its\r\nimplementation.\r\n\r\nNow when an update is wrapped with `act`, React will bypass Scheduler\r\nentirely and push its tasks onto a special internal queue. Then, when\r\nthe outermost `act` scope exists, well flush that queue.\r\n\r\nI also removed the \"wrong act\" warning, because the plan is to move\r\n`act` to an isomorphic entry point, simlar to `startTransition`. Thats\r\nnot directly related to this PR, but I didnt want to bother\r\nre-implementing that warning only to immediately remove it.\r\n\r\nIll add the isomorphic API in a follow up.\r\n\r\nNote that the internal version of `act` that we use in our own tests\r\nstill depends on mocking the Scheduler package, because it needs to work\r\nin production. Im planning to move that implementation to a shared\r\n(internal) module, too.\"",
                "committedDate": "2021-06-22T21:25:07Z"
            },
            {
                "commitId": "e16d61c3000e2de6217d06b9afad162e883f73c4",
                "commitMessage": "\"[Offscreen] Mount/unmount layout effects (#21386)\n\n* [Offscreen] Mount/unmount layout effects\r\n\r\nExposes the Offscreen component type and implements basic support for\r\nmount/unmounting layout effects when the visibility is toggled.\r\n\r\nMostly it works the same way as hidden Suspense trees, which use the\r\nsame internal fiber type. I had to add an extra bailout, though, that\r\ndoesnt apply to the Suspense case but does apply to Offscreen\r\ncomponents: a hidden Offscreen tree will eventually render at low\r\npriority, and when we it does, its `subtreeTag` will have effects\r\nscheduled on it. So I added a check to the layout phase where, if the\r\nsubtree is hidden, we skip over the subtree entirely. An alternate\r\ndesign would be to clear the subtree flags in the render phase, but I\r\nprefer doing it this way since its harder to mess up.\r\n\r\nWe also need an API to enable the same thing for passive effects. This\r\nis not yet implemented.\r\n\r\n* Add test starting from hidden\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>\"",
                "committedDate": "2021-06-01T19:46:08Z"
            },
            {
                "commitId": "4ecf11977c46966d3deedcdc71f1280a34607d1d",
                "commitMessage": "\"Remove the Fundamental internals (#20745)\"",
                "committedDate": "2021-02-05T20:36:55Z"
            },
            {
                "commitId": "efc57e5cbbd618f3c98d941c48eec859026c2dcb",
                "commitMessage": "\"Add built-in Suspense cache with support for invalidation (refreshing) (#20456)\"",
                "committedDate": "2020-12-18T18:57:24Z"
            },
            {
                "commitId": "e23673b511a2eab6ddcb848a4150105c954f289a",
                "commitMessage": "\"[Flight] Add getCacheForType() to the dispatcher (#20315)\n\n* Remove react/unstable_cache\r\n\r\nWere probably going to make it available via the dispatcher. Lets remove this for now.\r\n\r\n* Add readContext() to the dispatcher\r\n\r\nOn the server, it will be per-request.\r\n\r\nOn the client, there will be some way to shadow it.\r\n\r\nFor now, I provide it on the server, and throw on the client.\r\n\r\n* Use readContext() from react-fetch\r\n\r\nThis makes it work on the server (but not on the client until we implement it there.)\r\n\r\nUpdated the test to use Server Components. Now it passes.\r\n\r\n* Fixture: Add fetch from a Server Component\r\n\r\n* readCache -> getCacheForType<T>\r\n\r\n* Add React.unstable_getCacheForType\r\n\r\n* Add a feature flag\r\n\r\n* Fix Flow\r\n\r\n* Add react-suspense-test-utils and port tests\r\n\r\n* Remove extra Map lookup\r\n\r\n* Unroll async/await because build system\r\n\r\n* Add some error coverage and retry\r\n\r\n* Add unstable_getCacheForType to Flight entry\"",
                "committedDate": "2020-12-03T03:44:56Z"
            },
            {
                "commitId": "56e9feead0f91075ba0a4f725c9e4e343bca1c67",
                "commitMessage": "\"Remove Blocks (#20138)\n\n* Remove Blocks\r\n\r\n* Remove Flight Server Runtime\r\n\r\nTheres no need for this now that the JSResource is part of the bundler\r\nprotocol. Might need something for Webpack plugin specifically later.\r\n\r\n* Devtools\"",
                "committedDate": "2020-10-31T06:03:45Z"
            },
            {
                "commitId": "1f38dcff67d12828be771403e183652f5e93909a",
                "commitMessage": "\"Remove withSuspenseConfig (#19724)\n\nRemoves `withSuspenseConfig` and migrates relevant tests to\r\n`startTransition` instead.\r\n\r\nWe only had one caller in www, which Ive removed.\"",
                "committedDate": "2020-08-31T16:16:49Z"
            },
            {
                "commitId": "5564f2c95bb61b446f93dc5c519740bdb39e1989",
                "commitMessage": "\"Add React.startTransition (#19696)\n\n* Add React.startTransition\r\n\r\n* Export startTransition from index.js as well\"",
                "committedDate": "2020-08-26T15:34:17Z"
            },
            {
                "commitId": "b61174fb7b09580c1ec2a8f55e73204b706d2935",
                "commitMessage": "\"Remove the deprecated React Flare event system (#19520)\"",
                "committedDate": "2020-08-05T14:13:29Z"
            },
            {
                "commitId": "9102719baacb64738e9235bc80d3d7d9918cc74c",
                "commitMessage": "\"Tidy up React Scope API (#19352)\"",
                "committedDate": "2020-07-16T15:21:21Z"
            },
            {
                "commitId": "8b9c4d1688333865e702fcd65ad2ab7d83b3c33c",
                "commitMessage": "\"Expose LegacyHidden type and disable <div hidden /> API in new fork (#18891)\n\n* Expose LegacyHidden type\r\n\r\nI will use this internally at Facebook to migrate away from\r\n<div hidden />. The end goal is to migrate to the Offscreen type, but\r\nthat has different semantics. This is an incremental step.\r\n\r\n* Disable <div hidden /> API in new fork\r\n\r\nMigrates to the unstable_LegacyHidden type instead. The old fork does\r\nnot support the new component type, so I updated the tests to use an\r\nindirection that picks the correct API. I will remove this once the\r\nLegacyHidden (and/or Offscreen) type has landed in both implementations.\r\n\r\n* Add gated warning for `<div hidden />` API\r\n\r\nOnly exists so we can detect callers in www and migrate them to the new\r\nAPI. Should not visible to anyone outside React Core team.\"",
                "committedDate": "2020-05-12T03:02:08Z"
            },
            {
                "commitId": "22dc2e42bdc00d87fc19c5e75fc7c0b3fdcdc572",
                "commitMessage": "\"Add experimental DebugTracing logger for internal use (#18531)\"",
                "committedDate": "2020-04-16T02:10:15Z"
            },
            {
                "commitId": "3278d242184a13add3f25f683b77ef9a6a2305f3",
                "commitMessage": "\"Add useOpaqueIdentifier Hook (#17322)\n\n* Add useOpaqueIdentifier Hook\r\n\r\nWe currently use unique IDs in a lot of places. Examples are:\r\n  * `<label for=\"ID\">`\r\n  * `aria-labelledby`\r\n\r\nThis can cause some issues:\r\n  1. If we server side render and then hydrate, this could cause an\r\n     hydration ID mismatch\r\n  2. If we server side render one part of the page and client side\r\n     render another part of the page, the ID for one part could be\r\n     different than the ID for another part even though they are\r\n     supposed to be the same\r\n  3. If we conditionally render something with an ID ,  this might also\r\n     cause an ID mismatch because the ID will be different on other\r\n     parts of the page\r\n\r\nThis PR creates a new hook `useUniqueId` that generates a different\r\nunique ID based on whether the hook was called on the server or client.\r\nIf the hook is called during hydration, it generates an opaque object\r\nthat will rerender the hook so that the IDs match.\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "committedDate": "2020-04-07T00:17:27Z"
            },
            {
                "commitId": "c5d2fc7127654e43de59fff865b74765a103c4a5",
                "commitMessage": "\"Move some files out of /shared and rename to upper case (#18363)\n\n* Rename lower case isomorphic default exports modules to upper case named exports\r\n\r\nWere somewhat inconsistent here between e.g. ReactLazy and memo.\r\n\r\nLets pick one.\r\n\r\nThis also moves the responder, fundamental, scope creators from shared\r\nsince theyre isomorphic and same as the other creators.\r\n\r\n* Move some files that are specific to the react-reconciler from shared\r\n\r\nIndividual renderers are allowed to deep require into the reconciler.\r\n\r\n* Move files specific to react-dom from shared\r\n\r\nreact-interactions is right now dom specific (it wasnt before) so we can\r\ntype check it together with other dom stuff. Avoids the need for\r\na shared ReactDOMTypes to be checked by RN for example.\r\n\r\n* Move ReactWorkTags to the reconciler\r\n\r\n* Move createPortal to export from reconciler\r\n\r\nOtherwise Noop cant access it since its not allowed deep requires.\"",
                "committedDate": "2020-03-21T22:22:01Z"
            },
            {
                "commitId": "90f8fe6f5509cab7d6d280b4ed17181697f394e9",
                "commitMessage": "\"add jsx-runtime and jsx-dev-runtime (#18299)\n\nThis PR adds the jsx-runtime and jsx-dev-runtime modules for the JSX Babel Plugin. WWW still relies on jsx/jsxs/jsxDEV from the \"react\" module, so once we refactor the code to point to the runtime modules we will remove jsx/jsxs/jsxDEV from the \"react\" module.\"",
                "committedDate": "2020-03-17T20:22:19Z"
            },
            {
                "commitId": "322cdcd3abfaca985a001a12247f02c5d31d311e",
                "commitMessage": "\"useMutableSource hook (#18000)\n\nuseMutableSource hook\r\n\r\nuseMutableSource() enables React components to safely and efficiently read from a mutable external source in Concurrent Mode. The API will detect mutations that occur during a render to avoid tearing and it will automatically schedule updates when the source is mutated.\r\n\r\nRFC: reactjs/rfcs#147\"",
                "committedDate": "2020-03-11T19:34:39Z"
            },
            {
                "commitId": "d2158d6ccbcbd998d1cd1c06ac6c6682cbeafd04",
                "commitMessage": "\"Fix flow types (#18204)\n\n* Added missing @flow pragma to React.js\r\n\r\n* Fixed useContext() return type definition\r\n\r\n* Fixed previously masked Flow errors in DevTools and react-interactions packages\r\n\r\n* Added displayName to internal Context Flow type\r\n\r\n* Removed Flow generic annotations for createResponder\r\n\r\nThis seems to cause a parsing error. (Not sure why.) The API is deprecated anyway so Im being lazy for now and just adding a .\"",
                "committedDate": "2020-03-03T20:46:24Z"
            },
            {
                "commitId": "60016c448bb7d19fc989acd05dda5aca2e124381",
                "commitMessage": "\"Export React as Named Exports instead of CommonJS (#18106)\n\n* Add options for forked entry points\r\n\r\nWe currently fork .fb.js entry points. This adds a few more options.\r\n\r\n.modern.fb.js - experimental FB builds\r\n.classic.fb.js - stable FB builds\r\n.fb.js - if no other FB build, use this for FB builds\r\n.experimental.js - experimental builds\r\n.stable.js - stable builds\r\n.js - used if no other override exists\r\n\r\nThis will be used to have different ES exports for different builds.\r\n\r\n* Switch React to named exports\r\n\r\n* Export named exports from the export point itself\r\n\r\nWe need to re-export the Flow exported types so we can use them in our code.\r\n\r\nWe dont want to use the Flow types from upstream since it doesnt have the non-public APIs that we have.\r\n\r\nThis should be able to use export * but I dont know why it doesnt work.\r\n\r\nThis actually enables Flow typing of React which was just \"any\" before.\r\nThis exposed some Flow errors that needs fixing.\r\n\r\n* Create forks for the react entrypoint\r\n\r\nNone of our builds expose all exports and they all differ in at least one\r\nway, so we need four forks.\r\n\r\n* Set esModule flag to false\r\n\r\nWe dont want to emit the esModule compatibility flag on our CommonJS\r\noutput. For now we treat our named exports as if theyre CommonJS.\r\n\r\nThis is a potentially breaking change for scheduler (but all those apis\r\nare unstable), react-is and use-subscription. However, it seems unlikely\r\nthat anyone would rely on this since these only have named exports.\r\n\r\n* Remove unused Feature Flags\r\n\r\n* Let jest observe the stable fork for stable tests\r\n\r\nThis lets it do the negative test by ensuring that the right tests fail.\r\n\r\nHowever, this in turn will make other tests that are not behind\r\n__EXPERIMENTAL__ fail. So I need to do that next.\r\n\r\n* Put all tests that depend on exports behind __EXPERIMENTAL__\r\n\r\nSince theres no way to override the exports using feature flags\r\nin .intern.js anymore we cant use these APIs in stable.\r\n\r\nThe tradeoff here is that we can either enable the negative tests on\r\n\"stable\" that means experimental are expected to fail, or we can disable\r\ntests on stable. This is unfortunate since some of these APIs now run on\r\na \"stable\" config at FB instead of the experimental.\r\n\r\n* Switch ReactDOM to named exports\r\n\r\nSame strategy as React.\r\n\r\nI moved the ReactDOMFB runtime injection to classic.fb.js\r\n\r\nSince we only fork the entrypoint, the `/testing` entrypoint needs to\r\nbe forked too to re-export the same things plus `act`. This is a bit\r\nunfortunate. If it becomes a pattern we can consider forking in the\r\nmodule resolution deeply.\r\n\r\nfix flow\r\n\r\n* Fix ReactDOM Flow Types\r\n\r\nNow that ReactDOM is Flow type checked we need to fix up its types.\r\n\r\n* Configure jest to use stable entry for ReactDOM in non-experimental\r\n\r\n* Remove additional FeatureFlags that are no longer needed\r\n\r\nThese are only flagging the exports and no implementation details so we\r\ncan control them fully through the export overrides.\"",
                "committedDate": "2020-02-25T21:54:27Z"
            },
            {
                "commitId": "65bbda7f169394005252b46a5992ece5a2ffadad",
                "commitMessage": "\"Rename Chunks API to Blocks (#18086)\n\nSounds like this is the name were going with. This also helps us\r\ndistinguish it from other \"chunking\" implementation details.\"",
                "committedDate": "2020-02-21T07:56:40Z"
            },
            {
                "commitId": "a209a97ed742ced488d7edf4fc2dcbf316ba13cb",
                "commitMessage": "\"Add feature flag around React.createFactory (#17873)\"",
                "committedDate": "2020-01-20T15:00:18Z"
            },
            {
                "commitId": "7dc9745427046d462506e9788878ba389e176b8a",
                "commitMessage": "\"[Flight] Chunks API (#17398)\n\n* Add feature flags\r\n\r\n* Add Chunk type and constructor\r\n\r\n* Wire up Chunk support in the reconciler\r\n\r\n* Update reconciler to reconcile Chunks against the render method\r\n\r\nThis allows the query and args to be updated.\r\n\r\n* Drop the ref. Chunks cannot have refs anyway.\r\n\r\n* Add Chunk checks in more missing cases\r\n\r\n* Rename secondArg\r\n\r\n* Add test and fix lazy chunks\r\n\r\nNot really a supported use case but for consistency I guess.\r\n\r\n* Fix fragment test\"",
                "committedDate": "2019-12-18T18:25:43Z"
            },
            {
                "commitId": "9fe1031244903e442de179821f1d383a9f2a59f2",
                "commitMessage": "\"[react-interactions] Rename Flare APIs to deprecated and remove from RN (#17644)\"",
                "committedDate": "2019-12-18T10:24:46Z"
            },
            {
                "commitId": "c47f59331ee94b1d04f974f075373d368a8c8ab3",
                "commitMessage": "\"Move SuspenseList to experimental package (#17130)\n\nAlso moves `withSuspenseConfig`\"",
                "committedDate": "2019-10-18T21:24:13Z"
            },
            {
                "commitId": "685ed561f22ea062281a4c570c7067e6020457c4",
                "commitMessage": "\"Migrate useDeferredValue and useTransition (#17058)\n\nMigrated useDeferredValue and useTransition from Facebooks www repo into ReactFiberHooks.\"",
                "committedDate": "2019-10-18T19:48:43Z"
            },
            {
                "commitId": "bd79be9b687156067416ffe5219e49a11bd0f1e7",
                "commitMessage": "\"[react-core] Add experimental React Scope component API (#16587)\"",
                "committedDate": "2019-08-29T11:06:51Z"
            },
            {
                "commitId": "42794557ca44a8c05c71aab698d44d1294236538",
                "commitMessage": "\"[Flare] Tweaks to Flare system design and API (#16264)\"",
                "committedDate": "2019-08-01T18:08:54Z"
            },
            {
                "commitId": "509889119360ed83ca6ef3f83bcf01e5aa7dcd81",
                "commitMessage": "\"[Flare] Redesign core event system (#16163)\"",
                "committedDate": "2019-07-23T22:46:44Z"
            },
            {
                "commitId": "2c4d61e1022ae383dd11fe237f6df8451e6f0310",
                "commitMessage": "\"Adds experimental fundamental interface (#16049)\"",
                "committedDate": "2019-07-19T21:20:28Z"
            },
            {
                "commitId": "8d413bf2c3679befe8c6b56733b7c6f6e467ec07",
                "commitMessage": "\"Remove React.error and React.warn (#16126)\n\n* Remove React.error/React.warn with React.getComponentStack\"",
                "committedDate": "2019-07-12T22:41:47Z"
            },
            {
                "commitId": "9b0bd43550206e04bfe9ca695e5981eff0e2d03f",
                "commitMessage": "\"[Flare] Re-label Flare flag (#16014)\"",
                "committedDate": "2019-06-28T00:11:11Z"
            },
            {
                "commitId": "4f92fbce5cc409436ec7625ac08d3a709a4d8f31",
                "commitMessage": "\"[Flare] Move createEvent back to React object (#15943)\"",
                "committedDate": "2019-06-21T09:12:56Z"
            },
            {
                "commitId": "720db4cbe675e80820ec81abab499492309b9252",
                "commitMessage": "\"[Flare] Add useEvent hook implementation (#15927)\n\n* [Flare] Add useEvent hook implementation\r\n\r\nValidate hooks have decendent event components\r\n\r\nFew fixes and displayName changes\r\n\r\nFix more responder bugs\r\n\r\nUpdate error codes\r\n\r\n* Add another test\r\n\r\n* Address feedback\"",
                "committedDate": "2019-06-21T02:12:40Z"
            },
            {
                "commitId": "76864f7ff729f8293e8e772da7ad8416d7def6b3",
                "commitMessage": "\"Add SuspenseList Component (#15902)\n\n* Add SuspenseList component type\r\n\r\n* Push SuspenseContext for SuspenseList\r\n\r\n* Force Suspense boundaries into their fallback state\r\n\r\nIn the \"together\" mode, we do a second render pass that forces the\r\nfallbacks to stay in place, if not all can unsuspend at once.\r\n\r\n* Add test\r\n\r\n* Transfer thennables to the SuspenseList\r\n\r\nThis way, we end up retrying the SuspenseList in case the nested boundary\r\nthat just suspended doesnt actually get mounted with this set of\r\nthennables. This happens when the second pass renders the fallback\r\ndirectly without first attempting to render the content.\r\n\r\n* Add warning for unsupported displayOrder\r\n\r\n* Add tests for nested sibling boundaries and nested lists\r\n\r\n* Fix nested SuspenseList forwarding thennables\r\n\r\n* Rename displayOrder to revealOrder\r\n\r\nDisplay order has some \"display list\" connotations making it sound like\r\na z-index thing.\r\n\r\nReveal indicates that this isnt really about when something gets rendered\r\nor is ready to be rendered. Its about when content that is already there\r\ngets to be revealed.\r\n\r\n* Add test for avoided boundaries\r\n\r\n* Make SuspenseList a noop in legacy mode\r\n\r\n* Use an explicit suspense list state object\r\n\r\nThis will be used for more things in the directional case.\"",
                "committedDate": "2019-06-20T02:34:28Z"
            },
            {
                "commitId": "689beef6f5d0adab166f5eb0aac59eba6100677a",
                "commitMessage": "\"[Flare] Move unstable_createEventComponent to ReactDOM (#15890)\"",
                "committedDate": "2019-06-18T22:41:00Z"
            },
            {
                "commitId": "9c6de716d028f17736d0892d8a3d8f3ac2cb62bd",
                "commitMessage": "\"Add withSuspenseConfig API (#15593)\n\n* Add suspendIfNeeded API and a global scope to track it\r\n\r\nAdds a \"current\" suspense config that gets applied to all updates scheduled\r\nduring the current scope.\r\n\r\nI suspect we might want to add other types of configurations to the \"batch\"\r\nso I called it the \"batch config\".\r\n\r\nThis works across renderers/roots but they wont actually necessarily go\r\ninto the same batch.\r\n\r\n* Add the suspenseConfig to all updates created during this scope\r\n\r\n* Compute expiration time based on the timeout of the suspense config\r\n\r\n* Track if there was a processed suspenseConfig this render pass\r\n\r\nWell use this info to suspend a commit for longer when necessary.\r\n\r\n* Mark suspended states that should be avoided as a separate flag\r\n\r\nThis lets us track which renders we want to suspend for a short time vs\r\na longer time if possible.\r\n\r\n* Suspend until the full expiration time if something asked to suspend\r\n\r\n* Reenable an old test that we can now repro again\r\n\r\n* Suspend the commit even if it is complete if there is a minimum delay\r\n\r\nThis can be used to implement spinners that dont flicker if the data\r\nand rendering is really fast.\r\n\r\n* Default timeoutMs to low pri expiration if not provided\r\n\r\nThis is a required argument in the type signature but people may not\r\nsupply it and this is a user facing object.\r\n\r\n* Rename to withSuspenseConfig and drop the default config\r\n\r\nThis allow opting out of suspending in some nested scope.\r\n\r\nA lot of time when you use this function youll use it with high level\r\nhelpers. Those helpers often want to accept some additional configuration\r\nfor suspense and if it should suspend at all. The easiest way is to just\r\nhave the api accept null or a suspense config and pass it through. However,\r\nthen you have to remember that calling suspendIfNeeded has a default.\r\n\r\nIt gets simpler by just saying tat you can pass the config. You can have\r\nyour own default in user space.\r\n\r\n* Track the largest suspense config expiration separately\r\n\r\nThis ensures that if weve scheduled lower pri work that doesnt have a\r\nsuspenseConfig, we dont consider its expiration as the timeout.\r\n\r\n* Add basic tests for functionality using each update mechanism\r\n\r\n* Fix issue when newly created avoided boundary doesnt suspend with delay\r\n\r\n* Add test for loading indicator with minLoadingDurationMs option\"",
                "committedDate": "2019-05-16T23:51:18Z"
            },
            {
                "commitId": "83fc258f2914c1a7c14c7b98ee362934576f266b",
                "commitMessage": "\"Remove <ConcurrentMode /> (#15532)\n\nUse createSyncRoot instead.\"",
                "committedDate": "2019-05-13T23:10:00Z"
            },
            {
                "commitId": "89d8d1435ffc61fd5201636a84c53806130ef4b8",
                "commitMessage": "\"Add React.unstable_createEventComponent (#15580)\n\nAPI for creating event components from event responders.\"",
                "committedDate": "2019-05-07T19:36:42Z"
            },
            {
                "commitId": "745baf2e061bdb7a07b511fa6fd8c1c5e8106313",
                "commitMessage": "\"Provide new jsx transform target for reactjs/rfcs#107 (#15141)\n\n* adding jsx function\r\n\r\n* add more feature flag defaults\r\n\r\n* flip ReactElement order back\"",
                "committedDate": "2019-04-07T19:02:34Z"
            },
            {
                "commitId": "f161ee2eb7e78d6cb3d3878fe1812ac1057fedc6",
                "commitMessage": "\"React.warn() and React.error() (#15170)\"",
                "committedDate": "2019-03-21T21:44:08Z"
            },
            {
                "commitId": "56035dac645af75c1a8aa8deba2bcf89b14a5aa4",
                "commitMessage": "\"unstable_Profiler -> Profiler (#15172)\"",
                "committedDate": "2019-03-21T16:18:34Z"
            },
            {
                "commitId": "6cb26774e27e03c7d5d6e4601bcee979a004fe91",
                "commitMessage": "\"Enable hooks! (#14679)\n\n* Turned enableHooks feature flag on everywhere\r\n* Removed useHooks feature flag from tests (now that its on by default)\r\n* Remove useHooks feature flag entirely\"",
                "committedDate": "2019-01-23T21:28:09Z"
            },
            {
                "commitId": "edb1f595649b013a59a18f43c03a57035ddea19e",
                "commitMessage": "\"Support configurable labels for custom hooks (#14559)\n\n* react-debug-tools accepts currentDispatcher ref as param\r\n\r\n* ReactDebugHooks injected dispatcher ref is optional\r\n\r\n* Support custom values for custom hooks\r\n\r\n* PR feedback:\r\n\r\n1. Renamed useDebugValueLabel hook to useDebugValue\r\n2. Wrapped useDebugValue internals in if-DEV so that it could be removed from production builds.\r\n\r\n* PR feedback:\r\n\r\n1. Fixed some minor typos\r\n2. Added inline comment explaining the purpose of  rollupDebugValues()\r\n3. Refactored rollupDebugValues() to use a for loop rather than filter()\r\n4. Improve check for useDebugValue hook to lessen the chance of a false positive\r\n5. Added optional formatter function param to useDebugValue\r\n\r\n* Nitpick renamed a method\"",
                "committedDate": "2019-01-14T22:53:22Z"
            },
            {
                "commitId": "b4ad8e947150a1a0b486a388e2d4762d3eee51ee",
                "commitMessage": "\"rename useImperativeMethods -> useImperativeHandle (#14565)\"",
                "committedDate": "2019-01-10T13:37:50Z"
            },
            {
                "commitId": "c2a2d8a539bf02e40c43d36adc2826e228f30955",
                "commitMessage": "\"Remove useMutationEffect (#14336)\n\nuseMutationEffect has problems (namely, refs arent attached at the time that it runs) and were not positive its necessary. useLayoutEffect runs at the same time as componentDidMount/Update so its sufficient for all existing use cases; it can be used in any case that useEffect happens too late. Until we figure out what we want to do, lets delete it.\"",
                "committedDate": "2018-11-27T21:05:13Z"
            },
            {
                "commitId": "7475120ce7bdeb7a5666d64c636efb1f4a951b9a",
                "commitMessage": "\"Prevent deopts from modifying exports object in stable builds (#14309)\"",
                "committedDate": "2018-11-23T14:10:57Z"
            },
            {
                "commitId": "5fc84efacce66272928815e8a6c83a341af9160e",
                "commitMessage": "\"Skip updating effect tag when skipping effect\n\nFor example, if you have `useEffect(..., [])`, theres no need to set .effectTag to `Update | Passive` on updates.\"",
                "committedDate": "2018-10-29T18:26:54Z"
            },
            {
                "commitId": "11d0781eea7dfa65e0ea9e54d18ff937122f9524",
                "commitMessage": "\"Defer useEffect until after paint\n\nEffects scheduled by useEffect should not fire until after the browser\nhas had a chance to paint. However, they should be fired before any\nsubsequent mutations.\n\nAlso adds useMutationEffect and useLayoutEffect. useMutationEffect fires\nduring the host update phase. useLayoutEffect fires during the post-\nupdate phase (the same phase as componentDidMount\nand componentDidUpdate).\"",
                "committedDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "105f2de545dc9e374ed4ac55b3628eeeb555f4a6",
                "commitMessage": "\"Put hooks behind feature flag\"",
                "committedDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "7bee9fbdd49aa5b9365a94b0ddf6db04bc1bf51c",
                "commitMessage": "\"Initial hooks implementation\n\nIncludes:\n- useState\n- useContext\n- useEffect\n- useRef\n- useReducer\n- useCallback\n- useMemo\n- useAPI\"",
                "committedDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "275e76e83bc2be5dc0be9185ff747f383969289a",
                "commitMessage": "\"Enable stable concurrent APIs flag for 16.7 alpha (#13928)\n\n* Add enableStableConcurrentModeAPIs feature flag\r\n\r\n* Conditionally name concurrent API based on enableStableConcurrentModeAPIs flag\"",
                "committedDate": "2018-10-24T20:45:07Z"
            },
            {
                "commitId": "d75c69e0cf2a842adc47edab87ca5103411e6949",
                "commitMessage": "\"Remove unstable_ prefix from Suspense (#13922)\n\nWe are using it with lazy and the combination Suspense + lazy seems pretty\r\nstable. maxDuration is not but thats only enabled when youre in\r\nConcurrentMode which is still unstable.\"",
                "committedDate": "2018-10-23T05:40:05Z"
            },
            {
                "commitId": "769b1f270e1251d9dbdce0fcbd9e92e502d059b8",
                "commitMessage": "\"pure -> memo (#13905)\"",
                "committedDate": "2018-10-20T16:46:23Z"
            },
            {
                "commitId": "8af6728c6f105d37f9c0006288a6d1ac3903dc71",
                "commitMessage": "\"Enable Suspense + rename Placeholder (#13799)\n\n* Enable Suspense\r\n\r\n* <unstable_Placeholder delayMs> => <unstable_Suspense maxDuration>\r\n\r\n* Update suspense fixture\"",
                "committedDate": "2018-10-10T16:02:04Z"
            },
            {
                "commitId": "a0733fe13d598303f45b9d27c84ce0ec40d09021",
                "commitMessage": "\"pure (#13748)\n\n* pure\r\n\r\nA higher-order component version of the `React.PureComponent` class.\r\nDuring an update, the previous props are compared to the new props. If\r\nthey are the same, React will skip rendering the component and\r\nits children.\r\n\r\nUnlike userspace implementations, `pure` will not add an additional\r\nfiber to the tree.\r\n\r\nThe first argument must be a functional component; it does not work\r\nwith classes.\r\n\r\n`pure` uses shallow comparison by default, like `React.PureComponent`.\r\nA custom comparison can be passed as the second argument.\r\n\r\nCo-authored-by: Andrew Clark <acdlite@fb.com>\r\nCo-authored-by: Sophie Alpert <sophiebits@fb.com>\r\n\r\n* Warn if first argument is not a functional component\"",
                "committedDate": "2018-09-27T22:25:38Z"
            },
            {
                "commitId": "0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74",
                "commitMessage": "\"Rename AsyncMode -> ConcurrentMode (#13732)\n\n* Rename AsyncMode -> ConcurrentMode\"",
                "committedDate": "2018-09-26T16:13:02Z"
            },
            {
                "commitId": "fe959eea731b4de0c970f753dfa9d0f6b010b63d",
                "commitMessage": "\"React.lazy (#13398)\n\nLazily starts loading a component the first time its rendered. The\r\nimplementation is fairly simple and could be left to userspace, but since\r\nthis is an important use case, theres value in standardization.\"",
                "committedDate": "2018-08-16T16:43:32Z"
            },
            {
                "commitId": "659a29cecf74301532354261369e9048aac6e20f",
                "commitMessage": "\"Reorganize how shared internals are accessed (#13201)\n\n* Reorganize how shared internals are accessed\r\n\r\n* Update forks.js\"",
                "committedDate": "2018-07-13T01:45:37Z"
            },
            {
                "commitId": "88d7ed8bfbccd860c3e309da39d356d0a3127aa7",
                "commitMessage": "\"React.Timeout -> React.Placeholder (#13105)\n\nChanged the API to match what weve been using in our latest discussions.\r\n\r\nOur tentative plans are for <Placeholder> to automatically hide the timed-out\r\nchildren, instead of removing them, so their state is not lost. This part is\r\nnot yet implemented. Well likely have a lower level API that does not include\r\nthe hiding behavior. This is also not yet implemented.\"",
                "committedDate": "2018-07-04T02:47:00Z"
            },
            {
                "commitId": "d6f304e88952b895a9e1c69483081d2d9ef56979",
                "commitMessage": "\"Remove Timeout export on React object unless enableSuspense flag (#12833)\"",
                "committedDate": "2018-05-16T21:02:34Z"
            },
            {
                "commitId": "6565795377d1d2c79a7708766f1af9e1a87517de",
                "commitMessage": "\"Suspense (#12279)\n\n* Timeout component\r\n\r\nAdds Timeout component. If a promise is thrown from inside a Timeout component,\r\nReact will suspend the in-progress render from committing. When the promise\r\nresolves, React will retry. If the render is suspended for longer than the\r\nmaximum threshold, the Timeout switches to a placeholder state.\r\n\r\nThe timeout threshold is defined as the minimum of:\r\n- The expiration time of the current render\r\n- The `ms` prop given to each Timeout component in the ancestor path of the\r\nthrown promise.\r\n\r\n* Add a test for nested fallbacks\r\n\r\nCo-authored-by: Andrew Clark <acdlite@fb.com>\r\n\r\n* Resume on promise rejection\r\n\r\nReact should resume rendering regardless of whether it resolves\r\nor rejects.\r\n\r\n* Wrap Suspense code in feature flag\r\n\r\n* Children of a Timeout must be strict mode compatible\r\n\r\nAsync is not required for Suspense, but strict mode is.\r\n\r\n* Simplify list of pending work\r\n\r\nSome of this was added with \"soft expiration\" in mind, but now with our revised\r\nmodel for how soft expiration will work, this isnt necessary.\r\n\r\nIt would be nice to remove more of this, but I think the list itself is inherent\r\nbecause we need a way to track the start times, for <Timeout ms={ms} />.\r\n\r\n* Only use the Timeout update queue to store promises, not for state\r\n\r\nIt already worked this way in practice.\r\n\r\n* Wrap more Suspense-only paths in the feature flag\r\n\r\n* Attach promise listener immediately on suspend\r\n\r\nInstead of waiting for commit phase.\r\n\r\n* Infer approximate start time using expiration time\r\n\r\n* Remove list of pending priority levels\r\n\r\nWe can replicate almost all the functionality by tracking just five\r\nseparate levels: the highest/lowest priority pending levels, the\r\nhighest/lowest priority suspended levels, and the lowest pinged level.\r\n\r\nWe lose a bit of granularity, in that if there are multiple levels of\r\npending updates, only the first and last ones are known. But in practice\r\nthis likely isnt a big deal.\r\n\r\nThese heuristics are almost entirely isolated to a single module and\r\ncan be adjusted later, without API changes, if necessary.\r\n\r\nNon-IO-bound work is not affected at all.\r\n\r\n* ReactFiberPendingWork -> ReactFiberPendingPriority\r\n\r\n* Renaming method names from \"pending work\" to \"pending priority\"\r\n\r\n* Get rid of SuspenseThenable module\r\n\r\nIdk why I thought this was neccessary\r\n\r\n* Nits based on Sebastians feedback\r\n\r\n* More naming nits + comments\r\n\r\n* Add test for hiding a suspended tree to unblock\r\n\r\n* Revert change to expiration time rounding\r\n\r\nThis means you have to account for the start time approximation\r\nheuristic when writing Suspense tests, but thats going to be\r\ntrue regardless.\r\n\r\nWhen updating the tests, I also made a fix related to offscreen\r\npriority. We should never timeout inside a hidden tree.\r\n\r\n* palceholder -> placeholder\"",
                "committedDate": "2018-05-11T01:09:10Z"
            },
            {
                "commitId": "fc3777b1fe295fd2661f1974f5587d214791f04b",
                "commitMessage": "\"Add Profiler component for collecting new render timing info (#12745)\n\nAdd a new component type, Profiler, that can be used to collect new render time metrics. Since this is a new, experimental API, it will be exported as React.unstable_Profiler initially.\r\n\r\nMost of the functionality for this component has been added behind a feature flag, enableProfileModeMetrics. When the feature flag is disabled, the component will just render its children with no additional behavior. When the flag is enabled, React will also collect timing information and pass it to the onRender function (as described below).\"",
                "committedDate": "2018-05-10T22:25:32Z"
            },
            {
                "commitId": "bc70441c8b3fa85338283af3eeb47b5d15e9dbfe",
                "commitMessage": "\"RFC #30: React.forwardRef implementation (#12346)\n\nAdded React.forwardRef support to react-reconciler based renders and the SSR partial renderer.\"",
                "committedDate": "2018-03-14T20:07:58Z"
            },
            {
                "commitId": "29e8924c70856bef9b11e0c74a450140bfcce773",
                "commitMessage": "\"Move ReactContext source to React package (#12205)\"",
                "committedDate": "2018-02-10T16:41:33Z"
            },
            {
                "commitId": "8dc8f88d5ae9fb96934ba43e3842b5dcf4074afd",
                "commitMessage": "\"Adds createRef() as per RFC (#12162)\n\n* Adds createRef() as per RFC\"",
                "committedDate": "2018-02-06T20:19:49Z"
            },
            {
                "commitId": "28aa084ad84a681be1c45def2f4b4c0dd8a43871",
                "commitMessage": "\"Switch to JSX API for context (#12123)\n\n* Switch to JSX API for context\r\n\r\n80% sure this will be the final API. Merging this now so we can get this\r\ninto the next www sync in preparation for 16.3.\r\n\r\n* Promote context to a stable API\"",
                "committedDate": "2018-01-30T21:06:12Z"
            },
            {
                "commitId": "9ea55516e674c2de63b9f7829e3c459f3cb3cf78",
                "commitMessage": "\"Replace unstable_AsyncComponent with unstable_AsyncMode (#12117)\n\n* Replace unstable_AsyncComponent with Unstable_AsyncMode\r\n\r\nMirrors the StrictMode API and uses the new Mode type of work.\r\n\r\n* internalContextTag -> mode\r\n\r\nChange this now that we have a better name\r\n\r\n* Unstable_ -> unstable_\"",
                "committedDate": "2018-01-30T03:11:59Z"
            },
            {
                "commitId": "87ae211ccd8d61796cfdef138d1e12fb7a74f85d",
                "commitMessage": "\"New context API (#11818)\n\n* New context API\r\n\r\nIntroduces a declarative context API that propagates updates even when\r\nshouldComponentUpdate returns false.\r\n\r\n* Fuzz tester for context\r\n\r\n* Use ReactElement for provider and consumer children\r\n\r\n* Unify more branches in createFiberFromElement\r\n\r\n* Compare context values using Object.is\r\n\r\nSame semantics as PureComponent/shallowEqual.\r\n\r\n* Add support for Provider and Consumer to server-side renderer\r\n\r\n* Store providers on global stack\r\n\r\nRather than using a linked list stored on the context type. The global\r\nstack can be reset in case of an interruption or error, whereas with the\r\nlinked list implementation, youd need to keep track of every\r\ncontext type.\r\n\r\n* Put new context API behind a feature flag\r\n\r\nWell enable this in www only for now.\r\n\r\n* Store nearest provider on context object\r\n\r\n* Handle reentrancy in server renderer\r\n\r\nContext stack should be per server renderer instance.\r\n\r\n* Bailout of consumer updates using bitmask\r\n\r\nThe context type defines an optional function that compares two context\r\nvalues, returning a bitfield. A consumer may specify the bits it needs\r\nfor rendering. If a providers context changes, and the consumers bits\r\ndo not intersect with the changed bits, we can skip the consumer.\r\n\r\nThis is similar to how selectors are used in Redux but fast enough to do\r\nwhile scanning the tree. The only user code involved is the function\r\nthat computes the changed bits. But thats only called once per provider\r\nupdate, not for every consumer.\r\n\r\n* Store current value and changed bits on context object\r\n\r\nThere are fewer providers than consumers, so better to do this work\r\nat the provider.\r\n\r\n* Use maximum of 31 bits for bitmask\r\n\r\nThis is the largest integer size in V8 on 32-bit systems. Warn in\r\ndevelopment if too large a number is used.\r\n\r\n* ProviderComponent -> ContextProvider, ConsumerComponent -> ContextConsumer\r\n\r\n* Inline Object.is\r\n\r\n* Warn if multiple renderers concurrently render the same context provider\r\n\r\nLets see if we can get away with not supporting this for now. If it\r\nturns out that its needed, we can fall back to backtracking the\r\nfiber return path.\r\n\r\n* Nits that came up during review\"",
                "committedDate": "2018-01-25T03:36:22Z"
            },
            {
                "commitId": "be51e6a41c096f33acf92a693026b80c98e7ddeb",
                "commitMessage": "\"Opt into unsafe lifecycle warnings without async tree (#12083)\n\nAdded new StrictMode component for enabling async warnings (without enabling async rendering). This component can be used in the future to help with other warnings (eg compilation, Fabric).\"",
                "committedDate": "2018-01-25T01:49:43Z"
            },
            {
                "commitId": "3c977dea6b96f6a9bb39f09886848da870748441",
                "commitMessage": "\"react: convert var to let/const (#11715)\"",
                "committedDate": "2017-11-30T12:08:58Z"
            },
            {
                "commitId": "f6894dc48be2e389ffae03cea736122a971e3f76",
                "commitMessage": "\"Set fragment export flags to true (#11672)\"",
                "committedDate": "2017-11-27T21:09:15Z"
            },
            {
                "commitId": "1cb6199d22af6f6ba2f55e4db18ed2f4216aaaf2",
                "commitMessage": "\" Consolidate all symbols in a single file (#11629)\n\n* Consolidate all symbols in a single file\r\n\r\nThis reduces the code duplication as we have quite a few now.\r\n\r\n* Record sizes\"",
                "committedDate": "2017-11-22T18:08:22Z"
            },
            {
                "commitId": "46f7b0d9451c2ac6f5ec5efd2c12ba77a4e054d9",
                "commitMessage": "\"Fix dead code elimination for feature flags (#11453)\n\n* Fix dead code elimination for feature flags\r\n\r\nTurning flags into named exports fixes dead code elimination.\r\n\r\nThis required some restructuring of how we verify that flag types match up. I used the Check<> trick combined with import typeof, as suggested by @calebmer.\r\n\r\nFor www, we can no longer re-export `require(ReactFeatureFlags)` directly, and instead destructure it. This means flags have to be known at init time. This is already the case so its not a problem. In fact it may be better since it removes extra property access in tight paths.\r\n\r\nFor things that we *want* to be dynamic on www (currently, only performance flag) we can export a function to toggle it, and then put it on the secret exports. In fact this is better than just letting everyone mutate the flag at arbitrary times since we can provide, e.g., a ref counting interface to it.\r\n\r\n* Record sizes\"",
                "committedDate": "2017-11-06T14:14:48Z"
            },
            {
                "commitId": "45c1ff348e1c7d03567f5bba6cb32cffa9222972",
                "commitMessage": "\"Remove unnecessary use strict in the source (#11433)\n\n* Remove use strict from ES modules\r\n\r\n* Delete unused file\r\n\r\nThis was unused since Stack.\"",
                "committedDate": "2017-11-02T20:32:48Z"
            },
            {
                "commitId": "21d0c115238b4f38837020cf83e0c657d8c01c9f",
                "commitMessage": "\"Convert the Source to ES Modules (#11389)\n\n* Update transforms to handle ES modules\r\n\r\n* Update Jest to handle ES modules\r\n\r\n* Convert react package to ES modules\r\n\r\n* Convert react-art package to ES Modules\r\n\r\n* Convert react-call-return package to ES Modules\r\n\r\n* Convert react-test-renderer package to ES Modules\r\n\r\n* Convert react-cs-renderer package to ES Modules\r\n\r\n* Convert react-rt-renderer package to ES Modules\r\n\r\n* Convert react-noop-renderer package to ES Modules\r\n\r\n* Convert react-dom/server to ES modules\r\n\r\n* Convert react-dom/{client,events,test-utils} to ES modules\r\n\r\n* Convert react-dom/shared to ES modules\r\n\r\n* Convert react-native-renderer to ES modules\r\n\r\n* Convert react-reconciler to ES modules\r\n\r\n* Convert events to ES modules\r\n\r\n* Convert shared to ES modules\r\n\r\n* Remove CommonJS support from transforms\r\n\r\n* Move ReactDOMFB entry point code into react-dom/src\r\n\r\nThis is clearer because we can use ES imports in it.\r\n\r\n* Fix Rollup shim configuration to work with ESM\r\n\r\n* Fix incorrect comment\r\n\r\n* Exclude external imports without side effects\r\n\r\n* Fix ReactDOM FB build\r\n\r\n* Remove TODOs I don\u2019t intend to fix yet\"",
                "committedDate": "2017-11-02T19:50:03Z"
            },
            {
                "commitId": "0e15ff5669271f5f5956e30a4fe1ae5963778e89",
                "commitMessage": "\"Put React.Fragment under a feature flag (#11421)\n\n* Put React.Fragment under a feature flag\r\n\r\n* Dont export undefined Fragment\"",
                "committedDate": "2017-11-01T00:43:55Z"
            },
            {
                "commitId": "4ce5da7aee90a373f2f36d1beb559097af30952e",
                "commitMessage": "\"Add Fragment as a named export to React (#10783)\n\n* Add Fragment as a named export to React\r\n\r\n* Remove extra tests for Fragment\r\n\r\n* Change React.Fragment export to be a string #fragment\r\n\r\n* Fix fragment special case to work with 1 child\r\n\r\n* Add single child test for fragment export\r\n\r\n* Move fragment definition to ReactEntry.js and render components for key warning tests\r\n\r\n* Inline createFiberFromElementType into createFiberFromElement\r\n\r\n* Update reconciliation to special case fragments\r\n\r\n* Use same semantics as implicit childsets for ReactFragment\r\n\r\n* Add more fragment state preservation tests\r\n\r\n* Export symbol instead of string for fragments\r\n\r\n* Fix rebase breakages\r\n\r\n* Re-apply prettier at 1.2.2\r\n\r\n* Merge branches in updateElement\r\n\r\n* Remove unnecessary check\r\n\r\n* Re-use createFiberFromFragment for fragment case\r\n\r\n* Simplyify branches by adding type field to fragment fiber\r\n\r\n* Move branching logic for fragments to broader methods when possible.\r\n\r\n* Add more tests for fragments\r\n\r\n* Address Dans feedback\r\n\r\n* Move REACT_FRAGMENT_TYPE into __DEV__ block for DCE\r\n\r\n* Change hex representation of REACT_FRAGMENT_TYPE to follow convention\r\n\r\n* Remove unnecessary branching and isArray checks\r\n\r\n* Update test for preserving children state when keys are same\r\n\r\n* Fix updateSlot bug and add more tests\r\n\r\n* Make fragment tests more robust by using ops pattern\r\n\r\n* Update jsx element validator to allow numbers and symbols\r\n\r\n* Remove type field from fragment fiber\r\n\r\n* Fork reconcileChildFibers instead of recursing\r\n\r\n* Use ternary if condition\r\n\r\n* Revamp fragment test suite:\r\n\r\n- Add more coverage to fragment tests\r\n- Use better names\r\n- Remove useless Fragment component inside tests\r\n- Remove useless tests so that tests are more concise\r\n\r\n* Check output of renderer in fragment tests to ensure no silly business despite states being preserved\r\n\r\n* Finish implementation of fragment reconciliation with desired behavior\r\n\r\n* Add reverse render direction for fragment tests\r\n\r\n* Remove unneeded fragment branch in updateElement\r\n\r\n* Add more test cases for ReactFragment\r\n\r\n* Handle childless fragment in reconciler\r\n\r\n* Support fragment flattening in SSR\r\n\r\n* Clean up ReactPartialRenderer\r\n\r\n* Warn when non-key and children props are passed to fragments\r\n\r\n* Add non-null key check back to updateSlots arrays case\r\n\r\n* Add test for positional reconciliation in fragments\r\n\r\n* Add warning for refs in fragments with stack trace\"",
                "committedDate": "2017-10-31T00:52:40Z"
            },
            {
                "commitId": "cc54b6f48a532bf2073e8f7d888c6a3fcf416b63",
                "commitMessage": "\"Add a shim for React 16.0.0 future compatibility (#11388)\"",
                "committedDate": "2017-10-27T16:38:59Z"
            },
            {
                "commitId": "087c48bb36b88ef0b5bbca2b9b70a52d8d413102",
                "commitMessage": "\"Reorder imports (#11359)\n\n* Reorder imports\r\n\r\n* Record sizes\"",
                "committedDate": "2017-10-25T18:07:54Z"
            },
            {
                "commitId": "1eed302d346bfb8f5db8d88b0e7096d8999d3548",
                "commitMessage": "\"Drop Haste (#11303)\n\n* Use relative paths in packages/react\r\n\r\n* Use relative paths in packages/react-art\r\n\r\n* Use relative paths in packages/react-cs\r\n\r\n* Use relative paths in other packages\r\n\r\n* Fix as many issues as I can\r\n\r\nThis uncovered an interesting problem where ./b from package/src/a would resolve to a different instantiation of package/src/b in Jest.\r\n\r\nEither this is a showstopper or we can solve it by completely fobbidding remaining /src/.\r\n\r\n* Fix all tests\r\n\r\nIt seems we cant use relative requires in tests anymore. Otherwise Jest becomes confused between real file and symlink.\r\nhttps://github.com/facebook/jest/issues/3830\r\n\r\nThis seems bad... Except that we already *dont* want people to create tests that import individual source files.\r\nAll existing cases of us doing so are actually TODOs waiting to be fixed.\r\n\r\nSo perhaps this requirement isnt too bad because it makes bad code looks bad.\r\n\r\nOf course, if we go with this, well have to lint against relative requires in tests.\r\nIt also makes moving things more painful.\r\n\r\n* Prettier\r\n\r\n* Remove @providesModule\r\n\r\n* Fix remaining Haste imports I missed earlier\r\n\r\n* Fix up paths to reflect new flat structure\r\n\r\n* Fix Flow\r\n\r\n* Fix CJS and UMD builds\r\n\r\n* Fix FB bundles\r\n\r\n* Fix RN bundles\r\n\r\n* Prettier\r\n\r\n* Fix lint\r\n\r\n* Fix warning printing and error codes\r\n\r\n* Fix buggy return\r\n\r\n* Fix lint and Flow\r\n\r\n* Use Yarn on CI\r\n\r\n* Unbreak Jest\r\n\r\n* Fix lint\r\n\r\n* Fix aliased originals getting included in DEV\r\n\r\nShouldnt affect correctness (they were ignored) but fixes DEV size regression.\r\n\r\n* Record sizes\r\n\r\n* Fix weird version in package.json\r\n\r\n* Tweak bundle labels\r\n\r\n* Get rid of output option by introducing react-dom/server.node\r\n\r\n* Reconciler should depend on prop-types\r\n\r\n* Update sizes last time\"",
                "committedDate": "2017-10-24T23:55:00Z"
            },
            {
                "commitId": "313611572b6567d229367ed20ff63d1bca8610bb",
                "commitMessage": "\"Reorganize code structure (#11288)\n\n* Move files and tests to more meaningful places\r\n\r\n* Fix the build\r\n\r\nNow that we import reconciler via react-reconciler, I needed to make a few tweaks.\r\n\r\n* Update sizes\r\n\r\n* Move @preventMunge directive to FB header\r\n\r\n* Revert unintentional change\r\n\r\n* Fix Flow coverage\r\n\r\nI forgot to @flow-ify those files. This uncovered some issues.\r\n\r\n* Prettier, I love you but youre bringing me down\r\nPrettier, I love you but youre bringing me down\r\n\r\nLike a rat in a cage\r\nPulling minimum wage\r\nPrettier, I love you but youre bringing me down\r\n\r\nPrettier, youre safer and youre wasting my time\r\nOur records all show you were filthy but fine\r\nBut they shuttered your stores\r\nWhen you opened the doors\r\nTo the cops who were bored once theyd run out of crime\r\n\r\nPrettier, youre perfect, oh, please dont change a thing\r\nYour mild billionaire mayors now convinced hes a king\r\nSo the boring collect\r\nI mean all disrespect\r\nIn the neighborhood bars Id once dreamt I would drink\r\n\r\nPrettier, I love you but youre freaking me out\r\nTheres a ton of the twist but were fresh out of shout\r\nLike a death in the hall\r\nThat you hear through your wall\r\nPrettier, I love you but youre freaking me out\r\n\r\nPrettier, I love you but youre bringing me down\r\nPrettier, I love you but youre bringing me down\r\nLike a death of the heart\r\nJesus, where do I start?\r\nBut youre still the one pool where Id happily drown\r\n\r\nAnd oh! Take me off your mailing list\r\nFor kids who think it still exists\r\nYes, for those who think it still exists\r\nMaybe Im wrong and maybe youre right\r\nMaybe Im wrong and maybe youre right\r\nMaybe youre right, maybe Im wrong\r\nAnd just maybe youre right\r\n\r\nAnd oh! Maybe mother told you true\r\nAnd therell always be somebody there for you\r\nAnd youll never be alone\r\nBut maybe shes wrong and maybe Im right\r\nAnd just maybe shes wrong\r\nMaybe shes wrong and maybe Im right\r\nAnd if so, heres this song!\"",
                "committedDate": "2017-10-19T18:50:24Z"
            },
            {
                "commitId": "fedb2ff8ecd96d11ff3f609fbffa76848203f255",
                "commitMessage": "\"Remove createClass, PropTypes, DOM factories, and createMixin from React object (#9788)\"",
                "committedDate": "2017-05-30T14:35:30Z"
            },
            {
                "commitId": "964c263d8fc6e7119f5773f7fa857c9985db40cf",
                "commitMessage": "\"Downgrade deprecation warnings from errors to warnings (#9650)\n\n* Initial regeneration of results.json\r\n\r\n**what is the change?:**\r\nWe ran `yarn build` and updated the perf. stats record.\r\n\r\n**why make this change?:**\r\nSome commits have landed without updating this. By getting an initial update, I can run the build script again after my changes and see any size regressions.\r\n\r\n* Downgrade deprecation warnings from errors to warnings\r\n\r\n**what is the change?:**\r\nSwapping out `warning` module for a fork that uses `console.warn`.\r\nIt looks like we were using the `warning` module for deprecation notices, *but* there is also a deprecated module designed specifically for deprecation notices.\r\n\r\nHowever, we could not find any place that it was currently used.\r\n\r\nSince Reacts build process is not 100% clear to me, I assume it could still be used somewhere by something and just updated it along with other deprecation notices.\r\n\r\nWe might consider a follow-up diff that does some clean up here;\r\n - remove deprecated module if its unused, OR\r\n - use deprecated module for all our current deprecation warnings\r\n\r\n**why make this change?:**\r\n- We have had complaints about noisy warnings, in particular after introducing new deprecations\r\n- They potentially cause CI failures\r\n- Deprecations are not really time-sensitive, can ship without breaking your app, etc.\r\n\r\nFor more context - https://github.com/facebook/react/issues/9395\r\n\r\n**test plan:**\r\n`npm run test`\r\nand unit tests for the new modules\r\nand manual testing (WIP)\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9395\r\n\r\n* Add lowPriorityWarning to ReactExternals\r\n\r\n**what is the change?:**\r\nWe wont bundle lowPriorityWarning with the rest of React when building for Facebook.\r\nNOTE: A parallel commit will introduce an internal implementation of lowPriorityWarning in Facebooks codebase, to compensate. Will post a comment with the diff number once that is up.\r\n\r\n**why make this change?:**\r\nSo that the sync between github and Facebook can go more smoothly!\r\n\r\n**test plan:**\r\nWe will see when I run the sync! But this is a reasonable first step imo.\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9398\r\n\r\n* Make state mutations an error, not low-pri warning\r\n\r\n**what is the change?:**\r\nEven though this is a \"deprecation\" warning, we still want to use console.error for it.\r\n\r\n**why make this change?:**\r\n- Its not likely to come up now, hopefully, because this warning has been present for some time\r\n- This will cause real issues in production if ignored\r\n\r\n**test plan:**\r\n`yarn test` - we did fix one test which failed bc of this change\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9398\r\n\r\n* Fix test of assigning to this.state that was only passing in fiber\r\n\r\n**what is the change?:**\r\nupdated a unit test for assigning directly to state; it once again raises an error and not a warning.\r\n\r\n**why make this change?:**\r\nSo that tests pass\r\n\r\n**test plan:**\r\n REACT_DOM_JEST_USE_FIBER=1 yarn run test\r\n\r\n**issue:**\r\n\r\n* Update results.json\"",
                "committedDate": "2017-05-23T16:35:42Z"
            },
            {
                "commitId": "e71b3087c81d95c3e7d3f015d0db60436c95fe6c",
                "commitMessage": "\"Added stack renderer to react-test-renderer bundle temporarily (#9514)\n\nAlso fixed an error in a temporary export property that had been added to the React object\"",
                "committedDate": "2017-04-25T01:45:43Z"
            },
            {
                "commitId": "86dd083f455f71369b4c1bf1e798dd2fd5a3c9c4",
                "commitMessage": "\"Move ReactDOMFactories into separate package (#8356)\n\n- Update examples to no longer use React.DOM\r\n- Add package and documentation entries for react-addons-dom-factories\r\n- Update dom-factories readme\r\n- Set up proxy to intercept React.DOM usage\r\n- Update ReactDOM children tests to use createElement\r\n- Add more specific warning assertion for React DOM factories\r\n- Do not use expectDev in ReactDOMFactories tests\"",
                "committedDate": "2017-04-24T15:08:17Z"
            },
            {
                "commitId": "66f2097f33a3084c79aa536e11d3ca09195bc320",
                "commitMessage": "\"Shallow renderer and test utils bundles (#9426)\n\nShallow renderer and test utils bundles\r\n\r\nAdds new bundles introduced with React 15.5 release to master (and 16 alpha)\r\n\r\nreact-dom/test-utils:\r\n\r\nThis new bundle contains what used to be react-addons-test-utils. This bundle shares things from react-dom rather than duplicates them.\r\n\r\nA temporary createRenderer method has been left behind as a way to access the new shallow renderer. This is for the ReactNative release cycle only and should be going away before the final release.\r\n\r\nreact-test-renderer/shallow:\r\n\r\nThis new shallow renderer is almost entirely stand-alone (in that it doesnt use the React reconciler or scheduler). The only touch points are ReactElement and prop/context validation. This renderer is stack and fiber compatible.\"",
                "committedDate": "2017-04-19T23:45:31Z"
            },
            {
                "commitId": "2beec2f308e27dbe902a8d68e1fc9f3d70ee9372",
                "commitMessage": "\"createClass + PropTypes + checkPropTypes warnings (#9399)\n\n(Temporarily) re-adds getters with deprecation warnings for React.PropTypes, React.checkPropTypes, and React.createClass.\r\n\r\n* 08bd020: Replace all references to React.PropTypes with prop-types to avoid triggering our own warning message.\r\n* ef5b5c6: Removed several references to React.createClass that appeared after rebasing this branch. (reviewed by @flarnie)\r\n* 524ce20: Added getters for createClass and PropTypes to the main React isomorphic object, behind one-time warning messages. (reviewed by @spicyj)\r\n* db48f54: Fixed Rollup bundles to inline prop-types and create-react-class for UMD builds only. (reviewed by @spicyj, @trueadm )\r\n* cf49cfd: Updated tests-passing.txt to remove tests that were deleted in this branch.\r\n* d34109a: Responses to PR feedback from @spicyj. (Added package.json dependencies to packages/react and packages/react-dom. Renamed a var. Expanded on an inline comment.)\r\n* 488c8d2: Added warning for moved package to React.checkPropTypes accessor too and updated build script.\r\n* 83bcb29: Wordsmithing for deprecation notices (added fb.me links).\r\n* afdc9d2: Tweaked legacy module inlining to remove order-of-deps constraint\r\n* d1348b9: Removed $FlowFixMe.\r\n* 7dbc3e7: More wordsmithing of deprecation notices based on Dans feedback.\"",
                "committedDate": "2017-04-11T21:28:03Z"
            },
            {
                "commitId": "957fbc92b123030c389bf8b4b874522bdf2db72c",
                "commitMessage": "\"react-create-class -> create-react-class\"",
                "committedDate": "2017-04-11T00:06:32Z"
            },
            {
                "commitId": "646e7863348a427e1ed9163a9a96fa759112f102",
                "commitMessage": "\"Warn once when attempting to access React.createClass\n\nShould still be undefined.\"",
                "committedDate": "2017-04-11T00:03:05Z"
            },
            {
                "commitId": "5cfaa7cf68564b8d96c94fa0d45e7feb6dc80895",
                "commitMessage": "\"Delete createClass\n\nRemove createClass from isomorphic package\"",
                "committedDate": "2017-04-11T00:03:05Z"
            },
            {
                "commitId": "72196da82915bee400edb1599d4223926aa2a8a0",
                "commitMessage": "\"Replace shims with explicit React access from the renderers for shared global state (#9366)\n\n* Remove non-existent /lib/ from souce files\r\n\r\n* Replace all shims with explicit access\r\n\r\nThis deletes shims and changes to access require(react).__DO_NOT_USE__ from renderers for global shared state.\r\n\r\nI cloned flattenChildren() and traverseAllChildren() because they relied on CurrentOwner but were used both from Stack and Isomorphic. The stack implementations will die, and the isomorphic ones can be changed to be optimized for Children specifically in the future.\r\n\r\nI also deleted UMD shims because they are now unnecessary. I moved the internals assignment to main modules since theyre now used in tests, and made them direct UMD entry points.\"",
                "committedDate": "2017-04-07T21:07:10Z"
            },
            {
                "commitId": "b1b4a2fb252f26fe10d29ba60d85ff89a85ff3ec",
                "commitMessage": "\"Merge pull request #9101 from sebmarkbage/prettier\n\nUse Prettier\"",
                "committedDate": "2017-03-14T22:33:27Z"
            },
            {
                "commitId": "1843f8716803d380df34a7362d80022352853931",
                "commitMessage": "\"Run prettier\"",
                "committedDate": "2017-03-14T00:05:18Z"
            },
            {
                "commitId": "8bc11649df767402c262b6c9b67c6dd811d42cd0",
                "commitMessage": "\"Merge branch master into remove-stack-dependencies-from-tests\"",
                "committedDate": "2017-03-01T12:32:36Z"
            },
            {
                "commitId": "e452e3374135c116ef687a8bb3a5d277e3cde8fb",
                "commitMessage": "\"providesModule -> explicit requires for cross-package dependencies (#9078)\n\n* Add forwarding modules\r\n\r\n* Codemod to use full package path outside of own package\r\n\r\nFiles that require modules from a different package than their own now\r\ndoes so by the npm path name instead of the providesModule.\r\n\r\n* Codemod fbjs module dependencies\r\n\r\n* Fix gulp module mapping config\r\n\r\nThis is a bit lame but because of our module rewrite we need to white\r\nlist all the paths that we dont *dont* want to rewrite.\"",
                "committedDate": "2017-03-01T02:42:52Z"
            },
            {
                "commitId": "f3c2d9f308eeee49d9c580c063ec7a109e9ad635",
                "commitMessage": "\"Merge pull request #9004 from acdlite/proptypescheck\n\nAPI for checking external objects against React prop types\"",
                "committedDate": "2017-02-23T22:37:19Z"
            },
            {
                "commitId": "03ed3437c988f294045770bf403839603ce00ae9",
                "commitMessage": "\"Fix build config\n\nReactDebugCurrentFrame is shared state.\n\ncheckPropTypes should be imported via the main React export,\nnot imported directly.\"",
                "committedDate": "2017-02-23T19:14:15Z"
            },
            {
                "commitId": "77c7792556e4697636d1eb5dc34042566185c26c",
                "commitMessage": "\"Remove React.__spread\"",
                "committedDate": "2017-02-10T20:27:02Z"
            },
            {
                "commitId": "7e8068b9840dd98813787736385919683ddf2002",
                "commitMessage": "\"Move component base classes into a single file (#8918)\"",
                "committedDate": "2017-02-02T20:24:39Z"
            },
            {
                "commitId": "2be0583ed37ffc22fefe61292a12daee083e6ed9",
                "commitMessage": "\"Update deprecation wording to be less aggressive\"",
                "committedDate": "2017-01-24T06:18:23Z"
            },
            {
                "commitId": "2b7814f713629d3f629ea9d74f349b77369fdae3",
                "commitMessage": "\"Deprecate React.createMixin\n\nThis API was never fully implemented. Since mixins are no longer considered part of the future React API, it will be removed.\"",
                "committedDate": "2017-01-24T06:18:23Z"
            },
            {
                "commitId": "c8fbdac22717e91d1f1638a932eed3ce4cc39ff7",
                "commitMessage": "\"Add React.PureComponent (#7195)\n\nThis provides an easy way to indicate that components should only rerender when given new props, like PureRenderMixin. If you rely on mutation in your React components, you can continue to use `React.Component`.\r\n\r\nInheriting from `React.PureComponent` indicates to React that your component doesnt need to rerender when the props are unchanged. Well compare the old and new props before each render and short-circuit if theyre unchanged. Its like an automatic shouldComponentUpdate.\"",
                "committedDate": "2016-07-06T20:24:44Z"
            },
            {
                "commitId": "d955ee9fae71e2037e9c876e2ab8cb537a8c7e43",
                "commitMessage": "\"Move ReactElementValidator to __DEV__ block (#6830)\n\nIt saves some more bytes in production mode.\"",
                "committedDate": "2016-05-22T09:01:21Z"
            },
            {
                "commitId": "6c885d28c51ea30af0d8a4031dedcea98ef4114c",
                "commitMessage": "\"Remove duplicates and move files out of native/vendor\n\nMoving the event plugins into their dedicated folder\n\nRemoving the ExecutionEnvironment override. I will just have to fix where needed. Probably related to the Chrome debugger?\"",
                "committedDate": "2016-04-20T02:35:30Z"
            },
            {
                "commitId": "f463b731ee5fce75ccf1df43d6174527016a0379",
                "commitMessage": "\"Copy files from the react-native repo\"",
                "committedDate": "2016-04-20T02:35:30Z"
            },
            {
                "commitId": "516c1d809ea56dbd109f54712efea6923ac76ee6",
                "commitMessage": "\"Merge pull request #6444 from zpao/re__spreadwarn\n\nAdd back React.__spread and make it warn\"",
                "committedDate": "2016-04-08T00:30:44Z"
            },
            {
                "commitId": "fc1cfb6225f5c3af6843515363db63ed3dcbb824",
                "commitMessage": "\"Make React.__spread warn\"",
                "committedDate": "2016-04-08T00:30:23Z"
            },
            {
                "commitId": "f02d87bdb55ebd84943c5da5d6de92e3488fa2bc",
                "commitMessage": "\"Revert \"Merge pull request #6431 from sebmarkbage/killspread\"\n\nThis reverts commit a37e4e94fcae9424094378349dc11bafe1e47973, reversing\nchanges made to 411951d5b8a4a467adc213d4533c87a7c3b06bf8.\"",
                "committedDate": "2016-04-07T23:16:37Z"
            },
            {
                "commitId": "a37e4e94fcae9424094378349dc11bafe1e47973",
                "commitMessage": "\"Merge pull request #6431 from sebmarkbage/killspread\n\nKill React.__spread\"",
                "committedDate": "2016-04-07T01:42:45Z"
            },
            {
                "commitId": "a142fd257803a218b5b9b2e76c327f0421b9b8b6",
                "commitMessage": "\"Kill React.__spread\n\nThis was only for a JSTransform related experiment that is now\ndead along with JSTransform.\"",
                "committedDate": "2016-04-07T00:08:50Z"
            },
            {
                "commitId": "80bff5397bf854750dbe7c286f61654ea58938c5",
                "commitMessage": "\"Merge pull request #6376 from zpao/object.assign\n\nUse object-assign instead of our own dated \"polyfill\"\"",
                "committedDate": "2016-04-04T17:21:39Z"
            },
            {
                "commitId": "1573baaee8ba1c9cd84145b01effcb5eb80503fb",
                "commitMessage": "\"Use Object.assign directly and inject object-assign at compile\"",
                "committedDate": "2016-04-04T16:53:25Z"
            },
            {
                "commitId": "6a8ebfc41842fb200c87a919478dcd3aa95be0d7",
                "commitMessage": "\"Merge pull request #6331 from zpao/isonpmorphic\n\nMake Browserify-specific modules to remove DOM dependencies from npm package\"",
                "committedDate": "2016-03-24T23:01:51Z"
            },
            {
                "commitId": "d17091ddebf317173eb30e3ab4a8e28e124c8f50",
                "commitMessage": "\"Make Browserify-specific modules to remove DOM dependencies from npm package\"",
                "committedDate": "2016-03-24T22:28:52Z"
            },
            {
                "commitId": "209b7522d99a8af36f8d9e06ce622c59b793e5a3",
                "commitMessage": "\"update zh-docs14.3 ,fixed confliction\"",
                "committedDate": "2016-01-14T10:38:07Z"
            },
            {
                "commitId": "fcc63e1fff7709d8cc749a6a54f788b0a5ab0983",
                "commitMessage": "\"Merge pull request #5832 from jimfb/cleanup-top-level-dom-api\n\nRemove DOM functions from top-level isomorphic API\"",
                "committedDate": "2016-01-13T23:41:03Z"
            },
            {
                "commitId": "2e1fb4b52972711199d5065625251642f7d75c29",
                "commitMessage": "\"Remove DOM functions from top-level isomorphic API\"",
                "committedDate": "2016-01-12T07:57:08Z"
            },
            {
                "commitId": "3b96650e39ddda5ba49245713ef16dbc52d25e9e",
                "commitMessage": "\"Merge pull request #5748 from rickbeerendonk/year-agnostic-copyright\n\nYear-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.\"",
                "committedDate": "2015-12-30T07:24:24Z"
            },
            {
                "commitId": "bef45b0b1a98ea9b472ba664d955a039cf2f8068",
                "commitMessage": "\"Year-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.\"",
                "committedDate": "2015-12-29T19:20:32Z"
            },
            {
                "commitId": "c07b304c76ac9cdc4bae875391e7902cf0e8e2f3",
                "commitMessage": "\"Merge pull request #5381 from kevinrobinson/react-dom-server-package\n\nAdd additional secret property to build artifact for react-dom-server\"",
                "committedDate": "2015-11-18T00:48:08Z"
            },
            {
                "commitId": "45c612ed7a56b91f4c1d056c824de54673a2c241",
                "commitMessage": "\"Add additional secret property and build for react-dom-server\n\nUpdate eslintrc, travis build and add task to Gruntfile\"",
                "committedDate": "2015-11-03T21:39:58Z"
            },
            {
                "commitId": "69ab7145bc36a500195ccf0e2937ded21520582f",
                "commitMessage": "\"Merge pull request #4814 from zpao/build-react-dom-browser-2\n\nBuild react dom browser 2\"",
                "committedDate": "2015-09-09T05:33:08Z"
            },
            {
                "commitId": "b2ca3349c27b57b1e9462944cbe4aaaf76783d2b",
                "commitMessage": "\"Actually build react-dom file with the build\"",
                "committedDate": "2015-09-09T05:18:44Z"
            },
            {
                "commitId": "c0270a167397f7083f77012d43180cc22bbae13e",
                "commitMessage": "\"Merge pull request #4798 from zpao/pull-out-version\n\nMove version to standalone module in preparation for reuse\"",
                "committedDate": "2015-09-08T23:30:05Z"
            },
            {
                "commitId": "58d62989bd4e8da32e58db35a96868ef2258c2c9",
                "commitMessage": "\"Move version to standalone module in preparation for reuse\"",
                "committedDate": "2015-09-08T17:18:41Z"
            },
            {
                "commitId": "4b9c349fd057b3c4b1a0fab5fbdf5bd0c625db8d",
                "commitMessage": "\"Merge pull request #4702 from spicyj/react-mod-depr\n\nAdd deprecation warnings to React module\"",
                "committedDate": "2015-09-01T21:40:48Z"
            },
            {
                "commitId": "c04d02e5e8de18436ac95037ab856ac5ba7d29b9",
                "commitMessage": "\"Add warnings to React module\"",
                "committedDate": "2015-09-01T21:36:41Z"
            },
            {
                "commitId": "3f6bca7b1638ee940bb01989377abc9864edb6fe",
                "commitMessage": "\"0.14.0-beta3\"",
                "committedDate": "2015-08-03T21:24:24Z"
            },
            {
                "commitId": "681bbb629fa80a67fa79ced11e5a4cad6c1878fe",
                "commitMessage": "\"0.14.0-beta2\"",
                "committedDate": "2015-07-31T04:29:09Z"
            },
            {
                "commitId": "d16481d0e7d23771c5d94e5a0eeaf64e02f07979",
                "commitMessage": "\"Merge pull request #4453 from spicyj/react-dom\n\nRename ReactDOMClient to ReactDOM\"",
                "committedDate": "2015-07-23T18:27:25Z"
            },
            {
                "commitId": "6c20271488d8abfa82dda14fd8d2a947549c21d7",
                "commitMessage": "\"Rename ReactDOMClient to ReactDOM\n\nThis closer matches the npm package name and (I assume) is what we want to call it internally.\"",
                "committedDate": "2015-07-22T02:30:09Z"
            },
            {
                "commitId": "b4e74e38e43ac53af8acd62c78c9213be0194245",
                "commitMessage": "\"Bump version to beta1\"",
                "committedDate": "2015-07-03T08:46:35Z"
            },
            {
                "commitId": "8471cc5f47bac0dbfd6b3123775fc28757db0ed3",
                "commitMessage": "\"0.14.0-alpha3\"",
                "committedDate": "2015-05-27T23:47:35Z"
            },
            {
                "commitId": "b687a229530dc304fbb74018027156968258c295",
                "commitMessage": "\"0.14.0-alpha2\"",
                "committedDate": "2015-05-20T20:37:42Z"
            },
            {
                "commitId": "52752446760dee0bc7232b4146f5a309ac57f065",
                "commitMessage": "\"Merge pull request #3866 from sebmarkbage/coreapi\n\nReorganize Src Directory for Isomorphic React Package\"",
                "committedDate": "2015-05-16T01:39:36Z"
            },
            {
                "commitId": "0b063f8a09dae4b6b1de400ff2d9aba9108647de",
                "commitMessage": "\"Reorganize Src Files for Isomorphic React Package\n\nThe new folder structure is organized around major packages that are expected to ship separately in some form.\n\n`/isomorphic`\n\nI moved classic/modern and children utils into a directory called \"isomorphic\" with the main export being ReactIsomorphic. This will eventually become the \"react\" package.\n\nThis includes all the dependencies that you might need to create a component without dependencies on the renderer/reconciler.\n\nThe rest moves into decoupled renderers.\n\n`/renderers/dom/client` - This is the main renderer for DOM.\n\n`/renderers/dom/server` - This is the server-side renderer for HTML strings.\n\n`/addons` and `/test` - Same as before for now.\n\nYoure not supposed to take on a dependency inside another package.\n\nShared code is organized into a \"shared\" directory which is intended to support all the packages in that subdirectory. Meaning that once we swap to CommonJS modules, the only time you should use `..` is to target `../shared/` or `../../shared`.\n\nE.g. `/shared/` is common utils that are used by everything.\n\n`/renderers/shared/` is code that is shared by all renderers, such as the main reconciliation algorithm.\n\nShared code will likely be copied into each package rather than referenced. This allow us to have separate state and allow inlining and deadcode elimination.\"",
                "committedDate": "2015-05-16T01:35:22Z"
            },
            {
                "commitId": "7839e072313db4a21c246bb1e35e1f510139bb12",
                "commitMessage": "\"0.14.0-alpha1\"",
                "committedDate": "2015-05-11T05:36:50Z"
            },
            {
                "commitId": "4f285b7ba07b3153a0b9b61c35fc05da37ebdd9e",
                "commitMessage": "\"Merge pull request #3676 from zpao/rm-withContext\n\nRemove withContext from top-level API\"",
                "committedDate": "2015-04-22T16:45:26Z"
            },
            {
                "commitId": "088d71c7c1eaef9a14ccccabe05b73a57c755703",
                "commitMessage": "\"Merge pull request #3693 from reedloden/swap-http-to-https\n\nSSL/TLSize all the things! (convert http:// to https:// where appropriate)\"",
                "committedDate": "2015-04-20T18:02:29Z"
            },
            {
                "commitId": "3e8951e8c7dcb44035c8524c0fd82967652d41dd",
                "commitMessage": "\"SSL/TLSize all the things! (convert http:// to https:// where appropriate)\n\nUpdate links to use https:// where it is supported. Theres probably a lot\nmore that could be fixed, but these are the core ones I found (especially\nthe download links in order to prevent MITM attacks). Note that there are\nsome fb.me links that will redirect to http:// even while accessed over\nhttps://, but this seemed like the best way to fix those for now.\n\nNOTE: Only non-third-party files were modified. There are references to\nhttp:// URLs in vendored/third-party files, but seems appropriate to fix\nupstream for those rather than editing the files.\n\nAlso, copy one image locally to the blog, as it was hotlinking to a site\nthat did not support https://.\n\nLast, use youtube-nocookie.com instead of youtube.com for video embeds,\nas the former doesnt try to set a cookie on load (privacy enhancement).\"",
                "committedDate": "2015-04-18T23:49:32Z"
            },
            {
                "commitId": "5297ff66cf8f9b6459d6cf73d4e3a54cc010b34d",
                "commitMessage": "\"Remove withContext from top-level API\"",
                "committedDate": "2015-04-16T22:58:27Z"
            },
            {
                "commitId": "88fb106c39545fdfea71e56f55418b8058e6b3e6",
                "commitMessage": "\"Merge pull request #3646 from facebook/revert-3580-2402-warn-multiple-copies-of-react-on-same-page\n\nRevert \"Warn when multiple instances of React are loaded on the same page\"\"",
                "committedDate": "2015-04-10T20:54:57Z"
            },
            {
                "commitId": "8fa15080b2eafa0ab998f0e3745971af40e13e69",
                "commitMessage": "\"Revert \"Warn when multiple instances of React are loaded on the same page\"\"",
                "committedDate": "2015-04-10T19:34:04Z"
            },
            {
                "commitId": "f1cd867323c420c577f82628ba498637a3d6e5f7",
                "commitMessage": "\"Merge pull request #3580 from robertknight/2402-warn-multiple-copies-of-react-on-same-page\n\nWarn when multiple instances of React are loaded on the same page\"",
                "committedDate": "2015-04-09T02:18:44Z"
            },
            {
                "commitId": "8ad58ae45a4fd3a5def5732fc377f1351950c4dd",
                "commitMessage": "\"Warn when multiple instances of React are loaded on the same page\n\nThis causes a variety of hard-to-debug issues.\nSee #2402 for examples.\n\nFixes #2402\"",
                "committedDate": "2015-04-03T10:46:58Z"
            },
            {
                "commitId": "7fe5a3aadd308961d5557ba1060eaca14a22f825",
                "commitMessage": "\"Merge pull request #3442 from spicyj/kill-initializeTouchEvents\n\nKill React.initializeTouchEvents for good\"",
                "committedDate": "2015-03-19T21:15:26Z"
            },
            {
                "commitId": "26664315a61af6a39441387be8bd5f45c0dbed2a",
                "commitMessage": "\"Merge pull request #3438 from spicyj/lint\n\nLint fixes\"",
                "committedDate": "2015-03-17T21:14:57Z"
            },
            {
                "commitId": "9c4c2f58ea103f84c055d2241c0f178c79d90fd9",
                "commitMessage": "\"Kill React.initializeTouchEvents for good\n\nNow that #1169 is fixed, the only thing this is used for is to determine whether `onTouchTap` causes touch listeners to be added. The only internal uses of TapEventPlugin are where touch events are already initialized (so this doesnt make a difference) and we dont support `onTouchTap` as part of the public API so this should be safe.\"",
                "committedDate": "2015-03-17T21:12:26Z"
            },
            {
                "commitId": "c34fa7f3d22d04a7089fc8930b06be9e73f4b0d5",
                "commitMessage": "\"Lint fixes\"",
                "committedDate": "2015-03-17T20:30:15Z"
            },
            {
                "commitId": "53f92bf8587b64e0803b66b8bf7f337add2e75a3",
                "commitMessage": "\"Fix comma splice and line length\"",
                "committedDate": "2015-03-10T22:36:27Z"
            },
            {
                "commitId": "645a6caaf5606af9d8479000426e9cb94aeada3b",
                "commitMessage": "\"Merge pull request #3323 from jonhester/ie8-compat-mode\n\nwarn if IE8 is in compatibility mode\"",
                "committedDate": "2015-03-10T22:35:09Z"
            },
            {
                "commitId": "e313616be7a6525924e8b822772fa0669e756472",
                "commitMessage": "\"Bump version so we can get back to work\"",
                "committedDate": "2015-03-10T22:06:35Z"
            },
            {
                "commitId": "65c4aeaa3a8fb80be4f6f9f3d978601aad678b9f",
                "commitMessage": "\"use warning module instead of console.debug\"",
                "committedDate": "2015-03-05T18:53:12Z"
            },
            {
                "commitId": "a999ac1ac30bd7ec9db152027fc480ea34652b5d",
                "commitMessage": "\"warn if IE8 is in compatibility mode\"",
                "committedDate": "2015-03-05T13:48:28Z"
            },
            {
                "commitId": "21b41480a531199ff48034c513288765950409d4",
                "commitMessage": "\"v0.13.0-rc2\"",
                "committedDate": "2015-03-03T19:46:01Z"
            },
            {
                "commitId": "ecc4ad569a5730748f00a5cceb118629fa01235b",
                "commitMessage": "\"Merge pull request #3266 from sebmarkbage/cloneelement\n\nAdd cloneElement Implementation\"",
                "committedDate": "2015-03-02T20:15:20Z"
            },
            {
                "commitId": "4adcee69a04058a4858837752e7e8f011bb652f9",
                "commitMessage": "\"Add cloneElement Implementation\n\nThis is a new version of cloneWithProps but this one is moving out of\nadd-ons. Unlike cloneWithProps, this one doesnt have special logic for\nstyle, className and children.\n\nThis one also preserves the original ref. This is critical when upgrading\nfrom a mutative pattern where a child might have a ref on it.\n\nIt also preserves context, which is similar to how context would work when\nit is parent based. It also ensures that were compatible with the old\nmutative pattern which makes updates easier.\"",
                "committedDate": "2015-02-26T09:17:05Z"
            },
            {
                "commitId": "06126ad3f4d063e89b3168abce79c9cd9961831c",
                "commitMessage": "\"v0.13.0-rc1\"",
                "committedDate": "2015-02-22T21:26:13Z"
            },
            {
                "commitId": "5126cee0f521e2e546e37560df2fe3967039a034",
                "commitMessage": "\"v0.13.0-beta.2\"",
                "committedDate": "2015-02-14T02:28:03Z"
            },
            {
                "commitId": "50c38bbc7598f1537c2928d370de78acce6a81c1",
                "commitMessage": "\"Merge pull request #3023 from sebmarkbage/devtoolsfix\n\nExpose ReactReconciler\"",
                "committedDate": "2015-02-03T06:07:28Z"
            },
            {
                "commitId": "e67ff7ee78620448badba2cf8ac3af6ee2893d6f",
                "commitMessage": "\"Expose ReactReconciler\n\nThis can be used by devtools to monkey patch the reconciler and therefore\nget notified whenever any internal instance is updated.\"",
                "committedDate": "2015-02-03T02:15:31Z"
            },
            {
                "commitId": "2aeb8a2a6beb00617a4217f7f8284924fa2ad819",
                "commitMessage": "\"Merge pull request #2995 from rickbeerendonk/copyright-2015\n\nUpdate copyright headers for 2015\"",
                "committedDate": "2015-02-02T19:15:30Z"
            },
            {
                "commitId": "3e0750a4ad2444c2df708b144ff0c8af7628881d",
                "commitMessage": "\"Update copyright headers for 2015\"",
                "committedDate": "2015-01-31T19:18:25Z"
            },
            {
                "commitId": "5bd078508a1beb500b801eb7de9488927a874376",
                "commitMessage": "\"v0.13.0-beta.1\"",
                "committedDate": "2015-01-28T05:13:35Z"
            },
            {
                "commitId": "61c4497d58690b179588d87defa7d9499e3a58f7",
                "commitMessage": "\"Merge pull request #2959 from sebmarkbage/createmixin\n\nWe dont currently have a way to trace the origin of a mixin\"",
                "committedDate": "2015-01-27T18:39:25Z"
            },
            {
                "commitId": "b3f96d97f954188049854ed4599cbd77158c3ae3",
                "commitMessage": "\"Merge pull request #2957 from sebmarkbage/renamecomponent\n\nRename ReactComponentBase -> ReactComponent\"",
                "committedDate": "2015-01-27T18:39:07Z"
            },
            {
                "commitId": "295ef0063b933e13b2ddd541c108b386b35b648b",
                "commitMessage": "\"We dont currently have a way to trace the origin of a mixin\n\nThis makes it more difficult to find bugs in mixins both dynamically\nand using a static type system.\n\nWe also dont have a way to find these to be upgraded to a new mixin\nsyntax if we needed to.\n\nThis hook is currently an optional noop but could be made required to\ncreate a mixin class.\"",
                "committedDate": "2015-01-27T17:36:14Z"
            },
            {
                "commitId": "c3c98084b94a359adbfcf84b88b3c901aade50b9",
                "commitMessage": "\"Rename ReactComponentBase -> ReactComponent\n\nWe freed up this internal name by removing the internal base class.\nWere now free to use this name as it was intended.\n\nReactDOMComponent and ReactCompositeComponent are still confusing as\ntheyre internal but well rename them later.\"",
                "committedDate": "2015-01-27T17:22:07Z"
            },
            {
                "commitId": "1c90efbf7cc982dcecaa2044f18d27df5ae876a1",
                "commitMessage": "\"Merge pull request #2923 from sebmarkbage/dropcomponentmixin\n\nReplace ReactComponentMixin with ReactReconciler\"",
                "committedDate": "2015-01-24T02:06:50Z"
            },
            {
                "commitId": "690409a91239e04a38f3f819f8c5b13a6c60b114",
                "commitMessage": "\"Replace ReactComponentMixin with ReactReconciler\n\nInstead of putting the shared code in a base class method, we use a wrapper\ncall around all invokations. That way theyre free to add code before AND\nafter the non-shared code.\n\nThat way we ensure that component extensions dont need to implement\nReactComponentMixin and do super() calls into it. This helps to create a\ntighter API for custom component extensions.\n\nThis provides the first step towards moving these methods to static\nmethods which allows to use a different dispatch mechanism instead of\nvirtual method calls. E.g. pattern matching.\"",
                "committedDate": "2015-01-24T01:27:42Z"
            },
            {
                "commitId": "8616a6f60e8eeaba9988a4ade56a59cb3c4ea73d",
                "commitMessage": "\"Merge pull request #2919 from sebmarkbage/removecreateref\n\nRemove React.createRef API\"",
                "committedDate": "2015-01-23T03:13:55Z"
            },
            {
                "commitId": "a3a464c8fcd2fc9d04a5765f41f56315c12de44a",
                "commitMessage": "\"Remove React.createRef API\n\nThis API was removed so this wont work.\"",
                "committedDate": "2015-01-23T03:11:11Z"
            },
            {
                "commitId": "deae575dae1295572b9f8694232eab68c2c6a84e",
                "commitMessage": "\"v0.13.0-alpha.2\"",
                "committedDate": "2015-01-16T18:33:42Z"
            },
            {
                "commitId": "54c82da15f6b4717425edbf68e23ae82583a50af",
                "commitMessage": "\"Merge pull request #2751 from zpao/eslint-fixup\n\nEslint fixup\"",
                "committedDate": "2015-01-13T23:27:54Z"
            },
            {
                "commitId": "df64a67b7f930f90423e194637af624cdc155526",
                "commitMessage": "\"codemod \"use strict\" to use strict for better linting\"",
                "committedDate": "2015-01-13T23:26:32Z"
            },
            {
                "commitId": "d138f9a35ba9b639d9ec0cb59b58146f6e657a68",
                "commitMessage": "\"Merge pull request #2805 from sebmarkbage/baseclass1\n\nIntroducing ReactComponentBase base class\"",
                "committedDate": "2015-01-13T19:00:56Z"
            },
            {
                "commitId": "ff032dc8576fec0bf6dbeeaf5d53325c2010d284",
                "commitMessage": "\"Introducing ReactComponentBase base class\n\nThis is the base class that will be used by ES6 classes.\n\nIm only moving setState and forceUpdate to this base class and the other\nfunctions are disabled for modern classes as were intending to deprecate\nthem. The base classes only have getters that warn if accessed. Its as if\nthey didnt exist.\n\nReactClass now extends ReactComponentBase but also adds the deprecated\nmethods. They are not yet fully deprecated on the ReactClass API.\n\nI added some extra tests to composite component which we werent testing\nto avoid regressions.\n\nI also added some test for ES6 classes. These are not testing the new\nstate initialization process. Thats coming in a follow up.\"",
                "committedDate": "2015-01-13T18:54:19Z"
            },
            {
                "commitId": "3fec78638deb5926b25063dc9f3fe8eef5140751",
                "commitMessage": "\"v0.13.0-alpha.1\n\nBumping version numbers so we can push to npm.\"",
                "committedDate": "2014-12-23T20:04:23Z"
            },
            {
                "commitId": "e0725341cf1046d54c186a66c74ee7f986d4f36a",
                "commitMessage": "\"Merge pull request #2646 from jsfb/getDOMNode-becomes-findDOMNode\n\nAdded findDOMNode, as we move toward deprecating getDOMNode\"",
                "committedDate": "2014-12-22T21:05:49Z"
            },
            {
                "commitId": "b46a6ce4bb8d6087ed424764f41fe4b8e248b3b4",
                "commitMessage": "\"Added findDOMNode, as we move toward deprecating getDOMNode\"",
                "committedDate": "2014-12-18T21:55:44Z"
            },
            {
                "commitId": "42ae61d0653fe2a7709c68c818bb0ef1f46b1552",
                "commitMessage": "\"Merge pull request #2655 from zpao/rm-deprecated\n\nRemove deprecated methods since 0.12 shipped\"",
                "committedDate": "2014-12-14T22:33:16Z"
            },
            {
                "commitId": "c46dadea55728a5c782861c15ed4989221c0674e",
                "commitMessage": "\"Remove deprecated methods since 0.12 shipped\"",
                "committedDate": "2014-12-14T22:19:44Z"
            },
            {
                "commitId": "ba95ce7b6f366c60afdefa7d2cc0f508a443d702",
                "commitMessage": "\"Merge pull request #2677 from zpao/lint-internal\n\nFix new lint errors\"",
                "committedDate": "2014-12-08T20:22:06Z"
            },
            {
                "commitId": "739baa90927d06e7e2267c65b1221931a20784a4",
                "commitMessage": "\"Fix new lint errors\n\nWell get to lint parity soon and then not need to do this.\"",
                "committedDate": "2014-12-08T20:18:41Z"
            },
            {
                "commitId": "230115da9210f389e60f7eb0e402de1a06b5f269",
                "commitMessage": "\"Make ReactTextComponent properly injectable\n\nReactTextComponents implementation is DOM-specific; instead of flattenChildren creating the ReactTextComponent instances, ReactNativeComponent now takes care of having ReactTextComponent injected and creating the component instance. I also renamed ReactTextComponent to ReactDOMTextComponent and moved it to browser/ui/ where it belongs. ReactDOMTextComponent no longer inherits directly from ReactComponent and instead implements construct and {mount,receive,unmount}Component directly.\n\nThis diff removes `ReactTestUtils.isTextComponent` which should have previously never returned true when using public APIs.\n\nTest Plan: jest, use ballmer-peak example.\"",
                "committedDate": "2014-11-15T20:30:42Z"
            },
            {
                "commitId": "9edc6260a7db25f888259fddedb4aa2250f6385f",
                "commitMessage": "\"Initial implementation of new-style refs\n\ncf. #1373\n\nThis implementation can be used in any situation that refs can currently be used (and can also be used without an owner, which is a plus).\"",
                "committedDate": "2014-11-06T03:28:12Z"
            },
            {
                "commitId": "b5bcaba77fbe53cafd7c5f6b76752b09791caadf",
                "commitMessage": "\"Merge branch master into docs-namespace-in-jsx\n\n* master: (113 commits)\n  Remove esprima-fb and use Syntax from jstransform\n  Update React.renderToString argument type in docs\n  [traverseAllChildren] fix out-of-scope var use.\n  Use double quote for transformed `displayName` and `data-*`\n  Remove unrelated comment\n  Fix typo in If/Else JSX doc.\n  Cleanup a couple unused variables\n  Use dump cache and remove factory from ReactElement-test\n  Update deprecated propTypes\n  Bring in jsfiddle integration script, add harmony\n  Extending period in which click events are ignored\n  React.renderComponent --> React.render\n  Followup fix for React.PropTypes.node\n  Add comma for readability in tutorial\n  Drop internal uses of .type on the class\n  Drop Legacy Factories Around Classes\n  Drop ReactDOM from internal DOM extensions\n  Added comma to increase readability.\n  Add 0.12 starter kit\n  Change the date and the link url to match the proper roundup\n  ...\n\nConflicts:\n\tdocs/docs/02.1-jsx-in-depth.md\"",
                "committedDate": "2014-11-05T14:30:37Z"
            },
            {
                "commitId": "a54ed49eb05200dcdc2f27ba9437d17e37571547",
                "commitMessage": "\"Merge pull request #2375 from sebmarkbage/droplegacyfactories\n\nDrop Legacy Factories\"",
                "committedDate": "2014-10-29T01:00:32Z"
            },
            {
                "commitId": "199a7d6903ed2e7c28fb32c6a28ed7f26148e13d",
                "commitMessage": "\"Drop Legacy Factories Around Classes\n\nClasses are now pure classes without a legacy factory around them.\n\nSince classes will become just any function that returns a valid instance,\nlets drop isValidClass.\n\nTheres some hacks in here for auto-mocking frameworks (jest) that mock the\nprototype of these classes. These hacks allow these classes to be mounted.\"",
                "committedDate": "2014-10-28T22:08:52Z"
            },
            {
                "commitId": "b7cd3e7d1de31108594a6698215bfa7bf8619b34",
                "commitMessage": "\"Merge pull request #2396 from sebmarkbage/classmodule\n\nMove Class Creation Concerns into a ReactClass Module\"",
                "committedDate": "2014-10-23T19:50:17Z"
            },
            {
                "commitId": "994fc7d8a727dc7b477322a5c3d4216f1215f639",
                "commitMessage": "\"Merge remote-tracking branch upstream/master into fix-gruntfile\"",
                "committedDate": "2014-10-23T07:55:43Z"
            },
            {
                "commitId": "c7bb936566bce79b35f55b558af5f09b88047a9a",
                "commitMessage": "\"Introduce React Class as an alias for Composite Component\n\nThis is in preparation for the separation of Composite Component internals\nfrom the Class abstraction.\"",
                "committedDate": "2014-10-23T01:35:10Z"
            },
            {
                "commitId": "b78fe39b6073bab20eb7785aa9ef508aabf03c3f",
                "commitMessage": "\"Bump version to 0.13.0-alpha\"",
                "committedDate": "2014-10-22T21:19:54Z"
            },
            {
                "commitId": "2bdad81955e160a5b11110b40c7222a1113cc1fb",
                "commitMessage": "\"Merge pull request #2384 from sebmarkbage/deprecateisvalidclass\n\nDeprecate isValidClass\"",
                "committedDate": "2014-10-21T00:17:56Z"
            },
            {
                "commitId": "ef971014bc22bf4cfecb31ce35de38c231c1c41d",
                "commitMessage": "\"Deprecate isValidClass\n\nFixes #2374\"",
                "committedDate": "2014-10-20T06:55:57Z"
            },
            {
                "commitId": "2b4e35870b7a0c4d681bc3c86641790dd828f0a0",
                "commitMessage": "\"v0.12.0-rc1\"",
                "committedDate": "2014-10-16T21:56:50Z"
            },
            {
                "commitId": "828efb798a94a631007efe966828fbc5b01613ea",
                "commitMessage": "\"Merge pull request #2350 from sebmarkbage/assign\n\nHide Object.assign polyfill behind a module\"",
                "committedDate": "2014-10-16T16:29:01Z"
            },
            {
                "commitId": "8210beeef4219d11b0a997f5a5abe7c348c01448",
                "commitMessage": "\"Hide Object.assign polyfill behind a module\n\nBecause the JS communitys polyfilling infrastructure sucks and well\nhave to fix it for them before we require this.\n\nJSX spread uses React.__spread\n(which might get special behavior for key/ref, not sure yet)\n\nThis never uses the native implementation and throws for prototype chains.\nOnce the native implementations are faster, well start using them.\"",
                "committedDate": "2014-10-16T16:21:10Z"
            },
            {
                "commitId": "3991d4de6be63ea0dac5d2b9ccd6a9c4069b439b",
                "commitMessage": "\"Merge pull request #2337 from sebmarkbage/devtoolshook\n\nInject the runtime to a global instead of exposing internals\"",
                "committedDate": "2014-10-13T19:30:15Z"
            },
            {
                "commitId": "ce19af9d304bb0b2c9b3fabf6b999c45be5b7b72",
                "commitMessage": "\"Inject the runtime to a global instead of exposing internals\n\nSee https://github.com/facebook/react-devtools/commit/673de20a4a0654ab849575307b9cf87fde53439e\"",
                "committedDate": "2014-10-13T18:59:23Z"
            },
            {
                "commitId": "5d3b12bb3bd6a092cf00ede07b8255a8399c2e58",
                "commitMessage": "\"Merge pull request #2312 from zpao/license-update\n\nUpdate Licenses\"",
                "committedDate": "2014-10-10T23:58:45Z"
            },
            {
                "commitId": "dcf415c2b91ce52fd5d4dd02b70875ba9d33290f",
                "commitMessage": "\"BSD + PATENTS\"",
                "committedDate": "2014-10-10T20:34:07Z"
            },
            {
                "commitId": "5d127eaa4935486a9fa15830b9224b806921f56d",
                "commitMessage": "\"Merge pull request #2316 from zpao/devtoolsmarker\n\nLook for devtools global hook\"",
                "committedDate": "2014-10-10T00:00:06Z"
            },
            {
                "commitId": "540731b7a8cbae5835edf69f26361993691d6c00",
                "commitMessage": "\"Merge pull request #2002 from zpao/rename-renderComponent\n\nReact.renderComponent -> React.render\"",
                "committedDate": "2014-10-09T23:41:37Z"
            },
            {
                "commitId": "9b1fa914fafca23b201d5bf4d7ca6ffa1dff6cc4",
                "commitMessage": "\"React.renderComponent -> React.render\n\nAlso rename all the associated render methods and adds deprecation\nnotices.\"",
                "committedDate": "2014-10-09T23:41:03Z"
            },
            {
                "commitId": "6ddf8de5aee5ea58a4f1b806c6c768d53cf5e2b4",
                "commitMessage": "\"Look for devtools global hook\n\nIt doesnt exist yet, but it could.\n\nThis also ensures we actually do our polyfill checks in *all* browsers,\nnot just Chrome.\"",
                "committedDate": "2014-10-09T18:24:48Z"
            },
            {
                "commitId": "f48954d8a39097109d599db365af28df417544cb",
                "commitMessage": "\"Merge pull request #2300 from sebmarkbage/descriptorstoelements\n\nRenamed Descriptor -> Element\"",
                "committedDate": "2014-10-07T20:44:44Z"
            },
            {
                "commitId": "8f1657bba618846b7a111a2caee855bf59145c5a",
                "commitMessage": "\"Renamed Descriptor -> Element\n\nWeve decided on a new naming convention for ReactDescriptor. Its now\ncalled ReactElement, which is a subset of the ReactNode union type.\"",
                "committedDate": "2014-10-07T20:41:51Z"
            },
            {
                "commitId": "7f9b1d18d197d102777f214e782ecc27685cf481",
                "commitMessage": "\"Start warning when React.DOM.x is passed into JSX\n\nReact.DOM is becoming helper factories to generate ReactElements. Theyre not\nclasses. It will be ok to call them directly as functions, but not to use them\nwhere a class is expected.\"",
                "committedDate": "2014-10-07T17:49:18Z"
            },
            {
                "commitId": "c901b1005e7c946584487bb8b0bf7b60a773645b",
                "commitMessage": "\"Make createDescriptor return a descriptor for components\n\nThis moves all logic around legacy descriptors to ReactLegacyDescriptor. This\nis responsible for the layer that knows that createClass exports a legacy\nfactory. When passed one of these classes, it unwraps it to be a real class.\n\nIf it is passed a non legacy factory, it is assumed to be a non-react component\nthat needs to be invoked as a plain function.\n\nThe semantic change is that a descriptor is now always returned if passed a\nlegacy factory. Even if that factory is a mock. A mock would previously return\nundefined.\n\nFor mocks, I treat the factory as the authoritative function. I call it to extract\nthe instance or fill it with an empty component placeholder.\n\nAdditionally, I make the classes take props as the first argument to the\nconstructor. This is what the new class system will do.\n\nWe currently need to set up some internals by calling the internal construct\nmethod. Instead of doing that automatically in the constructor, I now move that\nto a second pass so that mocks can get the plain props.\n\nThis means that we can assert that a mock has been called once its mounted\nwith its final props. Instead of the descriptor factory being called.\"",
                "committedDate": "2014-08-20T07:14:32Z"
            },
            {
                "commitId": "5b4e2be867ebf216e7acd0cfecda026d9dd3499d",
                "commitMessage": "\"Iterate over expectedFeatures correctly\n\nThis fails if Array.prototype is extended.\"",
                "committedDate": "2014-08-19T01:18:05Z"
            },
            {
                "commitId": "eb3ea3f2dfed33751ce95666370b30a7b9d8bc9f",
                "commitMessage": "\"Move batchedUpdated to React.addons\n\nThis is a followup to #1060, where I did not read closely enough before\nmerging.\"",
                "committedDate": "2014-08-13T22:40:40Z"
            },
            {
                "commitId": "938bcbecd5874d6d33f11e52e5c9a71dbcd44c8b",
                "commitMessage": "\"Merge pull request #1060 from spicyj/gh-906\n\nAdd React.batchedUpdates to public API\"",
                "committedDate": "2014-08-13T22:37:43Z"
            },
            {
                "commitId": "036d751397140e1eae01ea6ce6ebe86f0482f485",
                "commitMessage": "\"Add createElement alias for createDescriptor\"",
                "committedDate": "2014-08-06T23:41:47Z"
            },
            {
                "commitId": "2d250d44a5909d9e9d6a0e6fef541cf6fdf6e0ae",
                "commitMessage": "\"Merge pull request #1993 from spicyj/devtools-warning-2\n\nSlightly more considerate devtools warning\"",
                "committedDate": "2014-08-04T21:25:16Z"
            },
            {
                "commitId": "30452914174c7fda400746e8795b73f8ba4269bf",
                "commitMessage": "\"Slightly more considerate devtools warning\n\nSee #953.\"",
                "committedDate": "2014-08-04T18:16:51Z"
            },
            {
                "commitId": "c6b2687bbda0c9d828be51d3d4908adb89d52a09",
                "commitMessage": "\"Partially revert React.createDescriptor\n\nWe still have some issues to work out when the type argument is a mock.\"",
                "committedDate": "2014-07-25T23:48:10Z"
            },
            {
                "commitId": "04e341936cff902f399ca59bd6b855b2d994470e",
                "commitMessage": "\"Include Object.assign polyfill\n\nThis isnt a good final solution but it makes React actually usable on\nits own.\n\nThis also makes tests runnable, though only via jest\n(./node_modules/.bin/jest)\"",
                "committedDate": "2014-07-21T23:18:12Z"
            },
            {
                "commitId": "5aab0bddaa9dd2684049194a2488d57517d89cae",
                "commitMessage": "\"Move key/ref off props and prepare for new descriptor factories\n\nBreaking changes\n\n- key/ref are no longer accessible on props but they are accessible on the\n  descriptors. This means that parents/owners can access it but not the\n  component itself.\n\n- Descriptor factories are now plain functions and you cant rely on the\n  prototype or constructors of descriptors to identify the component type.\n\nExisting descriptor factories are now wrapped in a legacy factory. Currently it\ndoes nothing but it will give us a hook to track callers to factories that are\nnot using JSX but just invoking the function directly. It also proxies static\nmethods/properties to the underlying class. The newer factories dont have this\nfeature.\n\nReactTextComponent has its own little factory because its props is not an\nobject. This is a detail and will go away once ReactTextComponent no longer\nneeds descriptors.\"",
                "committedDate": "2014-07-19T05:01:36Z"
            },
            {
                "commitId": "5bfee601ce6709a56e025e84634fcc5da0b36a44",
                "commitMessage": "\"Bump version for 0.12.0-alpha\n\n[skip ci]\"",
                "committedDate": "2014-07-17T21:22:50Z"
            },
            {
                "commitId": "97dbada03d58bef9bce6941ca49207e28b6b75ac",
                "commitMessage": "\"Up-to-date React.Children\n\nMake sure we actually include `.count`\"",
                "committedDate": "2014-07-14T22:01:44Z"
            },
            {
                "commitId": "0f9cec2e78c09e81dc3dac764788589a07903411",
                "commitMessage": "\"0.11.0-rc1\"",
                "committedDate": "2014-07-13T02:50:45Z"
            },
            {
                "commitId": "2b0e51bdbaa0f0e589c8a24e358a7739e70f38dc",
                "commitMessage": "\"Add String.prototype.trim to polyfill check\n\nAlso shortens the URL so it fits on 1 line\"",
                "committedDate": "2014-07-11T17:36:38Z"
            },
            {
                "commitId": "ef6740627292136973a6b8053cc98dba98ebd18f",
                "commitMessage": "\"Add simple React.createDescriptor hook\n\nThis is the minimal runtime change we need to switch the JSX syntax to resolve\nto React.createDescriptor(...)\"",
                "committedDate": "2014-06-26T22:42:18Z"
            },
            {
                "commitId": "e4f80f301ddc56370c5c7dfb2be483431bfa7d20",
                "commitMessage": "\"Merge pull request #1516 from syranide/es5err\n\nPreemptively error when required ES5 shim/shams are not available\"",
                "committedDate": "2014-05-12T20:40:00Z"
            },
            {
                "commitId": "659b7981e14c7eb36cf2638a95a3a16f080b8cca",
                "commitMessage": "\"Preemptively error when required ES5 shim/shams are not available\"",
                "committedDate": "2014-05-11T19:20:07Z"
            },
            {
                "commitId": "7fb7e951082c40b3183cc2a6ab483a8b6b579690",
                "commitMessage": "\"Add React.batchedUpdates to public API\n\nFixes #906.\"",
                "committedDate": "2014-04-16T22:59:54Z"
            },
            {
                "commitId": "468007612f4a6dabb228618d9a3274f067fc2c51",
                "commitMessage": "\"Merge branch master of github.com:facebook/react\"",
                "committedDate": "2014-03-30T19:53:26Z"
            },
            {
                "commitId": "c40e06f7281622a7a6295f4a7d5540a75fedf7bb",
                "commitMessage": "\"First phase to true descriptors\n\nThis moves all convenience constructors to use frozen ReactDescriptors.\"",
                "committedDate": "2014-03-28T19:32:53Z"
            },
            {
                "commitId": "f0eae5086b0062bdf8f8e466803e061814486634",
                "commitMessage": "\"version bump for 0.11 development\"",
                "committedDate": "2014-03-21T21:58:52Z"
            },
            {
                "commitId": "7f24943e5af5ee4b14ec002d45df315af94adb75",
                "commitMessage": "\"update version for 0.10rc\"",
                "committedDate": "2014-03-19T05:09:32Z"
            },
            {
                "commitId": "a8fc3b940dbe20c0c7decd19b028215b236c50a6",
                "commitMessage": "\"Move UI-thread-only browser modules to browser/ui/\n\nThis also deletes an unused module.\"",
                "committedDate": "2014-03-03T23:07:11Z"
            },
            {
                "commitId": "99dab49f92fe0785c1643ede5b0e7a90cbe1e1e0",
                "commitMessage": "\"Refactor rendering to string without checksum & React ID\n\nFinalize API for rendering to static markup.\nInstead of passing a boolean option to `renderComponentToString`, just use another method.\"",
                "committedDate": "2014-03-03T23:06:27Z"
            },
            {
                "commitId": "95edc396dfd07ed064240b5e2e1a1d5528d2d747",
                "commitMessage": "\"version bump to 0.10.0-alpha\"",
                "committedDate": "2014-02-20T06:53:29Z"
            },
            {
                "commitId": "8a47813baabcb200f5e0a496dd959cb0ef3adcf3",
                "commitMessage": "\"Update copyrights for 2014.\n\ngrep -rl Copyright 2013 Facebook static_upstream | xargs perl -pi -w -e s/Copyright 2013 Facebook/Copyright 2013-2014 Facebook/g;\n\nNot going to check in a script to do this since it will just change every year.\nCloses #1006\"",
                "committedDate": "2014-02-19T01:06:43Z"
            },
            {
                "commitId": "9125f68194cf99e55e027b6cc7ed34325c9855e4",
                "commitMessage": "\"0.9.0-rc1\"",
                "committedDate": "2014-02-17T01:38:52Z"
            },
            {
                "commitId": "b9cd2f0d3d83ee9652b230fecc4bc2dfe8e110f8",
                "commitMessage": "\"Merge branch reorg\"",
                "committedDate": "2014-02-05T03:51:55Z"
            },
            {
                "commitId": "1a39c3143cf5831e4a7f4d2f1a7dc32b33b41299",
                "commitMessage": "\"The great reorg of February 2014\"",
                "committedDate": "2014-02-05T03:49:58Z"
            },
            {
                "commitId": "945f788a4127c3428a5e3cf65fb6d1014c2e98a1",
                "commitMessage": "\"React.Children helpers\n\nAdds React.Children and map(), forEach() and only().\"",
                "committedDate": "2014-02-04T22:37:44Z"
            },
            {
                "commitId": "2c335b0e570e360d52359e7f774e5311f74d863b",
                "commitMessage": "\"Quieter devtools upsell\n\nCheck that were not in a iframe before upselling.\"",
                "committedDate": "2014-01-11T05:11:33Z"
            },
            {
                "commitId": "d8a8f6a88109e1ccdee02236909cbab101222185",
                "commitMessage": "\"Upsell dev tools\n\nPeople probably dont know these exist. Add some information about React\ndev mode as well as a link to the developer tools when using Chrome.\"",
                "committedDate": "2014-01-11T05:10:54Z"
            },
            {
                "commitId": "80d7d2d0f8ec0f4f1f3c2dbe613f36bda572ce11",
                "commitMessage": "\"Listen to events on demand\n\nFixes #381\n\nThis is a squashed version of https://github.com/facebook/react/pull/462\"",
                "committedDate": "2014-01-04T07:09:59Z"
            },
            {
                "commitId": "3431e3f847b148bd1aa527f375337c86b1029c58",
                "commitMessage": "\"Add `createMarkupForID`\n\nThis is a follow-up the to previous commit and does two things:\n\n - Moves `ReactMount.ATTR_NAME` to `DOMProperty.ID_ATTRIBUTE_NAME`.\n - Adds `DOMPropertyOperations.createMarkupForID` and uses it.\"",
                "committedDate": "2013-12-21T02:12:48Z"
            },
            {
                "commitId": "153b75f186a78c876cc11678d1abbdf5e13a3b5b",
                "commitMessage": "\"Bump version to 0.9.0-alpha\n\nThis is trunk, which will be 0.9. Well have to cherry-pick this whole\nthing into a 0.8 branch.\"",
                "committedDate": "2013-12-06T23:11:25Z"
            },
            {
                "commitId": "ef339c9cc44522ae39cb04bf9a102ac9261ecb45",
                "commitMessage": "\"Version bump, make tests work\"",
                "committedDate": "2013-12-06T19:56:30Z"
            },
            {
                "commitId": "1b8bdbe177f2f03c66e9288149316695fc004b41",
                "commitMessage": "\"Remove deprecated React.unmountAndReleaseReactRootNode\"",
                "committedDate": "2013-12-05T04:27:15Z"
            },
            {
                "commitId": "b91396be8eac3dc57ab1dbd2d3bb27c791d88169",
                "commitMessage": "\"Contexts\n\nSummary:\nadds `this.context` which you can think of as implicit props, which are passed automatically down the //ownership// hierarchy.\n\nContexts should be used sparingly, since they essentially allow components to communicate with descendants (in the ownership sense, not parenthood sense), which is not usually a good idea. You probably would only use contexts in places where youd normally use a global, but contexts allow you to override them for certain view subtrees which you cant do with globals.\n\nThe context starts out `null`:\n\n  var RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n    }\n  });\n\nYou should **never** mutate the context directly, just like props and state.\n\nYou can change the context of your children (the ones you own, not `this.props.children` or via other props) using the new `withContext` method on `React`:\n\n  var RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n      var children = React.withContext({foo: a, bar: b}, () => (\n        // In ChildComponent#render, this.context === {foo: a, bar: b}\n        <ChildComponent />\n      ));\n      // this.context === null\n    }\n  });\n\nContexts are merged, so a component can override its owners context **for its children**:\n\n  var ChildComponent = React.createClass({\n    render: function() {\n      // this.context === {foo: a, bar: b} (for the caller above)\n      var children = React.withContext({foo: c},() => (\n        // In GrandchildComponent#render,\n        // this.context === {foo: c, bar: b}\n        <GrandchildComponent />\n      ));\n      // this.context === {foo: a, bar: b}\n    }\n  });\"",
                "committedDate": "2013-11-18T18:56:24Z"
            },
            {
                "commitId": "48281a17e4f460020fa7b9c6dc8169a1b867327c",
                "commitMessage": "\"bump version to 0.6.0-alpha\"",
                "committedDate": "2013-10-16T05:39:28Z"
            },
            {
                "commitId": "fdb10c067999c81516cf6ac65262adb5ab59d3cf",
                "commitMessage": "\"React.__internals\n\nWe need access to internal modules in order to provide a single way for some\nprojects to work internally with @providesModule and externally.\"",
                "committedDate": "2013-10-07T22:07:20Z"
            },
            {
                "commitId": "832d9de0374496a3a99a0df7cf100305f1a24158",
                "commitMessage": "\"Rename unmountAndReleaseReactRootNode() -> unmountComponentAtNode()\n\nThis is just a better name; we may revisit the name later.\"",
                "committedDate": "2013-09-19T21:46:49Z"
            },
            {
                "commitId": "5ab68d9a0ddbb6c6c96895b75207d6ad57dc55b4",
                "commitMessage": "\"Hard code version instead of doing constant replacement\n\nThis isnt really ideal, but it makes it so that people managing to\nbuild with @providesModule still get a consistent experience (since this\nis what gets packed client-side with react-page-middleware anyway).\"",
                "committedDate": "2013-09-11T16:51:43Z"
            },
            {
                "commitId": "d853bbcf77a0c81734300dafb77f2afeb25f0ed5",
                "commitMessage": "\"Merge pull request #205 from spicyj/version\n\nAdd React.version\"",
                "committedDate": "2013-09-11T01:35:12Z"
            },
            {
                "commitId": "5fd4467bf76b89b76df8bf909922f92e4fd07f7c",
                "commitMessage": "\"Add React.version\n\ngetConfig needs to be a function because grunt.config.data.pkg.version isnt available at the time that grunt/config/jsx/jsx.js is required.\n\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.\"",
                "committedDate": "2013-09-10T00:01:06Z"
            },
            {
                "commitId": "3cf14e8f9b14ac05bcd24634daa26ac6772bd31b",
                "commitMessage": "\"Remove ReactChildren methods from React object\n\nThese are not terribly useful on this object and the naming of\n`React.forEachChildren` sucked anyway.\"",
                "committedDate": "2013-09-06T01:35:59Z"
            },
            {
                "commitId": "a42fd30fc2795909324c497350d0877a969b0cc7",
                "commitMessage": "\"Remove React.autoBind for real\n\nThis has been deprecated for a long while now, we should actually remove it.\"",
                "committedDate": "2013-09-03T21:27:00Z"
            },
            {
                "commitId": "4d8f0449d9d08528cc1aaba0aa09d1d90e12d3dd",
                "commitMessage": "\"React.isValidClass\n\nSometimes you may need to detect if a value is a valid React class constructor. This enables that and prevents future consumers from getting caught in the trap of depending on an internal implementation detail we might change.\n\nCurrently this works for classes created with `React.createClass` as well as `React.DOM.*`.\"",
                "committedDate": "2013-08-30T20:20:51Z"
            },
            {
                "commitId": "fce57abeca1d8388baaaac8511540aed486177dc",
                "commitMessage": "\"Benchmarking tool for React application performance\n\nReactAppPerf wraps core methods and logs info from them; theres no real\nUI at this point\"",
                "committedDate": "2013-08-23T21:05:11Z"
            },
            {
                "commitId": "9ef4e74ba2b3a494757b39b41b1ef99280bc5f83",
                "commitMessage": "\"ReactChildren\n\nInstead of changing `traverseAllChildren`, keep that around for perf\nreasons (for the hot code path `flattenChildren`)\n\nIntroduce `ReactChildren.map` and `ReactChildren.forEach`\nwhich mirrors `Array.prototype.map` and `Array.prototype.forEach`. This\ninvolves a rename of `mapAllChildren`\"",
                "committedDate": "2013-08-06T21:17:33Z"
            },
            {
                "commitId": "c629a0c5ad1adc82e01a982e7116eae632fa8d65",
                "commitMessage": "\"Revert \"Merge pull request #200 from spicyj/version\"\n\nThis reverts commit d8893228275cacc65a8632c7416bb023ab4c946f, reversing\nchanges made to 156dffb961ab15f577e0a6aab1abc5efd68f9a9b.\"",
                "committedDate": "2013-07-17T15:26:59Z"
            },
            {
                "commitId": "d8893228275cacc65a8632c7416bb023ab4c946f",
                "commitMessage": "\"Merge pull request #200 from spicyj/version\n\nAdd React.version\"",
                "committedDate": "2013-07-17T13:13:49Z"
            },
            {
                "commitId": "7be14d81552e8097eee6ed21a048fa23d4fce596",
                "commitMessage": "\"Add React.version\n\ngetConfig needs to be a function because grunt.config.data.pkg.version isnt available at the time that grunt/config/jsx/jsx.js is required.\n\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.\"",
                "committedDate": "2013-07-17T03:38:40Z"
            },
            {
                "commitId": "d76262731237365198ddd84216d108da96820055",
                "commitMessage": "\"Rename `props` to `propTypes`\n\nThis does two things:\n\n - Rename `props` to `propTypes`.\n - Rename `ReactProps` to `ReactPropTypes` (and `React.Props` to `React.PropTypes`)\"",
                "committedDate": "2013-07-10T22:06:18Z"
            },
            {
                "commitId": "0e9ee239a9c7b085771429ba990ae63aacde64ca",
                "commitMessage": "\"Merge branch master into async-state\"",
                "committedDate": "2013-07-01T23:08:57Z"
            },
            {
                "commitId": "ee21a604f31020fbaa898a4d0d61dc487198ce82",
                "commitMessage": "\"Delete files that accidentally got merged in\n\n\u0ca0_\u0ca0\"",
                "committedDate": "2013-06-28T21:54:07Z"
            },
            {
                "commitId": "43358157cff16e8945da9b816fcb858a59da81af",
                "commitMessage": "\"Merge branch textarea-update-value of git://github.com/spicyj/react\n\nConflicts:\n\tsrc/core/ReactDefaultInjection.js\"",
                "committedDate": "2013-06-28T21:30:47Z"
            },
            {
                "commitId": "44d6b947520aa3c3b252cbba1c95aa25811665d7",
                "commitMessage": "\"Merge remote-tracking branch origin/master into textarea-update-value\"",
                "committedDate": "2013-06-19T06:31:08Z"
            },
            {
                "commitId": "c1576fcf9744882fa59c2876fb4fd44720140307",
                "commitMessage": "\"Remove trailing whitespace\"",
                "committedDate": "2013-06-17T19:48:43Z"
            },
            {
                "commitId": "80edd6ca8729512c384faa593fef6d62b6b8c087",
                "commitMessage": "\"Merge pull request #89 from vjeux/patch-4\n\nExposing ReactProps as React.Props\"",
                "committedDate": "2013-06-14T04:08:10Z"
            },
            {
                "commitId": "34173638d40dff2cd2dbac66f04623b3b1f0516f",
                "commitMessage": "\"Exposing ReactProps as React.Props\n\nRight now, even though ReactProps is committed, there is no way to use it as it is not exposed.\"",
                "committedDate": "2013-06-13T00:28:25Z"
            },
            {
                "commitId": "37cde3d864406f2af65dc03eae45a216ea969600",
                "commitMessage": "\"Stabilize minimal server rendering API\n\nThis is a pretty killer feature and the API is simple. I know its another API method on React, but I think its\nthe only way.\"",
                "committedDate": "2013-06-10T23:17:26Z"
            },
            {
                "commitId": "582359aeea9b7c437cfc12b8e4f3366aaacf11a1",
                "commitMessage": "\"Remove React.createComponentRenderer\n\nRemove ReactMount.createComponentRenderer because it does not function\ncorrectly.\n\n  var f = React.createComponentRenderer(<div />);\n\n  var container1 = document.createElement(div);\n  var container2 = document.createElement(div);\n  f(container1);\n  f(container2); // error because mounting same instance into new root\"",
                "committedDate": "2013-06-08T05:10:06Z"
            },
            {
                "commitId": "75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4",
                "commitMessage": "\"Initial public release\"",
                "committedDate": "2013-05-29T19:54:02Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "Determine the developers that had the most unfixed bugs?",
        "number": 7,
        "category": 2,
        "response": "The developers that had the most unfixed bugs are \"sophiebits,\" \"leebyron,\" and \"benjamn,\" each with 1 unfixed bug.",
        "chain_of_thought": "To determine the developers that had the most unfixed bugs, we need to interpret the question. The most probable interpretation is to find the users who have authored commits that introduced issues (bugs) which have not been fixed. \n\nTo achieve this, we need to identify the relevant nodes and relationships. The User node represents developers, and the Commit node represents the commits they authored. The Issue node represents bugs. The relevant relationships are:\n- `(:User)-[:author]->(:Commit)`: to find the commits authored by a user.\n- `(:Commit)-[:introduced]->(:Issue)`: to find the issues introduced by a commit.\n- `(:Commit)-[:fixed]->(:Issue)`: to find the issues fixed by a commit.\n\nWe need to find issues that have been introduced but not fixed. This means we need to find issues that have an `introduced` relationship but do not have a `fixed` relationship.\n\nHere's the step-by-step query construction:\n\n1. Match users who authored commits that introduced issues:\n   ```cypher\n   MATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\n   ```\n\n2. Ensure these issues have not been fixed by checking for the absence of a `fixed` relationship:\n   ```cypher\n   WHERE NOT EXISTS {\n       MATCH (c2:Commit)-[:fixed]->(i)\n   }\n   ```\n\n3. Aggregate the number of unfixed issues by each user:\n   ```cypher\n   RETURN u.login AS developer, COUNT(i) AS unfixed_bugs\n   ```\n\n4. Sort the results in descending order to find the developers with the most unfixed bugs:\n   ```cypher\n   ORDER BY unfixed_bugs DESC\n   ```\n\nTherefore, the complete query is:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE NOT EXISTS {\n    MATCH (c2:Commit)-[:fixed]->(i)\n}\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n```",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE NOT EXISTS {\n    MATCH (c2:Commit)-[:fixed]->(i)\n}\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n",
        "result": [
            {
                "developer": "sophiebits",
                "unfixed_bugs": 1
            },
            {
                "developer": "leebyron",
                "unfixed_bugs": 1
            },
            {
                "developer": "benjamn",
                "unfixed_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 0,
        "label": "partial"
    },
    {
        "question": "which developer has most number of bugs yet to be fixed?",
        "number": 8,
        "category": 2,
        "response": "The developer with the most number of bugs yet to be fixed is 'bvaughn', with 19 open issues.",
        "chain_of_thought": "To determine which developer has the most number of bugs yet to be fixed, we need to identify the issues that are still open and find the user who is responsible for them. The relevant nodes are the User and Issue nodes. The relevant relationships are the assigned relationship to find the user assigned to the issue and the creates relationship to find the user who created the issue. The state property of the Issue node will help us identify open issues.\n\nHere's how we can interpret and construct the query:\n\n1. **Identify Open Issues**: We need to find issues that are still open. This can be done by filtering issues where the state is \"open\".\n\n2. **Find Assigned Users**: We need to find users who are assigned to these open issues.\n\n3. **Count Open Issues per User**: We need to count the number of open issues each user is assigned to.\n\nThe query to achieve this is:\n\n```cypher\nMATCH (u:User)-[:assigned]->(i:Issue {state: 'open'})\nRETURN u.login AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n```\n\nThis query will return the developer with the most open issues assigned to them, indicating the developer with the most number of bugs yet to be fixed.",
        "query": "cypher\nMATCH (u:User)-[:assigned]->(i:Issue {state: 'open'})\nRETURN u.login AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "bvaughn",
                "open_issues": 19
            }
        ],
        "isAmbiguous": true,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "Determine the developers that fixed the most bugs in ReactDOMInput.js?",
        "number": 9,
        "category": 3,
        "response": "The developers who fixed the most bugs in ReactDOMInput.js are Sophie Alpert and Hemakshi Sachdev, each fixing 1 bug.",
        "chain_of_thought": "To determine the developers that fixed the most bugs in `ReactDOMInput.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We are interested in developers (User nodes) who have fixed bugs (Commit nodes) in a specific file (`ReactDOMInput.js`, which is a File node).\n   - The relevant relationships are:\n     - `author` between User and Commit to identify which user authored the commit.\n     - `fixed` between Commit and Issue to identify which commit fixed a bug.\n     - `impacted` between Issue and File to identify which file was impacted by the bug.\n\n2. **Filter for the specific file**: \n   - We need to filter the File nodes to only include `ReactDOMInput.js`.\n\n3. **Aggregate the number of bugs fixed by each developer**:\n   - Count the number of times each developer has fixed a bug in `ReactDOMInput.js`.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'ReactDOMInput.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n```\n\nThis query will return a list of developers and the number of bugs they have fixed in `ReactDOMInput.js`, sorted in descending order by the number of bugs fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'ReactDOMInput.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n",
        "result": [
            {
                "developer": "Sophie Alpert",
                "bugs_fixed": 1
            },
            {
                "developer": "Hemakshi Sachdev",
                "bugs_fixed": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "who did most fixed bugs in TapEventPlugin.js?",
        "number": 10,
        "category": 3,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To determine who fixed the most bugs in the file \"TapEventPlugin.js,\" we need to follow these steps:\n\n1. Identify the relevant nodes and relationships. We are interested in the User, Commit, and File nodes. The relationships involved are:\n   - `author` between User and Commit to find out who authored the commits.\n   - `changed` between Commit and File to identify the file modifications.\n   - `fixed` between Commit and Issue to determine which commits fixed bugs.\n\n2. Filter the File node to find the specific file \"TapEventPlugin.js.\"\n\n3. Count the number of times each user has fixed bugs in this file.\n\nThe query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(:Issue)<-[:impacted]-(f:File {name: 'TapEventPlugin.js'})\nRETURN u.name AS developer, COUNT(c) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n```\n\nThis query will return the user who has fixed the most bugs in the file \"TapEventPlugin.js.\"",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(:Issue)<-[:impacted]-(f:File {name: 'TapEventPlugin.js'})\nRETURN u.name AS developer, COUNT(c) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "incorrect"
    },
    {
        "question": "Determine the files that introduce the most bugs?",
        "number": 11,
        "category": 2,
        "response": "The file 'ReactDOMInput-test.js' has introduced the most bugs, with a total of 3 bugs.",
        "chain_of_thought": "To determine the files that introduce the most bugs, we need to identify the files that are associated with issues introduced by commits. The schema provides a way to trace this through the `Commit` and `Issue` nodes, using the `introduced` relationship to link commits to issues and the `impacted` relationship to link issues to files.\n\nHere's the step-by-step breakdown:\n\n1. **Identify the relevant nodes and relationships**:\n   - We need to find the `File` nodes that are linked to `Issue` nodes.\n   - The `Commit` nodes are linked to `Issue` nodes via the `introduced` relationship.\n   - The `Issue` nodes are linked to `File` nodes via the `impacted` relationship.\n\n2. **Formulate the query**:\n   - Start by matching the `Commit` nodes that introduced issues.\n   - Then, find the `Issue` nodes linked to these commits.\n   - Finally, find the `File` nodes impacted by these issues.\n\n3. **Aggregate and sort the results**:\n   - Count the number of times each file is associated with an introduced issue.\n   - Sort the files by the number of introduced issues in descending order to find the files that introduce the most bugs.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n```\n\nThis query will return the top 10 files that are associated with the most introduced bugs, based on the number of issues linked to them.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "ReactDOMInput-test.js",
                "bug_count": 3
            },
            {
                "file": "ReactDOMInput.js",
                "bug_count": 2
            },
            {
                "file": "ExhaustiveDeps.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMComponent.js",
                "bug_count": 2
            },
            {
                "file": "profilingCache-test.js.snap",
                "bug_count": 2
            },
            {
                "file": "renderer.js",
                "bug_count": 2
            },
            {
                "file": "package.json",
                "bug_count": 2
            },
            {
                "file": "profilingCommitTreeBuilder-test.js.snap",
                "bug_count": 1
            },
            {
                "file": "store.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberWorkLoop.js",
                "bug_count": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "What are the most buggy files?",
        "number": 12,
        "category": 2,
        "response": "The most buggy files, based on the number of issues impacting them, are:\n\n1. ReactDOMInput-test.js with 3 issues.\n2. profilingCache-test.js.snap with 2 issues.\n3. ReactDOMComponent.js with 2 issues.\n4. ChangeEventPlugin.js with 2 issues.\n5. renderer.js with 2 issues.\n6. ExhaustiveDeps.js with 2 issues.\n7. package.json with 2 issues.\n8. ReactDOMInput.js with 2 issues.",
        "chain_of_thought": "To determine the most buggy files, we need to identify files that have been impacted by the most issues. In the given schema, the relevant nodes are the `File` and `Issue` nodes. The relationship that connects these nodes is the `impacted` relationship, which indicates that a file is associated with an issue.\n\nThe interpretation of \"most buggy files\" is the files that have been linked to the highest number of issues. Therefore, we need to count the number of issues impacting each file and sort them in descending order to find the files with the most issues.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n```\n\nThis query matches all `Issue` nodes that have an `impacted` relationship with `File` nodes, counts the number of issues for each file, and returns the top 10 files with the highest issue count.",
        "query": "cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "ReactDOMInput-test.js",
                "issue_count": 3
            },
            {
                "file": "profilingCache-test.js.snap",
                "issue_count": 2
            },
            {
                "file": "ReactDOMComponent.js",
                "issue_count": 2
            },
            {
                "file": "ChangeEventPlugin.js",
                "issue_count": 2
            },
            {
                "file": "renderer.js",
                "issue_count": 2
            },
            {
                "file": "ExhaustiveDeps.js",
                "issue_count": 2
            },
            {
                "file": "package.json",
                "issue_count": 2
            },
            {
                "file": "ReactDOMInput.js",
                "issue_count": 2
            },
            {
                "file": "03-interactivity-and-dynamic-uis.zh-CN.md",
                "issue_count": 1
            },
            {
                "file": "03-interactivity-and-dynamic-uis.md",
                "issue_count": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "what are the buggy commits that happened on March 1, 2022?",
        "number": 13,
        "category": 2,
        "response": "The buggy commit that happened on March 1, 2022, is identified by the ID '17806594cc28284fe195f918e8d77de3516848ec'.",
        "chain_of_thought": "To determine the buggy commits that happened on March 1, 2022, we need to identify commits that introduced bugs on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship between Commit and Issue. We also need to filter the commits based on the committedDate property to match March 1, 2022.\n\nFirst, we need to format the date in ISO format. Since the date is provided without a specific time, we will use a regex to match any time on that date.\n\nThe query to find the buggy commits on March 1, 2022, is as follows:\n\n1. Match commits that introduced issues:\n   ```cypher\n   MATCH (c:Commit)-[:introduced]->(:Issue)\n   ```\n\n2. Filter the commits by the committedDate to match March 1, 2022:\n   ```cypher\n   WHERE c.committedDate =~ '2022-03-01T.*'\n   ```\n\n3. Return the commit IDs of the buggy commits:\n   ```cypher\n   RETURN c.id AS buggyCommit\n   ```\n\nTherefore, the complete query is:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-03-01T.*'\nRETURN c.id AS buggyCommit\n```",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-03-01T.*'\nRETURN c.id AS buggyCommit\n",
        "result": [
            {
                "buggyCommit": "17806594cc28284fe195f918e8d77de3516848ec"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "what commits were buggy on April 9, 2021?",
        "number": 14,
        "category": 2,
        "response": "I don't know, as there are no commits identified as buggy on April 9, 2021. Can I help with anything else?",
        "chain_of_thought": "To determine which commits were buggy on April 9, 2021, we need to identify the commits that introduced issues on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship. We also need to filter the issues based on their creation date, which is represented by the created_at property in the Issue node.\n\nFirst, we need to match the commits that introduced issues:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\n```\n\nNext, we filter the issues to only include those created on April 9, 2021. We use the created_at property and format the date in ISO format:\n```cypher\nWHERE i.created_at =~ '2021-04-09T.*'\n```\n\nFinally, we return the commit IDs that introduced these issues:\n```cypher\nRETURN c.id AS buggy_commit\n```\n\nTherefore, the complete query is:\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2021-04-09T.*'\nRETURN c.id AS buggy_commit\n```",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2021-04-09T.*'\nRETURN c.id AS buggy_commit\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "incorrect"
    },
    {
        "question": "commit(s) that fixed the bug ticket 10217?",
        "number": 15,
        "category": 2,
        "response": "The commit that fixed the bug ticket 10217 is identified by the commit ID `2e757790751ab8d165fc4df37e90a59d914c4527`. The commit message is: \"Fix incorrect data in compositionend event with Korean IME on IE11 (#10217) (#12563)\\n\\n* Add isUsingKoreanIME function to check if a composition event was triggered by Korean IME\\r\\n\\r\\n* Add Korean IME check alongside useFallbackCompositionData and disable fallback mode with Korean IME\".",
        "chain_of_thought": "To find the commit(s) that fixed the bug ticket with the number 10217, we need to identify the relevant nodes and relationships. The bug ticket corresponds to an Issue node, and we are looking for Commit nodes that have a fixed relationship with this Issue node.\n\nHere's how we can construct the query:\n\n1. Identify the Issue node with the number 10217.\n2. Find the Commit nodes that have a fixed relationship with this Issue node.\n\nThe query would look like this:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 10217})\nRETURN c.id AS commit_id, c.message AS commit_message\n```\n\nThis query matches Commit nodes that have a fixed relationship with the Issue node having the number 10217 and returns the commit ID and message for each of these commits.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 10217})\nRETURN c.id AS commit_id, c.message AS commit_message\n",
        "result": [
            {
                "commit_id": "2e757790751ab8d165fc4df37e90a59d914c4527",
                "commit_message": "\"Fix incorrect data in compositionend event with Korean IME on IE11 (#10217) (#12563)\n\n* Add isUsingKoreanIME function to check if a composition event was triggered by Korean IME\r\n\r\n* Add Korean IME check alongside useFallbackCompositionData and disable fallback mode with Korean IME\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "which commit fixed the bug ticket 21442?",
        "number": 16,
        "category": 2,
        "response": "The commit that fixed the bug ticket 21442 is identified by the commit ID '1e3383a41154cb32d8d6b78b2451ee4dabfcb973'.",
        "chain_of_thought": "To determine which commit fixed the bug associated with ticket 21442, we need to identify the relevant nodes and relationships. The ticket number corresponds to an Issue node, and we are interested in finding the Commit node that has a fixed relationship with this Issue node.\n\nHere's the step-by-step breakdown:\n\n1. **Identify the Issue Node**: We need to find the Issue node with the number 21442.\n2. **Find the Commit Node**: We need to find the Commit node that has a fixed relationship with the identified Issue node.\n\nThe relevant relationship between Commit and Issue for this question is the fixed relationship.\n\nTherefore, the query to find the commit that fixed the bug ticket 21442 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 21442})\nRETURN c.id AS commit_id\n```\n\nThis query will return the ID of the commit that fixed the bug associated with ticket number 21442.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 21442})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "1e3383a41154cb32d8d6b78b2451ee4dabfcb973"
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "Determine the bug(s) that were introduced because of commit hash f912186012f17858b9d25466c658a46e25093941?",
        "number": 17,
        "category": 2,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To determine the bug(s) introduced by a specific commit, we need to identify the relevant nodes and relationships. The commit in question is identified by its hash, which corresponds to the `Commit` node. We are interested in finding the `Issue` nodes that were introduced by this commit. The relevant relationship between a `Commit` and an `Issue` for this question is the `introduced` relationship.\n\nTherefore, the query to find the bug(s) introduced by the commit with hash `f912186012f17858b9d25466c658a46e25093941` is:\n\n```cypher\nMATCH (c:Commit {id: 'f912186012f17858b9d25466c658a46e25093941'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query matches the commit with the specified hash and finds all issues that were introduced by this commit, returning the issue ID, title, and URL for each issue.",
        "query": "cypher\nMATCH (c:Commit {id: 'f912186012f17858b9d25466c658a46e25093941'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "what are the bugs caused by commit 2e757790751ab8d165fc4df37e90a59d914c4527?",
        "number": 18,
        "category": 2,
        "response": "I don't know. Can I help with anything else?",
        "chain_of_thought": "To determine the bugs caused by a specific commit, we need to identify the issues that were introduced by that commit. In the schema, the relevant nodes are the Commit and Issue nodes. The relationship that connects a commit to an issue it introduced is the introduced relationship.\n\nHere's how we can construct the query:\n\n1. Identify the specific commit using its ID.\n2. Use the introduced relationship to find the issues that were introduced by this commit.\n\nThe query to find the bugs (issues) caused by commit `2e757790751ab8d165fc4df37e90a59d914c4527` is:\n\n```cypher\nMATCH (c:Commit {id: '2e757790751ab8d165fc4df37e90a59d914c4527'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query will return the ID, title, and URL of the issues that were introduced by the specified commit.",
        "query": "cypher\nMATCH (c:Commit {id: '2e757790751ab8d165fc4df37e90a59d914c4527'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "Determine the percentage of the fixing commits that introduced bugs on Nov. 2013?",
        "number": 19,
        "category": 3,
        "response": "The percentage of the fixing commits that introduced bugs in November 2013 is 20.0%.",
        "chain_of_thought": "To determine the percentage of fixing commits that introduced bugs in November 2013, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: We need to find commits that both fixed and introduced issues. The relevant nodes are `Commit` and `Issue`. The relationships are `[:fixed]` for fixing issues and `[:introduced]` for introducing issues.\n\n2. **Filter by date**: We need to filter the commits by the date they were committed. The `committedDate` property of the `Commit` node should be used for this. We are interested in commits from November 2013, so we will use a regex to match dates in that month.\n\n3. **Calculate the total number of fixing commits**: Find all commits that fixed issues in November 2013.\n\n4. **Calculate the number of fixing commits that also introduced issues**: Find all commits that both fixed and introduced issues in November 2013.\n\n5. **Calculate the percentage**: Divide the number of fixing commits that introduced issues by the total number of fixing commits and multiply by 100 to get the percentage.\n\nHere is the Cypher query to achieve this:\n\n```cypher\n// Step 1: Find all fixing commits in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\n\n// Step 2: Count total fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Step 3: Find fixing commits that also introduced issues\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nAND (c)-[:introduced]->(:Issue)\n\n// Step 4: Count fixing commits that introduced issues\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Step 5: Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n```\n\nThis query first calculates the total number of fixing commits in November 2013, then finds how many of those also introduced issues, and finally computes the percentage.",
        "query": "cypher\n// Step 1: Find all fixing commits in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\n\n// Step 2: Count total fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Step 3: Find fixing commits that also introduced issues\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nAND (c)-[:introduced]->(:Issue)\n\n// Step 4: Count fixing commits that introduced issues\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Step 5: Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n",
        "result": [
            {
                "percentage": 20.0
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "How many fixing commits caused bugs on Nov. 2013?",
        "number": 20,
        "category": 3,
        "response": "There were 2 fixing commits that caused bugs in November 2013.",
        "chain_of_thought": "To address the question, we need to determine the number of commits that both fixed an issue and introduced a bug in November 2013. The schema provides us with the necessary relationships and properties to achieve this.\n\n1. **Identify the relevant nodes and relationships:**\n   - We are interested in `Commit` nodes that have both `fixed` and `introduced` relationships with `Issue` nodes.\n   - We need to filter these commits by the date they were committed, specifically in November 2013.\n\n2. **Filter commits by date:**\n   - The `committedDate` property of the `Commit` node will be used to filter commits from November 2013. The date should be in the format `YYYY-MM-DDTHH:MM:SSZ`, but since we are only interested in the month and year, we can use a regex to match this.\n\n3. **Construct the query:**\n   - We will match commits that have both `fixed` and `introduced` relationships with issues.\n   - We will filter these commits by their `committedDate` to ensure they fall within November 2013.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nRETURN COUNT(c) AS fixingCommitsCausingBugs\n```\n\nThis query matches commits that have both `fixed` and `introduced` relationships with issues, filters them by the `committedDate` to include only those from November 2013, and returns the count of such commits.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nRETURN COUNT(c) AS fixingCommitsCausingBugs\n",
        "result": [
            {
                "fixingCommitsCausingBugs": 2
            }
        ],
        "isAmbiguous": false,
        "iteration": 0,
        "label": "correct"
    },
    {
        "question": "how many commits happened in last month?",
        "number": 1,
        "category": 1,
        "response": "There were 166 commits made in the last month.",
        "chain_of_thought": "To determine how many commits happened in the last month, we need to consider the current date, which is 2024-08-26T00:00:00Z. The last month would be from 2024-07-26T00:00:00Z to 2024-08-26T00:00:00Z.\n\nThe relevant nodes for this query are the Commit nodes, and we need to filter these nodes based on the `committedDate` property. The `committedDate` should be within the specified date range.\n\nHere's the Cypher query to find the number of commits that happened in the last month:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate < \"2024-08-26T00:00:00Z\"\nRETURN COUNT(c) AS numberOfCommits\n```\n\nThis query matches all Commit nodes and filters them based on the `committedDate` property to ensure they fall within the last month. It then returns the count of these commits.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate < \"2024-08-26T00:00:00Z\"\nRETURN COUNT(c) AS numberOfCommits\n",
        "result": [
            {
                "numberOfCommits": 166
            }
        ],
        "isAmbiguous": true,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "what is the latest commit?",
        "number": 2,
        "category": 1,
        "response": "The latest commit has the ID 'a960b92cb93e7d006e5e8de850f9b8b51f655c90' and was committed on August 20, 2024, at 02:34:20 UTC.",
        "chain_of_thought": "To determine the latest commit, we need to identify the Commit node with the most recent committedDate. The relevant property for this query is committedDate, which is a string representing the date and time when the commit was made. We will sort the commits by this date in descending order and return the top result.\n\nThe query to find the latest commit is as follows:\n\n```cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n```\n\nThis query matches all Commit nodes, orders them by the committedDate in descending order, and returns the commit ID and date of the latest commit.",
        "query": "cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n",
        "result": [
            {
                "commitId": "a960b92cb93e7d006e5e8de850f9b8b51f655c90",
                "commitDate": "2024-08-20T02:34:20Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "can you tell me the details of the commits between May 27th 2018 and May 31st 2018?",
        "number": 3,
        "category": 1,
        "response": "Certainly! Here are the details of the commits made between May 27th, 2018, and May 31st, 2018:\n\n1. **Commit ID**: a32f857ac78ad1b33c61e6fbd47ccd57f21155c2\n   - **Message**: \"Use --frozen-lockfile for Yarn in CI build (#12914)\"\n   - **Additions**: 1\n   - **Deletions**: 1\n   - **Changed Files**: 1\n   - **Comments Count**: 0\n   - **Committed Date**: 2018-05-28T18:52:42Z\n\n2. **Commit ID**: aa85b0fd5ffc92de38720c29833a54c67285abfb\n   - **Message**: \"Upgrade to Jest 23 (#12894)\"\n   - **Additions**: 602\n   - **Deletions**: 1004\n   - **Changed Files**: 28\n   - **Comments Count**: 0\n   - **Committed Date**: 2018-05-28T22:03:15Z\n\n3. **Commit ID**: 8aeea5afa2d688968545b1cc5a30a48ddc0fa503\n   - **Message**: \"Do not assign node.value on input creation if no change will occur (#12925)\"\n   - **Additions**: 30\n   - **Deletions**: 7\n   - **Changed Files**: 2\n   - **Comments Count**: 0\n   - **Committed Date**: 2018-05-29T13:48:58Z\n\n4. **Commit ID**: 4f1f909b5b5ffe28675eed3fdb645dfaf975c1ef\n   - **Message**: \"Disable Flow on AppVeyor again\"\n   - **Additions**: 1\n   - **Deletions**: 1\n   - **Changed Files**: 1\n   - **Comments Count**: 0\n   - **Committed Date**: 2018-05-29T14:47:14Z\n\n5. **Commit ID**: 83f76e4db9a060911774f497b5715bd4d4f42a9c\n   - **Message**: \"ForwardRefs supports propTypes (#12911)\"\n   - **Additions**: 194\n   - **Deletions**: 103\n   - **Changed Files**: 3\n   - **Comments Count**: 0\n   - **Committed Date**: 2018-05-29T16:50:49Z\n\n6. **Commit ID**: 001f9ef4717a0928b4875cbad3421a17f49f95a5\n   - **Message**: \"Release script prompts for NPM 2FA code (#12908)\"\n   - **Additions**: 48\n   - **Deletions**: 3\n   - **Changed Files**: 6\n   - **Comments Count**: 0\n   - **Committed Date**: 2018-05-29T19:50:04Z\n\n7. **Commit ID**: ff724d3c286a1753723ea71e8c046498ed1aac98\n   - **Message**: \"[scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)\"\n   - **Additions**: 64\n   - **Deletions**: 5\n   - **Changed Files**: 8\n   - **Comments Count**: 0\n   - **Committed Date**: 2018-05-29T20:30:04Z\n\n8. **Commit ID**: 79a740c6e32ca300d4e7ff55ab06de172d4237fd\n   - **Message**: \"Rename variables to remove references to global global (#12931)\"\n   - **Additions**: 10\n   - **Deletions**: 10\n   - **Changed Files**: 2\n   - **Comments Count**: 0\n   - **Committed Date**: 2018-05-30T00:54:38Z\n\n9. **Commit ID**: e0a03c1b4d84453122c4e9d1a5e0cec52bef9066\n   - **Message**: \"Extend input type check in selection capabilities (#12062) (#12135)\"\n   - **Additions**: 71\n   - **Deletions**: 2\n   - **Changed Files**: 3\n   - **Comments Count**: 0\n   - **Committed Date**: 2018-05-30T11:08:21Z\n\n10. **Commit ID**: ae57b125c798418fb6846094cfa911530206e074\n    - **Message**: \"[simple-cache-provider] Use LRU cache eviction (#12851)\"\n    - **Additions**: 153\n    - **Deletions**: 31\n    - **Changed Files**: 2\n    - **Comments Count**: 0\n    - **Committed Date**: 2018-05-30T20:12:29Z\n\nThese commits include various changes such as updates to dependencies, bug fixes, enhancements, and other modifications to the codebase.",
        "chain_of_thought": "To address the question, we need to find the details of commits made between May 27th, 2018, and May 31st, 2018. The relevant node for this query is the Commit node, and we will use the `committedDate` property to filter the commits within the specified date range.\n\nFirst, we need to format the dates in ISO format. The start date is \"2018-05-27T00:00:00Z\" and the end date is \"2018-05-31T23:59:59Z\" to include the entire day of May 31st.\n\nThe query will match all commits and filter them based on the `committedDate` property to fall within the specified range. We will then return the details of these commits.\n\nThe complete query is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2018-05-27T00:00:00Z\" AND c.committedDate <= \"2018-05-31T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n```\n\nThis query will return the details of the commits made between May 27th, 2018, and May 31st, 2018, ordered by the commit date.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2018-05-27T00:00:00Z\" AND c.committedDate <= \"2018-05-31T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n",
        "result": [
            {
                "commitId": "a32f857ac78ad1b33c61e6fbd47ccd57f21155c2",
                "message": "\"Use --frozen-lockfile for Yarn in CI build (#12914)\n\nCI builds should always use the `--frozen-lockfile` option. It will fail the build if the lockfile is out-of-date:\r\n\r\n> If you need reproducible dependencies, which is usually the case with the continuous integration systems, you should pass --frozen-lockfile flag.\r\n\r\n(https://yarnpkg.com/en/docs/cli/install/)\"",
                "additions": 1,
                "deletions": 1,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-28T18:52:42Z"
            },
            {
                "commitId": "aa85b0fd5ffc92de38720c29833a54c67285abfb",
                "message": "\"Upgrade to Jest 23 (#12894)\n\n* Upgrade to Jest 23 beta\r\n\r\n* prefer `.toHaveBeenCalledTimes`\r\n\r\n* 23 stable\"",
                "additions": 602,
                "deletions": 1004,
                "changedFiles": 28,
                "commentsCount": 0,
                "committedDate": "2018-05-28T22:03:15Z"
            },
            {
                "commitId": "8aeea5afa2d688968545b1cc5a30a48ddc0fa503",
                "message": "\"Do not assign node.value on input creation if no change will occur (#12925)\n\nThis commit fixes an issue where assigning an empty string to required\r\ntext inputs triggers the invalid state in Firefox (~60.0.1).\r\n\r\nIt does this by first comparing the initial state value to the current\r\nvalue property on the text element. This:\r\n\r\n1. Prevents the validation issue\r\n2. Avoids an extra DOM Mutation in some cases\"",
                "additions": 30,
                "deletions": 7,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-29T13:48:58Z"
            },
            {
                "commitId": "4f1f909b5b5ffe28675eed3fdb645dfaf975c1ef",
                "message": "\"Disable Flow on AppVeyor again\n\nIt runs out of memory.\"",
                "additions": 1,
                "deletions": 1,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-29T14:47:14Z"
            },
            {
                "commitId": "83f76e4db9a060911774f497b5715bd4d4f42a9c",
                "message": "\"ForwardRefs supports propTypes (#12911)\n\n* Moved some internal forwardRef tests to not be internal\r\n* ForwardRef supports propTypes\"",
                "additions": 194,
                "deletions": 103,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-29T16:50:49Z"
            },
            {
                "commitId": "001f9ef4717a0928b4875cbad3421a17f49f95a5",
                "message": "\"Release script prompts for NPM 2FA code (#12908)\n\n* Release script prompts for NPM 2fa code\"",
                "additions": 48,
                "deletions": 3,
                "changedFiles": 6,
                "commentsCount": 0,
                "committedDate": "2018-05-29T19:50:04Z"
            },
            {
                "commitId": "ff724d3c286a1753723ea71e8c046498ed1aac98",
                "message": "\"[scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)\n\n* Use local references to global things inside scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nWe want to avoid initially calling one version of an API and then later\r\naccessing a polyfilled version.\r\n\r\n**test plan:**\r\nRun existing tests.\r\n\r\n* Shim ReactScheduler for www\r\n\r\n**what is the change?:**\r\nIn www we want to reference the separate build of ReactScheduler,\r\nwhich allows treating it as a separate module internally.\r\n\r\n**why make this change?:**\r\nWe need to require the ReactScheduler before our rAF polyfill activates,\r\nin order to customize which custom behaviors we want.\r\n\r\nThis is also a step towards being able to experiment with using it\r\noutside of React.\r\n\r\n**test plan:**\r\nRan tests, ran the build, and ran `test-build`.\r\n\r\n* Generate a bundle for fb-www\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nSplitting out the schedule module allows us to load it before\r\npolyfills kick in for rAF and other APIs.\r\n\r\nAnd long term we want to split this into a separate module anyway, this\r\nis a step towards that.\r\n\r\n**test plan:**\r\nIll run the sync next week and verify that this all works. :)\r\n\r\n* ran prettier\r\n\r\n* fix rebase issues\r\n\r\n* Change names of variables used for holding globals\"",
                "additions": 64,
                "deletions": 5,
                "changedFiles": 8,
                "commentsCount": 0,
                "committedDate": "2018-05-29T20:30:04Z"
            },
            {
                "commitId": "79a740c6e32ca300d4e7ff55ab06de172d4237fd",
                "message": "\"Rename variables to remove references to global global (#12931)\n\n**what is the change?:**\r\nIn a recent PR we were referencing some global variables and storing\r\nlocal references to them.\r\n\r\nTo make things more natural, we co-opted the original name of the global\r\nfor our local reference. To make this work with Flow, we get the\r\noriginal reference from window.requestAnimationFrame and assign it to\r\nconst requestAnimationFrame.\r\n\r\nSometimes React is used in an environment where window is not defined\r\n- in that case we need to use something else, or hide the window\r\nreference somewhere.\r\n\r\nWe opted to use global thinking that Babel transforms would fill that\r\nin with the proper thing.\r\n\r\nBut for some of our fixtures we are not doing that transform on the\r\nbundle.\r\n\r\n**why make this change?:**\r\nI want to unbreak this on master and then investigate more about what we\r\nshould do to fix this.\r\n\r\n**test plan:**\r\nrun `yarn build` and open the fixtures.\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12930\"",
                "additions": 10,
                "deletions": 10,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-30T00:54:38Z"
            },
            {
                "commitId": "e0a03c1b4d84453122c4e9d1a5e0cec52bef9066",
                "message": "\"Extend input type check in selection capabilities (#12062) (#12135)\n\n* Do not set selection when prior selection is undefined (#12062)\r\n\r\n`restoreSelection` did not account for input elements that have changed\r\ntype after the commit phase. The new `text` input supported selection\r\nbut the old `email` did not and `setSelection` was incorrectly trying to\r\nrestore `null` selection state.\r\n\r\nWe also extend input type check in selection capabilities to cover cases\r\nwhere input type is `search`, `tel`, `url`, or `password`.\r\n\r\n* Add link to HTML spec for element types and selection\r\n\r\n* Add reset button to ReplaceEmailInput\r\n\r\nThis commit adds a button to restore the original state of the\r\nReplaceEmailInput fixture so that it can be run multiple times without\r\nrefreshing the page.\"",
                "additions": 71,
                "deletions": 2,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-30T11:08:21Z"
            },
            {
                "commitId": "ae57b125c798418fb6846094cfa911530206e074",
                "message": "\"[simple-cache-provider] Use LRU cache eviction (#12851)\n\n* [simple-cache-provider] Use LRU cache eviction\r\n\r\nMax size is hard-coded to 500. In the future, we should make this\r\nconfigurable per resource.\r\n\r\n* Evict PAGE_SIZE records from cache when max limit is reached\"",
                "additions": 153,
                "deletions": 31,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-30T20:12:29Z"
            },
            {
                "commitId": "524a74331399fd7102037c878f327afbd5e14f53",
                "message": "\"Fix for Flow issues in SimpleCacheProvider (#12942)\n\n* Fix for Flow issues in SimpleCacheProvider\r\n\r\n**what is the change?:**\r\n- Fixed some flow errors which were somehow swallowed when CI\r\noriginally\r\n- Loosen flow types to avoid issue with recursive loop in Flow; https://github.com/facebook/flow/issues/5870\r\n\r\n**why make this change?:**\r\nTo unbreak master and unblock other changes we want to make.\r\n\r\n**test plan:**\r\nFlow passes!\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12941\r\n\r\n* Fix lints\"",
                "additions": 42,
                "deletions": 21,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:31:41Z"
            },
            {
                "commitId": "3118ed9d640ad28af306de308301f4fcd029ffca",
                "message": "\"Expose unstable_interactiveUpdates on ReactDOM (#12943)\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:31:59Z"
            },
            {
                "commitId": "15767a8f8f798f0d80df4ddbc7cfaebdc29996a8",
                "message": "\"[scheduler] 5/n Error handling in scheduler (#12920)\n\n* Initial failing unit test for error handling in schedule\r\n\r\n**what is the change?:**\r\nsee title\r\n\r\n**why make this change?:**\r\nAdding tests for the error handling behavior we are about to add. This\r\ntest is failing, which gives us the chance to make it pass.\r\n\r\nWrote skeletons of some other tests to add.\r\n\r\nUnit testing this way is really hacky, and Im also adding to the\r\nfixture to test this in the real browser environment.\r\n\r\n**test plan:**\r\nRan new test, saw it fail!\r\n\r\n* Add fixture for testing error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded a fixture which does the following -\r\nlogs in the console to show what happens when you use\r\n`requestAnimationFrame` to schedule a series of callbacks and some of\r\nthem throw errors.\r\n\r\nThen does the same actions with the `scheduler` and verifies that it\r\nbehaves in a similar way.\r\n\r\nHard to really verify the errors get thrown at the proper time without\r\nlooking at the console.\r\n\r\n**why make this change?:**\r\nWe want the most authentic, accurate test of how errors are handled in\r\nthe scheduler. Thats what this fixture should be.\r\n\r\n**test plan:**\r\nManually verified that this test does what I expect - right now its\r\nfailing but follow up commits will fix that.\r\n\r\n* Handle errors in scheduler\r\n\r\n**what is the change?:**\r\nWe set a flag before calling any callback, and then use a try/finally\r\nblock to wrap it. Note that we *do not* catch the error, if one is\r\nthrown. But, we only unset the flag after the callback successfully\r\nfinishes.\r\n\r\nIf we reach the finally block and the flag was not unset, then it\r\nmeans an error was thrown.\r\n\r\nIn that case we start a new postMessage callback, to finish calling any\r\nother pending callbacks if there is time.\r\n\r\n**why make this change?:**\r\nWe need to make sure that an error thrown from one callback doesnt stop\r\nother callbacks from firing, but we also dont want to catch or swallow\r\nthe error because we want engineers to still be able to log and debug\r\nerrors.\r\n\r\n**test plan:**\r\nNew tests added are passing, and we verified that they fail without this\r\nchange.\r\n\r\n* Add more tests for error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded tests for more situations where error handling may come up.\r\n\r\n**why make this change?:**\r\nTo get additional protection against this being broken in the future.\r\n\r\n**test plan:**\r\nRan new tests and verified that they fail when error handling fails.\r\n\r\n* callSafely -> callUnsafely\r\n\r\n* Fix bugs with error handling in schedule\r\n\r\n**what is the change?:**\r\n- ensure that we properly remove the callback from the linked list, even\r\nif it throws an error and is timed out.\r\n- ensure that you can call cancelScheduledWork more than once and it\r\nis idempotent.\r\n\r\n**why make this change?:**\r\nTo fix bugs :)\r\n\r\n**test plan:**\r\nExisting tests pass, and well add more tests in a follow up commit.\r\n\r\n* Unit tests for error handling with timed out callbacks\r\n\r\n**what is the change?:**\r\nMore unit tests, to cover behavior which we missed; error handling of\r\ntimed out callbacks.\r\n\r\n**why make this change?:**\r\nTo protect the future!~\r\n\r\n**test plan:**\r\nRun the new tests.\r\n\r\n* Adds fixture to test timed out callbacks with scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\nIn the other error handling fixture we compare scheduleWork error\r\nhandling to requestAnimationFrame and try to get as close as possible.\r\nThere is no timing out feature with requestAnimationFrame but\r\neffectively the timing out feature changes the order in which things\r\nare called. So we just changed the order in the requestAnimationFrame\r\nversion and that works well for illustrating the behavior we expect in\r\nthe scheduleWork test.\r\n\r\n**why make this change?:**\r\nWe need more test coverage of timed out callbacks.\r\n\r\n**test plan:**\r\nExecuted the fixture manually in Firefox and Chrome. Results looked\r\ngood.\r\n\r\n* fix rebase problems\r\n\r\n* make fixture compensate for chrome JS speed\r\n\r\n* ran prettier\r\n\r\n* Remove cancelled flag on callbackConfig in scheduler, add test\r\n\r\n**what is the change?:**\r\n- Instead of using a cancelled flag on the callbackConfig, its easier\r\nto just check the state of the callbackConfig inside\r\ncancelScheduledWork to determine if its already been cancelled. That\r\nway we dont have to remember to set the cancelled flag every time we\r\ncall a callback or cancel it. One less thing to remember.\r\n- We added a test for calling cancelScheduledWork more than once,\r\nwhich would have failed before.\r\n\r\nThanks @acdlite for suggesting this in code review. :)\r\n\r\n**why make this change?:**\r\nTo increase stability of the schedule module, increase test coverage.\r\n\r\n**test plan:**\r\nExisting tests pass and we added a new test to cover this behavior.\r\n\r\n* fix typo\"",
                "additions": 624,
                "deletions": 30,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:38:48Z"
            },
            {
                "commitId": "65ab53694f6edf4437034d5644a602dea162e249",
                "message": "\"Update token (#12956)\"",
                "additions": 2,
                "deletions": 2,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-31T20:36:55Z"
            },
            {
                "commitId": "36546b5137e9012ebdc62fc9ec11e3518c9e0aab",
                "message": "\"Set the correct initial value on input range (#12939)\n\n* Set the correct initial value on input range\r\n\r\n* Add description and update value diff check for input range\r\n\r\n* add isHydrating argument and tests\r\n\r\n* update node value according to isHydrating\"",
                "additions": 36,
                "deletions": 6,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-31T21:23:26Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "return a commit message on July 31?",
        "number": 4,
        "category": 1,
        "response": "Here are some commit messages from July 31:\n\n1. \"[compiler] More complete validation against locals being reassigned after render\\n\\nSummary:\\nThis diff extends the existing work on validating against locals being reassigned after render, by propagating the reassignment \"effect\" into the lvalues of instructions when the rvalue operands include values known to cause reassignments. In particular, this \"closes the loop\" for function definitions and function calls: a function that returns a function that reassigns will be considered to also perform reassignments, but previous to this we didn't consider the result of a `Call` of a function that reassigns to itself be a value that reassigns.\\n\\nThis causes a number of new bailouts in test cases, all of which appear to me to be legit.\\n\\nghstack-source-id: 770bf02d079ea2480be243a49caa6f69573d8092\\nPull Request resolved: https://github.com/facebook/react/pull/30540\"\n\n2. \"[Fizz] Update postpone abort semantics when prerendering (#30541)\\n\\nWhen aborting with a postpone value in Fizz if any tasks are still\\r\\npending in the root while prerendering the prerender will fatally error.\\r\\nThis is different from postponing imperatively in a root task and really\\r\\nthe semantics should be the same. This change updates React to treat an\\r\\nabort with a postpone value as a postponed root rather than a fatal\\r\\nerror.\"\n\n3. \"[DevTools] Track the parent DevToolsInstance while mounting a tree (#30542)\\n\\nThis just tracks the `.parent` field properly and uses DevToolsInstances\\r\\nin more places that used to use IDs or Fibers.\\r\\n\\r\\nI also use this new parent path when looking up a DevToolsInstance from\\r\\na DOM node. This should ideally be simple because the `.parent` field\\r\\nrepresents only the unfiltered parents and include any virtual parents.\\r\\nSo we should be able to just get one from nearest Fiber that has one.\\r\\n\\r\\nHowever, because we don't currently always clean up the map of\\r\\nDevToolsInstances (e.g. updateComponentFilters doesn't recursively clean\\r\\nout everything) it can leave matches hanging that shouldn't be there. So\\r\\nwe need to run the shouldFilterFiber filter to ignore those.\\r\\n\\r\\nAnother interesting implication is that without a FiberInstance we don't\\r\\nhave a way to get to a VirtualInstance from a HostComponent. Which means\\r\\nthat even filtered Fibers need to have a FiberInstance if they have a\\r\\nVirtualInstance parent. Even if we don't actually mount them into the\\r\\nfront-end.\"\n\n4. \"Build all bundles required by flight fixture with `build-for-flight-dev` (#30534)\"\n\n5. \"[Flight] Enable owner stacks on the client when replaying logs (#30473)\\n\\nThere's a special case that happens when we replay logs on the client\\r\\nbecause this doesn't happen within the context of any particular\\r\\nrendered component. So we need to reimplement things that would normally\\r\\nbe handled by a full client like Fiber.\\r\\n\\r\\nThe implementation of `getOwnerStackByComponentInfoInDev` is the\\r\\nsimplest version since it doesn't have any client components in it so I\\r\\nmove it to `shared/`. It's only used by Flight but both `react-server/`\\r\\nand `react-client/` packages. The ReactComponentInfo type is also more\\r\\ngeneric than just Flight anyway.\\r\\n\\r\\nIn a follow up I still need to implement this in React DevTools when\\r\\nnative tasks are not available so that it appends it to the console.\"",
        "chain_of_thought": "To address the question \"return a commit message on July 31,\" we need to interpret the query in the context of the provided schema. The question is asking for commit messages from a specific date, July 31. Since the year is not specified, we will assume it refers to the most recent July 31, which is July 31, 2024, given the current date is August 26, 2024.\n\nThe relevant nodes and properties for this query are the `Commit` node and its `committedDate` and `message` properties. We need to filter commits based on the `committedDate` property to match July 31, 2024.\n\nThe `committedDate` should be formatted in ISO format, which is \"2024-07-31\". Since the time is not specified, we will use a regex to match any time on that date.\n\nThe query to find the commit messages on July 31, 2024, is as follows:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31.*'\nRETURN c.message AS commitMessage\n```\n\nThis query matches all commits with a `committedDate` on July 31, 2024, and returns their `message` property.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31.*'\nRETURN c.message AS commitMessage\n",
        "result": [
            {
                "commitMessage": "\"[compiler] More complete validation against locals being reassigned after render\n\nSummary:\nThis diff extends the existing work on validating against locals being reassigned after render, by propagating the reassignment \"effect\" into the lvalues of instructions when the rvalue operands include values known to cause reassignments. In particular, this \"closes the loop\" for function definitions and function calls: a function that returns a function that reassigns will be considered to also perform reassignments, but previous to this we didnt consider the result of a `Call` of a function that reassigns to itself be a value that reassigns.\n\nThis causes a number of new bailouts in test cases, all of which appear to me to be legit.\n\nghstack-source-id: 770bf02d079ea2480be243a49caa6f69573d8092\nPull Request resolved: https://github.com/facebook/react/pull/30540\""
            },
            {
                "commitMessage": "\"[Fizz] Update postpone abort semantics when prerendering (#30541)\n\nWhen aborting with a postpone value in Fizz if any tasks are still\r\npending in the root while prerendering the prerender will fatally error.\r\nThis is different from postponing imperatively in a root task and really\r\nthe semantics should be the same. This change updates React to treat an\r\nabort with a postpone value as a postponed root rather than a fatal\r\nerror.\""
            },
            {
                "commitMessage": "\"[DevTools] Track the parent DevToolsInstance while mounting a tree (#30542)\n\nThis just tracks the `.parent` field properly and uses DevToolsInstances\r\nin more places that used to use IDs or Fibers.\r\n\r\nI also use this new parent path when looking up a DevToolsInstance from\r\na DOM node. This should ideally be simple because the `.parent` field\r\nrepresents only the unfiltered parents and include any virtual parents.\r\nSo we should be able to just get one from nearest Fiber that has one.\r\n\r\nHowever, because we dont currently always clean up the map of\r\nDevToolsInstances (e.g. updateComponentFilters doesnt recursively clean\r\nout everything) it can leave matches hanging that shouldnt be there. So\r\nwe need to run the shouldFilterFiber filter to ignore those.\r\n\r\nAnother interesting implication is that without a FiberInstance we dont\r\nhave a way to get to a VirtualInstance from a HostComponent. Which means\r\nthat even filtered Fibers need to have a FiberInstance if they have a\r\nVirtualInstance parent. Even if we dont actually mount them into the\r\nfront-end.\""
            },
            {
                "commitMessage": "\"Build all bundles required by flight fixture with `build-for-flight-dev` (#30534)\""
            },
            {
                "commitMessage": "\"[Flight] Enable owner stacks on the client when replaying logs (#30473)\n\nTheres a special case that happens when we replay logs on the client\r\nbecause this doesnt happen within the context of any particular\r\nrendered component. So we need to reimplement things that would normally\r\nbe handled by a full client like Fiber.\r\n\r\nThe implementation of `getOwnerStackByComponentInfoInDev` is the\r\nsimplest version since it doesnt have any client components in it so I\r\nmove it to `shared/`. Its only used by Flight but both `react-server/`\r\nand `react-client/` packages. The ReactComponentInfo type is also more\r\ngeneric than just Flight anyway.\r\n\r\nIn a follow up I still need to implement this in React DevTools when\r\nnative tasks are not available so that it appends it to the console.\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "show me the changes for BeforeInputEventPlugin.js file?",
        "number": 5,
        "category": 2,
        "response": "The changes made to the `BeforeInputEventPlugin.js` file include various modifications across different commits. Here are some of the notable changes:\n\n1. **Type Definitions and Imports**:\n   - The file includes imports for various modules such as `EventConstants`, `EventPropagators`, `ExecutionEnvironment`, `FallbackCompositionState`, `SyntheticCompositionEvent`, and `SyntheticInputEvent`.\n   - A type `TopLevelTypes` from `EventConstants` is imported.\n\n2. **Event Handlers and Conditions**:\n   - Functions are added or modified to handle different types of events such as `topCompositionStart`, `topCompositionEnd`, `topKeyPress`, `topTextInput`, and `topPaste`.\n   - A fallback mechanism using `FallbackCompositionState` is introduced to handle composition events in environments where native composition events are unreliable.\n\n3. **Event Types and Dependencies**:\n   - The `eventTypes` object is expanded to include `compositionEnd`, `compositionStart`, and `compositionUpdate` along with their dependencies.\n   - The `beforeInput` event type is defined with its dependencies.\n\n4. **Helper Functions**:\n   - Functions like `isPresto` are defined to detect specific browser environments, particularly for handling text input events.\n   - The `isKeypressCommand` function is used to determine if a keypress event should be considered a command.\n\n5. **Spacebar Handling**:\n   - There is specific handling for the spacebar key in the `getNativeBeforeInputChars` function to prevent default behavior that might interfere with input events.\n\n6. **Fallback Data Handling**:\n   - A `currentComposition` object is used to track the IME composition state, and fallback data is extracted if native events do not provide the necessary data.\n\n7. **Composition Event Extraction**:\n   - The `extractCompositionEvent` function is defined to create synthetic composition events based on the native event data or fallback data.\n\n8. **Before Input Event Extraction**:\n   - The `extractBeforeInputEvent` function is implemented to create synthetic input events based on either native `textInput` events or a fallback mechanism.\n\nThese changes reflect a comprehensive approach to handling input and composition events in various browser environments, ensuring that the plugin can reliably capture user input across different platforms.",
        "chain_of_thought": "To address the question, \"show me the changes for BeforeInputEventPlugin.js file,\" we need to identify the relevant nodes and relationships in the schema. The file in question is represented by the `File` node, and we are interested in the changes made to this file, which are captured by the `changed` relationship from the `Commit` node to the `File` node.\n\nThe query should focus on finding all commits that have modified the specified file and then retrieving the details of those changes. The `changed` relationship contains properties such as `additions`, `deletions`, `patch`, and `changes`, which can provide detailed information about the modifications.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'BeforeInputEventPlugin.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch, ch.changes AS totalChanges\nORDER BY c.committedDate DESC\n```\n\nThis query does the following:\n1. Matches all `Commit` nodes that have a `changed` relationship to a `File` node with the name 'BeforeInputEventPlugin.js'.\n2. Retrieves the commit ID, number of additions, number of deletions, the patch details, and the total number of changes for each modification.\n3. Orders the results by the commit date in descending order to show the most recent changes first.",
        "query": "cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'BeforeInputEventPlugin.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch, ch.changes AS totalChanges\nORDER BY c.committedDate DESC\n",
        "result": [
            {
                "commitId": "0b4f443020af386f2b48c47c074cb504ed672dc8",
                "additions": 10,
                "deletions": 10,
                "patch": "@@ -192,11 +192,11 @@ let isComposing = false;\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n-  dispatchQueue,\n-  domEventName,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n ) {\n   let eventType;\n   let fallbackData;\n@@ -379,11 +379,11 @@ function getFallbackBeforeInputChars(\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n-  dispatchQueue,\n-  domEventName,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n ) {\n   let chars;\n ",
                "totalChanges": 20
            },
            {
                "commitId": "ea04a486a7c27771f7eea896565c0980927ed3b4",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -227,10 +227,8 @@ function extractCompositionEvent(\n     }\n   }\n \n-  // $FlowFixMe[incompatible-call] found when upgrading Flow\n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n-    // $FlowFixMe[incompatible-type]\n     const event: ReactSyntheticEvent = new SyntheticCompositionEvent(\n       eventType,\n       domEventName,\n@@ -403,7 +401,6 @@ function extractBeforeInputEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n   if (listeners.length > 0) {\n-    // $FlowFixMe[incompatible-type]\n     const event: ReactSyntheticEvent = new SyntheticInputEvent(\n       'onBeforeInput',\n       'beforeinput',",
                "totalChanges": 3
            },
            {
                "commitId": "64fe791be84ad04a4a1d005376ba5cf5701db9b7",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -227,6 +227,7 @@ function extractCompositionEvent(\n     }\n   }\n \n+  // $FlowFixMe[incompatible-call] found when upgrading Flow\n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n     // $FlowFixMe[incompatible-type]",
                "totalChanges": 1
            },
            {
                "commitId": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "totalChanges": 0
            },
            {
                "commitId": "9328988c024800de05dfab70e55cfd0999445d8a",
                "additions": 8,
                "deletions": 2,
                "patch": "@@ -12,6 +12,7 @@ import type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n import type {AnyNativeEvent} from '../../events/PluginModuleType';\n import type {DispatchQueue} from '../DOMPluginEventSystem';\n import type {EventSystemFlags} from '../EventSystemFlags';\n+import type {ReactSyntheticEvent} from '../ReactSyntheticEventType';\n \n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n@@ -228,7 +229,8 @@ function extractCompositionEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n-    const event = new SyntheticCompositionEvent(\n+    // $FlowFixMe[incompatible-type]\n+    const event: ReactSyntheticEvent = new SyntheticCompositionEvent(\n       eventType,\n       domEventName,\n       null,\n@@ -239,10 +241,12 @@ function extractCompositionEvent(\n     if (fallbackData) {\n       // Inject data generated from fallback path into the synthetic event.\n       // This matches the property of native CompositionEventInterface.\n+      // $FlowFixMe[incompatible-use]\n       event.data = fallbackData;\n     } else {\n       const customData = getDataFromCustomEvent(nativeEvent);\n       if (customData !== null) {\n+        // $FlowFixMe[incompatible-use]\n         event.data = customData;\n       }\n     }\n@@ -398,14 +402,16 @@ function extractBeforeInputEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n   if (listeners.length > 0) {\n-    const event = new SyntheticInputEvent(\n+    // $FlowFixMe[incompatible-type]\n+    const event: ReactSyntheticEvent = new SyntheticInputEvent(\n       'onBeforeInput',\n       'beforeinput',\n       null,\n       nativeEvent,\n       nativeEventTarget,\n     );\n     dispatchQueue.push({event, listeners});\n+    // $FlowFixMe[incompatible-use]\n     event.data = chars;\n   }\n }",
                "totalChanges": 10
            },
            {
                "commitId": "480626a9e920d5e04194c793a828318102ea4ff4",
                "additions": 31,
                "deletions": 26,
                "patch": "@@ -226,23 +226,25 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticCompositionEvent(\n-    eventType,\n-    domEventName,\n-    null,\n-    nativeEvent,\n-    nativeEventTarget,\n-  );\n-  accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n-\n-  if (fallbackData) {\n-    // Inject data generated from fallback path into the synthetic event.\n-    // This matches the property of native CompositionEventInterface.\n-    event.data = fallbackData;\n-  } else {\n-    const customData = getDataFromCustomEvent(nativeEvent);\n-    if (customData !== null) {\n-      event.data = customData;\n+  const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n+  if (listeners.length > 0) {\n+    const event = new SyntheticCompositionEvent(\n+      eventType,\n+      domEventName,\n+      null,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+    dispatchQueue.push({event, listeners});\n+    if (fallbackData) {\n+      // Inject data generated from fallback path into the synthetic event.\n+      // This matches the property of native CompositionEventInterface.\n+      event.data = fallbackData;\n+    } else {\n+      const customData = getDataFromCustomEvent(nativeEvent);\n+      if (customData !== null) {\n+        event.data = customData;\n+      }\n     }\n   }\n }\n@@ -394,15 +396,18 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticInputEvent(\n-    'onBeforeInput',\n-    'beforeinput',\n-    null,\n-    nativeEvent,\n-    nativeEventTarget,\n-  );\n-  accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n-  event.data = chars;\n+  const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n+  if (listeners.length > 0) {\n+    const event = new SyntheticInputEvent(\n+      'onBeforeInput',\n+      'beforeinput',\n+      null,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+    dispatchQueue.push({event, listeners});\n+    event.data = chars;\n+  }\n }\n \n /**",
                "totalChanges": 57
            },
            {
                "commitId": "1890159a5d362e76ee949dfcace1ccb9677abc45",
                "additions": 4,
                "deletions": 7,
                "patch": "@@ -22,9 +22,8 @@ import {\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n import {\n-  CompositionEventInterface,\n-  InputEventInterface,\n-  SyntheticEvent,\n+  SyntheticCompositionEvent,\n+  SyntheticInputEvent,\n } from '../SyntheticEvent';\n import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n@@ -227,13 +226,12 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticEvent(\n+  const event = new SyntheticCompositionEvent(\n     eventType,\n     domEventName,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n-    CompositionEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n \n@@ -396,13 +394,12 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticEvent(\n+  const event = new SyntheticInputEvent(\n     'onBeforeInput',\n     'beforeinput',\n     null,\n     nativeEvent,\n     nativeEventTarget,\n-    InputEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n   event.data = chars;",
                "totalChanges": 11
            },
            {
                "commitId": "7f696bd99c39348a631c20378d2a8704634bab04",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -229,6 +229,7 @@ function extractCompositionEvent(\n \n   const event = new SyntheticEvent(\n     eventType,\n+    domEventName,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n@@ -397,6 +398,7 @@ function extractBeforeInputEvent(\n \n   const event = new SyntheticEvent(\n     'onBeforeInput',\n+    'beforeinput',\n     null,\n     nativeEvent,\n     nativeEventTarget,",
                "totalChanges": 2
            },
            {
                "commitId": "22d16cc15df8e570b79c2825fb495c2b98b40bf5",
                "additions": 87,
                "deletions": 101,
                "patch": "@@ -3,25 +3,19 @@\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n  */\n \n-import type {TopLevelType} from '../../events/TopLevelEventTypes';\n+import type {DOMEventName} from '../../events/DOMEventNames';\n+import type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n+import type {AnyNativeEvent} from '../../events/PluginModuleType';\n+import type {DispatchQueue} from '../DOMPluginEventSystem';\n+import type {EventSystemFlags} from '../EventSystemFlags';\n \n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {registerTwoPhaseEvent} from '../EventRegistry';\n-import {\n-  TOP_FOCUS_OUT,\n-  TOP_COMPOSITION_START,\n-  TOP_COMPOSITION_END,\n-  TOP_COMPOSITION_UPDATE,\n-  TOP_KEY_DOWN,\n-  TOP_KEY_PRESS,\n-  TOP_KEY_UP,\n-  TOP_MOUSE_DOWN,\n-  TOP_TEXT_INPUT,\n-  TOP_PASTE,\n-} from '../DOMTopLevelEventTypes';\n import {\n   getData as FallbackCompositionStateGetData,\n   initialize as FallbackCompositionStateInitialize,\n@@ -63,34 +57,34 @@ const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n function registerEvents() {\n   registerTwoPhaseEvent('onBeforeInput', [\n-    TOP_COMPOSITION_END,\n-    TOP_KEY_PRESS,\n-    TOP_TEXT_INPUT,\n-    TOP_PASTE,\n+    'compositionend',\n+    'keypress',\n+    'textInput',\n+    'paste',\n   ]);\n   registerTwoPhaseEvent('onCompositionEnd', [\n-    TOP_COMPOSITION_END,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionend',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n   registerTwoPhaseEvent('onCompositionStart', [\n-    TOP_COMPOSITION_START,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionstart',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n   registerTwoPhaseEvent('onCompositionUpdate', [\n-    TOP_COMPOSITION_UPDATE,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionupdate',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n }\n \n@@ -102,7 +96,7 @@ let hasSpaceKeypress = false;\n  * This is required because Firefox fires `keypress` events for key commands\n  * (cut, copy, select-all, etc.) even though no character is inserted.\n  */\n-function isKeypressCommand(nativeEvent) {\n+function isKeypressCommand(nativeEvent: any) {\n   return (\n     (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n     // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n@@ -112,52 +106,47 @@ function isKeypressCommand(nativeEvent) {\n \n /**\n  * Translate native top level events into event types.\n- *\n- * @param {string} topLevelType\n- * @return {object}\n  */\n-function getCompositionEventType(topLevelType) {\n-  switch (topLevelType) {\n-    case TOP_COMPOSITION_START:\n+function getCompositionEventType(domEventName: DOMEventName) {\n+  switch (domEventName) {\n+    case 'compositionstart':\n       return 'onCompositionStart';\n-    case TOP_COMPOSITION_END:\n+    case 'compositionend':\n       return 'onCompositionEnd';\n-    case TOP_COMPOSITION_UPDATE:\n+    case 'compositionupdate':\n       return 'onCompositionUpdate';\n   }\n }\n \n /**\n  * Does our fallback best-guess model think this event signifies that\n  * composition has begun?\n- *\n- * @param {string} topLevelType\n- * @param {object} nativeEvent\n- * @return {boolean}\n  */\n-function isFallbackCompositionStart(topLevelType, nativeEvent) {\n-  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;\n+function isFallbackCompositionStart(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): boolean {\n+  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;\n }\n \n /**\n  * Does our fallback mode think that this event is the end of composition?\n- *\n- * @param {string} topLevelType\n- * @param {object} nativeEvent\n- * @return {boolean}\n  */\n-function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n-  switch (topLevelType) {\n-    case TOP_KEY_UP:\n+function isFallbackCompositionEnd(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): boolean {\n+  switch (domEventName) {\n+    case 'keyup':\n       // Command keys insert or clear IME input.\n       return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n-    case TOP_KEY_DOWN:\n+    case 'keydown':\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return nativeEvent.keyCode !== START_KEYCODE;\n-    case TOP_KEY_PRESS:\n-    case TOP_MOUSE_DOWN:\n-    case TOP_FOCUS_OUT:\n+    case 'keypress':\n+    case 'mousedown':\n+    case 'focusout':\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -174,7 +163,7 @@ function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  * @param {object} nativeEvent\n  * @return {?string}\n  */\n-function getDataFromCustomEvent(nativeEvent) {\n+function getDataFromCustomEvent(nativeEvent: any) {\n   const detail = nativeEvent.detail;\n   if (typeof detail === 'object' && 'data' in detail) {\n     return detail.data;\n@@ -192,7 +181,7 @@ function getDataFromCustomEvent(nativeEvent) {\n  * @param {object} nativeEvent\n  * @return {boolean}\n  */\n-function isUsingKoreanIME(nativeEvent) {\n+function isUsingKoreanIME(nativeEvent: any) {\n   return nativeEvent.locale === 'ko';\n }\n \n@@ -204,7 +193,7 @@ let isComposing = false;\n  */\n function extractCompositionEvent(\n   dispatchQueue,\n-  topLevelType,\n+  domEventName,\n   targetInst,\n   nativeEvent,\n   nativeEventTarget,\n@@ -213,12 +202,12 @@ function extractCompositionEvent(\n   let fallbackData;\n \n   if (canUseCompositionEvent) {\n-    eventType = getCompositionEventType(topLevelType);\n+    eventType = getCompositionEventType(domEventName);\n   } else if (!isComposing) {\n-    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+    if (isFallbackCompositionStart(domEventName, nativeEvent)) {\n       eventType = 'onCompositionStart';\n     }\n-  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {\n     eventType = 'onCompositionEnd';\n   }\n \n@@ -259,16 +248,14 @@ function extractCompositionEvent(\n   }\n }\n \n-/**\n- * @param {TopLevelType} topLevelType Number from `TopLevelType`.\n- * @param {object} nativeEvent Native browser event.\n- * @return {?string} The string corresponding to this `beforeInput` event.\n- */\n-function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n-  switch (topLevelType) {\n-    case TOP_COMPOSITION_END:\n+function getNativeBeforeInputChars(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): ?string {\n+  switch (domEventName) {\n+    case 'compositionend':\n       return getDataFromCustomEvent(nativeEvent);\n-    case TOP_KEY_PRESS:\n+    case 'keypress':\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -291,7 +278,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case TOP_TEXT_INPUT:\n+    case 'textInput':\n       // Record the characters to be added to the DOM.\n       const chars = nativeEvent.data;\n \n@@ -313,21 +300,20 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n /**\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n- *\n- * @param {number} topLevelType Number from `TopLevelEventTypes`.\n- * @param {object} nativeEvent Native browser event.\n- * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n+function getFallbackBeforeInputChars(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): ?string {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n   if (isComposing) {\n     if (\n-      topLevelType === TOP_COMPOSITION_END ||\n+      domEventName === 'compositionend' ||\n       (!canUseCompositionEvent &&\n-        isFallbackCompositionEnd(topLevelType, nativeEvent))\n+        isFallbackCompositionEnd(domEventName, nativeEvent))\n     ) {\n       const chars = FallbackCompositionStateGetData();\n       FallbackCompositionStateReset();\n@@ -337,12 +323,12 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n     return null;\n   }\n \n-  switch (topLevelType) {\n-    case TOP_PASTE:\n+  switch (domEventName) {\n+    case 'paste':\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case TOP_KEY_PRESS:\n+    case 'keypress':\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -373,7 +359,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n         }\n       }\n       return null;\n-    case TOP_COMPOSITION_END:\n+    case 'compositionend':\n       return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)\n         ? null\n         : nativeEvent.data;\n@@ -390,17 +376,17 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n  */\n function extractBeforeInputEvent(\n   dispatchQueue,\n-  topLevelType,\n+  domEventName,\n   targetInst,\n   nativeEvent,\n   nativeEventTarget,\n ) {\n   let chars;\n \n   if (canUseTextInputEvent) {\n-    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+    chars = getNativeBeforeInputChars(domEventName, nativeEvent);\n   } else {\n-    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);\n   }\n \n   // If no characters are being inserted, no BeforeInput event should\n@@ -439,24 +425,24 @@ function extractBeforeInputEvent(\n  * `composition` event types.\n  */\n function extractEvents(\n-  dispatchQueue,\n-  topLevelType,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n-  eventSystemFlags,\n-  targetContainer,\n-) {\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n+  eventSystemFlags: EventSystemFlags,\n+  targetContainer: EventTarget,\n+): void {\n   extractCompositionEvent(\n     dispatchQueue,\n-    topLevelType,\n+    domEventName,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,\n   );\n   extractBeforeInputEvent(\n     dispatchQueue,\n-    topLevelType,\n+    domEventName,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,",
                "totalChanges": 188
            },
            {
                "commitId": "76ce685d0fc7821a6c8be486d7cbb2c3d22f6fb7",
                "additions": 7,
                "deletions": 4,
                "patch": "@@ -28,8 +28,9 @@ import {\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n import {\n-  SyntheticCompositionEvent,\n-  SyntheticInputEvent,\n+  CompositionEventInterface,\n+  InputEventInterface,\n+  SyntheticEvent,\n } from '../SyntheticEvent';\n import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n@@ -237,11 +238,12 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticCompositionEvent(\n+  const event = new SyntheticEvent(\n     eventType,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n+    CompositionEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n \n@@ -407,11 +409,12 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticInputEvent(\n+  const event = new SyntheticEvent(\n     'onBeforeInput',\n     null,\n     nativeEvent,\n     nativeEventTarget,\n+    InputEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n   event.data = chars;",
                "totalChanges": 11
            },
            {
                "commitId": "125d1a19a211c51d5ee52ec0c1cc1f538eb44d5c",
                "additions": 5,
                "deletions": 3,
                "patch": "@@ -27,9 +27,11 @@ import {\n   initialize as FallbackCompositionStateInitialize,\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n-import SyntheticCompositionEvent from '../SyntheticCompositionEvent';\n-import SyntheticInputEvent from '../SyntheticInputEvent';\n-import {accumulateTwoPhaseListeners} from '../DOMModernPluginEventSystem';\n+import {\n+  SyntheticCompositionEvent,\n+  SyntheticInputEvent,\n+} from '../SyntheticEvent';\n+import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;",
                "totalChanges": 8
            },
            {
                "commitId": "d3ec42020d220777bf589bec36c9cd8300ec9742",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -28,7 +28,7 @@ import {\n } from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n-import {accumulateTwoPhaseListeners} from './DOMModernPluginEventSystem';\n+import accumulateTwoPhaseListeners from './accumulateTwoPhaseListeners';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;",
                "totalChanges": 2
            },
            {
                "commitId": "30a998debf79f8c8efb3fa9b6ff5458fb319d7a1",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -7,7 +7,6 @@\n \n import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatchesSingle} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n@@ -29,6 +28,7 @@ import {\n } from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n+import {accumulateTwoPhaseListeners} from './DOMModernPluginEventSystem';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;\n@@ -276,7 +276,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  accumulateTwoPhaseDispatchesSingle(event);\n+  accumulateTwoPhaseListeners(event);\n   return event;\n }\n \n@@ -437,7 +437,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  accumulateTwoPhaseDispatchesSingle(event);\n+  accumulateTwoPhaseListeners(event);\n   return event;\n }\n ",
                "totalChanges": 6
            },
            {
                "commitId": "2fe0fbb05ef2c56db760122e995b923528e6ce8f",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -7,7 +7,7 @@\n \n import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n+import {accumulateTwoPhaseDispatchesSingle} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n@@ -276,7 +276,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatchesSingle(event);\n   return event;\n }\n \n@@ -437,7 +437,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatchesSingle(event);\n   return event;\n }\n ",
                "totalChanges": 6
            },
            {
                "commitId": "ab1a4f249e61045d523ddbbfb840e868afbbf785",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -464,10 +464,10 @@ const BeforeInputEventPlugin = {\n \n   extractEvents: function(\n     topLevelType,\n-    eventSystemFlags,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,\n+    eventSystemFlags,\n   ) {\n     const composition = extractCompositionEvent(\n       topLevelType,",
                "totalChanges": 2
            },
            {
                "commitId": "0a527707cd8befd21a741ca9646a8551842190b0",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -464,6 +464,7 @@ const BeforeInputEventPlugin = {\n \n   extractEvents: function(\n     topLevelType,\n+    eventSystemFlags,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,",
                "totalChanges": 1
            },
            {
                "commitId": "44e410900da8ef7b5e7daf18e7a0bf61b6612247",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,9 +5,9 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelType} from 'events/TopLevelEventTypes';\n+import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {",
                "totalChanges": 4
            },
            {
                "commitId": "b1a03dfdc8e42d075422556553ffe59868150e95",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,9 +5,9 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelType} from 'events/TopLevelEventTypes';\n+import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {",
                "totalChanges": 4
            },
            {
                "commitId": "c954efa70f44a44be9c33c60c57f87bea6f40a10",
                "additions": 9,
                "deletions": 5,
                "patch": "@@ -22,7 +22,11 @@ import {\n   TOP_TEXT_INPUT,\n   TOP_PASTE,\n } from './DOMTopLevelEventTypes';\n-import * as FallbackCompositionState from './FallbackCompositionState';\n+import {\n+  getData as FallbackCompositionStateGetData,\n+  initialize as FallbackCompositionStateInitialize,\n+  reset as FallbackCompositionStateReset,\n+} from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n@@ -246,10 +250,10 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!isComposing && eventType === eventTypes.compositionStart) {\n-      isComposing = FallbackCompositionState.initialize(nativeEventTarget);\n+      isComposing = FallbackCompositionStateInitialize(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (isComposing) {\n-        fallbackData = FallbackCompositionState.getData();\n+        fallbackData = FallbackCompositionStateGetData();\n       }\n     }\n   }\n@@ -346,8 +350,8 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      const chars = FallbackCompositionState.getData();\n-      FallbackCompositionState.reset();\n+      const chars = FallbackCompositionStateGetData();\n+      FallbackCompositionStateReset();\n       isComposing = false;\n       return chars;\n     }",
                "totalChanges": 14
            },
            {
                "commitId": "8a8d973d3cc5623676a84f87af66ef9259c3937c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -314,7 +314,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n \n       // If it's a spacebar character, assume that we have already handled\n       // it at the keypress level and bail immediately. Android Chrome\n-      // doesn't give us keycodes, so we need to blacklist it.\n+      // doesn't give us keycodes, so we need to ignore it.\n       if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n         return null;\n       }",
                "totalChanges": 2
            },
            {
                "commitId": "b87aabdfe1b7461e7331abb3601d9e6bb27544bc",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2013-present, Facebook, Inc.\n+ * Copyright (c) Facebook, Inc. and its affiliates.\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.",
                "totalChanges": 2
            },
            {
                "commitId": "72434a7686035b4af766ee7d06c070d7f5d6a5f2",
                "additions": 5,
                "deletions": 6,
                "patch": "@@ -8,7 +8,7 @@\n import type {TopLevelType} from 'events/TopLevelEventTypes';\n \n import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n-import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n+import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n   TOP_BLUR,\n@@ -29,25 +29,24 @@ import SyntheticInputEvent from './SyntheticInputEvent';\n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;\n \n-const canUseCompositionEvent =\n-  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n+const canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;\n \n let documentMode = null;\n-if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+if (canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n const canUseTextInputEvent =\n-  ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;\n+  canUseDOM && 'TextEvent' in window && !documentMode;\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n const useFallbackCompositionData =\n-  ExecutionEnvironment.canUseDOM &&\n+  canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n ",
                "totalChanges": 11
            },
            {
                "commitId": "2e757790751ab8d165fc4df37e90a59d914c4527",
                "additions": 18,
                "deletions": 2,
                "patch": "@@ -200,6 +200,20 @@ function getDataFromCustomEvent(nativeEvent) {\n   return null;\n }\n \n+/**\n+ * Check if a composition event was triggered by Korean IME.\n+ * Our fallback mode does not work well with IE's Korean IME,\n+ * so just use native composition events when Korean IME is used.\n+ * Although CompositionEvent.locale property is deprecated,\n+ * it is available in IE, where our fallback mode is enabled.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isUsingKoreanIME(nativeEvent) {\n+  return nativeEvent.locale === 'ko';\n+}\n+\n // Track the current IME composition status, if any.\n let isComposing = false;\n \n@@ -229,7 +243,7 @@ function extractCompositionEvent(\n     return null;\n   }\n \n-  if (useFallbackCompositionData) {\n+  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!isComposing && eventType === eventTypes.compositionStart) {\n@@ -378,7 +392,9 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       }\n       return null;\n     case TOP_COMPOSITION_END:\n-      return useFallbackCompositionData ? null : nativeEvent.data;\n+      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)\n+        ? null\n+        : nativeEvent.data;\n     default:\n       return null;\n   }",
                "totalChanges": 20
            },
            {
                "commitId": "e96dc140599363029bd05565d58bcd4a432db370",
                "additions": 55,
                "deletions": 43,
                "patch": "@@ -5,11 +5,23 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelTypes} from './BrowserEventConstants';\n+import type {TopLevelType} from 'events/TopLevelEventTypes';\n \n import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n+import {\n+  TOP_BLUR,\n+  TOP_COMPOSITION_START,\n+  TOP_COMPOSITION_END,\n+  TOP_COMPOSITION_UPDATE,\n+  TOP_KEY_DOWN,\n+  TOP_KEY_PRESS,\n+  TOP_KEY_UP,\n+  TOP_MOUSE_DOWN,\n+  TOP_TEXT_INPUT,\n+  TOP_PASTE,\n+} from './DOMTopLevelEventTypes';\n import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n@@ -50,10 +62,10 @@ const eventTypes = {\n       captured: 'onBeforeInputCapture',\n     },\n     dependencies: [\n-      'topCompositionEnd',\n-      'topKeyPress',\n-      'topTextInput',\n-      'topPaste',\n+      TOP_COMPOSITION_END,\n+      TOP_KEY_PRESS,\n+      TOP_TEXT_INPUT,\n+      TOP_PASTE,\n     ],\n   },\n   compositionEnd: {\n@@ -62,12 +74,12 @@ const eventTypes = {\n       captured: 'onCompositionEndCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionEnd',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_END,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n   compositionStart: {\n@@ -76,12 +88,12 @@ const eventTypes = {\n       captured: 'onCompositionStartCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionStart',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_START,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n   compositionUpdate: {\n@@ -90,12 +102,12 @@ const eventTypes = {\n       captured: 'onCompositionUpdateCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionUpdate',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_UPDATE,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n };\n@@ -124,11 +136,11 @@ function isKeypressCommand(nativeEvent) {\n  */\n function getCompositionEventType(topLevelType) {\n   switch (topLevelType) {\n-    case 'topCompositionStart':\n+    case TOP_COMPOSITION_START:\n       return eventTypes.compositionStart;\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return eventTypes.compositionEnd;\n-    case 'topCompositionUpdate':\n+    case TOP_COMPOSITION_UPDATE:\n       return eventTypes.compositionUpdate;\n   }\n }\n@@ -142,7 +154,7 @@ function getCompositionEventType(topLevelType) {\n  * @return {boolean}\n  */\n function isFallbackCompositionStart(topLevelType, nativeEvent) {\n-  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;\n+  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;\n }\n \n /**\n@@ -154,16 +166,16 @@ function isFallbackCompositionStart(topLevelType, nativeEvent) {\n  */\n function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case 'topKeyUp':\n+    case TOP_KEY_UP:\n       // Command keys insert or clear IME input.\n       return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n-    case 'topKeyDown':\n+    case TOP_KEY_DOWN:\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return nativeEvent.keyCode !== START_KEYCODE;\n-    case 'topKeyPress':\n-    case 'topMouseDown':\n-    case 'topBlur':\n+    case TOP_KEY_PRESS:\n+    case TOP_MOUSE_DOWN:\n+    case TOP_BLUR:\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -252,15 +264,15 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n+ * @param {TopLevelType} topLevelType Number from `TopLevelType`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n-function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n+function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return getDataFromCustomEvent(nativeEvent);\n-    case 'topKeyPress':\n+    case TOP_KEY_PRESS:\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -283,7 +295,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case 'topTextInput':\n+    case TOP_TEXT_INPUT:\n       // Record the characters to be added to the DOM.\n       const chars = nativeEvent.data;\n \n@@ -306,18 +318,18 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n  *\n- * @param {string} topLevelType Record from `BrowserEventConstants`.\n+ * @param {number} topLevelType Number from `TopLevelEventTypes`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n+function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n   if (isComposing) {\n     if (\n-      topLevelType === 'topCompositionEnd' ||\n+      topLevelType === TOP_COMPOSITION_END ||\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n@@ -330,11 +342,11 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   }\n \n   switch (topLevelType) {\n-    case 'topPaste':\n+    case TOP_PASTE:\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case 'topKeyPress':\n+    case TOP_KEY_PRESS:\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -365,7 +377,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n         }\n       }\n       return null;\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return useFallbackCompositionData ? null : nativeEvent.data;\n     default:\n       return null;",
                "totalChanges": 98
            },
            {
                "commitId": "4d37040cbf914c9d3c282e8edd67fa97a3c31178",
                "additions": 1,
                "deletions": 18,
                "patch": "@@ -29,10 +29,7 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n const canUseTextInputEvent =\n-  ExecutionEnvironment.canUseDOM &&\n-  'TextEvent' in window &&\n-  !documentMode &&\n-  !isPresto();\n+  ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n@@ -42,20 +39,6 @@ const useFallbackCompositionData =\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n \n-/**\n- * Opera <= 12 includes TextEvent in window, but does not fire\n- * text input events. Rely on keypress instead.\n- */\n-function isPresto() {\n-  const opera = window.opera;\n-  return (\n-    opera !== null &&\n-    typeof opera === 'object' &&\n-    typeof opera.version === 'function' &&\n-    parseInt(opera.version(), 10) <= 12\n-  );\n-}\n-\n const SPACEBAR_CODE = 32;\n const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n ",
                "totalChanges": 19
            },
            {
                "commitId": "faa4218632ca21f3af731fb6c14849fc054fca15",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -49,6 +49,7 @@ const useFallbackCompositionData =\n function isPresto() {\n   const opera = window.opera;\n   return (\n+    opera !== null &&\n     typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n     parseInt(opera.version(), 10) <= 12",
                "totalChanges": 1
            },
            {
                "commitId": "cc52e06b490e0dc2482b345aa5d0d65fae931095",
                "additions": 23,
                "deletions": 14,
                "patch": "@@ -453,20 +453,29 @@ const BeforeInputEventPlugin = {\n     nativeEvent,\n     nativeEventTarget,\n   ) {\n-    return [\n-      extractCompositionEvent(\n-        topLevelType,\n-        targetInst,\n-        nativeEvent,\n-        nativeEventTarget,\n-      ),\n-      extractBeforeInputEvent(\n-        topLevelType,\n-        targetInst,\n-        nativeEvent,\n-        nativeEventTarget,\n-      ),\n-    ];\n+    const composition = extractCompositionEvent(\n+      topLevelType,\n+      targetInst,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+\n+    const beforeInput = extractBeforeInputEvent(\n+      topLevelType,\n+      targetInst,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+\n+    if (composition === null) {\n+      return beforeInput;\n+    }\n+\n+    if (beforeInput === null) {\n+      return composition;\n+    }\n+\n+    return [composition, beforeInput];\n   },\n };\n ",
                "totalChanges": 37
            },
            {
                "commitId": "5bd2321ae3dd7d68ac02dee3c3f271e9d0ee8784",
                "additions": 23,
                "deletions": 23,
                "patch": "@@ -14,21 +14,21 @@ import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n-var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n-var START_KEYCODE = 229;\n+const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+const START_KEYCODE = 229;\n \n-var canUseCompositionEvent =\n+const canUseCompositionEvent =\n   ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n \n-var documentMode = null;\n+let documentMode = null;\n if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n-var canUseTextInputEvent =\n+const canUseTextInputEvent =\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n@@ -37,7 +37,7 @@ var canUseTextInputEvent =\n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n-var useFallbackCompositionData =\n+const useFallbackCompositionData =\n   ExecutionEnvironment.canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n@@ -47,19 +47,19 @@ var useFallbackCompositionData =\n  * text input events. Rely on keypress instead.\n  */\n function isPresto() {\n-  var opera = window.opera;\n+  const opera = window.opera;\n   return (\n     typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n     parseInt(opera.version(), 10) <= 12\n   );\n }\n \n-var SPACEBAR_CODE = 32;\n-var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n+const SPACEBAR_CODE = 32;\n+const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n // Events and their corresponding property names.\n-var eventTypes = {\n+const eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: 'onBeforeInput',\n@@ -117,7 +117,7 @@ var eventTypes = {\n };\n \n // Track whether we've ever handled a keypress on the space key.\n-var hasSpaceKeypress = false;\n+let hasSpaceKeypress = false;\n \n /**\n  * Return whether a native keypress event is assumed to be a command.\n@@ -197,15 +197,15 @@ function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  * @return {?string}\n  */\n function getDataFromCustomEvent(nativeEvent) {\n-  var detail = nativeEvent.detail;\n+  const detail = nativeEvent.detail;\n   if (typeof detail === 'object' && 'data' in detail) {\n     return detail.data;\n   }\n   return null;\n }\n \n // Track the current IME composition status, if any.\n-var isComposing = false;\n+let isComposing = false;\n \n /**\n  * @return {?object} A SyntheticCompositionEvent.\n@@ -216,8 +216,8 @@ function extractCompositionEvent(\n   nativeEvent,\n   nativeEventTarget,\n ) {\n-  var eventType;\n-  var fallbackData;\n+  let eventType;\n+  let fallbackData;\n \n   if (canUseCompositionEvent) {\n     eventType = getCompositionEventType(topLevelType);\n@@ -245,7 +245,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  var event = SyntheticCompositionEvent.getPooled(\n+  const event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     targetInst,\n     nativeEvent,\n@@ -257,7 +257,7 @@ function extractCompositionEvent(\n     // This matches the property of native CompositionEventInterface.\n     event.data = fallbackData;\n   } else {\n-    var customData = getDataFromCustomEvent(nativeEvent);\n+    const customData = getDataFromCustomEvent(nativeEvent);\n     if (customData !== null) {\n       event.data = customData;\n     }\n@@ -291,7 +291,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n        * To avoid this issue, use the keypress event as if no `textInput`\n        * event is available.\n        */\n-      var which = nativeEvent.which;\n+      const which = nativeEvent.which;\n       if (which !== SPACEBAR_CODE) {\n         return null;\n       }\n@@ -301,7 +301,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n \n     case 'topTextInput':\n       // Record the characters to be added to the DOM.\n-      var chars = nativeEvent.data;\n+      const chars = nativeEvent.data;\n \n       // If it's a spacebar character, assume that we have already handled\n       // it at the keypress level and bail immediately. Android Chrome\n@@ -337,7 +337,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      var chars = FallbackCompositionState.getData();\n+      const chars = FallbackCompositionState.getData();\n       FallbackCompositionState.reset();\n       isComposing = false;\n       return chars;\n@@ -400,7 +400,7 @@ function extractBeforeInputEvent(\n   nativeEvent,\n   nativeEventTarget,\n ) {\n-  var chars;\n+  let chars;\n \n   if (canUseTextInputEvent) {\n     chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n@@ -414,7 +414,7 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  var event = SyntheticInputEvent.getPooled(\n+  const event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     targetInst,\n     nativeEvent,\n@@ -444,7 +444,7 @@ function extractBeforeInputEvent(\n  * allowing us to share composition fallback code for both `beforeInput` and\n  * `composition` event types.\n  */\n-var BeforeInputEventPlugin = {\n+const BeforeInputEventPlugin = {\n   eventTypes: eventTypes,\n \n   extractEvents: function(",
                "totalChanges": 46
            },
            {
                "commitId": "92b7b172cce9958b846844f0b46fd7bbd8c5140d",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -7,10 +7,10 @@\n \n import type {TopLevelTypes} from './BrowserEventConstants';\n \n-import EventPropagators from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n-import FallbackCompositionState from './FallbackCompositionState';\n+import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n@@ -263,7 +263,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatches(event);\n   return event;\n }\n \n@@ -422,7 +422,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatches(event);\n   return event;\n }\n ",
                "totalChanges": 8
            },
            {
                "commitId": "45c1ff348e1c7d03567f5bba6cb32cffa9222972",
                "additions": 0,
                "deletions": 2,
                "patch": "@@ -5,8 +5,6 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-'use strict';\n-\n import type {TopLevelTypes} from './BrowserEventConstants';\n \n import EventPropagators from 'events/EventPropagators';",
                "totalChanges": 2
            },
            {
                "commitId": "21d0c115238b4f38837020cf83e0c657d8c01c9f",
                "additions": 6,
                "deletions": 6,
                "patch": "@@ -9,12 +9,12 @@\n \n import type {TopLevelTypes} from './BrowserEventConstants';\n \n-var EventPropagators = require('events/EventPropagators');\n-var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n+import EventPropagators from 'events/EventPropagators';\n+import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n-var FallbackCompositionState = require('./FallbackCompositionState');\n-var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n-var SyntheticInputEvent = require('./SyntheticInputEvent');\n+import FallbackCompositionState from './FallbackCompositionState';\n+import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n+import SyntheticInputEvent from './SyntheticInputEvent';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n@@ -472,4 +472,4 @@ var BeforeInputEventPlugin = {\n   },\n };\n \n-module.exports = BeforeInputEventPlugin;\n+export default BeforeInputEventPlugin;",
                "totalChanges": 12
            },
            {
                "commitId": "087c48bb36b88ef0b5bbca2b9b70a52d8d413102",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -7,14 +7,15 @@\n \n 'use strict';\n \n+import type {TopLevelTypes} from './BrowserEventConstants';\n+\n var EventPropagators = require('events/EventPropagators');\n var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n+\n var FallbackCompositionState = require('./FallbackCompositionState');\n var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n var SyntheticInputEvent = require('./SyntheticInputEvent');\n \n-import type {TopLevelTypes} from 'BrowserEventConstants';\n-\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n ",
                "totalChanges": 5
            },
            {
                "commitId": "1eed302d346bfb8f5db8d88b0e7096d8999d3548",
                "additions": 4,
                "deletions": 6,
                "patch": "@@ -3,17 +3,15 @@\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.\n- *\n- * @providesModule BeforeInputEventPlugin\n  */\n \n 'use strict';\n \n-var EventPropagators = require('EventPropagators');\n+var EventPropagators = require('events/EventPropagators');\n var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n-var FallbackCompositionState = require('FallbackCompositionState');\n-var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n-var SyntheticInputEvent = require('SyntheticInputEvent');\n+var FallbackCompositionState = require('./FallbackCompositionState');\n+var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n+var SyntheticInputEvent = require('./SyntheticInputEvent');\n \n import type {TopLevelTypes} from 'BrowserEventConstants';\n ",
                "totalChanges": 10
            },
            {
                "commitId": "e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "totalChanges": 0
            },
            {
                "commitId": "ab853e6f3ef69a56f042f5aa5c07da881fdb68a0",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "totalChanges": 0
            },
            {
                "commitId": "313611572b6567d229367ed20ff63d1bca8610bb",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "totalChanges": 0
            },
            {
                "commitId": "d9c1dbd61772f8f8ab0cdf389e70463d704c480b",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "totalChanges": 0
            },
            {
                "commitId": "d63249d03488fec1ea92a81ba29f0e87a82feeae",
                "additions": 3,
                "deletions": 5,
                "patch": "@@ -1,10 +1,8 @@\n /**\n- * Copyright 2013-present Facebook, Inc.\n- * All rights reserved.\n+ * Copyright (c) 2013-present, Facebook, Inc.\n  *\n- * This source code is licensed under the BSD-style license found in the\n- * LICENSE file in the root directory of this source tree. An additional grant\n- * of patent rights can be found in the PATENTS file in the same directory.\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n  *\n  * @providesModule BeforeInputEventPlugin\n  */",
                "totalChanges": 8
            },
            {
                "commitId": "0e556fef24e9db468d00b05ef8ddfa0b06b08f0c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -273,7 +273,7 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {string} topLevelType Record from `BrowserEventConstants`.\n+ * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */",
                "totalChanges": 2
            },
            {
                "commitId": "755724a24c4743b5507590e512cdf2f24d9b8435",
                "additions": 11,
                "deletions": 13,
                "patch": "@@ -209,8 +209,8 @@ function getDataFromCustomEvent(nativeEvent) {\n   return null;\n }\n \n-// Track the current IME composition fallback object, if any.\n-var currentComposition = null;\n+// Track the current IME composition status, if any.\n+var isComposing = false;\n \n /**\n  * @return {?object} A SyntheticCompositionEvent.\n@@ -226,7 +226,7 @@ function extractCompositionEvent(\n \n   if (canUseCompositionEvent) {\n     eventType = getCompositionEventType(topLevelType);\n-  } else if (!currentComposition) {\n+  } else if (!isComposing) {\n     if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n       eventType = eventTypes.compositionStart;\n     }\n@@ -241,13 +241,11 @@ function extractCompositionEvent(\n   if (useFallbackCompositionData) {\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n-    if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(\n-        nativeEventTarget,\n-      );\n+    if (!isComposing && eventType === eventTypes.compositionStart) {\n+      isComposing = FallbackCompositionState.initialize(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n-      if (currentComposition) {\n-        fallbackData = currentComposition.getData();\n+      if (isComposing) {\n+        fallbackData = FallbackCompositionState.getData();\n       }\n     }\n   }\n@@ -338,15 +336,15 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n-  if (currentComposition) {\n+  if (isComposing) {\n     if (\n       topLevelType === 'topCompositionEnd' ||\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      var chars = currentComposition.getData();\n-      FallbackCompositionState.release(currentComposition);\n-      currentComposition = null;\n+      var chars = FallbackCompositionState.getData();\n+      FallbackCompositionState.reset();\n+      isComposing = false;\n       return chars;\n     }\n     return null;",
                "totalChanges": 24
            },
            {
                "commitId": "00ba97a354e841701b4b83983c3a3904895e7b87",
                "additions": 12,
                "deletions": 2,
                "patch": "@@ -374,8 +374,18 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n        *   being used. Ex: `Cmd+C`. No character is inserted, and no\n        *   `input` event will occur.\n        */\n-      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-        return String.fromCharCode(nativeEvent.which);\n+      if (!isKeypressCommand(nativeEvent)) {\n+        // IE fires the `keypress` event when a user types an emoji via\n+        // Touch keyboard of Windows.  In such a case, the `char` property\n+        // holds an emoji character like `\\uD83D\\uDE0A`.  Because its length\n+        // is 2, the property `which` does not represent an emoji correctly.\n+        // In such a case, we directly return the `char` property instead of\n+        // using `which`.\n+        if (nativeEvent.char && nativeEvent.char.length > 1) {\n+          return nativeEvent.char;\n+        } else if (nativeEvent.which) {\n+          return String.fromCharCode(nativeEvent.which);\n+        }\n       }\n       return null;\n     case 'topCompositionEnd':",
                "totalChanges": 14
            },
            {
                "commitId": "a9d0deb8e13e9f0b1ee7d2f28a6eec0e7ad2e41d",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -17,7 +17,7 @@ var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n-import type {TopLevelTypes} from 'EventConstants';\n+import type {TopLevelTypes} from 'BrowserEventConstants';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n@@ -275,7 +275,7 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {string} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n@@ -329,7 +329,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {string} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */",
                "totalChanges": 6
            },
            {
                "commitId": "b1768b5a48d1f82e4ef4150e0036c5f846d3758a",
                "additions": 14,
                "deletions": 8,
                "patch": "@@ -22,8 +22,8 @@ import type {TopLevelTypes} from 'EventConstants';\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n \n-var canUseCompositionEvent = ExecutionEnvironment.canUseDOM &&\n-  'CompositionEvent' in window;\n+var canUseCompositionEvent =\n+  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n \n var documentMode = null;\n if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n@@ -33,15 +33,17 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n-var canUseTextInputEvent = ExecutionEnvironment.canUseDOM &&\n+var canUseTextInputEvent =\n+  ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n   !isPresto();\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n-var useFallbackCompositionData = ExecutionEnvironment.canUseDOM &&\n+var useFallbackCompositionData =\n+  ExecutionEnvironment.canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n \n@@ -51,9 +53,11 @@ var useFallbackCompositionData = ExecutionEnvironment.canUseDOM &&\n  */\n function isPresto() {\n   var opera = window.opera;\n-  return typeof opera === 'object' &&\n+  return (\n+    typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n-    parseInt(opera.version(), 10) <= 12;\n+    parseInt(opera.version(), 10) <= 12\n+  );\n }\n \n var SPACEBAR_CODE = 32;\n@@ -126,9 +130,11 @@ var hasSpaceKeypress = false;\n  * (cut, copy, select-all, etc.) even though no character is inserted.\n  */\n function isKeypressCommand(nativeEvent) {\n-  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n+  return (\n+    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n     // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n-    !(nativeEvent.ctrlKey && nativeEvent.altKey);\n+    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n+  );\n }\n \n /**",
                "totalChanges": 22
            },
            {
                "commitId": "b1b4a2fb252f26fe10d29ba60d85ff89a85ff3ec",
                "additions": 30,
                "deletions": 44,
                "patch": null,
                "totalChanges": 74
            },
            {
                "commitId": "1843f8716803d380df34a7362d80022352853931",
                "additions": 30,
                "deletions": 44,
                "patch": null,
                "totalChanges": 74
            },
            {
                "commitId": "8bc11649df767402c262b6c9b67c6dd811d42cd0",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -12,7 +12,7 @@\n 'use strict';\n \n var EventPropagators = require('EventPropagators');\n-var ExecutionEnvironment = require('ExecutionEnvironment');\n+var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');",
                "totalChanges": 2
            },
            {
                "commitId": "e452e3374135c116ef687a8bb3a5d277e3cde8fb",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -12,7 +12,7 @@\n 'use strict';\n \n var EventPropagators = require('EventPropagators');\n-var ExecutionEnvironment = require('ExecutionEnvironment');\n+var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');",
                "totalChanges": 2
            },
            {
                "commitId": "e3131c1d55d6695c2f0966379535f88b813f912b",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "totalChanges": 0
            },
            {
                "commitId": "a3fb0310ca6f7cad0707b5a9fd004c19e004186f",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "totalChanges": 0
            },
            {
                "commitId": "a64ca9b697d0808a2966465fea2e658e4f310080",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -345,11 +345,12 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n+  // If composition event is available, we extract a string only at\n+  // compositionevent, otherwise extract it at fallback events.\n   if (currentComposition) {\n-    if (\n-      topLevelType === 'topCompositionEnd' ||\n-      isFallbackCompositionEnd(topLevelType, nativeEvent)\n-    ) {\n+    if (topLevelType === 'topCompositionEnd'\n+        || (!canUseCompositionEvent\n+            && isFallbackCompositionEnd(topLevelType, nativeEvent))) {\n       var chars = currentComposition.getData();\n       FallbackCompositionState.release(currentComposition);\n       currentComposition = null;",
                "totalChanges": 9
            },
            {
                "commitId": "f7076b7759c57b95da21ffca892ddbdcf3ffed02",
                "additions": 8,
                "deletions": 10,
                "patch": "@@ -17,8 +17,6 @@ var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n-var keyOf = require('keyOf');\n-\n import type { TopLevelTypes } from 'EventConstants';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n@@ -75,8 +73,8 @@ var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null}),\n+      bubbled: 'onBeforeInput',\n+      captured: 'onBeforeInputCapture',\n     },\n     dependencies: [\n       'topCompositionEnd',\n@@ -87,8 +85,8 @@ var eventTypes = {\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null}),\n+      bubbled: 'onCompositionEnd',\n+      captured: 'onCompositionEndCapture',\n     },\n     dependencies: [\n       'topBlur',\n@@ -101,8 +99,8 @@ var eventTypes = {\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null}),\n+      bubbled: 'onCompositionStart',\n+      captured: 'onCompositionStartCapture',\n     },\n     dependencies: [\n       'topBlur',\n@@ -115,8 +113,8 @@ var eventTypes = {\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null}),\n+      bubbled: 'onCompositionUpdate',\n+      captured: 'onCompositionUpdateCapture',\n     },\n     dependencies: [\n       'topBlur',",
                "totalChanges": 18
            },
            {
                "commitId": "2f9a9dc4c56c1caee250626c54c587c5f233fcab",
                "additions": 42,
                "deletions": 43,
                "patch": "@@ -11,7 +11,6 @@\n \n 'use strict';\n \n-var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n@@ -20,6 +19,8 @@ var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+import type { TopLevelTypes } from 'EventConstants';\n+\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n \n@@ -70,8 +71,6 @@ function isPresto() {\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n-var topLevelTypes = EventConstants.topLevelTypes;\n-\n // Events and their corresponding property names.\n var eventTypes = {\n   beforeInput: {\n@@ -80,10 +79,10 @@ var eventTypes = {\n       captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topCompositionEnd,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste,\n+      'topCompositionEnd',\n+      'topKeyPress',\n+      'topTextInput',\n+      'topPaste',\n     ],\n   },\n   compositionEnd: {\n@@ -92,12 +91,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionEnd,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionEnd',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n   compositionStart: {\n@@ -106,12 +105,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionStart,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionStart',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n   compositionUpdate: {\n@@ -120,12 +119,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionUpdate,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionUpdate',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n };\n@@ -155,11 +154,11 @@ function isKeypressCommand(nativeEvent) {\n  */\n function getCompositionEventType(topLevelType) {\n   switch (topLevelType) {\n-    case topLevelTypes.topCompositionStart:\n+    case 'topCompositionStart':\n       return eventTypes.compositionStart;\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return eventTypes.compositionEnd;\n-    case topLevelTypes.topCompositionUpdate:\n+    case 'topCompositionUpdate':\n       return eventTypes.compositionUpdate;\n   }\n }\n@@ -174,7 +173,7 @@ function getCompositionEventType(topLevelType) {\n  */\n function isFallbackCompositionStart(topLevelType, nativeEvent) {\n   return (\n-    topLevelType === topLevelTypes.topKeyDown &&\n+    topLevelType === 'topKeyDown' &&\n     nativeEvent.keyCode === START_KEYCODE\n   );\n }\n@@ -188,16 +187,16 @@ function isFallbackCompositionStart(topLevelType, nativeEvent) {\n  */\n function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case topLevelTypes.topKeyUp:\n+    case 'topKeyUp':\n       // Command keys insert or clear IME input.\n       return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n-    case topLevelTypes.topKeyDown:\n+    case 'topKeyDown':\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return (nativeEvent.keyCode !== START_KEYCODE);\n-    case topLevelTypes.topKeyPress:\n-    case topLevelTypes.topMouseDown:\n-    case topLevelTypes.topBlur:\n+    case 'topKeyPress':\n+    case 'topMouseDown':\n+    case 'topBlur':\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -291,11 +290,11 @@ function extractCompositionEvent(\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n-function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   switch (topLevelType) {\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return getDataFromCustomEvent(nativeEvent);\n-    case topLevelTypes.topKeyPress:\n+    case 'topKeyPress':\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -318,7 +317,7 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case topLevelTypes.topTextInput:\n+    case 'topTextInput':\n       // Record the characters to be added to the DOM.\n       var chars = nativeEvent.data;\n \n@@ -345,12 +344,12 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   if (currentComposition) {\n     if (\n-      topLevelType === topLevelTypes.topCompositionEnd ||\n+      topLevelType === 'topCompositionEnd' ||\n       isFallbackCompositionEnd(topLevelType, nativeEvent)\n     ) {\n       var chars = currentComposition.getData();\n@@ -362,11 +361,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n   }\n \n   switch (topLevelType) {\n-    case topLevelTypes.topPaste:\n+    case 'topPaste':\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case topLevelTypes.topKeyPress:\n+    case 'topKeyPress':\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -387,7 +386,7 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n         return String.fromCharCode(nativeEvent.which);\n       }\n       return null;\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return useFallbackCompositionData ? null : nativeEvent.data;\n     default:\n       return null;",
                "totalChanges": 85
            },
            {
                "commitId": "209b7522d99a8af36f8d9e06ce622c59b793e5a3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "totalChanges": 2
            },
            {
                "commitId": "3b96650e39ddda5ba49245713ef16dbc52d25e9e",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "totalChanges": 2
            },
            {
                "commitId": "bef45b0b1a98ea9b472ba664d955a039cf2f8068",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "totalChanges": 2
            },
            {
                "commitId": "4f7a2766e4c29c2f25c0807ac21318c3963e6aec",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -7,7 +7,6 @@\n  * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n- * @typechecks static-only\n  */\n \n 'use strict';",
                "totalChanges": 1
            },
            {
                "commitId": "46f5251c66dcb0895743db02265c07320d0a6089",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -7,7 +7,6 @@\n  * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n- * @typechecks static-only\n  */\n \n 'use strict';",
                "totalChanges": 1
            },
            {
                "commitId": "35962a00084382b49d1f9e3bd36612925f360e5b",
                "additions": 9,
                "deletions": 29,
                "patch": "@@ -227,16 +227,11 @@ function getDataFromCustomEvent(nativeEvent) {\n var currentComposition = null;\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -261,7 +256,8 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+      currentComposition =\n+        FallbackCompositionState.getPooled(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (currentComposition) {\n         fallbackData = currentComposition.getData();\n@@ -271,7 +267,7 @@ function extractCompositionEvent(\n \n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -403,16 +399,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n  * `textInput` or fallback behavior.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -432,7 +423,7 @@ function extractBeforeInputEvent(\n \n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -464,33 +455,22 @@ var BeforeInputEventPlugin = {\n \n   eventTypes: eventTypes,\n \n-  /**\n-   * @param {string} topLevelType Record from `EventConstants`.\n-   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n-   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n-   * @param {object} nativeEvent Native browser event.\n-   * @return {*} An accumulation of synthetic events.\n-   * @see {EventPluginHub.extractEvents}\n-   */\n   extractEvents: function(\n     topLevelType,\n-    topLevelTarget,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),",
                "totalChanges": 38
            },
            {
                "commitId": "f470cb88f88b4667419f170fcc7971dad4298494",
                "additions": 9,
                "deletions": 29,
                "patch": "@@ -227,16 +227,11 @@ function getDataFromCustomEvent(nativeEvent) {\n var currentComposition = null;\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -261,7 +256,8 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+      currentComposition =\n+        FallbackCompositionState.getPooled(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (currentComposition) {\n         fallbackData = currentComposition.getData();\n@@ -271,7 +267,7 @@ function extractCompositionEvent(\n \n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -403,16 +399,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n  * `textInput` or fallback behavior.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -432,7 +423,7 @@ function extractBeforeInputEvent(\n \n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -464,33 +455,22 @@ var BeforeInputEventPlugin = {\n \n   eventTypes: eventTypes,\n \n-  /**\n-   * @param {string} topLevelType Record from `EventConstants`.\n-   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n-   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n-   * @param {object} nativeEvent Native browser event.\n-   * @return {*} An accumulation of synthetic events.\n-   * @see {EventPluginHub.extractEvents}\n-   */\n   extractEvents: function(\n     topLevelType,\n-    topLevelTarget,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),",
                "totalChanges": 38
            },
            {
                "commitId": "7b1f03f4f8e6ac110565e62035a042cb9a5ca612",
                "additions": 14,
                "deletions": 7,
                "patch": "@@ -237,7 +237,8 @@ function extractCompositionEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var eventType;\n   var fallbackData;\n@@ -271,7 +272,8 @@ function extractCompositionEvent(\n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   if (fallbackData) {\n@@ -411,7 +413,8 @@ function extractBeforeInputEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var chars;\n \n@@ -430,7 +433,8 @@ function extractBeforeInputEvent(\n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   event.data = chars;\n@@ -472,20 +476,23 @@ var BeforeInputEventPlugin = {\n     topLevelType,\n     topLevelTarget,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n     ];\n   },",
                "totalChanges": 21
            },
            {
                "commitId": "4b804e485db51b49716736ce2dfcf23d020b6eb2",
                "additions": 14,
                "deletions": 7,
                "patch": "@@ -237,7 +237,8 @@ function extractCompositionEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var eventType;\n   var fallbackData;\n@@ -271,7 +272,8 @@ function extractCompositionEvent(\n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   if (fallbackData) {\n@@ -411,7 +413,8 @@ function extractBeforeInputEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var chars;\n \n@@ -430,7 +433,8 @@ function extractBeforeInputEvent(\n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   event.data = chars;\n@@ -472,20 +476,23 @@ var BeforeInputEventPlugin = {\n     topLevelType,\n     topLevelTarget,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n     ];\n   },",
                "totalChanges": 21
            },
            {
                "commitId": "4c3e9650ba6c9ea90956a08542d9fa9b5d72ee88",
                "additions": 15,
                "deletions": 15,
                "patch": "@@ -78,57 +78,57 @@ var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null})\n+      captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste\n-    ]\n+      topLevelTypes.topPaste,\n+    ],\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null})\n+      captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null})\n+      captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionStart,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null})\n+      captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionUpdate,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n-  }\n+      topLevelTypes.topMouseDown,\n+    ],\n+  },\n };\n \n // Track whether we've ever handled a keypress on the space key.\n@@ -486,9 +486,9 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      )\n+      ),\n     ];\n-  }\n+  },\n };\n \n module.exports = BeforeInputEventPlugin;",
                "totalChanges": 30
            },
            {
                "commitId": "c089eece509012a444dc770afb5b348b47c62d3a",
                "additions": 15,
                "deletions": 15,
                "patch": "@@ -78,57 +78,57 @@ var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null})\n+      captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste\n-    ]\n+      topLevelTypes.topPaste,\n+    ],\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null})\n+      captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null})\n+      captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionStart,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null})\n+      captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionUpdate,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n-  }\n+      topLevelTypes.topMouseDown,\n+    ],\n+  },\n };\n \n // Track whether we've ever handled a keypress on the space key.\n@@ -486,9 +486,9 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      )\n+      ),\n     ];\n-  }\n+  },\n };\n \n module.exports = BeforeInputEventPlugin;",
                "totalChanges": 30
            },
            {
                "commitId": "52752446760dee0bc7232b4146f5a309ac57f065",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "totalChanges": 0
            },
            {
                "commitId": "0b063f8a09dae4b6b1de400ff2d9aba9108647de",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "totalChanges": 0
            },
            {
                "commitId": "d59a039ebdebebf5c98ab96026529f66063979bf",
                "additions": 0,
                "deletions": 4,
                "patch": "@@ -131,9 +131,6 @@ var eventTypes = {\n   }\n };\n \n-// Track characters inserted via keypress and composition events.\n-var fallbackBeforeInputChars = null;\n-\n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n \n@@ -437,7 +434,6 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  fallbackBeforeInputChars = null;\n   EventPropagators.accumulateTwoPhaseDispatches(event);\n   return event;\n }",
                "totalChanges": 4
            },
            {
                "commitId": "dae1dc629272593f342fe22c6c795cb8fdf33d11",
                "additions": 0,
                "deletions": 4,
                "patch": "@@ -131,9 +131,6 @@ var eventTypes = {\n   }\n };\n \n-// Track characters inserted via keypress and composition events.\n-var fallbackBeforeInputChars = null;\n-\n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n \n@@ -437,7 +434,6 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  fallbackBeforeInputChars = null;\n   EventPropagators.accumulateTwoPhaseDispatches(event);\n   return event;\n }",
                "totalChanges": 4
            },
            {
                "commitId": "2aeb8a2a6beb00617a4217f7f8284924fa2ad819",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013 Facebook, Inc.\n+ * Copyright 2013-2015 Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "totalChanges": 2
            },
            {
                "commitId": "3e0750a4ad2444c2df708b144ff0c8af7628881d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013 Facebook, Inc.\n+ * Copyright 2013-2015 Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "totalChanges": 2
            },
            {
                "commitId": "54c82da15f6b4717425edbf68e23ae82583a50af",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -10,7 +10,7 @@\n  * @typechecks static-only\n  */\n \n-\"use strict\";\n+'use strict';\n \n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n@@ -256,7 +256,7 @@ function extractCompositionEvent(\n   }\n \n   if (!eventType) {\n-    return;\n+    return null;\n   }\n \n   if (useFallbackCompositionData) {\n@@ -427,7 +427,7 @@ function extractBeforeInputEvent(\n   // If no characters are being inserted, no BeforeInput event should\n   // be fired.\n   if (!chars) {\n-    return;\n+    return null;\n   }\n \n   var event = SyntheticInputEvent.getPooled(\n@@ -490,7 +490,7 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      ),\n+      )\n     ];\n   }\n };",
                "totalChanges": 8
            },
            {
                "commitId": "47ee780cafa650a61bd62c4a6c13ac5554efd05c",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -256,7 +256,7 @@ function extractCompositionEvent(\n   }\n \n   if (!eventType) {\n-    return;\n+    return null;\n   }\n \n   if (useFallbackCompositionData) {\n@@ -427,7 +427,7 @@ function extractBeforeInputEvent(\n   // If no characters are being inserted, no BeforeInput event should\n   // be fired.\n   if (!chars) {\n-    return;\n+    return null;\n   }\n \n   var event = SyntheticInputEvent.getPooled(",
                "totalChanges": 4
            },
            {
                "commitId": "e27da9973193a06a138d7098c58723a7f10ed2e5",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -490,7 +490,7 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      ),\n+      )\n     ];\n   }\n };",
                "totalChanges": 2
            },
            {
                "commitId": "df64a67b7f930f90423e194637af624cdc155526",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -10,7 +10,7 @@\n  * @typechecks static-only\n  */\n \n-\"use strict\";\n+'use strict';\n \n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');",
                "totalChanges": 2
            },
            {
                "commitId": "80ed4d870a628af57dfc6e45bf6d513084f677d7",
                "additions": 389,
                "deletions": 111,
                "patch": "@@ -15,14 +15,44 @@\n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n+var FallbackCompositionState = require('FallbackCompositionState');\n+var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+var START_KEYCODE = 229;\n+\n+var canUseCompositionEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'CompositionEvent' in window\n+);\n+\n+var documentMode = null;\n+if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+  documentMode = document.documentMode;\n+}\n+\n+// Webkit offers a very useful `textInput` event that can be used to\n+// directly represent `beforeInput`. The IE `textinput` event is not as\n+// useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document || isPresto())\n+  !documentMode &&\n+  !isPresto()\n+);\n+\n+// In IE9+, we have access to composition events, but the data supplied\n+// by the native compositionend event may be incorrect. Japanese ideographic\n+// spaces, for instance (\\u3000) are not recorded correctly.\n+var useFallbackCompositionData = (\n+  ExecutionEnvironment.canUseDOM &&\n+  (\n+    !canUseCompositionEvent ||\n+    (documentMode && documentMode > 8 && documentMode <= 11)\n+  )\n );\n \n /**\n@@ -56,11 +86,53 @@ var eventTypes = {\n       topLevelTypes.topTextInput,\n       topLevelTypes.topPaste\n     ]\n+  },\n+  compositionEnd: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionEnd: null}),\n+      captured: keyOf({onCompositionEndCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionStart: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionStart: null}),\n+      captured: keyOf({onCompositionStartCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionStart,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionUpdate: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionUpdate: null}),\n+      captured: keyOf({onCompositionUpdateCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionUpdate,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n   }\n };\n \n // Track characters inserted via keypress and composition events.\n-var fallbackChars = null;\n+var fallbackBeforeInputChars = null;\n \n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n@@ -78,6 +150,298 @@ function isKeypressCommand(nativeEvent) {\n   );\n }\n \n+\n+/**\n+ * Translate native top level events into event types.\n+ *\n+ * @param {string} topLevelType\n+ * @return {object}\n+ */\n+function getCompositionEventType(topLevelType) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionStart:\n+      return eventTypes.compositionStart;\n+    case topLevelTypes.topCompositionEnd:\n+      return eventTypes.compositionEnd;\n+    case topLevelTypes.topCompositionUpdate:\n+      return eventTypes.compositionUpdate;\n+  }\n+}\n+\n+/**\n+ * Does our fallback best-guess model think this event signifies that\n+ * composition has begun?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionStart(topLevelType, nativeEvent) {\n+  return (\n+    topLevelType === topLevelTypes.topKeyDown &&\n+    nativeEvent.keyCode === START_KEYCODE\n+  );\n+}\n+\n+/**\n+ * Does our fallback mode think that this event is the end of composition?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topKeyUp:\n+      // Command keys insert or clear IME input.\n+      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n+    case topLevelTypes.topKeyDown:\n+      // Expect IME keyCode on each keydown. If we get any other\n+      // code we must have exited earlier.\n+      return (nativeEvent.keyCode !== START_KEYCODE);\n+    case topLevelTypes.topKeyPress:\n+    case topLevelTypes.topMouseDown:\n+    case topLevelTypes.topBlur:\n+      // Events are not possible without cancelling IME.\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * Google Input Tools provides composition data via a CustomEvent,\n+ * with the `data` property populated in the `detail` object. If this\n+ * is available on the event object, use it. If not, this is a plain\n+ * composition event and we have nothing special to extract.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {?string}\n+ */\n+function getDataFromCustomEvent(nativeEvent) {\n+  var detail = nativeEvent.detail;\n+  if (typeof detail === 'object' && 'data' in detail) {\n+    return detail.data;\n+  }\n+  return null;\n+}\n+\n+// Track the current IME composition fallback object, if any.\n+var currentComposition = null;\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticCompositionEvent.\n+ */\n+function extractCompositionEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var eventType;\n+  var fallbackData;\n+\n+  if (canUseCompositionEvent) {\n+    eventType = getCompositionEventType(topLevelType);\n+  } else if (!currentComposition) {\n+    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+      eventType = eventTypes.compositionStart;\n+    }\n+  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+    eventType = eventTypes.compositionEnd;\n+  }\n+\n+  if (!eventType) {\n+    return;\n+  }\n+\n+  if (useFallbackCompositionData) {\n+    // The current composition is stored statically and must not be\n+    // overwritten while composition continues.\n+    if (!currentComposition && eventType === eventTypes.compositionStart) {\n+      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+    } else if (eventType === eventTypes.compositionEnd) {\n+      if (currentComposition) {\n+        fallbackData = currentComposition.getData();\n+      }\n+    }\n+  }\n+\n+  var event = SyntheticCompositionEvent.getPooled(\n+    eventType,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  if (fallbackData) {\n+    // Inject data generated from fallback path into the synthetic event.\n+    // This matches the property of native CompositionEventInterface.\n+    event.data = fallbackData;\n+  } else {\n+    var customData = getDataFromCustomEvent(nativeEvent);\n+    if (customData !== null) {\n+      event.data = customData;\n+    }\n+  }\n+\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The string corresponding to this `beforeInput` event.\n+ */\n+function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionEnd:\n+      return getDataFromCustomEvent(nativeEvent);\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * If native `textInput` events are available, our goal is to make\n+       * use of them. However, there is a special case: the spacebar key.\n+       * In Webkit, preventing default on a spacebar `textInput` event\n+       * cancels character insertion, but it *also* causes the browser\n+       * to fall back to its default spacebar behavior of scrolling the\n+       * page.\n+       *\n+       * Tracking at:\n+       * https://code.google.com/p/chromium/issues/detail?id=355103\n+       *\n+       * To avoid this issue, use the keypress event as if no `textInput`\n+       * event is available.\n+       */\n+      var which = nativeEvent.which;\n+      if (which !== SPACEBAR_CODE) {\n+        return null;\n+      }\n+\n+      hasSpaceKeypress = true;\n+      return SPACEBAR_CHAR;\n+\n+    case topLevelTypes.topTextInput:\n+      // Record the characters to be added to the DOM.\n+      var chars = nativeEvent.data;\n+\n+      // If it's a spacebar character, assume that we have already handled\n+      // it at the keypress level and bail immediately. Android Chrome\n+      // doesn't give us keycodes, so we need to blacklist it.\n+      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n+        return null;\n+      }\n+\n+      return chars;\n+\n+    default:\n+      // For other native event types, do nothing.\n+      return null;\n+  }\n+}\n+\n+/**\n+ * For browsers that do not provide the `textInput` event, extract the\n+ * appropriate string to use for SyntheticInputEvent.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The fallback string for this `beforeInput` event.\n+ */\n+function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+  // If we are currently composing (IME) and using a fallback to do so,\n+  // try to extract the composed characters from the fallback object.\n+  if (currentComposition) {\n+    if (\n+      topLevelType === topLevelTypes.topCompositionEnd ||\n+      isFallbackCompositionEnd(topLevelType, nativeEvent)\n+    ) {\n+      var chars = currentComposition.getData();\n+      FallbackCompositionState.release(currentComposition);\n+      currentComposition = null;\n+      return chars;\n+    }\n+    return null;\n+  }\n+\n+  switch (topLevelType) {\n+    case topLevelTypes.topPaste:\n+      // If a paste event occurs after a keypress, throw out the input\n+      // chars. Paste events should not lead to BeforeInput events.\n+      return null;\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * As of v27, Firefox may fire keypress events even when no character\n+       * will be inserted. A few possibilities:\n+       *\n+       * - `which` is `0`. Arrow keys, Esc key, etc.\n+       *\n+       * - `which` is the pressed key code, but no char is available.\n+       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+       *   this key combination and no character is inserted into the\n+       *   document, but FF fires the keypress for char code `100` anyway.\n+       *   No `input` event will occur.\n+       *\n+       * - `which` is the pressed key code, but a command combination is\n+       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+       *   `input` event will occur.\n+       */\n+      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+        return String.fromCharCode(nativeEvent.which);\n+      }\n+      return null;\n+    case topLevelTypes.topCompositionEnd:\n+      return useFallbackCompositionData ? null : nativeEvent.data;\n+    default:\n+      return null;\n+  }\n+}\n+\n+/**\n+ * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n+ * `textInput` or fallback behavior.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticInputEvent.\n+ */\n+function extractBeforeInputEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var chars;\n+\n+  if (canUseTextInputEvent) {\n+    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+  } else {\n+    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+  }\n+\n+  // If no characters are being inserted, no BeforeInput event should\n+  // be fired.\n+  if (!chars) {\n+    return;\n+  }\n+\n+  var event = SyntheticInputEvent.getPooled(\n+    eventTypes.beforeInput,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  event.data = chars;\n+  fallbackBeforeInputChars = null;\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n /**\n  * Create an `onBeforeInput` event to match\n  * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n@@ -91,6 +455,10 @@ function isKeypressCommand(nativeEvent) {\n  * actually been added, contrary to the spec. Thus, `textInput` is the best\n  * available event to identify the characters that have actually been inserted\n  * into the target node.\n+ *\n+ * This plugin is also responsible for emitting `composition` events, thus\n+ * allowing us to share composition fallback code for both `beforeInput` and\n+ * `composition` event types.\n  */\n var BeforeInputEventPlugin = {\n \n@@ -105,115 +473,25 @@ var BeforeInputEventPlugin = {\n    * @see {EventPluginHub.extractEvents}\n    */\n   extractEvents: function(\n-      topLevelType,\n-      topLevelTarget,\n-      topLevelTargetID,\n-      nativeEvent) {\n-\n-    var chars;\n-\n-    if (canUseTextInputEvent) {\n-      switch (topLevelType) {\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * If native `textInput` events are available, our goal is to make\n-           * use of them. However, there is a special case: the spacebar key.\n-           * In Webkit, preventing default on a spacebar `textInput` event\n-           * cancels character insertion, but it *also* causes the browser\n-           * to fall back to its default spacebar behavior of scrolling the\n-           * page.\n-           *\n-           * Tracking at:\n-           * https://code.google.com/p/chromium/issues/detail?id=355103\n-           *\n-           * To avoid this issue, use the keypress event as if no `textInput`\n-           * event is available.\n-           */\n-          var which = nativeEvent.which;\n-          if (which !== SPACEBAR_CODE) {\n-            return;\n-          }\n-\n-          hasSpaceKeypress = true;\n-          chars = SPACEBAR_CHAR;\n-          break;\n-\n-        case topLevelTypes.topTextInput:\n-          // Record the characters to be added to the DOM.\n-          chars = nativeEvent.data;\n-\n-          // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately. Android Chrome\n-          // doesn't give us keycodes, so we need to blacklist it.\n-          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n-            return;\n-          }\n-\n-          // Otherwise, carry on.\n-          break;\n-\n-        default:\n-          // For other native event types, do nothing.\n-          return;\n-      }\n-    } else {\n-      switch (topLevelType) {\n-        case topLevelTypes.topPaste:\n-          // If a paste event occurs after a keypress, throw out the input\n-          // chars. Paste events should not lead to BeforeInput events.\n-          fallbackChars = null;\n-          break;\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * As of v27, Firefox may fire keypress events even when no character\n-           * will be inserted. A few possibilities:\n-           *\n-           * - `which` is `0`. Arrow keys, Esc key, etc.\n-           *\n-           * - `which` is the pressed key code, but no char is available.\n-           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n-           *   this key combination and no character is inserted into the\n-           *   document, but FF fires the keypress for char code `100` anyway.\n-           *   No `input` event will occur.\n-           *\n-           * - `which` is the pressed key code, but a command combination is\n-           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n-           *   `input` event will occur.\n-           */\n-          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-            fallbackChars = String.fromCharCode(nativeEvent.which);\n-          }\n-          break;\n-        case topLevelTypes.topCompositionEnd:\n-          fallbackChars = nativeEvent.data;\n-          break;\n-      }\n-\n-      // If no changes have occurred to the fallback string, no relevant\n-      // event has fired and we're done.\n-      if (fallbackChars === null) {\n-        return;\n-      }\n-\n-      chars = fallbackChars;\n-    }\n-\n-    // If no characters are being inserted, no BeforeInput event should\n-    // be fired.\n-    if (!chars) {\n-      return;\n-    }\n-\n-    var event = SyntheticInputEvent.getPooled(\n-      eventTypes.beforeInput,\n-      topLevelTargetID,\n-      nativeEvent\n-    );\n-\n-    event.data = chars;\n-    fallbackChars = null;\n-    EventPropagators.accumulateTwoPhaseDispatches(event);\n-    return event;\n+    topLevelType,\n+    topLevelTarget,\n+    topLevelTargetID,\n+    nativeEvent\n+  ) {\n+    return [\n+      extractCompositionEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+      extractBeforeInputEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+    ];\n   }\n };\n ",
                "totalChanges": 500
            },
            {
                "commitId": "9ad0e1d846a4fe51f2397333d1df3e0b72d28067",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -34,14 +34,14 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n-// Webkit and Presto offer a very useful `textInput` event that can be used to\n+// Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n-  !isOldPresto()\n+  !isPresto()\n );\n \n // In IE9+, we have access to composition events, but the data supplied\n@@ -59,7 +59,7 @@ var useFallbackCompositionData = (\n  * Opera <= 12 includes TextEvent in window, but does not fire\n  * text input events. Rely on keypress instead.\n  */\n-function isOldPresto() {\n+function isPresto() {\n   var opera = window.opera;\n   return (\n     typeof opera === 'object' &&",
                "totalChanges": 6
            },
            {
                "commitId": "ddaf215b03cee506c907474578c950367b344062",
                "additions": 390,
                "deletions": 112,
                "patch": "@@ -15,21 +15,51 @@\n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n+var FallbackCompositionState = require('FallbackCompositionState');\n+var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+var START_KEYCODE = 229;\n+\n+var canUseCompositionEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'CompositionEvent' in window\n+);\n+\n+var documentMode = null;\n+if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+  documentMode = document.documentMode;\n+}\n+\n+// Webkit and Presto offer a very useful `textInput` event that can be used to\n+// directly represent `beforeInput`. The IE `textinput` event is not as\n+// useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document || isPresto())\n+  !documentMode &&\n+  !isOldPresto()\n+);\n+\n+// In IE9+, we have access to composition events, but the data supplied\n+// by the native compositionend event may be incorrect. Japanese ideographic\n+// spaces, for instance (\\u3000) are not recorded correctly.\n+var useFallbackCompositionData = (\n+  ExecutionEnvironment.canUseDOM &&\n+  (\n+    !canUseCompositionEvent ||\n+    (documentMode && documentMode > 8 && documentMode <= 11)\n+  )\n );\n \n /**\n  * Opera <= 12 includes TextEvent in window, but does not fire\n  * text input events. Rely on keypress instead.\n  */\n-function isPresto() {\n+function isOldPresto() {\n   var opera = window.opera;\n   return (\n     typeof opera === 'object' &&\n@@ -56,11 +86,53 @@ var eventTypes = {\n       topLevelTypes.topTextInput,\n       topLevelTypes.topPaste\n     ]\n+  },\n+  compositionEnd: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionEnd: null}),\n+      captured: keyOf({onCompositionEndCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionStart: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionStart: null}),\n+      captured: keyOf({onCompositionStartCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionStart,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionUpdate: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionUpdate: null}),\n+      captured: keyOf({onCompositionUpdateCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionUpdate,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n   }\n };\n \n // Track characters inserted via keypress and composition events.\n-var fallbackChars = null;\n+var fallbackBeforeInputChars = null;\n \n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n@@ -78,6 +150,298 @@ function isKeypressCommand(nativeEvent) {\n   );\n }\n \n+\n+/**\n+ * Translate native top level events into event types.\n+ *\n+ * @param {string} topLevelType\n+ * @return {object}\n+ */\n+function getCompositionEventType(topLevelType) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionStart:\n+      return eventTypes.compositionStart;\n+    case topLevelTypes.topCompositionEnd:\n+      return eventTypes.compositionEnd;\n+    case topLevelTypes.topCompositionUpdate:\n+      return eventTypes.compositionUpdate;\n+  }\n+}\n+\n+/**\n+ * Does our fallback best-guess model think this event signifies that\n+ * composition has begun?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionStart(topLevelType, nativeEvent) {\n+  return (\n+    topLevelType === topLevelTypes.topKeyDown &&\n+    nativeEvent.keyCode === START_KEYCODE\n+  );\n+}\n+\n+/**\n+ * Does our fallback mode think that this event is the end of composition?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topKeyUp:\n+      // Command keys insert or clear IME input.\n+      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n+    case topLevelTypes.topKeyDown:\n+      // Expect IME keyCode on each keydown. If we get any other\n+      // code we must have exited earlier.\n+      return (nativeEvent.keyCode !== START_KEYCODE);\n+    case topLevelTypes.topKeyPress:\n+    case topLevelTypes.topMouseDown:\n+    case topLevelTypes.topBlur:\n+      // Events are not possible without cancelling IME.\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * Google Input Tools provides composition data via a CustomEvent,\n+ * with the `data` property populated in the `detail` object. If this\n+ * is available on the event object, use it. If not, this is a plain\n+ * composition event and we have nothing special to extract.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {?string}\n+ */\n+function getDataFromCustomEvent(nativeEvent) {\n+  var detail = nativeEvent.detail;\n+  if (typeof detail === 'object' && 'data' in detail) {\n+    return detail.data;\n+  }\n+  return null;\n+}\n+\n+// Track the current IME composition fallback object, if any.\n+var currentComposition = null;\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticCompositionEvent.\n+ */\n+function extractCompositionEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var eventType;\n+  var fallbackData;\n+\n+  if (canUseCompositionEvent) {\n+    eventType = getCompositionEventType(topLevelType);\n+  } else if (!currentComposition) {\n+    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+      eventType = eventTypes.compositionStart;\n+    }\n+  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+    eventType = eventTypes.compositionEnd;\n+  }\n+\n+  if (!eventType) {\n+    return;\n+  }\n+\n+  if (useFallbackCompositionData) {\n+    // The current composition is stored statically and must not be\n+    // overwritten while composition continues.\n+    if (!currentComposition && eventType === eventTypes.compositionStart) {\n+      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+    } else if (eventType === eventTypes.compositionEnd) {\n+      if (currentComposition) {\n+        fallbackData = currentComposition.getData();\n+      }\n+    }\n+  }\n+\n+  var event = SyntheticCompositionEvent.getPooled(\n+    eventType,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  if (fallbackData) {\n+    // Inject data generated from fallback path into the synthetic event.\n+    // This matches the property of native CompositionEventInterface.\n+    event.data = fallbackData;\n+  } else {\n+    var customData = getDataFromCustomEvent(nativeEvent);\n+    if (customData !== null) {\n+      event.data = customData;\n+    }\n+  }\n+\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The string corresponding to this `beforeInput` event.\n+ */\n+function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionEnd:\n+      return getDataFromCustomEvent(nativeEvent);\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * If native `textInput` events are available, our goal is to make\n+       * use of them. However, there is a special case: the spacebar key.\n+       * In Webkit, preventing default on a spacebar `textInput` event\n+       * cancels character insertion, but it *also* causes the browser\n+       * to fall back to its default spacebar behavior of scrolling the\n+       * page.\n+       *\n+       * Tracking at:\n+       * https://code.google.com/p/chromium/issues/detail?id=355103\n+       *\n+       * To avoid this issue, use the keypress event as if no `textInput`\n+       * event is available.\n+       */\n+      var which = nativeEvent.which;\n+      if (which !== SPACEBAR_CODE) {\n+        return null;\n+      }\n+\n+      hasSpaceKeypress = true;\n+      return SPACEBAR_CHAR;\n+\n+    case topLevelTypes.topTextInput:\n+      // Record the characters to be added to the DOM.\n+      var chars = nativeEvent.data;\n+\n+      // If it's a spacebar character, assume that we have already handled\n+      // it at the keypress level and bail immediately. Android Chrome\n+      // doesn't give us keycodes, so we need to blacklist it.\n+      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n+        return null;\n+      }\n+\n+      return chars;\n+\n+    default:\n+      // For other native event types, do nothing.\n+      return null;\n+  }\n+}\n+\n+/**\n+ * For browsers that do not provide the `textInput` event, extract the\n+ * appropriate string to use for SyntheticInputEvent.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The fallback string for this `beforeInput` event.\n+ */\n+function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+  // If we are currently composing (IME) and using a fallback to do so,\n+  // try to extract the composed characters from the fallback object.\n+  if (currentComposition) {\n+    if (\n+      topLevelType === topLevelTypes.topCompositionEnd ||\n+      isFallbackCompositionEnd(topLevelType, nativeEvent)\n+    ) {\n+      var chars = currentComposition.getData();\n+      FallbackCompositionState.release(currentComposition);\n+      currentComposition = null;\n+      return chars;\n+    }\n+    return null;\n+  }\n+\n+  switch (topLevelType) {\n+    case topLevelTypes.topPaste:\n+      // If a paste event occurs after a keypress, throw out the input\n+      // chars. Paste events should not lead to BeforeInput events.\n+      return null;\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * As of v27, Firefox may fire keypress events even when no character\n+       * will be inserted. A few possibilities:\n+       *\n+       * - `which` is `0`. Arrow keys, Esc key, etc.\n+       *\n+       * - `which` is the pressed key code, but no char is available.\n+       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+       *   this key combination and no character is inserted into the\n+       *   document, but FF fires the keypress for char code `100` anyway.\n+       *   No `input` event will occur.\n+       *\n+       * - `which` is the pressed key code, but a command combination is\n+       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+       *   `input` event will occur.\n+       */\n+      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+        return String.fromCharCode(nativeEvent.which);\n+      }\n+      return null;\n+    case topLevelTypes.topCompositionEnd:\n+      return useFallbackCompositionData ? null : nativeEvent.data;\n+    default:\n+      return null;\n+  }\n+}\n+\n+/**\n+ * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n+ * `textInput` or fallback behavior.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticInputEvent.\n+ */\n+function extractBeforeInputEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var chars;\n+\n+  if (canUseTextInputEvent) {\n+    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+  } else {\n+    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+  }\n+\n+  // If no characters are being inserted, no BeforeInput event should\n+  // be fired.\n+  if (!chars) {\n+    return;\n+  }\n+\n+  var event = SyntheticInputEvent.getPooled(\n+    eventTypes.beforeInput,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  event.data = chars;\n+  fallbackBeforeInputChars = null;\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n /**\n  * Create an `onBeforeInput` event to match\n  * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n@@ -91,6 +455,10 @@ function isKeypressCommand(nativeEvent) {\n  * actually been added, contrary to the spec. Thus, `textInput` is the best\n  * available event to identify the characters that have actually been inserted\n  * into the target node.\n+ *\n+ * This plugin is also responsible for emitting `composition` events, thus\n+ * allowing us to share composition fallback code for both `beforeInput` and\n+ * `composition` event types.\n  */\n var BeforeInputEventPlugin = {\n \n@@ -105,115 +473,25 @@ var BeforeInputEventPlugin = {\n    * @see {EventPluginHub.extractEvents}\n    */\n   extractEvents: function(\n-      topLevelType,\n-      topLevelTarget,\n-      topLevelTargetID,\n-      nativeEvent) {\n-\n-    var chars;\n-\n-    if (canUseTextInputEvent) {\n-      switch (topLevelType) {\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * If native `textInput` events are available, our goal is to make\n-           * use of them. However, there is a special case: the spacebar key.\n-           * In Webkit, preventing default on a spacebar `textInput` event\n-           * cancels character insertion, but it *also* causes the browser\n-           * to fall back to its default spacebar behavior of scrolling the\n-           * page.\n-           *\n-           * Tracking at:\n-           * https://code.google.com/p/chromium/issues/detail?id=355103\n-           *\n-           * To avoid this issue, use the keypress event as if no `textInput`\n-           * event is available.\n-           */\n-          var which = nativeEvent.which;\n-          if (which !== SPACEBAR_CODE) {\n-            return;\n-          }\n-\n-          hasSpaceKeypress = true;\n-          chars = SPACEBAR_CHAR;\n-          break;\n-\n-        case topLevelTypes.topTextInput:\n-          // Record the characters to be added to the DOM.\n-          chars = nativeEvent.data;\n-\n-          // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately. Android Chrome\n-          // doesn't give us keycodes, so we need to blacklist it.\n-          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n-            return;\n-          }\n-\n-          // Otherwise, carry on.\n-          break;\n-\n-        default:\n-          // For other native event types, do nothing.\n-          return;\n-      }\n-    } else {\n-      switch (topLevelType) {\n-        case topLevelTypes.topPaste:\n-          // If a paste event occurs after a keypress, throw out the input\n-          // chars. Paste events should not lead to BeforeInput events.\n-          fallbackChars = null;\n-          break;\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * As of v27, Firefox may fire keypress events even when no character\n-           * will be inserted. A few possibilities:\n-           *\n-           * - `which` is `0`. Arrow keys, Esc key, etc.\n-           *\n-           * - `which` is the pressed key code, but no char is available.\n-           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n-           *   this key combination and no character is inserted into the\n-           *   document, but FF fires the keypress for char code `100` anyway.\n-           *   No `input` event will occur.\n-           *\n-           * - `which` is the pressed key code, but a command combination is\n-           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n-           *   `input` event will occur.\n-           */\n-          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-            fallbackChars = String.fromCharCode(nativeEvent.which);\n-          }\n-          break;\n-        case topLevelTypes.topCompositionEnd:\n-          fallbackChars = nativeEvent.data;\n-          break;\n-      }\n-\n-      // If no changes have occurred to the fallback string, no relevant\n-      // event has fired and we're done.\n-      if (fallbackChars === null) {\n-        return;\n-      }\n-\n-      chars = fallbackChars;\n-    }\n-\n-    // If no characters are being inserted, no BeforeInput event should\n-    // be fired.\n-    if (!chars) {\n-      return;\n-    }\n-\n-    var event = SyntheticInputEvent.getPooled(\n-      eventTypes.beforeInput,\n-      topLevelTargetID,\n-      nativeEvent\n-    );\n-\n-    event.data = chars;\n-    fallbackChars = null;\n-    EventPropagators.accumulateTwoPhaseDispatches(event);\n-    return event;\n+    topLevelType,\n+    topLevelTarget,\n+    topLevelTargetID,\n+    nativeEvent\n+  ) {\n+    return [\n+      extractCompositionEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+      extractBeforeInputEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+    ];\n   }\n };\n ",
                "totalChanges": 502
            },
            {
                "commitId": "b5bcaba77fbe53cafd7c5f6b76752b09791caadf",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only",
                "totalChanges": 15
            },
            {
                "commitId": "5d3b12bb3bd6a092cf00ede07b8255a8399c2e58",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only",
                "totalChanges": 15
            },
            {
                "commitId": "dcf415c2b91ce52fd5d4dd02b70875ba9d33290f",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only",
                "totalChanges": 15
            },
            {
                "commitId": "f71455fb319d1daf5a04cc03357fcd185d9f72ec",
                "additions": 8,
                "deletions": 3,
                "patch": "@@ -69,6 +69,9 @@ var eventTypes = {\n // Track characters inserted via keypress and composition events.\n var fallbackChars = null;\n \n+// Track whether we've ever handled a keypress on the space key.\n+var hasSpaceKeypress = false;\n+\n /**\n  * Return whether a native keypress event is assumed to be a command.\n  * This is required because Firefox fires `keypress` events for key commands\n@@ -138,16 +141,18 @@ var BeforeInputEventPlugin = {\n             return;\n           }\n \n-          chars = String.fromCharCode(which);\n+          hasSpaceKeypress = true;\n+          chars = SPACEBAR_CHAR;\n           break;\n \n         case topLevelTypes.topTextInput:\n           // Record the characters to be added to the DOM.\n           chars = nativeEvent.data;\n \n           // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately.\n-          if (chars === SPACEBAR_CHAR) {\n+          // it at the keypress level and bail immediately. Android Chrome\n+          // doesn't give us keycodes, so we need to blacklist it.\n+          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n             return;\n           }\n ",
                "totalChanges": 11
            },
            {
                "commitId": "468007612f4a6dabb228618d9a3274f067fc2c51",
                "additions": 14,
                "deletions": 1,
                "patch": "@@ -29,9 +29,22 @@ var keyOf = require('keyOf');\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document)\n+  !('documentMode' in document || isPresto())\n );\n \n+/**\n+ * Opera <= 12 includes TextEvent in window, but does not fire\n+ * text input events. Rely on keypress instead.\n+ */\n+function isPresto() {\n+  var opera = window.opera;\n+  return (\n+    typeof opera === 'object' &&\n+    typeof opera.version === 'function' &&\n+    parseInt(opera.version(), 10) <= 12\n+  );\n+}\n+\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n ",
                "totalChanges": 15
            },
            {
                "commitId": "807e3dc42375fbc15c41c847a38acfd518fba7a1",
                "additions": 14,
                "deletions": 1,
                "patch": "@@ -29,9 +29,22 @@ var keyOf = require('keyOf');\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document)\n+  !('documentMode' in document || isPresto())\n );\n \n+/**\n+ * Opera <= 12 includes TextEvent in window, but does not fire\n+ * text input events. Rely on keypress instead.\n+ */\n+function isPresto() {\n+  var opera = window.opera;\n+  return (\n+    typeof opera === 'object' &&\n+    typeof opera.version === 'function' &&\n+    parseInt(opera.version(), 10) <= 12\n+  );\n+}\n+\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n ",
                "totalChanges": 15
            },
            {
                "commitId": "5476f9168beadda74506d37fd779e7e4bca0bc1c",
                "additions": 45,
                "deletions": 7,
                "patch": "@@ -26,12 +26,15 @@ var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n-var useBeforeInputEvent = (\n+var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !('documentMode' in document)\n );\n \n+var SPACEBAR_CODE = 32;\n+var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n+\n var topLevelTypes = EventConstants.topLevelTypes;\n \n // Events and their corresponding property names.\n@@ -100,13 +103,48 @@ var BeforeInputEventPlugin = {\n \n     var chars;\n \n-    if (useBeforeInputEvent) {\n-      // For browsers that support `textInput` events natively, don't do\n-      // anything with keypress, composition, etc.\n-      if (topLevelType !== topLevelTypes.topTextInput) {\n-        return;\n+    if (canUseTextInputEvent) {\n+      switch (topLevelType) {\n+        case topLevelTypes.topKeyPress:\n+          /**\n+           * If native `textInput` events are available, our goal is to make\n+           * use of them. However, there is a special case: the spacebar key.\n+           * In Webkit, preventing default on a spacebar `textInput` event\n+           * cancels character insertion, but it *also* causes the browser\n+           * to fall back to its default spacebar behavior of scrolling the\n+           * page.\n+           *\n+           * Tracking at:\n+           * https://code.google.com/p/chromium/issues/detail?id=355103\n+           *\n+           * To avoid this issue, use the keypress event as if no `textInput`\n+           * event is available.\n+           */\n+          var which = nativeEvent.which;\n+          if (which !== SPACEBAR_CODE) {\n+            return;\n+          }\n+\n+          chars = String.fromCharCode(which);\n+          break;\n+\n+        case topLevelTypes.topTextInput:\n+          // Record the characters to be added to the DOM.\n+          chars = nativeEvent.data;\n+\n+          // If it's a spacebar character, assume that we have already handled\n+          // it at the keypress level and bail immediately.\n+          if (chars === SPACEBAR_CHAR) {\n+            return;\n+          }\n+\n+          // Otherwise, carry on.\n+          break;\n+\n+        default:\n+          // For other native event types, do nothing.\n+          return;\n       }\n-      chars = nativeEvent.data;\n     } else {\n       switch (topLevelType) {\n         case topLevelTypes.topPaste:",
                "totalChanges": 52
            },
            {
                "commitId": "116ee058ebd76071a8aefcd95254f772ec18605f",
                "additions": 171,
                "deletions": 0,
                "patch": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright 2013 Facebook, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * @providesModule BeforeInputEventPlugin\n+ * @typechecks static-only\n+ */\n+\n+\"use strict\";\n+\n+var EventConstants = require('EventConstants');\n+var EventPropagators = require('EventPropagators');\n+var ExecutionEnvironment = require('ExecutionEnvironment');\n+var SyntheticInputEvent = require('SyntheticInputEvent');\n+\n+var keyOf = require('keyOf');\n+\n+var useBeforeInputEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'TextEvent' in window &&\n+  !('documentMode' in document)\n+);\n+\n+var topLevelTypes = EventConstants.topLevelTypes;\n+\n+// Events and their corresponding property names.\n+var eventTypes = {\n+  beforeInput: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onBeforeInput: null}),\n+      captured: keyOf({onBeforeInputCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topTextInput,\n+      topLevelTypes.topPaste\n+    ]\n+  }\n+};\n+\n+// Track characters inserted via keypress and composition events.\n+var fallbackChars = null;\n+\n+/**\n+ * Return whether a native keypress event is assumed to be a command.\n+ * This is required because Firefox fires `keypress` events for key commands\n+ * (cut, copy, select-all, etc.) even though no character is inserted.\n+ */\n+function isKeypressCommand(nativeEvent) {\n+  return (\n+    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n+    // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n+    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n+  );\n+}\n+\n+/**\n+ * Create an `onBeforeInput` event to match\n+ * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n+ *\n+ * This event plugin is based on the native `textInput` event\n+ * available in Chrome, Safari, Opera, and IE. This event fires after\n+ * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n+ *\n+ * `beforeInput` is spec'd but not implemented in any browsers, and\n+ * the `input` event does not provide any useful information about what has\n+ * actually been added, contrary to the spec. Thus, `textInput` is the best\n+ * available event to identify the characters that have actually been inserted\n+ * into the target node.\n+ */\n+var BeforeInputEventPlugin = {\n+\n+  eventTypes: eventTypes,\n+\n+  /**\n+   * @param {string} topLevelType Record from `EventConstants`.\n+   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+   * @param {object} nativeEvent Native browser event.\n+   * @return {*} An accumulation of synthetic events.\n+   * @see {EventPluginHub.extractEvents}\n+   */\n+  extractEvents: function(\n+      topLevelType,\n+      topLevelTarget,\n+      topLevelTargetID,\n+      nativeEvent) {\n+\n+    var chars;\n+\n+    if (useBeforeInputEvent) {\n+      // For browsers that support `textInput` events natively, don't do\n+      // anything with keypress, composition, etc.\n+      if (topLevelType !== topLevelTypes.topTextInput) {\n+        return;\n+      }\n+      chars = nativeEvent.data;\n+    } else {\n+      switch (topLevelType) {\n+        case topLevelTypes.topPaste:\n+          // If a paste event occurs after a keypress, throw out the input\n+          // chars. Paste events should not lead to BeforeInput events.\n+          fallbackChars = null;\n+          break;\n+        case topLevelTypes.topKeyPress:\n+          /**\n+           * As of v27, Firefox may fire keypress events even when no character\n+           * will be inserted. A few possibilities:\n+           *\n+           * - `which` is `0`. Arrow keys, Esc key, etc.\n+           *\n+           * - `which` is the pressed key code, but no char is available.\n+           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+           *   this key combination and no character is inserted into the\n+           *   document, but FF fires the keypress for char code `100` anyway.\n+           *   No `input` event will occur.\n+           *\n+           * - `which` is the pressed key code, but a command combination is\n+           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+           *   `input` event will occur.\n+           */\n+          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+            fallbackChars = String.fromCharCode(nativeEvent.which);\n+          }\n+          break;\n+        case topLevelTypes.topCompositionEnd:\n+          fallbackChars = nativeEvent.data;\n+          break;\n+      }\n+\n+      // If no changes have occurred to the fallback string, no relevant\n+      // event has fired and we're done.\n+      if (fallbackChars === null) {\n+        return;\n+      }\n+\n+      chars = fallbackChars;\n+    }\n+\n+    // If no characters are being inserted, no BeforeInput event should\n+    // be fired.\n+    if (!chars) {\n+      return;\n+    }\n+\n+    var event = SyntheticInputEvent.getPooled(\n+      eventTypes.beforeInput,\n+      topLevelTargetID,\n+      nativeEvent\n+    );\n+\n+    event.data = chars;\n+    fallbackChars = null;\n+    EventPropagators.accumulateTwoPhaseDispatches(event);\n+    return event;\n+  }\n+};\n+\n+module.exports = BeforeInputEventPlugin;",
                "totalChanges": 171
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "give me all the commits for React.js file?",
        "number": 6,
        "category": 2,
        "response": "Here are all the commits for the React.js file:\n\n1. Commit ID: ce2bc58a9f6f3b0bfc8c738a0d8e2a5f3a332ff5\n   - Message: \"[activity] rename unstable_Offscreen to unstable_Activity (#27640)\n     `Activity` is the current candidate name. This PR starts the rename work by renaming the exported unstable component name.\n     NOTE: downstream consumers need to rename the import when updating to this commit.\"\n   - Date: 2023-11-02T20:13:21Z\n\n2. Commit ID: bfefb228422f7264a29b3a6b98ec95e05925e80e\n   - Message: \"Upgrade Server Actions to canary (#27459)\n     Upgrades the stability of Server Actions from experimental to canary.\n     - Turns on enableAsyncActions and enableFormActions\n     - Removes 'experimental_' prefix from useOptimistic, useFormStatus, and useFormState\"\n   - Date: 2023-10-04T18:51:36Z\n\n3. Commit ID: c7ba8c098889b6dc47fa9c807bbba3975a658584\n   - Message: \"Enforce that the 'react-server' build of 'react' is used (#27436)\n     I do this by simply renaming the secret export name in the 'subset' bundle and this renamed version is what the FlightServer uses.\n     This requires us to be more diligent about always using the correct instance of 'react' in our tests so theres a bunch of clean up for that.\"\n   - Date: 2023-09-29T22:24:05Z\n\n4. Commit ID: ac1a16c67e268fcb2c52e91717cbc918c7c24446\n   - Message: \"Add Postpone API (#27238)\n     This adds an experimental `unstable_postpone(reason)` API.\n     Currently we dont have a way to model effectively an Infinite Promise. I.e. something that suspends but never resolves...\"\n   - Date: 2023-08-17T17:26:14Z\n\n5. Commit ID: eb2c2f7c2cf2652a168c2b433d2989131c69754b\n   - Message: \"rename SuspenseList export to unstable_SuspenseList (#27061)\n     ## Summary\n     as we began [discussing yesterday](https://github.com/facebook/react/pull/27056#discussion_r1253282784), `SuspenseList` is not actually stable yet, and should likely be exported with the `unstable_` prefix...\"\n   - Date: 2023-07-06T18:09:53Z\n\n6. Commit ID: 80d9a40114bb43c07d021e8254790852f450bd2b\n   - Message: \"Remove useMutableSource (#27011)\n     ## Summary\n     This PR cleans up `useMutableSource`. This has been blocked by a remaining dependency internally at Meta, but that has now been deleted...\"\n   - Date: 2023-06-27T16:45:46Z\n\n7. Commit ID: b7972822b5887d05ae772ef757a453265b4b7aec\n   - Message: \"useOptimisticState -> useOptimistic (#26772)\n     Drop the 'state'. Just 'useOptimistic'. Its cleaner.\n     This is still an experimental API. May not be the final name.\"\n   - Date: 2023-05-03T18:26:00Z\n\n8. Commit ID: 491aec5d6113ce5bae7c10966bc38a4a8fc091a8\n   - Message: \"Implement experimental_useOptimisticState (#26740)\n     This adds an experimental hook tentatively called useOptimisticState. (The actual name needs some bikeshedding.)...\"\n   - Date: 2023-05-01T17:19:20Z\n\n9. Commit ID: 84a0a171ea0ecd25e287bd3d3dd30e932beb4677\n   - Message: \"Rename experimental useEvent to useEffectEvent (#25881)\n     We originally had grand plans for using this Event concept for more but now its only meant to be used in combination with effects...\"\n   - Date: 2022-12-14T20:08:29Z\n\n10. Commit ID: e7c5af45ceb8fa2b64d39ec68345254ce9abd65e\n    - Message: \"Update cache() and use() to the canary aka next channel (#25502)\n      Testing what it would look like to move this to the `next` channel.\"\n    - Date: 2022-10-24T03:20:52Z",
        "chain_of_thought": "To address the question, \"give me all the commits for React.js file,\" we need to identify the relevant nodes and relationships in the schema. The file in question is \"React.js,\" which corresponds to the File node. We are interested in finding all the commits associated with this file, which involves the Commit node. The relationship between Commit and File is the changed relationship, which indicates that a commit has modified a file.\n\nHere's how we can construct the query:\n\n1. Identify the File node with the name \"React.js.\"\n2. Find all Commit nodes that have a changed relationship with this File node.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'React.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\n```\n\nThis query will return all commits that have modified the \"React.js\" file, along with their IDs, messages, and committed dates, sorted by the commit date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'React.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\n",
        "result": [
            {
                "commitId": "ce2bc58a9f6f3b0bfc8c738a0d8e2a5f3a332ff5",
                "commitMessage": "\"[activity] rename unstable_Offscreen to unstable_Activity (#27640)\n\n`Activity` is the current candidate name. This PR starts the rename work\r\nby renaming the exported unstable component name.\r\n\r\nNOTE: downstream consumers need to rename the import when updating to\r\nthis commit.\"",
                "commitDate": "2023-11-02T20:13:21Z"
            },
            {
                "commitId": "bfefb228422f7264a29b3a6b98ec95e05925e80e",
                "commitMessage": "\"Upgrade Server Actions to canary (#27459)\n\nUpgrades the stability of Server Actions from experimental to canary.\r\n\r\n- Turns on enableAsyncActions and enableFormActions\r\n- Removes \"experimental_\" prefix from useOptimistic, useFormStatus, and\r\nuseFormState\"",
                "commitDate": "2023-10-04T18:51:36Z"
            },
            {
                "commitId": "c7ba8c098889b6dc47fa9c807bbba3975a658584",
                "commitMessage": "\"Enforce that the \"react-server\" build of \"react\" is used (#27436)\n\nI do this by simply renaming the secret export name in the \"subset\"\r\nbundle and this renamed version is what the FlightServer uses.\r\n\r\nThis requires us to be more diligent about always using the correct\r\ninstance of \"react\" in our tests so theres a bunch of clean up for\r\nthat.\"",
                "commitDate": "2023-09-29T22:24:05Z"
            },
            {
                "commitId": "ac1a16c67e268fcb2c52e91717cbc918c7c24446",
                "commitMessage": "\"Add Postpone API (#27238)\n\nThis adds an experimental `unstable_postpone(reason)` API.\r\n\r\nCurrently we dont have a way to model effectively an Infinite Promise.\r\nI.e. something that suspends but never resolves. The reason this is\r\nuseful is because you might have something else that unblocks it later.\r\nE.g. by updating in place later, or by client rendering.\r\n\r\nOn the client this works to model as an Infinite Promise (in fact,\r\nthats what this implementation does). However, in Fizz and Flight that\r\ndoesnt work because the stream needs to end at some point. We dont\r\nhave any way of knowing that were suspended on infinite promises. Its\r\nnot enough to tag the promises because you could await those and thus\r\ncreating new promises. The only way we really have to signal this\r\nthrough a series of indirections like async functions, is by throwing.\r\nIts not 100% safe because these values can be caught but its the best\r\nwe can do.\r\n\r\nEffectively `postpone(reason)` behaves like a built-in [Catch\r\nBoundary](https://github.com/facebook/react/pull/26854). Its like\r\n`raise(Postpone, reason)` except its built-in so it needs to be able to\r\nbe encoded and caught by Suspense boundaries.\r\n\r\nIn Flight and Fizz these behave pretty much the same as errors. Flight\r\njust forwards it to retrigger on the client. In Fizz they just trigger\r\nclient rendering which itself might just postpone again or fill in the\r\nvalue. The difference is how they get logged.\r\n\r\nIn Flight and Fizz they log to `onPostpone(reason)` instead of\r\n`onError(error)`. This log is meant to help find deopts on the server\r\nlike finding places where you fall back to client rendering. The reason\r\nthat you pass in is for that purpose to help the reason for any deopts.\r\n\r\nI do track the stack trace in DEV but I dont currently expose it to\r\n`onPostpone`. This seems like a limitation. It might be better to expose\r\nthe Postpone object which is an Error object but thats more of an\r\nimplementation detail. I could also pass it as a second argument.\r\n\r\nOn the client after hydration they dont get passed to\r\n`onRecoverableError`. Theres no global `onPostpone` API to capture\r\npostponed things on the client just like theres no `onError`. At that\r\npoint its just assumed to be intentional. It doesnt have any `digest`\r\nor reason passed to the client since its not logged.\r\n\r\nThere are some hacky solutions that currently just tries to reuse as\r\nmuch of the existing code as possible but should be more properly\r\nimplemented.\r\n- Fiber is currently just converting it to a fake Promise object so that\r\nit behaves like an infinite Promise.\r\n- Fizz is encoding the magic digest string `\"POSTPONE\"` in the HTML so\r\nwe know to ignore it but it should probably just be something neater\r\nthat doesnt share namespace with digests.\r\n\r\nNext I plan on using this in the `/static` entry points for additional\r\nfeatures.\r\n\r\nWhy \"postpone\"? Its basically a synonym to \"defer\" but we plan on using\r\n\"defer\" for other purposes and its overloaded anyway.\"",
                "commitDate": "2023-08-17T17:26:14Z"
            },
            {
                "commitId": "eb2c2f7c2cf2652a168c2b433d2989131c69754b",
                "commitMessage": "\"rename SuspenseList export to unstable_SuspenseList (#27061)\n\n## Summary\r\n\r\nas we began [discussing\r\nyesterday](https://github.com/facebook/react/pull/27056#discussion_r1253282784),\r\n`SuspenseList` is not actually stable yet, and should likely be exported\r\nwith the `unstable_` prefix.\r\n\r\nthe conversation yesterday began discussing this in the context of the\r\nfb-specific packages, but changing it there without updating everywhere\r\nelse leads to test failures, so here the change is made across packages.\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn flow dom-browser\r\nyarn test\r\n```\"",
                "commitDate": "2023-07-06T18:09:53Z"
            },
            {
                "commitId": "80d9a40114bb43c07d021e8254790852f450bd2b",
                "commitMessage": "\"Remove useMutableSource (#27011)\n\n## Summary\r\n\r\nThis PR cleans up `useMutableSource`. This has been blocked by a\r\nremaining dependency internally at Meta, but that has now been deleted.\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn flow\r\nyarn lint\r\nyarn test --prod\r\n```\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\"",
                "commitDate": "2023-06-27T16:45:46Z"
            },
            {
                "commitId": "b7972822b5887d05ae772ef757a453265b4b7aec",
                "commitMessage": "\"useOptimisticState -> useOptimistic (#26772)\n\nDrop the \"state\". Just \"useOptimistic\". Its cleaner.\r\n\r\nThis is still an experimental API. May not be the final name.\"",
                "commitDate": "2023-05-03T18:26:00Z"
            },
            {
                "commitId": "491aec5d6113ce5bae7c10966bc38a4a8fc091a8",
                "commitMessage": "\"Implement experimental_useOptimisticState (#26740)\n\nThis adds an experimental hook tentatively called useOptimisticState.\r\n(The actual name needs some bikeshedding.)\r\n\r\nThe headline feature is that you can use it to implement optimistic\r\nupdates. If you set some optimistic state during a transition/action,\r\nthe state will be automatically reverted once the transition completes.\r\n\r\nAnother feature is that the optimistic updates will be continually\r\nrebased on top of the latest state.\r\n\r\nIts easiest to explain with examples; well publish documentation as\r\nthe API gets closer to stabilizing. See tests for now.\r\n\r\nTechnically the use cases for this hook are broader than just optimistic\r\nupdates; you could use it implement any sort of \"pending\" state, such as\r\nthe ones exposed by useTransition and useFormStatus. But we expect\r\npeople will most often reach for this hook to implement the optimistic\r\nupdate pattern; simpler cases are covered by those other hooks.\"",
                "commitDate": "2023-05-01T17:19:20Z"
            },
            {
                "commitId": "84a0a171ea0ecd25e287bd3d3dd30e932beb4677",
                "commitMessage": "\"Rename experimental useEvent to useEffectEvent (#25881)\n\nWe originally had grand plans for using this Event concept for more but\r\nnow its only meant to be used in combination with effects.\r\n\r\nIts an Event in the FRP terms, that is triggered from an Effect.\r\nTechnically it can also be from another function that itself is\r\ntriggered from an existing side-effect but thats kind of an advanced\r\ncase.\r\n\r\nThe canonical case is an effect that triggers an event:\r\n\r\n```js\r\nconst onHappened = useEffectEvent(() => ...);\r\nuseEffect(() => {\r\n  onHappened();\r\n}, []);\r\n```\"",
                "commitDate": "2022-12-14T20:08:29Z"
            },
            {
                "commitId": "e7c5af45ceb8fa2b64d39ec68345254ce9abd65e",
                "commitMessage": "\"Update cache() and use() to the canary aka next channel (#25502)\n\nTesting what it would look like to move this to the `next` channel.\"",
                "commitDate": "2022-10-24T03:20:52Z"
            },
            {
                "commitId": "caa84c8da0aed390ec25783e577d91711dfd6bcc",
                "commitMessage": "\"Revert fetch instrumentation to only RSC (#25540)\n\nRevert fetch instrumentation so that it only affects RSC by applying it\r\nonly in the react-server condition of \"react\".\r\n\r\nThis helps make the rollout a little smoother because these affects\r\nexisting libraries that fetch during client components, and then gets\r\nforever cached. We need to implement the GC first.\r\n\r\nI havent fully implemented the SSR part anyway.\r\n\r\nThe main problem that we discovered is that `\"react\"` and\r\n`\"react/react.shared-subset\"` have separate dispatchers in an\r\nenvironment that runs both Fizz and Flight. Thats intentional and\r\nsometimes a feature. However, in this case it means that we instrument\r\nfetch twice and when you run Flight inside Fizz, that fetch goes into\r\nboth caches when its supposed to only see the inner one. Im not sure\r\nhow to solve that atm.\"",
                "commitDate": "2022-10-23T02:58:30Z"
            },
            {
                "commitId": "65e32e58b6057db1fdfed95a942fad4fc96da191",
                "commitMessage": "\"Add fetch Instrumentation to Dedupe Fetches (#25516)\n\n* Add fetch instrumentation in cached contexts\r\n\r\n* Avoid unhandled rejection errors for Promises that we intentionally ignore\r\n\r\nIn the final passes, we ignore the newly generated Promises and use\r\nthe previous ones. This ensures that if those generate errors, that we\r\nintentionally ignore those.\r\n\r\n* Add extra fetch properties if there were any\"",
                "commitDate": "2022-10-19T22:37:00Z"
            },
            {
                "commitId": "8e2bde6f2751aa6335f3cef488c05c3ea08e074a",
                "commitMessage": "\"Add cache() API (#25506)\n\nLike memo() but longer lived.\"",
                "commitDate": "2022-10-18T20:55:06Z"
            },
            {
                "commitId": "0a3072278ee5fb46ddb58e6f5ba9e2b78f6f715a",
                "commitMessage": "\"Flow: complete types first migration (#25389)\n\nThis complete the \"types first\" migration and enables the config everywhere.\"",
                "commitDate": "2022-10-04T01:59:33Z"
            },
            {
                "commitId": "c91a1e03be54733a7dbfcb5663d7a9e8606ab1c1",
                "commitMessage": "\"experimental_useEvent (#25229)\n\nThis commit adds a new hook `useEvent` per the RFC [here](https://github.com/reactjs/rfcs/pull/220), gated as experimental. \r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>\r\nCo-authored-by: Lauren Tan <poteto@users.noreply.github.com>\"",
                "commitDate": "2022-09-14T18:39:06Z"
            },
            {
                "commitId": "b6978bc38f6788c7e73982b9fd2771aabdf36f15",
                "commitMessage": "\"experimental_use(promise) (#25084)\n\n* Internal `act`: Unwrapping resolved promises\r\n\r\nThis update our internal implementation of `act` to support Reacts new\r\nbehavior for unwrapping promises. Like we did with Scheduler, when \r\nsomething suspends, it will yield to the main thread so the microtasks\r\ncan run, then continue in a new task.\r\n\r\nI need to implement the same behavior in the public version of `act`,\r\nbut there are some additional considerations so Ill do that in a\r\nseparate commit.\r\n\r\n* Move throwException to after work loop resumes\r\n\r\nthrowException is the function that finds the nearest boundary and\r\nschedules it for a second render pass. We should only call it right \r\nbefore we unwind the stack \u2014 not if we receive an immediate ping and\r\nrender the fiber again.\r\n\r\nThis was an oversight in 8ef3a7c that I didnt notice because it happens\r\nto mostly work, anyway. What made me notice the mistake is that\r\nthrowException also marks the entire render phase as suspended\r\n(RootDidSuspend or RootDidSuspendWithDelay), which is only supposed to\r\nbe happen if we show a fallback. One consequence was that, in the \r\nRootDidSuspendWithDelay case, the entire commit phase was blocked,\r\nbecause thats the exit status we use to block a bad fallback\r\nfrom appearing.\r\n\r\n* Use expando to check whether promise has resolved\r\n\r\nAdd a `status` expando to a thrown thenable to track when its value has\r\nresolved.\r\n\r\nIn a later step, well also use `value` and `reason` expandos to track\r\nthe resolved value.\r\n\r\nThis is not part of the official JavaScript spec \u2014 think of\r\nit as an extension of the Promise API, or a custom interface that is a\r\nsuperset of Thenable. However, its inspired by the terminology used\r\nby `Promise.allSettled`.\r\n\r\nThe intent is that this will be a public API \u2014 Suspense implementations\r\ncan set these expandos to allow React to unwrap the value synchronously\r\nwithout waiting a microtask.\r\n\r\n* Scaffolding for `experimental_use` hook\r\n\r\nSets up a new experimental hook behind a feature flag, but does not\r\nimplement it yet.\r\n\r\n* use(promise)\r\n\r\nAdds experimental support to Fiber for unwrapping the value of a promise\r\ninside a component. It is not yet implemented for Server Components, \r\nbut that is planned.\r\n\r\nIf promise has already resolved, the value can be unwrapped\r\n\"immediately\" without showing a fallback. The trick we use to implement\r\nthis is to yield to the main thread (literally suspending the work\r\nloop), wait for the microtask queue to drain, then check if the promise\r\nresolved in the meantime. If so, we can resume the last attempted fiber\r\nwithout unwinding the stack. This functionality was implemented in \r\nprevious commits.\r\n\r\nAnother feature is that the promises do not need to be cached between\r\nattempts. Because we assume idempotent execution of components, React\r\nwill track the promises that were used during the previous attempt and\r\nreuse the result. You shouldnt rely on this property, but during\r\ninitial render it mostly just works. Updates are trickier, though,\r\nbecause if you used an uncached promise, we have no way of knowing \r\nwhether the underlying data has changed, so we have to unwrap the\r\npromise every time. It will still work, but its inefficient and can\r\nlead to unnecessary fallbacks if it happens during a discrete update.\r\n\r\nWhen we implement this for Server Components, this will be less of an\r\nissue because there are no updates in that environment. However, its\r\nstill better for performance to cache data requests, so the same\r\nprinciples largely apply.\r\n\r\nThe intention is that this will eventually be the only supported way to\r\nsuspend on arbitrary promises. Throwing a promise directly will\r\nbe deprecated.\"",
                "commitDate": "2022-08-25T18:12:07Z"
            },
            {
                "commitId": "9e67e7a31582079263665fac0391220b99d8bb86",
                "commitMessage": "\"Scaffolding for useMemoCache hook (#25123)\n\n* Scaffolding for useMemoCache hook\r\n* cleanup leftovers from copy/paste of use() diff\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "commitDate": "2022-08-23T08:36:02Z"
            },
            {
                "commitId": "d5f1b067c8bbb826b823d0354a28ba31078b70c0",
                "commitMessage": "\"[ServerContext] Flight support for ServerContext (#23244)\n\n* Flight side of server context\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* reinline\r\n\r\n* rebase\r\n\r\n* add back changes lost due to rebase being hard\r\n\r\n* emit chunk for provider\r\n\r\n* remove case for React provider type\r\n\r\n* update type for SomeChunk\r\n\r\n* enable flag with experimental\r\n\r\n* add missing types\r\n\r\n* fix flow type\r\n\r\n* missing type\r\n\r\n* t: any\r\n\r\n* revert extraneous type change\r\n\r\n* better type\r\n\r\n* better type\r\n\r\n* feedback\r\n\r\n* change import to type import\r\n\r\n* test?\r\n\r\n* test?\r\n\r\n* remove react-dom\r\n\r\n* remove react-native-renderer from react-server-native-relay/package.json\r\n\r\n* gate change in FiberNewContext, getComponentNameFromType, use switch statement in FlightServer\r\n\r\n* getComponentNameFromTpe: server context type gated and use displayName if available\r\n\r\n* fallthrough\r\n\r\n* lint....\r\n\r\n* POP\r\n\r\n* lint\"",
                "commitDate": "2022-03-08T12:55:32Z"
            },
            {
                "commitId": "a6987bee730052dccdddd4645e15b1ce458fd9a6",
                "commitMessage": "\"add <TracingMarker> component boilerplate (#23275)\n\n- Add Tracing Marker component type to React exports\r\n- Add reconciler work tag\r\n- Add devtools work tag\r\n- Add boilerplate for the cache to render children\r\n\r\nNo functionality yet\"",
                "commitDate": "2022-02-11T16:42:55Z"
            },
            {
                "commitId": "5cccacd131242bdea2c2fe4b33fac50d2e3132b4",
                "commitMessage": "\"Upgrade useId to alpha channel (#22674)\"",
                "commitDate": "2021-11-01T22:26:42Z"
            },
            {
                "commitId": "75f3ddebfa0d9885ce8df42571cf0c09ad6c0a3b",
                "commitMessage": "\"Remove experimental useOpaqueIdentifier API (#22672)\n\nuseId is the updated version of this API.\"",
                "commitDate": "2021-11-01T22:02:39Z"
            },
            {
                "commitId": "ebf9ae8579230e7b1ed0b1d243e1cf802f56938b",
                "commitMessage": "\"useId (#22644)\n\n* Add useId to dispatcher\r\n\r\n* Initial useId implementation\r\n\r\nIds are base 32 strings whose binary representation corresponds to the\r\nposition of a node in a tree.\r\n\r\nEvery time the tree forks into multiple children, we add additional bits\r\nto the left of the sequence that represent the position of the child\r\nwithin the current level of children.\r\n\r\n    00101       00010001011010101\r\n    \u2570\u2500\u252c\u2500\u256f       \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\r\n  Fork 5 of 20       Parent id\r\n\r\nThe leading 0s are important. In the above example, you only need 3 bits\r\nto represent slot 5. However, you need 5 bits to represent all the forks\r\nat the current level, so we must account for the empty bits at the end.\r\n\r\nFor this same reason, slots are 1-indexed instead of 0-indexed.\r\nOtherwise, the zeroth id at a level would be indistinguishable from\r\nits parent.\r\n\r\nIf a node has only one child, and does not materialize an id (i.e. does\r\nnot contain a useId hook), then we dont need to allocate any space in\r\nthe sequence. Its treated as a transparent indirection. For example,\r\nthese two trees produce the same ids:\r\n\r\n<>                          <>\r\n  <Indirection>               <A />\r\n    <A />                     <B />\r\n  </Indirection>            </>\r\n  <B />\r\n</>\r\n\r\nHowever, we cannot skip any materializes an id. Otherwise, a parent id\r\nthat does not fork would be indistinguishable from its child id. For\r\nexample, this tree does not fork, but the parent and child must have\r\ndifferent ids.\r\n\r\n<Parent>\r\n  <Child />\r\n</Parent>\r\n\r\nTo handle this scenario, every time we materialize an id, we allocate a\r\nnew level with a single slot. You can think of this as a fork with only\r\none prong, or an array of children with length 1.\r\n\r\nIts possible for the the size of the sequence to exceed 32 bits, the\r\nmax size for bitwise operations. When this happens, we make more room by\r\nconverting the right part of the id to a string and storing it in an\r\noverflow variable. We use a base 32 string representation, because 32 is\r\nthe largest power of 2 that is supported by toString(). We want the base\r\nto be large so that the resulting ids are compact, and we want the base\r\nto be a power of 2 because every log2(base) bits corresponds to a single\r\ncharacter, i.e. every log2(32) = 5 bits. That means we can lop bits off\r\nthe end 5 at a time without affecting the final result.\r\n\r\n* Incremental hydration\r\n\r\nStores the tree context on the dehydrated Suspense boundarys state\r\nobject so it resume where it left off.\r\n\r\n* Add useId to react-debug-tools\r\n\r\n* Add selective hydration test\r\n\r\nDemonstrates that selective hydration works and ids are preserved even\r\nafter subsequent client updates.\"",
                "commitDate": "2021-11-01T20:30:44Z"
            },
            {
                "commitId": "fa9bea0c41ccfef5b528ef9b5517607f9f94c52a",
                "commitMessage": "\"Initial implementation of cache cleanup (#22510)\n\nThis is an initial, partial implementation of a cleanup mechanism for the experimental Cache API. The idea is that consumers of the Cache API can register to be informed when a given Cache instance is no longer needed so that they can perform associated cleanup tasks to free resources stored in the cache. A canonical example would be cancelling pending network requests.\r\n\r\nAn overview of the high-level changes:\r\n\r\n* Changes the `Cache` type from a Map of cache instances to be an object with the original Map of instances, a reference count (to count roughly \"active references\" to the cache instances - more below), and an AbortController.\r\n* Adds a new public API, `unstable_getCacheSignal(): AbortSignal`, which is callable during render. It returns an AbortSignal tied to the lifetime of the cache - developers can listen for the abort event on the signal, which React now triggers when a given cache instance is no longer referenced. \r\n  * Note that `AbortSignal` is a web standard that is supported by other platform APIs; for example a signal can be passed to `fetch()` to trigger cancellation of an HTTP request.\r\n* Implements the above - triggering the abort event - by handling passive mount/unmount for HostRoot and CacheComponent fiber nodes.\r\n\r\nCases handled:\r\n* Aborted transitions: we clean up a new cache created for an aborted transition\r\n* Suspense: we retain a fresh cache instance until a suspended tree resolves\r\n\r\nFor follow-ups:\r\n* When a subsequent cache refresh is issued before a previous refresh completes, the refreshes are queued. Fresh cache instances for previous refreshes in the queue should be cleared, retaining only the most recent cache. I plan to address this in a follow-up PR.\r\n* If a refresh is cancelled, the fresh cache should be cleaned up.\"",
                "commitDate": "2021-10-21T21:11:42Z"
            },
            {
                "commitId": "02f411578a8e58af8ec28e385f6b0dcb768cdc41",
                "commitMessage": "\"Upgrade useInsertionEffect to stable (#22589)\n\n@huozhi tried this out and says its working as expected. I think we\r\ncan go ahead and move this into the stable channel, so that it is\r\navailable in the React 18 alpha releases.\"",
                "commitDate": "2021-10-19T21:32:54Z"
            },
            {
                "commitId": "82c8fa90be86fc0afcbff2dc39486579cff1ac9a",
                "commitMessage": "\"Add back useMutableSource temporarily (#22396)\n\nRecoil uses useMutableSource behind a flag. I thought this was fine\r\nbecause Recoil isnt used in any concurrent roots, so the behavior\r\nwould be the same, but it turns out that it is used by concurrent\r\nroots in a few places.\r\n\r\nIm not expecting it to be hard to migrate to useSyncExternalStore, but\r\nto de-risk the change Im going to roll it out gradually with a flag. In\r\nthe meantime, Ive added back the useMutableSource API.\"",
                "commitDate": "2021-09-22T03:38:24Z"
            },
            {
                "commitId": "8209de269531767b33d8db26eda41db38bfb6a27",
                "commitMessage": "\"Delete useMutableSource implementation (#22292)\n\nThis API was replaced by useSyncExternalStore\"",
                "commitDate": "2021-09-20T04:11:50Z"
            },
            {
                "commitId": "263cfa6ecb9879ecb629d4e04a8c26422b4c4ff9",
                "commitMessage": "\"[Experimental] Add useInsertionEffect (#21913)\"",
                "commitDate": "2021-09-14T14:27:09Z"
            },
            {
                "commitId": "77912d9a05d7a90287fabdec76486f25869b2981",
                "commitMessage": "\"Wire up the native API for useSyncExternalStore (#22237)\n\nAdds useSyncExternalStore to the internal dispatcher, and exports\r\nthe native API from the React package without yet implementing it.\"",
                "commitDate": "2021-09-07T17:20:24Z"
            },
            {
                "commitId": "06f7b4f43a93eae9111cfbd972ab1ae1148f6afb",
                "commitMessage": "\"`act` should work without mock Scheduler (#21714)\n\nCurrently, in a React 18 root, `act` only works if you mock the\r\nScheduler package. This was because we didnt want to add additional\r\nchecks at runtime.\r\n\r\nBut now that the `act` testing API is dev-only, we can simplify its\r\nimplementation.\r\n\r\nNow when an update is wrapped with `act`, React will bypass Scheduler\r\nentirely and push its tasks onto a special internal queue. Then, when\r\nthe outermost `act` scope exists, well flush that queue.\r\n\r\nI also removed the \"wrong act\" warning, because the plan is to move\r\n`act` to an isomorphic entry point, simlar to `startTransition`. Thats\r\nnot directly related to this PR, but I didnt want to bother\r\nre-implementing that warning only to immediately remove it.\r\n\r\nIll add the isomorphic API in a follow up.\r\n\r\nNote that the internal version of `act` that we use in our own tests\r\nstill depends on mocking the Scheduler package, because it needs to work\r\nin production. Im planning to move that implementation to a shared\r\n(internal) module, too.\"",
                "commitDate": "2021-06-22T21:25:07Z"
            },
            {
                "commitId": "e16d61c3000e2de6217d06b9afad162e883f73c4",
                "commitMessage": "\"[Offscreen] Mount/unmount layout effects (#21386)\n\n* [Offscreen] Mount/unmount layout effects\r\n\r\nExposes the Offscreen component type and implements basic support for\r\nmount/unmounting layout effects when the visibility is toggled.\r\n\r\nMostly it works the same way as hidden Suspense trees, which use the\r\nsame internal fiber type. I had to add an extra bailout, though, that\r\ndoesnt apply to the Suspense case but does apply to Offscreen\r\ncomponents: a hidden Offscreen tree will eventually render at low\r\npriority, and when we it does, its `subtreeTag` will have effects\r\nscheduled on it. So I added a check to the layout phase where, if the\r\nsubtree is hidden, we skip over the subtree entirely. An alternate\r\ndesign would be to clear the subtree flags in the render phase, but I\r\nprefer doing it this way since its harder to mess up.\r\n\r\nWe also need an API to enable the same thing for passive effects. This\r\nis not yet implemented.\r\n\r\n* Add test starting from hidden\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>\"",
                "commitDate": "2021-06-01T19:46:08Z"
            },
            {
                "commitId": "4ecf11977c46966d3deedcdc71f1280a34607d1d",
                "commitMessage": "\"Remove the Fundamental internals (#20745)\"",
                "commitDate": "2021-02-05T20:36:55Z"
            },
            {
                "commitId": "efc57e5cbbd618f3c98d941c48eec859026c2dcb",
                "commitMessage": "\"Add built-in Suspense cache with support for invalidation (refreshing) (#20456)\"",
                "commitDate": "2020-12-18T18:57:24Z"
            },
            {
                "commitId": "e23673b511a2eab6ddcb848a4150105c954f289a",
                "commitMessage": "\"[Flight] Add getCacheForType() to the dispatcher (#20315)\n\n* Remove react/unstable_cache\r\n\r\nWere probably going to make it available via the dispatcher. Lets remove this for now.\r\n\r\n* Add readContext() to the dispatcher\r\n\r\nOn the server, it will be per-request.\r\n\r\nOn the client, there will be some way to shadow it.\r\n\r\nFor now, I provide it on the server, and throw on the client.\r\n\r\n* Use readContext() from react-fetch\r\n\r\nThis makes it work on the server (but not on the client until we implement it there.)\r\n\r\nUpdated the test to use Server Components. Now it passes.\r\n\r\n* Fixture: Add fetch from a Server Component\r\n\r\n* readCache -> getCacheForType<T>\r\n\r\n* Add React.unstable_getCacheForType\r\n\r\n* Add a feature flag\r\n\r\n* Fix Flow\r\n\r\n* Add react-suspense-test-utils and port tests\r\n\r\n* Remove extra Map lookup\r\n\r\n* Unroll async/await because build system\r\n\r\n* Add some error coverage and retry\r\n\r\n* Add unstable_getCacheForType to Flight entry\"",
                "commitDate": "2020-12-03T03:44:56Z"
            },
            {
                "commitId": "56e9feead0f91075ba0a4f725c9e4e343bca1c67",
                "commitMessage": "\"Remove Blocks (#20138)\n\n* Remove Blocks\r\n\r\n* Remove Flight Server Runtime\r\n\r\nTheres no need for this now that the JSResource is part of the bundler\r\nprotocol. Might need something for Webpack plugin specifically later.\r\n\r\n* Devtools\"",
                "commitDate": "2020-10-31T06:03:45Z"
            },
            {
                "commitId": "1f38dcff67d12828be771403e183652f5e93909a",
                "commitMessage": "\"Remove withSuspenseConfig (#19724)\n\nRemoves `withSuspenseConfig` and migrates relevant tests to\r\n`startTransition` instead.\r\n\r\nWe only had one caller in www, which Ive removed.\"",
                "commitDate": "2020-08-31T16:16:49Z"
            },
            {
                "commitId": "5564f2c95bb61b446f93dc5c519740bdb39e1989",
                "commitMessage": "\"Add React.startTransition (#19696)\n\n* Add React.startTransition\r\n\r\n* Export startTransition from index.js as well\"",
                "commitDate": "2020-08-26T15:34:17Z"
            },
            {
                "commitId": "b61174fb7b09580c1ec2a8f55e73204b706d2935",
                "commitMessage": "\"Remove the deprecated React Flare event system (#19520)\"",
                "commitDate": "2020-08-05T14:13:29Z"
            },
            {
                "commitId": "9102719baacb64738e9235bc80d3d7d9918cc74c",
                "commitMessage": "\"Tidy up React Scope API (#19352)\"",
                "commitDate": "2020-07-16T15:21:21Z"
            },
            {
                "commitId": "8b9c4d1688333865e702fcd65ad2ab7d83b3c33c",
                "commitMessage": "\"Expose LegacyHidden type and disable <div hidden /> API in new fork (#18891)\n\n* Expose LegacyHidden type\r\n\r\nI will use this internally at Facebook to migrate away from\r\n<div hidden />. The end goal is to migrate to the Offscreen type, but\r\nthat has different semantics. This is an incremental step.\r\n\r\n* Disable <div hidden /> API in new fork\r\n\r\nMigrates to the unstable_LegacyHidden type instead. The old fork does\r\nnot support the new component type, so I updated the tests to use an\r\nindirection that picks the correct API. I will remove this once the\r\nLegacyHidden (and/or Offscreen) type has landed in both implementations.\r\n\r\n* Add gated warning for `<div hidden />` API\r\n\r\nOnly exists so we can detect callers in www and migrate them to the new\r\nAPI. Should not visible to anyone outside React Core team.\"",
                "commitDate": "2020-05-12T03:02:08Z"
            },
            {
                "commitId": "22dc2e42bdc00d87fc19c5e75fc7c0b3fdcdc572",
                "commitMessage": "\"Add experimental DebugTracing logger for internal use (#18531)\"",
                "commitDate": "2020-04-16T02:10:15Z"
            },
            {
                "commitId": "3278d242184a13add3f25f683b77ef9a6a2305f3",
                "commitMessage": "\"Add useOpaqueIdentifier Hook (#17322)\n\n* Add useOpaqueIdentifier Hook\r\n\r\nWe currently use unique IDs in a lot of places. Examples are:\r\n  * `<label for=\"ID\">`\r\n  * `aria-labelledby`\r\n\r\nThis can cause some issues:\r\n  1. If we server side render and then hydrate, this could cause an\r\n     hydration ID mismatch\r\n  2. If we server side render one part of the page and client side\r\n     render another part of the page, the ID for one part could be\r\n     different than the ID for another part even though they are\r\n     supposed to be the same\r\n  3. If we conditionally render something with an ID ,  this might also\r\n     cause an ID mismatch because the ID will be different on other\r\n     parts of the page\r\n\r\nThis PR creates a new hook `useUniqueId` that generates a different\r\nunique ID based on whether the hook was called on the server or client.\r\nIf the hook is called during hydration, it generates an opaque object\r\nthat will rerender the hook so that the IDs match.\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "commitDate": "2020-04-07T00:17:27Z"
            },
            {
                "commitId": "c5d2fc7127654e43de59fff865b74765a103c4a5",
                "commitMessage": "\"Move some files out of /shared and rename to upper case (#18363)\n\n* Rename lower case isomorphic default exports modules to upper case named exports\r\n\r\nWere somewhat inconsistent here between e.g. ReactLazy and memo.\r\n\r\nLets pick one.\r\n\r\nThis also moves the responder, fundamental, scope creators from shared\r\nsince theyre isomorphic and same as the other creators.\r\n\r\n* Move some files that are specific to the react-reconciler from shared\r\n\r\nIndividual renderers are allowed to deep require into the reconciler.\r\n\r\n* Move files specific to react-dom from shared\r\n\r\nreact-interactions is right now dom specific (it wasnt before) so we can\r\ntype check it together with other dom stuff. Avoids the need for\r\na shared ReactDOMTypes to be checked by RN for example.\r\n\r\n* Move ReactWorkTags to the reconciler\r\n\r\n* Move createPortal to export from reconciler\r\n\r\nOtherwise Noop cant access it since its not allowed deep requires.\"",
                "commitDate": "2020-03-21T22:22:01Z"
            },
            {
                "commitId": "90f8fe6f5509cab7d6d280b4ed17181697f394e9",
                "commitMessage": "\"add jsx-runtime and jsx-dev-runtime (#18299)\n\nThis PR adds the jsx-runtime and jsx-dev-runtime modules for the JSX Babel Plugin. WWW still relies on jsx/jsxs/jsxDEV from the \"react\" module, so once we refactor the code to point to the runtime modules we will remove jsx/jsxs/jsxDEV from the \"react\" module.\"",
                "commitDate": "2020-03-17T20:22:19Z"
            },
            {
                "commitId": "322cdcd3abfaca985a001a12247f02c5d31d311e",
                "commitMessage": "\"useMutableSource hook (#18000)\n\nuseMutableSource hook\r\n\r\nuseMutableSource() enables React components to safely and efficiently read from a mutable external source in Concurrent Mode. The API will detect mutations that occur during a render to avoid tearing and it will automatically schedule updates when the source is mutated.\r\n\r\nRFC: reactjs/rfcs#147\"",
                "commitDate": "2020-03-11T19:34:39Z"
            },
            {
                "commitId": "d2158d6ccbcbd998d1cd1c06ac6c6682cbeafd04",
                "commitMessage": "\"Fix flow types (#18204)\n\n* Added missing @flow pragma to React.js\r\n\r\n* Fixed useContext() return type definition\r\n\r\n* Fixed previously masked Flow errors in DevTools and react-interactions packages\r\n\r\n* Added displayName to internal Context Flow type\r\n\r\n* Removed Flow generic annotations for createResponder\r\n\r\nThis seems to cause a parsing error. (Not sure why.) The API is deprecated anyway so Im being lazy for now and just adding a .\"",
                "commitDate": "2020-03-03T20:46:24Z"
            },
            {
                "commitId": "60016c448bb7d19fc989acd05dda5aca2e124381",
                "commitMessage": "\"Export React as Named Exports instead of CommonJS (#18106)\n\n* Add options for forked entry points\r\n\r\nWe currently fork .fb.js entry points. This adds a few more options.\r\n\r\n.modern.fb.js - experimental FB builds\r\n.classic.fb.js - stable FB builds\r\n.fb.js - if no other FB build, use this for FB builds\r\n.experimental.js - experimental builds\r\n.stable.js - stable builds\r\n.js - used if no other override exists\r\n\r\nThis will be used to have different ES exports for different builds.\r\n\r\n* Switch React to named exports\r\n\r\n* Export named exports from the export point itself\r\n\r\nWe need to re-export the Flow exported types so we can use them in our code.\r\n\r\nWe dont want to use the Flow types from upstream since it doesnt have the non-public APIs that we have.\r\n\r\nThis should be able to use export * but I dont know why it doesnt work.\r\n\r\nThis actually enables Flow typing of React which was just \"any\" before.\r\nThis exposed some Flow errors that needs fixing.\r\n\r\n* Create forks for the react entrypoint\r\n\r\nNone of our builds expose all exports and they all differ in at least one\r\nway, so we need four forks.\r\n\r\n* Set esModule flag to false\r\n\r\nWe dont want to emit the esModule compatibility flag on our CommonJS\r\noutput. For now we treat our named exports as if theyre CommonJS.\r\n\r\nThis is a potentially breaking change for scheduler (but all those apis\r\nare unstable), react-is and use-subscription. However, it seems unlikely\r\nthat anyone would rely on this since these only have named exports.\r\n\r\n* Remove unused Feature Flags\r\n\r\n* Let jest observe the stable fork for stable tests\r\n\r\nThis lets it do the negative test by ensuring that the right tests fail.\r\n\r\nHowever, this in turn will make other tests that are not behind\r\n__EXPERIMENTAL__ fail. So I need to do that next.\r\n\r\n* Put all tests that depend on exports behind __EXPERIMENTAL__\r\n\r\nSince theres no way to override the exports using feature flags\r\nin .intern.js anymore we cant use these APIs in stable.\r\n\r\nThe tradeoff here is that we can either enable the negative tests on\r\n\"stable\" that means experimental are expected to fail, or we can disable\r\ntests on stable. This is unfortunate since some of these APIs now run on\r\na \"stable\" config at FB instead of the experimental.\r\n\r\n* Switch ReactDOM to named exports\r\n\r\nSame strategy as React.\r\n\r\nI moved the ReactDOMFB runtime injection to classic.fb.js\r\n\r\nSince we only fork the entrypoint, the `/testing` entrypoint needs to\r\nbe forked too to re-export the same things plus `act`. This is a bit\r\nunfortunate. If it becomes a pattern we can consider forking in the\r\nmodule resolution deeply.\r\n\r\nfix flow\r\n\r\n* Fix ReactDOM Flow Types\r\n\r\nNow that ReactDOM is Flow type checked we need to fix up its types.\r\n\r\n* Configure jest to use stable entry for ReactDOM in non-experimental\r\n\r\n* Remove additional FeatureFlags that are no longer needed\r\n\r\nThese are only flagging the exports and no implementation details so we\r\ncan control them fully through the export overrides.\"",
                "commitDate": "2020-02-25T21:54:27Z"
            },
            {
                "commitId": "65bbda7f169394005252b46a5992ece5a2ffadad",
                "commitMessage": "\"Rename Chunks API to Blocks (#18086)\n\nSounds like this is the name were going with. This also helps us\r\ndistinguish it from other \"chunking\" implementation details.\"",
                "commitDate": "2020-02-21T07:56:40Z"
            },
            {
                "commitId": "a209a97ed742ced488d7edf4fc2dcbf316ba13cb",
                "commitMessage": "\"Add feature flag around React.createFactory (#17873)\"",
                "commitDate": "2020-01-20T15:00:18Z"
            },
            {
                "commitId": "7dc9745427046d462506e9788878ba389e176b8a",
                "commitMessage": "\"[Flight] Chunks API (#17398)\n\n* Add feature flags\r\n\r\n* Add Chunk type and constructor\r\n\r\n* Wire up Chunk support in the reconciler\r\n\r\n* Update reconciler to reconcile Chunks against the render method\r\n\r\nThis allows the query and args to be updated.\r\n\r\n* Drop the ref. Chunks cannot have refs anyway.\r\n\r\n* Add Chunk checks in more missing cases\r\n\r\n* Rename secondArg\r\n\r\n* Add test and fix lazy chunks\r\n\r\nNot really a supported use case but for consistency I guess.\r\n\r\n* Fix fragment test\"",
                "commitDate": "2019-12-18T18:25:43Z"
            },
            {
                "commitId": "9fe1031244903e442de179821f1d383a9f2a59f2",
                "commitMessage": "\"[react-interactions] Rename Flare APIs to deprecated and remove from RN (#17644)\"",
                "commitDate": "2019-12-18T10:24:46Z"
            },
            {
                "commitId": "c47f59331ee94b1d04f974f075373d368a8c8ab3",
                "commitMessage": "\"Move SuspenseList to experimental package (#17130)\n\nAlso moves `withSuspenseConfig`\"",
                "commitDate": "2019-10-18T21:24:13Z"
            },
            {
                "commitId": "685ed561f22ea062281a4c570c7067e6020457c4",
                "commitMessage": "\"Migrate useDeferredValue and useTransition (#17058)\n\nMigrated useDeferredValue and useTransition from Facebooks www repo into ReactFiberHooks.\"",
                "commitDate": "2019-10-18T19:48:43Z"
            },
            {
                "commitId": "bd79be9b687156067416ffe5219e49a11bd0f1e7",
                "commitMessage": "\"[react-core] Add experimental React Scope component API (#16587)\"",
                "commitDate": "2019-08-29T11:06:51Z"
            },
            {
                "commitId": "42794557ca44a8c05c71aab698d44d1294236538",
                "commitMessage": "\"[Flare] Tweaks to Flare system design and API (#16264)\"",
                "commitDate": "2019-08-01T18:08:54Z"
            },
            {
                "commitId": "509889119360ed83ca6ef3f83bcf01e5aa7dcd81",
                "commitMessage": "\"[Flare] Redesign core event system (#16163)\"",
                "commitDate": "2019-07-23T22:46:44Z"
            },
            {
                "commitId": "2c4d61e1022ae383dd11fe237f6df8451e6f0310",
                "commitMessage": "\"Adds experimental fundamental interface (#16049)\"",
                "commitDate": "2019-07-19T21:20:28Z"
            },
            {
                "commitId": "8d413bf2c3679befe8c6b56733b7c6f6e467ec07",
                "commitMessage": "\"Remove React.error and React.warn (#16126)\n\n* Remove React.error/React.warn with React.getComponentStack\"",
                "commitDate": "2019-07-12T22:41:47Z"
            },
            {
                "commitId": "9b0bd43550206e04bfe9ca695e5981eff0e2d03f",
                "commitMessage": "\"[Flare] Re-label Flare flag (#16014)\"",
                "commitDate": "2019-06-28T00:11:11Z"
            },
            {
                "commitId": "4f92fbce5cc409436ec7625ac08d3a709a4d8f31",
                "commitMessage": "\"[Flare] Move createEvent back to React object (#15943)\"",
                "commitDate": "2019-06-21T09:12:56Z"
            },
            {
                "commitId": "720db4cbe675e80820ec81abab499492309b9252",
                "commitMessage": "\"[Flare] Add useEvent hook implementation (#15927)\n\n* [Flare] Add useEvent hook implementation\r\n\r\nValidate hooks have decendent event components\r\n\r\nFew fixes and displayName changes\r\n\r\nFix more responder bugs\r\n\r\nUpdate error codes\r\n\r\n* Add another test\r\n\r\n* Address feedback\"",
                "commitDate": "2019-06-21T02:12:40Z"
            },
            {
                "commitId": "76864f7ff729f8293e8e772da7ad8416d7def6b3",
                "commitMessage": "\"Add SuspenseList Component (#15902)\n\n* Add SuspenseList component type\r\n\r\n* Push SuspenseContext for SuspenseList\r\n\r\n* Force Suspense boundaries into their fallback state\r\n\r\nIn the \"together\" mode, we do a second render pass that forces the\r\nfallbacks to stay in place, if not all can unsuspend at once.\r\n\r\n* Add test\r\n\r\n* Transfer thennables to the SuspenseList\r\n\r\nThis way, we end up retrying the SuspenseList in case the nested boundary\r\nthat just suspended doesnt actually get mounted with this set of\r\nthennables. This happens when the second pass renders the fallback\r\ndirectly without first attempting to render the content.\r\n\r\n* Add warning for unsupported displayOrder\r\n\r\n* Add tests for nested sibling boundaries and nested lists\r\n\r\n* Fix nested SuspenseList forwarding thennables\r\n\r\n* Rename displayOrder to revealOrder\r\n\r\nDisplay order has some \"display list\" connotations making it sound like\r\na z-index thing.\r\n\r\nReveal indicates that this isnt really about when something gets rendered\r\nor is ready to be rendered. Its about when content that is already there\r\ngets to be revealed.\r\n\r\n* Add test for avoided boundaries\r\n\r\n* Make SuspenseList a noop in legacy mode\r\n\r\n* Use an explicit suspense list state object\r\n\r\nThis will be used for more things in the directional case.\"",
                "commitDate": "2019-06-20T02:34:28Z"
            },
            {
                "commitId": "689beef6f5d0adab166f5eb0aac59eba6100677a",
                "commitMessage": "\"[Flare] Move unstable_createEventComponent to ReactDOM (#15890)\"",
                "commitDate": "2019-06-18T22:41:00Z"
            },
            {
                "commitId": "9c6de716d028f17736d0892d8a3d8f3ac2cb62bd",
                "commitMessage": "\"Add withSuspenseConfig API (#15593)\n\n* Add suspendIfNeeded API and a global scope to track it\r\n\r\nAdds a \"current\" suspense config that gets applied to all updates scheduled\r\nduring the current scope.\r\n\r\nI suspect we might want to add other types of configurations to the \"batch\"\r\nso I called it the \"batch config\".\r\n\r\nThis works across renderers/roots but they wont actually necessarily go\r\ninto the same batch.\r\n\r\n* Add the suspenseConfig to all updates created during this scope\r\n\r\n* Compute expiration time based on the timeout of the suspense config\r\n\r\n* Track if there was a processed suspenseConfig this render pass\r\n\r\nWell use this info to suspend a commit for longer when necessary.\r\n\r\n* Mark suspended states that should be avoided as a separate flag\r\n\r\nThis lets us track which renders we want to suspend for a short time vs\r\na longer time if possible.\r\n\r\n* Suspend until the full expiration time if something asked to suspend\r\n\r\n* Reenable an old test that we can now repro again\r\n\r\n* Suspend the commit even if it is complete if there is a minimum delay\r\n\r\nThis can be used to implement spinners that dont flicker if the data\r\nand rendering is really fast.\r\n\r\n* Default timeoutMs to low pri expiration if not provided\r\n\r\nThis is a required argument in the type signature but people may not\r\nsupply it and this is a user facing object.\r\n\r\n* Rename to withSuspenseConfig and drop the default config\r\n\r\nThis allow opting out of suspending in some nested scope.\r\n\r\nA lot of time when you use this function youll use it with high level\r\nhelpers. Those helpers often want to accept some additional configuration\r\nfor suspense and if it should suspend at all. The easiest way is to just\r\nhave the api accept null or a suspense config and pass it through. However,\r\nthen you have to remember that calling suspendIfNeeded has a default.\r\n\r\nIt gets simpler by just saying tat you can pass the config. You can have\r\nyour own default in user space.\r\n\r\n* Track the largest suspense config expiration separately\r\n\r\nThis ensures that if weve scheduled lower pri work that doesnt have a\r\nsuspenseConfig, we dont consider its expiration as the timeout.\r\n\r\n* Add basic tests for functionality using each update mechanism\r\n\r\n* Fix issue when newly created avoided boundary doesnt suspend with delay\r\n\r\n* Add test for loading indicator with minLoadingDurationMs option\"",
                "commitDate": "2019-05-16T23:51:18Z"
            },
            {
                "commitId": "83fc258f2914c1a7c14c7b98ee362934576f266b",
                "commitMessage": "\"Remove <ConcurrentMode /> (#15532)\n\nUse createSyncRoot instead.\"",
                "commitDate": "2019-05-13T23:10:00Z"
            },
            {
                "commitId": "89d8d1435ffc61fd5201636a84c53806130ef4b8",
                "commitMessage": "\"Add React.unstable_createEventComponent (#15580)\n\nAPI for creating event components from event responders.\"",
                "commitDate": "2019-05-07T19:36:42Z"
            },
            {
                "commitId": "745baf2e061bdb7a07b511fa6fd8c1c5e8106313",
                "commitMessage": "\"Provide new jsx transform target for reactjs/rfcs#107 (#15141)\n\n* adding jsx function\r\n\r\n* add more feature flag defaults\r\n\r\n* flip ReactElement order back\"",
                "commitDate": "2019-04-07T19:02:34Z"
            },
            {
                "commitId": "f161ee2eb7e78d6cb3d3878fe1812ac1057fedc6",
                "commitMessage": "\"React.warn() and React.error() (#15170)\"",
                "commitDate": "2019-03-21T21:44:08Z"
            },
            {
                "commitId": "56035dac645af75c1a8aa8deba2bcf89b14a5aa4",
                "commitMessage": "\"unstable_Profiler -> Profiler (#15172)\"",
                "commitDate": "2019-03-21T16:18:34Z"
            },
            {
                "commitId": "6cb26774e27e03c7d5d6e4601bcee979a004fe91",
                "commitMessage": "\"Enable hooks! (#14679)\n\n* Turned enableHooks feature flag on everywhere\r\n* Removed useHooks feature flag from tests (now that its on by default)\r\n* Remove useHooks feature flag entirely\"",
                "commitDate": "2019-01-23T21:28:09Z"
            },
            {
                "commitId": "edb1f595649b013a59a18f43c03a57035ddea19e",
                "commitMessage": "\"Support configurable labels for custom hooks (#14559)\n\n* react-debug-tools accepts currentDispatcher ref as param\r\n\r\n* ReactDebugHooks injected dispatcher ref is optional\r\n\r\n* Support custom values for custom hooks\r\n\r\n* PR feedback:\r\n\r\n1. Renamed useDebugValueLabel hook to useDebugValue\r\n2. Wrapped useDebugValue internals in if-DEV so that it could be removed from production builds.\r\n\r\n* PR feedback:\r\n\r\n1. Fixed some minor typos\r\n2. Added inline comment explaining the purpose of  rollupDebugValues()\r\n3. Refactored rollupDebugValues() to use a for loop rather than filter()\r\n4. Improve check for useDebugValue hook to lessen the chance of a false positive\r\n5. Added optional formatter function param to useDebugValue\r\n\r\n* Nitpick renamed a method\"",
                "commitDate": "2019-01-14T22:53:22Z"
            },
            {
                "commitId": "b4ad8e947150a1a0b486a388e2d4762d3eee51ee",
                "commitMessage": "\"rename useImperativeMethods -> useImperativeHandle (#14565)\"",
                "commitDate": "2019-01-10T13:37:50Z"
            },
            {
                "commitId": "c2a2d8a539bf02e40c43d36adc2826e228f30955",
                "commitMessage": "\"Remove useMutationEffect (#14336)\n\nuseMutationEffect has problems (namely, refs arent attached at the time that it runs) and were not positive its necessary. useLayoutEffect runs at the same time as componentDidMount/Update so its sufficient for all existing use cases; it can be used in any case that useEffect happens too late. Until we figure out what we want to do, lets delete it.\"",
                "commitDate": "2018-11-27T21:05:13Z"
            },
            {
                "commitId": "7475120ce7bdeb7a5666d64c636efb1f4a951b9a",
                "commitMessage": "\"Prevent deopts from modifying exports object in stable builds (#14309)\"",
                "commitDate": "2018-11-23T14:10:57Z"
            },
            {
                "commitId": "5fc84efacce66272928815e8a6c83a341af9160e",
                "commitMessage": "\"Skip updating effect tag when skipping effect\n\nFor example, if you have `useEffect(..., [])`, theres no need to set .effectTag to `Update | Passive` on updates.\"",
                "commitDate": "2018-10-29T18:26:54Z"
            },
            {
                "commitId": "11d0781eea7dfa65e0ea9e54d18ff937122f9524",
                "commitMessage": "\"Defer useEffect until after paint\n\nEffects scheduled by useEffect should not fire until after the browser\nhas had a chance to paint. However, they should be fired before any\nsubsequent mutations.\n\nAlso adds useMutationEffect and useLayoutEffect. useMutationEffect fires\nduring the host update phase. useLayoutEffect fires during the post-\nupdate phase (the same phase as componentDidMount\nand componentDidUpdate).\"",
                "commitDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "105f2de545dc9e374ed4ac55b3628eeeb555f4a6",
                "commitMessage": "\"Put hooks behind feature flag\"",
                "commitDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "7bee9fbdd49aa5b9365a94b0ddf6db04bc1bf51c",
                "commitMessage": "\"Initial hooks implementation\n\nIncludes:\n- useState\n- useContext\n- useEffect\n- useRef\n- useReducer\n- useCallback\n- useMemo\n- useAPI\"",
                "commitDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "275e76e83bc2be5dc0be9185ff747f383969289a",
                "commitMessage": "\"Enable stable concurrent APIs flag for 16.7 alpha (#13928)\n\n* Add enableStableConcurrentModeAPIs feature flag\r\n\r\n* Conditionally name concurrent API based on enableStableConcurrentModeAPIs flag\"",
                "commitDate": "2018-10-24T20:45:07Z"
            },
            {
                "commitId": "d75c69e0cf2a842adc47edab87ca5103411e6949",
                "commitMessage": "\"Remove unstable_ prefix from Suspense (#13922)\n\nWe are using it with lazy and the combination Suspense + lazy seems pretty\r\nstable. maxDuration is not but thats only enabled when youre in\r\nConcurrentMode which is still unstable.\"",
                "commitDate": "2018-10-23T05:40:05Z"
            },
            {
                "commitId": "769b1f270e1251d9dbdce0fcbd9e92e502d059b8",
                "commitMessage": "\"pure -> memo (#13905)\"",
                "commitDate": "2018-10-20T16:46:23Z"
            },
            {
                "commitId": "8af6728c6f105d37f9c0006288a6d1ac3903dc71",
                "commitMessage": "\"Enable Suspense + rename Placeholder (#13799)\n\n* Enable Suspense\r\n\r\n* <unstable_Placeholder delayMs> => <unstable_Suspense maxDuration>\r\n\r\n* Update suspense fixture\"",
                "commitDate": "2018-10-10T16:02:04Z"
            },
            {
                "commitId": "a0733fe13d598303f45b9d27c84ce0ec40d09021",
                "commitMessage": "\"pure (#13748)\n\n* pure\r\n\r\nA higher-order component version of the `React.PureComponent` class.\r\nDuring an update, the previous props are compared to the new props. If\r\nthey are the same, React will skip rendering the component and\r\nits children.\r\n\r\nUnlike userspace implementations, `pure` will not add an additional\r\nfiber to the tree.\r\n\r\nThe first argument must be a functional component; it does not work\r\nwith classes.\r\n\r\n`pure` uses shallow comparison by default, like `React.PureComponent`.\r\nA custom comparison can be passed as the second argument.\r\n\r\nCo-authored-by: Andrew Clark <acdlite@fb.com>\r\nCo-authored-by: Sophie Alpert <sophiebits@fb.com>\r\n\r\n* Warn if first argument is not a functional component\"",
                "commitDate": "2018-09-27T22:25:38Z"
            },
            {
                "commitId": "0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74",
                "commitMessage": "\"Rename AsyncMode -> ConcurrentMode (#13732)\n\n* Rename AsyncMode -> ConcurrentMode\"",
                "commitDate": "2018-09-26T16:13:02Z"
            },
            {
                "commitId": "fe959eea731b4de0c970f753dfa9d0f6b010b63d",
                "commitMessage": "\"React.lazy (#13398)\n\nLazily starts loading a component the first time its rendered. The\r\nimplementation is fairly simple and could be left to userspace, but since\r\nthis is an important use case, theres value in standardization.\"",
                "commitDate": "2018-08-16T16:43:32Z"
            },
            {
                "commitId": "659a29cecf74301532354261369e9048aac6e20f",
                "commitMessage": "\"Reorganize how shared internals are accessed (#13201)\n\n* Reorganize how shared internals are accessed\r\n\r\n* Update forks.js\"",
                "commitDate": "2018-07-13T01:45:37Z"
            },
            {
                "commitId": "88d7ed8bfbccd860c3e309da39d356d0a3127aa7",
                "commitMessage": "\"React.Timeout -> React.Placeholder (#13105)\n\nChanged the API to match what weve been using in our latest discussions.\r\n\r\nOur tentative plans are for <Placeholder> to automatically hide the timed-out\r\nchildren, instead of removing them, so their state is not lost. This part is\r\nnot yet implemented. Well likely have a lower level API that does not include\r\nthe hiding behavior. This is also not yet implemented.\"",
                "commitDate": "2018-07-04T02:47:00Z"
            },
            {
                "commitId": "d6f304e88952b895a9e1c69483081d2d9ef56979",
                "commitMessage": "\"Remove Timeout export on React object unless enableSuspense flag (#12833)\"",
                "commitDate": "2018-05-16T21:02:34Z"
            },
            {
                "commitId": "6565795377d1d2c79a7708766f1af9e1a87517de",
                "commitMessage": "\"Suspense (#12279)\n\n* Timeout component\r\n\r\nAdds Timeout component. If a promise is thrown from inside a Timeout component,\r\nReact will suspend the in-progress render from committing. When the promise\r\nresolves, React will retry. If the render is suspended for longer than the\r\nmaximum threshold, the Timeout switches to a placeholder state.\r\n\r\nThe timeout threshold is defined as the minimum of:\r\n- The expiration time of the current render\r\n- The `ms` prop given to each Timeout component in the ancestor path of the\r\nthrown promise.\r\n\r\n* Add a test for nested fallbacks\r\n\r\nCo-authored-by: Andrew Clark <acdlite@fb.com>\r\n\r\n* Resume on promise rejection\r\n\r\nReact should resume rendering regardless of whether it resolves\r\nor rejects.\r\n\r\n* Wrap Suspense code in feature flag\r\n\r\n* Children of a Timeout must be strict mode compatible\r\n\r\nAsync is not required for Suspense, but strict mode is.\r\n\r\n* Simplify list of pending work\r\n\r\nSome of this was added with \"soft expiration\" in mind, but now with our revised\r\nmodel for how soft expiration will work, this isnt necessary.\r\n\r\nIt would be nice to remove more of this, but I think the list itself is inherent\r\nbecause we need a way to track the start times, for <Timeout ms={ms} />.\r\n\r\n* Only use the Timeout update queue to store promises, not for state\r\n\r\nIt already worked this way in practice.\r\n\r\n* Wrap more Suspense-only paths in the feature flag\r\n\r\n* Attach promise listener immediately on suspend\r\n\r\nInstead of waiting for commit phase.\r\n\r\n* Infer approximate start time using expiration time\r\n\r\n* Remove list of pending priority levels\r\n\r\nWe can replicate almost all the functionality by tracking just five\r\nseparate levels: the highest/lowest priority pending levels, the\r\nhighest/lowest priority suspended levels, and the lowest pinged level.\r\n\r\nWe lose a bit of granularity, in that if there are multiple levels of\r\npending updates, only the first and last ones are known. But in practice\r\nthis likely isnt a big deal.\r\n\r\nThese heuristics are almost entirely isolated to a single module and\r\ncan be adjusted later, without API changes, if necessary.\r\n\r\nNon-IO-bound work is not affected at all.\r\n\r\n* ReactFiberPendingWork -> ReactFiberPendingPriority\r\n\r\n* Renaming method names from \"pending work\" to \"pending priority\"\r\n\r\n* Get rid of SuspenseThenable module\r\n\r\nIdk why I thought this was neccessary\r\n\r\n* Nits based on Sebastians feedback\r\n\r\n* More naming nits + comments\r\n\r\n* Add test for hiding a suspended tree to unblock\r\n\r\n* Revert change to expiration time rounding\r\n\r\nThis means you have to account for the start time approximation\r\nheuristic when writing Suspense tests, but thats going to be\r\ntrue regardless.\r\n\r\nWhen updating the tests, I also made a fix related to offscreen\r\npriority. We should never timeout inside a hidden tree.\r\n\r\n* palceholder -> placeholder\"",
                "commitDate": "2018-05-11T01:09:10Z"
            },
            {
                "commitId": "fc3777b1fe295fd2661f1974f5587d214791f04b",
                "commitMessage": "\"Add Profiler component for collecting new render timing info (#12745)\n\nAdd a new component type, Profiler, that can be used to collect new render time metrics. Since this is a new, experimental API, it will be exported as React.unstable_Profiler initially.\r\n\r\nMost of the functionality for this component has been added behind a feature flag, enableProfileModeMetrics. When the feature flag is disabled, the component will just render its children with no additional behavior. When the flag is enabled, React will also collect timing information and pass it to the onRender function (as described below).\"",
                "commitDate": "2018-05-10T22:25:32Z"
            },
            {
                "commitId": "bc70441c8b3fa85338283af3eeb47b5d15e9dbfe",
                "commitMessage": "\"RFC #30: React.forwardRef implementation (#12346)\n\nAdded React.forwardRef support to react-reconciler based renders and the SSR partial renderer.\"",
                "commitDate": "2018-03-14T20:07:58Z"
            },
            {
                "commitId": "29e8924c70856bef9b11e0c74a450140bfcce773",
                "commitMessage": "\"Move ReactContext source to React package (#12205)\"",
                "commitDate": "2018-02-10T16:41:33Z"
            },
            {
                "commitId": "8dc8f88d5ae9fb96934ba43e3842b5dcf4074afd",
                "commitMessage": "\"Adds createRef() as per RFC (#12162)\n\n* Adds createRef() as per RFC\"",
                "commitDate": "2018-02-06T20:19:49Z"
            },
            {
                "commitId": "28aa084ad84a681be1c45def2f4b4c0dd8a43871",
                "commitMessage": "\"Switch to JSX API for context (#12123)\n\n* Switch to JSX API for context\r\n\r\n80% sure this will be the final API. Merging this now so we can get this\r\ninto the next www sync in preparation for 16.3.\r\n\r\n* Promote context to a stable API\"",
                "commitDate": "2018-01-30T21:06:12Z"
            },
            {
                "commitId": "9ea55516e674c2de63b9f7829e3c459f3cb3cf78",
                "commitMessage": "\"Replace unstable_AsyncComponent with unstable_AsyncMode (#12117)\n\n* Replace unstable_AsyncComponent with Unstable_AsyncMode\r\n\r\nMirrors the StrictMode API and uses the new Mode type of work.\r\n\r\n* internalContextTag -> mode\r\n\r\nChange this now that we have a better name\r\n\r\n* Unstable_ -> unstable_\"",
                "commitDate": "2018-01-30T03:11:59Z"
            },
            {
                "commitId": "87ae211ccd8d61796cfdef138d1e12fb7a74f85d",
                "commitMessage": "\"New context API (#11818)\n\n* New context API\r\n\r\nIntroduces a declarative context API that propagates updates even when\r\nshouldComponentUpdate returns false.\r\n\r\n* Fuzz tester for context\r\n\r\n* Use ReactElement for provider and consumer children\r\n\r\n* Unify more branches in createFiberFromElement\r\n\r\n* Compare context values using Object.is\r\n\r\nSame semantics as PureComponent/shallowEqual.\r\n\r\n* Add support for Provider and Consumer to server-side renderer\r\n\r\n* Store providers on global stack\r\n\r\nRather than using a linked list stored on the context type. The global\r\nstack can be reset in case of an interruption or error, whereas with the\r\nlinked list implementation, youd need to keep track of every\r\ncontext type.\r\n\r\n* Put new context API behind a feature flag\r\n\r\nWell enable this in www only for now.\r\n\r\n* Store nearest provider on context object\r\n\r\n* Handle reentrancy in server renderer\r\n\r\nContext stack should be per server renderer instance.\r\n\r\n* Bailout of consumer updates using bitmask\r\n\r\nThe context type defines an optional function that compares two context\r\nvalues, returning a bitfield. A consumer may specify the bits it needs\r\nfor rendering. If a providers context changes, and the consumers bits\r\ndo not intersect with the changed bits, we can skip the consumer.\r\n\r\nThis is similar to how selectors are used in Redux but fast enough to do\r\nwhile scanning the tree. The only user code involved is the function\r\nthat computes the changed bits. But thats only called once per provider\r\nupdate, not for every consumer.\r\n\r\n* Store current value and changed bits on context object\r\n\r\nThere are fewer providers than consumers, so better to do this work\r\nat the provider.\r\n\r\n* Use maximum of 31 bits for bitmask\r\n\r\nThis is the largest integer size in V8 on 32-bit systems. Warn in\r\ndevelopment if too large a number is used.\r\n\r\n* ProviderComponent -> ContextProvider, ConsumerComponent -> ContextConsumer\r\n\r\n* Inline Object.is\r\n\r\n* Warn if multiple renderers concurrently render the same context provider\r\n\r\nLets see if we can get away with not supporting this for now. If it\r\nturns out that its needed, we can fall back to backtracking the\r\nfiber return path.\r\n\r\n* Nits that came up during review\"",
                "commitDate": "2018-01-25T03:36:22Z"
            },
            {
                "commitId": "be51e6a41c096f33acf92a693026b80c98e7ddeb",
                "commitMessage": "\"Opt into unsafe lifecycle warnings without async tree (#12083)\n\nAdded new StrictMode component for enabling async warnings (without enabling async rendering). This component can be used in the future to help with other warnings (eg compilation, Fabric).\"",
                "commitDate": "2018-01-25T01:49:43Z"
            },
            {
                "commitId": "3c977dea6b96f6a9bb39f09886848da870748441",
                "commitMessage": "\"react: convert var to let/const (#11715)\"",
                "commitDate": "2017-11-30T12:08:58Z"
            },
            {
                "commitId": "f6894dc48be2e389ffae03cea736122a971e3f76",
                "commitMessage": "\"Set fragment export flags to true (#11672)\"",
                "commitDate": "2017-11-27T21:09:15Z"
            },
            {
                "commitId": "1cb6199d22af6f6ba2f55e4db18ed2f4216aaaf2",
                "commitMessage": "\" Consolidate all symbols in a single file (#11629)\n\n* Consolidate all symbols in a single file\r\n\r\nThis reduces the code duplication as we have quite a few now.\r\n\r\n* Record sizes\"",
                "commitDate": "2017-11-22T18:08:22Z"
            },
            {
                "commitId": "46f7b0d9451c2ac6f5ec5efd2c12ba77a4e054d9",
                "commitMessage": "\"Fix dead code elimination for feature flags (#11453)\n\n* Fix dead code elimination for feature flags\r\n\r\nTurning flags into named exports fixes dead code elimination.\r\n\r\nThis required some restructuring of how we verify that flag types match up. I used the Check<> trick combined with import typeof, as suggested by @calebmer.\r\n\r\nFor www, we can no longer re-export `require(ReactFeatureFlags)` directly, and instead destructure it. This means flags have to be known at init time. This is already the case so its not a problem. In fact it may be better since it removes extra property access in tight paths.\r\n\r\nFor things that we *want* to be dynamic on www (currently, only performance flag) we can export a function to toggle it, and then put it on the secret exports. In fact this is better than just letting everyone mutate the flag at arbitrary times since we can provide, e.g., a ref counting interface to it.\r\n\r\n* Record sizes\"",
                "commitDate": "2017-11-06T14:14:48Z"
            },
            {
                "commitId": "45c1ff348e1c7d03567f5bba6cb32cffa9222972",
                "commitMessage": "\"Remove unnecessary use strict in the source (#11433)\n\n* Remove use strict from ES modules\r\n\r\n* Delete unused file\r\n\r\nThis was unused since Stack.\"",
                "commitDate": "2017-11-02T20:32:48Z"
            },
            {
                "commitId": "21d0c115238b4f38837020cf83e0c657d8c01c9f",
                "commitMessage": "\"Convert the Source to ES Modules (#11389)\n\n* Update transforms to handle ES modules\r\n\r\n* Update Jest to handle ES modules\r\n\r\n* Convert react package to ES modules\r\n\r\n* Convert react-art package to ES Modules\r\n\r\n* Convert react-call-return package to ES Modules\r\n\r\n* Convert react-test-renderer package to ES Modules\r\n\r\n* Convert react-cs-renderer package to ES Modules\r\n\r\n* Convert react-rt-renderer package to ES Modules\r\n\r\n* Convert react-noop-renderer package to ES Modules\r\n\r\n* Convert react-dom/server to ES modules\r\n\r\n* Convert react-dom/{client,events,test-utils} to ES modules\r\n\r\n* Convert react-dom/shared to ES modules\r\n\r\n* Convert react-native-renderer to ES modules\r\n\r\n* Convert react-reconciler to ES modules\r\n\r\n* Convert events to ES modules\r\n\r\n* Convert shared to ES modules\r\n\r\n* Remove CommonJS support from transforms\r\n\r\n* Move ReactDOMFB entry point code into react-dom/src\r\n\r\nThis is clearer because we can use ES imports in it.\r\n\r\n* Fix Rollup shim configuration to work with ESM\r\n\r\n* Fix incorrect comment\r\n\r\n* Exclude external imports without side effects\r\n\r\n* Fix ReactDOM FB build\r\n\r\n* Remove TODOs I don\u2019t intend to fix yet\"",
                "commitDate": "2017-11-02T19:50:03Z"
            },
            {
                "commitId": "0e15ff5669271f5f5956e30a4fe1ae5963778e89",
                "commitMessage": "\"Put React.Fragment under a feature flag (#11421)\n\n* Put React.Fragment under a feature flag\r\n\r\n* Dont export undefined Fragment\"",
                "commitDate": "2017-11-01T00:43:55Z"
            },
            {
                "commitId": "4ce5da7aee90a373f2f36d1beb559097af30952e",
                "commitMessage": "\"Add Fragment as a named export to React (#10783)\n\n* Add Fragment as a named export to React\r\n\r\n* Remove extra tests for Fragment\r\n\r\n* Change React.Fragment export to be a string #fragment\r\n\r\n* Fix fragment special case to work with 1 child\r\n\r\n* Add single child test for fragment export\r\n\r\n* Move fragment definition to ReactEntry.js and render components for key warning tests\r\n\r\n* Inline createFiberFromElementType into createFiberFromElement\r\n\r\n* Update reconciliation to special case fragments\r\n\r\n* Use same semantics as implicit childsets for ReactFragment\r\n\r\n* Add more fragment state preservation tests\r\n\r\n* Export symbol instead of string for fragments\r\n\r\n* Fix rebase breakages\r\n\r\n* Re-apply prettier at 1.2.2\r\n\r\n* Merge branches in updateElement\r\n\r\n* Remove unnecessary check\r\n\r\n* Re-use createFiberFromFragment for fragment case\r\n\r\n* Simplyify branches by adding type field to fragment fiber\r\n\r\n* Move branching logic for fragments to broader methods when possible.\r\n\r\n* Add more tests for fragments\r\n\r\n* Address Dans feedback\r\n\r\n* Move REACT_FRAGMENT_TYPE into __DEV__ block for DCE\r\n\r\n* Change hex representation of REACT_FRAGMENT_TYPE to follow convention\r\n\r\n* Remove unnecessary branching and isArray checks\r\n\r\n* Update test for preserving children state when keys are same\r\n\r\n* Fix updateSlot bug and add more tests\r\n\r\n* Make fragment tests more robust by using ops pattern\r\n\r\n* Update jsx element validator to allow numbers and symbols\r\n\r\n* Remove type field from fragment fiber\r\n\r\n* Fork reconcileChildFibers instead of recursing\r\n\r\n* Use ternary if condition\r\n\r\n* Revamp fragment test suite:\r\n\r\n- Add more coverage to fragment tests\r\n- Use better names\r\n- Remove useless Fragment component inside tests\r\n- Remove useless tests so that tests are more concise\r\n\r\n* Check output of renderer in fragment tests to ensure no silly business despite states being preserved\r\n\r\n* Finish implementation of fragment reconciliation with desired behavior\r\n\r\n* Add reverse render direction for fragment tests\r\n\r\n* Remove unneeded fragment branch in updateElement\r\n\r\n* Add more test cases for ReactFragment\r\n\r\n* Handle childless fragment in reconciler\r\n\r\n* Support fragment flattening in SSR\r\n\r\n* Clean up ReactPartialRenderer\r\n\r\n* Warn when non-key and children props are passed to fragments\r\n\r\n* Add non-null key check back to updateSlots arrays case\r\n\r\n* Add test for positional reconciliation in fragments\r\n\r\n* Add warning for refs in fragments with stack trace\"",
                "commitDate": "2017-10-31T00:52:40Z"
            },
            {
                "commitId": "cc54b6f48a532bf2073e8f7d888c6a3fcf416b63",
                "commitMessage": "\"Add a shim for React 16.0.0 future compatibility (#11388)\"",
                "commitDate": "2017-10-27T16:38:59Z"
            },
            {
                "commitId": "087c48bb36b88ef0b5bbca2b9b70a52d8d413102",
                "commitMessage": "\"Reorder imports (#11359)\n\n* Reorder imports\r\n\r\n* Record sizes\"",
                "commitDate": "2017-10-25T18:07:54Z"
            },
            {
                "commitId": "1eed302d346bfb8f5db8d88b0e7096d8999d3548",
                "commitMessage": "\"Drop Haste (#11303)\n\n* Use relative paths in packages/react\r\n\r\n* Use relative paths in packages/react-art\r\n\r\n* Use relative paths in packages/react-cs\r\n\r\n* Use relative paths in other packages\r\n\r\n* Fix as many issues as I can\r\n\r\nThis uncovered an interesting problem where ./b from package/src/a would resolve to a different instantiation of package/src/b in Jest.\r\n\r\nEither this is a showstopper or we can solve it by completely fobbidding remaining /src/.\r\n\r\n* Fix all tests\r\n\r\nIt seems we cant use relative requires in tests anymore. Otherwise Jest becomes confused between real file and symlink.\r\nhttps://github.com/facebook/jest/issues/3830\r\n\r\nThis seems bad... Except that we already *dont* want people to create tests that import individual source files.\r\nAll existing cases of us doing so are actually TODOs waiting to be fixed.\r\n\r\nSo perhaps this requirement isnt too bad because it makes bad code looks bad.\r\n\r\nOf course, if we go with this, well have to lint against relative requires in tests.\r\nIt also makes moving things more painful.\r\n\r\n* Prettier\r\n\r\n* Remove @providesModule\r\n\r\n* Fix remaining Haste imports I missed earlier\r\n\r\n* Fix up paths to reflect new flat structure\r\n\r\n* Fix Flow\r\n\r\n* Fix CJS and UMD builds\r\n\r\n* Fix FB bundles\r\n\r\n* Fix RN bundles\r\n\r\n* Prettier\r\n\r\n* Fix lint\r\n\r\n* Fix warning printing and error codes\r\n\r\n* Fix buggy return\r\n\r\n* Fix lint and Flow\r\n\r\n* Use Yarn on CI\r\n\r\n* Unbreak Jest\r\n\r\n* Fix lint\r\n\r\n* Fix aliased originals getting included in DEV\r\n\r\nShouldnt affect correctness (they were ignored) but fixes DEV size regression.\r\n\r\n* Record sizes\r\n\r\n* Fix weird version in package.json\r\n\r\n* Tweak bundle labels\r\n\r\n* Get rid of output option by introducing react-dom/server.node\r\n\r\n* Reconciler should depend on prop-types\r\n\r\n* Update sizes last time\"",
                "commitDate": "2017-10-24T23:55:00Z"
            },
            {
                "commitId": "313611572b6567d229367ed20ff63d1bca8610bb",
                "commitMessage": "\"Reorganize code structure (#11288)\n\n* Move files and tests to more meaningful places\r\n\r\n* Fix the build\r\n\r\nNow that we import reconciler via react-reconciler, I needed to make a few tweaks.\r\n\r\n* Update sizes\r\n\r\n* Move @preventMunge directive to FB header\r\n\r\n* Revert unintentional change\r\n\r\n* Fix Flow coverage\r\n\r\nI forgot to @flow-ify those files. This uncovered some issues.\r\n\r\n* Prettier, I love you but youre bringing me down\r\nPrettier, I love you but youre bringing me down\r\n\r\nLike a rat in a cage\r\nPulling minimum wage\r\nPrettier, I love you but youre bringing me down\r\n\r\nPrettier, youre safer and youre wasting my time\r\nOur records all show you were filthy but fine\r\nBut they shuttered your stores\r\nWhen you opened the doors\r\nTo the cops who were bored once theyd run out of crime\r\n\r\nPrettier, youre perfect, oh, please dont change a thing\r\nYour mild billionaire mayors now convinced hes a king\r\nSo the boring collect\r\nI mean all disrespect\r\nIn the neighborhood bars Id once dreamt I would drink\r\n\r\nPrettier, I love you but youre freaking me out\r\nTheres a ton of the twist but were fresh out of shout\r\nLike a death in the hall\r\nThat you hear through your wall\r\nPrettier, I love you but youre freaking me out\r\n\r\nPrettier, I love you but youre bringing me down\r\nPrettier, I love you but youre bringing me down\r\nLike a death of the heart\r\nJesus, where do I start?\r\nBut youre still the one pool where Id happily drown\r\n\r\nAnd oh! Take me off your mailing list\r\nFor kids who think it still exists\r\nYes, for those who think it still exists\r\nMaybe Im wrong and maybe youre right\r\nMaybe Im wrong and maybe youre right\r\nMaybe youre right, maybe Im wrong\r\nAnd just maybe youre right\r\n\r\nAnd oh! Maybe mother told you true\r\nAnd therell always be somebody there for you\r\nAnd youll never be alone\r\nBut maybe shes wrong and maybe Im right\r\nAnd just maybe shes wrong\r\nMaybe shes wrong and maybe Im right\r\nAnd if so, heres this song!\"",
                "commitDate": "2017-10-19T18:50:24Z"
            },
            {
                "commitId": "fedb2ff8ecd96d11ff3f609fbffa76848203f255",
                "commitMessage": "\"Remove createClass, PropTypes, DOM factories, and createMixin from React object (#9788)\"",
                "commitDate": "2017-05-30T14:35:30Z"
            },
            {
                "commitId": "964c263d8fc6e7119f5773f7fa857c9985db40cf",
                "commitMessage": "\"Downgrade deprecation warnings from errors to warnings (#9650)\n\n* Initial regeneration of results.json\r\n\r\n**what is the change?:**\r\nWe ran `yarn build` and updated the perf. stats record.\r\n\r\n**why make this change?:**\r\nSome commits have landed without updating this. By getting an initial update, I can run the build script again after my changes and see any size regressions.\r\n\r\n* Downgrade deprecation warnings from errors to warnings\r\n\r\n**what is the change?:**\r\nSwapping out `warning` module for a fork that uses `console.warn`.\r\nIt looks like we were using the `warning` module for deprecation notices, *but* there is also a deprecated module designed specifically for deprecation notices.\r\n\r\nHowever, we could not find any place that it was currently used.\r\n\r\nSince Reacts build process is not 100% clear to me, I assume it could still be used somewhere by something and just updated it along with other deprecation notices.\r\n\r\nWe might consider a follow-up diff that does some clean up here;\r\n - remove deprecated module if its unused, OR\r\n - use deprecated module for all our current deprecation warnings\r\n\r\n**why make this change?:**\r\n- We have had complaints about noisy warnings, in particular after introducing new deprecations\r\n- They potentially cause CI failures\r\n- Deprecations are not really time-sensitive, can ship without breaking your app, etc.\r\n\r\nFor more context - https://github.com/facebook/react/issues/9395\r\n\r\n**test plan:**\r\n`npm run test`\r\nand unit tests for the new modules\r\nand manual testing (WIP)\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9395\r\n\r\n* Add lowPriorityWarning to ReactExternals\r\n\r\n**what is the change?:**\r\nWe wont bundle lowPriorityWarning with the rest of React when building for Facebook.\r\nNOTE: A parallel commit will introduce an internal implementation of lowPriorityWarning in Facebooks codebase, to compensate. Will post a comment with the diff number once that is up.\r\n\r\n**why make this change?:**\r\nSo that the sync between github and Facebook can go more smoothly!\r\n\r\n**test plan:**\r\nWe will see when I run the sync! But this is a reasonable first step imo.\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9398\r\n\r\n* Make state mutations an error, not low-pri warning\r\n\r\n**what is the change?:**\r\nEven though this is a \"deprecation\" warning, we still want to use console.error for it.\r\n\r\n**why make this change?:**\r\n- Its not likely to come up now, hopefully, because this warning has been present for some time\r\n- This will cause real issues in production if ignored\r\n\r\n**test plan:**\r\n`yarn test` - we did fix one test which failed bc of this change\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9398\r\n\r\n* Fix test of assigning to this.state that was only passing in fiber\r\n\r\n**what is the change?:**\r\nupdated a unit test for assigning directly to state; it once again raises an error and not a warning.\r\n\r\n**why make this change?:**\r\nSo that tests pass\r\n\r\n**test plan:**\r\n REACT_DOM_JEST_USE_FIBER=1 yarn run test\r\n\r\n**issue:**\r\n\r\n* Update results.json\"",
                "commitDate": "2017-05-23T16:35:42Z"
            },
            {
                "commitId": "e71b3087c81d95c3e7d3f015d0db60436c95fe6c",
                "commitMessage": "\"Added stack renderer to react-test-renderer bundle temporarily (#9514)\n\nAlso fixed an error in a temporary export property that had been added to the React object\"",
                "commitDate": "2017-04-25T01:45:43Z"
            },
            {
                "commitId": "86dd083f455f71369b4c1bf1e798dd2fd5a3c9c4",
                "commitMessage": "\"Move ReactDOMFactories into separate package (#8356)\n\n- Update examples to no longer use React.DOM\r\n- Add package and documentation entries for react-addons-dom-factories\r\n- Update dom-factories readme\r\n- Set up proxy to intercept React.DOM usage\r\n- Update ReactDOM children tests to use createElement\r\n- Add more specific warning assertion for React DOM factories\r\n- Do not use expectDev in ReactDOMFactories tests\"",
                "commitDate": "2017-04-24T15:08:17Z"
            },
            {
                "commitId": "66f2097f33a3084c79aa536e11d3ca09195bc320",
                "commitMessage": "\"Shallow renderer and test utils bundles (#9426)\n\nShallow renderer and test utils bundles\r\n\r\nAdds new bundles introduced with React 15.5 release to master (and 16 alpha)\r\n\r\nreact-dom/test-utils:\r\n\r\nThis new bundle contains what used to be react-addons-test-utils. This bundle shares things from react-dom rather than duplicates them.\r\n\r\nA temporary createRenderer method has been left behind as a way to access the new shallow renderer. This is for the ReactNative release cycle only and should be going away before the final release.\r\n\r\nreact-test-renderer/shallow:\r\n\r\nThis new shallow renderer is almost entirely stand-alone (in that it doesnt use the React reconciler or scheduler). The only touch points are ReactElement and prop/context validation. This renderer is stack and fiber compatible.\"",
                "commitDate": "2017-04-19T23:45:31Z"
            },
            {
                "commitId": "2beec2f308e27dbe902a8d68e1fc9f3d70ee9372",
                "commitMessage": "\"createClass + PropTypes + checkPropTypes warnings (#9399)\n\n(Temporarily) re-adds getters with deprecation warnings for React.PropTypes, React.checkPropTypes, and React.createClass.\r\n\r\n* 08bd020: Replace all references to React.PropTypes with prop-types to avoid triggering our own warning message.\r\n* ef5b5c6: Removed several references to React.createClass that appeared after rebasing this branch. (reviewed by @flarnie)\r\n* 524ce20: Added getters for createClass and PropTypes to the main React isomorphic object, behind one-time warning messages. (reviewed by @spicyj)\r\n* db48f54: Fixed Rollup bundles to inline prop-types and create-react-class for UMD builds only. (reviewed by @spicyj, @trueadm )\r\n* cf49cfd: Updated tests-passing.txt to remove tests that were deleted in this branch.\r\n* d34109a: Responses to PR feedback from @spicyj. (Added package.json dependencies to packages/react and packages/react-dom. Renamed a var. Expanded on an inline comment.)\r\n* 488c8d2: Added warning for moved package to React.checkPropTypes accessor too and updated build script.\r\n* 83bcb29: Wordsmithing for deprecation notices (added fb.me links).\r\n* afdc9d2: Tweaked legacy module inlining to remove order-of-deps constraint\r\n* d1348b9: Removed $FlowFixMe.\r\n* 7dbc3e7: More wordsmithing of deprecation notices based on Dans feedback.\"",
                "commitDate": "2017-04-11T21:28:03Z"
            },
            {
                "commitId": "957fbc92b123030c389bf8b4b874522bdf2db72c",
                "commitMessage": "\"react-create-class -> create-react-class\"",
                "commitDate": "2017-04-11T00:06:32Z"
            },
            {
                "commitId": "646e7863348a427e1ed9163a9a96fa759112f102",
                "commitMessage": "\"Warn once when attempting to access React.createClass\n\nShould still be undefined.\"",
                "commitDate": "2017-04-11T00:03:05Z"
            },
            {
                "commitId": "5cfaa7cf68564b8d96c94fa0d45e7feb6dc80895",
                "commitMessage": "\"Delete createClass\n\nRemove createClass from isomorphic package\"",
                "commitDate": "2017-04-11T00:03:05Z"
            },
            {
                "commitId": "72196da82915bee400edb1599d4223926aa2a8a0",
                "commitMessage": "\"Replace shims with explicit React access from the renderers for shared global state (#9366)\n\n* Remove non-existent /lib/ from souce files\r\n\r\n* Replace all shims with explicit access\r\n\r\nThis deletes shims and changes to access require(react).__DO_NOT_USE__ from renderers for global shared state.\r\n\r\nI cloned flattenChildren() and traverseAllChildren() because they relied on CurrentOwner but were used both from Stack and Isomorphic. The stack implementations will die, and the isomorphic ones can be changed to be optimized for Children specifically in the future.\r\n\r\nI also deleted UMD shims because they are now unnecessary. I moved the internals assignment to main modules since theyre now used in tests, and made them direct UMD entry points.\"",
                "commitDate": "2017-04-07T21:07:10Z"
            },
            {
                "commitId": "b1b4a2fb252f26fe10d29ba60d85ff89a85ff3ec",
                "commitMessage": "\"Merge pull request #9101 from sebmarkbage/prettier\n\nUse Prettier\"",
                "commitDate": "2017-03-14T22:33:27Z"
            },
            {
                "commitId": "1843f8716803d380df34a7362d80022352853931",
                "commitMessage": "\"Run prettier\"",
                "commitDate": "2017-03-14T00:05:18Z"
            },
            {
                "commitId": "8bc11649df767402c262b6c9b67c6dd811d42cd0",
                "commitMessage": "\"Merge branch master into remove-stack-dependencies-from-tests\"",
                "commitDate": "2017-03-01T12:32:36Z"
            },
            {
                "commitId": "e452e3374135c116ef687a8bb3a5d277e3cde8fb",
                "commitMessage": "\"providesModule -> explicit requires for cross-package dependencies (#9078)\n\n* Add forwarding modules\r\n\r\n* Codemod to use full package path outside of own package\r\n\r\nFiles that require modules from a different package than their own now\r\ndoes so by the npm path name instead of the providesModule.\r\n\r\n* Codemod fbjs module dependencies\r\n\r\n* Fix gulp module mapping config\r\n\r\nThis is a bit lame but because of our module rewrite we need to white\r\nlist all the paths that we dont *dont* want to rewrite.\"",
                "commitDate": "2017-03-01T02:42:52Z"
            },
            {
                "commitId": "f3c2d9f308eeee49d9c580c063ec7a109e9ad635",
                "commitMessage": "\"Merge pull request #9004 from acdlite/proptypescheck\n\nAPI for checking external objects against React prop types\"",
                "commitDate": "2017-02-23T22:37:19Z"
            },
            {
                "commitId": "03ed3437c988f294045770bf403839603ce00ae9",
                "commitMessage": "\"Fix build config\n\nReactDebugCurrentFrame is shared state.\n\ncheckPropTypes should be imported via the main React export,\nnot imported directly.\"",
                "commitDate": "2017-02-23T19:14:15Z"
            },
            {
                "commitId": "77c7792556e4697636d1eb5dc34042566185c26c",
                "commitMessage": "\"Remove React.__spread\"",
                "commitDate": "2017-02-10T20:27:02Z"
            },
            {
                "commitId": "7e8068b9840dd98813787736385919683ddf2002",
                "commitMessage": "\"Move component base classes into a single file (#8918)\"",
                "commitDate": "2017-02-02T20:24:39Z"
            },
            {
                "commitId": "2be0583ed37ffc22fefe61292a12daee083e6ed9",
                "commitMessage": "\"Update deprecation wording to be less aggressive\"",
                "commitDate": "2017-01-24T06:18:23Z"
            },
            {
                "commitId": "2b7814f713629d3f629ea9d74f349b77369fdae3",
                "commitMessage": "\"Deprecate React.createMixin\n\nThis API was never fully implemented. Since mixins are no longer considered part of the future React API, it will be removed.\"",
                "commitDate": "2017-01-24T06:18:23Z"
            },
            {
                "commitId": "c8fbdac22717e91d1f1638a932eed3ce4cc39ff7",
                "commitMessage": "\"Add React.PureComponent (#7195)\n\nThis provides an easy way to indicate that components should only rerender when given new props, like PureRenderMixin. If you rely on mutation in your React components, you can continue to use `React.Component`.\r\n\r\nInheriting from `React.PureComponent` indicates to React that your component doesnt need to rerender when the props are unchanged. Well compare the old and new props before each render and short-circuit if theyre unchanged. Its like an automatic shouldComponentUpdate.\"",
                "commitDate": "2016-07-06T20:24:44Z"
            },
            {
                "commitId": "d955ee9fae71e2037e9c876e2ab8cb537a8c7e43",
                "commitMessage": "\"Move ReactElementValidator to __DEV__ block (#6830)\n\nIt saves some more bytes in production mode.\"",
                "commitDate": "2016-05-22T09:01:21Z"
            },
            {
                "commitId": "6c885d28c51ea30af0d8a4031dedcea98ef4114c",
                "commitMessage": "\"Remove duplicates and move files out of native/vendor\n\nMoving the event plugins into their dedicated folder\n\nRemoving the ExecutionEnvironment override. I will just have to fix where needed. Probably related to the Chrome debugger?\"",
                "commitDate": "2016-04-20T02:35:30Z"
            },
            {
                "commitId": "f463b731ee5fce75ccf1df43d6174527016a0379",
                "commitMessage": "\"Copy files from the react-native repo\"",
                "commitDate": "2016-04-20T02:35:30Z"
            },
            {
                "commitId": "516c1d809ea56dbd109f54712efea6923ac76ee6",
                "commitMessage": "\"Merge pull request #6444 from zpao/re__spreadwarn\n\nAdd back React.__spread and make it warn\"",
                "commitDate": "2016-04-08T00:30:44Z"
            },
            {
                "commitId": "fc1cfb6225f5c3af6843515363db63ed3dcbb824",
                "commitMessage": "\"Make React.__spread warn\"",
                "commitDate": "2016-04-08T00:30:23Z"
            },
            {
                "commitId": "f02d87bdb55ebd84943c5da5d6de92e3488fa2bc",
                "commitMessage": "\"Revert \"Merge pull request #6431 from sebmarkbage/killspread\"\n\nThis reverts commit a37e4e94fcae9424094378349dc11bafe1e47973, reversing\nchanges made to 411951d5b8a4a467adc213d4533c87a7c3b06bf8.\"",
                "commitDate": "2016-04-07T23:16:37Z"
            },
            {
                "commitId": "a37e4e94fcae9424094378349dc11bafe1e47973",
                "commitMessage": "\"Merge pull request #6431 from sebmarkbage/killspread\n\nKill React.__spread\"",
                "commitDate": "2016-04-07T01:42:45Z"
            },
            {
                "commitId": "a142fd257803a218b5b9b2e76c327f0421b9b8b6",
                "commitMessage": "\"Kill React.__spread\n\nThis was only for a JSTransform related experiment that is now\ndead along with JSTransform.\"",
                "commitDate": "2016-04-07T00:08:50Z"
            },
            {
                "commitId": "80bff5397bf854750dbe7c286f61654ea58938c5",
                "commitMessage": "\"Merge pull request #6376 from zpao/object.assign\n\nUse object-assign instead of our own dated \"polyfill\"\"",
                "commitDate": "2016-04-04T17:21:39Z"
            },
            {
                "commitId": "1573baaee8ba1c9cd84145b01effcb5eb80503fb",
                "commitMessage": "\"Use Object.assign directly and inject object-assign at compile\"",
                "commitDate": "2016-04-04T16:53:25Z"
            },
            {
                "commitId": "6a8ebfc41842fb200c87a919478dcd3aa95be0d7",
                "commitMessage": "\"Merge pull request #6331 from zpao/isonpmorphic\n\nMake Browserify-specific modules to remove DOM dependencies from npm package\"",
                "commitDate": "2016-03-24T23:01:51Z"
            },
            {
                "commitId": "d17091ddebf317173eb30e3ab4a8e28e124c8f50",
                "commitMessage": "\"Make Browserify-specific modules to remove DOM dependencies from npm package\"",
                "commitDate": "2016-03-24T22:28:52Z"
            },
            {
                "commitId": "209b7522d99a8af36f8d9e06ce622c59b793e5a3",
                "commitMessage": "\"update zh-docs14.3 ,fixed confliction\"",
                "commitDate": "2016-01-14T10:38:07Z"
            },
            {
                "commitId": "fcc63e1fff7709d8cc749a6a54f788b0a5ab0983",
                "commitMessage": "\"Merge pull request #5832 from jimfb/cleanup-top-level-dom-api\n\nRemove DOM functions from top-level isomorphic API\"",
                "commitDate": "2016-01-13T23:41:03Z"
            },
            {
                "commitId": "2e1fb4b52972711199d5065625251642f7d75c29",
                "commitMessage": "\"Remove DOM functions from top-level isomorphic API\"",
                "commitDate": "2016-01-12T07:57:08Z"
            },
            {
                "commitId": "3b96650e39ddda5ba49245713ef16dbc52d25e9e",
                "commitMessage": "\"Merge pull request #5748 from rickbeerendonk/year-agnostic-copyright\n\nYear-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.\"",
                "commitDate": "2015-12-30T07:24:24Z"
            },
            {
                "commitId": "bef45b0b1a98ea9b472ba664d955a039cf2f8068",
                "commitMessage": "\"Year-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.\"",
                "commitDate": "2015-12-29T19:20:32Z"
            },
            {
                "commitId": "c07b304c76ac9cdc4bae875391e7902cf0e8e2f3",
                "commitMessage": "\"Merge pull request #5381 from kevinrobinson/react-dom-server-package\n\nAdd additional secret property to build artifact for react-dom-server\"",
                "commitDate": "2015-11-18T00:48:08Z"
            },
            {
                "commitId": "45c612ed7a56b91f4c1d056c824de54673a2c241",
                "commitMessage": "\"Add additional secret property and build for react-dom-server\n\nUpdate eslintrc, travis build and add task to Gruntfile\"",
                "commitDate": "2015-11-03T21:39:58Z"
            },
            {
                "commitId": "69ab7145bc36a500195ccf0e2937ded21520582f",
                "commitMessage": "\"Merge pull request #4814 from zpao/build-react-dom-browser-2\n\nBuild react dom browser 2\"",
                "commitDate": "2015-09-09T05:33:08Z"
            },
            {
                "commitId": "b2ca3349c27b57b1e9462944cbe4aaaf76783d2b",
                "commitMessage": "\"Actually build react-dom file with the build\"",
                "commitDate": "2015-09-09T05:18:44Z"
            },
            {
                "commitId": "c0270a167397f7083f77012d43180cc22bbae13e",
                "commitMessage": "\"Merge pull request #4798 from zpao/pull-out-version\n\nMove version to standalone module in preparation for reuse\"",
                "commitDate": "2015-09-08T23:30:05Z"
            },
            {
                "commitId": "58d62989bd4e8da32e58db35a96868ef2258c2c9",
                "commitMessage": "\"Move version to standalone module in preparation for reuse\"",
                "commitDate": "2015-09-08T17:18:41Z"
            },
            {
                "commitId": "4b9c349fd057b3c4b1a0fab5fbdf5bd0c625db8d",
                "commitMessage": "\"Merge pull request #4702 from spicyj/react-mod-depr\n\nAdd deprecation warnings to React module\"",
                "commitDate": "2015-09-01T21:40:48Z"
            },
            {
                "commitId": "c04d02e5e8de18436ac95037ab856ac5ba7d29b9",
                "commitMessage": "\"Add warnings to React module\"",
                "commitDate": "2015-09-01T21:36:41Z"
            },
            {
                "commitId": "3f6bca7b1638ee940bb01989377abc9864edb6fe",
                "commitMessage": "\"0.14.0-beta3\"",
                "commitDate": "2015-08-03T21:24:24Z"
            },
            {
                "commitId": "681bbb629fa80a67fa79ced11e5a4cad6c1878fe",
                "commitMessage": "\"0.14.0-beta2\"",
                "commitDate": "2015-07-31T04:29:09Z"
            },
            {
                "commitId": "d16481d0e7d23771c5d94e5a0eeaf64e02f07979",
                "commitMessage": "\"Merge pull request #4453 from spicyj/react-dom\n\nRename ReactDOMClient to ReactDOM\"",
                "commitDate": "2015-07-23T18:27:25Z"
            },
            {
                "commitId": "6c20271488d8abfa82dda14fd8d2a947549c21d7",
                "commitMessage": "\"Rename ReactDOMClient to ReactDOM\n\nThis closer matches the npm package name and (I assume) is what we want to call it internally.\"",
                "commitDate": "2015-07-22T02:30:09Z"
            },
            {
                "commitId": "b4e74e38e43ac53af8acd62c78c9213be0194245",
                "commitMessage": "\"Bump version to beta1\"",
                "commitDate": "2015-07-03T08:46:35Z"
            },
            {
                "commitId": "8471cc5f47bac0dbfd6b3123775fc28757db0ed3",
                "commitMessage": "\"0.14.0-alpha3\"",
                "commitDate": "2015-05-27T23:47:35Z"
            },
            {
                "commitId": "b687a229530dc304fbb74018027156968258c295",
                "commitMessage": "\"0.14.0-alpha2\"",
                "commitDate": "2015-05-20T20:37:42Z"
            },
            {
                "commitId": "52752446760dee0bc7232b4146f5a309ac57f065",
                "commitMessage": "\"Merge pull request #3866 from sebmarkbage/coreapi\n\nReorganize Src Directory for Isomorphic React Package\"",
                "commitDate": "2015-05-16T01:39:36Z"
            },
            {
                "commitId": "0b063f8a09dae4b6b1de400ff2d9aba9108647de",
                "commitMessage": "\"Reorganize Src Files for Isomorphic React Package\n\nThe new folder structure is organized around major packages that are expected to ship separately in some form.\n\n`/isomorphic`\n\nI moved classic/modern and children utils into a directory called \"isomorphic\" with the main export being ReactIsomorphic. This will eventually become the \"react\" package.\n\nThis includes all the dependencies that you might need to create a component without dependencies on the renderer/reconciler.\n\nThe rest moves into decoupled renderers.\n\n`/renderers/dom/client` - This is the main renderer for DOM.\n\n`/renderers/dom/server` - This is the server-side renderer for HTML strings.\n\n`/addons` and `/test` - Same as before for now.\n\nYoure not supposed to take on a dependency inside another package.\n\nShared code is organized into a \"shared\" directory which is intended to support all the packages in that subdirectory. Meaning that once we swap to CommonJS modules, the only time you should use `..` is to target `../shared/` or `../../shared`.\n\nE.g. `/shared/` is common utils that are used by everything.\n\n`/renderers/shared/` is code that is shared by all renderers, such as the main reconciliation algorithm.\n\nShared code will likely be copied into each package rather than referenced. This allow us to have separate state and allow inlining and deadcode elimination.\"",
                "commitDate": "2015-05-16T01:35:22Z"
            },
            {
                "commitId": "7839e072313db4a21c246bb1e35e1f510139bb12",
                "commitMessage": "\"0.14.0-alpha1\"",
                "commitDate": "2015-05-11T05:36:50Z"
            },
            {
                "commitId": "4f285b7ba07b3153a0b9b61c35fc05da37ebdd9e",
                "commitMessage": "\"Merge pull request #3676 from zpao/rm-withContext\n\nRemove withContext from top-level API\"",
                "commitDate": "2015-04-22T16:45:26Z"
            },
            {
                "commitId": "088d71c7c1eaef9a14ccccabe05b73a57c755703",
                "commitMessage": "\"Merge pull request #3693 from reedloden/swap-http-to-https\n\nSSL/TLSize all the things! (convert http:// to https:// where appropriate)\"",
                "commitDate": "2015-04-20T18:02:29Z"
            },
            {
                "commitId": "3e8951e8c7dcb44035c8524c0fd82967652d41dd",
                "commitMessage": "\"SSL/TLSize all the things! (convert http:// to https:// where appropriate)\n\nUpdate links to use https:// where it is supported. Theres probably a lot\nmore that could be fixed, but these are the core ones I found (especially\nthe download links in order to prevent MITM attacks). Note that there are\nsome fb.me links that will redirect to http:// even while accessed over\nhttps://, but this seemed like the best way to fix those for now.\n\nNOTE: Only non-third-party files were modified. There are references to\nhttp:// URLs in vendored/third-party files, but seems appropriate to fix\nupstream for those rather than editing the files.\n\nAlso, copy one image locally to the blog, as it was hotlinking to a site\nthat did not support https://.\n\nLast, use youtube-nocookie.com instead of youtube.com for video embeds,\nas the former doesnt try to set a cookie on load (privacy enhancement).\"",
                "commitDate": "2015-04-18T23:49:32Z"
            },
            {
                "commitId": "5297ff66cf8f9b6459d6cf73d4e3a54cc010b34d",
                "commitMessage": "\"Remove withContext from top-level API\"",
                "commitDate": "2015-04-16T22:58:27Z"
            },
            {
                "commitId": "88fb106c39545fdfea71e56f55418b8058e6b3e6",
                "commitMessage": "\"Merge pull request #3646 from facebook/revert-3580-2402-warn-multiple-copies-of-react-on-same-page\n\nRevert \"Warn when multiple instances of React are loaded on the same page\"\"",
                "commitDate": "2015-04-10T20:54:57Z"
            },
            {
                "commitId": "8fa15080b2eafa0ab998f0e3745971af40e13e69",
                "commitMessage": "\"Revert \"Warn when multiple instances of React are loaded on the same page\"\"",
                "commitDate": "2015-04-10T19:34:04Z"
            },
            {
                "commitId": "f1cd867323c420c577f82628ba498637a3d6e5f7",
                "commitMessage": "\"Merge pull request #3580 from robertknight/2402-warn-multiple-copies-of-react-on-same-page\n\nWarn when multiple instances of React are loaded on the same page\"",
                "commitDate": "2015-04-09T02:18:44Z"
            },
            {
                "commitId": "8ad58ae45a4fd3a5def5732fc377f1351950c4dd",
                "commitMessage": "\"Warn when multiple instances of React are loaded on the same page\n\nThis causes a variety of hard-to-debug issues.\nSee #2402 for examples.\n\nFixes #2402\"",
                "commitDate": "2015-04-03T10:46:58Z"
            },
            {
                "commitId": "7fe5a3aadd308961d5557ba1060eaca14a22f825",
                "commitMessage": "\"Merge pull request #3442 from spicyj/kill-initializeTouchEvents\n\nKill React.initializeTouchEvents for good\"",
                "commitDate": "2015-03-19T21:15:26Z"
            },
            {
                "commitId": "26664315a61af6a39441387be8bd5f45c0dbed2a",
                "commitMessage": "\"Merge pull request #3438 from spicyj/lint\n\nLint fixes\"",
                "commitDate": "2015-03-17T21:14:57Z"
            },
            {
                "commitId": "9c4c2f58ea103f84c055d2241c0f178c79d90fd9",
                "commitMessage": "\"Kill React.initializeTouchEvents for good\n\nNow that #1169 is fixed, the only thing this is used for is to determine whether `onTouchTap` causes touch listeners to be added. The only internal uses of TapEventPlugin are where touch events are already initialized (so this doesnt make a difference) and we dont support `onTouchTap` as part of the public API so this should be safe.\"",
                "commitDate": "2015-03-17T21:12:26Z"
            },
            {
                "commitId": "c34fa7f3d22d04a7089fc8930b06be9e73f4b0d5",
                "commitMessage": "\"Lint fixes\"",
                "commitDate": "2015-03-17T20:30:15Z"
            },
            {
                "commitId": "53f92bf8587b64e0803b66b8bf7f337add2e75a3",
                "commitMessage": "\"Fix comma splice and line length\"",
                "commitDate": "2015-03-10T22:36:27Z"
            },
            {
                "commitId": "645a6caaf5606af9d8479000426e9cb94aeada3b",
                "commitMessage": "\"Merge pull request #3323 from jonhester/ie8-compat-mode\n\nwarn if IE8 is in compatibility mode\"",
                "commitDate": "2015-03-10T22:35:09Z"
            },
            {
                "commitId": "e313616be7a6525924e8b822772fa0669e756472",
                "commitMessage": "\"Bump version so we can get back to work\"",
                "commitDate": "2015-03-10T22:06:35Z"
            },
            {
                "commitId": "65c4aeaa3a8fb80be4f6f9f3d978601aad678b9f",
                "commitMessage": "\"use warning module instead of console.debug\"",
                "commitDate": "2015-03-05T18:53:12Z"
            },
            {
                "commitId": "a999ac1ac30bd7ec9db152027fc480ea34652b5d",
                "commitMessage": "\"warn if IE8 is in compatibility mode\"",
                "commitDate": "2015-03-05T13:48:28Z"
            },
            {
                "commitId": "21b41480a531199ff48034c513288765950409d4",
                "commitMessage": "\"v0.13.0-rc2\"",
                "commitDate": "2015-03-03T19:46:01Z"
            },
            {
                "commitId": "ecc4ad569a5730748f00a5cceb118629fa01235b",
                "commitMessage": "\"Merge pull request #3266 from sebmarkbage/cloneelement\n\nAdd cloneElement Implementation\"",
                "commitDate": "2015-03-02T20:15:20Z"
            },
            {
                "commitId": "4adcee69a04058a4858837752e7e8f011bb652f9",
                "commitMessage": "\"Add cloneElement Implementation\n\nThis is a new version of cloneWithProps but this one is moving out of\nadd-ons. Unlike cloneWithProps, this one doesnt have special logic for\nstyle, className and children.\n\nThis one also preserves the original ref. This is critical when upgrading\nfrom a mutative pattern where a child might have a ref on it.\n\nIt also preserves context, which is similar to how context would work when\nit is parent based. It also ensures that were compatible with the old\nmutative pattern which makes updates easier.\"",
                "commitDate": "2015-02-26T09:17:05Z"
            },
            {
                "commitId": "06126ad3f4d063e89b3168abce79c9cd9961831c",
                "commitMessage": "\"v0.13.0-rc1\"",
                "commitDate": "2015-02-22T21:26:13Z"
            },
            {
                "commitId": "5126cee0f521e2e546e37560df2fe3967039a034",
                "commitMessage": "\"v0.13.0-beta.2\"",
                "commitDate": "2015-02-14T02:28:03Z"
            },
            {
                "commitId": "50c38bbc7598f1537c2928d370de78acce6a81c1",
                "commitMessage": "\"Merge pull request #3023 from sebmarkbage/devtoolsfix\n\nExpose ReactReconciler\"",
                "commitDate": "2015-02-03T06:07:28Z"
            },
            {
                "commitId": "e67ff7ee78620448badba2cf8ac3af6ee2893d6f",
                "commitMessage": "\"Expose ReactReconciler\n\nThis can be used by devtools to monkey patch the reconciler and therefore\nget notified whenever any internal instance is updated.\"",
                "commitDate": "2015-02-03T02:15:31Z"
            },
            {
                "commitId": "2aeb8a2a6beb00617a4217f7f8284924fa2ad819",
                "commitMessage": "\"Merge pull request #2995 from rickbeerendonk/copyright-2015\n\nUpdate copyright headers for 2015\"",
                "commitDate": "2015-02-02T19:15:30Z"
            },
            {
                "commitId": "3e0750a4ad2444c2df708b144ff0c8af7628881d",
                "commitMessage": "\"Update copyright headers for 2015\"",
                "commitDate": "2015-01-31T19:18:25Z"
            },
            {
                "commitId": "5bd078508a1beb500b801eb7de9488927a874376",
                "commitMessage": "\"v0.13.0-beta.1\"",
                "commitDate": "2015-01-28T05:13:35Z"
            },
            {
                "commitId": "61c4497d58690b179588d87defa7d9499e3a58f7",
                "commitMessage": "\"Merge pull request #2959 from sebmarkbage/createmixin\n\nWe dont currently have a way to trace the origin of a mixin\"",
                "commitDate": "2015-01-27T18:39:25Z"
            },
            {
                "commitId": "b3f96d97f954188049854ed4599cbd77158c3ae3",
                "commitMessage": "\"Merge pull request #2957 from sebmarkbage/renamecomponent\n\nRename ReactComponentBase -> ReactComponent\"",
                "commitDate": "2015-01-27T18:39:07Z"
            },
            {
                "commitId": "295ef0063b933e13b2ddd541c108b386b35b648b",
                "commitMessage": "\"We dont currently have a way to trace the origin of a mixin\n\nThis makes it more difficult to find bugs in mixins both dynamically\nand using a static type system.\n\nWe also dont have a way to find these to be upgraded to a new mixin\nsyntax if we needed to.\n\nThis hook is currently an optional noop but could be made required to\ncreate a mixin class.\"",
                "commitDate": "2015-01-27T17:36:14Z"
            },
            {
                "commitId": "c3c98084b94a359adbfcf84b88b3c901aade50b9",
                "commitMessage": "\"Rename ReactComponentBase -> ReactComponent\n\nWe freed up this internal name by removing the internal base class.\nWere now free to use this name as it was intended.\n\nReactDOMComponent and ReactCompositeComponent are still confusing as\ntheyre internal but well rename them later.\"",
                "commitDate": "2015-01-27T17:22:07Z"
            },
            {
                "commitId": "1c90efbf7cc982dcecaa2044f18d27df5ae876a1",
                "commitMessage": "\"Merge pull request #2923 from sebmarkbage/dropcomponentmixin\n\nReplace ReactComponentMixin with ReactReconciler\"",
                "commitDate": "2015-01-24T02:06:50Z"
            },
            {
                "commitId": "690409a91239e04a38f3f819f8c5b13a6c60b114",
                "commitMessage": "\"Replace ReactComponentMixin with ReactReconciler\n\nInstead of putting the shared code in a base class method, we use a wrapper\ncall around all invokations. That way theyre free to add code before AND\nafter the non-shared code.\n\nThat way we ensure that component extensions dont need to implement\nReactComponentMixin and do super() calls into it. This helps to create a\ntighter API for custom component extensions.\n\nThis provides the first step towards moving these methods to static\nmethods which allows to use a different dispatch mechanism instead of\nvirtual method calls. E.g. pattern matching.\"",
                "commitDate": "2015-01-24T01:27:42Z"
            },
            {
                "commitId": "8616a6f60e8eeaba9988a4ade56a59cb3c4ea73d",
                "commitMessage": "\"Merge pull request #2919 from sebmarkbage/removecreateref\n\nRemove React.createRef API\"",
                "commitDate": "2015-01-23T03:13:55Z"
            },
            {
                "commitId": "a3a464c8fcd2fc9d04a5765f41f56315c12de44a",
                "commitMessage": "\"Remove React.createRef API\n\nThis API was removed so this wont work.\"",
                "commitDate": "2015-01-23T03:11:11Z"
            },
            {
                "commitId": "deae575dae1295572b9f8694232eab68c2c6a84e",
                "commitMessage": "\"v0.13.0-alpha.2\"",
                "commitDate": "2015-01-16T18:33:42Z"
            },
            {
                "commitId": "54c82da15f6b4717425edbf68e23ae82583a50af",
                "commitMessage": "\"Merge pull request #2751 from zpao/eslint-fixup\n\nEslint fixup\"",
                "commitDate": "2015-01-13T23:27:54Z"
            },
            {
                "commitId": "df64a67b7f930f90423e194637af624cdc155526",
                "commitMessage": "\"codemod \"use strict\" to use strict for better linting\"",
                "commitDate": "2015-01-13T23:26:32Z"
            },
            {
                "commitId": "d138f9a35ba9b639d9ec0cb59b58146f6e657a68",
                "commitMessage": "\"Merge pull request #2805 from sebmarkbage/baseclass1\n\nIntroducing ReactComponentBase base class\"",
                "commitDate": "2015-01-13T19:00:56Z"
            },
            {
                "commitId": "ff032dc8576fec0bf6dbeeaf5d53325c2010d284",
                "commitMessage": "\"Introducing ReactComponentBase base class\n\nThis is the base class that will be used by ES6 classes.\n\nIm only moving setState and forceUpdate to this base class and the other\nfunctions are disabled for modern classes as were intending to deprecate\nthem. The base classes only have getters that warn if accessed. Its as if\nthey didnt exist.\n\nReactClass now extends ReactComponentBase but also adds the deprecated\nmethods. They are not yet fully deprecated on the ReactClass API.\n\nI added some extra tests to composite component which we werent testing\nto avoid regressions.\n\nI also added some test for ES6 classes. These are not testing the new\nstate initialization process. Thats coming in a follow up.\"",
                "commitDate": "2015-01-13T18:54:19Z"
            },
            {
                "commitId": "3fec78638deb5926b25063dc9f3fe8eef5140751",
                "commitMessage": "\"v0.13.0-alpha.1\n\nBumping version numbers so we can push to npm.\"",
                "commitDate": "2014-12-23T20:04:23Z"
            },
            {
                "commitId": "e0725341cf1046d54c186a66c74ee7f986d4f36a",
                "commitMessage": "\"Merge pull request #2646 from jsfb/getDOMNode-becomes-findDOMNode\n\nAdded findDOMNode, as we move toward deprecating getDOMNode\"",
                "commitDate": "2014-12-22T21:05:49Z"
            },
            {
                "commitId": "b46a6ce4bb8d6087ed424764f41fe4b8e248b3b4",
                "commitMessage": "\"Added findDOMNode, as we move toward deprecating getDOMNode\"",
                "commitDate": "2014-12-18T21:55:44Z"
            },
            {
                "commitId": "42ae61d0653fe2a7709c68c818bb0ef1f46b1552",
                "commitMessage": "\"Merge pull request #2655 from zpao/rm-deprecated\n\nRemove deprecated methods since 0.12 shipped\"",
                "commitDate": "2014-12-14T22:33:16Z"
            },
            {
                "commitId": "c46dadea55728a5c782861c15ed4989221c0674e",
                "commitMessage": "\"Remove deprecated methods since 0.12 shipped\"",
                "commitDate": "2014-12-14T22:19:44Z"
            },
            {
                "commitId": "ba95ce7b6f366c60afdefa7d2cc0f508a443d702",
                "commitMessage": "\"Merge pull request #2677 from zpao/lint-internal\n\nFix new lint errors\"",
                "commitDate": "2014-12-08T20:22:06Z"
            },
            {
                "commitId": "739baa90927d06e7e2267c65b1221931a20784a4",
                "commitMessage": "\"Fix new lint errors\n\nWell get to lint parity soon and then not need to do this.\"",
                "commitDate": "2014-12-08T20:18:41Z"
            },
            {
                "commitId": "230115da9210f389e60f7eb0e402de1a06b5f269",
                "commitMessage": "\"Make ReactTextComponent properly injectable\n\nReactTextComponents implementation is DOM-specific; instead of flattenChildren creating the ReactTextComponent instances, ReactNativeComponent now takes care of having ReactTextComponent injected and creating the component instance. I also renamed ReactTextComponent to ReactDOMTextComponent and moved it to browser/ui/ where it belongs. ReactDOMTextComponent no longer inherits directly from ReactComponent and instead implements construct and {mount,receive,unmount}Component directly.\n\nThis diff removes `ReactTestUtils.isTextComponent` which should have previously never returned true when using public APIs.\n\nTest Plan: jest, use ballmer-peak example.\"",
                "commitDate": "2014-11-15T20:30:42Z"
            },
            {
                "commitId": "9edc6260a7db25f888259fddedb4aa2250f6385f",
                "commitMessage": "\"Initial implementation of new-style refs\n\ncf. #1373\n\nThis implementation can be used in any situation that refs can currently be used (and can also be used without an owner, which is a plus).\"",
                "commitDate": "2014-11-06T03:28:12Z"
            },
            {
                "commitId": "b5bcaba77fbe53cafd7c5f6b76752b09791caadf",
                "commitMessage": "\"Merge branch master into docs-namespace-in-jsx\n\n* master: (113 commits)\n  Remove esprima-fb and use Syntax from jstransform\n  Update React.renderToString argument type in docs\n  [traverseAllChildren] fix out-of-scope var use.\n  Use double quote for transformed `displayName` and `data-*`\n  Remove unrelated comment\n  Fix typo in If/Else JSX doc.\n  Cleanup a couple unused variables\n  Use dump cache and remove factory from ReactElement-test\n  Update deprecated propTypes\n  Bring in jsfiddle integration script, add harmony\n  Extending period in which click events are ignored\n  React.renderComponent --> React.render\n  Followup fix for React.PropTypes.node\n  Add comma for readability in tutorial\n  Drop internal uses of .type on the class\n  Drop Legacy Factories Around Classes\n  Drop ReactDOM from internal DOM extensions\n  Added comma to increase readability.\n  Add 0.12 starter kit\n  Change the date and the link url to match the proper roundup\n  ...\n\nConflicts:\n\tdocs/docs/02.1-jsx-in-depth.md\"",
                "commitDate": "2014-11-05T14:30:37Z"
            },
            {
                "commitId": "a54ed49eb05200dcdc2f27ba9437d17e37571547",
                "commitMessage": "\"Merge pull request #2375 from sebmarkbage/droplegacyfactories\n\nDrop Legacy Factories\"",
                "commitDate": "2014-10-29T01:00:32Z"
            },
            {
                "commitId": "199a7d6903ed2e7c28fb32c6a28ed7f26148e13d",
                "commitMessage": "\"Drop Legacy Factories Around Classes\n\nClasses are now pure classes without a legacy factory around them.\n\nSince classes will become just any function that returns a valid instance,\nlets drop isValidClass.\n\nTheres some hacks in here for auto-mocking frameworks (jest) that mock the\nprototype of these classes. These hacks allow these classes to be mounted.\"",
                "commitDate": "2014-10-28T22:08:52Z"
            },
            {
                "commitId": "b7cd3e7d1de31108594a6698215bfa7bf8619b34",
                "commitMessage": "\"Merge pull request #2396 from sebmarkbage/classmodule\n\nMove Class Creation Concerns into a ReactClass Module\"",
                "commitDate": "2014-10-23T19:50:17Z"
            },
            {
                "commitId": "994fc7d8a727dc7b477322a5c3d4216f1215f639",
                "commitMessage": "\"Merge remote-tracking branch upstream/master into fix-gruntfile\"",
                "commitDate": "2014-10-23T07:55:43Z"
            },
            {
                "commitId": "c7bb936566bce79b35f55b558af5f09b88047a9a",
                "commitMessage": "\"Introduce React Class as an alias for Composite Component\n\nThis is in preparation for the separation of Composite Component internals\nfrom the Class abstraction.\"",
                "commitDate": "2014-10-23T01:35:10Z"
            },
            {
                "commitId": "b78fe39b6073bab20eb7785aa9ef508aabf03c3f",
                "commitMessage": "\"Bump version to 0.13.0-alpha\"",
                "commitDate": "2014-10-22T21:19:54Z"
            },
            {
                "commitId": "2bdad81955e160a5b11110b40c7222a1113cc1fb",
                "commitMessage": "\"Merge pull request #2384 from sebmarkbage/deprecateisvalidclass\n\nDeprecate isValidClass\"",
                "commitDate": "2014-10-21T00:17:56Z"
            },
            {
                "commitId": "ef971014bc22bf4cfecb31ce35de38c231c1c41d",
                "commitMessage": "\"Deprecate isValidClass\n\nFixes #2374\"",
                "commitDate": "2014-10-20T06:55:57Z"
            },
            {
                "commitId": "2b4e35870b7a0c4d681bc3c86641790dd828f0a0",
                "commitMessage": "\"v0.12.0-rc1\"",
                "commitDate": "2014-10-16T21:56:50Z"
            },
            {
                "commitId": "828efb798a94a631007efe966828fbc5b01613ea",
                "commitMessage": "\"Merge pull request #2350 from sebmarkbage/assign\n\nHide Object.assign polyfill behind a module\"",
                "commitDate": "2014-10-16T16:29:01Z"
            },
            {
                "commitId": "8210beeef4219d11b0a997f5a5abe7c348c01448",
                "commitMessage": "\"Hide Object.assign polyfill behind a module\n\nBecause the JS communitys polyfilling infrastructure sucks and well\nhave to fix it for them before we require this.\n\nJSX spread uses React.__spread\n(which might get special behavior for key/ref, not sure yet)\n\nThis never uses the native implementation and throws for prototype chains.\nOnce the native implementations are faster, well start using them.\"",
                "commitDate": "2014-10-16T16:21:10Z"
            },
            {
                "commitId": "3991d4de6be63ea0dac5d2b9ccd6a9c4069b439b",
                "commitMessage": "\"Merge pull request #2337 from sebmarkbage/devtoolshook\n\nInject the runtime to a global instead of exposing internals\"",
                "commitDate": "2014-10-13T19:30:15Z"
            },
            {
                "commitId": "ce19af9d304bb0b2c9b3fabf6b999c45be5b7b72",
                "commitMessage": "\"Inject the runtime to a global instead of exposing internals\n\nSee https://github.com/facebook/react-devtools/commit/673de20a4a0654ab849575307b9cf87fde53439e\"",
                "commitDate": "2014-10-13T18:59:23Z"
            },
            {
                "commitId": "5d3b12bb3bd6a092cf00ede07b8255a8399c2e58",
                "commitMessage": "\"Merge pull request #2312 from zpao/license-update\n\nUpdate Licenses\"",
                "commitDate": "2014-10-10T23:58:45Z"
            },
            {
                "commitId": "dcf415c2b91ce52fd5d4dd02b70875ba9d33290f",
                "commitMessage": "\"BSD + PATENTS\"",
                "commitDate": "2014-10-10T20:34:07Z"
            },
            {
                "commitId": "5d127eaa4935486a9fa15830b9224b806921f56d",
                "commitMessage": "\"Merge pull request #2316 from zpao/devtoolsmarker\n\nLook for devtools global hook\"",
                "commitDate": "2014-10-10T00:00:06Z"
            },
            {
                "commitId": "540731b7a8cbae5835edf69f26361993691d6c00",
                "commitMessage": "\"Merge pull request #2002 from zpao/rename-renderComponent\n\nReact.renderComponent -> React.render\"",
                "commitDate": "2014-10-09T23:41:37Z"
            },
            {
                "commitId": "9b1fa914fafca23b201d5bf4d7ca6ffa1dff6cc4",
                "commitMessage": "\"React.renderComponent -> React.render\n\nAlso rename all the associated render methods and adds deprecation\nnotices.\"",
                "commitDate": "2014-10-09T23:41:03Z"
            },
            {
                "commitId": "6ddf8de5aee5ea58a4f1b806c6c768d53cf5e2b4",
                "commitMessage": "\"Look for devtools global hook\n\nIt doesnt exist yet, but it could.\n\nThis also ensures we actually do our polyfill checks in *all* browsers,\nnot just Chrome.\"",
                "commitDate": "2014-10-09T18:24:48Z"
            },
            {
                "commitId": "f48954d8a39097109d599db365af28df417544cb",
                "commitMessage": "\"Merge pull request #2300 from sebmarkbage/descriptorstoelements\n\nRenamed Descriptor -> Element\"",
                "commitDate": "2014-10-07T20:44:44Z"
            },
            {
                "commitId": "8f1657bba618846b7a111a2caee855bf59145c5a",
                "commitMessage": "\"Renamed Descriptor -> Element\n\nWeve decided on a new naming convention for ReactDescriptor. Its now\ncalled ReactElement, which is a subset of the ReactNode union type.\"",
                "commitDate": "2014-10-07T20:41:51Z"
            },
            {
                "commitId": "7f9b1d18d197d102777f214e782ecc27685cf481",
                "commitMessage": "\"Start warning when React.DOM.x is passed into JSX\n\nReact.DOM is becoming helper factories to generate ReactElements. Theyre not\nclasses. It will be ok to call them directly as functions, but not to use them\nwhere a class is expected.\"",
                "commitDate": "2014-10-07T17:49:18Z"
            },
            {
                "commitId": "c901b1005e7c946584487bb8b0bf7b60a773645b",
                "commitMessage": "\"Make createDescriptor return a descriptor for components\n\nThis moves all logic around legacy descriptors to ReactLegacyDescriptor. This\nis responsible for the layer that knows that createClass exports a legacy\nfactory. When passed one of these classes, it unwraps it to be a real class.\n\nIf it is passed a non legacy factory, it is assumed to be a non-react component\nthat needs to be invoked as a plain function.\n\nThe semantic change is that a descriptor is now always returned if passed a\nlegacy factory. Even if that factory is a mock. A mock would previously return\nundefined.\n\nFor mocks, I treat the factory as the authoritative function. I call it to extract\nthe instance or fill it with an empty component placeholder.\n\nAdditionally, I make the classes take props as the first argument to the\nconstructor. This is what the new class system will do.\n\nWe currently need to set up some internals by calling the internal construct\nmethod. Instead of doing that automatically in the constructor, I now move that\nto a second pass so that mocks can get the plain props.\n\nThis means that we can assert that a mock has been called once its mounted\nwith its final props. Instead of the descriptor factory being called.\"",
                "commitDate": "2014-08-20T07:14:32Z"
            },
            {
                "commitId": "5b4e2be867ebf216e7acd0cfecda026d9dd3499d",
                "commitMessage": "\"Iterate over expectedFeatures correctly\n\nThis fails if Array.prototype is extended.\"",
                "commitDate": "2014-08-19T01:18:05Z"
            },
            {
                "commitId": "eb3ea3f2dfed33751ce95666370b30a7b9d8bc9f",
                "commitMessage": "\"Move batchedUpdated to React.addons\n\nThis is a followup to #1060, where I did not read closely enough before\nmerging.\"",
                "commitDate": "2014-08-13T22:40:40Z"
            },
            {
                "commitId": "938bcbecd5874d6d33f11e52e5c9a71dbcd44c8b",
                "commitMessage": "\"Merge pull request #1060 from spicyj/gh-906\n\nAdd React.batchedUpdates to public API\"",
                "commitDate": "2014-08-13T22:37:43Z"
            },
            {
                "commitId": "036d751397140e1eae01ea6ce6ebe86f0482f485",
                "commitMessage": "\"Add createElement alias for createDescriptor\"",
                "commitDate": "2014-08-06T23:41:47Z"
            },
            {
                "commitId": "2d250d44a5909d9e9d6a0e6fef541cf6fdf6e0ae",
                "commitMessage": "\"Merge pull request #1993 from spicyj/devtools-warning-2\n\nSlightly more considerate devtools warning\"",
                "commitDate": "2014-08-04T21:25:16Z"
            },
            {
                "commitId": "30452914174c7fda400746e8795b73f8ba4269bf",
                "commitMessage": "\"Slightly more considerate devtools warning\n\nSee #953.\"",
                "commitDate": "2014-08-04T18:16:51Z"
            },
            {
                "commitId": "c6b2687bbda0c9d828be51d3d4908adb89d52a09",
                "commitMessage": "\"Partially revert React.createDescriptor\n\nWe still have some issues to work out when the type argument is a mock.\"",
                "commitDate": "2014-07-25T23:48:10Z"
            },
            {
                "commitId": "04e341936cff902f399ca59bd6b855b2d994470e",
                "commitMessage": "\"Include Object.assign polyfill\n\nThis isnt a good final solution but it makes React actually usable on\nits own.\n\nThis also makes tests runnable, though only via jest\n(./node_modules/.bin/jest)\"",
                "commitDate": "2014-07-21T23:18:12Z"
            },
            {
                "commitId": "5aab0bddaa9dd2684049194a2488d57517d89cae",
                "commitMessage": "\"Move key/ref off props and prepare for new descriptor factories\n\nBreaking changes\n\n- key/ref are no longer accessible on props but they are accessible on the\n  descriptors. This means that parents/owners can access it but not the\n  component itself.\n\n- Descriptor factories are now plain functions and you cant rely on the\n  prototype or constructors of descriptors to identify the component type.\n\nExisting descriptor factories are now wrapped in a legacy factory. Currently it\ndoes nothing but it will give us a hook to track callers to factories that are\nnot using JSX but just invoking the function directly. It also proxies static\nmethods/properties to the underlying class. The newer factories dont have this\nfeature.\n\nReactTextComponent has its own little factory because its props is not an\nobject. This is a detail and will go away once ReactTextComponent no longer\nneeds descriptors.\"",
                "commitDate": "2014-07-19T05:01:36Z"
            },
            {
                "commitId": "5bfee601ce6709a56e025e84634fcc5da0b36a44",
                "commitMessage": "\"Bump version for 0.12.0-alpha\n\n[skip ci]\"",
                "commitDate": "2014-07-17T21:22:50Z"
            },
            {
                "commitId": "97dbada03d58bef9bce6941ca49207e28b6b75ac",
                "commitMessage": "\"Up-to-date React.Children\n\nMake sure we actually include `.count`\"",
                "commitDate": "2014-07-14T22:01:44Z"
            },
            {
                "commitId": "0f9cec2e78c09e81dc3dac764788589a07903411",
                "commitMessage": "\"0.11.0-rc1\"",
                "commitDate": "2014-07-13T02:50:45Z"
            },
            {
                "commitId": "2b0e51bdbaa0f0e589c8a24e358a7739e70f38dc",
                "commitMessage": "\"Add String.prototype.trim to polyfill check\n\nAlso shortens the URL so it fits on 1 line\"",
                "commitDate": "2014-07-11T17:36:38Z"
            },
            {
                "commitId": "ef6740627292136973a6b8053cc98dba98ebd18f",
                "commitMessage": "\"Add simple React.createDescriptor hook\n\nThis is the minimal runtime change we need to switch the JSX syntax to resolve\nto React.createDescriptor(...)\"",
                "commitDate": "2014-06-26T22:42:18Z"
            },
            {
                "commitId": "e4f80f301ddc56370c5c7dfb2be483431bfa7d20",
                "commitMessage": "\"Merge pull request #1516 from syranide/es5err\n\nPreemptively error when required ES5 shim/shams are not available\"",
                "commitDate": "2014-05-12T20:40:00Z"
            },
            {
                "commitId": "659b7981e14c7eb36cf2638a95a3a16f080b8cca",
                "commitMessage": "\"Preemptively error when required ES5 shim/shams are not available\"",
                "commitDate": "2014-05-11T19:20:07Z"
            },
            {
                "commitId": "7fb7e951082c40b3183cc2a6ab483a8b6b579690",
                "commitMessage": "\"Add React.batchedUpdates to public API\n\nFixes #906.\"",
                "commitDate": "2014-04-16T22:59:54Z"
            },
            {
                "commitId": "468007612f4a6dabb228618d9a3274f067fc2c51",
                "commitMessage": "\"Merge branch master of github.com:facebook/react\"",
                "commitDate": "2014-03-30T19:53:26Z"
            },
            {
                "commitId": "c40e06f7281622a7a6295f4a7d5540a75fedf7bb",
                "commitMessage": "\"First phase to true descriptors\n\nThis moves all convenience constructors to use frozen ReactDescriptors.\"",
                "commitDate": "2014-03-28T19:32:53Z"
            },
            {
                "commitId": "f0eae5086b0062bdf8f8e466803e061814486634",
                "commitMessage": "\"version bump for 0.11 development\"",
                "commitDate": "2014-03-21T21:58:52Z"
            },
            {
                "commitId": "7f24943e5af5ee4b14ec002d45df315af94adb75",
                "commitMessage": "\"update version for 0.10rc\"",
                "commitDate": "2014-03-19T05:09:32Z"
            },
            {
                "commitId": "a8fc3b940dbe20c0c7decd19b028215b236c50a6",
                "commitMessage": "\"Move UI-thread-only browser modules to browser/ui/\n\nThis also deletes an unused module.\"",
                "commitDate": "2014-03-03T23:07:11Z"
            },
            {
                "commitId": "99dab49f92fe0785c1643ede5b0e7a90cbe1e1e0",
                "commitMessage": "\"Refactor rendering to string without checksum & React ID\n\nFinalize API for rendering to static markup.\nInstead of passing a boolean option to `renderComponentToString`, just use another method.\"",
                "commitDate": "2014-03-03T23:06:27Z"
            },
            {
                "commitId": "95edc396dfd07ed064240b5e2e1a1d5528d2d747",
                "commitMessage": "\"version bump to 0.10.0-alpha\"",
                "commitDate": "2014-02-20T06:53:29Z"
            },
            {
                "commitId": "8a47813baabcb200f5e0a496dd959cb0ef3adcf3",
                "commitMessage": "\"Update copyrights for 2014.\n\ngrep -rl Copyright 2013 Facebook static_upstream | xargs perl -pi -w -e s/Copyright 2013 Facebook/Copyright 2013-2014 Facebook/g;\n\nNot going to check in a script to do this since it will just change every year.\nCloses #1006\"",
                "commitDate": "2014-02-19T01:06:43Z"
            },
            {
                "commitId": "9125f68194cf99e55e027b6cc7ed34325c9855e4",
                "commitMessage": "\"0.9.0-rc1\"",
                "commitDate": "2014-02-17T01:38:52Z"
            },
            {
                "commitId": "b9cd2f0d3d83ee9652b230fecc4bc2dfe8e110f8",
                "commitMessage": "\"Merge branch reorg\"",
                "commitDate": "2014-02-05T03:51:55Z"
            },
            {
                "commitId": "1a39c3143cf5831e4a7f4d2f1a7dc32b33b41299",
                "commitMessage": "\"The great reorg of February 2014\"",
                "commitDate": "2014-02-05T03:49:58Z"
            },
            {
                "commitId": "945f788a4127c3428a5e3cf65fb6d1014c2e98a1",
                "commitMessage": "\"React.Children helpers\n\nAdds React.Children and map(), forEach() and only().\"",
                "commitDate": "2014-02-04T22:37:44Z"
            },
            {
                "commitId": "2c335b0e570e360d52359e7f774e5311f74d863b",
                "commitMessage": "\"Quieter devtools upsell\n\nCheck that were not in a iframe before upselling.\"",
                "commitDate": "2014-01-11T05:11:33Z"
            },
            {
                "commitId": "d8a8f6a88109e1ccdee02236909cbab101222185",
                "commitMessage": "\"Upsell dev tools\n\nPeople probably dont know these exist. Add some information about React\ndev mode as well as a link to the developer tools when using Chrome.\"",
                "commitDate": "2014-01-11T05:10:54Z"
            },
            {
                "commitId": "80d7d2d0f8ec0f4f1f3c2dbe613f36bda572ce11",
                "commitMessage": "\"Listen to events on demand\n\nFixes #381\n\nThis is a squashed version of https://github.com/facebook/react/pull/462\"",
                "commitDate": "2014-01-04T07:09:59Z"
            },
            {
                "commitId": "3431e3f847b148bd1aa527f375337c86b1029c58",
                "commitMessage": "\"Add `createMarkupForID`\n\nThis is a follow-up the to previous commit and does two things:\n\n - Moves `ReactMount.ATTR_NAME` to `DOMProperty.ID_ATTRIBUTE_NAME`.\n - Adds `DOMPropertyOperations.createMarkupForID` and uses it.\"",
                "commitDate": "2013-12-21T02:12:48Z"
            },
            {
                "commitId": "153b75f186a78c876cc11678d1abbdf5e13a3b5b",
                "commitMessage": "\"Bump version to 0.9.0-alpha\n\nThis is trunk, which will be 0.9. Well have to cherry-pick this whole\nthing into a 0.8 branch.\"",
                "commitDate": "2013-12-06T23:11:25Z"
            },
            {
                "commitId": "ef339c9cc44522ae39cb04bf9a102ac9261ecb45",
                "commitMessage": "\"Version bump, make tests work\"",
                "commitDate": "2013-12-06T19:56:30Z"
            },
            {
                "commitId": "1b8bdbe177f2f03c66e9288149316695fc004b41",
                "commitMessage": "\"Remove deprecated React.unmountAndReleaseReactRootNode\"",
                "commitDate": "2013-12-05T04:27:15Z"
            },
            {
                "commitId": "b91396be8eac3dc57ab1dbd2d3bb27c791d88169",
                "commitMessage": "\"Contexts\n\nSummary:\nadds `this.context` which you can think of as implicit props, which are passed automatically down the //ownership// hierarchy.\n\nContexts should be used sparingly, since they essentially allow components to communicate with descendants (in the ownership sense, not parenthood sense), which is not usually a good idea. You probably would only use contexts in places where youd normally use a global, but contexts allow you to override them for certain view subtrees which you cant do with globals.\n\nThe context starts out `null`:\n\n  var RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n    }\n  });\n\nYou should **never** mutate the context directly, just like props and state.\n\nYou can change the context of your children (the ones you own, not `this.props.children` or via other props) using the new `withContext` method on `React`:\n\n  var RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n      var children = React.withContext({foo: a, bar: b}, () => (\n        // In ChildComponent#render, this.context === {foo: a, bar: b}\n        <ChildComponent />\n      ));\n      // this.context === null\n    }\n  });\n\nContexts are merged, so a component can override its owners context **for its children**:\n\n  var ChildComponent = React.createClass({\n    render: function() {\n      // this.context === {foo: a, bar: b} (for the caller above)\n      var children = React.withContext({foo: c},() => (\n        // In GrandchildComponent#render,\n        // this.context === {foo: c, bar: b}\n        <GrandchildComponent />\n      ));\n      // this.context === {foo: a, bar: b}\n    }\n  });\"",
                "commitDate": "2013-11-18T18:56:24Z"
            },
            {
                "commitId": "48281a17e4f460020fa7b9c6dc8169a1b867327c",
                "commitMessage": "\"bump version to 0.6.0-alpha\"",
                "commitDate": "2013-10-16T05:39:28Z"
            },
            {
                "commitId": "fdb10c067999c81516cf6ac65262adb5ab59d3cf",
                "commitMessage": "\"React.__internals\n\nWe need access to internal modules in order to provide a single way for some\nprojects to work internally with @providesModule and externally.\"",
                "commitDate": "2013-10-07T22:07:20Z"
            },
            {
                "commitId": "832d9de0374496a3a99a0df7cf100305f1a24158",
                "commitMessage": "\"Rename unmountAndReleaseReactRootNode() -> unmountComponentAtNode()\n\nThis is just a better name; we may revisit the name later.\"",
                "commitDate": "2013-09-19T21:46:49Z"
            },
            {
                "commitId": "5ab68d9a0ddbb6c6c96895b75207d6ad57dc55b4",
                "commitMessage": "\"Hard code version instead of doing constant replacement\n\nThis isnt really ideal, but it makes it so that people managing to\nbuild with @providesModule still get a consistent experience (since this\nis what gets packed client-side with react-page-middleware anyway).\"",
                "commitDate": "2013-09-11T16:51:43Z"
            },
            {
                "commitId": "d853bbcf77a0c81734300dafb77f2afeb25f0ed5",
                "commitMessage": "\"Merge pull request #205 from spicyj/version\n\nAdd React.version\"",
                "commitDate": "2013-09-11T01:35:12Z"
            },
            {
                "commitId": "5fd4467bf76b89b76df8bf909922f92e4fd07f7c",
                "commitMessage": "\"Add React.version\n\ngetConfig needs to be a function because grunt.config.data.pkg.version isnt available at the time that grunt/config/jsx/jsx.js is required.\n\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.\"",
                "commitDate": "2013-09-10T00:01:06Z"
            },
            {
                "commitId": "3cf14e8f9b14ac05bcd24634daa26ac6772bd31b",
                "commitMessage": "\"Remove ReactChildren methods from React object\n\nThese are not terribly useful on this object and the naming of\n`React.forEachChildren` sucked anyway.\"",
                "commitDate": "2013-09-06T01:35:59Z"
            },
            {
                "commitId": "a42fd30fc2795909324c497350d0877a969b0cc7",
                "commitMessage": "\"Remove React.autoBind for real\n\nThis has been deprecated for a long while now, we should actually remove it.\"",
                "commitDate": "2013-09-03T21:27:00Z"
            },
            {
                "commitId": "4d8f0449d9d08528cc1aaba0aa09d1d90e12d3dd",
                "commitMessage": "\"React.isValidClass\n\nSometimes you may need to detect if a value is a valid React class constructor. This enables that and prevents future consumers from getting caught in the trap of depending on an internal implementation detail we might change.\n\nCurrently this works for classes created with `React.createClass` as well as `React.DOM.*`.\"",
                "commitDate": "2013-08-30T20:20:51Z"
            },
            {
                "commitId": "fce57abeca1d8388baaaac8511540aed486177dc",
                "commitMessage": "\"Benchmarking tool for React application performance\n\nReactAppPerf wraps core methods and logs info from them; theres no real\nUI at this point\"",
                "commitDate": "2013-08-23T21:05:11Z"
            },
            {
                "commitId": "9ef4e74ba2b3a494757b39b41b1ef99280bc5f83",
                "commitMessage": "\"ReactChildren\n\nInstead of changing `traverseAllChildren`, keep that around for perf\nreasons (for the hot code path `flattenChildren`)\n\nIntroduce `ReactChildren.map` and `ReactChildren.forEach`\nwhich mirrors `Array.prototype.map` and `Array.prototype.forEach`. This\ninvolves a rename of `mapAllChildren`\"",
                "commitDate": "2013-08-06T21:17:33Z"
            },
            {
                "commitId": "c629a0c5ad1adc82e01a982e7116eae632fa8d65",
                "commitMessage": "\"Revert \"Merge pull request #200 from spicyj/version\"\n\nThis reverts commit d8893228275cacc65a8632c7416bb023ab4c946f, reversing\nchanges made to 156dffb961ab15f577e0a6aab1abc5efd68f9a9b.\"",
                "commitDate": "2013-07-17T15:26:59Z"
            },
            {
                "commitId": "d8893228275cacc65a8632c7416bb023ab4c946f",
                "commitMessage": "\"Merge pull request #200 from spicyj/version\n\nAdd React.version\"",
                "commitDate": "2013-07-17T13:13:49Z"
            },
            {
                "commitId": "7be14d81552e8097eee6ed21a048fa23d4fce596",
                "commitMessage": "\"Add React.version\n\ngetConfig needs to be a function because grunt.config.data.pkg.version isnt available at the time that grunt/config/jsx/jsx.js is required.\n\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.\"",
                "commitDate": "2013-07-17T03:38:40Z"
            },
            {
                "commitId": "d76262731237365198ddd84216d108da96820055",
                "commitMessage": "\"Rename `props` to `propTypes`\n\nThis does two things:\n\n - Rename `props` to `propTypes`.\n - Rename `ReactProps` to `ReactPropTypes` (and `React.Props` to `React.PropTypes`)\"",
                "commitDate": "2013-07-10T22:06:18Z"
            },
            {
                "commitId": "0e9ee239a9c7b085771429ba990ae63aacde64ca",
                "commitMessage": "\"Merge branch master into async-state\"",
                "commitDate": "2013-07-01T23:08:57Z"
            },
            {
                "commitId": "ee21a604f31020fbaa898a4d0d61dc487198ce82",
                "commitMessage": "\"Delete files that accidentally got merged in\n\n\u0ca0_\u0ca0\"",
                "commitDate": "2013-06-28T21:54:07Z"
            },
            {
                "commitId": "43358157cff16e8945da9b816fcb858a59da81af",
                "commitMessage": "\"Merge branch textarea-update-value of git://github.com/spicyj/react\n\nConflicts:\n\tsrc/core/ReactDefaultInjection.js\"",
                "commitDate": "2013-06-28T21:30:47Z"
            },
            {
                "commitId": "44d6b947520aa3c3b252cbba1c95aa25811665d7",
                "commitMessage": "\"Merge remote-tracking branch origin/master into textarea-update-value\"",
                "commitDate": "2013-06-19T06:31:08Z"
            },
            {
                "commitId": "c1576fcf9744882fa59c2876fb4fd44720140307",
                "commitMessage": "\"Remove trailing whitespace\"",
                "commitDate": "2013-06-17T19:48:43Z"
            },
            {
                "commitId": "80edd6ca8729512c384faa593fef6d62b6b8c087",
                "commitMessage": "\"Merge pull request #89 from vjeux/patch-4\n\nExposing ReactProps as React.Props\"",
                "commitDate": "2013-06-14T04:08:10Z"
            },
            {
                "commitId": "34173638d40dff2cd2dbac66f04623b3b1f0516f",
                "commitMessage": "\"Exposing ReactProps as React.Props\n\nRight now, even though ReactProps is committed, there is no way to use it as it is not exposed.\"",
                "commitDate": "2013-06-13T00:28:25Z"
            },
            {
                "commitId": "37cde3d864406f2af65dc03eae45a216ea969600",
                "commitMessage": "\"Stabilize minimal server rendering API\n\nThis is a pretty killer feature and the API is simple. I know its another API method on React, but I think its\nthe only way.\"",
                "commitDate": "2013-06-10T23:17:26Z"
            },
            {
                "commitId": "582359aeea9b7c437cfc12b8e4f3366aaacf11a1",
                "commitMessage": "\"Remove React.createComponentRenderer\n\nRemove ReactMount.createComponentRenderer because it does not function\ncorrectly.\n\n  var f = React.createComponentRenderer(<div />);\n\n  var container1 = document.createElement(div);\n  var container2 = document.createElement(div);\n  f(container1);\n  f(container2); // error because mounting same instance into new root\"",
                "commitDate": "2013-06-08T05:10:06Z"
            },
            {
                "commitId": "75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4",
                "commitMessage": "\"Initial public release\"",
                "commitDate": "2013-05-29T19:54:02Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "Determine the developers that had the most unfixed bugs?",
        "number": 7,
        "category": 2,
        "response": "The developer with the most unfixed bugs is \"bvaughn,\" with a total of 1 unfixed bug.",
        "chain_of_thought": "To determine the developers that had the most unfixed bugs, we need to interpret the question. An unfixed bug can be considered as an issue that has been introduced by a commit but not yet fixed by another commit. Therefore, we need to find users who have authored commits that introduced issues which are still open.\n\nHere's how we can construct the query:\n\n1. Identify the relevant nodes and relationships:\n   - We need the `User`, `Commit`, and `Issue` nodes.\n   - The `author` relationship connects `User` to `Commit`.\n   - The `introduced` relationship connects `Commit` to `Issue`.\n   - We need to filter issues that are still open, which can be determined by the `state` property of the `Issue` node.\n\n2. Construct the query:\n   - Match users who have authored commits that introduced issues.\n   - Filter for issues that are still open (`state = 'open'`).\n   - Count the number of open issues introduced by each user.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n```\n\nThis query will return a list of developers along with the count of unfixed bugs they have introduced, sorted in descending order by the number of unfixed bugs.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n",
        "result": [
            {
                "developer": "bvaughn",
                "unfixed_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 1,
        "label": "partial"
    },
    {
        "question": "which developer has most number of bugs yet to be fixed?",
        "number": 8,
        "category": 2,
        "response": "The developer with the most number of bugs yet to be fixed is 'bvaughn', with 19 open issues.",
        "chain_of_thought": "To determine which developer has the most number of bugs yet to be fixed, we need to identify the issues that are still open and find the user who is responsible for these issues. The schema provides us with the necessary relationships and properties to achieve this.\n\nFirst, let's break down the question:\n\n1. **Identify open issues**: We need to find issues that are not yet closed. This can be determined by checking the `state` property of the `Issue` node, which should be \"open\".\n\n2. **Find the developer responsible for these issues**: The developer responsible for an issue can be interpreted as the user who is assigned to the issue. This is represented by the `assigned` relationship between `User` and `Issue`.\n\nGiven these points, the query should:\n\n- Match `User` nodes that are assigned to `Issue` nodes with a state of \"open\".\n- Count the number of open issues assigned to each user.\n- Return the user with the highest count of open issues.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (u:User)-[:assigned]->(i:Issue {state: 'open'})\nRETURN u.login AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n```\n\nThis query will return the developer with the most number of open issues, indicating the developer with the most bugs yet to be fixed.",
        "query": "cypher\nMATCH (u:User)-[:assigned]->(i:Issue {state: 'open'})\nRETURN u.login AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "bvaughn",
                "open_issues": 19
            }
        ],
        "isAmbiguous": true,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "Determine the developers that fixed the most bugs in ReactDOMInput.js?",
        "number": 9,
        "category": 3,
        "response": "The developers who fixed the most bugs in ReactDOMInput.js are Sophie Alpert and Hemakshi Sachdev, each having fixed 1 bug.",
        "chain_of_thought": "To determine the developers who fixed the most bugs in the file `ReactDOMInput.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We are interested in the `User`, `Commit`, `Issue`, and `File` nodes.\n   - The `User` node is connected to the `Commit` node via the `author` relationship.\n   - The `Commit` node is connected to the `Issue` node via the `fixed` relationship, indicating that the commit fixed a bug.\n   - The `Issue` node is connected to the `File` node via the `impacted` relationship, indicating that the file was impacted by the issue.\n\n2. **Filter for the specific file**: \n   - We need to filter the `File` node to find the specific file `ReactDOMInput.js`.\n\n3. **Aggregate the number of bugs fixed by each developer**:\n   - Count the number of issues fixed by each developer for the specified file.\n\nThe Cypher query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'ReactDOMInput.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n```\n\nThis query will return a list of developers and the number of bugs they have fixed in the file `ReactDOMInput.js`, sorted in descending order by the number of bugs fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'ReactDOMInput.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n",
        "result": [
            {
                "developer": "Sophie Alpert",
                "bugs_fixed": 1
            },
            {
                "developer": "Hemakshi Sachdev",
                "bugs_fixed": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "who did most fixed bugs in TapEventPlugin.js?",
        "number": 10,
        "category": 3,
        "response": "The developer who fixed the most bugs in TapEventPlugin.js is Sophie Alpert, with 1 bug fixed.",
        "chain_of_thought": "To determine who fixed the most bugs in the file \"TapEventPlugin.js\", we need to follow these steps:\n\n1. Identify the relevant nodes and relationships. We are interested in the User, Commit, and File nodes. The relationships of interest are:\n   - `author` between User and Commit to find out who authored the commits.\n   - `changed` between Commit and File to identify the file modifications.\n   - `fixed` between Commit and Issue to determine which commits fixed bugs.\n\n2. Filter the File node to find the specific file \"TapEventPlugin.js\".\n\n3. Count the number of times each user has fixed bugs in this file.\n\nThe query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:changed]->(f:File {name: 'TapEventPlugin.js'})\nMATCH (c)-[:fixed]->(i:Issue)\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n```\n\nThis query will return the user who has fixed the most bugs in the file \"TapEventPlugin.js\".",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:changed]->(f:File {name: 'TapEventPlugin.js'})\nMATCH (c)-[:fixed]->(i:Issue)\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "Sophie Alpert",
                "fixed_bugs": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "Determine the files that introduce the most bugs?",
        "number": 11,
        "category": 2,
        "response": "The file that introduces the most bugs is 'ReactDOMInput-test.js', with a total of 3 bugs.",
        "chain_of_thought": "To determine the files that introduce the most bugs, we need to identify the files that are associated with the most issues introduced by commits. The schema provides a relationship between Commit and Issue through the introduced relationship, and between Issue and File through the impacted relationship. Therefore, we need to traverse from File to Issue and then to Commit to count how many times each file is associated with an introduced issue.\n\nHere's the step-by-step breakdown of the query:\n\n1. Identify the relevant nodes and relationships:\n   - File nodes are connected to Issue nodes via the impacted relationship.\n   - Issue nodes are connected to Commit nodes via the introduced relationship.\n\n2. Count the number of times each file is associated with an introduced issue.\n\n3. Sort the files by the number of introduced issues in descending order to find the files that introduce the most bugs.\n\n4. Limit the results to the top files if necessary.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (f:File)<-[:impacted]-(i:Issue)<-[:introduced]-(c:Commit)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n```\n\nThis query will return the names of the files and the count of bugs they have introduced, sorted by the number of bugs in descending order, and limited to the top 10 files.",
        "query": "cypher\nMATCH (f:File)<-[:impacted]-(i:Issue)<-[:introduced]-(c:Commit)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "ReactDOMInput-test.js",
                "bug_count": 3
            },
            {
                "file": "ReactDOMInput.js",
                "bug_count": 2
            },
            {
                "file": "ExhaustiveDeps.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMComponent.js",
                "bug_count": 2
            },
            {
                "file": "profilingCache-test.js.snap",
                "bug_count": 2
            },
            {
                "file": "renderer.js",
                "bug_count": 2
            },
            {
                "file": "package.json",
                "bug_count": 2
            },
            {
                "file": "profilingCommitTreeBuilder-test.js.snap",
                "bug_count": 1
            },
            {
                "file": "store.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberWorkLoop.js",
                "bug_count": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "What are the most buggy files?",
        "number": 12,
        "category": 2,
        "response": "The most buggy files are:\n\n1. ReactDOMInput-test.js with 3 bugs.\n2. profilingCache-test.js.snap with 2 bugs.\n3. ReactDOMComponent.js with 2 bugs.\n4. ChangeEventPlugin.js with 2 bugs.\n5. renderer.js with 2 bugs.\n6. ExhaustiveDeps.js with 2 bugs.\n7. package.json with 2 bugs.\n8. ReactDOMInput.js with 2 bugs.\n9. 03-interactivity-and-dynamic-uis.zh-CN.md with 1 bug.\n10. 03-interactivity-and-dynamic-uis.md with 1 bug.",
        "chain_of_thought": "To determine the most buggy files, we need to identify files that have been impacted by the most issues. In the given schema, the relevant nodes are the File and Issue nodes. The relationship that connects these nodes is the impacted relationship, which indicates that changes in the file are related to a bug.\n\nHere's how we can construct the query:\n\n1. Identify the files that have been impacted by issues:\n   - Use the impacted relationship between Issue and File.\n\n2. Count the number of issues impacting each file to determine which files are the most buggy.\n\n3. Sort the files by the number of issues in descending order to find the most buggy files.\n\n4. Optionally, limit the results to the top 10 most buggy files.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n```\n\nThis query will return the names of the files and the count of issues impacting them, sorted by the number of issues in descending order, showing the top 10 most buggy files.",
        "query": "cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "ReactDOMInput-test.js",
                "bug_count": 3
            },
            {
                "file": "profilingCache-test.js.snap",
                "bug_count": 2
            },
            {
                "file": "ReactDOMComponent.js",
                "bug_count": 2
            },
            {
                "file": "ChangeEventPlugin.js",
                "bug_count": 2
            },
            {
                "file": "renderer.js",
                "bug_count": 2
            },
            {
                "file": "ExhaustiveDeps.js",
                "bug_count": 2
            },
            {
                "file": "package.json",
                "bug_count": 2
            },
            {
                "file": "ReactDOMInput.js",
                "bug_count": 2
            },
            {
                "file": "03-interactivity-and-dynamic-uis.zh-CN.md",
                "bug_count": 1
            },
            {
                "file": "03-interactivity-and-dynamic-uis.md",
                "bug_count": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "what are the buggy commits that happened on March 1, 2022?",
        "number": 13,
        "category": 2,
        "response": "The buggy commit that happened on March 1, 2022, is with the commit ID `17806594cc28284fe195f918e8d77de3516848ec`, and the commit message is: \"Move createRoot/hydrateRoot to react-dom/client (#23385)...\".",
        "chain_of_thought": "To determine the buggy commits that happened on March 1, 2022, we need to identify commits that introduced bugs on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship between Commit and Issue. We also need to filter the commits based on the committedDate property to match March 1, 2022.\n\nFirst, we need to format the date in the ISO format as specified in the instructions. March 1, 2022, without a specific time, should be formatted using a regex to match any time on that date.\n\nThe query to find the buggy commits on March 1, 2022, is as follows:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-03-01T.*'\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS date\n```\n\nThis query matches commits that introduced issues and filters them to those committed on March 1, 2022, using a regex pattern to match any time on that date. It then returns the commit ID, message, and committed date for each matching commit.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-03-01T.*'\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS date\n",
        "result": [
            {
                "commitId": "17806594cc28284fe195f918e8d77de3516848ec",
                "commitMessage": "\"Move createRoot/hydrateRoot to react-dom/client (#23385)\n\n* Move createRoot/hydrateRoot to /client\r\n\r\nWe want these APIs ideally to be imported separately from things you\r\nmight use in arbitrary components (like flushSync). Those other methods\r\nare \"isomorphic\" to how the ReactDOM tree is rendered. Similar to hooks.\r\n\r\nE.g. importing flushSync into a component that only uses it on the client\r\nshould ideally not also pull in the entry client implementation on the\r\nserver.\r\n\r\nThis also creates a nicer parity with /server where the roots are in a\r\nseparate entry point.\r\n\r\nUnfortunately, I cant quite do this yet because we have some legacy APIs\r\nthat we plan on removing (like findDOMNode) and we also havent implemented\r\nflushSync using a flag like startTransition does yet.\r\n\r\nAnother problem is that we currently encourage these APIs to be aliased by\r\n/profiling (or unstable_testing). In the future you dont have to alias\r\nthem because you can just change your roots to just import those APIs and\r\ntheyll still work with the isomorphic forms. Although we might also just\r\nuse export conditions for them.\r\n\r\nFor that all to work, I went with a different strategy for now where the\r\nreal API is in / but it comes with a warning if you use it. If you instead\r\nimport /client it disables the warning in a wrapper. That means that if you\r\nalias / then import /client that will inturn import the alias and itll\r\njust work.\r\n\r\nIn a future breaking changes (likely when we switch to ESM) we can just\r\nremove createRoot/hydrateRoot from / and move away from the aliasing\r\nstrategy.\r\n\r\n* Update tests to import from react-dom/client\r\n\r\n* Fix fixtures\r\n\r\n* Update warnings\r\n\r\n* Add test for the warning\r\n\r\n* Update devtools\r\n\r\n* Change order of react-dom, react-dom/client alias\r\n\r\nI think the order matters here. The first one takes precedence.\r\n\r\n* Require react-dom through client so it can be aliased\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "date": "2022-03-01T05:13:28Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "what commits were buggy on April 9, 2021?",
        "number": 14,
        "category": 2,
        "response": "I don't know. Can I help with anything else?",
        "chain_of_thought": "To determine which commits were buggy on April 9, 2021, we need to identify the commits that introduced issues on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that connects these nodes is the introduced relationship, which indicates that a commit introduced a bug (issue).\n\nFirst, we need to filter the issues that were created on April 9, 2021. The created_at property of the Issue node will be used for this purpose. We will format the date in ISO format as \"2021-04-09\" and use a regex to match the date part, allowing for any time.\n\nNext, we will find the commits that introduced these issues.\n\nThe query to find the buggy commits on April 9, 2021, is as follows:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2021-04-09.*'\nRETURN c.id AS commit_id, i.id AS issue_id, i.created_at AS issue_created_at\n```\n\nThis query matches commits that introduced issues created on April 9, 2021, and returns the commit ID, issue ID, and the creation date of the issue.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2021-04-09.*'\nRETURN c.id AS commit_id, i.id AS issue_id, i.created_at AS issue_created_at\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "incorrect"
    },
    {
        "question": "commit(s) that fixed the bug ticket 10217?",
        "number": 15,
        "category": 2,
        "response": "The commit that fixed the bug ticket 10217 is identified by the ID `2e757790751ab8d165fc4df37e90a59d914c4527`, and the commit message is: \"Fix incorrect data in compositionend event with Korean IME on IE11 (#10217) (#12563) * Add isUsingKoreanIME function to check if a composition event was triggered by Korean IME * Add Korean IME check alongside useFallbackCompositionData and disable fallback mode with Korean IME\".",
        "chain_of_thought": "To find the commit(s) that fixed the bug ticket with the number 10217, we need to identify the relevant nodes and relationships. The bug ticket is represented by the Issue node, and the commit that fixed it is represented by the Commit node. The relevant relationship between Commit and Issue for this question is the fixed relationship, which indicates that a commit fixed a particular issue.\n\nFirst, we need to match the Issue node with the number 10217. Then, we find the Commit nodes that have a fixed relationship with this Issue node.\n\nThe query to find the commit(s) that fixed the bug ticket 10217 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 10217})\nRETURN c.id AS commit_id, c.message AS commit_message\n```\n\nThis query will return the ID and message of the commit(s) that fixed the specified bug ticket.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 10217})\nRETURN c.id AS commit_id, c.message AS commit_message\n",
        "result": [
            {
                "commit_id": "2e757790751ab8d165fc4df37e90a59d914c4527",
                "commit_message": "\"Fix incorrect data in compositionend event with Korean IME on IE11 (#10217) (#12563)\n\n* Add isUsingKoreanIME function to check if a composition event was triggered by Korean IME\r\n\r\n* Add Korean IME check alongside useFallbackCompositionData and disable fallback mode with Korean IME\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "which commit fixed the bug ticket 21442?",
        "number": 16,
        "category": 2,
        "response": "The commit that fixed the bug ticket 21442 is identified by the ID `1e3383a41154cb32d8d6b78b2451ee4dabfcb973`.",
        "chain_of_thought": "To determine which commit fixed the bug associated with ticket 21442, we need to identify the relevant nodes and relationships. The ticket number corresponds to an Issue node, and we are interested in finding the Commit node that has a fixed relationship with this Issue node.\n\nHere's the step-by-step breakdown:\n\n1. **Identify the Issue Node**: We need to find the Issue node with the number 21442.\n2. **Find the Commit Node**: We need to find the Commit node that has a fixed relationship with the identified Issue node.\n\nThe relevant nodes are the Issue and Commit nodes, and the relevant relationship is the fixed relationship between Commit and Issue.\n\nThe query to find the commit that fixed the bug ticket 21442 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 21442})\nRETURN c.id AS commit_id\n```\n\nThis query matches the Commit node that has a fixed relationship with the Issue node where the number is 21442 and returns the ID of the commit.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 21442})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "1e3383a41154cb32d8d6b78b2451ee4dabfcb973"
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "Determine the bug(s) that were introduced because of commit hash f912186012f17858b9d25466c658a46e25093941?",
        "number": 17,
        "category": 2,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To determine the bug(s) introduced by a specific commit, we need to identify the relevant nodes and relationships. The commit in question is identified by its hash, which corresponds to the `Commit` node. We are interested in finding the `Issue` nodes that were introduced by this commit. The relevant relationship between `Commit` and `Issue` for this question is the `introduced` relationship.\n\nTherefore, the query to find the bug(s) introduced by the commit with hash `f912186012f17858b9d25466c658a46e25093941` is:\n\n```cypher\nMATCH (c:Commit {id: 'f912186012f17858b9d25466c658a46e25093941'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query matches the specific commit by its ID and finds all issues that were introduced by this commit, returning the issue ID, title, and URL for each.",
        "query": "cypher\nMATCH (c:Commit {id: 'f912186012f17858b9d25466c658a46e25093941'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "what are the bugs caused by commit 2e757790751ab8d165fc4df37e90a59d914c4527?",
        "number": 18,
        "category": 2,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To determine the bugs caused by a specific commit, we need to identify the issues that were introduced by that commit. In the schema, the relevant nodes are the Commit and Issue nodes. The relationship that connects a commit to an issue it introduced is the introduced relationship.\n\nHere's how we can construct the query:\n\n1. Identify the specific commit using its ID.\n2. Use the introduced relationship to find the issues that were introduced by this commit.\n\nThe query to find the bugs (issues) caused by commit `2e757790751ab8d165fc4df37e90a59d914c4527` is:\n\n```cypher\nMATCH (c:Commit {id: '2e757790751ab8d165fc4df37e90a59d914c4527'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query will return the ID, title, and URL of the issues that were introduced by the specified commit.",
        "query": "cypher\nMATCH (c:Commit {id: '2e757790751ab8d165fc4df37e90a59d914c4527'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "Determine the percentage of the fixing commits that introduced bugs on Nov. 2013?",
        "number": 19,
        "category": 3,
        "response": "The percentage of fixing commits that introduced bugs in November 2013 is 100.0%.",
        "chain_of_thought": "To determine the percentage of fixing commits that introduced bugs in November 2013, we need to interpret the question and identify the relevant nodes and relationships in the schema.\n\n### Interpretation:\n1. **Fixing Commits**: These are commits that have a `fixed` relationship with an `Issue`.\n2. **Commits that Introduced Bugs**: These are commits that have an `introduced` relationship with an `Issue`.\n3. **Time Frame**: We are interested in commits from November 2013.\n\n### Steps to Construct the Query:\n1. **Identify Fixing Commits**: Use the `fixed` relationship between `Commit` and `Issue`.\n2. **Identify Commits that Introduced Bugs**: Use the `introduced` relationship between `Commit` and `Issue`.\n3. **Filter by Date**: Use the `committedDate` property of the `Commit` node to filter commits from November 2013.\n4. **Calculate the Percentage**: Find the number of fixing commits that also introduced bugs and divide by the total number of fixing commits, then multiply by 100 to get the percentage.\n\n### Cypher Query:\n```cypher\n// Find all fixing commits in November 2013\nMATCH (fixingCommit:Commit)-[:fixed]->(:Issue)\nWHERE fixingCommit.committedDate =~ '2013-11-.*'\n\n// Find all fixing commits that also introduced bugs\nMATCH (fixingCommit)-[:introduced]->(:Issue)\n\n// Count the total number of fixing commits in November 2013\nWITH COUNT(DISTINCT fixingCommit) AS totalFixingCommits\n\n// Count the number of fixing commits that introduced bugs\nMATCH (fixingCommit:Commit)-[:fixed]->(:Issue)\nWHERE fixingCommit.committedDate =~ '2013-11-.*'\nMATCH (fixingCommit)-[:introduced]->(:Issue)\nWITH totalFixingCommits, COUNT(DISTINCT fixingCommit) AS fixingAndIntroducingCommits\n\n// Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n```\n\nThis query first identifies all fixing commits in November 2013, then finds those that also introduced bugs, and finally calculates the percentage of such commits relative to the total number of fixing commits in that month.",
        "query": "cypher\n// Find all fixing commits in November 2013\nMATCH (fixingCommit:Commit)-[:fixed]->(:Issue)\nWHERE fixingCommit.committedDate =~ '2013-11-.*'\n\n// Find all fixing commits that also introduced bugs\nMATCH (fixingCommit)-[:introduced]->(:Issue)\n\n// Count the total number of fixing commits in November 2013\nWITH COUNT(DISTINCT fixingCommit) AS totalFixingCommits\n\n// Count the number of fixing commits that introduced bugs\nMATCH (fixingCommit:Commit)-[:fixed]->(:Issue)\nWHERE fixingCommit.committedDate =~ '2013-11-.*'\nMATCH (fixingCommit)-[:introduced]->(:Issue)\nWITH totalFixingCommits, COUNT(DISTINCT fixingCommit) AS fixingAndIntroducingCommits\n\n// Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n",
        "result": [
            {
                "percentage": 100.0
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "incorrect"
    },
    {
        "question": "How many fixing commits caused bugs on Nov. 2013?",
        "number": 20,
        "category": 3,
        "response": "There were 2 fixing commits that caused bugs in November 2013.",
        "chain_of_thought": "To address the question, we need to determine the number of commits that both fixed an issue and introduced a bug in November 2013. The schema provides us with the necessary relationships and properties to achieve this.\n\n1. **Identify the relevant nodes and relationships:**\n   - We need to consider the `Commit` node, as it can both fix and introduce issues.\n   - The `fixed` relationship connects a `Commit` to an `Issue` it fixed.\n   - The `introduced` relationship connects a `Commit` to an `Issue` it introduced.\n\n2. **Filter commits by date:**\n   - We need to filter commits that occurred in November 2013. The `committedDate` property of the `Commit` node will be used for this purpose.\n   - The date should be formatted in ISO format, and since we are looking for a specific month, we will use a regex to match dates in November 2013.\n\n3. **Construct the query:**\n   - We will match commits that have both `fixed` and `introduced` relationships.\n   - We will filter these commits by the `committedDate` property to ensure they fall within November 2013.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nRETURN COUNT(c) AS fixingCommitsCausingBugs\n```\n\nThis query matches commits that have both fixed and introduced issues, filters them by the committed date in November 2013, and returns the count of such commits.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nRETURN COUNT(c) AS fixingCommitsCausingBugs\n",
        "result": [
            {
                "fixingCommitsCausingBugs": 2
            }
        ],
        "isAmbiguous": false,
        "iteration": 1,
        "label": "correct"
    },
    {
        "question": "how many commits happened in last month?",
        "number": 1,
        "category": 1,
        "response": "There were 166 commits that happened in the last month.",
        "chain_of_thought": "To determine how many commits happened in the last month, we need to consider the current date, which is 2024-08-26T00:00:00Z. The last month would be from 2024-07-26T00:00:00Z to 2024-08-25T23:59:59Z.\n\nThe relevant nodes for this query are the Commit nodes, and we need to filter these nodes based on the `committedDate` property. The `committedDate` should be within the specified date range.\n\nHere's the Cypher query to find the number of commits that happened in the last month:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n```\n\nThis query matches all Commit nodes and filters them based on the `committedDate` property to ensure they fall within the last month. It then returns the count of these commits.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n",
        "result": [
            {
                "numberOfCommits": 166
            }
        ],
        "isAmbiguous": true,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "what is the latest commit?",
        "number": 2,
        "category": 1,
        "response": "The latest commit is identified by the commit ID 'a960b92cb93e7d006e5e8de850f9b8b51f655c90' and was made on August 20, 2024, at 02:34:20 UTC.",
        "chain_of_thought": "To determine the latest commit, we need to identify the Commit node with the most recent committedDate. The relevant property for this query is the committedDate property of the Commit node. We will sort the commits by committedDate in descending order and return the top result.\n\nThe query to find the latest commit is:\n\n```cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n```\n\nThis query retrieves the commit ID and its committed date, orders the results by the committed date in descending order, and limits the output to the most recent commit.",
        "query": "cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n",
        "result": [
            {
                "commitId": "a960b92cb93e7d006e5e8de850f9b8b51f655c90",
                "commitDate": "2024-08-20T02:34:20Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "can you tell me the details of the commits between May 27th 2018 and May 31st 2018?",
        "number": 3,
        "category": 1,
        "response": "Here are the details of the commits made between May 27th, 2018, and May 31st, 2018:\n\n1. **Commit ID:** a32f857ac78ad1b33c61e6fbd47ccd57f21155c2\n   - **Date:** May 28, 2018, 18:52:42 UTC\n   - **Additions:** 1\n   - **Deletions:** 1\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Message:** \"Use --frozen-lockfile for Yarn in CI build (#12914)\\n\\nCI builds should always use the `--frozen-lockfile` option. It will fail the build if the lockfile is out-of-date:\\r\\n\\r\\n> If you need reproducible dependencies, which is usually the case with the continuous integration systems, you should pass --frozen-lockfile flag.\\r\\n\\r\\n(https://yarnpkg.com/en/docs/cli/install/)\"\n\n2. **Commit ID:** aa85b0fd5ffc92de38720c29833a54c67285abfb\n   - **Date:** May 28, 2018, 22:03:15 UTC\n   - **Additions:** 602\n   - **Deletions:** 1004\n   - **Changed Files:** 28\n   - **Comments Count:** 0\n   - **Message:** \"Upgrade to Jest 23 (#12894)\\n\\n* Upgrade to Jest 23 beta\\r\\n\\r\\n* prefer `.toHaveBeenCalledTimes`\\r\\n\\r\\n* 23 stable\"\n\n3. **Commit ID:** 8aeea5afa2d688968545b1cc5a30a48ddc0fa503\n   - **Date:** May 29, 2018, 13:48:58 UTC\n   - **Additions:** 30\n   - **Deletions:** 7\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Message:** \"Do not assign node.value on input creation if no change will occur (#12925)\\n\\nThis commit fixes an issue where assigning an empty string to required\\r\\ntext inputs triggers the invalid state in Firefox (~60.0.1).\\r\\n\\r\\nIt does this by first comparing the initial state value to the current\\r\\nvalue property on the text element. This:\\r\\n\\r\\n1. Prevents the validation issue\\r\\n2. Avoids an extra DOM Mutation in some cases\"\n\n4. **Commit ID:** 4f1f909b5b5ffe28675eed3fdb645dfaf975c1ef\n   - **Date:** May 29, 2018, 14:47:14 UTC\n   - **Additions:** 1\n   - **Deletions:** 1\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Message:** \"Disable Flow on AppVeyor again\\n\\nIt runs out of memory.\"\n\n5. **Commit ID:** 83f76e4db9a060911774f497b5715bd4d4f42a9c\n   - **Date:** May 29, 2018, 16:50:49 UTC\n   - **Additions:** 194\n   - **Deletions:** 103\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Message:** \"ForwardRefs supports propTypes (#12911)\\n\\n* Moved some internal forwardRef tests to not be internal\\r\\n* ForwardRef supports propTypes\"\n\n6. **Commit ID:** 001f9ef4717a0928b4875cbad3421a17f49f95a5\n   - **Date:** May 29, 2018, 19:50:04 UTC\n   - **Additions:** 48\n   - **Deletions:** 3\n   - **Changed Files:** 6\n   - **Comments Count:** 0\n   - **Message:** \"Release script prompts for NPM 2FA code (#12908)\\n\\n* Release script prompts for NPM 2fa code\"\n\n7. **Commit ID:** ff724d3c286a1753723ea71e8c046498ed1aac98\n   - **Date:** May 29, 2018, 20:30:04 UTC\n   - **Additions:** 64\n   - **Deletions:** 5\n   - **Changed Files:** 8\n   - **Comments Count:** 0\n   - **Message:** \"[scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)\\n\\n* Use local references to global things inside scheduler\\r\\n\\r\\n...\"\n\n8. **Commit ID:** 79a740c6e32ca300d4e7ff55ab06de172d4237fd\n   - **Date:** May 30, 2018, 00:54:38 UTC\n   - **Additions:** 10\n   - **Deletions:** 10\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Message:** \"Rename variables to remove references to global global (#12931)\\n\\n...**issue:**\\r\\nhttps://github.com/facebook/react/issues/12930\"\n\n9. **Commit ID:** e0a03c1b4d84453122c4e9d1a5e0cec52bef9066\n   - **Date:** May 30, 2018, 11:08:21 UTC\n   - **Additions:** 71\n   - **Deletions:** 2\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Message:** \"Extend input type check in selection capabilities (#12062) (#12135)\\n\\n* Do not set selection when prior selection is undefined (#12062)\\r\\n\\r\\n...\"\n\n10. **Commit ID:** ae57b125c798418fb6846094cfa911530206e074\n    - **Date:** May 30, 2018, 20:12:29 UTC\n    - **Additions:** 153\n    - **Deletions:** 31\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Message:** \"[simple-cache-provider] Use LRU cache eviction (#12851)\\n\\n* [simple-cache-provider] Use LRU cache eviction\\r\\n\\r\\n...\"\n\nThese commits include various updates such as upgrades, bug fixes, and enhancements.",
        "chain_of_thought": "To address the question, we need to find the details of commits made between May 27th, 2018, and May 31st, 2018. The relevant node for this query is the Commit node, and we will use the `committedDate` property to filter the commits within the specified date range.\n\nFirst, we need to format the dates in ISO format. The start date is \"2018-05-27T00:00:00Z\" and the end date is \"2018-05-31T23:59:59Z\" to include the entire day of May 31st.\n\nThe query will match all commits and filter them based on the `committedDate` property to ensure they fall within the specified date range. We will then return the details of these commits.\n\nThe complete query is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2018-05-27T00:00:00Z\" AND c.committedDate <= \"2018-05-31T23:59:59Z\"\nRETURN c.id AS commitId, c.additions, c.deletions, c.committedDate, c.changedFiles, c.commentsCount, c.message\nORDER BY c.committedDate\n```\n\nThis query will return the details of the commits, including their ID, number of additions and deletions, committed date, number of changed files, comments count, and commit message, all ordered by the committed date.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2018-05-27T00:00:00Z\" AND c.committedDate <= \"2018-05-31T23:59:59Z\"\nRETURN c.id AS commitId, c.additions, c.deletions, c.committedDate, c.changedFiles, c.commentsCount, c.message\nORDER BY c.committedDate\n",
        "result": [
            {
                "commitId": "a32f857ac78ad1b33c61e6fbd47ccd57f21155c2",
                "c.additions": 1,
                "c.deletions": 1,
                "c.committedDate": "2018-05-28T18:52:42Z",
                "c.changedFiles": 1,
                "c.commentsCount": 0,
                "c.message": "\"Use --frozen-lockfile for Yarn in CI build (#12914)\n\nCI builds should always use the `--frozen-lockfile` option. It will fail the build if the lockfile is out-of-date:\r\n\r\n> If you need reproducible dependencies, which is usually the case with the continuous integration systems, you should pass --frozen-lockfile flag.\r\n\r\n(https://yarnpkg.com/en/docs/cli/install/)\""
            },
            {
                "commitId": "aa85b0fd5ffc92de38720c29833a54c67285abfb",
                "c.additions": 602,
                "c.deletions": 1004,
                "c.committedDate": "2018-05-28T22:03:15Z",
                "c.changedFiles": 28,
                "c.commentsCount": 0,
                "c.message": "\"Upgrade to Jest 23 (#12894)\n\n* Upgrade to Jest 23 beta\r\n\r\n* prefer `.toHaveBeenCalledTimes`\r\n\r\n* 23 stable\""
            },
            {
                "commitId": "8aeea5afa2d688968545b1cc5a30a48ddc0fa503",
                "c.additions": 30,
                "c.deletions": 7,
                "c.committedDate": "2018-05-29T13:48:58Z",
                "c.changedFiles": 2,
                "c.commentsCount": 0,
                "c.message": "\"Do not assign node.value on input creation if no change will occur (#12925)\n\nThis commit fixes an issue where assigning an empty string to required\r\ntext inputs triggers the invalid state in Firefox (~60.0.1).\r\n\r\nIt does this by first comparing the initial state value to the current\r\nvalue property on the text element. This:\r\n\r\n1. Prevents the validation issue\r\n2. Avoids an extra DOM Mutation in some cases\""
            },
            {
                "commitId": "4f1f909b5b5ffe28675eed3fdb645dfaf975c1ef",
                "c.additions": 1,
                "c.deletions": 1,
                "c.committedDate": "2018-05-29T14:47:14Z",
                "c.changedFiles": 1,
                "c.commentsCount": 0,
                "c.message": "\"Disable Flow on AppVeyor again\n\nIt runs out of memory.\""
            },
            {
                "commitId": "83f76e4db9a060911774f497b5715bd4d4f42a9c",
                "c.additions": 194,
                "c.deletions": 103,
                "c.committedDate": "2018-05-29T16:50:49Z",
                "c.changedFiles": 3,
                "c.commentsCount": 0,
                "c.message": "\"ForwardRefs supports propTypes (#12911)\n\n* Moved some internal forwardRef tests to not be internal\r\n* ForwardRef supports propTypes\""
            },
            {
                "commitId": "001f9ef4717a0928b4875cbad3421a17f49f95a5",
                "c.additions": 48,
                "c.deletions": 3,
                "c.committedDate": "2018-05-29T19:50:04Z",
                "c.changedFiles": 6,
                "c.commentsCount": 0,
                "c.message": "\"Release script prompts for NPM 2FA code (#12908)\n\n* Release script prompts for NPM 2fa code\""
            },
            {
                "commitId": "ff724d3c286a1753723ea71e8c046498ed1aac98",
                "c.additions": 64,
                "c.deletions": 5,
                "c.committedDate": "2018-05-29T20:30:04Z",
                "c.changedFiles": 8,
                "c.commentsCount": 0,
                "c.message": "\"[scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)\n\n* Use local references to global things inside scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nWe want to avoid initially calling one version of an API and then later\r\naccessing a polyfilled version.\r\n\r\n**test plan:**\r\nRun existing tests.\r\n\r\n* Shim ReactScheduler for www\r\n\r\n**what is the change?:**\r\nIn www we want to reference the separate build of ReactScheduler,\r\nwhich allows treating it as a separate module internally.\r\n\r\n**why make this change?:**\r\nWe need to require the ReactScheduler before our rAF polyfill activates,\r\nin order to customize which custom behaviors we want.\r\n\r\nThis is also a step towards being able to experiment with using it\r\noutside of React.\r\n\r\n**test plan:**\r\nRan tests, ran the build, and ran `test-build`.\r\n\r\n* Generate a bundle for fb-www\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nSplitting out the schedule module allows us to load it before\r\npolyfills kick in for rAF and other APIs.\r\n\r\nAnd long term we want to split this into a separate module anyway, this\r\nis a step towards that.\r\n\r\n**test plan:**\r\nIll run the sync next week and verify that this all works. :)\r\n\r\n* ran prettier\r\n\r\n* fix rebase issues\r\n\r\n* Change names of variables used for holding globals\""
            },
            {
                "commitId": "79a740c6e32ca300d4e7ff55ab06de172d4237fd",
                "c.additions": 10,
                "c.deletions": 10,
                "c.committedDate": "2018-05-30T00:54:38Z",
                "c.changedFiles": 2,
                "c.commentsCount": 0,
                "c.message": "\"Rename variables to remove references to global global (#12931)\n\n**what is the change?:**\r\nIn a recent PR we were referencing some global variables and storing\r\nlocal references to them.\r\n\r\nTo make things more natural, we co-opted the original name of the global\r\nfor our local reference. To make this work with Flow, we get the\r\noriginal reference from window.requestAnimationFrame and assign it to\r\nconst requestAnimationFrame.\r\n\r\nSometimes React is used in an environment where window is not defined\r\n- in that case we need to use something else, or hide the window\r\nreference somewhere.\r\n\r\nWe opted to use global thinking that Babel transforms would fill that\r\nin with the proper thing.\r\n\r\nBut for some of our fixtures we are not doing that transform on the\r\nbundle.\r\n\r\n**why make this change?:**\r\nI want to unbreak this on master and then investigate more about what we\r\nshould do to fix this.\r\n\r\n**test plan:**\r\nrun `yarn build` and open the fixtures.\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12930\""
            },
            {
                "commitId": "e0a03c1b4d84453122c4e9d1a5e0cec52bef9066",
                "c.additions": 71,
                "c.deletions": 2,
                "c.committedDate": "2018-05-30T11:08:21Z",
                "c.changedFiles": 3,
                "c.commentsCount": 0,
                "c.message": "\"Extend input type check in selection capabilities (#12062) (#12135)\n\n* Do not set selection when prior selection is undefined (#12062)\r\n\r\n`restoreSelection` did not account for input elements that have changed\r\ntype after the commit phase. The new `text` input supported selection\r\nbut the old `email` did not and `setSelection` was incorrectly trying to\r\nrestore `null` selection state.\r\n\r\nWe also extend input type check in selection capabilities to cover cases\r\nwhere input type is `search`, `tel`, `url`, or `password`.\r\n\r\n* Add link to HTML spec for element types and selection\r\n\r\n* Add reset button to ReplaceEmailInput\r\n\r\nThis commit adds a button to restore the original state of the\r\nReplaceEmailInput fixture so that it can be run multiple times without\r\nrefreshing the page.\""
            },
            {
                "commitId": "ae57b125c798418fb6846094cfa911530206e074",
                "c.additions": 153,
                "c.deletions": 31,
                "c.committedDate": "2018-05-30T20:12:29Z",
                "c.changedFiles": 2,
                "c.commentsCount": 0,
                "c.message": "\"[simple-cache-provider] Use LRU cache eviction (#12851)\n\n* [simple-cache-provider] Use LRU cache eviction\r\n\r\nMax size is hard-coded to 500. In the future, we should make this\r\nconfigurable per resource.\r\n\r\n* Evict PAGE_SIZE records from cache when max limit is reached\""
            },
            {
                "commitId": "524a74331399fd7102037c878f327afbd5e14f53",
                "c.additions": 42,
                "c.deletions": 21,
                "c.committedDate": "2018-05-30T22:31:41Z",
                "c.changedFiles": 1,
                "c.commentsCount": 0,
                "c.message": "\"Fix for Flow issues in SimpleCacheProvider (#12942)\n\n* Fix for Flow issues in SimpleCacheProvider\r\n\r\n**what is the change?:**\r\n- Fixed some flow errors which were somehow swallowed when CI\r\noriginally\r\n- Loosen flow types to avoid issue with recursive loop in Flow; https://github.com/facebook/flow/issues/5870\r\n\r\n**why make this change?:**\r\nTo unbreak master and unblock other changes we want to make.\r\n\r\n**test plan:**\r\nFlow passes!\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12941\r\n\r\n* Fix lints\""
            },
            {
                "commitId": "3118ed9d640ad28af306de308301f4fcd029ffca",
                "c.additions": 2,
                "c.deletions": 0,
                "c.committedDate": "2018-05-30T22:31:59Z",
                "c.changedFiles": 1,
                "c.commentsCount": 0,
                "c.message": "\"Expose unstable_interactiveUpdates on ReactDOM (#12943)\""
            },
            {
                "commitId": "15767a8f8f798f0d80df4ddbc7cfaebdc29996a8",
                "c.additions": 624,
                "c.deletions": 30,
                "c.committedDate": "2018-05-30T22:38:48Z",
                "c.changedFiles": 3,
                "c.commentsCount": 0,
                "c.message": "\"[scheduler] 5/n Error handling in scheduler (#12920)\n\n* Initial failing unit test for error handling in schedule\r\n\r\n**what is the change?:**\r\nsee title\r\n\r\n**why make this change?:**\r\nAdding tests for the error handling behavior we are about to add. This\r\ntest is failing, which gives us the chance to make it pass.\r\n\r\nWrote skeletons of some other tests to add.\r\n\r\nUnit testing this way is really hacky, and Im also adding to the\r\nfixture to test this in the real browser environment.\r\n\r\n**test plan:**\r\nRan new test, saw it fail!\r\n\r\n* Add fixture for testing error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded a fixture which does the following -\r\nlogs in the console to show what happens when you use\r\n`requestAnimationFrame` to schedule a series of callbacks and some of\r\nthem throw errors.\r\n\r\nThen does the same actions with the `scheduler` and verifies that it\r\nbehaves in a similar way.\r\n\r\nHard to really verify the errors get thrown at the proper time without\r\nlooking at the console.\r\n\r\n**why make this change?:**\r\nWe want the most authentic, accurate test of how errors are handled in\r\nthe scheduler. Thats what this fixture should be.\r\n\r\n**test plan:**\r\nManually verified that this test does what I expect - right now its\r\nfailing but follow up commits will fix that.\r\n\r\n* Handle errors in scheduler\r\n\r\n**what is the change?:**\r\nWe set a flag before calling any callback, and then use a try/finally\r\nblock to wrap it. Note that we *do not* catch the error, if one is\r\nthrown. But, we only unset the flag after the callback successfully\r\nfinishes.\r\n\r\nIf we reach the finally block and the flag was not unset, then it\r\nmeans an error was thrown.\r\n\r\nIn that case we start a new postMessage callback, to finish calling any\r\nother pending callbacks if there is time.\r\n\r\n**why make this change?:**\r\nWe need to make sure that an error thrown from one callback doesnt stop\r\nother callbacks from firing, but we also dont want to catch or swallow\r\nthe error because we want engineers to still be able to log and debug\r\nerrors.\r\n\r\n**test plan:**\r\nNew tests added are passing, and we verified that they fail without this\r\nchange.\r\n\r\n* Add more tests for error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded tests for more situations where error handling may come up.\r\n\r\n**why make this change?:**\r\nTo get additional protection against this being broken in the future.\r\n\r\n**test plan:**\r\nRan new tests and verified that they fail when error handling fails.\r\n\r\n* callSafely -> callUnsafely\r\n\r\n* Fix bugs with error handling in schedule\r\n\r\n**what is the change?:**\r\n- ensure that we properly remove the callback from the linked list, even\r\nif it throws an error and is timed out.\r\n- ensure that you can call cancelScheduledWork more than once and it\r\nis idempotent.\r\n\r\n**why make this change?:**\r\nTo fix bugs :)\r\n\r\n**test plan:**\r\nExisting tests pass, and well add more tests in a follow up commit.\r\n\r\n* Unit tests for error handling with timed out callbacks\r\n\r\n**what is the change?:**\r\nMore unit tests, to cover behavior which we missed; error handling of\r\ntimed out callbacks.\r\n\r\n**why make this change?:**\r\nTo protect the future!~\r\n\r\n**test plan:**\r\nRun the new tests.\r\n\r\n* Adds fixture to test timed out callbacks with scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\nIn the other error handling fixture we compare scheduleWork error\r\nhandling to requestAnimationFrame and try to get as close as possible.\r\nThere is no timing out feature with requestAnimationFrame but\r\neffectively the timing out feature changes the order in which things\r\nare called. So we just changed the order in the requestAnimationFrame\r\nversion and that works well for illustrating the behavior we expect in\r\nthe scheduleWork test.\r\n\r\n**why make this change?:**\r\nWe need more test coverage of timed out callbacks.\r\n\r\n**test plan:**\r\nExecuted the fixture manually in Firefox and Chrome. Results looked\r\ngood.\r\n\r\n* fix rebase problems\r\n\r\n* make fixture compensate for chrome JS speed\r\n\r\n* ran prettier\r\n\r\n* Remove cancelled flag on callbackConfig in scheduler, add test\r\n\r\n**what is the change?:**\r\n- Instead of using a cancelled flag on the callbackConfig, its easier\r\nto just check the state of the callbackConfig inside\r\ncancelScheduledWork to determine if its already been cancelled. That\r\nway we dont have to remember to set the cancelled flag every time we\r\ncall a callback or cancel it. One less thing to remember.\r\n- We added a test for calling cancelScheduledWork more than once,\r\nwhich would have failed before.\r\n\r\nThanks @acdlite for suggesting this in code review. :)\r\n\r\n**why make this change?:**\r\nTo increase stability of the schedule module, increase test coverage.\r\n\r\n**test plan:**\r\nExisting tests pass and we added a new test to cover this behavior.\r\n\r\n* fix typo\""
            },
            {
                "commitId": "65ab53694f6edf4437034d5644a602dea162e249",
                "c.additions": 2,
                "c.deletions": 2,
                "c.committedDate": "2018-05-31T20:36:55Z",
                "c.changedFiles": 1,
                "c.commentsCount": 0,
                "c.message": "\"Update token (#12956)\""
            },
            {
                "commitId": "36546b5137e9012ebdc62fc9ec11e3518c9e0aab",
                "c.additions": 36,
                "c.deletions": 6,
                "c.committedDate": "2018-05-31T21:23:26Z",
                "c.changedFiles": 3,
                "c.commentsCount": 0,
                "c.message": "\"Set the correct initial value on input range (#12939)\n\n* Set the correct initial value on input range\r\n\r\n* Add description and update value diff check for input range\r\n\r\n* add isHydrating argument and tests\r\n\r\n* update node value according to isHydrating\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "return a commit message on July 31?",
        "number": 4,
        "category": 1,
        "response": "The commit messages on July 31 are:\n\n1. \"[compiler] More complete validation against locals being reassigned after render\\n\\nSummary:\\nThis diff extends the existing work on validating against locals being reassigned after render, by propagating the reassignment \"effect\" into the lvalues of instructions when the rvalue operands include values known to cause reassignments. In particular, this \"closes the loop\" for function definitions and function calls: a function that returns a function that reassigns will be considered to also perform reassignments, but previous to this we didn\u2019t consider the result of a `Call` of a function that reassigns to itself be a value that reassigns.\\n\\nThis causes a number of new bailouts in test cases, all of which appear to me to be legit.\\n\\nghstack-source-id: 770bf02d079ea2480be243a49caa6f69573d8092\\nPull Request resolved: https://github.com/facebook/react/pull/30540\"\n\n2. \"[Fizz] Update postpone abort semantics when prerendering (#30541)\\n\\nWhen aborting with a postpone value in Fizz if any tasks are still\\r\\npending in the root while prerendering the prerender will fatally error.\\r\\nThis is different from postponing imperatively in a root task and really\\r\\nthe semantics should be the same. This change updates React to treat an\\r\\nabort with a postpone value as a postponed root rather than a fatal\\r\\nerror.\"\n\n3. \"[DevTools] Track the parent DevToolsInstance while mounting a tree (#30542)\\n\\nThis just tracks the `.parent` field properly and uses DevToolsInstances\\r\\nin more places that used to use IDs or Fibers.\\r\\n\\r\\nI also use this new parent path when looking up a DevToolsInstance from\\r\\na DOM node. This should ideally be simple because the `.parent` field\\r\\nrepresents only the unfiltered parents and include any virtual parents.\\r\\nSo we should be able to just get one from nearest Fiber that has one.\\r\\n\\r\\nHowever, because we don\u2019t currently always clean up the map of\\r\\nDevToolsInstances (e.g. updateComponentFilters doesn\u2019t recursively clean\\r\\nout everything) it can leave matches hanging that shouldn\u2019t be there. So\\r\\nwe need to run the shouldFilterFiber filter to ignore those.\\r\\n\\r\\nAnother interesting implication is that without a FiberInstance we don\u2019t\\r\\nhave a way to get to a VirtualInstance from a HostComponent. Which means\\r\\nthat even filtered Fibers need to have a FiberInstance if they have a\\r\\nVirtualInstance parent. Even if we don\u2019t actually mount them into the\\r\\nfront-end.\"\n\n4. \"Build all bundles required by flight fixture with `build-for-flight-dev` (#30534)\"\n\n5. \"[Flight] Enable owner stacks on the client when replaying logs (#30473)\\n\\nThere\u2019s a special case that happens when we replay logs on the client\\r\\nbecause this doesn\u2019t happen within the context of any particular\\r\\nrendered component. So we need to reimplement things that would normally\\r\\nbe handled by a full client like Fiber.\\r\\n\\r\\nThe implementation of `getOwnerStackByComponentInfoInDev` is the\\r\\nsimplest version since it doesn\u2019t have any client components in it so I\\r\\nmove it to `shared/`. It\u2019s only used by Flight but both `react-server/`\\r\\nand `react-client/` packages. The ReactComponentInfo type is also more\\r\\ngeneric than just Flight anyway.\\r\\n\\r\\nIn a follow up I still need to implement this in React DevTools when\\r\\nnative tasks are not available so that it appends it to the console.\"",
        "chain_of_thought": "To address the question \"return a commit message on July 31,\" we need to interpret the query in the context of the provided schema. The question is asking for commit messages from a specific date, July 31. However, the year is not specified, so we will assume it refers to the most recent July 31, which would be July 31, 2024, given the current date is August 26, 2024.\n\nThe relevant nodes and properties for this query are the `Commit` node and its `committedDate` and `message` properties. We need to filter commits by the `committedDate` property to match July 31, 2024.\n\nThe `committedDate` should be in the ISO format \"YYYY-MM-DDTHH:MM:SSZ\". Since the time is not specified, we will use a regex to match any time on that date.\n\nHere's the Cypher query to find the commit messages from July 31, 2024:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commitMessage\n```\n\nThis query matches all commits with a `committedDate` on July 31, 2024, and returns their `message` property.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commitMessage\n",
        "result": [
            {
                "commitMessage": "\"[compiler] More complete validation against locals being reassigned after render\n\nSummary:\nThis diff extends the existing work on validating against locals being reassigned after render, by propagating the reassignment \"effect\" into the lvalues of instructions when the rvalue operands include values known to cause reassignments. In particular, this \"closes the loop\" for function definitions and function calls: a function that returns a function that reassigns will be considered to also perform reassignments, but previous to this we didnt consider the result of a `Call` of a function that reassigns to itself be a value that reassigns.\n\nThis causes a number of new bailouts in test cases, all of which appear to me to be legit.\n\nghstack-source-id: 770bf02d079ea2480be243a49caa6f69573d8092\nPull Request resolved: https://github.com/facebook/react/pull/30540\""
            },
            {
                "commitMessage": "\"[Fizz] Update postpone abort semantics when prerendering (#30541)\n\nWhen aborting with a postpone value in Fizz if any tasks are still\r\npending in the root while prerendering the prerender will fatally error.\r\nThis is different from postponing imperatively in a root task and really\r\nthe semantics should be the same. This change updates React to treat an\r\nabort with a postpone value as a postponed root rather than a fatal\r\nerror.\""
            },
            {
                "commitMessage": "\"[DevTools] Track the parent DevToolsInstance while mounting a tree (#30542)\n\nThis just tracks the `.parent` field properly and uses DevToolsInstances\r\nin more places that used to use IDs or Fibers.\r\n\r\nI also use this new parent path when looking up a DevToolsInstance from\r\na DOM node. This should ideally be simple because the `.parent` field\r\nrepresents only the unfiltered parents and include any virtual parents.\r\nSo we should be able to just get one from nearest Fiber that has one.\r\n\r\nHowever, because we dont currently always clean up the map of\r\nDevToolsInstances (e.g. updateComponentFilters doesnt recursively clean\r\nout everything) it can leave matches hanging that shouldnt be there. So\r\nwe need to run the shouldFilterFiber filter to ignore those.\r\n\r\nAnother interesting implication is that without a FiberInstance we dont\r\nhave a way to get to a VirtualInstance from a HostComponent. Which means\r\nthat even filtered Fibers need to have a FiberInstance if they have a\r\nVirtualInstance parent. Even if we dont actually mount them into the\r\nfront-end.\""
            },
            {
                "commitMessage": "\"Build all bundles required by flight fixture with `build-for-flight-dev` (#30534)\""
            },
            {
                "commitMessage": "\"[Flight] Enable owner stacks on the client when replaying logs (#30473)\n\nTheres a special case that happens when we replay logs on the client\r\nbecause this doesnt happen within the context of any particular\r\nrendered component. So we need to reimplement things that would normally\r\nbe handled by a full client like Fiber.\r\n\r\nThe implementation of `getOwnerStackByComponentInfoInDev` is the\r\nsimplest version since it doesnt have any client components in it so I\r\nmove it to `shared/`. Its only used by Flight but both `react-server/`\r\nand `react-client/` packages. The ReactComponentInfo type is also more\r\ngeneric than just Flight anyway.\r\n\r\nIn a follow up I still need to implement this in React DevTools when\r\nnative tasks are not available so that it appends it to the console.\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "show me the changes for BeforeInputEventPlugin.js file?",
        "number": 5,
        "category": 2,
        "response": "The changes for the `BeforeInputEventPlugin.js` file include multiple commits with various modifications over time. Here are some notable changes:\n\n1. **Addition and Deletion of Imports:**\n   - The file has seen changes in its import statements, such as the addition and removal of imports like `EventConstants`, `EventPropagators`, and `ExecutionEnvironment`.\n\n2. **Introduction of Constants:**\n   - Constants like `END_KEYCODES` and `START_KEYCODE` have been introduced to handle specific key events like Tab, Return, Esc, and Space.\n\n3. **Handling of Composition Events:**\n   - The handling of composition events has been enhanced with the introduction of functions like `getCompositionEventType`, `isFallbackCompositionStart`, and `isFallbackCompositionEnd`.\n   - The file now processes composition events using `SyntheticCompositionEvent`.\n\n4. **Fallback and Native Event Handling:**\n   - Fallback logic for handling input events in browsers that do not support the `textInput` event has been added.\n   - There are functions to handle fallback composition data and native before-input characters.\n\n5. **Space Key Handling:**\n   - Specific logic to handle the space keypress events has been implemented to avoid issues with native spacebar handling in certain browsers.\n\n6. **Various Bug Fixes and Optimizations:**\n   - The file has undergone several bug fixes and performance optimizations, including handling of specific browser quirks and ensuring compatibility with different environments.\n\n7. **Changes in License and Documentation:**\n   - The licensing information at the top of the file has been updated, and there have been changes to the comments and documentation within the code to enhance clarity and maintainability.\n\nOverall, the `BeforeInputEventPlugin.js` file has evolved to better handle input events across different environments and browsers, incorporating a mix of native and synthetic event handling strategies.",
        "chain_of_thought": "To address the question, \"show me the changes for BeforeInputEventPlugin.js file,\" we need to identify the relevant nodes and relationships in the schema. The file in question is represented by the `File` node, and we are interested in the changes made to this file, which are captured by the `changed` relationship from the `Commit` node to the `File` node.\n\nHere's the step-by-step breakdown of the query:\n\n1. **Identify the File Node**: We need to find the `File` node with the name \"BeforeInputEventPlugin.js\".\n\n2. **Find the Changes**: We need to traverse from the `Commit` node to the `File` node using the `changed` relationship to get the details of the changes.\n\n3. **Return the Change Details**: We want to return details about the changes, such as the number of additions, deletions, and the patch.\n\nThe complete Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'BeforeInputEventPlugin.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n```\n\nThis query will return the commit ID, the number of additions and deletions, and the patch details for each change made to the file \"BeforeInputEventPlugin.js\", ordered by the commit date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'BeforeInputEventPlugin.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch\nORDER BY c.committedDate DESC\n",
        "result": [
            {
                "commitId": "0b4f443020af386f2b48c47c074cb504ed672dc8",
                "additions": 10,
                "deletions": 10,
                "patch": "@@ -192,11 +192,11 @@ let isComposing = false;\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n-  dispatchQueue,\n-  domEventName,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n ) {\n   let eventType;\n   let fallbackData;\n@@ -379,11 +379,11 @@ function getFallbackBeforeInputChars(\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n-  dispatchQueue,\n-  domEventName,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n ) {\n   let chars;\n "
            },
            {
                "commitId": "ea04a486a7c27771f7eea896565c0980927ed3b4",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -227,10 +227,8 @@ function extractCompositionEvent(\n     }\n   }\n \n-  // $FlowFixMe[incompatible-call] found when upgrading Flow\n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n-    // $FlowFixMe[incompatible-type]\n     const event: ReactSyntheticEvent = new SyntheticCompositionEvent(\n       eventType,\n       domEventName,\n@@ -403,7 +401,6 @@ function extractBeforeInputEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n   if (listeners.length > 0) {\n-    // $FlowFixMe[incompatible-type]\n     const event: ReactSyntheticEvent = new SyntheticInputEvent(\n       'onBeforeInput',\n       'beforeinput',"
            },
            {
                "commitId": "64fe791be84ad04a4a1d005376ba5cf5701db9b7",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -227,6 +227,7 @@ function extractCompositionEvent(\n     }\n   }\n \n+  // $FlowFixMe[incompatible-call] found when upgrading Flow\n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n     // $FlowFixMe[incompatible-type]"
            },
            {
                "commitId": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "9328988c024800de05dfab70e55cfd0999445d8a",
                "additions": 8,
                "deletions": 2,
                "patch": "@@ -12,6 +12,7 @@ import type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n import type {AnyNativeEvent} from '../../events/PluginModuleType';\n import type {DispatchQueue} from '../DOMPluginEventSystem';\n import type {EventSystemFlags} from '../EventSystemFlags';\n+import type {ReactSyntheticEvent} from '../ReactSyntheticEventType';\n \n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n@@ -228,7 +229,8 @@ function extractCompositionEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n-    const event = new SyntheticCompositionEvent(\n+    // $FlowFixMe[incompatible-type]\n+    const event: ReactSyntheticEvent = new SyntheticCompositionEvent(\n       eventType,\n       domEventName,\n       null,\n@@ -239,10 +241,12 @@ function extractCompositionEvent(\n     if (fallbackData) {\n       // Inject data generated from fallback path into the synthetic event.\n       // This matches the property of native CompositionEventInterface.\n+      // $FlowFixMe[incompatible-use]\n       event.data = fallbackData;\n     } else {\n       const customData = getDataFromCustomEvent(nativeEvent);\n       if (customData !== null) {\n+        // $FlowFixMe[incompatible-use]\n         event.data = customData;\n       }\n     }\n@@ -398,14 +402,16 @@ function extractBeforeInputEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n   if (listeners.length > 0) {\n-    const event = new SyntheticInputEvent(\n+    // $FlowFixMe[incompatible-type]\n+    const event: ReactSyntheticEvent = new SyntheticInputEvent(\n       'onBeforeInput',\n       'beforeinput',\n       null,\n       nativeEvent,\n       nativeEventTarget,\n     );\n     dispatchQueue.push({event, listeners});\n+    // $FlowFixMe[incompatible-use]\n     event.data = chars;\n   }\n }"
            },
            {
                "commitId": "480626a9e920d5e04194c793a828318102ea4ff4",
                "additions": 31,
                "deletions": 26,
                "patch": "@@ -226,23 +226,25 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticCompositionEvent(\n-    eventType,\n-    domEventName,\n-    null,\n-    nativeEvent,\n-    nativeEventTarget,\n-  );\n-  accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n-\n-  if (fallbackData) {\n-    // Inject data generated from fallback path into the synthetic event.\n-    // This matches the property of native CompositionEventInterface.\n-    event.data = fallbackData;\n-  } else {\n-    const customData = getDataFromCustomEvent(nativeEvent);\n-    if (customData !== null) {\n-      event.data = customData;\n+  const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n+  if (listeners.length > 0) {\n+    const event = new SyntheticCompositionEvent(\n+      eventType,\n+      domEventName,\n+      null,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+    dispatchQueue.push({event, listeners});\n+    if (fallbackData) {\n+      // Inject data generated from fallback path into the synthetic event.\n+      // This matches the property of native CompositionEventInterface.\n+      event.data = fallbackData;\n+    } else {\n+      const customData = getDataFromCustomEvent(nativeEvent);\n+      if (customData !== null) {\n+        event.data = customData;\n+      }\n     }\n   }\n }\n@@ -394,15 +396,18 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticInputEvent(\n-    'onBeforeInput',\n-    'beforeinput',\n-    null,\n-    nativeEvent,\n-    nativeEventTarget,\n-  );\n-  accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n-  event.data = chars;\n+  const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n+  if (listeners.length > 0) {\n+    const event = new SyntheticInputEvent(\n+      'onBeforeInput',\n+      'beforeinput',\n+      null,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+    dispatchQueue.push({event, listeners});\n+    event.data = chars;\n+  }\n }\n \n /**"
            },
            {
                "commitId": "1890159a5d362e76ee949dfcace1ccb9677abc45",
                "additions": 4,
                "deletions": 7,
                "patch": "@@ -22,9 +22,8 @@ import {\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n import {\n-  CompositionEventInterface,\n-  InputEventInterface,\n-  SyntheticEvent,\n+  SyntheticCompositionEvent,\n+  SyntheticInputEvent,\n } from '../SyntheticEvent';\n import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n@@ -227,13 +226,12 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticEvent(\n+  const event = new SyntheticCompositionEvent(\n     eventType,\n     domEventName,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n-    CompositionEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n \n@@ -396,13 +394,12 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticEvent(\n+  const event = new SyntheticInputEvent(\n     'onBeforeInput',\n     'beforeinput',\n     null,\n     nativeEvent,\n     nativeEventTarget,\n-    InputEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n   event.data = chars;"
            },
            {
                "commitId": "7f696bd99c39348a631c20378d2a8704634bab04",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -229,6 +229,7 @@ function extractCompositionEvent(\n \n   const event = new SyntheticEvent(\n     eventType,\n+    domEventName,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n@@ -397,6 +398,7 @@ function extractBeforeInputEvent(\n \n   const event = new SyntheticEvent(\n     'onBeforeInput',\n+    'beforeinput',\n     null,\n     nativeEvent,\n     nativeEventTarget,"
            },
            {
                "commitId": "22d16cc15df8e570b79c2825fb495c2b98b40bf5",
                "additions": 87,
                "deletions": 101,
                "patch": "@@ -3,25 +3,19 @@\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n  */\n \n-import type {TopLevelType} from '../../events/TopLevelEventTypes';\n+import type {DOMEventName} from '../../events/DOMEventNames';\n+import type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n+import type {AnyNativeEvent} from '../../events/PluginModuleType';\n+import type {DispatchQueue} from '../DOMPluginEventSystem';\n+import type {EventSystemFlags} from '../EventSystemFlags';\n \n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {registerTwoPhaseEvent} from '../EventRegistry';\n-import {\n-  TOP_FOCUS_OUT,\n-  TOP_COMPOSITION_START,\n-  TOP_COMPOSITION_END,\n-  TOP_COMPOSITION_UPDATE,\n-  TOP_KEY_DOWN,\n-  TOP_KEY_PRESS,\n-  TOP_KEY_UP,\n-  TOP_MOUSE_DOWN,\n-  TOP_TEXT_INPUT,\n-  TOP_PASTE,\n-} from '../DOMTopLevelEventTypes';\n import {\n   getData as FallbackCompositionStateGetData,\n   initialize as FallbackCompositionStateInitialize,\n@@ -63,34 +57,34 @@ const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n function registerEvents() {\n   registerTwoPhaseEvent('onBeforeInput', [\n-    TOP_COMPOSITION_END,\n-    TOP_KEY_PRESS,\n-    TOP_TEXT_INPUT,\n-    TOP_PASTE,\n+    'compositionend',\n+    'keypress',\n+    'textInput',\n+    'paste',\n   ]);\n   registerTwoPhaseEvent('onCompositionEnd', [\n-    TOP_COMPOSITION_END,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionend',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n   registerTwoPhaseEvent('onCompositionStart', [\n-    TOP_COMPOSITION_START,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionstart',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n   registerTwoPhaseEvent('onCompositionUpdate', [\n-    TOP_COMPOSITION_UPDATE,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionupdate',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n }\n \n@@ -102,7 +96,7 @@ let hasSpaceKeypress = false;\n  * This is required because Firefox fires `keypress` events for key commands\n  * (cut, copy, select-all, etc.) even though no character is inserted.\n  */\n-function isKeypressCommand(nativeEvent) {\n+function isKeypressCommand(nativeEvent: any) {\n   return (\n     (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n     // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n@@ -112,52 +106,47 @@ function isKeypressCommand(nativeEvent) {\n \n /**\n  * Translate native top level events into event types.\n- *\n- * @param {string} topLevelType\n- * @return {object}\n  */\n-function getCompositionEventType(topLevelType) {\n-  switch (topLevelType) {\n-    case TOP_COMPOSITION_START:\n+function getCompositionEventType(domEventName: DOMEventName) {\n+  switch (domEventName) {\n+    case 'compositionstart':\n       return 'onCompositionStart';\n-    case TOP_COMPOSITION_END:\n+    case 'compositionend':\n       return 'onCompositionEnd';\n-    case TOP_COMPOSITION_UPDATE:\n+    case 'compositionupdate':\n       return 'onCompositionUpdate';\n   }\n }\n \n /**\n  * Does our fallback best-guess model think this event signifies that\n  * composition has begun?\n- *\n- * @param {string} topLevelType\n- * @param {object} nativeEvent\n- * @return {boolean}\n  */\n-function isFallbackCompositionStart(topLevelType, nativeEvent) {\n-  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;\n+function isFallbackCompositionStart(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): boolean {\n+  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;\n }\n \n /**\n  * Does our fallback mode think that this event is the end of composition?\n- *\n- * @param {string} topLevelType\n- * @param {object} nativeEvent\n- * @return {boolean}\n  */\n-function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n-  switch (topLevelType) {\n-    case TOP_KEY_UP:\n+function isFallbackCompositionEnd(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): boolean {\n+  switch (domEventName) {\n+    case 'keyup':\n       // Command keys insert or clear IME input.\n       return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n-    case TOP_KEY_DOWN:\n+    case 'keydown':\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return nativeEvent.keyCode !== START_KEYCODE;\n-    case TOP_KEY_PRESS:\n-    case TOP_MOUSE_DOWN:\n-    case TOP_FOCUS_OUT:\n+    case 'keypress':\n+    case 'mousedown':\n+    case 'focusout':\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -174,7 +163,7 @@ function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  * @param {object} nativeEvent\n  * @return {?string}\n  */\n-function getDataFromCustomEvent(nativeEvent) {\n+function getDataFromCustomEvent(nativeEvent: any) {\n   const detail = nativeEvent.detail;\n   if (typeof detail === 'object' && 'data' in detail) {\n     return detail.data;\n@@ -192,7 +181,7 @@ function getDataFromCustomEvent(nativeEvent) {\n  * @param {object} nativeEvent\n  * @return {boolean}\n  */\n-function isUsingKoreanIME(nativeEvent) {\n+function isUsingKoreanIME(nativeEvent: any) {\n   return nativeEvent.locale === 'ko';\n }\n \n@@ -204,7 +193,7 @@ let isComposing = false;\n  */\n function extractCompositionEvent(\n   dispatchQueue,\n-  topLevelType,\n+  domEventName,\n   targetInst,\n   nativeEvent,\n   nativeEventTarget,\n@@ -213,12 +202,12 @@ function extractCompositionEvent(\n   let fallbackData;\n \n   if (canUseCompositionEvent) {\n-    eventType = getCompositionEventType(topLevelType);\n+    eventType = getCompositionEventType(domEventName);\n   } else if (!isComposing) {\n-    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+    if (isFallbackCompositionStart(domEventName, nativeEvent)) {\n       eventType = 'onCompositionStart';\n     }\n-  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {\n     eventType = 'onCompositionEnd';\n   }\n \n@@ -259,16 +248,14 @@ function extractCompositionEvent(\n   }\n }\n \n-/**\n- * @param {TopLevelType} topLevelType Number from `TopLevelType`.\n- * @param {object} nativeEvent Native browser event.\n- * @return {?string} The string corresponding to this `beforeInput` event.\n- */\n-function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n-  switch (topLevelType) {\n-    case TOP_COMPOSITION_END:\n+function getNativeBeforeInputChars(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): ?string {\n+  switch (domEventName) {\n+    case 'compositionend':\n       return getDataFromCustomEvent(nativeEvent);\n-    case TOP_KEY_PRESS:\n+    case 'keypress':\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -291,7 +278,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case TOP_TEXT_INPUT:\n+    case 'textInput':\n       // Record the characters to be added to the DOM.\n       const chars = nativeEvent.data;\n \n@@ -313,21 +300,20 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n /**\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n- *\n- * @param {number} topLevelType Number from `TopLevelEventTypes`.\n- * @param {object} nativeEvent Native browser event.\n- * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n+function getFallbackBeforeInputChars(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): ?string {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n   if (isComposing) {\n     if (\n-      topLevelType === TOP_COMPOSITION_END ||\n+      domEventName === 'compositionend' ||\n       (!canUseCompositionEvent &&\n-        isFallbackCompositionEnd(topLevelType, nativeEvent))\n+        isFallbackCompositionEnd(domEventName, nativeEvent))\n     ) {\n       const chars = FallbackCompositionStateGetData();\n       FallbackCompositionStateReset();\n@@ -337,12 +323,12 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n     return null;\n   }\n \n-  switch (topLevelType) {\n-    case TOP_PASTE:\n+  switch (domEventName) {\n+    case 'paste':\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case TOP_KEY_PRESS:\n+    case 'keypress':\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -373,7 +359,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n         }\n       }\n       return null;\n-    case TOP_COMPOSITION_END:\n+    case 'compositionend':\n       return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)\n         ? null\n         : nativeEvent.data;\n@@ -390,17 +376,17 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n  */\n function extractBeforeInputEvent(\n   dispatchQueue,\n-  topLevelType,\n+  domEventName,\n   targetInst,\n   nativeEvent,\n   nativeEventTarget,\n ) {\n   let chars;\n \n   if (canUseTextInputEvent) {\n-    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+    chars = getNativeBeforeInputChars(domEventName, nativeEvent);\n   } else {\n-    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);\n   }\n \n   // If no characters are being inserted, no BeforeInput event should\n@@ -439,24 +425,24 @@ function extractBeforeInputEvent(\n  * `composition` event types.\n  */\n function extractEvents(\n-  dispatchQueue,\n-  topLevelType,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n-  eventSystemFlags,\n-  targetContainer,\n-) {\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n+  eventSystemFlags: EventSystemFlags,\n+  targetContainer: EventTarget,\n+): void {\n   extractCompositionEvent(\n     dispatchQueue,\n-    topLevelType,\n+    domEventName,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,\n   );\n   extractBeforeInputEvent(\n     dispatchQueue,\n-    topLevelType,\n+    domEventName,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,"
            },
            {
                "commitId": "76ce685d0fc7821a6c8be486d7cbb2c3d22f6fb7",
                "additions": 7,
                "deletions": 4,
                "patch": "@@ -28,8 +28,9 @@ import {\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n import {\n-  SyntheticCompositionEvent,\n-  SyntheticInputEvent,\n+  CompositionEventInterface,\n+  InputEventInterface,\n+  SyntheticEvent,\n } from '../SyntheticEvent';\n import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n@@ -237,11 +238,12 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticCompositionEvent(\n+  const event = new SyntheticEvent(\n     eventType,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n+    CompositionEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n \n@@ -407,11 +409,12 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticInputEvent(\n+  const event = new SyntheticEvent(\n     'onBeforeInput',\n     null,\n     nativeEvent,\n     nativeEventTarget,\n+    InputEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n   event.data = chars;"
            },
            {
                "commitId": "125d1a19a211c51d5ee52ec0c1cc1f538eb44d5c",
                "additions": 5,
                "deletions": 3,
                "patch": "@@ -27,9 +27,11 @@ import {\n   initialize as FallbackCompositionStateInitialize,\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n-import SyntheticCompositionEvent from '../SyntheticCompositionEvent';\n-import SyntheticInputEvent from '../SyntheticInputEvent';\n-import {accumulateTwoPhaseListeners} from '../DOMModernPluginEventSystem';\n+import {\n+  SyntheticCompositionEvent,\n+  SyntheticInputEvent,\n+} from '../SyntheticEvent';\n+import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;"
            },
            {
                "commitId": "d3ec42020d220777bf589bec36c9cd8300ec9742",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -28,7 +28,7 @@ import {\n } from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n-import {accumulateTwoPhaseListeners} from './DOMModernPluginEventSystem';\n+import accumulateTwoPhaseListeners from './accumulateTwoPhaseListeners';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;"
            },
            {
                "commitId": "30a998debf79f8c8efb3fa9b6ff5458fb319d7a1",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -7,7 +7,6 @@\n \n import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatchesSingle} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n@@ -29,6 +28,7 @@ import {\n } from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n+import {accumulateTwoPhaseListeners} from './DOMModernPluginEventSystem';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;\n@@ -276,7 +276,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  accumulateTwoPhaseDispatchesSingle(event);\n+  accumulateTwoPhaseListeners(event);\n   return event;\n }\n \n@@ -437,7 +437,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  accumulateTwoPhaseDispatchesSingle(event);\n+  accumulateTwoPhaseListeners(event);\n   return event;\n }\n "
            },
            {
                "commitId": "2fe0fbb05ef2c56db760122e995b923528e6ce8f",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -7,7 +7,7 @@\n \n import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n+import {accumulateTwoPhaseDispatchesSingle} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n@@ -276,7 +276,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatchesSingle(event);\n   return event;\n }\n \n@@ -437,7 +437,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatchesSingle(event);\n   return event;\n }\n "
            },
            {
                "commitId": "ab1a4f249e61045d523ddbbfb840e868afbbf785",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -464,10 +464,10 @@ const BeforeInputEventPlugin = {\n \n   extractEvents: function(\n     topLevelType,\n-    eventSystemFlags,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,\n+    eventSystemFlags,\n   ) {\n     const composition = extractCompositionEvent(\n       topLevelType,"
            },
            {
                "commitId": "0a527707cd8befd21a741ca9646a8551842190b0",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -464,6 +464,7 @@ const BeforeInputEventPlugin = {\n \n   extractEvents: function(\n     topLevelType,\n+    eventSystemFlags,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,"
            },
            {
                "commitId": "44e410900da8ef7b5e7daf18e7a0bf61b6612247",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,9 +5,9 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelType} from 'events/TopLevelEventTypes';\n+import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {"
            },
            {
                "commitId": "b1a03dfdc8e42d075422556553ffe59868150e95",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,9 +5,9 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelType} from 'events/TopLevelEventTypes';\n+import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {"
            },
            {
                "commitId": "c954efa70f44a44be9c33c60c57f87bea6f40a10",
                "additions": 9,
                "deletions": 5,
                "patch": "@@ -22,7 +22,11 @@ import {\n   TOP_TEXT_INPUT,\n   TOP_PASTE,\n } from './DOMTopLevelEventTypes';\n-import * as FallbackCompositionState from './FallbackCompositionState';\n+import {\n+  getData as FallbackCompositionStateGetData,\n+  initialize as FallbackCompositionStateInitialize,\n+  reset as FallbackCompositionStateReset,\n+} from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n@@ -246,10 +250,10 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!isComposing && eventType === eventTypes.compositionStart) {\n-      isComposing = FallbackCompositionState.initialize(nativeEventTarget);\n+      isComposing = FallbackCompositionStateInitialize(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (isComposing) {\n-        fallbackData = FallbackCompositionState.getData();\n+        fallbackData = FallbackCompositionStateGetData();\n       }\n     }\n   }\n@@ -346,8 +350,8 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      const chars = FallbackCompositionState.getData();\n-      FallbackCompositionState.reset();\n+      const chars = FallbackCompositionStateGetData();\n+      FallbackCompositionStateReset();\n       isComposing = false;\n       return chars;\n     }"
            },
            {
                "commitId": "8a8d973d3cc5623676a84f87af66ef9259c3937c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -314,7 +314,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n \n       // If it's a spacebar character, assume that we have already handled\n       // it at the keypress level and bail immediately. Android Chrome\n-      // doesn't give us keycodes, so we need to blacklist it.\n+      // doesn't give us keycodes, so we need to ignore it.\n       if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n         return null;\n       }"
            },
            {
                "commitId": "b87aabdfe1b7461e7331abb3601d9e6bb27544bc",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2013-present, Facebook, Inc.\n+ * Copyright (c) Facebook, Inc. and its affiliates.\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree."
            },
            {
                "commitId": "72434a7686035b4af766ee7d06c070d7f5d6a5f2",
                "additions": 5,
                "deletions": 6,
                "patch": "@@ -8,7 +8,7 @@\n import type {TopLevelType} from 'events/TopLevelEventTypes';\n \n import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n-import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n+import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n   TOP_BLUR,\n@@ -29,25 +29,24 @@ import SyntheticInputEvent from './SyntheticInputEvent';\n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;\n \n-const canUseCompositionEvent =\n-  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n+const canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;\n \n let documentMode = null;\n-if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+if (canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n const canUseTextInputEvent =\n-  ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;\n+  canUseDOM && 'TextEvent' in window && !documentMode;\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n const useFallbackCompositionData =\n-  ExecutionEnvironment.canUseDOM &&\n+  canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n "
            },
            {
                "commitId": "2e757790751ab8d165fc4df37e90a59d914c4527",
                "additions": 18,
                "deletions": 2,
                "patch": "@@ -200,6 +200,20 @@ function getDataFromCustomEvent(nativeEvent) {\n   return null;\n }\n \n+/**\n+ * Check if a composition event was triggered by Korean IME.\n+ * Our fallback mode does not work well with IE's Korean IME,\n+ * so just use native composition events when Korean IME is used.\n+ * Although CompositionEvent.locale property is deprecated,\n+ * it is available in IE, where our fallback mode is enabled.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isUsingKoreanIME(nativeEvent) {\n+  return nativeEvent.locale === 'ko';\n+}\n+\n // Track the current IME composition status, if any.\n let isComposing = false;\n \n@@ -229,7 +243,7 @@ function extractCompositionEvent(\n     return null;\n   }\n \n-  if (useFallbackCompositionData) {\n+  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!isComposing && eventType === eventTypes.compositionStart) {\n@@ -378,7 +392,9 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       }\n       return null;\n     case TOP_COMPOSITION_END:\n-      return useFallbackCompositionData ? null : nativeEvent.data;\n+      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)\n+        ? null\n+        : nativeEvent.data;\n     default:\n       return null;\n   }"
            },
            {
                "commitId": "e96dc140599363029bd05565d58bcd4a432db370",
                "additions": 55,
                "deletions": 43,
                "patch": "@@ -5,11 +5,23 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelTypes} from './BrowserEventConstants';\n+import type {TopLevelType} from 'events/TopLevelEventTypes';\n \n import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n+import {\n+  TOP_BLUR,\n+  TOP_COMPOSITION_START,\n+  TOP_COMPOSITION_END,\n+  TOP_COMPOSITION_UPDATE,\n+  TOP_KEY_DOWN,\n+  TOP_KEY_PRESS,\n+  TOP_KEY_UP,\n+  TOP_MOUSE_DOWN,\n+  TOP_TEXT_INPUT,\n+  TOP_PASTE,\n+} from './DOMTopLevelEventTypes';\n import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n@@ -50,10 +62,10 @@ const eventTypes = {\n       captured: 'onBeforeInputCapture',\n     },\n     dependencies: [\n-      'topCompositionEnd',\n-      'topKeyPress',\n-      'topTextInput',\n-      'topPaste',\n+      TOP_COMPOSITION_END,\n+      TOP_KEY_PRESS,\n+      TOP_TEXT_INPUT,\n+      TOP_PASTE,\n     ],\n   },\n   compositionEnd: {\n@@ -62,12 +74,12 @@ const eventTypes = {\n       captured: 'onCompositionEndCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionEnd',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_END,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n   compositionStart: {\n@@ -76,12 +88,12 @@ const eventTypes = {\n       captured: 'onCompositionStartCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionStart',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_START,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n   compositionUpdate: {\n@@ -90,12 +102,12 @@ const eventTypes = {\n       captured: 'onCompositionUpdateCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionUpdate',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_UPDATE,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n };\n@@ -124,11 +136,11 @@ function isKeypressCommand(nativeEvent) {\n  */\n function getCompositionEventType(topLevelType) {\n   switch (topLevelType) {\n-    case 'topCompositionStart':\n+    case TOP_COMPOSITION_START:\n       return eventTypes.compositionStart;\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return eventTypes.compositionEnd;\n-    case 'topCompositionUpdate':\n+    case TOP_COMPOSITION_UPDATE:\n       return eventTypes.compositionUpdate;\n   }\n }\n@@ -142,7 +154,7 @@ function getCompositionEventType(topLevelType) {\n  * @return {boolean}\n  */\n function isFallbackCompositionStart(topLevelType, nativeEvent) {\n-  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;\n+  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;\n }\n \n /**\n@@ -154,16 +166,16 @@ function isFallbackCompositionStart(topLevelType, nativeEvent) {\n  */\n function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case 'topKeyUp':\n+    case TOP_KEY_UP:\n       // Command keys insert or clear IME input.\n       return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n-    case 'topKeyDown':\n+    case TOP_KEY_DOWN:\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return nativeEvent.keyCode !== START_KEYCODE;\n-    case 'topKeyPress':\n-    case 'topMouseDown':\n-    case 'topBlur':\n+    case TOP_KEY_PRESS:\n+    case TOP_MOUSE_DOWN:\n+    case TOP_BLUR:\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -252,15 +264,15 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n+ * @param {TopLevelType} topLevelType Number from `TopLevelType`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n-function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n+function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return getDataFromCustomEvent(nativeEvent);\n-    case 'topKeyPress':\n+    case TOP_KEY_PRESS:\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -283,7 +295,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case 'topTextInput':\n+    case TOP_TEXT_INPUT:\n       // Record the characters to be added to the DOM.\n       const chars = nativeEvent.data;\n \n@@ -306,18 +318,18 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n  *\n- * @param {string} topLevelType Record from `BrowserEventConstants`.\n+ * @param {number} topLevelType Number from `TopLevelEventTypes`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n+function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n   if (isComposing) {\n     if (\n-      topLevelType === 'topCompositionEnd' ||\n+      topLevelType === TOP_COMPOSITION_END ||\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n@@ -330,11 +342,11 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   }\n \n   switch (topLevelType) {\n-    case 'topPaste':\n+    case TOP_PASTE:\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case 'topKeyPress':\n+    case TOP_KEY_PRESS:\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -365,7 +377,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n         }\n       }\n       return null;\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return useFallbackCompositionData ? null : nativeEvent.data;\n     default:\n       return null;"
            },
            {
                "commitId": "4d37040cbf914c9d3c282e8edd67fa97a3c31178",
                "additions": 1,
                "deletions": 18,
                "patch": "@@ -29,10 +29,7 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n const canUseTextInputEvent =\n-  ExecutionEnvironment.canUseDOM &&\n-  'TextEvent' in window &&\n-  !documentMode &&\n-  !isPresto();\n+  ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n@@ -42,20 +39,6 @@ const useFallbackCompositionData =\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n \n-/**\n- * Opera <= 12 includes TextEvent in window, but does not fire\n- * text input events. Rely on keypress instead.\n- */\n-function isPresto() {\n-  const opera = window.opera;\n-  return (\n-    opera !== null &&\n-    typeof opera === 'object' &&\n-    typeof opera.version === 'function' &&\n-    parseInt(opera.version(), 10) <= 12\n-  );\n-}\n-\n const SPACEBAR_CODE = 32;\n const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n "
            },
            {
                "commitId": "faa4218632ca21f3af731fb6c14849fc054fca15",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -49,6 +49,7 @@ const useFallbackCompositionData =\n function isPresto() {\n   const opera = window.opera;\n   return (\n+    opera !== null &&\n     typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n     parseInt(opera.version(), 10) <= 12"
            },
            {
                "commitId": "cc52e06b490e0dc2482b345aa5d0d65fae931095",
                "additions": 23,
                "deletions": 14,
                "patch": "@@ -453,20 +453,29 @@ const BeforeInputEventPlugin = {\n     nativeEvent,\n     nativeEventTarget,\n   ) {\n-    return [\n-      extractCompositionEvent(\n-        topLevelType,\n-        targetInst,\n-        nativeEvent,\n-        nativeEventTarget,\n-      ),\n-      extractBeforeInputEvent(\n-        topLevelType,\n-        targetInst,\n-        nativeEvent,\n-        nativeEventTarget,\n-      ),\n-    ];\n+    const composition = extractCompositionEvent(\n+      topLevelType,\n+      targetInst,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+\n+    const beforeInput = extractBeforeInputEvent(\n+      topLevelType,\n+      targetInst,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+\n+    if (composition === null) {\n+      return beforeInput;\n+    }\n+\n+    if (beforeInput === null) {\n+      return composition;\n+    }\n+\n+    return [composition, beforeInput];\n   },\n };\n "
            },
            {
                "commitId": "5bd2321ae3dd7d68ac02dee3c3f271e9d0ee8784",
                "additions": 23,
                "deletions": 23,
                "patch": "@@ -14,21 +14,21 @@ import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n-var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n-var START_KEYCODE = 229;\n+const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+const START_KEYCODE = 229;\n \n-var canUseCompositionEvent =\n+const canUseCompositionEvent =\n   ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n \n-var documentMode = null;\n+let documentMode = null;\n if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n-var canUseTextInputEvent =\n+const canUseTextInputEvent =\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n@@ -37,7 +37,7 @@ var canUseTextInputEvent =\n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n-var useFallbackCompositionData =\n+const useFallbackCompositionData =\n   ExecutionEnvironment.canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n@@ -47,19 +47,19 @@ var useFallbackCompositionData =\n  * text input events. Rely on keypress instead.\n  */\n function isPresto() {\n-  var opera = window.opera;\n+  const opera = window.opera;\n   return (\n     typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n     parseInt(opera.version(), 10) <= 12\n   );\n }\n \n-var SPACEBAR_CODE = 32;\n-var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n+const SPACEBAR_CODE = 32;\n+const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n // Events and their corresponding property names.\n-var eventTypes = {\n+const eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: 'onBeforeInput',\n@@ -117,7 +117,7 @@ var eventTypes = {\n };\n \n // Track whether we've ever handled a keypress on the space key.\n-var hasSpaceKeypress = false;\n+let hasSpaceKeypress = false;\n \n /**\n  * Return whether a native keypress event is assumed to be a command.\n@@ -197,15 +197,15 @@ function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  * @return {?string}\n  */\n function getDataFromCustomEvent(nativeEvent) {\n-  var detail = nativeEvent.detail;\n+  const detail = nativeEvent.detail;\n   if (typeof detail === 'object' && 'data' in detail) {\n     return detail.data;\n   }\n   return null;\n }\n \n // Track the current IME composition status, if any.\n-var isComposing = false;\n+let isComposing = false;\n \n /**\n  * @return {?object} A SyntheticCompositionEvent.\n@@ -216,8 +216,8 @@ function extractCompositionEvent(\n   nativeEvent,\n   nativeEventTarget,\n ) {\n-  var eventType;\n-  var fallbackData;\n+  let eventType;\n+  let fallbackData;\n \n   if (canUseCompositionEvent) {\n     eventType = getCompositionEventType(topLevelType);\n@@ -245,7 +245,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  var event = SyntheticCompositionEvent.getPooled(\n+  const event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     targetInst,\n     nativeEvent,\n@@ -257,7 +257,7 @@ function extractCompositionEvent(\n     // This matches the property of native CompositionEventInterface.\n     event.data = fallbackData;\n   } else {\n-    var customData = getDataFromCustomEvent(nativeEvent);\n+    const customData = getDataFromCustomEvent(nativeEvent);\n     if (customData !== null) {\n       event.data = customData;\n     }\n@@ -291,7 +291,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n        * To avoid this issue, use the keypress event as if no `textInput`\n        * event is available.\n        */\n-      var which = nativeEvent.which;\n+      const which = nativeEvent.which;\n       if (which !== SPACEBAR_CODE) {\n         return null;\n       }\n@@ -301,7 +301,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n \n     case 'topTextInput':\n       // Record the characters to be added to the DOM.\n-      var chars = nativeEvent.data;\n+      const chars = nativeEvent.data;\n \n       // If it's a spacebar character, assume that we have already handled\n       // it at the keypress level and bail immediately. Android Chrome\n@@ -337,7 +337,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      var chars = FallbackCompositionState.getData();\n+      const chars = FallbackCompositionState.getData();\n       FallbackCompositionState.reset();\n       isComposing = false;\n       return chars;\n@@ -400,7 +400,7 @@ function extractBeforeInputEvent(\n   nativeEvent,\n   nativeEventTarget,\n ) {\n-  var chars;\n+  let chars;\n \n   if (canUseTextInputEvent) {\n     chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n@@ -414,7 +414,7 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  var event = SyntheticInputEvent.getPooled(\n+  const event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     targetInst,\n     nativeEvent,\n@@ -444,7 +444,7 @@ function extractBeforeInputEvent(\n  * allowing us to share composition fallback code for both `beforeInput` and\n  * `composition` event types.\n  */\n-var BeforeInputEventPlugin = {\n+const BeforeInputEventPlugin = {\n   eventTypes: eventTypes,\n \n   extractEvents: function("
            },
            {
                "commitId": "92b7b172cce9958b846844f0b46fd7bbd8c5140d",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -7,10 +7,10 @@\n \n import type {TopLevelTypes} from './BrowserEventConstants';\n \n-import EventPropagators from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n-import FallbackCompositionState from './FallbackCompositionState';\n+import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n@@ -263,7 +263,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatches(event);\n   return event;\n }\n \n@@ -422,7 +422,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatches(event);\n   return event;\n }\n "
            },
            {
                "commitId": "45c1ff348e1c7d03567f5bba6cb32cffa9222972",
                "additions": 0,
                "deletions": 2,
                "patch": "@@ -5,8 +5,6 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-'use strict';\n-\n import type {TopLevelTypes} from './BrowserEventConstants';\n \n import EventPropagators from 'events/EventPropagators';"
            },
            {
                "commitId": "21d0c115238b4f38837020cf83e0c657d8c01c9f",
                "additions": 6,
                "deletions": 6,
                "patch": "@@ -9,12 +9,12 @@\n \n import type {TopLevelTypes} from './BrowserEventConstants';\n \n-var EventPropagators = require('events/EventPropagators');\n-var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n+import EventPropagators from 'events/EventPropagators';\n+import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n-var FallbackCompositionState = require('./FallbackCompositionState');\n-var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n-var SyntheticInputEvent = require('./SyntheticInputEvent');\n+import FallbackCompositionState from './FallbackCompositionState';\n+import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n+import SyntheticInputEvent from './SyntheticInputEvent';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n@@ -472,4 +472,4 @@ var BeforeInputEventPlugin = {\n   },\n };\n \n-module.exports = BeforeInputEventPlugin;\n+export default BeforeInputEventPlugin;"
            },
            {
                "commitId": "087c48bb36b88ef0b5bbca2b9b70a52d8d413102",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -7,14 +7,15 @@\n \n 'use strict';\n \n+import type {TopLevelTypes} from './BrowserEventConstants';\n+\n var EventPropagators = require('events/EventPropagators');\n var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n+\n var FallbackCompositionState = require('./FallbackCompositionState');\n var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n var SyntheticInputEvent = require('./SyntheticInputEvent');\n \n-import type {TopLevelTypes} from 'BrowserEventConstants';\n-\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n "
            },
            {
                "commitId": "1eed302d346bfb8f5db8d88b0e7096d8999d3548",
                "additions": 4,
                "deletions": 6,
                "patch": "@@ -3,17 +3,15 @@\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.\n- *\n- * @providesModule BeforeInputEventPlugin\n  */\n \n 'use strict';\n \n-var EventPropagators = require('EventPropagators');\n+var EventPropagators = require('events/EventPropagators');\n var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n-var FallbackCompositionState = require('FallbackCompositionState');\n-var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n-var SyntheticInputEvent = require('SyntheticInputEvent');\n+var FallbackCompositionState = require('./FallbackCompositionState');\n+var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n+var SyntheticInputEvent = require('./SyntheticInputEvent');\n \n import type {TopLevelTypes} from 'BrowserEventConstants';\n "
            },
            {
                "commitId": "e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "ab853e6f3ef69a56f042f5aa5c07da881fdb68a0",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "313611572b6567d229367ed20ff63d1bca8610bb",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "d9c1dbd61772f8f8ab0cdf389e70463d704c480b",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "d63249d03488fec1ea92a81ba29f0e87a82feeae",
                "additions": 3,
                "deletions": 5,
                "patch": "@@ -1,10 +1,8 @@\n /**\n- * Copyright 2013-present Facebook, Inc.\n- * All rights reserved.\n+ * Copyright (c) 2013-present, Facebook, Inc.\n  *\n- * This source code is licensed under the BSD-style license found in the\n- * LICENSE file in the root directory of this source tree. An additional grant\n- * of patent rights can be found in the PATENTS file in the same directory.\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n  *\n  * @providesModule BeforeInputEventPlugin\n  */"
            },
            {
                "commitId": "0e556fef24e9db468d00b05ef8ddfa0b06b08f0c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -273,7 +273,7 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {string} topLevelType Record from `BrowserEventConstants`.\n+ * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */"
            },
            {
                "commitId": "755724a24c4743b5507590e512cdf2f24d9b8435",
                "additions": 11,
                "deletions": 13,
                "patch": "@@ -209,8 +209,8 @@ function getDataFromCustomEvent(nativeEvent) {\n   return null;\n }\n \n-// Track the current IME composition fallback object, if any.\n-var currentComposition = null;\n+// Track the current IME composition status, if any.\n+var isComposing = false;\n \n /**\n  * @return {?object} A SyntheticCompositionEvent.\n@@ -226,7 +226,7 @@ function extractCompositionEvent(\n \n   if (canUseCompositionEvent) {\n     eventType = getCompositionEventType(topLevelType);\n-  } else if (!currentComposition) {\n+  } else if (!isComposing) {\n     if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n       eventType = eventTypes.compositionStart;\n     }\n@@ -241,13 +241,11 @@ function extractCompositionEvent(\n   if (useFallbackCompositionData) {\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n-    if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(\n-        nativeEventTarget,\n-      );\n+    if (!isComposing && eventType === eventTypes.compositionStart) {\n+      isComposing = FallbackCompositionState.initialize(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n-      if (currentComposition) {\n-        fallbackData = currentComposition.getData();\n+      if (isComposing) {\n+        fallbackData = FallbackCompositionState.getData();\n       }\n     }\n   }\n@@ -338,15 +336,15 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n-  if (currentComposition) {\n+  if (isComposing) {\n     if (\n       topLevelType === 'topCompositionEnd' ||\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      var chars = currentComposition.getData();\n-      FallbackCompositionState.release(currentComposition);\n-      currentComposition = null;\n+      var chars = FallbackCompositionState.getData();\n+      FallbackCompositionState.reset();\n+      isComposing = false;\n       return chars;\n     }\n     return null;"
            },
            {
                "commitId": "00ba97a354e841701b4b83983c3a3904895e7b87",
                "additions": 12,
                "deletions": 2,
                "patch": "@@ -374,8 +374,18 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n        *   being used. Ex: `Cmd+C`. No character is inserted, and no\n        *   `input` event will occur.\n        */\n-      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-        return String.fromCharCode(nativeEvent.which);\n+      if (!isKeypressCommand(nativeEvent)) {\n+        // IE fires the `keypress` event when a user types an emoji via\n+        // Touch keyboard of Windows.  In such a case, the `char` property\n+        // holds an emoji character like `\\uD83D\\uDE0A`.  Because its length\n+        // is 2, the property `which` does not represent an emoji correctly.\n+        // In such a case, we directly return the `char` property instead of\n+        // using `which`.\n+        if (nativeEvent.char && nativeEvent.char.length > 1) {\n+          return nativeEvent.char;\n+        } else if (nativeEvent.which) {\n+          return String.fromCharCode(nativeEvent.which);\n+        }\n       }\n       return null;\n     case 'topCompositionEnd':"
            },
            {
                "commitId": "a9d0deb8e13e9f0b1ee7d2f28a6eec0e7ad2e41d",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -17,7 +17,7 @@ var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n-import type {TopLevelTypes} from 'EventConstants';\n+import type {TopLevelTypes} from 'BrowserEventConstants';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n@@ -275,7 +275,7 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {string} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n@@ -329,7 +329,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {string} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */"
            },
            {
                "commitId": "b1768b5a48d1f82e4ef4150e0036c5f846d3758a",
                "additions": 14,
                "deletions": 8,
                "patch": "@@ -22,8 +22,8 @@ import type {TopLevelTypes} from 'EventConstants';\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n \n-var canUseCompositionEvent = ExecutionEnvironment.canUseDOM &&\n-  'CompositionEvent' in window;\n+var canUseCompositionEvent =\n+  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n \n var documentMode = null;\n if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n@@ -33,15 +33,17 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n-var canUseTextInputEvent = ExecutionEnvironment.canUseDOM &&\n+var canUseTextInputEvent =\n+  ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n   !isPresto();\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n-var useFallbackCompositionData = ExecutionEnvironment.canUseDOM &&\n+var useFallbackCompositionData =\n+  ExecutionEnvironment.canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n \n@@ -51,9 +53,11 @@ var useFallbackCompositionData = ExecutionEnvironment.canUseDOM &&\n  */\n function isPresto() {\n   var opera = window.opera;\n-  return typeof opera === 'object' &&\n+  return (\n+    typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n-    parseInt(opera.version(), 10) <= 12;\n+    parseInt(opera.version(), 10) <= 12\n+  );\n }\n \n var SPACEBAR_CODE = 32;\n@@ -126,9 +130,11 @@ var hasSpaceKeypress = false;\n  * (cut, copy, select-all, etc.) even though no character is inserted.\n  */\n function isKeypressCommand(nativeEvent) {\n-  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n+  return (\n+    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n     // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n-    !(nativeEvent.ctrlKey && nativeEvent.altKey);\n+    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n+  );\n }\n \n /**"
            },
            {
                "commitId": "b1b4a2fb252f26fe10d29ba60d85ff89a85ff3ec",
                "additions": 30,
                "deletions": 44,
                "patch": null
            },
            {
                "commitId": "1843f8716803d380df34a7362d80022352853931",
                "additions": 30,
                "deletions": 44,
                "patch": null
            },
            {
                "commitId": "8bc11649df767402c262b6c9b67c6dd811d42cd0",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -12,7 +12,7 @@\n 'use strict';\n \n var EventPropagators = require('EventPropagators');\n-var ExecutionEnvironment = require('ExecutionEnvironment');\n+var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');"
            },
            {
                "commitId": "e452e3374135c116ef687a8bb3a5d277e3cde8fb",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -12,7 +12,7 @@\n 'use strict';\n \n var EventPropagators = require('EventPropagators');\n-var ExecutionEnvironment = require('ExecutionEnvironment');\n+var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');"
            },
            {
                "commitId": "e3131c1d55d6695c2f0966379535f88b813f912b",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "a3fb0310ca6f7cad0707b5a9fd004c19e004186f",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "a64ca9b697d0808a2966465fea2e658e4f310080",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -345,11 +345,12 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n+  // If composition event is available, we extract a string only at\n+  // compositionevent, otherwise extract it at fallback events.\n   if (currentComposition) {\n-    if (\n-      topLevelType === 'topCompositionEnd' ||\n-      isFallbackCompositionEnd(topLevelType, nativeEvent)\n-    ) {\n+    if (topLevelType === 'topCompositionEnd'\n+        || (!canUseCompositionEvent\n+            && isFallbackCompositionEnd(topLevelType, nativeEvent))) {\n       var chars = currentComposition.getData();\n       FallbackCompositionState.release(currentComposition);\n       currentComposition = null;"
            },
            {
                "commitId": "f7076b7759c57b95da21ffca892ddbdcf3ffed02",
                "additions": 8,
                "deletions": 10,
                "patch": "@@ -17,8 +17,6 @@ var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n-var keyOf = require('keyOf');\n-\n import type { TopLevelTypes } from 'EventConstants';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n@@ -75,8 +73,8 @@ var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null}),\n+      bubbled: 'onBeforeInput',\n+      captured: 'onBeforeInputCapture',\n     },\n     dependencies: [\n       'topCompositionEnd',\n@@ -87,8 +85,8 @@ var eventTypes = {\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null}),\n+      bubbled: 'onCompositionEnd',\n+      captured: 'onCompositionEndCapture',\n     },\n     dependencies: [\n       'topBlur',\n@@ -101,8 +99,8 @@ var eventTypes = {\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null}),\n+      bubbled: 'onCompositionStart',\n+      captured: 'onCompositionStartCapture',\n     },\n     dependencies: [\n       'topBlur',\n@@ -115,8 +113,8 @@ var eventTypes = {\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null}),\n+      bubbled: 'onCompositionUpdate',\n+      captured: 'onCompositionUpdateCapture',\n     },\n     dependencies: [\n       'topBlur',"
            },
            {
                "commitId": "2f9a9dc4c56c1caee250626c54c587c5f233fcab",
                "additions": 42,
                "deletions": 43,
                "patch": "@@ -11,7 +11,6 @@\n \n 'use strict';\n \n-var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n@@ -20,6 +19,8 @@ var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+import type { TopLevelTypes } from 'EventConstants';\n+\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n \n@@ -70,8 +71,6 @@ function isPresto() {\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n-var topLevelTypes = EventConstants.topLevelTypes;\n-\n // Events and their corresponding property names.\n var eventTypes = {\n   beforeInput: {\n@@ -80,10 +79,10 @@ var eventTypes = {\n       captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topCompositionEnd,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste,\n+      'topCompositionEnd',\n+      'topKeyPress',\n+      'topTextInput',\n+      'topPaste',\n     ],\n   },\n   compositionEnd: {\n@@ -92,12 +91,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionEnd,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionEnd',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n   compositionStart: {\n@@ -106,12 +105,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionStart,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionStart',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n   compositionUpdate: {\n@@ -120,12 +119,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionUpdate,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionUpdate',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n };\n@@ -155,11 +154,11 @@ function isKeypressCommand(nativeEvent) {\n  */\n function getCompositionEventType(topLevelType) {\n   switch (topLevelType) {\n-    case topLevelTypes.topCompositionStart:\n+    case 'topCompositionStart':\n       return eventTypes.compositionStart;\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return eventTypes.compositionEnd;\n-    case topLevelTypes.topCompositionUpdate:\n+    case 'topCompositionUpdate':\n       return eventTypes.compositionUpdate;\n   }\n }\n@@ -174,7 +173,7 @@ function getCompositionEventType(topLevelType) {\n  */\n function isFallbackCompositionStart(topLevelType, nativeEvent) {\n   return (\n-    topLevelType === topLevelTypes.topKeyDown &&\n+    topLevelType === 'topKeyDown' &&\n     nativeEvent.keyCode === START_KEYCODE\n   );\n }\n@@ -188,16 +187,16 @@ function isFallbackCompositionStart(topLevelType, nativeEvent) {\n  */\n function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case topLevelTypes.topKeyUp:\n+    case 'topKeyUp':\n       // Command keys insert or clear IME input.\n       return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n-    case topLevelTypes.topKeyDown:\n+    case 'topKeyDown':\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return (nativeEvent.keyCode !== START_KEYCODE);\n-    case topLevelTypes.topKeyPress:\n-    case topLevelTypes.topMouseDown:\n-    case topLevelTypes.topBlur:\n+    case 'topKeyPress':\n+    case 'topMouseDown':\n+    case 'topBlur':\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -291,11 +290,11 @@ function extractCompositionEvent(\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n-function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   switch (topLevelType) {\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return getDataFromCustomEvent(nativeEvent);\n-    case topLevelTypes.topKeyPress:\n+    case 'topKeyPress':\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -318,7 +317,7 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case topLevelTypes.topTextInput:\n+    case 'topTextInput':\n       // Record the characters to be added to the DOM.\n       var chars = nativeEvent.data;\n \n@@ -345,12 +344,12 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   if (currentComposition) {\n     if (\n-      topLevelType === topLevelTypes.topCompositionEnd ||\n+      topLevelType === 'topCompositionEnd' ||\n       isFallbackCompositionEnd(topLevelType, nativeEvent)\n     ) {\n       var chars = currentComposition.getData();\n@@ -362,11 +361,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n   }\n \n   switch (topLevelType) {\n-    case topLevelTypes.topPaste:\n+    case 'topPaste':\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case topLevelTypes.topKeyPress:\n+    case 'topKeyPress':\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -387,7 +386,7 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n         return String.fromCharCode(nativeEvent.which);\n       }\n       return null;\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return useFallbackCompositionData ? null : nativeEvent.data;\n     default:\n       return null;"
            },
            {
                "commitId": "209b7522d99a8af36f8d9e06ce622c59b793e5a3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the"
            },
            {
                "commitId": "3b96650e39ddda5ba49245713ef16dbc52d25e9e",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the"
            },
            {
                "commitId": "bef45b0b1a98ea9b472ba664d955a039cf2f8068",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the"
            },
            {
                "commitId": "4f7a2766e4c29c2f25c0807ac21318c3963e6aec",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -7,7 +7,6 @@\n  * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n- * @typechecks static-only\n  */\n \n 'use strict';"
            },
            {
                "commitId": "46f5251c66dcb0895743db02265c07320d0a6089",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -7,7 +7,6 @@\n  * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n- * @typechecks static-only\n  */\n \n 'use strict';"
            },
            {
                "commitId": "35962a00084382b49d1f9e3bd36612925f360e5b",
                "additions": 9,
                "deletions": 29,
                "patch": "@@ -227,16 +227,11 @@ function getDataFromCustomEvent(nativeEvent) {\n var currentComposition = null;\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -261,7 +256,8 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+      currentComposition =\n+        FallbackCompositionState.getPooled(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (currentComposition) {\n         fallbackData = currentComposition.getData();\n@@ -271,7 +267,7 @@ function extractCompositionEvent(\n \n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -403,16 +399,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n  * `textInput` or fallback behavior.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -432,7 +423,7 @@ function extractBeforeInputEvent(\n \n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -464,33 +455,22 @@ var BeforeInputEventPlugin = {\n \n   eventTypes: eventTypes,\n \n-  /**\n-   * @param {string} topLevelType Record from `EventConstants`.\n-   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n-   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n-   * @param {object} nativeEvent Native browser event.\n-   * @return {*} An accumulation of synthetic events.\n-   * @see {EventPluginHub.extractEvents}\n-   */\n   extractEvents: function(\n     topLevelType,\n-    topLevelTarget,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),"
            },
            {
                "commitId": "f470cb88f88b4667419f170fcc7971dad4298494",
                "additions": 9,
                "deletions": 29,
                "patch": "@@ -227,16 +227,11 @@ function getDataFromCustomEvent(nativeEvent) {\n var currentComposition = null;\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -261,7 +256,8 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+      currentComposition =\n+        FallbackCompositionState.getPooled(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (currentComposition) {\n         fallbackData = currentComposition.getData();\n@@ -271,7 +267,7 @@ function extractCompositionEvent(\n \n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -403,16 +399,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n  * `textInput` or fallback behavior.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -432,7 +423,7 @@ function extractBeforeInputEvent(\n \n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -464,33 +455,22 @@ var BeforeInputEventPlugin = {\n \n   eventTypes: eventTypes,\n \n-  /**\n-   * @param {string} topLevelType Record from `EventConstants`.\n-   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n-   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n-   * @param {object} nativeEvent Native browser event.\n-   * @return {*} An accumulation of synthetic events.\n-   * @see {EventPluginHub.extractEvents}\n-   */\n   extractEvents: function(\n     topLevelType,\n-    topLevelTarget,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),"
            },
            {
                "commitId": "7b1f03f4f8e6ac110565e62035a042cb9a5ca612",
                "additions": 14,
                "deletions": 7,
                "patch": "@@ -237,7 +237,8 @@ function extractCompositionEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var eventType;\n   var fallbackData;\n@@ -271,7 +272,8 @@ function extractCompositionEvent(\n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   if (fallbackData) {\n@@ -411,7 +413,8 @@ function extractBeforeInputEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var chars;\n \n@@ -430,7 +433,8 @@ function extractBeforeInputEvent(\n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   event.data = chars;\n@@ -472,20 +476,23 @@ var BeforeInputEventPlugin = {\n     topLevelType,\n     topLevelTarget,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n     ];\n   },"
            },
            {
                "commitId": "4b804e485db51b49716736ce2dfcf23d020b6eb2",
                "additions": 14,
                "deletions": 7,
                "patch": "@@ -237,7 +237,8 @@ function extractCompositionEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var eventType;\n   var fallbackData;\n@@ -271,7 +272,8 @@ function extractCompositionEvent(\n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   if (fallbackData) {\n@@ -411,7 +413,8 @@ function extractBeforeInputEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var chars;\n \n@@ -430,7 +433,8 @@ function extractBeforeInputEvent(\n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   event.data = chars;\n@@ -472,20 +476,23 @@ var BeforeInputEventPlugin = {\n     topLevelType,\n     topLevelTarget,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n     ];\n   },"
            },
            {
                "commitId": "4c3e9650ba6c9ea90956a08542d9fa9b5d72ee88",
                "additions": 15,
                "deletions": 15,
                "patch": "@@ -78,57 +78,57 @@ var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null})\n+      captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste\n-    ]\n+      topLevelTypes.topPaste,\n+    ],\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null})\n+      captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null})\n+      captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionStart,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null})\n+      captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionUpdate,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n-  }\n+      topLevelTypes.topMouseDown,\n+    ],\n+  },\n };\n \n // Track whether we've ever handled a keypress on the space key.\n@@ -486,9 +486,9 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      )\n+      ),\n     ];\n-  }\n+  },\n };\n \n module.exports = BeforeInputEventPlugin;"
            },
            {
                "commitId": "c089eece509012a444dc770afb5b348b47c62d3a",
                "additions": 15,
                "deletions": 15,
                "patch": "@@ -78,57 +78,57 @@ var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null})\n+      captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste\n-    ]\n+      topLevelTypes.topPaste,\n+    ],\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null})\n+      captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null})\n+      captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionStart,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null})\n+      captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionUpdate,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n-  }\n+      topLevelTypes.topMouseDown,\n+    ],\n+  },\n };\n \n // Track whether we've ever handled a keypress on the space key.\n@@ -486,9 +486,9 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      )\n+      ),\n     ];\n-  }\n+  },\n };\n \n module.exports = BeforeInputEventPlugin;"
            },
            {
                "commitId": "52752446760dee0bc7232b4146f5a309ac57f065",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "0b063f8a09dae4b6b1de400ff2d9aba9108647de",
                "additions": 0,
                "deletions": 0,
                "patch": null
            },
            {
                "commitId": "d59a039ebdebebf5c98ab96026529f66063979bf",
                "additions": 0,
                "deletions": 4,
                "patch": "@@ -131,9 +131,6 @@ var eventTypes = {\n   }\n };\n \n-// Track characters inserted via keypress and composition events.\n-var fallbackBeforeInputChars = null;\n-\n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n \n@@ -437,7 +434,6 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  fallbackBeforeInputChars = null;\n   EventPropagators.accumulateTwoPhaseDispatches(event);\n   return event;\n }"
            },
            {
                "commitId": "dae1dc629272593f342fe22c6c795cb8fdf33d11",
                "additions": 0,
                "deletions": 4,
                "patch": "@@ -131,9 +131,6 @@ var eventTypes = {\n   }\n };\n \n-// Track characters inserted via keypress and composition events.\n-var fallbackBeforeInputChars = null;\n-\n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n \n@@ -437,7 +434,6 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  fallbackBeforeInputChars = null;\n   EventPropagators.accumulateTwoPhaseDispatches(event);\n   return event;\n }"
            },
            {
                "commitId": "2aeb8a2a6beb00617a4217f7f8284924fa2ad819",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013 Facebook, Inc.\n+ * Copyright 2013-2015 Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the"
            },
            {
                "commitId": "3e0750a4ad2444c2df708b144ff0c8af7628881d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013 Facebook, Inc.\n+ * Copyright 2013-2015 Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the"
            },
            {
                "commitId": "54c82da15f6b4717425edbf68e23ae82583a50af",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -10,7 +10,7 @@\n  * @typechecks static-only\n  */\n \n-\"use strict\";\n+'use strict';\n \n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n@@ -256,7 +256,7 @@ function extractCompositionEvent(\n   }\n \n   if (!eventType) {\n-    return;\n+    return null;\n   }\n \n   if (useFallbackCompositionData) {\n@@ -427,7 +427,7 @@ function extractBeforeInputEvent(\n   // If no characters are being inserted, no BeforeInput event should\n   // be fired.\n   if (!chars) {\n-    return;\n+    return null;\n   }\n \n   var event = SyntheticInputEvent.getPooled(\n@@ -490,7 +490,7 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      ),\n+      )\n     ];\n   }\n };"
            },
            {
                "commitId": "47ee780cafa650a61bd62c4a6c13ac5554efd05c",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -256,7 +256,7 @@ function extractCompositionEvent(\n   }\n \n   if (!eventType) {\n-    return;\n+    return null;\n   }\n \n   if (useFallbackCompositionData) {\n@@ -427,7 +427,7 @@ function extractBeforeInputEvent(\n   // If no characters are being inserted, no BeforeInput event should\n   // be fired.\n   if (!chars) {\n-    return;\n+    return null;\n   }\n \n   var event = SyntheticInputEvent.getPooled("
            },
            {
                "commitId": "e27da9973193a06a138d7098c58723a7f10ed2e5",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -490,7 +490,7 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      ),\n+      )\n     ];\n   }\n };"
            },
            {
                "commitId": "df64a67b7f930f90423e194637af624cdc155526",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -10,7 +10,7 @@\n  * @typechecks static-only\n  */\n \n-\"use strict\";\n+'use strict';\n \n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');"
            },
            {
                "commitId": "80ed4d870a628af57dfc6e45bf6d513084f677d7",
                "additions": 389,
                "deletions": 111,
                "patch": "@@ -15,14 +15,44 @@\n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n+var FallbackCompositionState = require('FallbackCompositionState');\n+var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+var START_KEYCODE = 229;\n+\n+var canUseCompositionEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'CompositionEvent' in window\n+);\n+\n+var documentMode = null;\n+if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+  documentMode = document.documentMode;\n+}\n+\n+// Webkit offers a very useful `textInput` event that can be used to\n+// directly represent `beforeInput`. The IE `textinput` event is not as\n+// useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document || isPresto())\n+  !documentMode &&\n+  !isPresto()\n+);\n+\n+// In IE9+, we have access to composition events, but the data supplied\n+// by the native compositionend event may be incorrect. Japanese ideographic\n+// spaces, for instance (\\u3000) are not recorded correctly.\n+var useFallbackCompositionData = (\n+  ExecutionEnvironment.canUseDOM &&\n+  (\n+    !canUseCompositionEvent ||\n+    (documentMode && documentMode > 8 && documentMode <= 11)\n+  )\n );\n \n /**\n@@ -56,11 +86,53 @@ var eventTypes = {\n       topLevelTypes.topTextInput,\n       topLevelTypes.topPaste\n     ]\n+  },\n+  compositionEnd: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionEnd: null}),\n+      captured: keyOf({onCompositionEndCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionStart: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionStart: null}),\n+      captured: keyOf({onCompositionStartCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionStart,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionUpdate: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionUpdate: null}),\n+      captured: keyOf({onCompositionUpdateCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionUpdate,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n   }\n };\n \n // Track characters inserted via keypress and composition events.\n-var fallbackChars = null;\n+var fallbackBeforeInputChars = null;\n \n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n@@ -78,6 +150,298 @@ function isKeypressCommand(nativeEvent) {\n   );\n }\n \n+\n+/**\n+ * Translate native top level events into event types.\n+ *\n+ * @param {string} topLevelType\n+ * @return {object}\n+ */\n+function getCompositionEventType(topLevelType) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionStart:\n+      return eventTypes.compositionStart;\n+    case topLevelTypes.topCompositionEnd:\n+      return eventTypes.compositionEnd;\n+    case topLevelTypes.topCompositionUpdate:\n+      return eventTypes.compositionUpdate;\n+  }\n+}\n+\n+/**\n+ * Does our fallback best-guess model think this event signifies that\n+ * composition has begun?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionStart(topLevelType, nativeEvent) {\n+  return (\n+    topLevelType === topLevelTypes.topKeyDown &&\n+    nativeEvent.keyCode === START_KEYCODE\n+  );\n+}\n+\n+/**\n+ * Does our fallback mode think that this event is the end of composition?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topKeyUp:\n+      // Command keys insert or clear IME input.\n+      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n+    case topLevelTypes.topKeyDown:\n+      // Expect IME keyCode on each keydown. If we get any other\n+      // code we must have exited earlier.\n+      return (nativeEvent.keyCode !== START_KEYCODE);\n+    case topLevelTypes.topKeyPress:\n+    case topLevelTypes.topMouseDown:\n+    case topLevelTypes.topBlur:\n+      // Events are not possible without cancelling IME.\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * Google Input Tools provides composition data via a CustomEvent,\n+ * with the `data` property populated in the `detail` object. If this\n+ * is available on the event object, use it. If not, this is a plain\n+ * composition event and we have nothing special to extract.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {?string}\n+ */\n+function getDataFromCustomEvent(nativeEvent) {\n+  var detail = nativeEvent.detail;\n+  if (typeof detail === 'object' && 'data' in detail) {\n+    return detail.data;\n+  }\n+  return null;\n+}\n+\n+// Track the current IME composition fallback object, if any.\n+var currentComposition = null;\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticCompositionEvent.\n+ */\n+function extractCompositionEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var eventType;\n+  var fallbackData;\n+\n+  if (canUseCompositionEvent) {\n+    eventType = getCompositionEventType(topLevelType);\n+  } else if (!currentComposition) {\n+    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+      eventType = eventTypes.compositionStart;\n+    }\n+  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+    eventType = eventTypes.compositionEnd;\n+  }\n+\n+  if (!eventType) {\n+    return;\n+  }\n+\n+  if (useFallbackCompositionData) {\n+    // The current composition is stored statically and must not be\n+    // overwritten while composition continues.\n+    if (!currentComposition && eventType === eventTypes.compositionStart) {\n+      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+    } else if (eventType === eventTypes.compositionEnd) {\n+      if (currentComposition) {\n+        fallbackData = currentComposition.getData();\n+      }\n+    }\n+  }\n+\n+  var event = SyntheticCompositionEvent.getPooled(\n+    eventType,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  if (fallbackData) {\n+    // Inject data generated from fallback path into the synthetic event.\n+    // This matches the property of native CompositionEventInterface.\n+    event.data = fallbackData;\n+  } else {\n+    var customData = getDataFromCustomEvent(nativeEvent);\n+    if (customData !== null) {\n+      event.data = customData;\n+    }\n+  }\n+\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The string corresponding to this `beforeInput` event.\n+ */\n+function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionEnd:\n+      return getDataFromCustomEvent(nativeEvent);\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * If native `textInput` events are available, our goal is to make\n+       * use of them. However, there is a special case: the spacebar key.\n+       * In Webkit, preventing default on a spacebar `textInput` event\n+       * cancels character insertion, but it *also* causes the browser\n+       * to fall back to its default spacebar behavior of scrolling the\n+       * page.\n+       *\n+       * Tracking at:\n+       * https://code.google.com/p/chromium/issues/detail?id=355103\n+       *\n+       * To avoid this issue, use the keypress event as if no `textInput`\n+       * event is available.\n+       */\n+      var which = nativeEvent.which;\n+      if (which !== SPACEBAR_CODE) {\n+        return null;\n+      }\n+\n+      hasSpaceKeypress = true;\n+      return SPACEBAR_CHAR;\n+\n+    case topLevelTypes.topTextInput:\n+      // Record the characters to be added to the DOM.\n+      var chars = nativeEvent.data;\n+\n+      // If it's a spacebar character, assume that we have already handled\n+      // it at the keypress level and bail immediately. Android Chrome\n+      // doesn't give us keycodes, so we need to blacklist it.\n+      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n+        return null;\n+      }\n+\n+      return chars;\n+\n+    default:\n+      // For other native event types, do nothing.\n+      return null;\n+  }\n+}\n+\n+/**\n+ * For browsers that do not provide the `textInput` event, extract the\n+ * appropriate string to use for SyntheticInputEvent.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The fallback string for this `beforeInput` event.\n+ */\n+function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+  // If we are currently composing (IME) and using a fallback to do so,\n+  // try to extract the composed characters from the fallback object.\n+  if (currentComposition) {\n+    if (\n+      topLevelType === topLevelTypes.topCompositionEnd ||\n+      isFallbackCompositionEnd(topLevelType, nativeEvent)\n+    ) {\n+      var chars = currentComposition.getData();\n+      FallbackCompositionState.release(currentComposition);\n+      currentComposition = null;\n+      return chars;\n+    }\n+    return null;\n+  }\n+\n+  switch (topLevelType) {\n+    case topLevelTypes.topPaste:\n+      // If a paste event occurs after a keypress, throw out the input\n+      // chars. Paste events should not lead to BeforeInput events.\n+      return null;\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * As of v27, Firefox may fire keypress events even when no character\n+       * will be inserted. A few possibilities:\n+       *\n+       * - `which` is `0`. Arrow keys, Esc key, etc.\n+       *\n+       * - `which` is the pressed key code, but no char is available.\n+       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+       *   this key combination and no character is inserted into the\n+       *   document, but FF fires the keypress for char code `100` anyway.\n+       *   No `input` event will occur.\n+       *\n+       * - `which` is the pressed key code, but a command combination is\n+       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+       *   `input` event will occur.\n+       */\n+      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+        return String.fromCharCode(nativeEvent.which);\n+      }\n+      return null;\n+    case topLevelTypes.topCompositionEnd:\n+      return useFallbackCompositionData ? null : nativeEvent.data;\n+    default:\n+      return null;\n+  }\n+}\n+\n+/**\n+ * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n+ * `textInput` or fallback behavior.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticInputEvent.\n+ */\n+function extractBeforeInputEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var chars;\n+\n+  if (canUseTextInputEvent) {\n+    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+  } else {\n+    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+  }\n+\n+  // If no characters are being inserted, no BeforeInput event should\n+  // be fired.\n+  if (!chars) {\n+    return;\n+  }\n+\n+  var event = SyntheticInputEvent.getPooled(\n+    eventTypes.beforeInput,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  event.data = chars;\n+  fallbackBeforeInputChars = null;\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n /**\n  * Create an `onBeforeInput` event to match\n  * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n@@ -91,6 +455,10 @@ function isKeypressCommand(nativeEvent) {\n  * actually been added, contrary to the spec. Thus, `textInput` is the best\n  * available event to identify the characters that have actually been inserted\n  * into the target node.\n+ *\n+ * This plugin is also responsible for emitting `composition` events, thus\n+ * allowing us to share composition fallback code for both `beforeInput` and\n+ * `composition` event types.\n  */\n var BeforeInputEventPlugin = {\n \n@@ -105,115 +473,25 @@ var BeforeInputEventPlugin = {\n    * @see {EventPluginHub.extractEvents}\n    */\n   extractEvents: function(\n-      topLevelType,\n-      topLevelTarget,\n-      topLevelTargetID,\n-      nativeEvent) {\n-\n-    var chars;\n-\n-    if (canUseTextInputEvent) {\n-      switch (topLevelType) {\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * If native `textInput` events are available, our goal is to make\n-           * use of them. However, there is a special case: the spacebar key.\n-           * In Webkit, preventing default on a spacebar `textInput` event\n-           * cancels character insertion, but it *also* causes the browser\n-           * to fall back to its default spacebar behavior of scrolling the\n-           * page.\n-           *\n-           * Tracking at:\n-           * https://code.google.com/p/chromium/issues/detail?id=355103\n-           *\n-           * To avoid this issue, use the keypress event as if no `textInput`\n-           * event is available.\n-           */\n-          var which = nativeEvent.which;\n-          if (which !== SPACEBAR_CODE) {\n-            return;\n-          }\n-\n-          hasSpaceKeypress = true;\n-          chars = SPACEBAR_CHAR;\n-          break;\n-\n-        case topLevelTypes.topTextInput:\n-          // Record the characters to be added to the DOM.\n-          chars = nativeEvent.data;\n-\n-          // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately. Android Chrome\n-          // doesn't give us keycodes, so we need to blacklist it.\n-          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n-            return;\n-          }\n-\n-          // Otherwise, carry on.\n-          break;\n-\n-        default:\n-          // For other native event types, do nothing.\n-          return;\n-      }\n-    } else {\n-      switch (topLevelType) {\n-        case topLevelTypes.topPaste:\n-          // If a paste event occurs after a keypress, throw out the input\n-          // chars. Paste events should not lead to BeforeInput events.\n-          fallbackChars = null;\n-          break;\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * As of v27, Firefox may fire keypress events even when no character\n-           * will be inserted. A few possibilities:\n-           *\n-           * - `which` is `0`. Arrow keys, Esc key, etc.\n-           *\n-           * - `which` is the pressed key code, but no char is available.\n-           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n-           *   this key combination and no character is inserted into the\n-           *   document, but FF fires the keypress for char code `100` anyway.\n-           *   No `input` event will occur.\n-           *\n-           * - `which` is the pressed key code, but a command combination is\n-           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n-           *   `input` event will occur.\n-           */\n-          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-            fallbackChars = String.fromCharCode(nativeEvent.which);\n-          }\n-          break;\n-        case topLevelTypes.topCompositionEnd:\n-          fallbackChars = nativeEvent.data;\n-          break;\n-      }\n-\n-      // If no changes have occurred to the fallback string, no relevant\n-      // event has fired and we're done.\n-      if (fallbackChars === null) {\n-        return;\n-      }\n-\n-      chars = fallbackChars;\n-    }\n-\n-    // If no characters are being inserted, no BeforeInput event should\n-    // be fired.\n-    if (!chars) {\n-      return;\n-    }\n-\n-    var event = SyntheticInputEvent.getPooled(\n-      eventTypes.beforeInput,\n-      topLevelTargetID,\n-      nativeEvent\n-    );\n-\n-    event.data = chars;\n-    fallbackChars = null;\n-    EventPropagators.accumulateTwoPhaseDispatches(event);\n-    return event;\n+    topLevelType,\n+    topLevelTarget,\n+    topLevelTargetID,\n+    nativeEvent\n+  ) {\n+    return [\n+      extractCompositionEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+      extractBeforeInputEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+    ];\n   }\n };\n "
            },
            {
                "commitId": "9ad0e1d846a4fe51f2397333d1df3e0b72d28067",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -34,14 +34,14 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n-// Webkit and Presto offer a very useful `textInput` event that can be used to\n+// Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n-  !isOldPresto()\n+  !isPresto()\n );\n \n // In IE9+, we have access to composition events, but the data supplied\n@@ -59,7 +59,7 @@ var useFallbackCompositionData = (\n  * Opera <= 12 includes TextEvent in window, but does not fire\n  * text input events. Rely on keypress instead.\n  */\n-function isOldPresto() {\n+function isPresto() {\n   var opera = window.opera;\n   return (\n     typeof opera === 'object' &&"
            },
            {
                "commitId": "ddaf215b03cee506c907474578c950367b344062",
                "additions": 390,
                "deletions": 112,
                "patch": "@@ -15,21 +15,51 @@\n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n+var FallbackCompositionState = require('FallbackCompositionState');\n+var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+var START_KEYCODE = 229;\n+\n+var canUseCompositionEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'CompositionEvent' in window\n+);\n+\n+var documentMode = null;\n+if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+  documentMode = document.documentMode;\n+}\n+\n+// Webkit and Presto offer a very useful `textInput` event that can be used to\n+// directly represent `beforeInput`. The IE `textinput` event is not as\n+// useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document || isPresto())\n+  !documentMode &&\n+  !isOldPresto()\n+);\n+\n+// In IE9+, we have access to composition events, but the data supplied\n+// by the native compositionend event may be incorrect. Japanese ideographic\n+// spaces, for instance (\\u3000) are not recorded correctly.\n+var useFallbackCompositionData = (\n+  ExecutionEnvironment.canUseDOM &&\n+  (\n+    !canUseCompositionEvent ||\n+    (documentMode && documentMode > 8 && documentMode <= 11)\n+  )\n );\n \n /**\n  * Opera <= 12 includes TextEvent in window, but does not fire\n  * text input events. Rely on keypress instead.\n  */\n-function isPresto() {\n+function isOldPresto() {\n   var opera = window.opera;\n   return (\n     typeof opera === 'object' &&\n@@ -56,11 +86,53 @@ var eventTypes = {\n       topLevelTypes.topTextInput,\n       topLevelTypes.topPaste\n     ]\n+  },\n+  compositionEnd: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionEnd: null}),\n+      captured: keyOf({onCompositionEndCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionStart: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionStart: null}),\n+      captured: keyOf({onCompositionStartCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionStart,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionUpdate: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionUpdate: null}),\n+      captured: keyOf({onCompositionUpdateCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionUpdate,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n   }\n };\n \n // Track characters inserted via keypress and composition events.\n-var fallbackChars = null;\n+var fallbackBeforeInputChars = null;\n \n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n@@ -78,6 +150,298 @@ function isKeypressCommand(nativeEvent) {\n   );\n }\n \n+\n+/**\n+ * Translate native top level events into event types.\n+ *\n+ * @param {string} topLevelType\n+ * @return {object}\n+ */\n+function getCompositionEventType(topLevelType) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionStart:\n+      return eventTypes.compositionStart;\n+    case topLevelTypes.topCompositionEnd:\n+      return eventTypes.compositionEnd;\n+    case topLevelTypes.topCompositionUpdate:\n+      return eventTypes.compositionUpdate;\n+  }\n+}\n+\n+/**\n+ * Does our fallback best-guess model think this event signifies that\n+ * composition has begun?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionStart(topLevelType, nativeEvent) {\n+  return (\n+    topLevelType === topLevelTypes.topKeyDown &&\n+    nativeEvent.keyCode === START_KEYCODE\n+  );\n+}\n+\n+/**\n+ * Does our fallback mode think that this event is the end of composition?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topKeyUp:\n+      // Command keys insert or clear IME input.\n+      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n+    case topLevelTypes.topKeyDown:\n+      // Expect IME keyCode on each keydown. If we get any other\n+      // code we must have exited earlier.\n+      return (nativeEvent.keyCode !== START_KEYCODE);\n+    case topLevelTypes.topKeyPress:\n+    case topLevelTypes.topMouseDown:\n+    case topLevelTypes.topBlur:\n+      // Events are not possible without cancelling IME.\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * Google Input Tools provides composition data via a CustomEvent,\n+ * with the `data` property populated in the `detail` object. If this\n+ * is available on the event object, use it. If not, this is a plain\n+ * composition event and we have nothing special to extract.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {?string}\n+ */\n+function getDataFromCustomEvent(nativeEvent) {\n+  var detail = nativeEvent.detail;\n+  if (typeof detail === 'object' && 'data' in detail) {\n+    return detail.data;\n+  }\n+  return null;\n+}\n+\n+// Track the current IME composition fallback object, if any.\n+var currentComposition = null;\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticCompositionEvent.\n+ */\n+function extractCompositionEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var eventType;\n+  var fallbackData;\n+\n+  if (canUseCompositionEvent) {\n+    eventType = getCompositionEventType(topLevelType);\n+  } else if (!currentComposition) {\n+    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+      eventType = eventTypes.compositionStart;\n+    }\n+  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+    eventType = eventTypes.compositionEnd;\n+  }\n+\n+  if (!eventType) {\n+    return;\n+  }\n+\n+  if (useFallbackCompositionData) {\n+    // The current composition is stored statically and must not be\n+    // overwritten while composition continues.\n+    if (!currentComposition && eventType === eventTypes.compositionStart) {\n+      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+    } else if (eventType === eventTypes.compositionEnd) {\n+      if (currentComposition) {\n+        fallbackData = currentComposition.getData();\n+      }\n+    }\n+  }\n+\n+  var event = SyntheticCompositionEvent.getPooled(\n+    eventType,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  if (fallbackData) {\n+    // Inject data generated from fallback path into the synthetic event.\n+    // This matches the property of native CompositionEventInterface.\n+    event.data = fallbackData;\n+  } else {\n+    var customData = getDataFromCustomEvent(nativeEvent);\n+    if (customData !== null) {\n+      event.data = customData;\n+    }\n+  }\n+\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The string corresponding to this `beforeInput` event.\n+ */\n+function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionEnd:\n+      return getDataFromCustomEvent(nativeEvent);\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * If native `textInput` events are available, our goal is to make\n+       * use of them. However, there is a special case: the spacebar key.\n+       * In Webkit, preventing default on a spacebar `textInput` event\n+       * cancels character insertion, but it *also* causes the browser\n+       * to fall back to its default spacebar behavior of scrolling the\n+       * page.\n+       *\n+       * Tracking at:\n+       * https://code.google.com/p/chromium/issues/detail?id=355103\n+       *\n+       * To avoid this issue, use the keypress event as if no `textInput`\n+       * event is available.\n+       */\n+      var which = nativeEvent.which;\n+      if (which !== SPACEBAR_CODE) {\n+        return null;\n+      }\n+\n+      hasSpaceKeypress = true;\n+      return SPACEBAR_CHAR;\n+\n+    case topLevelTypes.topTextInput:\n+      // Record the characters to be added to the DOM.\n+      var chars = nativeEvent.data;\n+\n+      // If it's a spacebar character, assume that we have already handled\n+      // it at the keypress level and bail immediately. Android Chrome\n+      // doesn't give us keycodes, so we need to blacklist it.\n+      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n+        return null;\n+      }\n+\n+      return chars;\n+\n+    default:\n+      // For other native event types, do nothing.\n+      return null;\n+  }\n+}\n+\n+/**\n+ * For browsers that do not provide the `textInput` event, extract the\n+ * appropriate string to use for SyntheticInputEvent.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The fallback string for this `beforeInput` event.\n+ */\n+function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+  // If we are currently composing (IME) and using a fallback to do so,\n+  // try to extract the composed characters from the fallback object.\n+  if (currentComposition) {\n+    if (\n+      topLevelType === topLevelTypes.topCompositionEnd ||\n+      isFallbackCompositionEnd(topLevelType, nativeEvent)\n+    ) {\n+      var chars = currentComposition.getData();\n+      FallbackCompositionState.release(currentComposition);\n+      currentComposition = null;\n+      return chars;\n+    }\n+    return null;\n+  }\n+\n+  switch (topLevelType) {\n+    case topLevelTypes.topPaste:\n+      // If a paste event occurs after a keypress, throw out the input\n+      // chars. Paste events should not lead to BeforeInput events.\n+      return null;\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * As of v27, Firefox may fire keypress events even when no character\n+       * will be inserted. A few possibilities:\n+       *\n+       * - `which` is `0`. Arrow keys, Esc key, etc.\n+       *\n+       * - `which` is the pressed key code, but no char is available.\n+       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+       *   this key combination and no character is inserted into the\n+       *   document, but FF fires the keypress for char code `100` anyway.\n+       *   No `input` event will occur.\n+       *\n+       * - `which` is the pressed key code, but a command combination is\n+       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+       *   `input` event will occur.\n+       */\n+      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+        return String.fromCharCode(nativeEvent.which);\n+      }\n+      return null;\n+    case topLevelTypes.topCompositionEnd:\n+      return useFallbackCompositionData ? null : nativeEvent.data;\n+    default:\n+      return null;\n+  }\n+}\n+\n+/**\n+ * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n+ * `textInput` or fallback behavior.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticInputEvent.\n+ */\n+function extractBeforeInputEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var chars;\n+\n+  if (canUseTextInputEvent) {\n+    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+  } else {\n+    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+  }\n+\n+  // If no characters are being inserted, no BeforeInput event should\n+  // be fired.\n+  if (!chars) {\n+    return;\n+  }\n+\n+  var event = SyntheticInputEvent.getPooled(\n+    eventTypes.beforeInput,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  event.data = chars;\n+  fallbackBeforeInputChars = null;\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n /**\n  * Create an `onBeforeInput` event to match\n  * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n@@ -91,6 +455,10 @@ function isKeypressCommand(nativeEvent) {\n  * actually been added, contrary to the spec. Thus, `textInput` is the best\n  * available event to identify the characters that have actually been inserted\n  * into the target node.\n+ *\n+ * This plugin is also responsible for emitting `composition` events, thus\n+ * allowing us to share composition fallback code for both `beforeInput` and\n+ * `composition` event types.\n  */\n var BeforeInputEventPlugin = {\n \n@@ -105,115 +473,25 @@ var BeforeInputEventPlugin = {\n    * @see {EventPluginHub.extractEvents}\n    */\n   extractEvents: function(\n-      topLevelType,\n-      topLevelTarget,\n-      topLevelTargetID,\n-      nativeEvent) {\n-\n-    var chars;\n-\n-    if (canUseTextInputEvent) {\n-      switch (topLevelType) {\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * If native `textInput` events are available, our goal is to make\n-           * use of them. However, there is a special case: the spacebar key.\n-           * In Webkit, preventing default on a spacebar `textInput` event\n-           * cancels character insertion, but it *also* causes the browser\n-           * to fall back to its default spacebar behavior of scrolling the\n-           * page.\n-           *\n-           * Tracking at:\n-           * https://code.google.com/p/chromium/issues/detail?id=355103\n-           *\n-           * To avoid this issue, use the keypress event as if no `textInput`\n-           * event is available.\n-           */\n-          var which = nativeEvent.which;\n-          if (which !== SPACEBAR_CODE) {\n-            return;\n-          }\n-\n-          hasSpaceKeypress = true;\n-          chars = SPACEBAR_CHAR;\n-          break;\n-\n-        case topLevelTypes.topTextInput:\n-          // Record the characters to be added to the DOM.\n-          chars = nativeEvent.data;\n-\n-          // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately. Android Chrome\n-          // doesn't give us keycodes, so we need to blacklist it.\n-          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n-            return;\n-          }\n-\n-          // Otherwise, carry on.\n-          break;\n-\n-        default:\n-          // For other native event types, do nothing.\n-          return;\n-      }\n-    } else {\n-      switch (topLevelType) {\n-        case topLevelTypes.topPaste:\n-          // If a paste event occurs after a keypress, throw out the input\n-          // chars. Paste events should not lead to BeforeInput events.\n-          fallbackChars = null;\n-          break;\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * As of v27, Firefox may fire keypress events even when no character\n-           * will be inserted. A few possibilities:\n-           *\n-           * - `which` is `0`. Arrow keys, Esc key, etc.\n-           *\n-           * - `which` is the pressed key code, but no char is available.\n-           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n-           *   this key combination and no character is inserted into the\n-           *   document, but FF fires the keypress for char code `100` anyway.\n-           *   No `input` event will occur.\n-           *\n-           * - `which` is the pressed key code, but a command combination is\n-           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n-           *   `input` event will occur.\n-           */\n-          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-            fallbackChars = String.fromCharCode(nativeEvent.which);\n-          }\n-          break;\n-        case topLevelTypes.topCompositionEnd:\n-          fallbackChars = nativeEvent.data;\n-          break;\n-      }\n-\n-      // If no changes have occurred to the fallback string, no relevant\n-      // event has fired and we're done.\n-      if (fallbackChars === null) {\n-        return;\n-      }\n-\n-      chars = fallbackChars;\n-    }\n-\n-    // If no characters are being inserted, no BeforeInput event should\n-    // be fired.\n-    if (!chars) {\n-      return;\n-    }\n-\n-    var event = SyntheticInputEvent.getPooled(\n-      eventTypes.beforeInput,\n-      topLevelTargetID,\n-      nativeEvent\n-    );\n-\n-    event.data = chars;\n-    fallbackChars = null;\n-    EventPropagators.accumulateTwoPhaseDispatches(event);\n-    return event;\n+    topLevelType,\n+    topLevelTarget,\n+    topLevelTargetID,\n+    nativeEvent\n+  ) {\n+    return [\n+      extractCompositionEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+      extractBeforeInputEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+    ];\n   }\n };\n "
            },
            {
                "commitId": "b5bcaba77fbe53cafd7c5f6b76752b09791caadf",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only"
            },
            {
                "commitId": "5d3b12bb3bd6a092cf00ede07b8255a8399c2e58",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only"
            },
            {
                "commitId": "dcf415c2b91ce52fd5d4dd02b70875ba9d33290f",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only"
            },
            {
                "commitId": "f71455fb319d1daf5a04cc03357fcd185d9f72ec",
                "additions": 8,
                "deletions": 3,
                "patch": "@@ -69,6 +69,9 @@ var eventTypes = {\n // Track characters inserted via keypress and composition events.\n var fallbackChars = null;\n \n+// Track whether we've ever handled a keypress on the space key.\n+var hasSpaceKeypress = false;\n+\n /**\n  * Return whether a native keypress event is assumed to be a command.\n  * This is required because Firefox fires `keypress` events for key commands\n@@ -138,16 +141,18 @@ var BeforeInputEventPlugin = {\n             return;\n           }\n \n-          chars = String.fromCharCode(which);\n+          hasSpaceKeypress = true;\n+          chars = SPACEBAR_CHAR;\n           break;\n \n         case topLevelTypes.topTextInput:\n           // Record the characters to be added to the DOM.\n           chars = nativeEvent.data;\n \n           // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately.\n-          if (chars === SPACEBAR_CHAR) {\n+          // it at the keypress level and bail immediately. Android Chrome\n+          // doesn't give us keycodes, so we need to blacklist it.\n+          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n             return;\n           }\n "
            },
            {
                "commitId": "468007612f4a6dabb228618d9a3274f067fc2c51",
                "additions": 14,
                "deletions": 1,
                "patch": "@@ -29,9 +29,22 @@ var keyOf = require('keyOf');\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document)\n+  !('documentMode' in document || isPresto())\n );\n \n+/**\n+ * Opera <= 12 includes TextEvent in window, but does not fire\n+ * text input events. Rely on keypress instead.\n+ */\n+function isPresto() {\n+  var opera = window.opera;\n+  return (\n+    typeof opera === 'object' &&\n+    typeof opera.version === 'function' &&\n+    parseInt(opera.version(), 10) <= 12\n+  );\n+}\n+\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n "
            },
            {
                "commitId": "807e3dc42375fbc15c41c847a38acfd518fba7a1",
                "additions": 14,
                "deletions": 1,
                "patch": "@@ -29,9 +29,22 @@ var keyOf = require('keyOf');\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document)\n+  !('documentMode' in document || isPresto())\n );\n \n+/**\n+ * Opera <= 12 includes TextEvent in window, but does not fire\n+ * text input events. Rely on keypress instead.\n+ */\n+function isPresto() {\n+  var opera = window.opera;\n+  return (\n+    typeof opera === 'object' &&\n+    typeof opera.version === 'function' &&\n+    parseInt(opera.version(), 10) <= 12\n+  );\n+}\n+\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n "
            },
            {
                "commitId": "5476f9168beadda74506d37fd779e7e4bca0bc1c",
                "additions": 45,
                "deletions": 7,
                "patch": "@@ -26,12 +26,15 @@ var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n-var useBeforeInputEvent = (\n+var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !('documentMode' in document)\n );\n \n+var SPACEBAR_CODE = 32;\n+var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n+\n var topLevelTypes = EventConstants.topLevelTypes;\n \n // Events and their corresponding property names.\n@@ -100,13 +103,48 @@ var BeforeInputEventPlugin = {\n \n     var chars;\n \n-    if (useBeforeInputEvent) {\n-      // For browsers that support `textInput` events natively, don't do\n-      // anything with keypress, composition, etc.\n-      if (topLevelType !== topLevelTypes.topTextInput) {\n-        return;\n+    if (canUseTextInputEvent) {\n+      switch (topLevelType) {\n+        case topLevelTypes.topKeyPress:\n+          /**\n+           * If native `textInput` events are available, our goal is to make\n+           * use of them. However, there is a special case: the spacebar key.\n+           * In Webkit, preventing default on a spacebar `textInput` event\n+           * cancels character insertion, but it *also* causes the browser\n+           * to fall back to its default spacebar behavior of scrolling the\n+           * page.\n+           *\n+           * Tracking at:\n+           * https://code.google.com/p/chromium/issues/detail?id=355103\n+           *\n+           * To avoid this issue, use the keypress event as if no `textInput`\n+           * event is available.\n+           */\n+          var which = nativeEvent.which;\n+          if (which !== SPACEBAR_CODE) {\n+            return;\n+          }\n+\n+          chars = String.fromCharCode(which);\n+          break;\n+\n+        case topLevelTypes.topTextInput:\n+          // Record the characters to be added to the DOM.\n+          chars = nativeEvent.data;\n+\n+          // If it's a spacebar character, assume that we have already handled\n+          // it at the keypress level and bail immediately.\n+          if (chars === SPACEBAR_CHAR) {\n+            return;\n+          }\n+\n+          // Otherwise, carry on.\n+          break;\n+\n+        default:\n+          // For other native event types, do nothing.\n+          return;\n       }\n-      chars = nativeEvent.data;\n     } else {\n       switch (topLevelType) {\n         case topLevelTypes.topPaste:"
            },
            {
                "commitId": "116ee058ebd76071a8aefcd95254f772ec18605f",
                "additions": 171,
                "deletions": 0,
                "patch": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright 2013 Facebook, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * @providesModule BeforeInputEventPlugin\n+ * @typechecks static-only\n+ */\n+\n+\"use strict\";\n+\n+var EventConstants = require('EventConstants');\n+var EventPropagators = require('EventPropagators');\n+var ExecutionEnvironment = require('ExecutionEnvironment');\n+var SyntheticInputEvent = require('SyntheticInputEvent');\n+\n+var keyOf = require('keyOf');\n+\n+var useBeforeInputEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'TextEvent' in window &&\n+  !('documentMode' in document)\n+);\n+\n+var topLevelTypes = EventConstants.topLevelTypes;\n+\n+// Events and their corresponding property names.\n+var eventTypes = {\n+  beforeInput: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onBeforeInput: null}),\n+      captured: keyOf({onBeforeInputCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topTextInput,\n+      topLevelTypes.topPaste\n+    ]\n+  }\n+};\n+\n+// Track characters inserted via keypress and composition events.\n+var fallbackChars = null;\n+\n+/**\n+ * Return whether a native keypress event is assumed to be a command.\n+ * This is required because Firefox fires `keypress` events for key commands\n+ * (cut, copy, select-all, etc.) even though no character is inserted.\n+ */\n+function isKeypressCommand(nativeEvent) {\n+  return (\n+    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n+    // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n+    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n+  );\n+}\n+\n+/**\n+ * Create an `onBeforeInput` event to match\n+ * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n+ *\n+ * This event plugin is based on the native `textInput` event\n+ * available in Chrome, Safari, Opera, and IE. This event fires after\n+ * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n+ *\n+ * `beforeInput` is spec'd but not implemented in any browsers, and\n+ * the `input` event does not provide any useful information about what has\n+ * actually been added, contrary to the spec. Thus, `textInput` is the best\n+ * available event to identify the characters that have actually been inserted\n+ * into the target node.\n+ */\n+var BeforeInputEventPlugin = {\n+\n+  eventTypes: eventTypes,\n+\n+  /**\n+   * @param {string} topLevelType Record from `EventConstants`.\n+   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+   * @param {object} nativeEvent Native browser event.\n+   * @return {*} An accumulation of synthetic events.\n+   * @see {EventPluginHub.extractEvents}\n+   */\n+  extractEvents: function(\n+      topLevelType,\n+      topLevelTarget,\n+      topLevelTargetID,\n+      nativeEvent) {\n+\n+    var chars;\n+\n+    if (useBeforeInputEvent) {\n+      // For browsers that support `textInput` events natively, don't do\n+      // anything with keypress, composition, etc.\n+      if (topLevelType !== topLevelTypes.topTextInput) {\n+        return;\n+      }\n+      chars = nativeEvent.data;\n+    } else {\n+      switch (topLevelType) {\n+        case topLevelTypes.topPaste:\n+          // If a paste event occurs after a keypress, throw out the input\n+          // chars. Paste events should not lead to BeforeInput events.\n+          fallbackChars = null;\n+          break;\n+        case topLevelTypes.topKeyPress:\n+          /**\n+           * As of v27, Firefox may fire keypress events even when no character\n+           * will be inserted. A few possibilities:\n+           *\n+           * - `which` is `0`. Arrow keys, Esc key, etc.\n+           *\n+           * - `which` is the pressed key code, but no char is available.\n+           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+           *   this key combination and no character is inserted into the\n+           *   document, but FF fires the keypress for char code `100` anyway.\n+           *   No `input` event will occur.\n+           *\n+           * - `which` is the pressed key code, but a command combination is\n+           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+           *   `input` event will occur.\n+           */\n+          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+            fallbackChars = String.fromCharCode(nativeEvent.which);\n+          }\n+          break;\n+        case topLevelTypes.topCompositionEnd:\n+          fallbackChars = nativeEvent.data;\n+          break;\n+      }\n+\n+      // If no changes have occurred to the fallback string, no relevant\n+      // event has fired and we're done.\n+      if (fallbackChars === null) {\n+        return;\n+      }\n+\n+      chars = fallbackChars;\n+    }\n+\n+    // If no characters are being inserted, no BeforeInput event should\n+    // be fired.\n+    if (!chars) {\n+      return;\n+    }\n+\n+    var event = SyntheticInputEvent.getPooled(\n+      eventTypes.beforeInput,\n+      topLevelTargetID,\n+      nativeEvent\n+    );\n+\n+    event.data = chars;\n+    fallbackChars = null;\n+    EventPropagators.accumulateTwoPhaseDispatches(event);\n+    return event;\n+  }\n+};\n+\n+module.exports = BeforeInputEventPlugin;"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "give me all the commits for React.js file?",
        "number": 6,
        "category": 2,
        "response": "Here are all the commits for the `React.js` file:\n\n1. **Commit ID:** ce2bc58a9f6f3b0bfc8c738a0d8e2a5f3a332ff5\n   - **Message:** \"[activity] rename unstable_Offscreen to unstable_Activity (#27640)\n     `Activity` is the current candidate name. This PR starts the rename work by renaming the exported unstable component name.\n     NOTE: downstream consumers need to rename the import when updating to this commit.\"\n   - **Date:** 2023-11-02T20:13:21Z\n\n2. **Commit ID:** bfefb228422f7264a29b3a6b98ec95e05925e80e\n   - **Message:** \"Upgrade Server Actions to canary (#27459)\n     Upgrades the stability of Server Actions from experimental to canary.\n     - Turns on enableAsyncActions and enableFormActions\n     - Removes 'experimental_' prefix from useOptimistic, useFormStatus, and useFormState\"\n   - **Date:** 2023-10-04T18:51:36Z\n\n3. **Commit ID:** c7ba8c098889b6dc47fa9c807bbba3975a658584\n   - **Message:** \"Enforce that the 'react-server' build of 'react' is used (#27436)\n     I do this by simply renaming the secret export name in the 'subset' bundle and this renamed version is what the FlightServer uses.\n     This requires us to be more diligent about always using the correct instance of 'react' in our tests so there's a bunch of clean up for that.\"\n   - **Date:** 2023-09-29T22:24:05Z\n\n4. **Commit ID:** ac1a16c67e268fcb2c52e91717cbc918c7c24446\n   - **Message:** \"Add Postpone API (#27238)\n     This adds an experimental `unstable_postpone(reason)` API.\n     Currently, we don't have a way to model effectively an Infinite Promise. I.e. something that suspends but never resolves. The reason this is useful is because you might have something else that unblocks it later.\"\n   - **Date:** 2023-08-17T17:26:14Z\n\n5. **Commit ID:** eb2c2f7c2cf2652a168c2b433d2989131c69754b\n   - **Message:** \"rename SuspenseList export to unstable_SuspenseList (#27061)\n     The conversation yesterday began discussing this in the context of the fb-specific packages, but changing it there without updating everywhere else leads to test failures, so here the change is made across packages.\"\n   - **Date:** 2023-07-06T18:09:53Z\n\n6. **Commit ID:** 80d9a40114bb43c07d021e8254790852f450bd2b\n   - **Message:** \"Remove useMutableSource (#27011)\n     This PR cleans up `useMutableSource`. This has been blocked by a remaining dependency internally at Meta, but that has now been deleted.\"\n   - **Date:** 2023-06-27T16:45:46Z\n\n7. **Commit ID:** b7972822b5887d05ae772ef757a453265b4b7aec\n   - **Message:** \"useOptimisticState -> useOptimistic (#26772)\n     Drop the 'state'. Just 'useOptimistic'. Its cleaner.\n     This is still an experimental API. May not be the final name.\"\n   - **Date:** 2023-05-03T18:26:00Z\n\n8. **Commit ID:** 491aec5d6113ce5bae7c10966bc38a4a8fc091a8\n   - **Message:** \"Implement experimental_useOptimisticState (#26740)\n     This adds an experimental hook tentatively called useOptimisticState. The headline feature is that you can use it to implement optimistic updates.\"\n   - **Date:** 2023-05-01T17:19:20Z\n\n9. **Commit ID:** 84a0a171ea0ecd25e287bd3d3dd30e932beb4677\n   - **Message:** \"Rename experimental useEvent to useEffectEvent (#25881)\n     We originally had grand plans for using this Event concept for more but now it's only meant to be used in combination with effects.\"\n   - **Date:** 2022-12-14T20:08:29Z\n\n10. **Commit ID:** e7c5af45ceb8fa2b64d39ec68345254ce9abd65e\n    - **Message:** \"Update cache() and use() to the canary aka next channel (#25502)\n      Testing what it would look like to move this to the `next` channel.\"\n    - **Date:** 2022-10-24T03:20:52Z",
        "chain_of_thought": "To address the question, we need to find all commits associated with a file named \"React.js\". The schema indicates that the relevant nodes are the Commit and File nodes, and the relationship between them is the changed relationship. We need to match the File node with the name \"React.js\" and find all Commit nodes connected to it through the changed relationship.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'React.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS commitDate\n```\n\nThis query will return the commit ID, message, and committed date for each commit that has modified the file named \"React.js\".",
        "query": "cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'React.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS commitDate\n",
        "result": [
            {
                "commitId": "ce2bc58a9f6f3b0bfc8c738a0d8e2a5f3a332ff5",
                "commitMessage": "\"[activity] rename unstable_Offscreen to unstable_Activity (#27640)\n\n`Activity` is the current candidate name. This PR starts the rename work\r\nby renaming the exported unstable component name.\r\n\r\nNOTE: downstream consumers need to rename the import when updating to\r\nthis commit.\"",
                "commitDate": "2023-11-02T20:13:21Z"
            },
            {
                "commitId": "bfefb228422f7264a29b3a6b98ec95e05925e80e",
                "commitMessage": "\"Upgrade Server Actions to canary (#27459)\n\nUpgrades the stability of Server Actions from experimental to canary.\r\n\r\n- Turns on enableAsyncActions and enableFormActions\r\n- Removes \"experimental_\" prefix from useOptimistic, useFormStatus, and\r\nuseFormState\"",
                "commitDate": "2023-10-04T18:51:36Z"
            },
            {
                "commitId": "c7ba8c098889b6dc47fa9c807bbba3975a658584",
                "commitMessage": "\"Enforce that the \"react-server\" build of \"react\" is used (#27436)\n\nI do this by simply renaming the secret export name in the \"subset\"\r\nbundle and this renamed version is what the FlightServer uses.\r\n\r\nThis requires us to be more diligent about always using the correct\r\ninstance of \"react\" in our tests so theres a bunch of clean up for\r\nthat.\"",
                "commitDate": "2023-09-29T22:24:05Z"
            },
            {
                "commitId": "ac1a16c67e268fcb2c52e91717cbc918c7c24446",
                "commitMessage": "\"Add Postpone API (#27238)\n\nThis adds an experimental `unstable_postpone(reason)` API.\r\n\r\nCurrently we dont have a way to model effectively an Infinite Promise.\r\nI.e. something that suspends but never resolves. The reason this is\r\nuseful is because you might have something else that unblocks it later.\r\nE.g. by updating in place later, or by client rendering.\r\n\r\nOn the client this works to model as an Infinite Promise (in fact,\r\nthats what this implementation does). However, in Fizz and Flight that\r\ndoesnt work because the stream needs to end at some point. We dont\r\nhave any way of knowing that were suspended on infinite promises. Its\r\nnot enough to tag the promises because you could await those and thus\r\ncreating new promises. The only way we really have to signal this\r\nthrough a series of indirections like async functions, is by throwing.\r\nIts not 100% safe because these values can be caught but its the best\r\nwe can do.\r\n\r\nEffectively `postpone(reason)` behaves like a built-in [Catch\r\nBoundary](https://github.com/facebook/react/pull/26854). Its like\r\n`raise(Postpone, reason)` except its built-in so it needs to be able to\r\nbe encoded and caught by Suspense boundaries.\r\n\r\nIn Flight and Fizz these behave pretty much the same as errors. Flight\r\njust forwards it to retrigger on the client. In Fizz they just trigger\r\nclient rendering which itself might just postpone again or fill in the\r\nvalue. The difference is how they get logged.\r\n\r\nIn Flight and Fizz they log to `onPostpone(reason)` instead of\r\n`onError(error)`. This log is meant to help find deopts on the server\r\nlike finding places where you fall back to client rendering. The reason\r\nthat you pass in is for that purpose to help the reason for any deopts.\r\n\r\nI do track the stack trace in DEV but I dont currently expose it to\r\n`onPostpone`. This seems like a limitation. It might be better to expose\r\nthe Postpone object which is an Error object but thats more of an\r\nimplementation detail. I could also pass it as a second argument.\r\n\r\nOn the client after hydration they dont get passed to\r\n`onRecoverableError`. Theres no global `onPostpone` API to capture\r\npostponed things on the client just like theres no `onError`. At that\r\npoint its just assumed to be intentional. It doesnt have any `digest`\r\nor reason passed to the client since its not logged.\r\n\r\nThere are some hacky solutions that currently just tries to reuse as\r\nmuch of the existing code as possible but should be more properly\r\nimplemented.\r\n- Fiber is currently just converting it to a fake Promise object so that\r\nit behaves like an infinite Promise.\r\n- Fizz is encoding the magic digest string `\"POSTPONE\"` in the HTML so\r\nwe know to ignore it but it should probably just be something neater\r\nthat doesnt share namespace with digests.\r\n\r\nNext I plan on using this in the `/static` entry points for additional\r\nfeatures.\r\n\r\nWhy \"postpone\"? Its basically a synonym to \"defer\" but we plan on using\r\n\"defer\" for other purposes and its overloaded anyway.\"",
                "commitDate": "2023-08-17T17:26:14Z"
            },
            {
                "commitId": "eb2c2f7c2cf2652a168c2b433d2989131c69754b",
                "commitMessage": "\"rename SuspenseList export to unstable_SuspenseList (#27061)\n\n## Summary\r\n\r\nas we began [discussing\r\nyesterday](https://github.com/facebook/react/pull/27056#discussion_r1253282784),\r\n`SuspenseList` is not actually stable yet, and should likely be exported\r\nwith the `unstable_` prefix.\r\n\r\nthe conversation yesterday began discussing this in the context of the\r\nfb-specific packages, but changing it there without updating everywhere\r\nelse leads to test failures, so here the change is made across packages.\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn flow dom-browser\r\nyarn test\r\n```\"",
                "commitDate": "2023-07-06T18:09:53Z"
            },
            {
                "commitId": "80d9a40114bb43c07d021e8254790852f450bd2b",
                "commitMessage": "\"Remove useMutableSource (#27011)\n\n## Summary\r\n\r\nThis PR cleans up `useMutableSource`. This has been blocked by a\r\nremaining dependency internally at Meta, but that has now been deleted.\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn flow\r\nyarn lint\r\nyarn test --prod\r\n```\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\"",
                "commitDate": "2023-06-27T16:45:46Z"
            },
            {
                "commitId": "b7972822b5887d05ae772ef757a453265b4b7aec",
                "commitMessage": "\"useOptimisticState -> useOptimistic (#26772)\n\nDrop the \"state\". Just \"useOptimistic\". Its cleaner.\r\n\r\nThis is still an experimental API. May not be the final name.\"",
                "commitDate": "2023-05-03T18:26:00Z"
            },
            {
                "commitId": "491aec5d6113ce5bae7c10966bc38a4a8fc091a8",
                "commitMessage": "\"Implement experimental_useOptimisticState (#26740)\n\nThis adds an experimental hook tentatively called useOptimisticState.\r\n(The actual name needs some bikeshedding.)\r\n\r\nThe headline feature is that you can use it to implement optimistic\r\nupdates. If you set some optimistic state during a transition/action,\r\nthe state will be automatically reverted once the transition completes.\r\n\r\nAnother feature is that the optimistic updates will be continually\r\nrebased on top of the latest state.\r\n\r\nIts easiest to explain with examples; well publish documentation as\r\nthe API gets closer to stabilizing. See tests for now.\r\n\r\nTechnically the use cases for this hook are broader than just optimistic\r\nupdates; you could use it implement any sort of \"pending\" state, such as\r\nthe ones exposed by useTransition and useFormStatus. But we expect\r\npeople will most often reach for this hook to implement the optimistic\r\nupdate pattern; simpler cases are covered by those other hooks.\"",
                "commitDate": "2023-05-01T17:19:20Z"
            },
            {
                "commitId": "84a0a171ea0ecd25e287bd3d3dd30e932beb4677",
                "commitMessage": "\"Rename experimental useEvent to useEffectEvent (#25881)\n\nWe originally had grand plans for using this Event concept for more but\r\nnow its only meant to be used in combination with effects.\r\n\r\nIts an Event in the FRP terms, that is triggered from an Effect.\r\nTechnically it can also be from another function that itself is\r\ntriggered from an existing side-effect but thats kind of an advanced\r\ncase.\r\n\r\nThe canonical case is an effect that triggers an event:\r\n\r\n```js\r\nconst onHappened = useEffectEvent(() => ...);\r\nuseEffect(() => {\r\n  onHappened();\r\n}, []);\r\n```\"",
                "commitDate": "2022-12-14T20:08:29Z"
            },
            {
                "commitId": "e7c5af45ceb8fa2b64d39ec68345254ce9abd65e",
                "commitMessage": "\"Update cache() and use() to the canary aka next channel (#25502)\n\nTesting what it would look like to move this to the `next` channel.\"",
                "commitDate": "2022-10-24T03:20:52Z"
            },
            {
                "commitId": "caa84c8da0aed390ec25783e577d91711dfd6bcc",
                "commitMessage": "\"Revert fetch instrumentation to only RSC (#25540)\n\nRevert fetch instrumentation so that it only affects RSC by applying it\r\nonly in the react-server condition of \"react\".\r\n\r\nThis helps make the rollout a little smoother because these affects\r\nexisting libraries that fetch during client components, and then gets\r\nforever cached. We need to implement the GC first.\r\n\r\nI havent fully implemented the SSR part anyway.\r\n\r\nThe main problem that we discovered is that `\"react\"` and\r\n`\"react/react.shared-subset\"` have separate dispatchers in an\r\nenvironment that runs both Fizz and Flight. Thats intentional and\r\nsometimes a feature. However, in this case it means that we instrument\r\nfetch twice and when you run Flight inside Fizz, that fetch goes into\r\nboth caches when its supposed to only see the inner one. Im not sure\r\nhow to solve that atm.\"",
                "commitDate": "2022-10-23T02:58:30Z"
            },
            {
                "commitId": "65e32e58b6057db1fdfed95a942fad4fc96da191",
                "commitMessage": "\"Add fetch Instrumentation to Dedupe Fetches (#25516)\n\n* Add fetch instrumentation in cached contexts\r\n\r\n* Avoid unhandled rejection errors for Promises that we intentionally ignore\r\n\r\nIn the final passes, we ignore the newly generated Promises and use\r\nthe previous ones. This ensures that if those generate errors, that we\r\nintentionally ignore those.\r\n\r\n* Add extra fetch properties if there were any\"",
                "commitDate": "2022-10-19T22:37:00Z"
            },
            {
                "commitId": "8e2bde6f2751aa6335f3cef488c05c3ea08e074a",
                "commitMessage": "\"Add cache() API (#25506)\n\nLike memo() but longer lived.\"",
                "commitDate": "2022-10-18T20:55:06Z"
            },
            {
                "commitId": "0a3072278ee5fb46ddb58e6f5ba9e2b78f6f715a",
                "commitMessage": "\"Flow: complete types first migration (#25389)\n\nThis complete the \"types first\" migration and enables the config everywhere.\"",
                "commitDate": "2022-10-04T01:59:33Z"
            },
            {
                "commitId": "c91a1e03be54733a7dbfcb5663d7a9e8606ab1c1",
                "commitMessage": "\"experimental_useEvent (#25229)\n\nThis commit adds a new hook `useEvent` per the RFC [here](https://github.com/reactjs/rfcs/pull/220), gated as experimental. \r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>\r\nCo-authored-by: Lauren Tan <poteto@users.noreply.github.com>\"",
                "commitDate": "2022-09-14T18:39:06Z"
            },
            {
                "commitId": "b6978bc38f6788c7e73982b9fd2771aabdf36f15",
                "commitMessage": "\"experimental_use(promise) (#25084)\n\n* Internal `act`: Unwrapping resolved promises\r\n\r\nThis update our internal implementation of `act` to support Reacts new\r\nbehavior for unwrapping promises. Like we did with Scheduler, when \r\nsomething suspends, it will yield to the main thread so the microtasks\r\ncan run, then continue in a new task.\r\n\r\nI need to implement the same behavior in the public version of `act`,\r\nbut there are some additional considerations so Ill do that in a\r\nseparate commit.\r\n\r\n* Move throwException to after work loop resumes\r\n\r\nthrowException is the function that finds the nearest boundary and\r\nschedules it for a second render pass. We should only call it right \r\nbefore we unwind the stack \u2014 not if we receive an immediate ping and\r\nrender the fiber again.\r\n\r\nThis was an oversight in 8ef3a7c that I didnt notice because it happens\r\nto mostly work, anyway. What made me notice the mistake is that\r\nthrowException also marks the entire render phase as suspended\r\n(RootDidSuspend or RootDidSuspendWithDelay), which is only supposed to\r\nbe happen if we show a fallback. One consequence was that, in the \r\nRootDidSuspendWithDelay case, the entire commit phase was blocked,\r\nbecause thats the exit status we use to block a bad fallback\r\nfrom appearing.\r\n\r\n* Use expando to check whether promise has resolved\r\n\r\nAdd a `status` expando to a thrown thenable to track when its value has\r\nresolved.\r\n\r\nIn a later step, well also use `value` and `reason` expandos to track\r\nthe resolved value.\r\n\r\nThis is not part of the official JavaScript spec \u2014 think of\r\nit as an extension of the Promise API, or a custom interface that is a\r\nsuperset of Thenable. However, its inspired by the terminology used\r\nby `Promise.allSettled`.\r\n\r\nThe intent is that this will be a public API \u2014 Suspense implementations\r\ncan set these expandos to allow React to unwrap the value synchronously\r\nwithout waiting a microtask.\r\n\r\n* Scaffolding for `experimental_use` hook\r\n\r\nSets up a new experimental hook behind a feature flag, but does not\r\nimplement it yet.\r\n\r\n* use(promise)\r\n\r\nAdds experimental support to Fiber for unwrapping the value of a promise\r\ninside a component. It is not yet implemented for Server Components, \r\nbut that is planned.\r\n\r\nIf promise has already resolved, the value can be unwrapped\r\n\"immediately\" without showing a fallback. The trick we use to implement\r\nthis is to yield to the main thread (literally suspending the work\r\nloop), wait for the microtask queue to drain, then check if the promise\r\nresolved in the meantime. If so, we can resume the last attempted fiber\r\nwithout unwinding the stack. This functionality was implemented in \r\nprevious commits.\r\n\r\nAnother feature is that the promises do not need to be cached between\r\nattempts. Because we assume idempotent execution of components, React\r\nwill track the promises that were used during the previous attempt and\r\nreuse the result. You shouldnt rely on this property, but during\r\ninitial render it mostly just works. Updates are trickier, though,\r\nbecause if you used an uncached promise, we have no way of knowing \r\nwhether the underlying data has changed, so we have to unwrap the\r\npromise every time. It will still work, but its inefficient and can\r\nlead to unnecessary fallbacks if it happens during a discrete update.\r\n\r\nWhen we implement this for Server Components, this will be less of an\r\nissue because there are no updates in that environment. However, its\r\nstill better for performance to cache data requests, so the same\r\nprinciples largely apply.\r\n\r\nThe intention is that this will eventually be the only supported way to\r\nsuspend on arbitrary promises. Throwing a promise directly will\r\nbe deprecated.\"",
                "commitDate": "2022-08-25T18:12:07Z"
            },
            {
                "commitId": "9e67e7a31582079263665fac0391220b99d8bb86",
                "commitMessage": "\"Scaffolding for useMemoCache hook (#25123)\n\n* Scaffolding for useMemoCache hook\r\n* cleanup leftovers from copy/paste of use() diff\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "commitDate": "2022-08-23T08:36:02Z"
            },
            {
                "commitId": "d5f1b067c8bbb826b823d0354a28ba31078b70c0",
                "commitMessage": "\"[ServerContext] Flight support for ServerContext (#23244)\n\n* Flight side of server context\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* reinline\r\n\r\n* rebase\r\n\r\n* add back changes lost due to rebase being hard\r\n\r\n* emit chunk for provider\r\n\r\n* remove case for React provider type\r\n\r\n* update type for SomeChunk\r\n\r\n* enable flag with experimental\r\n\r\n* add missing types\r\n\r\n* fix flow type\r\n\r\n* missing type\r\n\r\n* t: any\r\n\r\n* revert extraneous type change\r\n\r\n* better type\r\n\r\n* better type\r\n\r\n* feedback\r\n\r\n* change import to type import\r\n\r\n* test?\r\n\r\n* test?\r\n\r\n* remove react-dom\r\n\r\n* remove react-native-renderer from react-server-native-relay/package.json\r\n\r\n* gate change in FiberNewContext, getComponentNameFromType, use switch statement in FlightServer\r\n\r\n* getComponentNameFromTpe: server context type gated and use displayName if available\r\n\r\n* fallthrough\r\n\r\n* lint....\r\n\r\n* POP\r\n\r\n* lint\"",
                "commitDate": "2022-03-08T12:55:32Z"
            },
            {
                "commitId": "a6987bee730052dccdddd4645e15b1ce458fd9a6",
                "commitMessage": "\"add <TracingMarker> component boilerplate (#23275)\n\n- Add Tracing Marker component type to React exports\r\n- Add reconciler work tag\r\n- Add devtools work tag\r\n- Add boilerplate for the cache to render children\r\n\r\nNo functionality yet\"",
                "commitDate": "2022-02-11T16:42:55Z"
            },
            {
                "commitId": "5cccacd131242bdea2c2fe4b33fac50d2e3132b4",
                "commitMessage": "\"Upgrade useId to alpha channel (#22674)\"",
                "commitDate": "2021-11-01T22:26:42Z"
            },
            {
                "commitId": "75f3ddebfa0d9885ce8df42571cf0c09ad6c0a3b",
                "commitMessage": "\"Remove experimental useOpaqueIdentifier API (#22672)\n\nuseId is the updated version of this API.\"",
                "commitDate": "2021-11-01T22:02:39Z"
            },
            {
                "commitId": "ebf9ae8579230e7b1ed0b1d243e1cf802f56938b",
                "commitMessage": "\"useId (#22644)\n\n* Add useId to dispatcher\r\n\r\n* Initial useId implementation\r\n\r\nIds are base 32 strings whose binary representation corresponds to the\r\nposition of a node in a tree.\r\n\r\nEvery time the tree forks into multiple children, we add additional bits\r\nto the left of the sequence that represent the position of the child\r\nwithin the current level of children.\r\n\r\n    00101       00010001011010101\r\n    \u2570\u2500\u252c\u2500\u256f       \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\r\n  Fork 5 of 20       Parent id\r\n\r\nThe leading 0s are important. In the above example, you only need 3 bits\r\nto represent slot 5. However, you need 5 bits to represent all the forks\r\nat the current level, so we must account for the empty bits at the end.\r\n\r\nFor this same reason, slots are 1-indexed instead of 0-indexed.\r\nOtherwise, the zeroth id at a level would be indistinguishable from\r\nits parent.\r\n\r\nIf a node has only one child, and does not materialize an id (i.e. does\r\nnot contain a useId hook), then we dont need to allocate any space in\r\nthe sequence. Its treated as a transparent indirection. For example,\r\nthese two trees produce the same ids:\r\n\r\n<>                          <>\r\n  <Indirection>               <A />\r\n    <A />                     <B />\r\n  </Indirection>            </>\r\n  <B />\r\n</>\r\n\r\nHowever, we cannot skip any materializes an id. Otherwise, a parent id\r\nthat does not fork would be indistinguishable from its child id. For\r\nexample, this tree does not fork, but the parent and child must have\r\ndifferent ids.\r\n\r\n<Parent>\r\n  <Child />\r\n</Parent>\r\n\r\nTo handle this scenario, every time we materialize an id, we allocate a\r\nnew level with a single slot. You can think of this as a fork with only\r\none prong, or an array of children with length 1.\r\n\r\nIts possible for the the size of the sequence to exceed 32 bits, the\r\nmax size for bitwise operations. When this happens, we make more room by\r\nconverting the right part of the id to a string and storing it in an\r\noverflow variable. We use a base 32 string representation, because 32 is\r\nthe largest power of 2 that is supported by toString(). We want the base\r\nto be large so that the resulting ids are compact, and we want the base\r\nto be a power of 2 because every log2(base) bits corresponds to a single\r\ncharacter, i.e. every log2(32) = 5 bits. That means we can lop bits off\r\nthe end 5 at a time without affecting the final result.\r\n\r\n* Incremental hydration\r\n\r\nStores the tree context on the dehydrated Suspense boundarys state\r\nobject so it resume where it left off.\r\n\r\n* Add useId to react-debug-tools\r\n\r\n* Add selective hydration test\r\n\r\nDemonstrates that selective hydration works and ids are preserved even\r\nafter subsequent client updates.\"",
                "commitDate": "2021-11-01T20:30:44Z"
            },
            {
                "commitId": "fa9bea0c41ccfef5b528ef9b5517607f9f94c52a",
                "commitMessage": "\"Initial implementation of cache cleanup (#22510)\n\nThis is an initial, partial implementation of a cleanup mechanism for the experimental Cache API. The idea is that consumers of the Cache API can register to be informed when a given Cache instance is no longer needed so that they can perform associated cleanup tasks to free resources stored in the cache. A canonical example would be cancelling pending network requests.\r\n\r\nAn overview of the high-level changes:\r\n\r\n* Changes the `Cache` type from a Map of cache instances to be an object with the original Map of instances, a reference count (to count roughly \"active references\" to the cache instances - more below), and an AbortController.\r\n* Adds a new public API, `unstable_getCacheSignal(): AbortSignal`, which is callable during render. It returns an AbortSignal tied to the lifetime of the cache - developers can listen for the abort event on the signal, which React now triggers when a given cache instance is no longer referenced. \r\n  * Note that `AbortSignal` is a web standard that is supported by other platform APIs; for example a signal can be passed to `fetch()` to trigger cancellation of an HTTP request.\r\n* Implements the above - triggering the abort event - by handling passive mount/unmount for HostRoot and CacheComponent fiber nodes.\r\n\r\nCases handled:\r\n* Aborted transitions: we clean up a new cache created for an aborted transition\r\n* Suspense: we retain a fresh cache instance until a suspended tree resolves\r\n\r\nFor follow-ups:\r\n* When a subsequent cache refresh is issued before a previous refresh completes, the refreshes are queued. Fresh cache instances for previous refreshes in the queue should be cleared, retaining only the most recent cache. I plan to address this in a follow-up PR.\r\n* If a refresh is cancelled, the fresh cache should be cleaned up.\"",
                "commitDate": "2021-10-21T21:11:42Z"
            },
            {
                "commitId": "02f411578a8e58af8ec28e385f6b0dcb768cdc41",
                "commitMessage": "\"Upgrade useInsertionEffect to stable (#22589)\n\n@huozhi tried this out and says its working as expected. I think we\r\ncan go ahead and move this into the stable channel, so that it is\r\navailable in the React 18 alpha releases.\"",
                "commitDate": "2021-10-19T21:32:54Z"
            },
            {
                "commitId": "82c8fa90be86fc0afcbff2dc39486579cff1ac9a",
                "commitMessage": "\"Add back useMutableSource temporarily (#22396)\n\nRecoil uses useMutableSource behind a flag. I thought this was fine\r\nbecause Recoil isnt used in any concurrent roots, so the behavior\r\nwould be the same, but it turns out that it is used by concurrent\r\nroots in a few places.\r\n\r\nIm not expecting it to be hard to migrate to useSyncExternalStore, but\r\nto de-risk the change Im going to roll it out gradually with a flag. In\r\nthe meantime, Ive added back the useMutableSource API.\"",
                "commitDate": "2021-09-22T03:38:24Z"
            },
            {
                "commitId": "8209de269531767b33d8db26eda41db38bfb6a27",
                "commitMessage": "\"Delete useMutableSource implementation (#22292)\n\nThis API was replaced by useSyncExternalStore\"",
                "commitDate": "2021-09-20T04:11:50Z"
            },
            {
                "commitId": "263cfa6ecb9879ecb629d4e04a8c26422b4c4ff9",
                "commitMessage": "\"[Experimental] Add useInsertionEffect (#21913)\"",
                "commitDate": "2021-09-14T14:27:09Z"
            },
            {
                "commitId": "77912d9a05d7a90287fabdec76486f25869b2981",
                "commitMessage": "\"Wire up the native API for useSyncExternalStore (#22237)\n\nAdds useSyncExternalStore to the internal dispatcher, and exports\r\nthe native API from the React package without yet implementing it.\"",
                "commitDate": "2021-09-07T17:20:24Z"
            },
            {
                "commitId": "06f7b4f43a93eae9111cfbd972ab1ae1148f6afb",
                "commitMessage": "\"`act` should work without mock Scheduler (#21714)\n\nCurrently, in a React 18 root, `act` only works if you mock the\r\nScheduler package. This was because we didnt want to add additional\r\nchecks at runtime.\r\n\r\nBut now that the `act` testing API is dev-only, we can simplify its\r\nimplementation.\r\n\r\nNow when an update is wrapped with `act`, React will bypass Scheduler\r\nentirely and push its tasks onto a special internal queue. Then, when\r\nthe outermost `act` scope exists, well flush that queue.\r\n\r\nI also removed the \"wrong act\" warning, because the plan is to move\r\n`act` to an isomorphic entry point, simlar to `startTransition`. Thats\r\nnot directly related to this PR, but I didnt want to bother\r\nre-implementing that warning only to immediately remove it.\r\n\r\nIll add the isomorphic API in a follow up.\r\n\r\nNote that the internal version of `act` that we use in our own tests\r\nstill depends on mocking the Scheduler package, because it needs to work\r\nin production. Im planning to move that implementation to a shared\r\n(internal) module, too.\"",
                "commitDate": "2021-06-22T21:25:07Z"
            },
            {
                "commitId": "e16d61c3000e2de6217d06b9afad162e883f73c4",
                "commitMessage": "\"[Offscreen] Mount/unmount layout effects (#21386)\n\n* [Offscreen] Mount/unmount layout effects\r\n\r\nExposes the Offscreen component type and implements basic support for\r\nmount/unmounting layout effects when the visibility is toggled.\r\n\r\nMostly it works the same way as hidden Suspense trees, which use the\r\nsame internal fiber type. I had to add an extra bailout, though, that\r\ndoesnt apply to the Suspense case but does apply to Offscreen\r\ncomponents: a hidden Offscreen tree will eventually render at low\r\npriority, and when we it does, its `subtreeTag` will have effects\r\nscheduled on it. So I added a check to the layout phase where, if the\r\nsubtree is hidden, we skip over the subtree entirely. An alternate\r\ndesign would be to clear the subtree flags in the render phase, but I\r\nprefer doing it this way since its harder to mess up.\r\n\r\nWe also need an API to enable the same thing for passive effects. This\r\nis not yet implemented.\r\n\r\n* Add test starting from hidden\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>\"",
                "commitDate": "2021-06-01T19:46:08Z"
            },
            {
                "commitId": "4ecf11977c46966d3deedcdc71f1280a34607d1d",
                "commitMessage": "\"Remove the Fundamental internals (#20745)\"",
                "commitDate": "2021-02-05T20:36:55Z"
            },
            {
                "commitId": "efc57e5cbbd618f3c98d941c48eec859026c2dcb",
                "commitMessage": "\"Add built-in Suspense cache with support for invalidation (refreshing) (#20456)\"",
                "commitDate": "2020-12-18T18:57:24Z"
            },
            {
                "commitId": "e23673b511a2eab6ddcb848a4150105c954f289a",
                "commitMessage": "\"[Flight] Add getCacheForType() to the dispatcher (#20315)\n\n* Remove react/unstable_cache\r\n\r\nWere probably going to make it available via the dispatcher. Lets remove this for now.\r\n\r\n* Add readContext() to the dispatcher\r\n\r\nOn the server, it will be per-request.\r\n\r\nOn the client, there will be some way to shadow it.\r\n\r\nFor now, I provide it on the server, and throw on the client.\r\n\r\n* Use readContext() from react-fetch\r\n\r\nThis makes it work on the server (but not on the client until we implement it there.)\r\n\r\nUpdated the test to use Server Components. Now it passes.\r\n\r\n* Fixture: Add fetch from a Server Component\r\n\r\n* readCache -> getCacheForType<T>\r\n\r\n* Add React.unstable_getCacheForType\r\n\r\n* Add a feature flag\r\n\r\n* Fix Flow\r\n\r\n* Add react-suspense-test-utils and port tests\r\n\r\n* Remove extra Map lookup\r\n\r\n* Unroll async/await because build system\r\n\r\n* Add some error coverage and retry\r\n\r\n* Add unstable_getCacheForType to Flight entry\"",
                "commitDate": "2020-12-03T03:44:56Z"
            },
            {
                "commitId": "56e9feead0f91075ba0a4f725c9e4e343bca1c67",
                "commitMessage": "\"Remove Blocks (#20138)\n\n* Remove Blocks\r\n\r\n* Remove Flight Server Runtime\r\n\r\nTheres no need for this now that the JSResource is part of the bundler\r\nprotocol. Might need something for Webpack plugin specifically later.\r\n\r\n* Devtools\"",
                "commitDate": "2020-10-31T06:03:45Z"
            },
            {
                "commitId": "1f38dcff67d12828be771403e183652f5e93909a",
                "commitMessage": "\"Remove withSuspenseConfig (#19724)\n\nRemoves `withSuspenseConfig` and migrates relevant tests to\r\n`startTransition` instead.\r\n\r\nWe only had one caller in www, which Ive removed.\"",
                "commitDate": "2020-08-31T16:16:49Z"
            },
            {
                "commitId": "5564f2c95bb61b446f93dc5c519740bdb39e1989",
                "commitMessage": "\"Add React.startTransition (#19696)\n\n* Add React.startTransition\r\n\r\n* Export startTransition from index.js as well\"",
                "commitDate": "2020-08-26T15:34:17Z"
            },
            {
                "commitId": "b61174fb7b09580c1ec2a8f55e73204b706d2935",
                "commitMessage": "\"Remove the deprecated React Flare event system (#19520)\"",
                "commitDate": "2020-08-05T14:13:29Z"
            },
            {
                "commitId": "9102719baacb64738e9235bc80d3d7d9918cc74c",
                "commitMessage": "\"Tidy up React Scope API (#19352)\"",
                "commitDate": "2020-07-16T15:21:21Z"
            },
            {
                "commitId": "8b9c4d1688333865e702fcd65ad2ab7d83b3c33c",
                "commitMessage": "\"Expose LegacyHidden type and disable <div hidden /> API in new fork (#18891)\n\n* Expose LegacyHidden type\r\n\r\nI will use this internally at Facebook to migrate away from\r\n<div hidden />. The end goal is to migrate to the Offscreen type, but\r\nthat has different semantics. This is an incremental step.\r\n\r\n* Disable <div hidden /> API in new fork\r\n\r\nMigrates to the unstable_LegacyHidden type instead. The old fork does\r\nnot support the new component type, so I updated the tests to use an\r\nindirection that picks the correct API. I will remove this once the\r\nLegacyHidden (and/or Offscreen) type has landed in both implementations.\r\n\r\n* Add gated warning for `<div hidden />` API\r\n\r\nOnly exists so we can detect callers in www and migrate them to the new\r\nAPI. Should not visible to anyone outside React Core team.\"",
                "commitDate": "2020-05-12T03:02:08Z"
            },
            {
                "commitId": "22dc2e42bdc00d87fc19c5e75fc7c0b3fdcdc572",
                "commitMessage": "\"Add experimental DebugTracing logger for internal use (#18531)\"",
                "commitDate": "2020-04-16T02:10:15Z"
            },
            {
                "commitId": "3278d242184a13add3f25f683b77ef9a6a2305f3",
                "commitMessage": "\"Add useOpaqueIdentifier Hook (#17322)\n\n* Add useOpaqueIdentifier Hook\r\n\r\nWe currently use unique IDs in a lot of places. Examples are:\r\n  * `<label for=\"ID\">`\r\n  * `aria-labelledby`\r\n\r\nThis can cause some issues:\r\n  1. If we server side render and then hydrate, this could cause an\r\n     hydration ID mismatch\r\n  2. If we server side render one part of the page and client side\r\n     render another part of the page, the ID for one part could be\r\n     different than the ID for another part even though they are\r\n     supposed to be the same\r\n  3. If we conditionally render something with an ID ,  this might also\r\n     cause an ID mismatch because the ID will be different on other\r\n     parts of the page\r\n\r\nThis PR creates a new hook `useUniqueId` that generates a different\r\nunique ID based on whether the hook was called on the server or client.\r\nIf the hook is called during hydration, it generates an opaque object\r\nthat will rerender the hook so that the IDs match.\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "commitDate": "2020-04-07T00:17:27Z"
            },
            {
                "commitId": "c5d2fc7127654e43de59fff865b74765a103c4a5",
                "commitMessage": "\"Move some files out of /shared and rename to upper case (#18363)\n\n* Rename lower case isomorphic default exports modules to upper case named exports\r\n\r\nWere somewhat inconsistent here between e.g. ReactLazy and memo.\r\n\r\nLets pick one.\r\n\r\nThis also moves the responder, fundamental, scope creators from shared\r\nsince theyre isomorphic and same as the other creators.\r\n\r\n* Move some files that are specific to the react-reconciler from shared\r\n\r\nIndividual renderers are allowed to deep require into the reconciler.\r\n\r\n* Move files specific to react-dom from shared\r\n\r\nreact-interactions is right now dom specific (it wasnt before) so we can\r\ntype check it together with other dom stuff. Avoids the need for\r\na shared ReactDOMTypes to be checked by RN for example.\r\n\r\n* Move ReactWorkTags to the reconciler\r\n\r\n* Move createPortal to export from reconciler\r\n\r\nOtherwise Noop cant access it since its not allowed deep requires.\"",
                "commitDate": "2020-03-21T22:22:01Z"
            },
            {
                "commitId": "90f8fe6f5509cab7d6d280b4ed17181697f394e9",
                "commitMessage": "\"add jsx-runtime and jsx-dev-runtime (#18299)\n\nThis PR adds the jsx-runtime and jsx-dev-runtime modules for the JSX Babel Plugin. WWW still relies on jsx/jsxs/jsxDEV from the \"react\" module, so once we refactor the code to point to the runtime modules we will remove jsx/jsxs/jsxDEV from the \"react\" module.\"",
                "commitDate": "2020-03-17T20:22:19Z"
            },
            {
                "commitId": "322cdcd3abfaca985a001a12247f02c5d31d311e",
                "commitMessage": "\"useMutableSource hook (#18000)\n\nuseMutableSource hook\r\n\r\nuseMutableSource() enables React components to safely and efficiently read from a mutable external source in Concurrent Mode. The API will detect mutations that occur during a render to avoid tearing and it will automatically schedule updates when the source is mutated.\r\n\r\nRFC: reactjs/rfcs#147\"",
                "commitDate": "2020-03-11T19:34:39Z"
            },
            {
                "commitId": "d2158d6ccbcbd998d1cd1c06ac6c6682cbeafd04",
                "commitMessage": "\"Fix flow types (#18204)\n\n* Added missing @flow pragma to React.js\r\n\r\n* Fixed useContext() return type definition\r\n\r\n* Fixed previously masked Flow errors in DevTools and react-interactions packages\r\n\r\n* Added displayName to internal Context Flow type\r\n\r\n* Removed Flow generic annotations for createResponder\r\n\r\nThis seems to cause a parsing error. (Not sure why.) The API is deprecated anyway so Im being lazy for now and just adding a .\"",
                "commitDate": "2020-03-03T20:46:24Z"
            },
            {
                "commitId": "60016c448bb7d19fc989acd05dda5aca2e124381",
                "commitMessage": "\"Export React as Named Exports instead of CommonJS (#18106)\n\n* Add options for forked entry points\r\n\r\nWe currently fork .fb.js entry points. This adds a few more options.\r\n\r\n.modern.fb.js - experimental FB builds\r\n.classic.fb.js - stable FB builds\r\n.fb.js - if no other FB build, use this for FB builds\r\n.experimental.js - experimental builds\r\n.stable.js - stable builds\r\n.js - used if no other override exists\r\n\r\nThis will be used to have different ES exports for different builds.\r\n\r\n* Switch React to named exports\r\n\r\n* Export named exports from the export point itself\r\n\r\nWe need to re-export the Flow exported types so we can use them in our code.\r\n\r\nWe dont want to use the Flow types from upstream since it doesnt have the non-public APIs that we have.\r\n\r\nThis should be able to use export * but I dont know why it doesnt work.\r\n\r\nThis actually enables Flow typing of React which was just \"any\" before.\r\nThis exposed some Flow errors that needs fixing.\r\n\r\n* Create forks for the react entrypoint\r\n\r\nNone of our builds expose all exports and they all differ in at least one\r\nway, so we need four forks.\r\n\r\n* Set esModule flag to false\r\n\r\nWe dont want to emit the esModule compatibility flag on our CommonJS\r\noutput. For now we treat our named exports as if theyre CommonJS.\r\n\r\nThis is a potentially breaking change for scheduler (but all those apis\r\nare unstable), react-is and use-subscription. However, it seems unlikely\r\nthat anyone would rely on this since these only have named exports.\r\n\r\n* Remove unused Feature Flags\r\n\r\n* Let jest observe the stable fork for stable tests\r\n\r\nThis lets it do the negative test by ensuring that the right tests fail.\r\n\r\nHowever, this in turn will make other tests that are not behind\r\n__EXPERIMENTAL__ fail. So I need to do that next.\r\n\r\n* Put all tests that depend on exports behind __EXPERIMENTAL__\r\n\r\nSince theres no way to override the exports using feature flags\r\nin .intern.js anymore we cant use these APIs in stable.\r\n\r\nThe tradeoff here is that we can either enable the negative tests on\r\n\"stable\" that means experimental are expected to fail, or we can disable\r\ntests on stable. This is unfortunate since some of these APIs now run on\r\na \"stable\" config at FB instead of the experimental.\r\n\r\n* Switch ReactDOM to named exports\r\n\r\nSame strategy as React.\r\n\r\nI moved the ReactDOMFB runtime injection to classic.fb.js\r\n\r\nSince we only fork the entrypoint, the `/testing` entrypoint needs to\r\nbe forked too to re-export the same things plus `act`. This is a bit\r\nunfortunate. If it becomes a pattern we can consider forking in the\r\nmodule resolution deeply.\r\n\r\nfix flow\r\n\r\n* Fix ReactDOM Flow Types\r\n\r\nNow that ReactDOM is Flow type checked we need to fix up its types.\r\n\r\n* Configure jest to use stable entry for ReactDOM in non-experimental\r\n\r\n* Remove additional FeatureFlags that are no longer needed\r\n\r\nThese are only flagging the exports and no implementation details so we\r\ncan control them fully through the export overrides.\"",
                "commitDate": "2020-02-25T21:54:27Z"
            },
            {
                "commitId": "65bbda7f169394005252b46a5992ece5a2ffadad",
                "commitMessage": "\"Rename Chunks API to Blocks (#18086)\n\nSounds like this is the name were going with. This also helps us\r\ndistinguish it from other \"chunking\" implementation details.\"",
                "commitDate": "2020-02-21T07:56:40Z"
            },
            {
                "commitId": "a209a97ed742ced488d7edf4fc2dcbf316ba13cb",
                "commitMessage": "\"Add feature flag around React.createFactory (#17873)\"",
                "commitDate": "2020-01-20T15:00:18Z"
            },
            {
                "commitId": "7dc9745427046d462506e9788878ba389e176b8a",
                "commitMessage": "\"[Flight] Chunks API (#17398)\n\n* Add feature flags\r\n\r\n* Add Chunk type and constructor\r\n\r\n* Wire up Chunk support in the reconciler\r\n\r\n* Update reconciler to reconcile Chunks against the render method\r\n\r\nThis allows the query and args to be updated.\r\n\r\n* Drop the ref. Chunks cannot have refs anyway.\r\n\r\n* Add Chunk checks in more missing cases\r\n\r\n* Rename secondArg\r\n\r\n* Add test and fix lazy chunks\r\n\r\nNot really a supported use case but for consistency I guess.\r\n\r\n* Fix fragment test\"",
                "commitDate": "2019-12-18T18:25:43Z"
            },
            {
                "commitId": "9fe1031244903e442de179821f1d383a9f2a59f2",
                "commitMessage": "\"[react-interactions] Rename Flare APIs to deprecated and remove from RN (#17644)\"",
                "commitDate": "2019-12-18T10:24:46Z"
            },
            {
                "commitId": "c47f59331ee94b1d04f974f075373d368a8c8ab3",
                "commitMessage": "\"Move SuspenseList to experimental package (#17130)\n\nAlso moves `withSuspenseConfig`\"",
                "commitDate": "2019-10-18T21:24:13Z"
            },
            {
                "commitId": "685ed561f22ea062281a4c570c7067e6020457c4",
                "commitMessage": "\"Migrate useDeferredValue and useTransition (#17058)\n\nMigrated useDeferredValue and useTransition from Facebooks www repo into ReactFiberHooks.\"",
                "commitDate": "2019-10-18T19:48:43Z"
            },
            {
                "commitId": "bd79be9b687156067416ffe5219e49a11bd0f1e7",
                "commitMessage": "\"[react-core] Add experimental React Scope component API (#16587)\"",
                "commitDate": "2019-08-29T11:06:51Z"
            },
            {
                "commitId": "42794557ca44a8c05c71aab698d44d1294236538",
                "commitMessage": "\"[Flare] Tweaks to Flare system design and API (#16264)\"",
                "commitDate": "2019-08-01T18:08:54Z"
            },
            {
                "commitId": "509889119360ed83ca6ef3f83bcf01e5aa7dcd81",
                "commitMessage": "\"[Flare] Redesign core event system (#16163)\"",
                "commitDate": "2019-07-23T22:46:44Z"
            },
            {
                "commitId": "2c4d61e1022ae383dd11fe237f6df8451e6f0310",
                "commitMessage": "\"Adds experimental fundamental interface (#16049)\"",
                "commitDate": "2019-07-19T21:20:28Z"
            },
            {
                "commitId": "8d413bf2c3679befe8c6b56733b7c6f6e467ec07",
                "commitMessage": "\"Remove React.error and React.warn (#16126)\n\n* Remove React.error/React.warn with React.getComponentStack\"",
                "commitDate": "2019-07-12T22:41:47Z"
            },
            {
                "commitId": "9b0bd43550206e04bfe9ca695e5981eff0e2d03f",
                "commitMessage": "\"[Flare] Re-label Flare flag (#16014)\"",
                "commitDate": "2019-06-28T00:11:11Z"
            },
            {
                "commitId": "4f92fbce5cc409436ec7625ac08d3a709a4d8f31",
                "commitMessage": "\"[Flare] Move createEvent back to React object (#15943)\"",
                "commitDate": "2019-06-21T09:12:56Z"
            },
            {
                "commitId": "720db4cbe675e80820ec81abab499492309b9252",
                "commitMessage": "\"[Flare] Add useEvent hook implementation (#15927)\n\n* [Flare] Add useEvent hook implementation\r\n\r\nValidate hooks have decendent event components\r\n\r\nFew fixes and displayName changes\r\n\r\nFix more responder bugs\r\n\r\nUpdate error codes\r\n\r\n* Add another test\r\n\r\n* Address feedback\"",
                "commitDate": "2019-06-21T02:12:40Z"
            },
            {
                "commitId": "76864f7ff729f8293e8e772da7ad8416d7def6b3",
                "commitMessage": "\"Add SuspenseList Component (#15902)\n\n* Add SuspenseList component type\r\n\r\n* Push SuspenseContext for SuspenseList\r\n\r\n* Force Suspense boundaries into their fallback state\r\n\r\nIn the \"together\" mode, we do a second render pass that forces the\r\nfallbacks to stay in place, if not all can unsuspend at once.\r\n\r\n* Add test\r\n\r\n* Transfer thennables to the SuspenseList\r\n\r\nThis way, we end up retrying the SuspenseList in case the nested boundary\r\nthat just suspended doesnt actually get mounted with this set of\r\nthennables. This happens when the second pass renders the fallback\r\ndirectly without first attempting to render the content.\r\n\r\n* Add warning for unsupported displayOrder\r\n\r\n* Add tests for nested sibling boundaries and nested lists\r\n\r\n* Fix nested SuspenseList forwarding thennables\r\n\r\n* Rename displayOrder to revealOrder\r\n\r\nDisplay order has some \"display list\" connotations making it sound like\r\na z-index thing.\r\n\r\nReveal indicates that this isnt really about when something gets rendered\r\nor is ready to be rendered. Its about when content that is already there\r\ngets to be revealed.\r\n\r\n* Add test for avoided boundaries\r\n\r\n* Make SuspenseList a noop in legacy mode\r\n\r\n* Use an explicit suspense list state object\r\n\r\nThis will be used for more things in the directional case.\"",
                "commitDate": "2019-06-20T02:34:28Z"
            },
            {
                "commitId": "689beef6f5d0adab166f5eb0aac59eba6100677a",
                "commitMessage": "\"[Flare] Move unstable_createEventComponent to ReactDOM (#15890)\"",
                "commitDate": "2019-06-18T22:41:00Z"
            },
            {
                "commitId": "9c6de716d028f17736d0892d8a3d8f3ac2cb62bd",
                "commitMessage": "\"Add withSuspenseConfig API (#15593)\n\n* Add suspendIfNeeded API and a global scope to track it\r\n\r\nAdds a \"current\" suspense config that gets applied to all updates scheduled\r\nduring the current scope.\r\n\r\nI suspect we might want to add other types of configurations to the \"batch\"\r\nso I called it the \"batch config\".\r\n\r\nThis works across renderers/roots but they wont actually necessarily go\r\ninto the same batch.\r\n\r\n* Add the suspenseConfig to all updates created during this scope\r\n\r\n* Compute expiration time based on the timeout of the suspense config\r\n\r\n* Track if there was a processed suspenseConfig this render pass\r\n\r\nWell use this info to suspend a commit for longer when necessary.\r\n\r\n* Mark suspended states that should be avoided as a separate flag\r\n\r\nThis lets us track which renders we want to suspend for a short time vs\r\na longer time if possible.\r\n\r\n* Suspend until the full expiration time if something asked to suspend\r\n\r\n* Reenable an old test that we can now repro again\r\n\r\n* Suspend the commit even if it is complete if there is a minimum delay\r\n\r\nThis can be used to implement spinners that dont flicker if the data\r\nand rendering is really fast.\r\n\r\n* Default timeoutMs to low pri expiration if not provided\r\n\r\nThis is a required argument in the type signature but people may not\r\nsupply it and this is a user facing object.\r\n\r\n* Rename to withSuspenseConfig and drop the default config\r\n\r\nThis allow opting out of suspending in some nested scope.\r\n\r\nA lot of time when you use this function youll use it with high level\r\nhelpers. Those helpers often want to accept some additional configuration\r\nfor suspense and if it should suspend at all. The easiest way is to just\r\nhave the api accept null or a suspense config and pass it through. However,\r\nthen you have to remember that calling suspendIfNeeded has a default.\r\n\r\nIt gets simpler by just saying tat you can pass the config. You can have\r\nyour own default in user space.\r\n\r\n* Track the largest suspense config expiration separately\r\n\r\nThis ensures that if weve scheduled lower pri work that doesnt have a\r\nsuspenseConfig, we dont consider its expiration as the timeout.\r\n\r\n* Add basic tests for functionality using each update mechanism\r\n\r\n* Fix issue when newly created avoided boundary doesnt suspend with delay\r\n\r\n* Add test for loading indicator with minLoadingDurationMs option\"",
                "commitDate": "2019-05-16T23:51:18Z"
            },
            {
                "commitId": "83fc258f2914c1a7c14c7b98ee362934576f266b",
                "commitMessage": "\"Remove <ConcurrentMode /> (#15532)\n\nUse createSyncRoot instead.\"",
                "commitDate": "2019-05-13T23:10:00Z"
            },
            {
                "commitId": "89d8d1435ffc61fd5201636a84c53806130ef4b8",
                "commitMessage": "\"Add React.unstable_createEventComponent (#15580)\n\nAPI for creating event components from event responders.\"",
                "commitDate": "2019-05-07T19:36:42Z"
            },
            {
                "commitId": "745baf2e061bdb7a07b511fa6fd8c1c5e8106313",
                "commitMessage": "\"Provide new jsx transform target for reactjs/rfcs#107 (#15141)\n\n* adding jsx function\r\n\r\n* add more feature flag defaults\r\n\r\n* flip ReactElement order back\"",
                "commitDate": "2019-04-07T19:02:34Z"
            },
            {
                "commitId": "f161ee2eb7e78d6cb3d3878fe1812ac1057fedc6",
                "commitMessage": "\"React.warn() and React.error() (#15170)\"",
                "commitDate": "2019-03-21T21:44:08Z"
            },
            {
                "commitId": "56035dac645af75c1a8aa8deba2bcf89b14a5aa4",
                "commitMessage": "\"unstable_Profiler -> Profiler (#15172)\"",
                "commitDate": "2019-03-21T16:18:34Z"
            },
            {
                "commitId": "6cb26774e27e03c7d5d6e4601bcee979a004fe91",
                "commitMessage": "\"Enable hooks! (#14679)\n\n* Turned enableHooks feature flag on everywhere\r\n* Removed useHooks feature flag from tests (now that its on by default)\r\n* Remove useHooks feature flag entirely\"",
                "commitDate": "2019-01-23T21:28:09Z"
            },
            {
                "commitId": "edb1f595649b013a59a18f43c03a57035ddea19e",
                "commitMessage": "\"Support configurable labels for custom hooks (#14559)\n\n* react-debug-tools accepts currentDispatcher ref as param\r\n\r\n* ReactDebugHooks injected dispatcher ref is optional\r\n\r\n* Support custom values for custom hooks\r\n\r\n* PR feedback:\r\n\r\n1. Renamed useDebugValueLabel hook to useDebugValue\r\n2. Wrapped useDebugValue internals in if-DEV so that it could be removed from production builds.\r\n\r\n* PR feedback:\r\n\r\n1. Fixed some minor typos\r\n2. Added inline comment explaining the purpose of  rollupDebugValues()\r\n3. Refactored rollupDebugValues() to use a for loop rather than filter()\r\n4. Improve check for useDebugValue hook to lessen the chance of a false positive\r\n5. Added optional formatter function param to useDebugValue\r\n\r\n* Nitpick renamed a method\"",
                "commitDate": "2019-01-14T22:53:22Z"
            },
            {
                "commitId": "b4ad8e947150a1a0b486a388e2d4762d3eee51ee",
                "commitMessage": "\"rename useImperativeMethods -> useImperativeHandle (#14565)\"",
                "commitDate": "2019-01-10T13:37:50Z"
            },
            {
                "commitId": "c2a2d8a539bf02e40c43d36adc2826e228f30955",
                "commitMessage": "\"Remove useMutationEffect (#14336)\n\nuseMutationEffect has problems (namely, refs arent attached at the time that it runs) and were not positive its necessary. useLayoutEffect runs at the same time as componentDidMount/Update so its sufficient for all existing use cases; it can be used in any case that useEffect happens too late. Until we figure out what we want to do, lets delete it.\"",
                "commitDate": "2018-11-27T21:05:13Z"
            },
            {
                "commitId": "7475120ce7bdeb7a5666d64c636efb1f4a951b9a",
                "commitMessage": "\"Prevent deopts from modifying exports object in stable builds (#14309)\"",
                "commitDate": "2018-11-23T14:10:57Z"
            },
            {
                "commitId": "5fc84efacce66272928815e8a6c83a341af9160e",
                "commitMessage": "\"Skip updating effect tag when skipping effect\n\nFor example, if you have `useEffect(..., [])`, theres no need to set .effectTag to `Update | Passive` on updates.\"",
                "commitDate": "2018-10-29T18:26:54Z"
            },
            {
                "commitId": "11d0781eea7dfa65e0ea9e54d18ff937122f9524",
                "commitMessage": "\"Defer useEffect until after paint\n\nEffects scheduled by useEffect should not fire until after the browser\nhas had a chance to paint. However, they should be fired before any\nsubsequent mutations.\n\nAlso adds useMutationEffect and useLayoutEffect. useMutationEffect fires\nduring the host update phase. useLayoutEffect fires during the post-\nupdate phase (the same phase as componentDidMount\nand componentDidUpdate).\"",
                "commitDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "105f2de545dc9e374ed4ac55b3628eeeb555f4a6",
                "commitMessage": "\"Put hooks behind feature flag\"",
                "commitDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "7bee9fbdd49aa5b9365a94b0ddf6db04bc1bf51c",
                "commitMessage": "\"Initial hooks implementation\n\nIncludes:\n- useState\n- useContext\n- useEffect\n- useRef\n- useReducer\n- useCallback\n- useMemo\n- useAPI\"",
                "commitDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "275e76e83bc2be5dc0be9185ff747f383969289a",
                "commitMessage": "\"Enable stable concurrent APIs flag for 16.7 alpha (#13928)\n\n* Add enableStableConcurrentModeAPIs feature flag\r\n\r\n* Conditionally name concurrent API based on enableStableConcurrentModeAPIs flag\"",
                "commitDate": "2018-10-24T20:45:07Z"
            },
            {
                "commitId": "d75c69e0cf2a842adc47edab87ca5103411e6949",
                "commitMessage": "\"Remove unstable_ prefix from Suspense (#13922)\n\nWe are using it with lazy and the combination Suspense + lazy seems pretty\r\nstable. maxDuration is not but thats only enabled when youre in\r\nConcurrentMode which is still unstable.\"",
                "commitDate": "2018-10-23T05:40:05Z"
            },
            {
                "commitId": "769b1f270e1251d9dbdce0fcbd9e92e502d059b8",
                "commitMessage": "\"pure -> memo (#13905)\"",
                "commitDate": "2018-10-20T16:46:23Z"
            },
            {
                "commitId": "8af6728c6f105d37f9c0006288a6d1ac3903dc71",
                "commitMessage": "\"Enable Suspense + rename Placeholder (#13799)\n\n* Enable Suspense\r\n\r\n* <unstable_Placeholder delayMs> => <unstable_Suspense maxDuration>\r\n\r\n* Update suspense fixture\"",
                "commitDate": "2018-10-10T16:02:04Z"
            },
            {
                "commitId": "a0733fe13d598303f45b9d27c84ce0ec40d09021",
                "commitMessage": "\"pure (#13748)\n\n* pure\r\n\r\nA higher-order component version of the `React.PureComponent` class.\r\nDuring an update, the previous props are compared to the new props. If\r\nthey are the same, React will skip rendering the component and\r\nits children.\r\n\r\nUnlike userspace implementations, `pure` will not add an additional\r\nfiber to the tree.\r\n\r\nThe first argument must be a functional component; it does not work\r\nwith classes.\r\n\r\n`pure` uses shallow comparison by default, like `React.PureComponent`.\r\nA custom comparison can be passed as the second argument.\r\n\r\nCo-authored-by: Andrew Clark <acdlite@fb.com>\r\nCo-authored-by: Sophie Alpert <sophiebits@fb.com>\r\n\r\n* Warn if first argument is not a functional component\"",
                "commitDate": "2018-09-27T22:25:38Z"
            },
            {
                "commitId": "0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74",
                "commitMessage": "\"Rename AsyncMode -> ConcurrentMode (#13732)\n\n* Rename AsyncMode -> ConcurrentMode\"",
                "commitDate": "2018-09-26T16:13:02Z"
            },
            {
                "commitId": "fe959eea731b4de0c970f753dfa9d0f6b010b63d",
                "commitMessage": "\"React.lazy (#13398)\n\nLazily starts loading a component the first time its rendered. The\r\nimplementation is fairly simple and could be left to userspace, but since\r\nthis is an important use case, theres value in standardization.\"",
                "commitDate": "2018-08-16T16:43:32Z"
            },
            {
                "commitId": "659a29cecf74301532354261369e9048aac6e20f",
                "commitMessage": "\"Reorganize how shared internals are accessed (#13201)\n\n* Reorganize how shared internals are accessed\r\n\r\n* Update forks.js\"",
                "commitDate": "2018-07-13T01:45:37Z"
            },
            {
                "commitId": "88d7ed8bfbccd860c3e309da39d356d0a3127aa7",
                "commitMessage": "\"React.Timeout -> React.Placeholder (#13105)\n\nChanged the API to match what weve been using in our latest discussions.\r\n\r\nOur tentative plans are for <Placeholder> to automatically hide the timed-out\r\nchildren, instead of removing them, so their state is not lost. This part is\r\nnot yet implemented. Well likely have a lower level API that does not include\r\nthe hiding behavior. This is also not yet implemented.\"",
                "commitDate": "2018-07-04T02:47:00Z"
            },
            {
                "commitId": "d6f304e88952b895a9e1c69483081d2d9ef56979",
                "commitMessage": "\"Remove Timeout export on React object unless enableSuspense flag (#12833)\"",
                "commitDate": "2018-05-16T21:02:34Z"
            },
            {
                "commitId": "6565795377d1d2c79a7708766f1af9e1a87517de",
                "commitMessage": "\"Suspense (#12279)\n\n* Timeout component\r\n\r\nAdds Timeout component. If a promise is thrown from inside a Timeout component,\r\nReact will suspend the in-progress render from committing. When the promise\r\nresolves, React will retry. If the render is suspended for longer than the\r\nmaximum threshold, the Timeout switches to a placeholder state.\r\n\r\nThe timeout threshold is defined as the minimum of:\r\n- The expiration time of the current render\r\n- The `ms` prop given to each Timeout component in the ancestor path of the\r\nthrown promise.\r\n\r\n* Add a test for nested fallbacks\r\n\r\nCo-authored-by: Andrew Clark <acdlite@fb.com>\r\n\r\n* Resume on promise rejection\r\n\r\nReact should resume rendering regardless of whether it resolves\r\nor rejects.\r\n\r\n* Wrap Suspense code in feature flag\r\n\r\n* Children of a Timeout must be strict mode compatible\r\n\r\nAsync is not required for Suspense, but strict mode is.\r\n\r\n* Simplify list of pending work\r\n\r\nSome of this was added with \"soft expiration\" in mind, but now with our revised\r\nmodel for how soft expiration will work, this isnt necessary.\r\n\r\nIt would be nice to remove more of this, but I think the list itself is inherent\r\nbecause we need a way to track the start times, for <Timeout ms={ms} />.\r\n\r\n* Only use the Timeout update queue to store promises, not for state\r\n\r\nIt already worked this way in practice.\r\n\r\n* Wrap more Suspense-only paths in the feature flag\r\n\r\n* Attach promise listener immediately on suspend\r\n\r\nInstead of waiting for commit phase.\r\n\r\n* Infer approximate start time using expiration time\r\n\r\n* Remove list of pending priority levels\r\n\r\nWe can replicate almost all the functionality by tracking just five\r\nseparate levels: the highest/lowest priority pending levels, the\r\nhighest/lowest priority suspended levels, and the lowest pinged level.\r\n\r\nWe lose a bit of granularity, in that if there are multiple levels of\r\npending updates, only the first and last ones are known. But in practice\r\nthis likely isnt a big deal.\r\n\r\nThese heuristics are almost entirely isolated to a single module and\r\ncan be adjusted later, without API changes, if necessary.\r\n\r\nNon-IO-bound work is not affected at all.\r\n\r\n* ReactFiberPendingWork -> ReactFiberPendingPriority\r\n\r\n* Renaming method names from \"pending work\" to \"pending priority\"\r\n\r\n* Get rid of SuspenseThenable module\r\n\r\nIdk why I thought this was neccessary\r\n\r\n* Nits based on Sebastians feedback\r\n\r\n* More naming nits + comments\r\n\r\n* Add test for hiding a suspended tree to unblock\r\n\r\n* Revert change to expiration time rounding\r\n\r\nThis means you have to account for the start time approximation\r\nheuristic when writing Suspense tests, but thats going to be\r\ntrue regardless.\r\n\r\nWhen updating the tests, I also made a fix related to offscreen\r\npriority. We should never timeout inside a hidden tree.\r\n\r\n* palceholder -> placeholder\"",
                "commitDate": "2018-05-11T01:09:10Z"
            },
            {
                "commitId": "fc3777b1fe295fd2661f1974f5587d214791f04b",
                "commitMessage": "\"Add Profiler component for collecting new render timing info (#12745)\n\nAdd a new component type, Profiler, that can be used to collect new render time metrics. Since this is a new, experimental API, it will be exported as React.unstable_Profiler initially.\r\n\r\nMost of the functionality for this component has been added behind a feature flag, enableProfileModeMetrics. When the feature flag is disabled, the component will just render its children with no additional behavior. When the flag is enabled, React will also collect timing information and pass it to the onRender function (as described below).\"",
                "commitDate": "2018-05-10T22:25:32Z"
            },
            {
                "commitId": "bc70441c8b3fa85338283af3eeb47b5d15e9dbfe",
                "commitMessage": "\"RFC #30: React.forwardRef implementation (#12346)\n\nAdded React.forwardRef support to react-reconciler based renders and the SSR partial renderer.\"",
                "commitDate": "2018-03-14T20:07:58Z"
            },
            {
                "commitId": "29e8924c70856bef9b11e0c74a450140bfcce773",
                "commitMessage": "\"Move ReactContext source to React package (#12205)\"",
                "commitDate": "2018-02-10T16:41:33Z"
            },
            {
                "commitId": "8dc8f88d5ae9fb96934ba43e3842b5dcf4074afd",
                "commitMessage": "\"Adds createRef() as per RFC (#12162)\n\n* Adds createRef() as per RFC\"",
                "commitDate": "2018-02-06T20:19:49Z"
            },
            {
                "commitId": "28aa084ad84a681be1c45def2f4b4c0dd8a43871",
                "commitMessage": "\"Switch to JSX API for context (#12123)\n\n* Switch to JSX API for context\r\n\r\n80% sure this will be the final API. Merging this now so we can get this\r\ninto the next www sync in preparation for 16.3.\r\n\r\n* Promote context to a stable API\"",
                "commitDate": "2018-01-30T21:06:12Z"
            },
            {
                "commitId": "9ea55516e674c2de63b9f7829e3c459f3cb3cf78",
                "commitMessage": "\"Replace unstable_AsyncComponent with unstable_AsyncMode (#12117)\n\n* Replace unstable_AsyncComponent with Unstable_AsyncMode\r\n\r\nMirrors the StrictMode API and uses the new Mode type of work.\r\n\r\n* internalContextTag -> mode\r\n\r\nChange this now that we have a better name\r\n\r\n* Unstable_ -> unstable_\"",
                "commitDate": "2018-01-30T03:11:59Z"
            },
            {
                "commitId": "87ae211ccd8d61796cfdef138d1e12fb7a74f85d",
                "commitMessage": "\"New context API (#11818)\n\n* New context API\r\n\r\nIntroduces a declarative context API that propagates updates even when\r\nshouldComponentUpdate returns false.\r\n\r\n* Fuzz tester for context\r\n\r\n* Use ReactElement for provider and consumer children\r\n\r\n* Unify more branches in createFiberFromElement\r\n\r\n* Compare context values using Object.is\r\n\r\nSame semantics as PureComponent/shallowEqual.\r\n\r\n* Add support for Provider and Consumer to server-side renderer\r\n\r\n* Store providers on global stack\r\n\r\nRather than using a linked list stored on the context type. The global\r\nstack can be reset in case of an interruption or error, whereas with the\r\nlinked list implementation, youd need to keep track of every\r\ncontext type.\r\n\r\n* Put new context API behind a feature flag\r\n\r\nWell enable this in www only for now.\r\n\r\n* Store nearest provider on context object\r\n\r\n* Handle reentrancy in server renderer\r\n\r\nContext stack should be per server renderer instance.\r\n\r\n* Bailout of consumer updates using bitmask\r\n\r\nThe context type defines an optional function that compares two context\r\nvalues, returning a bitfield. A consumer may specify the bits it needs\r\nfor rendering. If a providers context changes, and the consumers bits\r\ndo not intersect with the changed bits, we can skip the consumer.\r\n\r\nThis is similar to how selectors are used in Redux but fast enough to do\r\nwhile scanning the tree. The only user code involved is the function\r\nthat computes the changed bits. But thats only called once per provider\r\nupdate, not for every consumer.\r\n\r\n* Store current value and changed bits on context object\r\n\r\nThere are fewer providers than consumers, so better to do this work\r\nat the provider.\r\n\r\n* Use maximum of 31 bits for bitmask\r\n\r\nThis is the largest integer size in V8 on 32-bit systems. Warn in\r\ndevelopment if too large a number is used.\r\n\r\n* ProviderComponent -> ContextProvider, ConsumerComponent -> ContextConsumer\r\n\r\n* Inline Object.is\r\n\r\n* Warn if multiple renderers concurrently render the same context provider\r\n\r\nLets see if we can get away with not supporting this for now. If it\r\nturns out that its needed, we can fall back to backtracking the\r\nfiber return path.\r\n\r\n* Nits that came up during review\"",
                "commitDate": "2018-01-25T03:36:22Z"
            },
            {
                "commitId": "be51e6a41c096f33acf92a693026b80c98e7ddeb",
                "commitMessage": "\"Opt into unsafe lifecycle warnings without async tree (#12083)\n\nAdded new StrictMode component for enabling async warnings (without enabling async rendering). This component can be used in the future to help with other warnings (eg compilation, Fabric).\"",
                "commitDate": "2018-01-25T01:49:43Z"
            },
            {
                "commitId": "3c977dea6b96f6a9bb39f09886848da870748441",
                "commitMessage": "\"react: convert var to let/const (#11715)\"",
                "commitDate": "2017-11-30T12:08:58Z"
            },
            {
                "commitId": "f6894dc48be2e389ffae03cea736122a971e3f76",
                "commitMessage": "\"Set fragment export flags to true (#11672)\"",
                "commitDate": "2017-11-27T21:09:15Z"
            },
            {
                "commitId": "1cb6199d22af6f6ba2f55e4db18ed2f4216aaaf2",
                "commitMessage": "\" Consolidate all symbols in a single file (#11629)\n\n* Consolidate all symbols in a single file\r\n\r\nThis reduces the code duplication as we have quite a few now.\r\n\r\n* Record sizes\"",
                "commitDate": "2017-11-22T18:08:22Z"
            },
            {
                "commitId": "46f7b0d9451c2ac6f5ec5efd2c12ba77a4e054d9",
                "commitMessage": "\"Fix dead code elimination for feature flags (#11453)\n\n* Fix dead code elimination for feature flags\r\n\r\nTurning flags into named exports fixes dead code elimination.\r\n\r\nThis required some restructuring of how we verify that flag types match up. I used the Check<> trick combined with import typeof, as suggested by @calebmer.\r\n\r\nFor www, we can no longer re-export `require(ReactFeatureFlags)` directly, and instead destructure it. This means flags have to be known at init time. This is already the case so its not a problem. In fact it may be better since it removes extra property access in tight paths.\r\n\r\nFor things that we *want* to be dynamic on www (currently, only performance flag) we can export a function to toggle it, and then put it on the secret exports. In fact this is better than just letting everyone mutate the flag at arbitrary times since we can provide, e.g., a ref counting interface to it.\r\n\r\n* Record sizes\"",
                "commitDate": "2017-11-06T14:14:48Z"
            },
            {
                "commitId": "45c1ff348e1c7d03567f5bba6cb32cffa9222972",
                "commitMessage": "\"Remove unnecessary use strict in the source (#11433)\n\n* Remove use strict from ES modules\r\n\r\n* Delete unused file\r\n\r\nThis was unused since Stack.\"",
                "commitDate": "2017-11-02T20:32:48Z"
            },
            {
                "commitId": "21d0c115238b4f38837020cf83e0c657d8c01c9f",
                "commitMessage": "\"Convert the Source to ES Modules (#11389)\n\n* Update transforms to handle ES modules\r\n\r\n* Update Jest to handle ES modules\r\n\r\n* Convert react package to ES modules\r\n\r\n* Convert react-art package to ES Modules\r\n\r\n* Convert react-call-return package to ES Modules\r\n\r\n* Convert react-test-renderer package to ES Modules\r\n\r\n* Convert react-cs-renderer package to ES Modules\r\n\r\n* Convert react-rt-renderer package to ES Modules\r\n\r\n* Convert react-noop-renderer package to ES Modules\r\n\r\n* Convert react-dom/server to ES modules\r\n\r\n* Convert react-dom/{client,events,test-utils} to ES modules\r\n\r\n* Convert react-dom/shared to ES modules\r\n\r\n* Convert react-native-renderer to ES modules\r\n\r\n* Convert react-reconciler to ES modules\r\n\r\n* Convert events to ES modules\r\n\r\n* Convert shared to ES modules\r\n\r\n* Remove CommonJS support from transforms\r\n\r\n* Move ReactDOMFB entry point code into react-dom/src\r\n\r\nThis is clearer because we can use ES imports in it.\r\n\r\n* Fix Rollup shim configuration to work with ESM\r\n\r\n* Fix incorrect comment\r\n\r\n* Exclude external imports without side effects\r\n\r\n* Fix ReactDOM FB build\r\n\r\n* Remove TODOs I don\u2019t intend to fix yet\"",
                "commitDate": "2017-11-02T19:50:03Z"
            },
            {
                "commitId": "0e15ff5669271f5f5956e30a4fe1ae5963778e89",
                "commitMessage": "\"Put React.Fragment under a feature flag (#11421)\n\n* Put React.Fragment under a feature flag\r\n\r\n* Dont export undefined Fragment\"",
                "commitDate": "2017-11-01T00:43:55Z"
            },
            {
                "commitId": "4ce5da7aee90a373f2f36d1beb559097af30952e",
                "commitMessage": "\"Add Fragment as a named export to React (#10783)\n\n* Add Fragment as a named export to React\r\n\r\n* Remove extra tests for Fragment\r\n\r\n* Change React.Fragment export to be a string #fragment\r\n\r\n* Fix fragment special case to work with 1 child\r\n\r\n* Add single child test for fragment export\r\n\r\n* Move fragment definition to ReactEntry.js and render components for key warning tests\r\n\r\n* Inline createFiberFromElementType into createFiberFromElement\r\n\r\n* Update reconciliation to special case fragments\r\n\r\n* Use same semantics as implicit childsets for ReactFragment\r\n\r\n* Add more fragment state preservation tests\r\n\r\n* Export symbol instead of string for fragments\r\n\r\n* Fix rebase breakages\r\n\r\n* Re-apply prettier at 1.2.2\r\n\r\n* Merge branches in updateElement\r\n\r\n* Remove unnecessary check\r\n\r\n* Re-use createFiberFromFragment for fragment case\r\n\r\n* Simplyify branches by adding type field to fragment fiber\r\n\r\n* Move branching logic for fragments to broader methods when possible.\r\n\r\n* Add more tests for fragments\r\n\r\n* Address Dans feedback\r\n\r\n* Move REACT_FRAGMENT_TYPE into __DEV__ block for DCE\r\n\r\n* Change hex representation of REACT_FRAGMENT_TYPE to follow convention\r\n\r\n* Remove unnecessary branching and isArray checks\r\n\r\n* Update test for preserving children state when keys are same\r\n\r\n* Fix updateSlot bug and add more tests\r\n\r\n* Make fragment tests more robust by using ops pattern\r\n\r\n* Update jsx element validator to allow numbers and symbols\r\n\r\n* Remove type field from fragment fiber\r\n\r\n* Fork reconcileChildFibers instead of recursing\r\n\r\n* Use ternary if condition\r\n\r\n* Revamp fragment test suite:\r\n\r\n- Add more coverage to fragment tests\r\n- Use better names\r\n- Remove useless Fragment component inside tests\r\n- Remove useless tests so that tests are more concise\r\n\r\n* Check output of renderer in fragment tests to ensure no silly business despite states being preserved\r\n\r\n* Finish implementation of fragment reconciliation with desired behavior\r\n\r\n* Add reverse render direction for fragment tests\r\n\r\n* Remove unneeded fragment branch in updateElement\r\n\r\n* Add more test cases for ReactFragment\r\n\r\n* Handle childless fragment in reconciler\r\n\r\n* Support fragment flattening in SSR\r\n\r\n* Clean up ReactPartialRenderer\r\n\r\n* Warn when non-key and children props are passed to fragments\r\n\r\n* Add non-null key check back to updateSlots arrays case\r\n\r\n* Add test for positional reconciliation in fragments\r\n\r\n* Add warning for refs in fragments with stack trace\"",
                "commitDate": "2017-10-31T00:52:40Z"
            },
            {
                "commitId": "cc54b6f48a532bf2073e8f7d888c6a3fcf416b63",
                "commitMessage": "\"Add a shim for React 16.0.0 future compatibility (#11388)\"",
                "commitDate": "2017-10-27T16:38:59Z"
            },
            {
                "commitId": "087c48bb36b88ef0b5bbca2b9b70a52d8d413102",
                "commitMessage": "\"Reorder imports (#11359)\n\n* Reorder imports\r\n\r\n* Record sizes\"",
                "commitDate": "2017-10-25T18:07:54Z"
            },
            {
                "commitId": "1eed302d346bfb8f5db8d88b0e7096d8999d3548",
                "commitMessage": "\"Drop Haste (#11303)\n\n* Use relative paths in packages/react\r\n\r\n* Use relative paths in packages/react-art\r\n\r\n* Use relative paths in packages/react-cs\r\n\r\n* Use relative paths in other packages\r\n\r\n* Fix as many issues as I can\r\n\r\nThis uncovered an interesting problem where ./b from package/src/a would resolve to a different instantiation of package/src/b in Jest.\r\n\r\nEither this is a showstopper or we can solve it by completely fobbidding remaining /src/.\r\n\r\n* Fix all tests\r\n\r\nIt seems we cant use relative requires in tests anymore. Otherwise Jest becomes confused between real file and symlink.\r\nhttps://github.com/facebook/jest/issues/3830\r\n\r\nThis seems bad... Except that we already *dont* want people to create tests that import individual source files.\r\nAll existing cases of us doing so are actually TODOs waiting to be fixed.\r\n\r\nSo perhaps this requirement isnt too bad because it makes bad code looks bad.\r\n\r\nOf course, if we go with this, well have to lint against relative requires in tests.\r\nIt also makes moving things more painful.\r\n\r\n* Prettier\r\n\r\n* Remove @providesModule\r\n\r\n* Fix remaining Haste imports I missed earlier\r\n\r\n* Fix up paths to reflect new flat structure\r\n\r\n* Fix Flow\r\n\r\n* Fix CJS and UMD builds\r\n\r\n* Fix FB bundles\r\n\r\n* Fix RN bundles\r\n\r\n* Prettier\r\n\r\n* Fix lint\r\n\r\n* Fix warning printing and error codes\r\n\r\n* Fix buggy return\r\n\r\n* Fix lint and Flow\r\n\r\n* Use Yarn on CI\r\n\r\n* Unbreak Jest\r\n\r\n* Fix lint\r\n\r\n* Fix aliased originals getting included in DEV\r\n\r\nShouldnt affect correctness (they were ignored) but fixes DEV size regression.\r\n\r\n* Record sizes\r\n\r\n* Fix weird version in package.json\r\n\r\n* Tweak bundle labels\r\n\r\n* Get rid of output option by introducing react-dom/server.node\r\n\r\n* Reconciler should depend on prop-types\r\n\r\n* Update sizes last time\"",
                "commitDate": "2017-10-24T23:55:00Z"
            },
            {
                "commitId": "313611572b6567d229367ed20ff63d1bca8610bb",
                "commitMessage": "\"Reorganize code structure (#11288)\n\n* Move files and tests to more meaningful places\r\n\r\n* Fix the build\r\n\r\nNow that we import reconciler via react-reconciler, I needed to make a few tweaks.\r\n\r\n* Update sizes\r\n\r\n* Move @preventMunge directive to FB header\r\n\r\n* Revert unintentional change\r\n\r\n* Fix Flow coverage\r\n\r\nI forgot to @flow-ify those files. This uncovered some issues.\r\n\r\n* Prettier, I love you but youre bringing me down\r\nPrettier, I love you but youre bringing me down\r\n\r\nLike a rat in a cage\r\nPulling minimum wage\r\nPrettier, I love you but youre bringing me down\r\n\r\nPrettier, youre safer and youre wasting my time\r\nOur records all show you were filthy but fine\r\nBut they shuttered your stores\r\nWhen you opened the doors\r\nTo the cops who were bored once theyd run out of crime\r\n\r\nPrettier, youre perfect, oh, please dont change a thing\r\nYour mild billionaire mayors now convinced hes a king\r\nSo the boring collect\r\nI mean all disrespect\r\nIn the neighborhood bars Id once dreamt I would drink\r\n\r\nPrettier, I love you but youre freaking me out\r\nTheres a ton of the twist but were fresh out of shout\r\nLike a death in the hall\r\nThat you hear through your wall\r\nPrettier, I love you but youre freaking me out\r\n\r\nPrettier, I love you but youre bringing me down\r\nPrettier, I love you but youre bringing me down\r\nLike a death of the heart\r\nJesus, where do I start?\r\nBut youre still the one pool where Id happily drown\r\n\r\nAnd oh! Take me off your mailing list\r\nFor kids who think it still exists\r\nYes, for those who think it still exists\r\nMaybe Im wrong and maybe youre right\r\nMaybe Im wrong and maybe youre right\r\nMaybe youre right, maybe Im wrong\r\nAnd just maybe youre right\r\n\r\nAnd oh! Maybe mother told you true\r\nAnd therell always be somebody there for you\r\nAnd youll never be alone\r\nBut maybe shes wrong and maybe Im right\r\nAnd just maybe shes wrong\r\nMaybe shes wrong and maybe Im right\r\nAnd if so, heres this song!\"",
                "commitDate": "2017-10-19T18:50:24Z"
            },
            {
                "commitId": "fedb2ff8ecd96d11ff3f609fbffa76848203f255",
                "commitMessage": "\"Remove createClass, PropTypes, DOM factories, and createMixin from React object (#9788)\"",
                "commitDate": "2017-05-30T14:35:30Z"
            },
            {
                "commitId": "964c263d8fc6e7119f5773f7fa857c9985db40cf",
                "commitMessage": "\"Downgrade deprecation warnings from errors to warnings (#9650)\n\n* Initial regeneration of results.json\r\n\r\n**what is the change?:**\r\nWe ran `yarn build` and updated the perf. stats record.\r\n\r\n**why make this change?:**\r\nSome commits have landed without updating this. By getting an initial update, I can run the build script again after my changes and see any size regressions.\r\n\r\n* Downgrade deprecation warnings from errors to warnings\r\n\r\n**what is the change?:**\r\nSwapping out `warning` module for a fork that uses `console.warn`.\r\nIt looks like we were using the `warning` module for deprecation notices, *but* there is also a deprecated module designed specifically for deprecation notices.\r\n\r\nHowever, we could not find any place that it was currently used.\r\n\r\nSince Reacts build process is not 100% clear to me, I assume it could still be used somewhere by something and just updated it along with other deprecation notices.\r\n\r\nWe might consider a follow-up diff that does some clean up here;\r\n - remove deprecated module if its unused, OR\r\n - use deprecated module for all our current deprecation warnings\r\n\r\n**why make this change?:**\r\n- We have had complaints about noisy warnings, in particular after introducing new deprecations\r\n- They potentially cause CI failures\r\n- Deprecations are not really time-sensitive, can ship without breaking your app, etc.\r\n\r\nFor more context - https://github.com/facebook/react/issues/9395\r\n\r\n**test plan:**\r\n`npm run test`\r\nand unit tests for the new modules\r\nand manual testing (WIP)\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9395\r\n\r\n* Add lowPriorityWarning to ReactExternals\r\n\r\n**what is the change?:**\r\nWe wont bundle lowPriorityWarning with the rest of React when building for Facebook.\r\nNOTE: A parallel commit will introduce an internal implementation of lowPriorityWarning in Facebooks codebase, to compensate. Will post a comment with the diff number once that is up.\r\n\r\n**why make this change?:**\r\nSo that the sync between github and Facebook can go more smoothly!\r\n\r\n**test plan:**\r\nWe will see when I run the sync! But this is a reasonable first step imo.\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9398\r\n\r\n* Make state mutations an error, not low-pri warning\r\n\r\n**what is the change?:**\r\nEven though this is a \"deprecation\" warning, we still want to use console.error for it.\r\n\r\n**why make this change?:**\r\n- Its not likely to come up now, hopefully, because this warning has been present for some time\r\n- This will cause real issues in production if ignored\r\n\r\n**test plan:**\r\n`yarn test` - we did fix one test which failed bc of this change\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9398\r\n\r\n* Fix test of assigning to this.state that was only passing in fiber\r\n\r\n**what is the change?:**\r\nupdated a unit test for assigning directly to state; it once again raises an error and not a warning.\r\n\r\n**why make this change?:**\r\nSo that tests pass\r\n\r\n**test plan:**\r\n REACT_DOM_JEST_USE_FIBER=1 yarn run test\r\n\r\n**issue:**\r\n\r\n* Update results.json\"",
                "commitDate": "2017-05-23T16:35:42Z"
            },
            {
                "commitId": "e71b3087c81d95c3e7d3f015d0db60436c95fe6c",
                "commitMessage": "\"Added stack renderer to react-test-renderer bundle temporarily (#9514)\n\nAlso fixed an error in a temporary export property that had been added to the React object\"",
                "commitDate": "2017-04-25T01:45:43Z"
            },
            {
                "commitId": "86dd083f455f71369b4c1bf1e798dd2fd5a3c9c4",
                "commitMessage": "\"Move ReactDOMFactories into separate package (#8356)\n\n- Update examples to no longer use React.DOM\r\n- Add package and documentation entries for react-addons-dom-factories\r\n- Update dom-factories readme\r\n- Set up proxy to intercept React.DOM usage\r\n- Update ReactDOM children tests to use createElement\r\n- Add more specific warning assertion for React DOM factories\r\n- Do not use expectDev in ReactDOMFactories tests\"",
                "commitDate": "2017-04-24T15:08:17Z"
            },
            {
                "commitId": "66f2097f33a3084c79aa536e11d3ca09195bc320",
                "commitMessage": "\"Shallow renderer and test utils bundles (#9426)\n\nShallow renderer and test utils bundles\r\n\r\nAdds new bundles introduced with React 15.5 release to master (and 16 alpha)\r\n\r\nreact-dom/test-utils:\r\n\r\nThis new bundle contains what used to be react-addons-test-utils. This bundle shares things from react-dom rather than duplicates them.\r\n\r\nA temporary createRenderer method has been left behind as a way to access the new shallow renderer. This is for the ReactNative release cycle only and should be going away before the final release.\r\n\r\nreact-test-renderer/shallow:\r\n\r\nThis new shallow renderer is almost entirely stand-alone (in that it doesnt use the React reconciler or scheduler). The only touch points are ReactElement and prop/context validation. This renderer is stack and fiber compatible.\"",
                "commitDate": "2017-04-19T23:45:31Z"
            },
            {
                "commitId": "2beec2f308e27dbe902a8d68e1fc9f3d70ee9372",
                "commitMessage": "\"createClass + PropTypes + checkPropTypes warnings (#9399)\n\n(Temporarily) re-adds getters with deprecation warnings for React.PropTypes, React.checkPropTypes, and React.createClass.\r\n\r\n* 08bd020: Replace all references to React.PropTypes with prop-types to avoid triggering our own warning message.\r\n* ef5b5c6: Removed several references to React.createClass that appeared after rebasing this branch. (reviewed by @flarnie)\r\n* 524ce20: Added getters for createClass and PropTypes to the main React isomorphic object, behind one-time warning messages. (reviewed by @spicyj)\r\n* db48f54: Fixed Rollup bundles to inline prop-types and create-react-class for UMD builds only. (reviewed by @spicyj, @trueadm )\r\n* cf49cfd: Updated tests-passing.txt to remove tests that were deleted in this branch.\r\n* d34109a: Responses to PR feedback from @spicyj. (Added package.json dependencies to packages/react and packages/react-dom. Renamed a var. Expanded on an inline comment.)\r\n* 488c8d2: Added warning for moved package to React.checkPropTypes accessor too and updated build script.\r\n* 83bcb29: Wordsmithing for deprecation notices (added fb.me links).\r\n* afdc9d2: Tweaked legacy module inlining to remove order-of-deps constraint\r\n* d1348b9: Removed $FlowFixMe.\r\n* 7dbc3e7: More wordsmithing of deprecation notices based on Dans feedback.\"",
                "commitDate": "2017-04-11T21:28:03Z"
            },
            {
                "commitId": "957fbc92b123030c389bf8b4b874522bdf2db72c",
                "commitMessage": "\"react-create-class -> create-react-class\"",
                "commitDate": "2017-04-11T00:06:32Z"
            },
            {
                "commitId": "646e7863348a427e1ed9163a9a96fa759112f102",
                "commitMessage": "\"Warn once when attempting to access React.createClass\n\nShould still be undefined.\"",
                "commitDate": "2017-04-11T00:03:05Z"
            },
            {
                "commitId": "5cfaa7cf68564b8d96c94fa0d45e7feb6dc80895",
                "commitMessage": "\"Delete createClass\n\nRemove createClass from isomorphic package\"",
                "commitDate": "2017-04-11T00:03:05Z"
            },
            {
                "commitId": "72196da82915bee400edb1599d4223926aa2a8a0",
                "commitMessage": "\"Replace shims with explicit React access from the renderers for shared global state (#9366)\n\n* Remove non-existent /lib/ from souce files\r\n\r\n* Replace all shims with explicit access\r\n\r\nThis deletes shims and changes to access require(react).__DO_NOT_USE__ from renderers for global shared state.\r\n\r\nI cloned flattenChildren() and traverseAllChildren() because they relied on CurrentOwner but were used both from Stack and Isomorphic. The stack implementations will die, and the isomorphic ones can be changed to be optimized for Children specifically in the future.\r\n\r\nI also deleted UMD shims because they are now unnecessary. I moved the internals assignment to main modules since theyre now used in tests, and made them direct UMD entry points.\"",
                "commitDate": "2017-04-07T21:07:10Z"
            },
            {
                "commitId": "b1b4a2fb252f26fe10d29ba60d85ff89a85ff3ec",
                "commitMessage": "\"Merge pull request #9101 from sebmarkbage/prettier\n\nUse Prettier\"",
                "commitDate": "2017-03-14T22:33:27Z"
            },
            {
                "commitId": "1843f8716803d380df34a7362d80022352853931",
                "commitMessage": "\"Run prettier\"",
                "commitDate": "2017-03-14T00:05:18Z"
            },
            {
                "commitId": "8bc11649df767402c262b6c9b67c6dd811d42cd0",
                "commitMessage": "\"Merge branch master into remove-stack-dependencies-from-tests\"",
                "commitDate": "2017-03-01T12:32:36Z"
            },
            {
                "commitId": "e452e3374135c116ef687a8bb3a5d277e3cde8fb",
                "commitMessage": "\"providesModule -> explicit requires for cross-package dependencies (#9078)\n\n* Add forwarding modules\r\n\r\n* Codemod to use full package path outside of own package\r\n\r\nFiles that require modules from a different package than their own now\r\ndoes so by the npm path name instead of the providesModule.\r\n\r\n* Codemod fbjs module dependencies\r\n\r\n* Fix gulp module mapping config\r\n\r\nThis is a bit lame but because of our module rewrite we need to white\r\nlist all the paths that we dont *dont* want to rewrite.\"",
                "commitDate": "2017-03-01T02:42:52Z"
            },
            {
                "commitId": "f3c2d9f308eeee49d9c580c063ec7a109e9ad635",
                "commitMessage": "\"Merge pull request #9004 from acdlite/proptypescheck\n\nAPI for checking external objects against React prop types\"",
                "commitDate": "2017-02-23T22:37:19Z"
            },
            {
                "commitId": "03ed3437c988f294045770bf403839603ce00ae9",
                "commitMessage": "\"Fix build config\n\nReactDebugCurrentFrame is shared state.\n\ncheckPropTypes should be imported via the main React export,\nnot imported directly.\"",
                "commitDate": "2017-02-23T19:14:15Z"
            },
            {
                "commitId": "77c7792556e4697636d1eb5dc34042566185c26c",
                "commitMessage": "\"Remove React.__spread\"",
                "commitDate": "2017-02-10T20:27:02Z"
            },
            {
                "commitId": "7e8068b9840dd98813787736385919683ddf2002",
                "commitMessage": "\"Move component base classes into a single file (#8918)\"",
                "commitDate": "2017-02-02T20:24:39Z"
            },
            {
                "commitId": "2be0583ed37ffc22fefe61292a12daee083e6ed9",
                "commitMessage": "\"Update deprecation wording to be less aggressive\"",
                "commitDate": "2017-01-24T06:18:23Z"
            },
            {
                "commitId": "2b7814f713629d3f629ea9d74f349b77369fdae3",
                "commitMessage": "\"Deprecate React.createMixin\n\nThis API was never fully implemented. Since mixins are no longer considered part of the future React API, it will be removed.\"",
                "commitDate": "2017-01-24T06:18:23Z"
            },
            {
                "commitId": "c8fbdac22717e91d1f1638a932eed3ce4cc39ff7",
                "commitMessage": "\"Add React.PureComponent (#7195)\n\nThis provides an easy way to indicate that components should only rerender when given new props, like PureRenderMixin. If you rely on mutation in your React components, you can continue to use `React.Component`.\r\n\r\nInheriting from `React.PureComponent` indicates to React that your component doesnt need to rerender when the props are unchanged. Well compare the old and new props before each render and short-circuit if theyre unchanged. Its like an automatic shouldComponentUpdate.\"",
                "commitDate": "2016-07-06T20:24:44Z"
            },
            {
                "commitId": "d955ee9fae71e2037e9c876e2ab8cb537a8c7e43",
                "commitMessage": "\"Move ReactElementValidator to __DEV__ block (#6830)\n\nIt saves some more bytes in production mode.\"",
                "commitDate": "2016-05-22T09:01:21Z"
            },
            {
                "commitId": "6c885d28c51ea30af0d8a4031dedcea98ef4114c",
                "commitMessage": "\"Remove duplicates and move files out of native/vendor\n\nMoving the event plugins into their dedicated folder\n\nRemoving the ExecutionEnvironment override. I will just have to fix where needed. Probably related to the Chrome debugger?\"",
                "commitDate": "2016-04-20T02:35:30Z"
            },
            {
                "commitId": "f463b731ee5fce75ccf1df43d6174527016a0379",
                "commitMessage": "\"Copy files from the react-native repo\"",
                "commitDate": "2016-04-20T02:35:30Z"
            },
            {
                "commitId": "516c1d809ea56dbd109f54712efea6923ac76ee6",
                "commitMessage": "\"Merge pull request #6444 from zpao/re__spreadwarn\n\nAdd back React.__spread and make it warn\"",
                "commitDate": "2016-04-08T00:30:44Z"
            },
            {
                "commitId": "fc1cfb6225f5c3af6843515363db63ed3dcbb824",
                "commitMessage": "\"Make React.__spread warn\"",
                "commitDate": "2016-04-08T00:30:23Z"
            },
            {
                "commitId": "f02d87bdb55ebd84943c5da5d6de92e3488fa2bc",
                "commitMessage": "\"Revert \"Merge pull request #6431 from sebmarkbage/killspread\"\n\nThis reverts commit a37e4e94fcae9424094378349dc11bafe1e47973, reversing\nchanges made to 411951d5b8a4a467adc213d4533c87a7c3b06bf8.\"",
                "commitDate": "2016-04-07T23:16:37Z"
            },
            {
                "commitId": "a37e4e94fcae9424094378349dc11bafe1e47973",
                "commitMessage": "\"Merge pull request #6431 from sebmarkbage/killspread\n\nKill React.__spread\"",
                "commitDate": "2016-04-07T01:42:45Z"
            },
            {
                "commitId": "a142fd257803a218b5b9b2e76c327f0421b9b8b6",
                "commitMessage": "\"Kill React.__spread\n\nThis was only for a JSTransform related experiment that is now\ndead along with JSTransform.\"",
                "commitDate": "2016-04-07T00:08:50Z"
            },
            {
                "commitId": "80bff5397bf854750dbe7c286f61654ea58938c5",
                "commitMessage": "\"Merge pull request #6376 from zpao/object.assign\n\nUse object-assign instead of our own dated \"polyfill\"\"",
                "commitDate": "2016-04-04T17:21:39Z"
            },
            {
                "commitId": "1573baaee8ba1c9cd84145b01effcb5eb80503fb",
                "commitMessage": "\"Use Object.assign directly and inject object-assign at compile\"",
                "commitDate": "2016-04-04T16:53:25Z"
            },
            {
                "commitId": "6a8ebfc41842fb200c87a919478dcd3aa95be0d7",
                "commitMessage": "\"Merge pull request #6331 from zpao/isonpmorphic\n\nMake Browserify-specific modules to remove DOM dependencies from npm package\"",
                "commitDate": "2016-03-24T23:01:51Z"
            },
            {
                "commitId": "d17091ddebf317173eb30e3ab4a8e28e124c8f50",
                "commitMessage": "\"Make Browserify-specific modules to remove DOM dependencies from npm package\"",
                "commitDate": "2016-03-24T22:28:52Z"
            },
            {
                "commitId": "209b7522d99a8af36f8d9e06ce622c59b793e5a3",
                "commitMessage": "\"update zh-docs14.3 ,fixed confliction\"",
                "commitDate": "2016-01-14T10:38:07Z"
            },
            {
                "commitId": "fcc63e1fff7709d8cc749a6a54f788b0a5ab0983",
                "commitMessage": "\"Merge pull request #5832 from jimfb/cleanup-top-level-dom-api\n\nRemove DOM functions from top-level isomorphic API\"",
                "commitDate": "2016-01-13T23:41:03Z"
            },
            {
                "commitId": "2e1fb4b52972711199d5065625251642f7d75c29",
                "commitMessage": "\"Remove DOM functions from top-level isomorphic API\"",
                "commitDate": "2016-01-12T07:57:08Z"
            },
            {
                "commitId": "3b96650e39ddda5ba49245713ef16dbc52d25e9e",
                "commitMessage": "\"Merge pull request #5748 from rickbeerendonk/year-agnostic-copyright\n\nYear-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.\"",
                "commitDate": "2015-12-30T07:24:24Z"
            },
            {
                "commitId": "bef45b0b1a98ea9b472ba664d955a039cf2f8068",
                "commitMessage": "\"Year-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.\"",
                "commitDate": "2015-12-29T19:20:32Z"
            },
            {
                "commitId": "c07b304c76ac9cdc4bae875391e7902cf0e8e2f3",
                "commitMessage": "\"Merge pull request #5381 from kevinrobinson/react-dom-server-package\n\nAdd additional secret property to build artifact for react-dom-server\"",
                "commitDate": "2015-11-18T00:48:08Z"
            },
            {
                "commitId": "45c612ed7a56b91f4c1d056c824de54673a2c241",
                "commitMessage": "\"Add additional secret property and build for react-dom-server\n\nUpdate eslintrc, travis build and add task to Gruntfile\"",
                "commitDate": "2015-11-03T21:39:58Z"
            },
            {
                "commitId": "69ab7145bc36a500195ccf0e2937ded21520582f",
                "commitMessage": "\"Merge pull request #4814 from zpao/build-react-dom-browser-2\n\nBuild react dom browser 2\"",
                "commitDate": "2015-09-09T05:33:08Z"
            },
            {
                "commitId": "c0270a167397f7083f77012d43180cc22bbae13e",
                "commitMessage": "\"Merge pull request #4798 from zpao/pull-out-version\n\nMove version to standalone module in preparation for reuse\"",
                "commitDate": "2015-09-08T23:30:05Z"
            },
            {
                "commitId": "b2ca3349c27b57b1e9462944cbe4aaaf76783d2b",
                "commitMessage": "\"Actually build react-dom file with the build\"",
                "commitDate": "2015-09-09T05:18:44Z"
            },
            {
                "commitId": "58d62989bd4e8da32e58db35a96868ef2258c2c9",
                "commitMessage": "\"Move version to standalone module in preparation for reuse\"",
                "commitDate": "2015-09-08T17:18:41Z"
            },
            {
                "commitId": "4b9c349fd057b3c4b1a0fab5fbdf5bd0c625db8d",
                "commitMessage": "\"Merge pull request #4702 from spicyj/react-mod-depr\n\nAdd deprecation warnings to React module\"",
                "commitDate": "2015-09-01T21:40:48Z"
            },
            {
                "commitId": "c04d02e5e8de18436ac95037ab856ac5ba7d29b9",
                "commitMessage": "\"Add warnings to React module\"",
                "commitDate": "2015-09-01T21:36:41Z"
            },
            {
                "commitId": "3f6bca7b1638ee940bb01989377abc9864edb6fe",
                "commitMessage": "\"0.14.0-beta3\"",
                "commitDate": "2015-08-03T21:24:24Z"
            },
            {
                "commitId": "681bbb629fa80a67fa79ced11e5a4cad6c1878fe",
                "commitMessage": "\"0.14.0-beta2\"",
                "commitDate": "2015-07-31T04:29:09Z"
            },
            {
                "commitId": "d16481d0e7d23771c5d94e5a0eeaf64e02f07979",
                "commitMessage": "\"Merge pull request #4453 from spicyj/react-dom\n\nRename ReactDOMClient to ReactDOM\"",
                "commitDate": "2015-07-23T18:27:25Z"
            },
            {
                "commitId": "6c20271488d8abfa82dda14fd8d2a947549c21d7",
                "commitMessage": "\"Rename ReactDOMClient to ReactDOM\n\nThis closer matches the npm package name and (I assume) is what we want to call it internally.\"",
                "commitDate": "2015-07-22T02:30:09Z"
            },
            {
                "commitId": "b4e74e38e43ac53af8acd62c78c9213be0194245",
                "commitMessage": "\"Bump version to beta1\"",
                "commitDate": "2015-07-03T08:46:35Z"
            },
            {
                "commitId": "8471cc5f47bac0dbfd6b3123775fc28757db0ed3",
                "commitMessage": "\"0.14.0-alpha3\"",
                "commitDate": "2015-05-27T23:47:35Z"
            },
            {
                "commitId": "b687a229530dc304fbb74018027156968258c295",
                "commitMessage": "\"0.14.0-alpha2\"",
                "commitDate": "2015-05-20T20:37:42Z"
            },
            {
                "commitId": "52752446760dee0bc7232b4146f5a309ac57f065",
                "commitMessage": "\"Merge pull request #3866 from sebmarkbage/coreapi\n\nReorganize Src Directory for Isomorphic React Package\"",
                "commitDate": "2015-05-16T01:39:36Z"
            },
            {
                "commitId": "0b063f8a09dae4b6b1de400ff2d9aba9108647de",
                "commitMessage": "\"Reorganize Src Files for Isomorphic React Package\n\nThe new folder structure is organized around major packages that are expected to ship separately in some form.\n\n`/isomorphic`\n\nI moved classic/modern and children utils into a directory called \"isomorphic\" with the main export being ReactIsomorphic. This will eventually become the \"react\" package.\n\nThis includes all the dependencies that you might need to create a component without dependencies on the renderer/reconciler.\n\nThe rest moves into decoupled renderers.\n\n`/renderers/dom/client` - This is the main renderer for DOM.\n\n`/renderers/dom/server` - This is the server-side renderer for HTML strings.\n\n`/addons` and `/test` - Same as before for now.\n\nYoure not supposed to take on a dependency inside another package.\n\nShared code is organized into a \"shared\" directory which is intended to support all the packages in that subdirectory. Meaning that once we swap to CommonJS modules, the only time you should use `..` is to target `../shared/` or `../../shared`.\n\nE.g. `/shared/` is common utils that are used by everything.\n\n`/renderers/shared/` is code that is shared by all renderers, such as the main reconciliation algorithm.\n\nShared code will likely be copied into each package rather than referenced. This allow us to have separate state and allow inlining and deadcode elimination.\"",
                "commitDate": "2015-05-16T01:35:22Z"
            },
            {
                "commitId": "7839e072313db4a21c246bb1e35e1f510139bb12",
                "commitMessage": "\"0.14.0-alpha1\"",
                "commitDate": "2015-05-11T05:36:50Z"
            },
            {
                "commitId": "4f285b7ba07b3153a0b9b61c35fc05da37ebdd9e",
                "commitMessage": "\"Merge pull request #3676 from zpao/rm-withContext\n\nRemove withContext from top-level API\"",
                "commitDate": "2015-04-22T16:45:26Z"
            },
            {
                "commitId": "5297ff66cf8f9b6459d6cf73d4e3a54cc010b34d",
                "commitMessage": "\"Remove withContext from top-level API\"",
                "commitDate": "2015-04-16T22:58:27Z"
            },
            {
                "commitId": "088d71c7c1eaef9a14ccccabe05b73a57c755703",
                "commitMessage": "\"Merge pull request #3693 from reedloden/swap-http-to-https\n\nSSL/TLSize all the things! (convert http:// to https:// where appropriate)\"",
                "commitDate": "2015-04-20T18:02:29Z"
            },
            {
                "commitId": "3e8951e8c7dcb44035c8524c0fd82967652d41dd",
                "commitMessage": "\"SSL/TLSize all the things! (convert http:// to https:// where appropriate)\n\nUpdate links to use https:// where it is supported. Theres probably a lot\nmore that could be fixed, but these are the core ones I found (especially\nthe download links in order to prevent MITM attacks). Note that there are\nsome fb.me links that will redirect to http:// even while accessed over\nhttps://, but this seemed like the best way to fix those for now.\n\nNOTE: Only non-third-party files were modified. There are references to\nhttp:// URLs in vendored/third-party files, but seems appropriate to fix\nupstream for those rather than editing the files.\n\nAlso, copy one image locally to the blog, as it was hotlinking to a site\nthat did not support https://.\n\nLast, use youtube-nocookie.com instead of youtube.com for video embeds,\nas the former doesnt try to set a cookie on load (privacy enhancement).\"",
                "commitDate": "2015-04-18T23:49:32Z"
            },
            {
                "commitId": "88fb106c39545fdfea71e56f55418b8058e6b3e6",
                "commitMessage": "\"Merge pull request #3646 from facebook/revert-3580-2402-warn-multiple-copies-of-react-on-same-page\n\nRevert \"Warn when multiple instances of React are loaded on the same page\"\"",
                "commitDate": "2015-04-10T20:54:57Z"
            },
            {
                "commitId": "8fa15080b2eafa0ab998f0e3745971af40e13e69",
                "commitMessage": "\"Revert \"Warn when multiple instances of React are loaded on the same page\"\"",
                "commitDate": "2015-04-10T19:34:04Z"
            },
            {
                "commitId": "f1cd867323c420c577f82628ba498637a3d6e5f7",
                "commitMessage": "\"Merge pull request #3580 from robertknight/2402-warn-multiple-copies-of-react-on-same-page\n\nWarn when multiple instances of React are loaded on the same page\"",
                "commitDate": "2015-04-09T02:18:44Z"
            },
            {
                "commitId": "8ad58ae45a4fd3a5def5732fc377f1351950c4dd",
                "commitMessage": "\"Warn when multiple instances of React are loaded on the same page\n\nThis causes a variety of hard-to-debug issues.\nSee #2402 for examples.\n\nFixes #2402\"",
                "commitDate": "2015-04-03T10:46:58Z"
            },
            {
                "commitId": "7fe5a3aadd308961d5557ba1060eaca14a22f825",
                "commitMessage": "\"Merge pull request #3442 from spicyj/kill-initializeTouchEvents\n\nKill React.initializeTouchEvents for good\"",
                "commitDate": "2015-03-19T21:15:26Z"
            },
            {
                "commitId": "9c4c2f58ea103f84c055d2241c0f178c79d90fd9",
                "commitMessage": "\"Kill React.initializeTouchEvents for good\n\nNow that #1169 is fixed, the only thing this is used for is to determine whether `onTouchTap` causes touch listeners to be added. The only internal uses of TapEventPlugin are where touch events are already initialized (so this doesnt make a difference) and we dont support `onTouchTap` as part of the public API so this should be safe.\"",
                "commitDate": "2015-03-17T21:12:26Z"
            },
            {
                "commitId": "26664315a61af6a39441387be8bd5f45c0dbed2a",
                "commitMessage": "\"Merge pull request #3438 from spicyj/lint\n\nLint fixes\"",
                "commitDate": "2015-03-17T21:14:57Z"
            },
            {
                "commitId": "c34fa7f3d22d04a7089fc8930b06be9e73f4b0d5",
                "commitMessage": "\"Lint fixes\"",
                "commitDate": "2015-03-17T20:30:15Z"
            },
            {
                "commitId": "53f92bf8587b64e0803b66b8bf7f337add2e75a3",
                "commitMessage": "\"Fix comma splice and line length\"",
                "commitDate": "2015-03-10T22:36:27Z"
            },
            {
                "commitId": "645a6caaf5606af9d8479000426e9cb94aeada3b",
                "commitMessage": "\"Merge pull request #3323 from jonhester/ie8-compat-mode\n\nwarn if IE8 is in compatibility mode\"",
                "commitDate": "2015-03-10T22:35:09Z"
            },
            {
                "commitId": "65c4aeaa3a8fb80be4f6f9f3d978601aad678b9f",
                "commitMessage": "\"use warning module instead of console.debug\"",
                "commitDate": "2015-03-05T18:53:12Z"
            },
            {
                "commitId": "e313616be7a6525924e8b822772fa0669e756472",
                "commitMessage": "\"Bump version so we can get back to work\"",
                "commitDate": "2015-03-10T22:06:35Z"
            },
            {
                "commitId": "a999ac1ac30bd7ec9db152027fc480ea34652b5d",
                "commitMessage": "\"warn if IE8 is in compatibility mode\"",
                "commitDate": "2015-03-05T13:48:28Z"
            },
            {
                "commitId": "21b41480a531199ff48034c513288765950409d4",
                "commitMessage": "\"v0.13.0-rc2\"",
                "commitDate": "2015-03-03T19:46:01Z"
            },
            {
                "commitId": "ecc4ad569a5730748f00a5cceb118629fa01235b",
                "commitMessage": "\"Merge pull request #3266 from sebmarkbage/cloneelement\n\nAdd cloneElement Implementation\"",
                "commitDate": "2015-03-02T20:15:20Z"
            },
            {
                "commitId": "4adcee69a04058a4858837752e7e8f011bb652f9",
                "commitMessage": "\"Add cloneElement Implementation\n\nThis is a new version of cloneWithProps but this one is moving out of\nadd-ons. Unlike cloneWithProps, this one doesnt have special logic for\nstyle, className and children.\n\nThis one also preserves the original ref. This is critical when upgrading\nfrom a mutative pattern where a child might have a ref on it.\n\nIt also preserves context, which is similar to how context would work when\nit is parent based. It also ensures that were compatible with the old\nmutative pattern which makes updates easier.\"",
                "commitDate": "2015-02-26T09:17:05Z"
            },
            {
                "commitId": "06126ad3f4d063e89b3168abce79c9cd9961831c",
                "commitMessage": "\"v0.13.0-rc1\"",
                "commitDate": "2015-02-22T21:26:13Z"
            },
            {
                "commitId": "5126cee0f521e2e546e37560df2fe3967039a034",
                "commitMessage": "\"v0.13.0-beta.2\"",
                "commitDate": "2015-02-14T02:28:03Z"
            },
            {
                "commitId": "50c38bbc7598f1537c2928d370de78acce6a81c1",
                "commitMessage": "\"Merge pull request #3023 from sebmarkbage/devtoolsfix\n\nExpose ReactReconciler\"",
                "commitDate": "2015-02-03T06:07:28Z"
            },
            {
                "commitId": "e67ff7ee78620448badba2cf8ac3af6ee2893d6f",
                "commitMessage": "\"Expose ReactReconciler\n\nThis can be used by devtools to monkey patch the reconciler and therefore\nget notified whenever any internal instance is updated.\"",
                "commitDate": "2015-02-03T02:15:31Z"
            },
            {
                "commitId": "2aeb8a2a6beb00617a4217f7f8284924fa2ad819",
                "commitMessage": "\"Merge pull request #2995 from rickbeerendonk/copyright-2015\n\nUpdate copyright headers for 2015\"",
                "commitDate": "2015-02-02T19:15:30Z"
            },
            {
                "commitId": "3e0750a4ad2444c2df708b144ff0c8af7628881d",
                "commitMessage": "\"Update copyright headers for 2015\"",
                "commitDate": "2015-01-31T19:18:25Z"
            },
            {
                "commitId": "5bd078508a1beb500b801eb7de9488927a874376",
                "commitMessage": "\"v0.13.0-beta.1\"",
                "commitDate": "2015-01-28T05:13:35Z"
            },
            {
                "commitId": "61c4497d58690b179588d87defa7d9499e3a58f7",
                "commitMessage": "\"Merge pull request #2959 from sebmarkbage/createmixin\n\nWe dont currently have a way to trace the origin of a mixin\"",
                "commitDate": "2015-01-27T18:39:25Z"
            },
            {
                "commitId": "b3f96d97f954188049854ed4599cbd77158c3ae3",
                "commitMessage": "\"Merge pull request #2957 from sebmarkbage/renamecomponent\n\nRename ReactComponentBase -> ReactComponent\"",
                "commitDate": "2015-01-27T18:39:07Z"
            },
            {
                "commitId": "295ef0063b933e13b2ddd541c108b386b35b648b",
                "commitMessage": "\"We dont currently have a way to trace the origin of a mixin\n\nThis makes it more difficult to find bugs in mixins both dynamically\nand using a static type system.\n\nWe also dont have a way to find these to be upgraded to a new mixin\nsyntax if we needed to.\n\nThis hook is currently an optional noop but could be made required to\ncreate a mixin class.\"",
                "commitDate": "2015-01-27T17:36:14Z"
            },
            {
                "commitId": "c3c98084b94a359adbfcf84b88b3c901aade50b9",
                "commitMessage": "\"Rename ReactComponentBase -> ReactComponent\n\nWe freed up this internal name by removing the internal base class.\nWere now free to use this name as it was intended.\n\nReactDOMComponent and ReactCompositeComponent are still confusing as\ntheyre internal but well rename them later.\"",
                "commitDate": "2015-01-27T17:22:07Z"
            },
            {
                "commitId": "1c90efbf7cc982dcecaa2044f18d27df5ae876a1",
                "commitMessage": "\"Merge pull request #2923 from sebmarkbage/dropcomponentmixin\n\nReplace ReactComponentMixin with ReactReconciler\"",
                "commitDate": "2015-01-24T02:06:50Z"
            },
            {
                "commitId": "690409a91239e04a38f3f819f8c5b13a6c60b114",
                "commitMessage": "\"Replace ReactComponentMixin with ReactReconciler\n\nInstead of putting the shared code in a base class method, we use a wrapper\ncall around all invokations. That way theyre free to add code before AND\nafter the non-shared code.\n\nThat way we ensure that component extensions dont need to implement\nReactComponentMixin and do super() calls into it. This helps to create a\ntighter API for custom component extensions.\n\nThis provides the first step towards moving these methods to static\nmethods which allows to use a different dispatch mechanism instead of\nvirtual method calls. E.g. pattern matching.\"",
                "commitDate": "2015-01-24T01:27:42Z"
            },
            {
                "commitId": "8616a6f60e8eeaba9988a4ade56a59cb3c4ea73d",
                "commitMessage": "\"Merge pull request #2919 from sebmarkbage/removecreateref\n\nRemove React.createRef API\"",
                "commitDate": "2015-01-23T03:13:55Z"
            },
            {
                "commitId": "a3a464c8fcd2fc9d04a5765f41f56315c12de44a",
                "commitMessage": "\"Remove React.createRef API\n\nThis API was removed so this wont work.\"",
                "commitDate": "2015-01-23T03:11:11Z"
            },
            {
                "commitId": "deae575dae1295572b9f8694232eab68c2c6a84e",
                "commitMessage": "\"v0.13.0-alpha.2\"",
                "commitDate": "2015-01-16T18:33:42Z"
            },
            {
                "commitId": "54c82da15f6b4717425edbf68e23ae82583a50af",
                "commitMessage": "\"Merge pull request #2751 from zpao/eslint-fixup\n\nEslint fixup\"",
                "commitDate": "2015-01-13T23:27:54Z"
            },
            {
                "commitId": "df64a67b7f930f90423e194637af624cdc155526",
                "commitMessage": "\"codemod \"use strict\" to use strict for better linting\"",
                "commitDate": "2015-01-13T23:26:32Z"
            },
            {
                "commitId": "d138f9a35ba9b639d9ec0cb59b58146f6e657a68",
                "commitMessage": "\"Merge pull request #2805 from sebmarkbage/baseclass1\n\nIntroducing ReactComponentBase base class\"",
                "commitDate": "2015-01-13T19:00:56Z"
            },
            {
                "commitId": "ff032dc8576fec0bf6dbeeaf5d53325c2010d284",
                "commitMessage": "\"Introducing ReactComponentBase base class\n\nThis is the base class that will be used by ES6 classes.\n\nIm only moving setState and forceUpdate to this base class and the other\nfunctions are disabled for modern classes as were intending to deprecate\nthem. The base classes only have getters that warn if accessed. Its as if\nthey didnt exist.\n\nReactClass now extends ReactComponentBase but also adds the deprecated\nmethods. They are not yet fully deprecated on the ReactClass API.\n\nI added some extra tests to composite component which we werent testing\nto avoid regressions.\n\nI also added some test for ES6 classes. These are not testing the new\nstate initialization process. Thats coming in a follow up.\"",
                "commitDate": "2015-01-13T18:54:19Z"
            },
            {
                "commitId": "3fec78638deb5926b25063dc9f3fe8eef5140751",
                "commitMessage": "\"v0.13.0-alpha.1\n\nBumping version numbers so we can push to npm.\"",
                "commitDate": "2014-12-23T20:04:23Z"
            },
            {
                "commitId": "e0725341cf1046d54c186a66c74ee7f986d4f36a",
                "commitMessage": "\"Merge pull request #2646 from jsfb/getDOMNode-becomes-findDOMNode\n\nAdded findDOMNode, as we move toward deprecating getDOMNode\"",
                "commitDate": "2014-12-22T21:05:49Z"
            },
            {
                "commitId": "b46a6ce4bb8d6087ed424764f41fe4b8e248b3b4",
                "commitMessage": "\"Added findDOMNode, as we move toward deprecating getDOMNode\"",
                "commitDate": "2014-12-18T21:55:44Z"
            },
            {
                "commitId": "42ae61d0653fe2a7709c68c818bb0ef1f46b1552",
                "commitMessage": "\"Merge pull request #2655 from zpao/rm-deprecated\n\nRemove deprecated methods since 0.12 shipped\"",
                "commitDate": "2014-12-14T22:33:16Z"
            },
            {
                "commitId": "c46dadea55728a5c782861c15ed4989221c0674e",
                "commitMessage": "\"Remove deprecated methods since 0.12 shipped\"",
                "commitDate": "2014-12-14T22:19:44Z"
            },
            {
                "commitId": "ba95ce7b6f366c60afdefa7d2cc0f508a443d702",
                "commitMessage": "\"Merge pull request #2677 from zpao/lint-internal\n\nFix new lint errors\"",
                "commitDate": "2014-12-08T20:22:06Z"
            },
            {
                "commitId": "739baa90927d06e7e2267c65b1221931a20784a4",
                "commitMessage": "\"Fix new lint errors\n\nWell get to lint parity soon and then not need to do this.\"",
                "commitDate": "2014-12-08T20:18:41Z"
            },
            {
                "commitId": "230115da9210f389e60f7eb0e402de1a06b5f269",
                "commitMessage": "\"Make ReactTextComponent properly injectable\n\nReactTextComponents implementation is DOM-specific; instead of flattenChildren creating the ReactTextComponent instances, ReactNativeComponent now takes care of having ReactTextComponent injected and creating the component instance. I also renamed ReactTextComponent to ReactDOMTextComponent and moved it to browser/ui/ where it belongs. ReactDOMTextComponent no longer inherits directly from ReactComponent and instead implements construct and {mount,receive,unmount}Component directly.\n\nThis diff removes `ReactTestUtils.isTextComponent` which should have previously never returned true when using public APIs.\n\nTest Plan: jest, use ballmer-peak example.\"",
                "commitDate": "2014-11-15T20:30:42Z"
            },
            {
                "commitId": "9edc6260a7db25f888259fddedb4aa2250f6385f",
                "commitMessage": "\"Initial implementation of new-style refs\n\ncf. #1373\n\nThis implementation can be used in any situation that refs can currently be used (and can also be used without an owner, which is a plus).\"",
                "commitDate": "2014-11-06T03:28:12Z"
            },
            {
                "commitId": "b5bcaba77fbe53cafd7c5f6b76752b09791caadf",
                "commitMessage": "\"Merge branch master into docs-namespace-in-jsx\n\n* master: (113 commits)\n  Remove esprima-fb and use Syntax from jstransform\n  Update React.renderToString argument type in docs\n  [traverseAllChildren] fix out-of-scope var use.\n  Use double quote for transformed `displayName` and `data-*`\n  Remove unrelated comment\n  Fix typo in If/Else JSX doc.\n  Cleanup a couple unused variables\n  Use dump cache and remove factory from ReactElement-test\n  Update deprecated propTypes\n  Bring in jsfiddle integration script, add harmony\n  Extending period in which click events are ignored\n  React.renderComponent --> React.render\n  Followup fix for React.PropTypes.node\n  Add comma for readability in tutorial\n  Drop internal uses of .type on the class\n  Drop Legacy Factories Around Classes\n  Drop ReactDOM from internal DOM extensions\n  Added comma to increase readability.\n  Add 0.12 starter kit\n  Change the date and the link url to match the proper roundup\n  ...\n\nConflicts:\n\tdocs/docs/02.1-jsx-in-depth.md\"",
                "commitDate": "2014-11-05T14:30:37Z"
            },
            {
                "commitId": "a54ed49eb05200dcdc2f27ba9437d17e37571547",
                "commitMessage": "\"Merge pull request #2375 from sebmarkbage/droplegacyfactories\n\nDrop Legacy Factories\"",
                "commitDate": "2014-10-29T01:00:32Z"
            },
            {
                "commitId": "199a7d6903ed2e7c28fb32c6a28ed7f26148e13d",
                "commitMessage": "\"Drop Legacy Factories Around Classes\n\nClasses are now pure classes without a legacy factory around them.\n\nSince classes will become just any function that returns a valid instance,\nlets drop isValidClass.\n\nTheres some hacks in here for auto-mocking frameworks (jest) that mock the\nprototype of these classes. These hacks allow these classes to be mounted.\"",
                "commitDate": "2014-10-28T22:08:52Z"
            },
            {
                "commitId": "b7cd3e7d1de31108594a6698215bfa7bf8619b34",
                "commitMessage": "\"Merge pull request #2396 from sebmarkbage/classmodule\n\nMove Class Creation Concerns into a ReactClass Module\"",
                "commitDate": "2014-10-23T19:50:17Z"
            },
            {
                "commitId": "994fc7d8a727dc7b477322a5c3d4216f1215f639",
                "commitMessage": "\"Merge remote-tracking branch upstream/master into fix-gruntfile\"",
                "commitDate": "2014-10-23T07:55:43Z"
            },
            {
                "commitId": "c7bb936566bce79b35f55b558af5f09b88047a9a",
                "commitMessage": "\"Introduce React Class as an alias for Composite Component\n\nThis is in preparation for the separation of Composite Component internals\nfrom the Class abstraction.\"",
                "commitDate": "2014-10-23T01:35:10Z"
            },
            {
                "commitId": "b78fe39b6073bab20eb7785aa9ef508aabf03c3f",
                "commitMessage": "\"Bump version to 0.13.0-alpha\"",
                "commitDate": "2014-10-22T21:19:54Z"
            },
            {
                "commitId": "2bdad81955e160a5b11110b40c7222a1113cc1fb",
                "commitMessage": "\"Merge pull request #2384 from sebmarkbage/deprecateisvalidclass\n\nDeprecate isValidClass\"",
                "commitDate": "2014-10-21T00:17:56Z"
            },
            {
                "commitId": "ef971014bc22bf4cfecb31ce35de38c231c1c41d",
                "commitMessage": "\"Deprecate isValidClass\n\nFixes #2374\"",
                "commitDate": "2014-10-20T06:55:57Z"
            },
            {
                "commitId": "2b4e35870b7a0c4d681bc3c86641790dd828f0a0",
                "commitMessage": "\"v0.12.0-rc1\"",
                "commitDate": "2014-10-16T21:56:50Z"
            },
            {
                "commitId": "828efb798a94a631007efe966828fbc5b01613ea",
                "commitMessage": "\"Merge pull request #2350 from sebmarkbage/assign\n\nHide Object.assign polyfill behind a module\"",
                "commitDate": "2014-10-16T16:29:01Z"
            },
            {
                "commitId": "8210beeef4219d11b0a997f5a5abe7c348c01448",
                "commitMessage": "\"Hide Object.assign polyfill behind a module\n\nBecause the JS communitys polyfilling infrastructure sucks and well\nhave to fix it for them before we require this.\n\nJSX spread uses React.__spread\n(which might get special behavior for key/ref, not sure yet)\n\nThis never uses the native implementation and throws for prototype chains.\nOnce the native implementations are faster, well start using them.\"",
                "commitDate": "2014-10-16T16:21:10Z"
            },
            {
                "commitId": "5d3b12bb3bd6a092cf00ede07b8255a8399c2e58",
                "commitMessage": "\"Merge pull request #2312 from zpao/license-update\n\nUpdate Licenses\"",
                "commitDate": "2014-10-10T23:58:45Z"
            },
            {
                "commitId": "3991d4de6be63ea0dac5d2b9ccd6a9c4069b439b",
                "commitMessage": "\"Merge pull request #2337 from sebmarkbage/devtoolshook\n\nInject the runtime to a global instead of exposing internals\"",
                "commitDate": "2014-10-13T19:30:15Z"
            },
            {
                "commitId": "ce19af9d304bb0b2c9b3fabf6b999c45be5b7b72",
                "commitMessage": "\"Inject the runtime to a global instead of exposing internals\n\nSee https://github.com/facebook/react-devtools/commit/673de20a4a0654ab849575307b9cf87fde53439e\"",
                "commitDate": "2014-10-13T18:59:23Z"
            },
            {
                "commitId": "dcf415c2b91ce52fd5d4dd02b70875ba9d33290f",
                "commitMessage": "\"BSD + PATENTS\"",
                "commitDate": "2014-10-10T20:34:07Z"
            },
            {
                "commitId": "5d127eaa4935486a9fa15830b9224b806921f56d",
                "commitMessage": "\"Merge pull request #2316 from zpao/devtoolsmarker\n\nLook for devtools global hook\"",
                "commitDate": "2014-10-10T00:00:06Z"
            },
            {
                "commitId": "540731b7a8cbae5835edf69f26361993691d6c00",
                "commitMessage": "\"Merge pull request #2002 from zpao/rename-renderComponent\n\nReact.renderComponent -> React.render\"",
                "commitDate": "2014-10-09T23:41:37Z"
            },
            {
                "commitId": "6ddf8de5aee5ea58a4f1b806c6c768d53cf5e2b4",
                "commitMessage": "\"Look for devtools global hook\n\nIt doesnt exist yet, but it could.\n\nThis also ensures we actually do our polyfill checks in *all* browsers,\nnot just Chrome.\"",
                "commitDate": "2014-10-09T18:24:48Z"
            },
            {
                "commitId": "9b1fa914fafca23b201d5bf4d7ca6ffa1dff6cc4",
                "commitMessage": "\"React.renderComponent -> React.render\n\nAlso rename all the associated render methods and adds deprecation\nnotices.\"",
                "commitDate": "2014-10-09T23:41:03Z"
            },
            {
                "commitId": "f48954d8a39097109d599db365af28df417544cb",
                "commitMessage": "\"Merge pull request #2300 from sebmarkbage/descriptorstoelements\n\nRenamed Descriptor -> Element\"",
                "commitDate": "2014-10-07T20:44:44Z"
            },
            {
                "commitId": "7f9b1d18d197d102777f214e782ecc27685cf481",
                "commitMessage": "\"Start warning when React.DOM.x is passed into JSX\n\nReact.DOM is becoming helper factories to generate ReactElements. Theyre not\nclasses. It will be ok to call them directly as functions, but not to use them\nwhere a class is expected.\"",
                "commitDate": "2014-10-07T17:49:18Z"
            },
            {
                "commitId": "8f1657bba618846b7a111a2caee855bf59145c5a",
                "commitMessage": "\"Renamed Descriptor -> Element\n\nWeve decided on a new naming convention for ReactDescriptor. Its now\ncalled ReactElement, which is a subset of the ReactNode union type.\"",
                "commitDate": "2014-10-07T20:41:51Z"
            },
            {
                "commitId": "c901b1005e7c946584487bb8b0bf7b60a773645b",
                "commitMessage": "\"Make createDescriptor return a descriptor for components\n\nThis moves all logic around legacy descriptors to ReactLegacyDescriptor. This\nis responsible for the layer that knows that createClass exports a legacy\nfactory. When passed one of these classes, it unwraps it to be a real class.\n\nIf it is passed a non legacy factory, it is assumed to be a non-react component\nthat needs to be invoked as a plain function.\n\nThe semantic change is that a descriptor is now always returned if passed a\nlegacy factory. Even if that factory is a mock. A mock would previously return\nundefined.\n\nFor mocks, I treat the factory as the authoritative function. I call it to extract\nthe instance or fill it with an empty component placeholder.\n\nAdditionally, I make the classes take props as the first argument to the\nconstructor. This is what the new class system will do.\n\nWe currently need to set up some internals by calling the internal construct\nmethod. Instead of doing that automatically in the constructor, I now move that\nto a second pass so that mocks can get the plain props.\n\nThis means that we can assert that a mock has been called once its mounted\nwith its final props. Instead of the descriptor factory being called.\"",
                "commitDate": "2014-08-20T07:14:32Z"
            },
            {
                "commitId": "5b4e2be867ebf216e7acd0cfecda026d9dd3499d",
                "commitMessage": "\"Iterate over expectedFeatures correctly\n\nThis fails if Array.prototype is extended.\"",
                "commitDate": "2014-08-19T01:18:05Z"
            },
            {
                "commitId": "eb3ea3f2dfed33751ce95666370b30a7b9d8bc9f",
                "commitMessage": "\"Move batchedUpdated to React.addons\n\nThis is a followup to #1060, where I did not read closely enough before\nmerging.\"",
                "commitDate": "2014-08-13T22:40:40Z"
            },
            {
                "commitId": "938bcbecd5874d6d33f11e52e5c9a71dbcd44c8b",
                "commitMessage": "\"Merge pull request #1060 from spicyj/gh-906\n\nAdd React.batchedUpdates to public API\"",
                "commitDate": "2014-08-13T22:37:43Z"
            },
            {
                "commitId": "7fb7e951082c40b3183cc2a6ab483a8b6b579690",
                "commitMessage": "\"Add React.batchedUpdates to public API\n\nFixes #906.\"",
                "commitDate": "2014-04-16T22:59:54Z"
            },
            {
                "commitId": "036d751397140e1eae01ea6ce6ebe86f0482f485",
                "commitMessage": "\"Add createElement alias for createDescriptor\"",
                "commitDate": "2014-08-06T23:41:47Z"
            },
            {
                "commitId": "2d250d44a5909d9e9d6a0e6fef541cf6fdf6e0ae",
                "commitMessage": "\"Merge pull request #1993 from spicyj/devtools-warning-2\n\nSlightly more considerate devtools warning\"",
                "commitDate": "2014-08-04T21:25:16Z"
            },
            {
                "commitId": "30452914174c7fda400746e8795b73f8ba4269bf",
                "commitMessage": "\"Slightly more considerate devtools warning\n\nSee #953.\"",
                "commitDate": "2014-08-04T18:16:51Z"
            },
            {
                "commitId": "c6b2687bbda0c9d828be51d3d4908adb89d52a09",
                "commitMessage": "\"Partially revert React.createDescriptor\n\nWe still have some issues to work out when the type argument is a mock.\"",
                "commitDate": "2014-07-25T23:48:10Z"
            },
            {
                "commitId": "04e341936cff902f399ca59bd6b855b2d994470e",
                "commitMessage": "\"Include Object.assign polyfill\n\nThis isnt a good final solution but it makes React actually usable on\nits own.\n\nThis also makes tests runnable, though only via jest\n(./node_modules/.bin/jest)\"",
                "commitDate": "2014-07-21T23:18:12Z"
            },
            {
                "commitId": "0f9cec2e78c09e81dc3dac764788589a07903411",
                "commitMessage": "\"0.11.0-rc1\"",
                "commitDate": "2014-07-13T02:50:45Z"
            },
            {
                "commitId": "5aab0bddaa9dd2684049194a2488d57517d89cae",
                "commitMessage": "\"Move key/ref off props and prepare for new descriptor factories\n\nBreaking changes\n\n- key/ref are no longer accessible on props but they are accessible on the\n  descriptors. This means that parents/owners can access it but not the\n  component itself.\n\n- Descriptor factories are now plain functions and you cant rely on the\n  prototype or constructors of descriptors to identify the component type.\n\nExisting descriptor factories are now wrapped in a legacy factory. Currently it\ndoes nothing but it will give us a hook to track callers to factories that are\nnot using JSX but just invoking the function directly. It also proxies static\nmethods/properties to the underlying class. The newer factories dont have this\nfeature.\n\nReactTextComponent has its own little factory because its props is not an\nobject. This is a detail and will go away once ReactTextComponent no longer\nneeds descriptors.\"",
                "commitDate": "2014-07-19T05:01:36Z"
            },
            {
                "commitId": "5bfee601ce6709a56e025e84634fcc5da0b36a44",
                "commitMessage": "\"Bump version for 0.12.0-alpha\n\n[skip ci]\"",
                "commitDate": "2014-07-17T21:22:50Z"
            },
            {
                "commitId": "97dbada03d58bef9bce6941ca49207e28b6b75ac",
                "commitMessage": "\"Up-to-date React.Children\n\nMake sure we actually include `.count`\"",
                "commitDate": "2014-07-14T22:01:44Z"
            },
            {
                "commitId": "2b0e51bdbaa0f0e589c8a24e358a7739e70f38dc",
                "commitMessage": "\"Add String.prototype.trim to polyfill check\n\nAlso shortens the URL so it fits on 1 line\"",
                "commitDate": "2014-07-11T17:36:38Z"
            },
            {
                "commitId": "ef6740627292136973a6b8053cc98dba98ebd18f",
                "commitMessage": "\"Add simple React.createDescriptor hook\n\nThis is the minimal runtime change we need to switch the JSX syntax to resolve\nto React.createDescriptor(...)\"",
                "commitDate": "2014-06-26T22:42:18Z"
            },
            {
                "commitId": "e4f80f301ddc56370c5c7dfb2be483431bfa7d20",
                "commitMessage": "\"Merge pull request #1516 from syranide/es5err\n\nPreemptively error when required ES5 shim/shams are not available\"",
                "commitDate": "2014-05-12T20:40:00Z"
            },
            {
                "commitId": "659b7981e14c7eb36cf2638a95a3a16f080b8cca",
                "commitMessage": "\"Preemptively error when required ES5 shim/shams are not available\"",
                "commitDate": "2014-05-11T19:20:07Z"
            },
            {
                "commitId": "468007612f4a6dabb228618d9a3274f067fc2c51",
                "commitMessage": "\"Merge branch master of github.com:facebook/react\"",
                "commitDate": "2014-03-30T19:53:26Z"
            },
            {
                "commitId": "c40e06f7281622a7a6295f4a7d5540a75fedf7bb",
                "commitMessage": "\"First phase to true descriptors\n\nThis moves all convenience constructors to use frozen ReactDescriptors.\"",
                "commitDate": "2014-03-28T19:32:53Z"
            },
            {
                "commitId": "f0eae5086b0062bdf8f8e466803e061814486634",
                "commitMessage": "\"version bump for 0.11 development\"",
                "commitDate": "2014-03-21T21:58:52Z"
            },
            {
                "commitId": "7f24943e5af5ee4b14ec002d45df315af94adb75",
                "commitMessage": "\"update version for 0.10rc\"",
                "commitDate": "2014-03-19T05:09:32Z"
            },
            {
                "commitId": "a8fc3b940dbe20c0c7decd19b028215b236c50a6",
                "commitMessage": "\"Move UI-thread-only browser modules to browser/ui/\n\nThis also deletes an unused module.\"",
                "commitDate": "2014-03-03T23:07:11Z"
            },
            {
                "commitId": "99dab49f92fe0785c1643ede5b0e7a90cbe1e1e0",
                "commitMessage": "\"Refactor rendering to string without checksum & React ID\n\nFinalize API for rendering to static markup.\nInstead of passing a boolean option to `renderComponentToString`, just use another method.\"",
                "commitDate": "2014-03-03T23:06:27Z"
            },
            {
                "commitId": "95edc396dfd07ed064240b5e2e1a1d5528d2d747",
                "commitMessage": "\"version bump to 0.10.0-alpha\"",
                "commitDate": "2014-02-20T06:53:29Z"
            },
            {
                "commitId": "8a47813baabcb200f5e0a496dd959cb0ef3adcf3",
                "commitMessage": "\"Update copyrights for 2014.\n\ngrep -rl Copyright 2013 Facebook static_upstream | xargs perl -pi -w -e s/Copyright 2013 Facebook/Copyright 2013-2014 Facebook/g;\n\nNot going to check in a script to do this since it will just change every year.\nCloses #1006\"",
                "commitDate": "2014-02-19T01:06:43Z"
            },
            {
                "commitId": "9125f68194cf99e55e027b6cc7ed34325c9855e4",
                "commitMessage": "\"0.9.0-rc1\"",
                "commitDate": "2014-02-17T01:38:52Z"
            },
            {
                "commitId": "b9cd2f0d3d83ee9652b230fecc4bc2dfe8e110f8",
                "commitMessage": "\"Merge branch reorg\"",
                "commitDate": "2014-02-05T03:51:55Z"
            },
            {
                "commitId": "1a39c3143cf5831e4a7f4d2f1a7dc32b33b41299",
                "commitMessage": "\"The great reorg of February 2014\"",
                "commitDate": "2014-02-05T03:49:58Z"
            },
            {
                "commitId": "945f788a4127c3428a5e3cf65fb6d1014c2e98a1",
                "commitMessage": "\"React.Children helpers\n\nAdds React.Children and map(), forEach() and only().\"",
                "commitDate": "2014-02-04T22:37:44Z"
            },
            {
                "commitId": "2c335b0e570e360d52359e7f774e5311f74d863b",
                "commitMessage": "\"Quieter devtools upsell\n\nCheck that were not in a iframe before upselling.\"",
                "commitDate": "2014-01-11T05:11:33Z"
            },
            {
                "commitId": "d8a8f6a88109e1ccdee02236909cbab101222185",
                "commitMessage": "\"Upsell dev tools\n\nPeople probably dont know these exist. Add some information about React\ndev mode as well as a link to the developer tools when using Chrome.\"",
                "commitDate": "2014-01-11T05:10:54Z"
            },
            {
                "commitId": "80d7d2d0f8ec0f4f1f3c2dbe613f36bda572ce11",
                "commitMessage": "\"Listen to events on demand\n\nFixes #381\n\nThis is a squashed version of https://github.com/facebook/react/pull/462\"",
                "commitDate": "2014-01-04T07:09:59Z"
            },
            {
                "commitId": "3431e3f847b148bd1aa527f375337c86b1029c58",
                "commitMessage": "\"Add `createMarkupForID`\n\nThis is a follow-up the to previous commit and does two things:\n\n - Moves `ReactMount.ATTR_NAME` to `DOMProperty.ID_ATTRIBUTE_NAME`.\n - Adds `DOMPropertyOperations.createMarkupForID` and uses it.\"",
                "commitDate": "2013-12-21T02:12:48Z"
            },
            {
                "commitId": "153b75f186a78c876cc11678d1abbdf5e13a3b5b",
                "commitMessage": "\"Bump version to 0.9.0-alpha\n\nThis is trunk, which will be 0.9. Well have to cherry-pick this whole\nthing into a 0.8 branch.\"",
                "commitDate": "2013-12-06T23:11:25Z"
            },
            {
                "commitId": "ef339c9cc44522ae39cb04bf9a102ac9261ecb45",
                "commitMessage": "\"Version bump, make tests work\"",
                "commitDate": "2013-12-06T19:56:30Z"
            },
            {
                "commitId": "1b8bdbe177f2f03c66e9288149316695fc004b41",
                "commitMessage": "\"Remove deprecated React.unmountAndReleaseReactRootNode\"",
                "commitDate": "2013-12-05T04:27:15Z"
            },
            {
                "commitId": "b91396be8eac3dc57ab1dbd2d3bb27c791d88169",
                "commitMessage": "\"Contexts\n\nSummary:\nadds `this.context` which you can think of as implicit props, which are passed automatically down the //ownership// hierarchy.\n\nContexts should be used sparingly, since they essentially allow components to communicate with descendants (in the ownership sense, not parenthood sense), which is not usually a good idea. You probably would only use contexts in places where youd normally use a global, but contexts allow you to override them for certain view subtrees which you cant do with globals.\n\nThe context starts out `null`:\n\n  var RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n    }\n  });\n\nYou should **never** mutate the context directly, just like props and state.\n\nYou can change the context of your children (the ones you own, not `this.props.children` or via other props) using the new `withContext` method on `React`:\n\n  var RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n      var children = React.withContext({foo: a, bar: b}, () => (\n        // In ChildComponent#render, this.context === {foo: a, bar: b}\n        <ChildComponent />\n      ));\n      // this.context === null\n    }\n  });\n\nContexts are merged, so a component can override its owners context **for its children**:\n\n  var ChildComponent = React.createClass({\n    render: function() {\n      // this.context === {foo: a, bar: b} (for the caller above)\n      var children = React.withContext({foo: c},() => (\n        // In GrandchildComponent#render,\n        // this.context === {foo: c, bar: b}\n        <GrandchildComponent />\n      ));\n      // this.context === {foo: a, bar: b}\n    }\n  });\"",
                "commitDate": "2013-11-18T18:56:24Z"
            },
            {
                "commitId": "48281a17e4f460020fa7b9c6dc8169a1b867327c",
                "commitMessage": "\"bump version to 0.6.0-alpha\"",
                "commitDate": "2013-10-16T05:39:28Z"
            },
            {
                "commitId": "fdb10c067999c81516cf6ac65262adb5ab59d3cf",
                "commitMessage": "\"React.__internals\n\nWe need access to internal modules in order to provide a single way for some\nprojects to work internally with @providesModule and externally.\"",
                "commitDate": "2013-10-07T22:07:20Z"
            },
            {
                "commitId": "832d9de0374496a3a99a0df7cf100305f1a24158",
                "commitMessage": "\"Rename unmountAndReleaseReactRootNode() -> unmountComponentAtNode()\n\nThis is just a better name; we may revisit the name later.\"",
                "commitDate": "2013-09-19T21:46:49Z"
            },
            {
                "commitId": "5ab68d9a0ddbb6c6c96895b75207d6ad57dc55b4",
                "commitMessage": "\"Hard code version instead of doing constant replacement\n\nThis isnt really ideal, but it makes it so that people managing to\nbuild with @providesModule still get a consistent experience (since this\nis what gets packed client-side with react-page-middleware anyway).\"",
                "commitDate": "2013-09-11T16:51:43Z"
            },
            {
                "commitId": "d853bbcf77a0c81734300dafb77f2afeb25f0ed5",
                "commitMessage": "\"Merge pull request #205 from spicyj/version\n\nAdd React.version\"",
                "commitDate": "2013-09-11T01:35:12Z"
            },
            {
                "commitId": "5fd4467bf76b89b76df8bf909922f92e4fd07f7c",
                "commitMessage": "\"Add React.version\n\ngetConfig needs to be a function because grunt.config.data.pkg.version isnt available at the time that grunt/config/jsx/jsx.js is required.\n\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.\"",
                "commitDate": "2013-09-10T00:01:06Z"
            },
            {
                "commitId": "3cf14e8f9b14ac05bcd24634daa26ac6772bd31b",
                "commitMessage": "\"Remove ReactChildren methods from React object\n\nThese are not terribly useful on this object and the naming of\n`React.forEachChildren` sucked anyway.\"",
                "commitDate": "2013-09-06T01:35:59Z"
            },
            {
                "commitId": "a42fd30fc2795909324c497350d0877a969b0cc7",
                "commitMessage": "\"Remove React.autoBind for real\n\nThis has been deprecated for a long while now, we should actually remove it.\"",
                "commitDate": "2013-09-03T21:27:00Z"
            },
            {
                "commitId": "4d8f0449d9d08528cc1aaba0aa09d1d90e12d3dd",
                "commitMessage": "\"React.isValidClass\n\nSometimes you may need to detect if a value is a valid React class constructor. This enables that and prevents future consumers from getting caught in the trap of depending on an internal implementation detail we might change.\n\nCurrently this works for classes created with `React.createClass` as well as `React.DOM.*`.\"",
                "commitDate": "2013-08-30T20:20:51Z"
            },
            {
                "commitId": "fce57abeca1d8388baaaac8511540aed486177dc",
                "commitMessage": "\"Benchmarking tool for React application performance\n\nReactAppPerf wraps core methods and logs info from them; theres no real\nUI at this point\"",
                "commitDate": "2013-08-23T21:05:11Z"
            },
            {
                "commitId": "9ef4e74ba2b3a494757b39b41b1ef99280bc5f83",
                "commitMessage": "\"ReactChildren\n\nInstead of changing `traverseAllChildren`, keep that around for perf\nreasons (for the hot code path `flattenChildren`)\n\nIntroduce `ReactChildren.map` and `ReactChildren.forEach`\nwhich mirrors `Array.prototype.map` and `Array.prototype.forEach`. This\ninvolves a rename of `mapAllChildren`\"",
                "commitDate": "2013-08-06T21:17:33Z"
            },
            {
                "commitId": "c629a0c5ad1adc82e01a982e7116eae632fa8d65",
                "commitMessage": "\"Revert \"Merge pull request #200 from spicyj/version\"\n\nThis reverts commit d8893228275cacc65a8632c7416bb023ab4c946f, reversing\nchanges made to 156dffb961ab15f577e0a6aab1abc5efd68f9a9b.\"",
                "commitDate": "2013-07-17T15:26:59Z"
            },
            {
                "commitId": "d8893228275cacc65a8632c7416bb023ab4c946f",
                "commitMessage": "\"Merge pull request #200 from spicyj/version\n\nAdd React.version\"",
                "commitDate": "2013-07-17T13:13:49Z"
            },
            {
                "commitId": "7be14d81552e8097eee6ed21a048fa23d4fce596",
                "commitMessage": "\"Add React.version\n\ngetConfig needs to be a function because grunt.config.data.pkg.version isnt available at the time that grunt/config/jsx/jsx.js is required.\n\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.\"",
                "commitDate": "2013-07-17T03:38:40Z"
            },
            {
                "commitId": "d76262731237365198ddd84216d108da96820055",
                "commitMessage": "\"Rename `props` to `propTypes`\n\nThis does two things:\n\n - Rename `props` to `propTypes`.\n - Rename `ReactProps` to `ReactPropTypes` (and `React.Props` to `React.PropTypes`)\"",
                "commitDate": "2013-07-10T22:06:18Z"
            },
            {
                "commitId": "0e9ee239a9c7b085771429ba990ae63aacde64ca",
                "commitMessage": "\"Merge branch master into async-state\"",
                "commitDate": "2013-07-01T23:08:57Z"
            },
            {
                "commitId": "ee21a604f31020fbaa898a4d0d61dc487198ce82",
                "commitMessage": "\"Delete files that accidentally got merged in\n\n\u0ca0_\u0ca0\"",
                "commitDate": "2013-06-28T21:54:07Z"
            },
            {
                "commitId": "43358157cff16e8945da9b816fcb858a59da81af",
                "commitMessage": "\"Merge branch textarea-update-value of git://github.com/spicyj/react\n\nConflicts:\n\tsrc/core/ReactDefaultInjection.js\"",
                "commitDate": "2013-06-28T21:30:47Z"
            },
            {
                "commitId": "44d6b947520aa3c3b252cbba1c95aa25811665d7",
                "commitMessage": "\"Merge remote-tracking branch origin/master into textarea-update-value\"",
                "commitDate": "2013-06-19T06:31:08Z"
            },
            {
                "commitId": "c1576fcf9744882fa59c2876fb4fd44720140307",
                "commitMessage": "\"Remove trailing whitespace\"",
                "commitDate": "2013-06-17T19:48:43Z"
            },
            {
                "commitId": "80edd6ca8729512c384faa593fef6d62b6b8c087",
                "commitMessage": "\"Merge pull request #89 from vjeux/patch-4\n\nExposing ReactProps as React.Props\"",
                "commitDate": "2013-06-14T04:08:10Z"
            },
            {
                "commitId": "34173638d40dff2cd2dbac66f04623b3b1f0516f",
                "commitMessage": "\"Exposing ReactProps as React.Props\n\nRight now, even though ReactProps is committed, there is no way to use it as it is not exposed.\"",
                "commitDate": "2013-06-13T00:28:25Z"
            },
            {
                "commitId": "37cde3d864406f2af65dc03eae45a216ea969600",
                "commitMessage": "\"Stabilize minimal server rendering API\n\nThis is a pretty killer feature and the API is simple. I know its another API method on React, but I think its\nthe only way.\"",
                "commitDate": "2013-06-10T23:17:26Z"
            },
            {
                "commitId": "582359aeea9b7c437cfc12b8e4f3366aaacf11a1",
                "commitMessage": "\"Remove React.createComponentRenderer\n\nRemove ReactMount.createComponentRenderer because it does not function\ncorrectly.\n\n  var f = React.createComponentRenderer(<div />);\n\n  var container1 = document.createElement(div);\n  var container2 = document.createElement(div);\n  f(container1);\n  f(container2); // error because mounting same instance into new root\"",
                "commitDate": "2013-06-08T05:10:06Z"
            },
            {
                "commitId": "75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4",
                "commitMessage": "\"Initial public release\"",
                "commitDate": "2013-05-29T19:54:02Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "Determine the developers that had the most unfixed bugs?",
        "number": 7,
        "category": 2,
        "response": "The developer with the most unfixed bugs is 'bvaughn', with a total of 1 unfixed bug.",
        "chain_of_thought": "To determine the developers that had the most unfixed bugs, we need to interpret the question in the context of the provided schema. An unfixed bug can be interpreted as an issue that has been introduced by a commit but not yet fixed by another commit. Therefore, we need to find users who have authored commits that introduced issues which are still open.\n\nHere's how we can construct the query:\n\n1. Identify the relevant nodes and relationships:\n   - We need the `User`, `Commit`, and `Issue` nodes.\n   - The `author` relationship connects `User` to `Commit`.\n   - The `introduced` relationship connects `Commit` to `Issue`.\n   - We need to filter issues that are still open, which can be determined by the `state` property of the `Issue` node.\n\n2. Construct the query:\n   - Match users who have authored commits that introduced issues.\n   - Filter for issues that are still open (`state = 'open'`).\n   - Count the number of open issues introduced by each user.\n\nHere's the complete Cypher query:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n```\n\nThis query will return a list of developers along with the count of unfixed bugs they have introduced, sorted in descending order by the number of unfixed bugs.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n",
        "result": [
            {
                "developer": "bvaughn",
                "unfixed_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 2,
        "label": "partial"
    },
    {
        "question": "which developer has most number of bugs yet to be fixed?",
        "number": 8,
        "category": 2,
        "response": "The developer with the most number of bugs yet to be fixed is 'bvaughn', with 19 open bugs.",
        "chain_of_thought": "To determine which developer has the most number of bugs yet to be fixed, we need to consider the following:\n\n1. **Identify Bugs**: Bugs are represented by issues in the schema. We need to find issues that are still open, which means their `state` property is not \"closed\".\n\n2. **Link Bugs to Developers**: We need to find the developers who are responsible for these open issues. This can be interpreted as the developers who have been assigned to these issues. The relevant relationship here is the `assigned` relationship between the `User` and `Issue` nodes.\n\n3. **Count Open Bugs per Developer**: We need to count the number of open issues assigned to each developer.\n\nGiven these points, the query should:\n\n- Match users assigned to issues.\n- Filter issues that are still open.\n- Count the number of open issues per user.\n- Sort the results to find the developer with the most open issues.\n\nHere's the complete Cypher query:\n\n```cypher\nMATCH (u:User)-[:assigned]->(i:Issue)\nWHERE i.state <> 'closed'\nRETURN u.login AS developer, COUNT(i) AS open_bugs\nORDER BY open_bugs DESC\nLIMIT 1\n```\n\nThis query will return the developer with the most open bugs, which are issues that have not been closed yet.",
        "query": "cypher\nMATCH (u:User)-[:assigned]->(i:Issue)\nWHERE i.state <> 'closed'\nRETURN u.login AS developer, COUNT(i) AS open_bugs\nORDER BY open_bugs DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "bvaughn",
                "open_bugs": 19
            }
        ],
        "isAmbiguous": true,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "Determine the developers that fixed the most bugs in ReactDOMInput.js?",
        "number": 9,
        "category": 3,
        "response": "The developers who fixed the most bugs in ReactDOMInput.js are Sophie Alpert and Hemakshi Sachdev, each having fixed 1 bug.",
        "chain_of_thought": "To determine the developers who fixed the most bugs in the file `ReactDOMInput.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We are interested in the `User`, `Commit`, `Issue`, and `File` nodes.\n   - The `User` node is connected to the `Commit` node via the `author` relationship.\n   - The `Commit` node is connected to the `Issue` node via the `fixed` relationship, indicating that the commit fixed a bug.\n   - The `Issue` node is connected to the `File` node via the `impacted` relationship, indicating that the file was impacted by the issue.\n\n2. **Filter for the specific file**: \n   - We need to filter the `File` node to find the file with the name `ReactDOMInput.js`.\n\n3. **Aggregate the number of bugs fixed by each developer**:\n   - Count the number of issues fixed by each developer for the specified file.\n\nThe Cypher query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'ReactDOMInput.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n```\n\nThis query will return a list of developers and the number of bugs they have fixed in the file `ReactDOMInput.js`, sorted in descending order by the number of bugs fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'ReactDOMInput.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n",
        "result": [
            {
                "developer": "Sophie Alpert",
                "bugs_fixed": 1
            },
            {
                "developer": "Hemakshi Sachdev",
                "bugs_fixed": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "who did most fixed bugs in TapEventPlugin.js?",
        "number": 10,
        "category": 3,
        "response": "The developer who fixed the most bugs in TapEventPlugin.js is Sophie Alpert, with a total of 1 bug fixed.",
        "chain_of_thought": "To determine who fixed the most bugs in the file `TapEventPlugin.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We need to find the `File` node with the name `TapEventPlugin.js`.\n   - We need to find the `Commit` nodes that have a `changed` relationship with this `File`.\n   - We need to find the `User` nodes that have an `author` relationship with these `Commit` nodes.\n   - We also need to ensure that these commits have a `fixed` relationship with an `Issue`, indicating that the commit fixed a bug.\n\n2. **Construct the query**:\n   - Match the `File` node with the name `TapEventPlugin.js`.\n   - Traverse the `changed` relationship to find the `Commit` nodes.\n   - Ensure these commits have a `fixed` relationship with an `Issue`.\n   - Traverse the `author` relationship to find the `User` nodes who authored these commits.\n   - Count the number of such commits for each user to determine who fixed the most bugs.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:changed]->(f:File {name: 'TapEventPlugin.js'})\nWHERE (c)-[:fixed]->(:Issue)\nRETURN u.name AS developer, COUNT(c) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n```\n\nThis query will return the user who has fixed the most bugs in the file `TapEventPlugin.js`.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:changed]->(f:File {name: 'TapEventPlugin.js'})\nWHERE (c)-[:fixed]->(:Issue)\nRETURN u.name AS developer, COUNT(c) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "Sophie Alpert",
                "fixed_bugs": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "Determine the files that introduce the most bugs?",
        "number": 11,
        "category": 2,
        "response": "The file that introduces the most bugs is 'ReactDOMInput-test.js' with 3 bugs.",
        "chain_of_thought": "To determine the files that introduce the most bugs, we need to identify the files that are associated with issues introduced by commits. The relevant nodes are the File, Commit, and Issue nodes. The relationships we need to consider are:\n\n1. `(:Commit)-[:introduced]->(:Issue)`: This relationship indicates that a commit introduced a bug (issue).\n2. `(:Issue)-[:impacted]->(:File)`: This relationship indicates that the changes in the file are related to the bug.\n\nThe query should find the files that are most frequently associated with introduced bugs. Here's how we can construct the query:\n\n1. Match the commits that introduced issues and the files impacted by those issues.\n2. Count the number of times each file is associated with an introduced issue.\n3. Sort the files by the number of introduced issues in descending order to find the files that introduce the most bugs.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n```\n\nThis query will return the top 10 files that are associated with the most introduced bugs, sorted by the number of bugs in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "ReactDOMInput-test.js",
                "bug_count": 3
            },
            {
                "file": "ReactDOMInput.js",
                "bug_count": 2
            },
            {
                "file": "ExhaustiveDeps.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMComponent.js",
                "bug_count": 2
            },
            {
                "file": "profilingCache-test.js.snap",
                "bug_count": 2
            },
            {
                "file": "renderer.js",
                "bug_count": 2
            },
            {
                "file": "package.json",
                "bug_count": 2
            },
            {
                "file": "profilingCommitTreeBuilder-test.js.snap",
                "bug_count": 1
            },
            {
                "file": "store.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberWorkLoop.js",
                "bug_count": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "What are the most buggy files?",
        "number": 12,
        "category": 2,
        "response": "The most buggy files, based on the number of issues impacting them, are:\n\n1. ReactDOMInput-test.js with 3 issues.\n2. profilingCache-test.js.snap with 2 issues.\n3. ReactDOMComponent.js with 2 issues.\n4. ChangeEventPlugin.js with 2 issues.\n5. renderer.js with 2 issues.\n6. ExhaustiveDeps.js with 2 issues.\n7. package.json with 2 issues.\n8. ReactDOMInput.js with 2 issues.",
        "chain_of_thought": "To determine the most buggy files, we need to identify files that have been impacted by the most issues. In the given schema, the relevant nodes are the `File` and `Issue` nodes. The relationship that connects these nodes is the `impacted` relationship, which indicates that a file is associated with an issue.\n\nHere's how we can construct the query:\n\n1. **Identify the relevant nodes and relationships**: We need to find files (`File` nodes) that are impacted by issues (`Issue` nodes) using the `impacted` relationship.\n\n2. **Aggregate the number of issues impacting each file**: We will count the number of issues associated with each file to determine which files are the most buggy.\n\n3. **Sort the results**: We will sort the files by the number of issues in descending order to find the most buggy files.\n\n4. **Limit the results**: Optionally, we can limit the results to the top 10 most buggy files.\n\nTherefore, the complete Cypher query is:\n\n```cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n```\n\nThis query will return the names of the files and the count of issues impacting them, sorted by the number of issues in descending order, showing the top 10 most buggy files.",
        "query": "cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "ReactDOMInput-test.js",
                "issue_count": 3
            },
            {
                "file": "profilingCache-test.js.snap",
                "issue_count": 2
            },
            {
                "file": "ReactDOMComponent.js",
                "issue_count": 2
            },
            {
                "file": "ChangeEventPlugin.js",
                "issue_count": 2
            },
            {
                "file": "renderer.js",
                "issue_count": 2
            },
            {
                "file": "ExhaustiveDeps.js",
                "issue_count": 2
            },
            {
                "file": "package.json",
                "issue_count": 2
            },
            {
                "file": "ReactDOMInput.js",
                "issue_count": 2
            },
            {
                "file": "03-interactivity-and-dynamic-uis.zh-CN.md",
                "issue_count": 1
            },
            {
                "file": "03-interactivity-and-dynamic-uis.md",
                "issue_count": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "what are the buggy commits that happened on March 1, 2022?",
        "number": 13,
        "category": 2,
        "response": "The buggy commit that happened on March 1, 2022, is identified by the commit ID '17806594cc28284fe195f918e8d77de3516848ec'. The commit was made at 05:13:28 UTC.",
        "chain_of_thought": "To address the question, we need to identify the commits that introduced bugs on March 1, 2022. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship between Commit and Issue. We also need to filter the commits based on the committedDate property to match March 1, 2022.\n\nFirst, we need to match the commits that introduced issues:\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\n```\n\nNext, we filter these commits by the committedDate to find those that occurred on March 1, 2022. The date should be formatted in ISO format, and since the time is not specified, we use a regex to match any time on that date:\n```cypher\nWHERE c.committedDate =~ '2022-03-01T.*'\n```\n\nFinally, we return the commit IDs and any other relevant information:\n```cypher\nRETURN c.id AS commitId, c.committedDate AS date\n```\n\nTherefore, the complete query is:\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-03-01T.*'\nRETURN c.id AS commitId, c.committedDate AS date\n```",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-03-01T.*'\nRETURN c.id AS commitId, c.committedDate AS date\n",
        "result": [
            {
                "commitId": "17806594cc28284fe195f918e8d77de3516848ec",
                "date": "2022-03-01T05:13:28Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "what commits were buggy on April 9, 2021?",
        "number": 14,
        "category": 2,
        "response": "The commit with ID 'bdc23c3dba86eaa03c7accecc16e8fd997e9185e' was buggy on April 9, 2021. The commit message was: \"DevTools shows which fibers scheduled the current update (#21171)\".",
        "chain_of_thought": "To determine which commits were buggy on April 9, 2021, we need to identify the relevant nodes and relationships. The Commit node represents commits, and the Issue node represents bugs. The relationship between Commit and Issue is the introduced relationship, which indicates that a commit introduced a bug.\n\nThe question specifies a date, April 9, 2021. We need to format this date in ISO format as \"2021-04-09\" and use a regex to match the date part of the committedDate property of the Commit node.\n\nThe query should find commits that introduced issues and were committed on April 9, 2021. Therefore, the query is:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2021-04-09.*'\nRETURN c.id AS commit_id, c.message AS commit_message\n```\n\nThis query matches commits that introduced issues and filters them by the committed date using a regex pattern to match the specified date. It then returns the commit ID and message for each matching commit.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2021-04-09.*'\nRETURN c.id AS commit_id, c.message AS commit_message\n",
        "result": [
            {
                "commit_id": "bdc23c3dba86eaa03c7accecc16e8fd997e9185e",
                "commit_message": "\"DevTools shows which fibers scheduled the current update (#21171)\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "commit(s) that fixed the bug ticket 10217?",
        "number": 15,
        "category": 2,
        "response": "The commit that fixed the bug ticket 10217 is identified by the commit ID `2e757790751ab8d165fc4df37e90a59d914c4527`. The commit message is: \"Fix incorrect data in compositionend event with Korean IME on IE11 (#10217) (#12563)\\n\\n* Add isUsingKoreanIME function to check if a composition event was triggered by Korean IME\\n\\n* Add Korean IME check alongside useFallbackCompositionData and disable fallback mode with Korean IME.\"",
        "chain_of_thought": "To find the commit(s) that fixed the bug ticket with the number 10217, we need to identify the relevant nodes and relationships. The bug ticket corresponds to an Issue node, and we are interested in the Commit nodes that have a fixed relationship with this Issue node.\n\nHere's how we can construct the query:\n\n1. Identify the Issue node with the number 10217.\n2. Find the Commit nodes that have a fixed relationship with this Issue node.\n\nThe query will look like this:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 10217})\nRETURN c.id AS commit_id, c.message AS commit_message\n```\n\nThis query will return the IDs and messages of the commits that fixed the bug ticket with the number 10217.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 10217})\nRETURN c.id AS commit_id, c.message AS commit_message\n",
        "result": [
            {
                "commit_id": "2e757790751ab8d165fc4df37e90a59d914c4527",
                "commit_message": "\"Fix incorrect data in compositionend event with Korean IME on IE11 (#10217) (#12563)\n\n* Add isUsingKoreanIME function to check if a composition event was triggered by Korean IME\r\n\r\n* Add Korean IME check alongside useFallbackCompositionData and disable fallback mode with Korean IME\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "which commit fixed the bug ticket 21442?",
        "number": 16,
        "category": 2,
        "response": "The commit with ID '1e3383a41154cb32d8d6b78b2451ee4dabfcb973' fixed the bug ticket 21442.",
        "chain_of_thought": "To determine which commit fixed the bug associated with ticket 21442, we need to identify the relevant nodes and relationships. The ticket number corresponds to an Issue node, and we are interested in finding the Commit node that has a fixed relationship with this Issue node.\n\nHere's the step-by-step breakdown:\n\n1. **Identify the Issue Node**: We need to find the Issue node with the number 21442.\n2. **Find the Commit Node**: We need to find the Commit node that has a fixed relationship with the identified Issue node.\n\nThe relevant relationship between Commit and Issue for this question is the fixed relationship.\n\nTherefore, the query to find the commit that fixed the bug ticket 21442 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 21442})\nRETURN c.id AS commit_id\n```\n\nThis query will return the ID of the commit that fixed the bug associated with ticket number 21442.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 21442})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "1e3383a41154cb32d8d6b78b2451ee4dabfcb973"
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "Determine the bug(s) that were introduced because of commit hash f912186012f17858b9d25466c658a46e25093941?",
        "number": 17,
        "category": 2,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To determine the bug(s) introduced by a specific commit, we need to identify the relevant nodes and relationships. The commit in question is identified by its hash, which corresponds to the `Commit` node with the `id` property. The relationship that indicates a bug was introduced by a commit is the `introduced` relationship between the `Commit` node and the `Issue` node.\n\nHere's how we can construct the query:\n\n1. Identify the `Commit` node using the given commit hash.\n2. Use the `introduced` relationship to find the `Issue` nodes that were introduced by this commit.\n\nThe query to find the bug(s) introduced by the commit with hash `f912186012f17858b9d25466c658a46e25093941` is:\n\n```cypher\nMATCH (c:Commit {id: 'f912186012f17858b9d25466c658a46e25093941'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query will return the ID, title, and URL of the issues that were introduced by the specified commit.",
        "query": "cypher\nMATCH (c:Commit {id: 'f912186012f17858b9d25466c658a46e25093941'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "what are the bugs caused by commit 2e757790751ab8d165fc4df37e90a59d914c4527?",
        "number": 18,
        "category": 2,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To determine the bugs caused by a specific commit, we need to identify the issues that were introduced by that commit. In the schema, the relevant nodes are the Commit and Issue nodes. The relationship that connects a commit to an issue it introduced is the introduced relationship.\n\nHere's how we can construct the query:\n\n1. Identify the commit with the given ID.\n2. Find the issues that were introduced by this commit.\n\nThe query to find the bugs caused by commit `2e757790751ab8d165fc4df37e90a59d914c4527` is:\n\n```cypher\nMATCH (c:Commit {id: '2e757790751ab8d165fc4df37e90a59d914c4527'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query matches the commit with the specified ID and finds all issues that were introduced by this commit, returning the issue ID, title, and URL for each issue.",
        "query": "cypher\nMATCH (c:Commit {id: '2e757790751ab8d165fc4df37e90a59d914c4527'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "Determine the percentage of the fixing commits that introduced bugs on Nov. 2013?",
        "number": 19,
        "category": 3,
        "response": "The percentage of the fixing commits that introduced bugs in November 2013 is 20.0%.",
        "chain_of_thought": "To determine the percentage of fixing commits that introduced bugs in November 2013, we need to interpret the question and identify the relevant nodes and relationships in the schema.\n\n### Interpretation:\n1. **Fixing Commits**: These are commits that have a `fixed` relationship with an `Issue`.\n2. **Commits that Introduced Bugs**: These are commits that have an `introduced` relationship with an `Issue`.\n3. **Time Frame**: We are interested in commits from November 2013. The `committedDate` property of the `Commit` node will be used to filter commits from this time period.\n\n### Steps:\n1. **Identify Fixing Commits**: Find commits that have a `fixed` relationship with an `Issue`.\n2. **Identify Commits that Introduced Bugs**: Find commits that have an `introduced` relationship with an `Issue`.\n3. **Filter by Date**: Ensure the commits are from November 2013.\n4. **Calculate the Percentage**: Determine the percentage of fixing commits that also introduced bugs.\n\n### Query:\n```cypher\n// Find all fixing commits in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\n\n// Count the total number of fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Find fixing commits that also introduced bugs in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\n\n// Count the number of fixing commits that introduced bugs\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n```\n\n### Explanation:\n- The first `MATCH` clause finds all commits that fixed issues in November 2013.\n- The `WHERE` clause uses a regex pattern to filter commits by the `committedDate` property for November 2013.\n- The `WITH` clause is used to store the count of total fixing commits.\n- The second `MATCH` clause finds commits that both fixed and introduced issues in the same time frame.\n- Finally, the percentage is calculated by dividing the number of fixing commits that introduced bugs by the total number of fixing commits, and multiplying by 100 to get a percentage.",
        "query": "cypher\n// Find all fixing commits in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\n\n// Count the total number of fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Find fixing commits that also introduced bugs in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\n\n// Count the number of fixing commits that introduced bugs\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n",
        "result": [
            {
                "percentage": 20.0
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "How many fixing commits caused bugs on Nov. 2013?",
        "number": 20,
        "category": 3,
        "response": "There were 2 fixing commits that caused bugs in November 2013.",
        "chain_of_thought": "To address the question, we need to determine the number of commits that both fixed an issue and introduced a bug in November 2013. The schema provides the necessary relationships and properties to achieve this.\n\n1. **Identify the relevant nodes and relationships:**\n   - We need to consider the `Commit` node, as we are interested in commits.\n   - The `fixed` relationship indicates that a commit fixed an issue.\n   - The `introduced` relationship indicates that a commit introduced a bug.\n\n2. **Filter commits by date:**\n   - We need to filter commits that occurred in November 2013. The `committedDate` property of the `Commit` node will be used for this purpose. We will use a regex to match dates in November 2013.\n\n3. **Construct the query:**\n   - We will match commits that have both `fixed` and `introduced` relationships.\n   - We will filter these commits by the `committedDate` to ensure they are from November 2013.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n```\n\nThis query matches commits that have both fixed and introduced relationships to issues, filters them by the committed date in November 2013, and returns the count of such commits.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n",
        "result": [
            {
                "fixing_commits_causing_bugs": 2
            }
        ],
        "isAmbiguous": false,
        "iteration": 2,
        "label": "correct"
    },
    {
        "question": "how many commits happened in last month?",
        "number": 1,
        "category": 1,
        "response": "There were 166 commits that happened in the last month.",
        "chain_of_thought": "To determine how many commits happened in the last month, we need to consider the current date, which is 2024-08-26T00:00:00Z. The last month would be from 2024-07-26T00:00:00Z to 2024-08-25T23:59:59Z.\n\nThe relevant nodes for this query are the Commit nodes, and we need to filter these nodes based on the `committedDate` property. We will use a date range to find commits that occurred within the last month.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n```\n\nThis query matches all commits and filters them based on the `committedDate` to ensure they fall within the specified date range. It then returns the count of these commits.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n",
        "result": [
            {
                "numberOfCommits": 166
            }
        ],
        "isAmbiguous": true,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "what is the latest commit?",
        "number": 2,
        "category": 1,
        "response": "The latest commit has the ID 'a960b92cb93e7d006e5e8de850f9b8b51f655c90' and was made on August 20, 2024, at 02:34:20 UTC.",
        "chain_of_thought": "To determine the latest commit, we need to identify the Commit node with the most recent committedDate. The relevant property for this query is committedDate, which is a string representing the date and time when the commit was made. We will sort the commits by this date in descending order and return the top result.\n\nThe query to find the latest commit is as follows:\n\n```cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n```\n\nThis query matches all Commit nodes, orders them by the committedDate in descending order, and returns the ID and date of the latest commit.",
        "query": "cypher\nMATCH (c:Commit)\nRETURN c.id AS commitId, c.committedDate AS commitDate\nORDER BY c.committedDate DESC\nLIMIT 1\n",
        "result": [
            {
                "commitId": "a960b92cb93e7d006e5e8de850f9b8b51f655c90",
                "commitDate": "2024-08-20T02:34:20Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "can you tell me the details of the commits between May 27th 2018 and May 31st 2018?",
        "number": 3,
        "category": 1,
        "response": "Here are the details of the commits made between May 27th, 2018, and May 31st, 2018:\n\n1. **Commit ID:** a32f857ac78ad1b33c61e6fbd47ccd57f21155c2\n   - **Message:** Use --frozen-lockfile for Yarn in CI build (#12914)\n   - **Additions:** 1\n   - **Deletions:** 1\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-28T18:52:42Z\n\n2. **Commit ID:** aa85b0fd5ffc92de38720c29833a54c67285abfb\n   - **Message:** Upgrade to Jest 23 (#12894)\n   - **Additions:** 602\n   - **Deletions:** 1004\n   - **Changed Files:** 28\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-28T22:03:15Z\n\n3. **Commit ID:** 8aeea5afa2d688968545b1cc5a30a48ddc0fa503\n   - **Message:** Do not assign node.value on input creation if no change will occur (#12925)\n   - **Additions:** 30\n   - **Deletions:** 7\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T13:48:58Z\n\n4. **Commit ID:** 4f1f909b5b5ffe28675eed3fdb645dfaf975c1ef\n   - **Message:** Disable Flow on AppVeyor again\n   - **Additions:** 1\n   - **Deletions:** 1\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T14:47:14Z\n\n5. **Commit ID:** 83f76e4db9a060911774f497b5715bd4d4f42a9c\n   - **Message:** ForwardRefs supports propTypes (#12911)\n   - **Additions:** 194\n   - **Deletions:** 103\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T16:50:49Z\n\n6. **Commit ID:** 001f9ef4717a0928b4875cbad3421a17f49f95a5\n   - **Message:** Release script prompts for NPM 2FA code (#12908)\n   - **Additions:** 48\n   - **Deletions:** 3\n   - **Changed Files:** 6\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T19:50:04Z\n\n7. **Commit ID:** ff724d3c286a1753723ea71e8c046498ed1aac98\n   - **Message:** [scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)\n   - **Additions:** 64\n   - **Deletions:** 5\n   - **Changed Files:** 8\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T20:30:04Z\n\n8. **Commit ID:** 79a740c6e32ca300d4e7ff55ab06de172d4237fd\n   - **Message:** Rename variables to remove references to global global (#12931)\n   - **Additions:** 10\n   - **Deletions:** 10\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-30T00:54:38Z\n\n9. **Commit ID:** e0a03c1b4d84453122c4e9d1a5e0cec52bef9066\n   - **Message:** Extend input type check in selection capabilities (#12062) (#12135)\n   - **Additions:** 71\n   - **Deletions:** 2\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-30T11:08:21Z\n\n10. **Commit ID:** ae57b125c798418fb6846094cfa911530206e074\n    - **Message:** [simple-cache-provider] Use LRU cache eviction (#12851)\n    - **Additions:** 153\n    - **Deletions:** 31\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2018-05-30T20:12:29Z",
        "chain_of_thought": "To address the question, we need to find the details of commits made between May 27th, 2018, and May 31st, 2018. The relevant node for this query is the Commit node, and we will use the `committedDate` property to filter the commits within the specified date range.\n\nFirst, we need to format the dates in ISO format. The start date is \"2018-05-27T00:00:00Z\" and the end date is \"2018-05-31T23:59:59Z\" to include the entire day of May 31st.\n\nThe query will match all commits and filter them based on the `committedDate` property to fall within the specified range. We will then return the details of these commits.\n\nThe complete query is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2018-05-27T00:00:00Z\" AND c.committedDate <= \"2018-05-31T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n```\n\nThis query will return the details of the commits made between May 27th, 2018, and May 31st, 2018, ordered by the commit date.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2018-05-27T00:00:00Z\" AND c.committedDate <= \"2018-05-31T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n",
        "result": [
            {
                "commitId": "a32f857ac78ad1b33c61e6fbd47ccd57f21155c2",
                "message": "\"Use --frozen-lockfile for Yarn in CI build (#12914)\n\nCI builds should always use the `--frozen-lockfile` option. It will fail the build if the lockfile is out-of-date:\r\n\r\n> If you need reproducible dependencies, which is usually the case with the continuous integration systems, you should pass --frozen-lockfile flag.\r\n\r\n(https://yarnpkg.com/en/docs/cli/install/)\"",
                "additions": 1,
                "deletions": 1,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-28T18:52:42Z"
            },
            {
                "commitId": "aa85b0fd5ffc92de38720c29833a54c67285abfb",
                "message": "\"Upgrade to Jest 23 (#12894)\n\n* Upgrade to Jest 23 beta\r\n\r\n* prefer `.toHaveBeenCalledTimes`\r\n\r\n* 23 stable\"",
                "additions": 602,
                "deletions": 1004,
                "changedFiles": 28,
                "commentsCount": 0,
                "committedDate": "2018-05-28T22:03:15Z"
            },
            {
                "commitId": "8aeea5afa2d688968545b1cc5a30a48ddc0fa503",
                "message": "\"Do not assign node.value on input creation if no change will occur (#12925)\n\nThis commit fixes an issue where assigning an empty string to required\r\ntext inputs triggers the invalid state in Firefox (~60.0.1).\r\n\r\nIt does this by first comparing the initial state value to the current\r\nvalue property on the text element. This:\r\n\r\n1. Prevents the validation issue\r\n2. Avoids an extra DOM Mutation in some cases\"",
                "additions": 30,
                "deletions": 7,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-29T13:48:58Z"
            },
            {
                "commitId": "4f1f909b5b5ffe28675eed3fdb645dfaf975c1ef",
                "message": "\"Disable Flow on AppVeyor again\n\nIt runs out of memory.\"",
                "additions": 1,
                "deletions": 1,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-29T14:47:14Z"
            },
            {
                "commitId": "83f76e4db9a060911774f497b5715bd4d4f42a9c",
                "message": "\"ForwardRefs supports propTypes (#12911)\n\n* Moved some internal forwardRef tests to not be internal\r\n* ForwardRef supports propTypes\"",
                "additions": 194,
                "deletions": 103,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-29T16:50:49Z"
            },
            {
                "commitId": "001f9ef4717a0928b4875cbad3421a17f49f95a5",
                "message": "\"Release script prompts for NPM 2FA code (#12908)\n\n* Release script prompts for NPM 2fa code\"",
                "additions": 48,
                "deletions": 3,
                "changedFiles": 6,
                "commentsCount": 0,
                "committedDate": "2018-05-29T19:50:04Z"
            },
            {
                "commitId": "ff724d3c286a1753723ea71e8c046498ed1aac98",
                "message": "\"[scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)\n\n* Use local references to global things inside scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nWe want to avoid initially calling one version of an API and then later\r\naccessing a polyfilled version.\r\n\r\n**test plan:**\r\nRun existing tests.\r\n\r\n* Shim ReactScheduler for www\r\n\r\n**what is the change?:**\r\nIn www we want to reference the separate build of ReactScheduler,\r\nwhich allows treating it as a separate module internally.\r\n\r\n**why make this change?:**\r\nWe need to require the ReactScheduler before our rAF polyfill activates,\r\nin order to customize which custom behaviors we want.\r\n\r\nThis is also a step towards being able to experiment with using it\r\noutside of React.\r\n\r\n**test plan:**\r\nRan tests, ran the build, and ran `test-build`.\r\n\r\n* Generate a bundle for fb-www\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nSplitting out the schedule module allows us to load it before\r\npolyfills kick in for rAF and other APIs.\r\n\r\nAnd long term we want to split this into a separate module anyway, this\r\nis a step towards that.\r\n\r\n**test plan:**\r\nIll run the sync next week and verify that this all works. :)\r\n\r\n* ran prettier\r\n\r\n* fix rebase issues\r\n\r\n* Change names of variables used for holding globals\"",
                "additions": 64,
                "deletions": 5,
                "changedFiles": 8,
                "commentsCount": 0,
                "committedDate": "2018-05-29T20:30:04Z"
            },
            {
                "commitId": "79a740c6e32ca300d4e7ff55ab06de172d4237fd",
                "message": "\"Rename variables to remove references to global global (#12931)\n\n**what is the change?:**\r\nIn a recent PR we were referencing some global variables and storing\r\nlocal references to them.\r\n\r\nTo make things more natural, we co-opted the original name of the global\r\nfor our local reference. To make this work with Flow, we get the\r\noriginal reference from window.requestAnimationFrame and assign it to\r\nconst requestAnimationFrame.\r\n\r\nSometimes React is used in an environment where window is not defined\r\n- in that case we need to use something else, or hide the window\r\nreference somewhere.\r\n\r\nWe opted to use global thinking that Babel transforms would fill that\r\nin with the proper thing.\r\n\r\nBut for some of our fixtures we are not doing that transform on the\r\nbundle.\r\n\r\n**why make this change?:**\r\nI want to unbreak this on master and then investigate more about what we\r\nshould do to fix this.\r\n\r\n**test plan:**\r\nrun `yarn build` and open the fixtures.\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12930\"",
                "additions": 10,
                "deletions": 10,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-30T00:54:38Z"
            },
            {
                "commitId": "e0a03c1b4d84453122c4e9d1a5e0cec52bef9066",
                "message": "\"Extend input type check in selection capabilities (#12062) (#12135)\n\n* Do not set selection when prior selection is undefined (#12062)\r\n\r\n`restoreSelection` did not account for input elements that have changed\r\ntype after the commit phase. The new `text` input supported selection\r\nbut the old `email` did not and `setSelection` was incorrectly trying to\r\nrestore `null` selection state.\r\n\r\nWe also extend input type check in selection capabilities to cover cases\r\nwhere input type is `search`, `tel`, `url`, or `password`.\r\n\r\n* Add link to HTML spec for element types and selection\r\n\r\n* Add reset button to ReplaceEmailInput\r\n\r\nThis commit adds a button to restore the original state of the\r\nReplaceEmailInput fixture so that it can be run multiple times without\r\nrefreshing the page.\"",
                "additions": 71,
                "deletions": 2,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-30T11:08:21Z"
            },
            {
                "commitId": "ae57b125c798418fb6846094cfa911530206e074",
                "message": "\"[simple-cache-provider] Use LRU cache eviction (#12851)\n\n* [simple-cache-provider] Use LRU cache eviction\r\n\r\nMax size is hard-coded to 500. In the future, we should make this\r\nconfigurable per resource.\r\n\r\n* Evict PAGE_SIZE records from cache when max limit is reached\"",
                "additions": 153,
                "deletions": 31,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-30T20:12:29Z"
            },
            {
                "commitId": "524a74331399fd7102037c878f327afbd5e14f53",
                "message": "\"Fix for Flow issues in SimpleCacheProvider (#12942)\n\n* Fix for Flow issues in SimpleCacheProvider\r\n\r\n**what is the change?:**\r\n- Fixed some flow errors which were somehow swallowed when CI\r\noriginally\r\n- Loosen flow types to avoid issue with recursive loop in Flow; https://github.com/facebook/flow/issues/5870\r\n\r\n**why make this change?:**\r\nTo unbreak master and unblock other changes we want to make.\r\n\r\n**test plan:**\r\nFlow passes!\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12941\r\n\r\n* Fix lints\"",
                "additions": 42,
                "deletions": 21,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:31:41Z"
            },
            {
                "commitId": "3118ed9d640ad28af306de308301f4fcd029ffca",
                "message": "\"Expose unstable_interactiveUpdates on ReactDOM (#12943)\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:31:59Z"
            },
            {
                "commitId": "15767a8f8f798f0d80df4ddbc7cfaebdc29996a8",
                "message": "\"[scheduler] 5/n Error handling in scheduler (#12920)\n\n* Initial failing unit test for error handling in schedule\r\n\r\n**what is the change?:**\r\nsee title\r\n\r\n**why make this change?:**\r\nAdding tests for the error handling behavior we are about to add. This\r\ntest is failing, which gives us the chance to make it pass.\r\n\r\nWrote skeletons of some other tests to add.\r\n\r\nUnit testing this way is really hacky, and Im also adding to the\r\nfixture to test this in the real browser environment.\r\n\r\n**test plan:**\r\nRan new test, saw it fail!\r\n\r\n* Add fixture for testing error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded a fixture which does the following -\r\nlogs in the console to show what happens when you use\r\n`requestAnimationFrame` to schedule a series of callbacks and some of\r\nthem throw errors.\r\n\r\nThen does the same actions with the `scheduler` and verifies that it\r\nbehaves in a similar way.\r\n\r\nHard to really verify the errors get thrown at the proper time without\r\nlooking at the console.\r\n\r\n**why make this change?:**\r\nWe want the most authentic, accurate test of how errors are handled in\r\nthe scheduler. Thats what this fixture should be.\r\n\r\n**test plan:**\r\nManually verified that this test does what I expect - right now its\r\nfailing but follow up commits will fix that.\r\n\r\n* Handle errors in scheduler\r\n\r\n**what is the change?:**\r\nWe set a flag before calling any callback, and then use a try/finally\r\nblock to wrap it. Note that we *do not* catch the error, if one is\r\nthrown. But, we only unset the flag after the callback successfully\r\nfinishes.\r\n\r\nIf we reach the finally block and the flag was not unset, then it\r\nmeans an error was thrown.\r\n\r\nIn that case we start a new postMessage callback, to finish calling any\r\nother pending callbacks if there is time.\r\n\r\n**why make this change?:**\r\nWe need to make sure that an error thrown from one callback doesnt stop\r\nother callbacks from firing, but we also dont want to catch or swallow\r\nthe error because we want engineers to still be able to log and debug\r\nerrors.\r\n\r\n**test plan:**\r\nNew tests added are passing, and we verified that they fail without this\r\nchange.\r\n\r\n* Add more tests for error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded tests for more situations where error handling may come up.\r\n\r\n**why make this change?:**\r\nTo get additional protection against this being broken in the future.\r\n\r\n**test plan:**\r\nRan new tests and verified that they fail when error handling fails.\r\n\r\n* callSafely -> callUnsafely\r\n\r\n* Fix bugs with error handling in schedule\r\n\r\n**what is the change?:**\r\n- ensure that we properly remove the callback from the linked list, even\r\nif it throws an error and is timed out.\r\n- ensure that you can call cancelScheduledWork more than once and it\r\nis idempotent.\r\n\r\n**why make this change?:**\r\nTo fix bugs :)\r\n\r\n**test plan:**\r\nExisting tests pass, and well add more tests in a follow up commit.\r\n\r\n* Unit tests for error handling with timed out callbacks\r\n\r\n**what is the change?:**\r\nMore unit tests, to cover behavior which we missed; error handling of\r\ntimed out callbacks.\r\n\r\n**why make this change?:**\r\nTo protect the future!~\r\n\r\n**test plan:**\r\nRun the new tests.\r\n\r\n* Adds fixture to test timed out callbacks with scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\nIn the other error handling fixture we compare scheduleWork error\r\nhandling to requestAnimationFrame and try to get as close as possible.\r\nThere is no timing out feature with requestAnimationFrame but\r\neffectively the timing out feature changes the order in which things\r\nare called. So we just changed the order in the requestAnimationFrame\r\nversion and that works well for illustrating the behavior we expect in\r\nthe scheduleWork test.\r\n\r\n**why make this change?:**\r\nWe need more test coverage of timed out callbacks.\r\n\r\n**test plan:**\r\nExecuted the fixture manually in Firefox and Chrome. Results looked\r\ngood.\r\n\r\n* fix rebase problems\r\n\r\n* make fixture compensate for chrome JS speed\r\n\r\n* ran prettier\r\n\r\n* Remove cancelled flag on callbackConfig in scheduler, add test\r\n\r\n**what is the change?:**\r\n- Instead of using a cancelled flag on the callbackConfig, its easier\r\nto just check the state of the callbackConfig inside\r\ncancelScheduledWork to determine if its already been cancelled. That\r\nway we dont have to remember to set the cancelled flag every time we\r\ncall a callback or cancel it. One less thing to remember.\r\n- We added a test for calling cancelScheduledWork more than once,\r\nwhich would have failed before.\r\n\r\nThanks @acdlite for suggesting this in code review. :)\r\n\r\n**why make this change?:**\r\nTo increase stability of the schedule module, increase test coverage.\r\n\r\n**test plan:**\r\nExisting tests pass and we added a new test to cover this behavior.\r\n\r\n* fix typo\"",
                "additions": 624,
                "deletions": 30,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:38:48Z"
            },
            {
                "commitId": "65ab53694f6edf4437034d5644a602dea162e249",
                "message": "\"Update token (#12956)\"",
                "additions": 2,
                "deletions": 2,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-31T20:36:55Z"
            },
            {
                "commitId": "36546b5137e9012ebdc62fc9ec11e3518c9e0aab",
                "message": "\"Set the correct initial value on input range (#12939)\n\n* Set the correct initial value on input range\r\n\r\n* Add description and update value diff check for input range\r\n\r\n* add isHydrating argument and tests\r\n\r\n* update node value according to isHydrating\"",
                "additions": 36,
                "deletions": 6,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-31T21:23:26Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "return a commit message on July 31?",
        "number": 4,
        "category": 1,
        "response": "The commit message on July 31 is: \"[compiler] More complete validation against locals being reassigned after render\n\nSummary:\nThis diff extends the existing work on validating against locals being reassigned after render, by propagating the reassignment \"effect\" into the lvalues of instructions when the rvalue operands include values known to cause reassignments. In particular, this \"closes the loop\" for function definitions and function calls: a function that returns a function that reassigns will be considered to also perform reassignments, but previous to this we didn't consider the result of a `Call` of a function that reassigns to itself be a value that reassigns.\n\nThis causes a number of new bailouts in test cases, all of which appear to me to be legit.\n\nghstack-source-id: 770bf02d079ea2480be243a49caa6f69573d8092\nPull Request resolved: https://github.com/facebook/react/pull/30540\"",
        "chain_of_thought": "To address the question, we need to find a commit message from a specific date, July 31. The schema provides us with the Commit node, which contains a `committedDate` property. The date in the question is not specified with a year, so we will assume it refers to the current year, 2024. The `committedDate` should be formatted in ISO format, and since the time is not specified, we will use a regex to match any time on that date.\n\nHere's the step-by-step breakdown:\n\n1. **Identify the relevant nodes and properties**: We need the Commit node and its `committedDate` and `message` properties.\n\n2. **Filter commits by date**: We will filter commits where the `committedDate` matches July 31, 2024, using a regex to account for any time on that day.\n\n3. **Return the commit message**: We will return the `message` property of the matching commits.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commitMessage\n```\n\nThis query matches commits with a `committedDate` on July 31, 2024, and returns their messages.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commitMessage\n",
        "result": [
            {
                "commitMessage": "\"[compiler] More complete validation against locals being reassigned after render\n\nSummary:\nThis diff extends the existing work on validating against locals being reassigned after render, by propagating the reassignment \"effect\" into the lvalues of instructions when the rvalue operands include values known to cause reassignments. In particular, this \"closes the loop\" for function definitions and function calls: a function that returns a function that reassigns will be considered to also perform reassignments, but previous to this we didnt consider the result of a `Call` of a function that reassigns to itself be a value that reassigns.\n\nThis causes a number of new bailouts in test cases, all of which appear to me to be legit.\n\nghstack-source-id: 770bf02d079ea2480be243a49caa6f69573d8092\nPull Request resolved: https://github.com/facebook/react/pull/30540\""
            },
            {
                "commitMessage": "\"[Fizz] Update postpone abort semantics when prerendering (#30541)\n\nWhen aborting with a postpone value in Fizz if any tasks are still\r\npending in the root while prerendering the prerender will fatally error.\r\nThis is different from postponing imperatively in a root task and really\r\nthe semantics should be the same. This change updates React to treat an\r\nabort with a postpone value as a postponed root rather than a fatal\r\nerror.\""
            },
            {
                "commitMessage": "\"[DevTools] Track the parent DevToolsInstance while mounting a tree (#30542)\n\nThis just tracks the `.parent` field properly and uses DevToolsInstances\r\nin more places that used to use IDs or Fibers.\r\n\r\nI also use this new parent path when looking up a DevToolsInstance from\r\na DOM node. This should ideally be simple because the `.parent` field\r\nrepresents only the unfiltered parents and include any virtual parents.\r\nSo we should be able to just get one from nearest Fiber that has one.\r\n\r\nHowever, because we dont currently always clean up the map of\r\nDevToolsInstances (e.g. updateComponentFilters doesnt recursively clean\r\nout everything) it can leave matches hanging that shouldnt be there. So\r\nwe need to run the shouldFilterFiber filter to ignore those.\r\n\r\nAnother interesting implication is that without a FiberInstance we dont\r\nhave a way to get to a VirtualInstance from a HostComponent. Which means\r\nthat even filtered Fibers need to have a FiberInstance if they have a\r\nVirtualInstance parent. Even if we dont actually mount them into the\r\nfront-end.\""
            },
            {
                "commitMessage": "\"Build all bundles required by flight fixture with `build-for-flight-dev` (#30534)\""
            },
            {
                "commitMessage": "\"[Flight] Enable owner stacks on the client when replaying logs (#30473)\n\nTheres a special case that happens when we replay logs on the client\r\nbecause this doesnt happen within the context of any particular\r\nrendered component. So we need to reimplement things that would normally\r\nbe handled by a full client like Fiber.\r\n\r\nThe implementation of `getOwnerStackByComponentInfoInDev` is the\r\nsimplest version since it doesnt have any client components in it so I\r\nmove it to `shared/`. Its only used by Flight but both `react-server/`\r\nand `react-client/` packages. The ReactComponentInfo type is also more\r\ngeneric than just Flight anyway.\r\n\r\nIn a follow up I still need to implement this in React DevTools when\r\nnative tasks are not available so that it appends it to the console.\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "show me the changes for BeforeInputEventPlugin.js file?",
        "number": 5,
        "category": 2,
        "response": "The changes made to the `BeforeInputEventPlugin.js` file involve several modifications across multiple commits. Here are some of the key changes:\n\n1. **Commit `0b4f443020af386f2b48c47c074cb504ed672dc8`**:\n   - Modified the function signatures by adding type annotations to the parameters.\n   - Added type hints such as `DispatchQueue`, `DOMEventName`, `null | Fiber`, `AnyNativeEvent`, and `null | EventTarget`.\n   - Implemented the use of `FlowFixMe` comments to address type incompatibility issues.\n\n2. **Commit `ea04a486a7c27771f7eea896565c0980927ed3b4`**:\n   - Removed `$FlowFixMe` comments and reduced the number of lines by deleting unnecessary comments.\n   - Ensured that type annotations are consistent with the changes.\n\n3. **Commit `64fe791be84ad04a4a1d005376ba5cf5701db9b7`**:\n   - Added a `$FlowFixMe[incompatible-call]` comment in the `accumulateTwoPhaseListeners` call to address an incompatibility issue.\n\n4. **Commit `97d75c9c8bcddb0daed1ed062101c7f5e9b825f4`**:\n   - Changed the file's name without modifying its content, indicating that it was likely part of a refactor or reorganization.\n\n5. **Commit `9328988c024800de05dfab70e55cfd0999445d8a`**:\n   - Added type imports and used `ReactSyntheticEvent` for event typing.\n   - Included several `$FlowFixMe` comments to handle incompatible type usage.\n\n6. **Commit `480626a9e920d5e04194c793a828318102ea4ff4`**:\n   - Restructured event creation and handling, including the `accumulateTwoPhaseListeners` function, to ensure events are processed with their respective listeners.\n\n7. **Commit `1890159a5d362e76ee949dfcace1ccb9677abc45`**:\n   - Replaced `SyntheticEvent` with more specific event types like `SyntheticCompositionEvent` and `SyntheticInputEvent`.\n\n8. **Commit `7f696bd99c39348a631c20378d2a8704634bab04`**:\n   - Inserted event type `domEventName` to replace `topLevelType` and updated function calls accordingly.\n\nThese modifications improve type safety, refactor code structure, and maintain consistency with modern JavaScript practices while addressing type-checking issues using Flow.",
        "chain_of_thought": "To address the question, \"show me the changes for BeforeInputEventPlugin.js file,\" we need to identify the relevant nodes and relationships in the schema. The file in question is represented by the `File` node, and we are interested in the changes made to this file, which are captured by the `changed` relationship from the `Commit` node to the `File` node.\n\nHere's the step-by-step breakdown of the query:\n\n1. **Identify the File Node**: We need to find the `File` node with the name \"BeforeInputEventPlugin.js\".\n\n2. **Find the Changes**: We need to traverse from the `Commit` node to the `File` node using the `changed` relationship to find all commits that have modified this file.\n\n3. **Return the Changes**: We want to return details about the changes, which can include the number of additions, deletions, and possibly the patch or change type.\n\nThe complete Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'BeforeInputEventPlugin.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch, ch.change_type AS changeType\nORDER BY c.committedDate DESC\n```\n\nThis query will return the commit ID, the number of additions and deletions, the patch, and the type of change for each commit that modified the \"BeforeInputEventPlugin.js\" file, ordered by the commit date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'BeforeInputEventPlugin.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch, ch.change_type AS changeType\nORDER BY c.committedDate DESC\n",
        "result": [
            {
                "commitId": "0b4f443020af386f2b48c47c074cb504ed672dc8",
                "additions": 10,
                "deletions": 10,
                "patch": "@@ -192,11 +192,11 @@ let isComposing = false;\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n-  dispatchQueue,\n-  domEventName,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n ) {\n   let eventType;\n   let fallbackData;\n@@ -379,11 +379,11 @@ function getFallbackBeforeInputChars(\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n-  dispatchQueue,\n-  domEventName,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n ) {\n   let chars;\n ",
                "changeType": "modified"
            },
            {
                "commitId": "ea04a486a7c27771f7eea896565c0980927ed3b4",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -227,10 +227,8 @@ function extractCompositionEvent(\n     }\n   }\n \n-  // $FlowFixMe[incompatible-call] found when upgrading Flow\n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n-    // $FlowFixMe[incompatible-type]\n     const event: ReactSyntheticEvent = new SyntheticCompositionEvent(\n       eventType,\n       domEventName,\n@@ -403,7 +401,6 @@ function extractBeforeInputEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n   if (listeners.length > 0) {\n-    // $FlowFixMe[incompatible-type]\n     const event: ReactSyntheticEvent = new SyntheticInputEvent(\n       'onBeforeInput',\n       'beforeinput',",
                "changeType": "modified"
            },
            {
                "commitId": "64fe791be84ad04a4a1d005376ba5cf5701db9b7",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -227,6 +227,7 @@ function extractCompositionEvent(\n     }\n   }\n \n+  // $FlowFixMe[incompatible-call] found when upgrading Flow\n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n     // $FlowFixMe[incompatible-type]",
                "changeType": "modified"
            },
            {
                "commitId": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "9328988c024800de05dfab70e55cfd0999445d8a",
                "additions": 8,
                "deletions": 2,
                "patch": "@@ -12,6 +12,7 @@ import type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n import type {AnyNativeEvent} from '../../events/PluginModuleType';\n import type {DispatchQueue} from '../DOMPluginEventSystem';\n import type {EventSystemFlags} from '../EventSystemFlags';\n+import type {ReactSyntheticEvent} from '../ReactSyntheticEventType';\n \n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n@@ -228,7 +229,8 @@ function extractCompositionEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n-    const event = new SyntheticCompositionEvent(\n+    // $FlowFixMe[incompatible-type]\n+    const event: ReactSyntheticEvent = new SyntheticCompositionEvent(\n       eventType,\n       domEventName,\n       null,\n@@ -239,10 +241,12 @@ function extractCompositionEvent(\n     if (fallbackData) {\n       // Inject data generated from fallback path into the synthetic event.\n       // This matches the property of native CompositionEventInterface.\n+      // $FlowFixMe[incompatible-use]\n       event.data = fallbackData;\n     } else {\n       const customData = getDataFromCustomEvent(nativeEvent);\n       if (customData !== null) {\n+        // $FlowFixMe[incompatible-use]\n         event.data = customData;\n       }\n     }\n@@ -398,14 +402,16 @@ function extractBeforeInputEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n   if (listeners.length > 0) {\n-    const event = new SyntheticInputEvent(\n+    // $FlowFixMe[incompatible-type]\n+    const event: ReactSyntheticEvent = new SyntheticInputEvent(\n       'onBeforeInput',\n       'beforeinput',\n       null,\n       nativeEvent,\n       nativeEventTarget,\n     );\n     dispatchQueue.push({event, listeners});\n+    // $FlowFixMe[incompatible-use]\n     event.data = chars;\n   }\n }",
                "changeType": "modified"
            },
            {
                "commitId": "480626a9e920d5e04194c793a828318102ea4ff4",
                "additions": 31,
                "deletions": 26,
                "patch": "@@ -226,23 +226,25 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticCompositionEvent(\n-    eventType,\n-    domEventName,\n-    null,\n-    nativeEvent,\n-    nativeEventTarget,\n-  );\n-  accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n-\n-  if (fallbackData) {\n-    // Inject data generated from fallback path into the synthetic event.\n-    // This matches the property of native CompositionEventInterface.\n-    event.data = fallbackData;\n-  } else {\n-    const customData = getDataFromCustomEvent(nativeEvent);\n-    if (customData !== null) {\n-      event.data = customData;\n+  const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n+  if (listeners.length > 0) {\n+    const event = new SyntheticCompositionEvent(\n+      eventType,\n+      domEventName,\n+      null,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+    dispatchQueue.push({event, listeners});\n+    if (fallbackData) {\n+      // Inject data generated from fallback path into the synthetic event.\n+      // This matches the property of native CompositionEventInterface.\n+      event.data = fallbackData;\n+    } else {\n+      const customData = getDataFromCustomEvent(nativeEvent);\n+      if (customData !== null) {\n+        event.data = customData;\n+      }\n     }\n   }\n }\n@@ -394,15 +396,18 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticInputEvent(\n-    'onBeforeInput',\n-    'beforeinput',\n-    null,\n-    nativeEvent,\n-    nativeEventTarget,\n-  );\n-  accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n-  event.data = chars;\n+  const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n+  if (listeners.length > 0) {\n+    const event = new SyntheticInputEvent(\n+      'onBeforeInput',\n+      'beforeinput',\n+      null,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+    dispatchQueue.push({event, listeners});\n+    event.data = chars;\n+  }\n }\n \n /**",
                "changeType": "modified"
            },
            {
                "commitId": "1890159a5d362e76ee949dfcace1ccb9677abc45",
                "additions": 4,
                "deletions": 7,
                "patch": "@@ -22,9 +22,8 @@ import {\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n import {\n-  CompositionEventInterface,\n-  InputEventInterface,\n-  SyntheticEvent,\n+  SyntheticCompositionEvent,\n+  SyntheticInputEvent,\n } from '../SyntheticEvent';\n import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n@@ -227,13 +226,12 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticEvent(\n+  const event = new SyntheticCompositionEvent(\n     eventType,\n     domEventName,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n-    CompositionEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n \n@@ -396,13 +394,12 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticEvent(\n+  const event = new SyntheticInputEvent(\n     'onBeforeInput',\n     'beforeinput',\n     null,\n     nativeEvent,\n     nativeEventTarget,\n-    InputEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n   event.data = chars;",
                "changeType": "modified"
            },
            {
                "commitId": "7f696bd99c39348a631c20378d2a8704634bab04",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -229,6 +229,7 @@ function extractCompositionEvent(\n \n   const event = new SyntheticEvent(\n     eventType,\n+    domEventName,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n@@ -397,6 +398,7 @@ function extractBeforeInputEvent(\n \n   const event = new SyntheticEvent(\n     'onBeforeInput',\n+    'beforeinput',\n     null,\n     nativeEvent,\n     nativeEventTarget,",
                "changeType": "modified"
            },
            {
                "commitId": "22d16cc15df8e570b79c2825fb495c2b98b40bf5",
                "additions": 87,
                "deletions": 101,
                "patch": "@@ -3,25 +3,19 @@\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n  */\n \n-import type {TopLevelType} from '../../events/TopLevelEventTypes';\n+import type {DOMEventName} from '../../events/DOMEventNames';\n+import type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n+import type {AnyNativeEvent} from '../../events/PluginModuleType';\n+import type {DispatchQueue} from '../DOMPluginEventSystem';\n+import type {EventSystemFlags} from '../EventSystemFlags';\n \n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {registerTwoPhaseEvent} from '../EventRegistry';\n-import {\n-  TOP_FOCUS_OUT,\n-  TOP_COMPOSITION_START,\n-  TOP_COMPOSITION_END,\n-  TOP_COMPOSITION_UPDATE,\n-  TOP_KEY_DOWN,\n-  TOP_KEY_PRESS,\n-  TOP_KEY_UP,\n-  TOP_MOUSE_DOWN,\n-  TOP_TEXT_INPUT,\n-  TOP_PASTE,\n-} from '../DOMTopLevelEventTypes';\n import {\n   getData as FallbackCompositionStateGetData,\n   initialize as FallbackCompositionStateInitialize,\n@@ -63,34 +57,34 @@ const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n function registerEvents() {\n   registerTwoPhaseEvent('onBeforeInput', [\n-    TOP_COMPOSITION_END,\n-    TOP_KEY_PRESS,\n-    TOP_TEXT_INPUT,\n-    TOP_PASTE,\n+    'compositionend',\n+    'keypress',\n+    'textInput',\n+    'paste',\n   ]);\n   registerTwoPhaseEvent('onCompositionEnd', [\n-    TOP_COMPOSITION_END,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionend',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n   registerTwoPhaseEvent('onCompositionStart', [\n-    TOP_COMPOSITION_START,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionstart',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n   registerTwoPhaseEvent('onCompositionUpdate', [\n-    TOP_COMPOSITION_UPDATE,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionupdate',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n }\n \n@@ -102,7 +96,7 @@ let hasSpaceKeypress = false;\n  * This is required because Firefox fires `keypress` events for key commands\n  * (cut, copy, select-all, etc.) even though no character is inserted.\n  */\n-function isKeypressCommand(nativeEvent) {\n+function isKeypressCommand(nativeEvent: any) {\n   return (\n     (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n     // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n@@ -112,52 +106,47 @@ function isKeypressCommand(nativeEvent) {\n \n /**\n  * Translate native top level events into event types.\n- *\n- * @param {string} topLevelType\n- * @return {object}\n  */\n-function getCompositionEventType(topLevelType) {\n-  switch (topLevelType) {\n-    case TOP_COMPOSITION_START:\n+function getCompositionEventType(domEventName: DOMEventName) {\n+  switch (domEventName) {\n+    case 'compositionstart':\n       return 'onCompositionStart';\n-    case TOP_COMPOSITION_END:\n+    case 'compositionend':\n       return 'onCompositionEnd';\n-    case TOP_COMPOSITION_UPDATE:\n+    case 'compositionupdate':\n       return 'onCompositionUpdate';\n   }\n }\n \n /**\n  * Does our fallback best-guess model think this event signifies that\n  * composition has begun?\n- *\n- * @param {string} topLevelType\n- * @param {object} nativeEvent\n- * @return {boolean}\n  */\n-function isFallbackCompositionStart(topLevelType, nativeEvent) {\n-  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;\n+function isFallbackCompositionStart(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): boolean {\n+  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;\n }\n \n /**\n  * Does our fallback mode think that this event is the end of composition?\n- *\n- * @param {string} topLevelType\n- * @param {object} nativeEvent\n- * @return {boolean}\n  */\n-function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n-  switch (topLevelType) {\n-    case TOP_KEY_UP:\n+function isFallbackCompositionEnd(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): boolean {\n+  switch (domEventName) {\n+    case 'keyup':\n       // Command keys insert or clear IME input.\n       return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n-    case TOP_KEY_DOWN:\n+    case 'keydown':\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return nativeEvent.keyCode !== START_KEYCODE;\n-    case TOP_KEY_PRESS:\n-    case TOP_MOUSE_DOWN:\n-    case TOP_FOCUS_OUT:\n+    case 'keypress':\n+    case 'mousedown':\n+    case 'focusout':\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -174,7 +163,7 @@ function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  * @param {object} nativeEvent\n  * @return {?string}\n  */\n-function getDataFromCustomEvent(nativeEvent) {\n+function getDataFromCustomEvent(nativeEvent: any) {\n   const detail = nativeEvent.detail;\n   if (typeof detail === 'object' && 'data' in detail) {\n     return detail.data;\n@@ -192,7 +181,7 @@ function getDataFromCustomEvent(nativeEvent) {\n  * @param {object} nativeEvent\n  * @return {boolean}\n  */\n-function isUsingKoreanIME(nativeEvent) {\n+function isUsingKoreanIME(nativeEvent: any) {\n   return nativeEvent.locale === 'ko';\n }\n \n@@ -204,7 +193,7 @@ let isComposing = false;\n  */\n function extractCompositionEvent(\n   dispatchQueue,\n-  topLevelType,\n+  domEventName,\n   targetInst,\n   nativeEvent,\n   nativeEventTarget,\n@@ -213,12 +202,12 @@ function extractCompositionEvent(\n   let fallbackData;\n \n   if (canUseCompositionEvent) {\n-    eventType = getCompositionEventType(topLevelType);\n+    eventType = getCompositionEventType(domEventName);\n   } else if (!isComposing) {\n-    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+    if (isFallbackCompositionStart(domEventName, nativeEvent)) {\n       eventType = 'onCompositionStart';\n     }\n-  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {\n     eventType = 'onCompositionEnd';\n   }\n \n@@ -259,16 +248,14 @@ function extractCompositionEvent(\n   }\n }\n \n-/**\n- * @param {TopLevelType} topLevelType Number from `TopLevelType`.\n- * @param {object} nativeEvent Native browser event.\n- * @return {?string} The string corresponding to this `beforeInput` event.\n- */\n-function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n-  switch (topLevelType) {\n-    case TOP_COMPOSITION_END:\n+function getNativeBeforeInputChars(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): ?string {\n+  switch (domEventName) {\n+    case 'compositionend':\n       return getDataFromCustomEvent(nativeEvent);\n-    case TOP_KEY_PRESS:\n+    case 'keypress':\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -291,7 +278,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case TOP_TEXT_INPUT:\n+    case 'textInput':\n       // Record the characters to be added to the DOM.\n       const chars = nativeEvent.data;\n \n@@ -313,21 +300,20 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n /**\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n- *\n- * @param {number} topLevelType Number from `TopLevelEventTypes`.\n- * @param {object} nativeEvent Native browser event.\n- * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n+function getFallbackBeforeInputChars(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): ?string {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n   if (isComposing) {\n     if (\n-      topLevelType === TOP_COMPOSITION_END ||\n+      domEventName === 'compositionend' ||\n       (!canUseCompositionEvent &&\n-        isFallbackCompositionEnd(topLevelType, nativeEvent))\n+        isFallbackCompositionEnd(domEventName, nativeEvent))\n     ) {\n       const chars = FallbackCompositionStateGetData();\n       FallbackCompositionStateReset();\n@@ -337,12 +323,12 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n     return null;\n   }\n \n-  switch (topLevelType) {\n-    case TOP_PASTE:\n+  switch (domEventName) {\n+    case 'paste':\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case TOP_KEY_PRESS:\n+    case 'keypress':\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -373,7 +359,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n         }\n       }\n       return null;\n-    case TOP_COMPOSITION_END:\n+    case 'compositionend':\n       return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)\n         ? null\n         : nativeEvent.data;\n@@ -390,17 +376,17 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n  */\n function extractBeforeInputEvent(\n   dispatchQueue,\n-  topLevelType,\n+  domEventName,\n   targetInst,\n   nativeEvent,\n   nativeEventTarget,\n ) {\n   let chars;\n \n   if (canUseTextInputEvent) {\n-    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+    chars = getNativeBeforeInputChars(domEventName, nativeEvent);\n   } else {\n-    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);\n   }\n \n   // If no characters are being inserted, no BeforeInput event should\n@@ -439,24 +425,24 @@ function extractBeforeInputEvent(\n  * `composition` event types.\n  */\n function extractEvents(\n-  dispatchQueue,\n-  topLevelType,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n-  eventSystemFlags,\n-  targetContainer,\n-) {\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n+  eventSystemFlags: EventSystemFlags,\n+  targetContainer: EventTarget,\n+): void {\n   extractCompositionEvent(\n     dispatchQueue,\n-    topLevelType,\n+    domEventName,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,\n   );\n   extractBeforeInputEvent(\n     dispatchQueue,\n-    topLevelType,\n+    domEventName,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,",
                "changeType": "modified"
            },
            {
                "commitId": "76ce685d0fc7821a6c8be486d7cbb2c3d22f6fb7",
                "additions": 7,
                "deletions": 4,
                "patch": "@@ -28,8 +28,9 @@ import {\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n import {\n-  SyntheticCompositionEvent,\n-  SyntheticInputEvent,\n+  CompositionEventInterface,\n+  InputEventInterface,\n+  SyntheticEvent,\n } from '../SyntheticEvent';\n import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n@@ -237,11 +238,12 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticCompositionEvent(\n+  const event = new SyntheticEvent(\n     eventType,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n+    CompositionEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n \n@@ -407,11 +409,12 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticInputEvent(\n+  const event = new SyntheticEvent(\n     'onBeforeInput',\n     null,\n     nativeEvent,\n     nativeEventTarget,\n+    InputEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n   event.data = chars;",
                "changeType": "modified"
            },
            {
                "commitId": "125d1a19a211c51d5ee52ec0c1cc1f538eb44d5c",
                "additions": 5,
                "deletions": 3,
                "patch": "@@ -27,9 +27,11 @@ import {\n   initialize as FallbackCompositionStateInitialize,\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n-import SyntheticCompositionEvent from '../SyntheticCompositionEvent';\n-import SyntheticInputEvent from '../SyntheticInputEvent';\n-import {accumulateTwoPhaseListeners} from '../DOMModernPluginEventSystem';\n+import {\n+  SyntheticCompositionEvent,\n+  SyntheticInputEvent,\n+} from '../SyntheticEvent';\n+import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;",
                "changeType": "renamed"
            },
            {
                "commitId": "d3ec42020d220777bf589bec36c9cd8300ec9742",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -28,7 +28,7 @@ import {\n } from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n-import {accumulateTwoPhaseListeners} from './DOMModernPluginEventSystem';\n+import accumulateTwoPhaseListeners from './accumulateTwoPhaseListeners';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;",
                "changeType": "modified"
            },
            {
                "commitId": "30a998debf79f8c8efb3fa9b6ff5458fb319d7a1",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -7,7 +7,6 @@\n \n import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatchesSingle} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n@@ -29,6 +28,7 @@ import {\n } from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n+import {accumulateTwoPhaseListeners} from './DOMModernPluginEventSystem';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;\n@@ -276,7 +276,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  accumulateTwoPhaseDispatchesSingle(event);\n+  accumulateTwoPhaseListeners(event);\n   return event;\n }\n \n@@ -437,7 +437,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  accumulateTwoPhaseDispatchesSingle(event);\n+  accumulateTwoPhaseListeners(event);\n   return event;\n }\n ",
                "changeType": "modified"
            },
            {
                "commitId": "2fe0fbb05ef2c56db760122e995b923528e6ce8f",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -7,7 +7,7 @@\n \n import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n+import {accumulateTwoPhaseDispatchesSingle} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n@@ -276,7 +276,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatchesSingle(event);\n   return event;\n }\n \n@@ -437,7 +437,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatchesSingle(event);\n   return event;\n }\n ",
                "changeType": "modified"
            },
            {
                "commitId": "ab1a4f249e61045d523ddbbfb840e868afbbf785",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -464,10 +464,10 @@ const BeforeInputEventPlugin = {\n \n   extractEvents: function(\n     topLevelType,\n-    eventSystemFlags,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,\n+    eventSystemFlags,\n   ) {\n     const composition = extractCompositionEvent(\n       topLevelType,",
                "changeType": "modified"
            },
            {
                "commitId": "0a527707cd8befd21a741ca9646a8551842190b0",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -464,6 +464,7 @@ const BeforeInputEventPlugin = {\n \n   extractEvents: function(\n     topLevelType,\n+    eventSystemFlags,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,",
                "changeType": "modified"
            },
            {
                "commitId": "44e410900da8ef7b5e7daf18e7a0bf61b6612247",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,9 +5,9 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelType} from 'events/TopLevelEventTypes';\n+import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {",
                "changeType": "modified"
            },
            {
                "commitId": "b1a03dfdc8e42d075422556553ffe59868150e95",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,9 +5,9 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelType} from 'events/TopLevelEventTypes';\n+import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {",
                "changeType": "modified"
            },
            {
                "commitId": "c954efa70f44a44be9c33c60c57f87bea6f40a10",
                "additions": 9,
                "deletions": 5,
                "patch": "@@ -22,7 +22,11 @@ import {\n   TOP_TEXT_INPUT,\n   TOP_PASTE,\n } from './DOMTopLevelEventTypes';\n-import * as FallbackCompositionState from './FallbackCompositionState';\n+import {\n+  getData as FallbackCompositionStateGetData,\n+  initialize as FallbackCompositionStateInitialize,\n+  reset as FallbackCompositionStateReset,\n+} from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n@@ -246,10 +250,10 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!isComposing && eventType === eventTypes.compositionStart) {\n-      isComposing = FallbackCompositionState.initialize(nativeEventTarget);\n+      isComposing = FallbackCompositionStateInitialize(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (isComposing) {\n-        fallbackData = FallbackCompositionState.getData();\n+        fallbackData = FallbackCompositionStateGetData();\n       }\n     }\n   }\n@@ -346,8 +350,8 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      const chars = FallbackCompositionState.getData();\n-      FallbackCompositionState.reset();\n+      const chars = FallbackCompositionStateGetData();\n+      FallbackCompositionStateReset();\n       isComposing = false;\n       return chars;\n     }",
                "changeType": "modified"
            },
            {
                "commitId": "8a8d973d3cc5623676a84f87af66ef9259c3937c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -314,7 +314,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n \n       // If it's a spacebar character, assume that we have already handled\n       // it at the keypress level and bail immediately. Android Chrome\n-      // doesn't give us keycodes, so we need to blacklist it.\n+      // doesn't give us keycodes, so we need to ignore it.\n       if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n         return null;\n       }",
                "changeType": "modified"
            },
            {
                "commitId": "b87aabdfe1b7461e7331abb3601d9e6bb27544bc",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2013-present, Facebook, Inc.\n+ * Copyright (c) Facebook, Inc. and its affiliates.\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.",
                "changeType": "modified"
            },
            {
                "commitId": "72434a7686035b4af766ee7d06c070d7f5d6a5f2",
                "additions": 5,
                "deletions": 6,
                "patch": "@@ -8,7 +8,7 @@\n import type {TopLevelType} from 'events/TopLevelEventTypes';\n \n import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n-import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n+import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n   TOP_BLUR,\n@@ -29,25 +29,24 @@ import SyntheticInputEvent from './SyntheticInputEvent';\n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;\n \n-const canUseCompositionEvent =\n-  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n+const canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;\n \n let documentMode = null;\n-if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+if (canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n const canUseTextInputEvent =\n-  ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;\n+  canUseDOM && 'TextEvent' in window && !documentMode;\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n const useFallbackCompositionData =\n-  ExecutionEnvironment.canUseDOM &&\n+  canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n ",
                "changeType": "modified"
            },
            {
                "commitId": "2e757790751ab8d165fc4df37e90a59d914c4527",
                "additions": 18,
                "deletions": 2,
                "patch": "@@ -200,6 +200,20 @@ function getDataFromCustomEvent(nativeEvent) {\n   return null;\n }\n \n+/**\n+ * Check if a composition event was triggered by Korean IME.\n+ * Our fallback mode does not work well with IE's Korean IME,\n+ * so just use native composition events when Korean IME is used.\n+ * Although CompositionEvent.locale property is deprecated,\n+ * it is available in IE, where our fallback mode is enabled.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isUsingKoreanIME(nativeEvent) {\n+  return nativeEvent.locale === 'ko';\n+}\n+\n // Track the current IME composition status, if any.\n let isComposing = false;\n \n@@ -229,7 +243,7 @@ function extractCompositionEvent(\n     return null;\n   }\n \n-  if (useFallbackCompositionData) {\n+  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!isComposing && eventType === eventTypes.compositionStart) {\n@@ -378,7 +392,9 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       }\n       return null;\n     case TOP_COMPOSITION_END:\n-      return useFallbackCompositionData ? null : nativeEvent.data;\n+      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)\n+        ? null\n+        : nativeEvent.data;\n     default:\n       return null;\n   }",
                "changeType": "modified"
            },
            {
                "commitId": "e96dc140599363029bd05565d58bcd4a432db370",
                "additions": 55,
                "deletions": 43,
                "patch": "@@ -5,11 +5,23 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelTypes} from './BrowserEventConstants';\n+import type {TopLevelType} from 'events/TopLevelEventTypes';\n \n import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n+import {\n+  TOP_BLUR,\n+  TOP_COMPOSITION_START,\n+  TOP_COMPOSITION_END,\n+  TOP_COMPOSITION_UPDATE,\n+  TOP_KEY_DOWN,\n+  TOP_KEY_PRESS,\n+  TOP_KEY_UP,\n+  TOP_MOUSE_DOWN,\n+  TOP_TEXT_INPUT,\n+  TOP_PASTE,\n+} from './DOMTopLevelEventTypes';\n import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n@@ -50,10 +62,10 @@ const eventTypes = {\n       captured: 'onBeforeInputCapture',\n     },\n     dependencies: [\n-      'topCompositionEnd',\n-      'topKeyPress',\n-      'topTextInput',\n-      'topPaste',\n+      TOP_COMPOSITION_END,\n+      TOP_KEY_PRESS,\n+      TOP_TEXT_INPUT,\n+      TOP_PASTE,\n     ],\n   },\n   compositionEnd: {\n@@ -62,12 +74,12 @@ const eventTypes = {\n       captured: 'onCompositionEndCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionEnd',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_END,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n   compositionStart: {\n@@ -76,12 +88,12 @@ const eventTypes = {\n       captured: 'onCompositionStartCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionStart',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_START,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n   compositionUpdate: {\n@@ -90,12 +102,12 @@ const eventTypes = {\n       captured: 'onCompositionUpdateCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionUpdate',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_UPDATE,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n };\n@@ -124,11 +136,11 @@ function isKeypressCommand(nativeEvent) {\n  */\n function getCompositionEventType(topLevelType) {\n   switch (topLevelType) {\n-    case 'topCompositionStart':\n+    case TOP_COMPOSITION_START:\n       return eventTypes.compositionStart;\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return eventTypes.compositionEnd;\n-    case 'topCompositionUpdate':\n+    case TOP_COMPOSITION_UPDATE:\n       return eventTypes.compositionUpdate;\n   }\n }\n@@ -142,7 +154,7 @@ function getCompositionEventType(topLevelType) {\n  * @return {boolean}\n  */\n function isFallbackCompositionStart(topLevelType, nativeEvent) {\n-  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;\n+  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;\n }\n \n /**\n@@ -154,16 +166,16 @@ function isFallbackCompositionStart(topLevelType, nativeEvent) {\n  */\n function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case 'topKeyUp':\n+    case TOP_KEY_UP:\n       // Command keys insert or clear IME input.\n       return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n-    case 'topKeyDown':\n+    case TOP_KEY_DOWN:\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return nativeEvent.keyCode !== START_KEYCODE;\n-    case 'topKeyPress':\n-    case 'topMouseDown':\n-    case 'topBlur':\n+    case TOP_KEY_PRESS:\n+    case TOP_MOUSE_DOWN:\n+    case TOP_BLUR:\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -252,15 +264,15 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n+ * @param {TopLevelType} topLevelType Number from `TopLevelType`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n-function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n+function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return getDataFromCustomEvent(nativeEvent);\n-    case 'topKeyPress':\n+    case TOP_KEY_PRESS:\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -283,7 +295,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case 'topTextInput':\n+    case TOP_TEXT_INPUT:\n       // Record the characters to be added to the DOM.\n       const chars = nativeEvent.data;\n \n@@ -306,18 +318,18 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n  *\n- * @param {string} topLevelType Record from `BrowserEventConstants`.\n+ * @param {number} topLevelType Number from `TopLevelEventTypes`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n+function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n   if (isComposing) {\n     if (\n-      topLevelType === 'topCompositionEnd' ||\n+      topLevelType === TOP_COMPOSITION_END ||\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n@@ -330,11 +342,11 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   }\n \n   switch (topLevelType) {\n-    case 'topPaste':\n+    case TOP_PASTE:\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case 'topKeyPress':\n+    case TOP_KEY_PRESS:\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -365,7 +377,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n         }\n       }\n       return null;\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return useFallbackCompositionData ? null : nativeEvent.data;\n     default:\n       return null;",
                "changeType": "modified"
            },
            {
                "commitId": "4d37040cbf914c9d3c282e8edd67fa97a3c31178",
                "additions": 1,
                "deletions": 18,
                "patch": "@@ -29,10 +29,7 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n const canUseTextInputEvent =\n-  ExecutionEnvironment.canUseDOM &&\n-  'TextEvent' in window &&\n-  !documentMode &&\n-  !isPresto();\n+  ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n@@ -42,20 +39,6 @@ const useFallbackCompositionData =\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n \n-/**\n- * Opera <= 12 includes TextEvent in window, but does not fire\n- * text input events. Rely on keypress instead.\n- */\n-function isPresto() {\n-  const opera = window.opera;\n-  return (\n-    opera !== null &&\n-    typeof opera === 'object' &&\n-    typeof opera.version === 'function' &&\n-    parseInt(opera.version(), 10) <= 12\n-  );\n-}\n-\n const SPACEBAR_CODE = 32;\n const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n ",
                "changeType": "modified"
            },
            {
                "commitId": "faa4218632ca21f3af731fb6c14849fc054fca15",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -49,6 +49,7 @@ const useFallbackCompositionData =\n function isPresto() {\n   const opera = window.opera;\n   return (\n+    opera !== null &&\n     typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n     parseInt(opera.version(), 10) <= 12",
                "changeType": "modified"
            },
            {
                "commitId": "cc52e06b490e0dc2482b345aa5d0d65fae931095",
                "additions": 23,
                "deletions": 14,
                "patch": "@@ -453,20 +453,29 @@ const BeforeInputEventPlugin = {\n     nativeEvent,\n     nativeEventTarget,\n   ) {\n-    return [\n-      extractCompositionEvent(\n-        topLevelType,\n-        targetInst,\n-        nativeEvent,\n-        nativeEventTarget,\n-      ),\n-      extractBeforeInputEvent(\n-        topLevelType,\n-        targetInst,\n-        nativeEvent,\n-        nativeEventTarget,\n-      ),\n-    ];\n+    const composition = extractCompositionEvent(\n+      topLevelType,\n+      targetInst,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+\n+    const beforeInput = extractBeforeInputEvent(\n+      topLevelType,\n+      targetInst,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+\n+    if (composition === null) {\n+      return beforeInput;\n+    }\n+\n+    if (beforeInput === null) {\n+      return composition;\n+    }\n+\n+    return [composition, beforeInput];\n   },\n };\n ",
                "changeType": "modified"
            },
            {
                "commitId": "5bd2321ae3dd7d68ac02dee3c3f271e9d0ee8784",
                "additions": 23,
                "deletions": 23,
                "patch": "@@ -14,21 +14,21 @@ import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n-var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n-var START_KEYCODE = 229;\n+const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+const START_KEYCODE = 229;\n \n-var canUseCompositionEvent =\n+const canUseCompositionEvent =\n   ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n \n-var documentMode = null;\n+let documentMode = null;\n if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n-var canUseTextInputEvent =\n+const canUseTextInputEvent =\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n@@ -37,7 +37,7 @@ var canUseTextInputEvent =\n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n-var useFallbackCompositionData =\n+const useFallbackCompositionData =\n   ExecutionEnvironment.canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n@@ -47,19 +47,19 @@ var useFallbackCompositionData =\n  * text input events. Rely on keypress instead.\n  */\n function isPresto() {\n-  var opera = window.opera;\n+  const opera = window.opera;\n   return (\n     typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n     parseInt(opera.version(), 10) <= 12\n   );\n }\n \n-var SPACEBAR_CODE = 32;\n-var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n+const SPACEBAR_CODE = 32;\n+const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n // Events and their corresponding property names.\n-var eventTypes = {\n+const eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: 'onBeforeInput',\n@@ -117,7 +117,7 @@ var eventTypes = {\n };\n \n // Track whether we've ever handled a keypress on the space key.\n-var hasSpaceKeypress = false;\n+let hasSpaceKeypress = false;\n \n /**\n  * Return whether a native keypress event is assumed to be a command.\n@@ -197,15 +197,15 @@ function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  * @return {?string}\n  */\n function getDataFromCustomEvent(nativeEvent) {\n-  var detail = nativeEvent.detail;\n+  const detail = nativeEvent.detail;\n   if (typeof detail === 'object' && 'data' in detail) {\n     return detail.data;\n   }\n   return null;\n }\n \n // Track the current IME composition status, if any.\n-var isComposing = false;\n+let isComposing = false;\n \n /**\n  * @return {?object} A SyntheticCompositionEvent.\n@@ -216,8 +216,8 @@ function extractCompositionEvent(\n   nativeEvent,\n   nativeEventTarget,\n ) {\n-  var eventType;\n-  var fallbackData;\n+  let eventType;\n+  let fallbackData;\n \n   if (canUseCompositionEvent) {\n     eventType = getCompositionEventType(topLevelType);\n@@ -245,7 +245,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  var event = SyntheticCompositionEvent.getPooled(\n+  const event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     targetInst,\n     nativeEvent,\n@@ -257,7 +257,7 @@ function extractCompositionEvent(\n     // This matches the property of native CompositionEventInterface.\n     event.data = fallbackData;\n   } else {\n-    var customData = getDataFromCustomEvent(nativeEvent);\n+    const customData = getDataFromCustomEvent(nativeEvent);\n     if (customData !== null) {\n       event.data = customData;\n     }\n@@ -291,7 +291,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n        * To avoid this issue, use the keypress event as if no `textInput`\n        * event is available.\n        */\n-      var which = nativeEvent.which;\n+      const which = nativeEvent.which;\n       if (which !== SPACEBAR_CODE) {\n         return null;\n       }\n@@ -301,7 +301,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n \n     case 'topTextInput':\n       // Record the characters to be added to the DOM.\n-      var chars = nativeEvent.data;\n+      const chars = nativeEvent.data;\n \n       // If it's a spacebar character, assume that we have already handled\n       // it at the keypress level and bail immediately. Android Chrome\n@@ -337,7 +337,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      var chars = FallbackCompositionState.getData();\n+      const chars = FallbackCompositionState.getData();\n       FallbackCompositionState.reset();\n       isComposing = false;\n       return chars;\n@@ -400,7 +400,7 @@ function extractBeforeInputEvent(\n   nativeEvent,\n   nativeEventTarget,\n ) {\n-  var chars;\n+  let chars;\n \n   if (canUseTextInputEvent) {\n     chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n@@ -414,7 +414,7 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  var event = SyntheticInputEvent.getPooled(\n+  const event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     targetInst,\n     nativeEvent,\n@@ -444,7 +444,7 @@ function extractBeforeInputEvent(\n  * allowing us to share composition fallback code for both `beforeInput` and\n  * `composition` event types.\n  */\n-var BeforeInputEventPlugin = {\n+const BeforeInputEventPlugin = {\n   eventTypes: eventTypes,\n \n   extractEvents: function(",
                "changeType": "modified"
            },
            {
                "commitId": "92b7b172cce9958b846844f0b46fd7bbd8c5140d",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -7,10 +7,10 @@\n \n import type {TopLevelTypes} from './BrowserEventConstants';\n \n-import EventPropagators from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n-import FallbackCompositionState from './FallbackCompositionState';\n+import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n@@ -263,7 +263,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatches(event);\n   return event;\n }\n \n@@ -422,7 +422,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatches(event);\n   return event;\n }\n ",
                "changeType": "modified"
            },
            {
                "commitId": "45c1ff348e1c7d03567f5bba6cb32cffa9222972",
                "additions": 0,
                "deletions": 2,
                "patch": "@@ -5,8 +5,6 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-'use strict';\n-\n import type {TopLevelTypes} from './BrowserEventConstants';\n \n import EventPropagators from 'events/EventPropagators';",
                "changeType": "modified"
            },
            {
                "commitId": "21d0c115238b4f38837020cf83e0c657d8c01c9f",
                "additions": 6,
                "deletions": 6,
                "patch": "@@ -9,12 +9,12 @@\n \n import type {TopLevelTypes} from './BrowserEventConstants';\n \n-var EventPropagators = require('events/EventPropagators');\n-var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n+import EventPropagators from 'events/EventPropagators';\n+import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n-var FallbackCompositionState = require('./FallbackCompositionState');\n-var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n-var SyntheticInputEvent = require('./SyntheticInputEvent');\n+import FallbackCompositionState from './FallbackCompositionState';\n+import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n+import SyntheticInputEvent from './SyntheticInputEvent';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n@@ -472,4 +472,4 @@ var BeforeInputEventPlugin = {\n   },\n };\n \n-module.exports = BeforeInputEventPlugin;\n+export default BeforeInputEventPlugin;",
                "changeType": "modified"
            },
            {
                "commitId": "087c48bb36b88ef0b5bbca2b9b70a52d8d413102",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -7,14 +7,15 @@\n \n 'use strict';\n \n+import type {TopLevelTypes} from './BrowserEventConstants';\n+\n var EventPropagators = require('events/EventPropagators');\n var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n+\n var FallbackCompositionState = require('./FallbackCompositionState');\n var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n var SyntheticInputEvent = require('./SyntheticInputEvent');\n \n-import type {TopLevelTypes} from 'BrowserEventConstants';\n-\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n ",
                "changeType": "modified"
            },
            {
                "commitId": "1eed302d346bfb8f5db8d88b0e7096d8999d3548",
                "additions": 4,
                "deletions": 6,
                "patch": "@@ -3,17 +3,15 @@\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.\n- *\n- * @providesModule BeforeInputEventPlugin\n  */\n \n 'use strict';\n \n-var EventPropagators = require('EventPropagators');\n+var EventPropagators = require('events/EventPropagators');\n var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n-var FallbackCompositionState = require('FallbackCompositionState');\n-var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n-var SyntheticInputEvent = require('SyntheticInputEvent');\n+var FallbackCompositionState = require('./FallbackCompositionState');\n+var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n+var SyntheticInputEvent = require('./SyntheticInputEvent');\n \n import type {TopLevelTypes} from 'BrowserEventConstants';\n ",
                "changeType": "modified"
            },
            {
                "commitId": "e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "ab853e6f3ef69a56f042f5aa5c07da881fdb68a0",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "313611572b6567d229367ed20ff63d1bca8610bb",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "d9c1dbd61772f8f8ab0cdf389e70463d704c480b",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "d63249d03488fec1ea92a81ba29f0e87a82feeae",
                "additions": 3,
                "deletions": 5,
                "patch": "@@ -1,10 +1,8 @@\n /**\n- * Copyright 2013-present Facebook, Inc.\n- * All rights reserved.\n+ * Copyright (c) 2013-present, Facebook, Inc.\n  *\n- * This source code is licensed under the BSD-style license found in the\n- * LICENSE file in the root directory of this source tree. An additional grant\n- * of patent rights can be found in the PATENTS file in the same directory.\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n  *\n  * @providesModule BeforeInputEventPlugin\n  */",
                "changeType": "modified"
            },
            {
                "commitId": "0e556fef24e9db468d00b05ef8ddfa0b06b08f0c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -273,7 +273,7 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {string} topLevelType Record from `BrowserEventConstants`.\n+ * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */",
                "changeType": "modified"
            },
            {
                "commitId": "755724a24c4743b5507590e512cdf2f24d9b8435",
                "additions": 11,
                "deletions": 13,
                "patch": "@@ -209,8 +209,8 @@ function getDataFromCustomEvent(nativeEvent) {\n   return null;\n }\n \n-// Track the current IME composition fallback object, if any.\n-var currentComposition = null;\n+// Track the current IME composition status, if any.\n+var isComposing = false;\n \n /**\n  * @return {?object} A SyntheticCompositionEvent.\n@@ -226,7 +226,7 @@ function extractCompositionEvent(\n \n   if (canUseCompositionEvent) {\n     eventType = getCompositionEventType(topLevelType);\n-  } else if (!currentComposition) {\n+  } else if (!isComposing) {\n     if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n       eventType = eventTypes.compositionStart;\n     }\n@@ -241,13 +241,11 @@ function extractCompositionEvent(\n   if (useFallbackCompositionData) {\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n-    if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(\n-        nativeEventTarget,\n-      );\n+    if (!isComposing && eventType === eventTypes.compositionStart) {\n+      isComposing = FallbackCompositionState.initialize(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n-      if (currentComposition) {\n-        fallbackData = currentComposition.getData();\n+      if (isComposing) {\n+        fallbackData = FallbackCompositionState.getData();\n       }\n     }\n   }\n@@ -338,15 +336,15 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n-  if (currentComposition) {\n+  if (isComposing) {\n     if (\n       topLevelType === 'topCompositionEnd' ||\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      var chars = currentComposition.getData();\n-      FallbackCompositionState.release(currentComposition);\n-      currentComposition = null;\n+      var chars = FallbackCompositionState.getData();\n+      FallbackCompositionState.reset();\n+      isComposing = false;\n       return chars;\n     }\n     return null;",
                "changeType": "modified"
            },
            {
                "commitId": "00ba97a354e841701b4b83983c3a3904895e7b87",
                "additions": 12,
                "deletions": 2,
                "patch": "@@ -374,8 +374,18 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n        *   being used. Ex: `Cmd+C`. No character is inserted, and no\n        *   `input` event will occur.\n        */\n-      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-        return String.fromCharCode(nativeEvent.which);\n+      if (!isKeypressCommand(nativeEvent)) {\n+        // IE fires the `keypress` event when a user types an emoji via\n+        // Touch keyboard of Windows.  In such a case, the `char` property\n+        // holds an emoji character like `\\uD83D\\uDE0A`.  Because its length\n+        // is 2, the property `which` does not represent an emoji correctly.\n+        // In such a case, we directly return the `char` property instead of\n+        // using `which`.\n+        if (nativeEvent.char && nativeEvent.char.length > 1) {\n+          return nativeEvent.char;\n+        } else if (nativeEvent.which) {\n+          return String.fromCharCode(nativeEvent.which);\n+        }\n       }\n       return null;\n     case 'topCompositionEnd':",
                "changeType": "modified"
            },
            {
                "commitId": "a9d0deb8e13e9f0b1ee7d2f28a6eec0e7ad2e41d",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -17,7 +17,7 @@ var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n-import type {TopLevelTypes} from 'EventConstants';\n+import type {TopLevelTypes} from 'BrowserEventConstants';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n@@ -275,7 +275,7 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {string} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n@@ -329,7 +329,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {string} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */",
                "changeType": "modified"
            },
            {
                "commitId": "b1768b5a48d1f82e4ef4150e0036c5f846d3758a",
                "additions": 14,
                "deletions": 8,
                "patch": "@@ -22,8 +22,8 @@ import type {TopLevelTypes} from 'EventConstants';\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n \n-var canUseCompositionEvent = ExecutionEnvironment.canUseDOM &&\n-  'CompositionEvent' in window;\n+var canUseCompositionEvent =\n+  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n \n var documentMode = null;\n if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n@@ -33,15 +33,17 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n-var canUseTextInputEvent = ExecutionEnvironment.canUseDOM &&\n+var canUseTextInputEvent =\n+  ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n   !isPresto();\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n-var useFallbackCompositionData = ExecutionEnvironment.canUseDOM &&\n+var useFallbackCompositionData =\n+  ExecutionEnvironment.canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n \n@@ -51,9 +53,11 @@ var useFallbackCompositionData = ExecutionEnvironment.canUseDOM &&\n  */\n function isPresto() {\n   var opera = window.opera;\n-  return typeof opera === 'object' &&\n+  return (\n+    typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n-    parseInt(opera.version(), 10) <= 12;\n+    parseInt(opera.version(), 10) <= 12\n+  );\n }\n \n var SPACEBAR_CODE = 32;\n@@ -126,9 +130,11 @@ var hasSpaceKeypress = false;\n  * (cut, copy, select-all, etc.) even though no character is inserted.\n  */\n function isKeypressCommand(nativeEvent) {\n-  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n+  return (\n+    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n     // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n-    !(nativeEvent.ctrlKey && nativeEvent.altKey);\n+    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n+  );\n }\n \n /**",
                "changeType": "modified"
            },
            {
                "commitId": "b1b4a2fb252f26fe10d29ba60d85ff89a85ff3ec",
                "additions": 30,
                "deletions": 44,
                "patch": null,
                "changeType": "modified"
            },
            {
                "commitId": "1843f8716803d380df34a7362d80022352853931",
                "additions": 30,
                "deletions": 44,
                "patch": null,
                "changeType": "modified"
            },
            {
                "commitId": "8bc11649df767402c262b6c9b67c6dd811d42cd0",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -12,7 +12,7 @@\n 'use strict';\n \n var EventPropagators = require('EventPropagators');\n-var ExecutionEnvironment = require('ExecutionEnvironment');\n+var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');",
                "changeType": "modified"
            },
            {
                "commitId": "e452e3374135c116ef687a8bb3a5d277e3cde8fb",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -12,7 +12,7 @@\n 'use strict';\n \n var EventPropagators = require('EventPropagators');\n-var ExecutionEnvironment = require('ExecutionEnvironment');\n+var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');",
                "changeType": "modified"
            },
            {
                "commitId": "e3131c1d55d6695c2f0966379535f88b813f912b",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "a3fb0310ca6f7cad0707b5a9fd004c19e004186f",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "a64ca9b697d0808a2966465fea2e658e4f310080",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -345,11 +345,12 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n+  // If composition event is available, we extract a string only at\n+  // compositionevent, otherwise extract it at fallback events.\n   if (currentComposition) {\n-    if (\n-      topLevelType === 'topCompositionEnd' ||\n-      isFallbackCompositionEnd(topLevelType, nativeEvent)\n-    ) {\n+    if (topLevelType === 'topCompositionEnd'\n+        || (!canUseCompositionEvent\n+            && isFallbackCompositionEnd(topLevelType, nativeEvent))) {\n       var chars = currentComposition.getData();\n       FallbackCompositionState.release(currentComposition);\n       currentComposition = null;",
                "changeType": "modified"
            },
            {
                "commitId": "f7076b7759c57b95da21ffca892ddbdcf3ffed02",
                "additions": 8,
                "deletions": 10,
                "patch": "@@ -17,8 +17,6 @@ var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n-var keyOf = require('keyOf');\n-\n import type { TopLevelTypes } from 'EventConstants';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n@@ -75,8 +73,8 @@ var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null}),\n+      bubbled: 'onBeforeInput',\n+      captured: 'onBeforeInputCapture',\n     },\n     dependencies: [\n       'topCompositionEnd',\n@@ -87,8 +85,8 @@ var eventTypes = {\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null}),\n+      bubbled: 'onCompositionEnd',\n+      captured: 'onCompositionEndCapture',\n     },\n     dependencies: [\n       'topBlur',\n@@ -101,8 +99,8 @@ var eventTypes = {\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null}),\n+      bubbled: 'onCompositionStart',\n+      captured: 'onCompositionStartCapture',\n     },\n     dependencies: [\n       'topBlur',\n@@ -115,8 +113,8 @@ var eventTypes = {\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null}),\n+      bubbled: 'onCompositionUpdate',\n+      captured: 'onCompositionUpdateCapture',\n     },\n     dependencies: [\n       'topBlur',",
                "changeType": "modified"
            },
            {
                "commitId": "2f9a9dc4c56c1caee250626c54c587c5f233fcab",
                "additions": 42,
                "deletions": 43,
                "patch": "@@ -11,7 +11,6 @@\n \n 'use strict';\n \n-var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n@@ -20,6 +19,8 @@ var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+import type { TopLevelTypes } from 'EventConstants';\n+\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n \n@@ -70,8 +71,6 @@ function isPresto() {\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n-var topLevelTypes = EventConstants.topLevelTypes;\n-\n // Events and their corresponding property names.\n var eventTypes = {\n   beforeInput: {\n@@ -80,10 +79,10 @@ var eventTypes = {\n       captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topCompositionEnd,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste,\n+      'topCompositionEnd',\n+      'topKeyPress',\n+      'topTextInput',\n+      'topPaste',\n     ],\n   },\n   compositionEnd: {\n@@ -92,12 +91,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionEnd,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionEnd',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n   compositionStart: {\n@@ -106,12 +105,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionStart,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionStart',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n   compositionUpdate: {\n@@ -120,12 +119,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionUpdate,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionUpdate',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n };\n@@ -155,11 +154,11 @@ function isKeypressCommand(nativeEvent) {\n  */\n function getCompositionEventType(topLevelType) {\n   switch (topLevelType) {\n-    case topLevelTypes.topCompositionStart:\n+    case 'topCompositionStart':\n       return eventTypes.compositionStart;\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return eventTypes.compositionEnd;\n-    case topLevelTypes.topCompositionUpdate:\n+    case 'topCompositionUpdate':\n       return eventTypes.compositionUpdate;\n   }\n }\n@@ -174,7 +173,7 @@ function getCompositionEventType(topLevelType) {\n  */\n function isFallbackCompositionStart(topLevelType, nativeEvent) {\n   return (\n-    topLevelType === topLevelTypes.topKeyDown &&\n+    topLevelType === 'topKeyDown' &&\n     nativeEvent.keyCode === START_KEYCODE\n   );\n }\n@@ -188,16 +187,16 @@ function isFallbackCompositionStart(topLevelType, nativeEvent) {\n  */\n function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case topLevelTypes.topKeyUp:\n+    case 'topKeyUp':\n       // Command keys insert or clear IME input.\n       return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n-    case topLevelTypes.topKeyDown:\n+    case 'topKeyDown':\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return (nativeEvent.keyCode !== START_KEYCODE);\n-    case topLevelTypes.topKeyPress:\n-    case topLevelTypes.topMouseDown:\n-    case topLevelTypes.topBlur:\n+    case 'topKeyPress':\n+    case 'topMouseDown':\n+    case 'topBlur':\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -291,11 +290,11 @@ function extractCompositionEvent(\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n-function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   switch (topLevelType) {\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return getDataFromCustomEvent(nativeEvent);\n-    case topLevelTypes.topKeyPress:\n+    case 'topKeyPress':\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -318,7 +317,7 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case topLevelTypes.topTextInput:\n+    case 'topTextInput':\n       // Record the characters to be added to the DOM.\n       var chars = nativeEvent.data;\n \n@@ -345,12 +344,12 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   if (currentComposition) {\n     if (\n-      topLevelType === topLevelTypes.topCompositionEnd ||\n+      topLevelType === 'topCompositionEnd' ||\n       isFallbackCompositionEnd(topLevelType, nativeEvent)\n     ) {\n       var chars = currentComposition.getData();\n@@ -362,11 +361,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n   }\n \n   switch (topLevelType) {\n-    case topLevelTypes.topPaste:\n+    case 'topPaste':\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case topLevelTypes.topKeyPress:\n+    case 'topKeyPress':\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -387,7 +386,7 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n         return String.fromCharCode(nativeEvent.which);\n       }\n       return null;\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return useFallbackCompositionData ? null : nativeEvent.data;\n     default:\n       return null;",
                "changeType": "modified"
            },
            {
                "commitId": "209b7522d99a8af36f8d9e06ce622c59b793e5a3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "changeType": "modified"
            },
            {
                "commitId": "3b96650e39ddda5ba49245713ef16dbc52d25e9e",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "changeType": "modified"
            },
            {
                "commitId": "bef45b0b1a98ea9b472ba664d955a039cf2f8068",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "changeType": "modified"
            },
            {
                "commitId": "4f7a2766e4c29c2f25c0807ac21318c3963e6aec",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -7,7 +7,6 @@\n  * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n- * @typechecks static-only\n  */\n \n 'use strict';",
                "changeType": "modified"
            },
            {
                "commitId": "46f5251c66dcb0895743db02265c07320d0a6089",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -7,7 +7,6 @@\n  * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n- * @typechecks static-only\n  */\n \n 'use strict';",
                "changeType": "modified"
            },
            {
                "commitId": "35962a00084382b49d1f9e3bd36612925f360e5b",
                "additions": 9,
                "deletions": 29,
                "patch": "@@ -227,16 +227,11 @@ function getDataFromCustomEvent(nativeEvent) {\n var currentComposition = null;\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -261,7 +256,8 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+      currentComposition =\n+        FallbackCompositionState.getPooled(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (currentComposition) {\n         fallbackData = currentComposition.getData();\n@@ -271,7 +267,7 @@ function extractCompositionEvent(\n \n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -403,16 +399,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n  * `textInput` or fallback behavior.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -432,7 +423,7 @@ function extractBeforeInputEvent(\n \n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -464,33 +455,22 @@ var BeforeInputEventPlugin = {\n \n   eventTypes: eventTypes,\n \n-  /**\n-   * @param {string} topLevelType Record from `EventConstants`.\n-   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n-   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n-   * @param {object} nativeEvent Native browser event.\n-   * @return {*} An accumulation of synthetic events.\n-   * @see {EventPluginHub.extractEvents}\n-   */\n   extractEvents: function(\n     topLevelType,\n-    topLevelTarget,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),",
                "changeType": "modified"
            },
            {
                "commitId": "f470cb88f88b4667419f170fcc7971dad4298494",
                "additions": 9,
                "deletions": 29,
                "patch": "@@ -227,16 +227,11 @@ function getDataFromCustomEvent(nativeEvent) {\n var currentComposition = null;\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -261,7 +256,8 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+      currentComposition =\n+        FallbackCompositionState.getPooled(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (currentComposition) {\n         fallbackData = currentComposition.getData();\n@@ -271,7 +267,7 @@ function extractCompositionEvent(\n \n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -403,16 +399,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n  * `textInput` or fallback behavior.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -432,7 +423,7 @@ function extractBeforeInputEvent(\n \n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -464,33 +455,22 @@ var BeforeInputEventPlugin = {\n \n   eventTypes: eventTypes,\n \n-  /**\n-   * @param {string} topLevelType Record from `EventConstants`.\n-   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n-   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n-   * @param {object} nativeEvent Native browser event.\n-   * @return {*} An accumulation of synthetic events.\n-   * @see {EventPluginHub.extractEvents}\n-   */\n   extractEvents: function(\n     topLevelType,\n-    topLevelTarget,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),",
                "changeType": "modified"
            },
            {
                "commitId": "7b1f03f4f8e6ac110565e62035a042cb9a5ca612",
                "additions": 14,
                "deletions": 7,
                "patch": "@@ -237,7 +237,8 @@ function extractCompositionEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var eventType;\n   var fallbackData;\n@@ -271,7 +272,8 @@ function extractCompositionEvent(\n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   if (fallbackData) {\n@@ -411,7 +413,8 @@ function extractBeforeInputEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var chars;\n \n@@ -430,7 +433,8 @@ function extractBeforeInputEvent(\n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   event.data = chars;\n@@ -472,20 +476,23 @@ var BeforeInputEventPlugin = {\n     topLevelType,\n     topLevelTarget,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n     ];\n   },",
                "changeType": "modified"
            },
            {
                "commitId": "4b804e485db51b49716736ce2dfcf23d020b6eb2",
                "additions": 14,
                "deletions": 7,
                "patch": "@@ -237,7 +237,8 @@ function extractCompositionEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var eventType;\n   var fallbackData;\n@@ -271,7 +272,8 @@ function extractCompositionEvent(\n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   if (fallbackData) {\n@@ -411,7 +413,8 @@ function extractBeforeInputEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var chars;\n \n@@ -430,7 +433,8 @@ function extractBeforeInputEvent(\n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   event.data = chars;\n@@ -472,20 +476,23 @@ var BeforeInputEventPlugin = {\n     topLevelType,\n     topLevelTarget,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n     ];\n   },",
                "changeType": "modified"
            },
            {
                "commitId": "4c3e9650ba6c9ea90956a08542d9fa9b5d72ee88",
                "additions": 15,
                "deletions": 15,
                "patch": "@@ -78,57 +78,57 @@ var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null})\n+      captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste\n-    ]\n+      topLevelTypes.topPaste,\n+    ],\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null})\n+      captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null})\n+      captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionStart,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null})\n+      captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionUpdate,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n-  }\n+      topLevelTypes.topMouseDown,\n+    ],\n+  },\n };\n \n // Track whether we've ever handled a keypress on the space key.\n@@ -486,9 +486,9 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      )\n+      ),\n     ];\n-  }\n+  },\n };\n \n module.exports = BeforeInputEventPlugin;",
                "changeType": "modified"
            },
            {
                "commitId": "c089eece509012a444dc770afb5b348b47c62d3a",
                "additions": 15,
                "deletions": 15,
                "patch": "@@ -78,57 +78,57 @@ var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null})\n+      captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste\n-    ]\n+      topLevelTypes.topPaste,\n+    ],\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null})\n+      captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null})\n+      captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionStart,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null})\n+      captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionUpdate,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n-  }\n+      topLevelTypes.topMouseDown,\n+    ],\n+  },\n };\n \n // Track whether we've ever handled a keypress on the space key.\n@@ -486,9 +486,9 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      )\n+      ),\n     ];\n-  }\n+  },\n };\n \n module.exports = BeforeInputEventPlugin;",
                "changeType": "modified"
            },
            {
                "commitId": "52752446760dee0bc7232b4146f5a309ac57f065",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "0b063f8a09dae4b6b1de400ff2d9aba9108647de",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "d59a039ebdebebf5c98ab96026529f66063979bf",
                "additions": 0,
                "deletions": 4,
                "patch": "@@ -131,9 +131,6 @@ var eventTypes = {\n   }\n };\n \n-// Track characters inserted via keypress and composition events.\n-var fallbackBeforeInputChars = null;\n-\n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n \n@@ -437,7 +434,6 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  fallbackBeforeInputChars = null;\n   EventPropagators.accumulateTwoPhaseDispatches(event);\n   return event;\n }",
                "changeType": "modified"
            },
            {
                "commitId": "dae1dc629272593f342fe22c6c795cb8fdf33d11",
                "additions": 0,
                "deletions": 4,
                "patch": "@@ -131,9 +131,6 @@ var eventTypes = {\n   }\n };\n \n-// Track characters inserted via keypress and composition events.\n-var fallbackBeforeInputChars = null;\n-\n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n \n@@ -437,7 +434,6 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  fallbackBeforeInputChars = null;\n   EventPropagators.accumulateTwoPhaseDispatches(event);\n   return event;\n }",
                "changeType": "modified"
            },
            {
                "commitId": "2aeb8a2a6beb00617a4217f7f8284924fa2ad819",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013 Facebook, Inc.\n+ * Copyright 2013-2015 Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "changeType": "modified"
            },
            {
                "commitId": "3e0750a4ad2444c2df708b144ff0c8af7628881d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013 Facebook, Inc.\n+ * Copyright 2013-2015 Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "changeType": "modified"
            },
            {
                "commitId": "54c82da15f6b4717425edbf68e23ae82583a50af",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -10,7 +10,7 @@\n  * @typechecks static-only\n  */\n \n-\"use strict\";\n+'use strict';\n \n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n@@ -256,7 +256,7 @@ function extractCompositionEvent(\n   }\n \n   if (!eventType) {\n-    return;\n+    return null;\n   }\n \n   if (useFallbackCompositionData) {\n@@ -427,7 +427,7 @@ function extractBeforeInputEvent(\n   // If no characters are being inserted, no BeforeInput event should\n   // be fired.\n   if (!chars) {\n-    return;\n+    return null;\n   }\n \n   var event = SyntheticInputEvent.getPooled(\n@@ -490,7 +490,7 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      ),\n+      )\n     ];\n   }\n };",
                "changeType": "modified"
            },
            {
                "commitId": "47ee780cafa650a61bd62c4a6c13ac5554efd05c",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -256,7 +256,7 @@ function extractCompositionEvent(\n   }\n \n   if (!eventType) {\n-    return;\n+    return null;\n   }\n \n   if (useFallbackCompositionData) {\n@@ -427,7 +427,7 @@ function extractBeforeInputEvent(\n   // If no characters are being inserted, no BeforeInput event should\n   // be fired.\n   if (!chars) {\n-    return;\n+    return null;\n   }\n \n   var event = SyntheticInputEvent.getPooled(",
                "changeType": "modified"
            },
            {
                "commitId": "e27da9973193a06a138d7098c58723a7f10ed2e5",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -490,7 +490,7 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      ),\n+      )\n     ];\n   }\n };",
                "changeType": "modified"
            },
            {
                "commitId": "df64a67b7f930f90423e194637af624cdc155526",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -10,7 +10,7 @@\n  * @typechecks static-only\n  */\n \n-\"use strict\";\n+'use strict';\n \n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');",
                "changeType": "modified"
            },
            {
                "commitId": "80ed4d870a628af57dfc6e45bf6d513084f677d7",
                "additions": 389,
                "deletions": 111,
                "patch": "@@ -15,14 +15,44 @@\n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n+var FallbackCompositionState = require('FallbackCompositionState');\n+var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+var START_KEYCODE = 229;\n+\n+var canUseCompositionEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'CompositionEvent' in window\n+);\n+\n+var documentMode = null;\n+if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+  documentMode = document.documentMode;\n+}\n+\n+// Webkit offers a very useful `textInput` event that can be used to\n+// directly represent `beforeInput`. The IE `textinput` event is not as\n+// useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document || isPresto())\n+  !documentMode &&\n+  !isPresto()\n+);\n+\n+// In IE9+, we have access to composition events, but the data supplied\n+// by the native compositionend event may be incorrect. Japanese ideographic\n+// spaces, for instance (\\u3000) are not recorded correctly.\n+var useFallbackCompositionData = (\n+  ExecutionEnvironment.canUseDOM &&\n+  (\n+    !canUseCompositionEvent ||\n+    (documentMode && documentMode > 8 && documentMode <= 11)\n+  )\n );\n \n /**\n@@ -56,11 +86,53 @@ var eventTypes = {\n       topLevelTypes.topTextInput,\n       topLevelTypes.topPaste\n     ]\n+  },\n+  compositionEnd: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionEnd: null}),\n+      captured: keyOf({onCompositionEndCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionStart: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionStart: null}),\n+      captured: keyOf({onCompositionStartCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionStart,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionUpdate: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionUpdate: null}),\n+      captured: keyOf({onCompositionUpdateCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionUpdate,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n   }\n };\n \n // Track characters inserted via keypress and composition events.\n-var fallbackChars = null;\n+var fallbackBeforeInputChars = null;\n \n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n@@ -78,6 +150,298 @@ function isKeypressCommand(nativeEvent) {\n   );\n }\n \n+\n+/**\n+ * Translate native top level events into event types.\n+ *\n+ * @param {string} topLevelType\n+ * @return {object}\n+ */\n+function getCompositionEventType(topLevelType) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionStart:\n+      return eventTypes.compositionStart;\n+    case topLevelTypes.topCompositionEnd:\n+      return eventTypes.compositionEnd;\n+    case topLevelTypes.topCompositionUpdate:\n+      return eventTypes.compositionUpdate;\n+  }\n+}\n+\n+/**\n+ * Does our fallback best-guess model think this event signifies that\n+ * composition has begun?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionStart(topLevelType, nativeEvent) {\n+  return (\n+    topLevelType === topLevelTypes.topKeyDown &&\n+    nativeEvent.keyCode === START_KEYCODE\n+  );\n+}\n+\n+/**\n+ * Does our fallback mode think that this event is the end of composition?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topKeyUp:\n+      // Command keys insert or clear IME input.\n+      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n+    case topLevelTypes.topKeyDown:\n+      // Expect IME keyCode on each keydown. If we get any other\n+      // code we must have exited earlier.\n+      return (nativeEvent.keyCode !== START_KEYCODE);\n+    case topLevelTypes.topKeyPress:\n+    case topLevelTypes.topMouseDown:\n+    case topLevelTypes.topBlur:\n+      // Events are not possible without cancelling IME.\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * Google Input Tools provides composition data via a CustomEvent,\n+ * with the `data` property populated in the `detail` object. If this\n+ * is available on the event object, use it. If not, this is a plain\n+ * composition event and we have nothing special to extract.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {?string}\n+ */\n+function getDataFromCustomEvent(nativeEvent) {\n+  var detail = nativeEvent.detail;\n+  if (typeof detail === 'object' && 'data' in detail) {\n+    return detail.data;\n+  }\n+  return null;\n+}\n+\n+// Track the current IME composition fallback object, if any.\n+var currentComposition = null;\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticCompositionEvent.\n+ */\n+function extractCompositionEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var eventType;\n+  var fallbackData;\n+\n+  if (canUseCompositionEvent) {\n+    eventType = getCompositionEventType(topLevelType);\n+  } else if (!currentComposition) {\n+    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+      eventType = eventTypes.compositionStart;\n+    }\n+  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+    eventType = eventTypes.compositionEnd;\n+  }\n+\n+  if (!eventType) {\n+    return;\n+  }\n+\n+  if (useFallbackCompositionData) {\n+    // The current composition is stored statically and must not be\n+    // overwritten while composition continues.\n+    if (!currentComposition && eventType === eventTypes.compositionStart) {\n+      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+    } else if (eventType === eventTypes.compositionEnd) {\n+      if (currentComposition) {\n+        fallbackData = currentComposition.getData();\n+      }\n+    }\n+  }\n+\n+  var event = SyntheticCompositionEvent.getPooled(\n+    eventType,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  if (fallbackData) {\n+    // Inject data generated from fallback path into the synthetic event.\n+    // This matches the property of native CompositionEventInterface.\n+    event.data = fallbackData;\n+  } else {\n+    var customData = getDataFromCustomEvent(nativeEvent);\n+    if (customData !== null) {\n+      event.data = customData;\n+    }\n+  }\n+\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The string corresponding to this `beforeInput` event.\n+ */\n+function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionEnd:\n+      return getDataFromCustomEvent(nativeEvent);\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * If native `textInput` events are available, our goal is to make\n+       * use of them. However, there is a special case: the spacebar key.\n+       * In Webkit, preventing default on a spacebar `textInput` event\n+       * cancels character insertion, but it *also* causes the browser\n+       * to fall back to its default spacebar behavior of scrolling the\n+       * page.\n+       *\n+       * Tracking at:\n+       * https://code.google.com/p/chromium/issues/detail?id=355103\n+       *\n+       * To avoid this issue, use the keypress event as if no `textInput`\n+       * event is available.\n+       */\n+      var which = nativeEvent.which;\n+      if (which !== SPACEBAR_CODE) {\n+        return null;\n+      }\n+\n+      hasSpaceKeypress = true;\n+      return SPACEBAR_CHAR;\n+\n+    case topLevelTypes.topTextInput:\n+      // Record the characters to be added to the DOM.\n+      var chars = nativeEvent.data;\n+\n+      // If it's a spacebar character, assume that we have already handled\n+      // it at the keypress level and bail immediately. Android Chrome\n+      // doesn't give us keycodes, so we need to blacklist it.\n+      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n+        return null;\n+      }\n+\n+      return chars;\n+\n+    default:\n+      // For other native event types, do nothing.\n+      return null;\n+  }\n+}\n+\n+/**\n+ * For browsers that do not provide the `textInput` event, extract the\n+ * appropriate string to use for SyntheticInputEvent.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The fallback string for this `beforeInput` event.\n+ */\n+function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+  // If we are currently composing (IME) and using a fallback to do so,\n+  // try to extract the composed characters from the fallback object.\n+  if (currentComposition) {\n+    if (\n+      topLevelType === topLevelTypes.topCompositionEnd ||\n+      isFallbackCompositionEnd(topLevelType, nativeEvent)\n+    ) {\n+      var chars = currentComposition.getData();\n+      FallbackCompositionState.release(currentComposition);\n+      currentComposition = null;\n+      return chars;\n+    }\n+    return null;\n+  }\n+\n+  switch (topLevelType) {\n+    case topLevelTypes.topPaste:\n+      // If a paste event occurs after a keypress, throw out the input\n+      // chars. Paste events should not lead to BeforeInput events.\n+      return null;\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * As of v27, Firefox may fire keypress events even when no character\n+       * will be inserted. A few possibilities:\n+       *\n+       * - `which` is `0`. Arrow keys, Esc key, etc.\n+       *\n+       * - `which` is the pressed key code, but no char is available.\n+       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+       *   this key combination and no character is inserted into the\n+       *   document, but FF fires the keypress for char code `100` anyway.\n+       *   No `input` event will occur.\n+       *\n+       * - `which` is the pressed key code, but a command combination is\n+       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+       *   `input` event will occur.\n+       */\n+      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+        return String.fromCharCode(nativeEvent.which);\n+      }\n+      return null;\n+    case topLevelTypes.topCompositionEnd:\n+      return useFallbackCompositionData ? null : nativeEvent.data;\n+    default:\n+      return null;\n+  }\n+}\n+\n+/**\n+ * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n+ * `textInput` or fallback behavior.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticInputEvent.\n+ */\n+function extractBeforeInputEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var chars;\n+\n+  if (canUseTextInputEvent) {\n+    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+  } else {\n+    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+  }\n+\n+  // If no characters are being inserted, no BeforeInput event should\n+  // be fired.\n+  if (!chars) {\n+    return;\n+  }\n+\n+  var event = SyntheticInputEvent.getPooled(\n+    eventTypes.beforeInput,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  event.data = chars;\n+  fallbackBeforeInputChars = null;\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n /**\n  * Create an `onBeforeInput` event to match\n  * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n@@ -91,6 +455,10 @@ function isKeypressCommand(nativeEvent) {\n  * actually been added, contrary to the spec. Thus, `textInput` is the best\n  * available event to identify the characters that have actually been inserted\n  * into the target node.\n+ *\n+ * This plugin is also responsible for emitting `composition` events, thus\n+ * allowing us to share composition fallback code for both `beforeInput` and\n+ * `composition` event types.\n  */\n var BeforeInputEventPlugin = {\n \n@@ -105,115 +473,25 @@ var BeforeInputEventPlugin = {\n    * @see {EventPluginHub.extractEvents}\n    */\n   extractEvents: function(\n-      topLevelType,\n-      topLevelTarget,\n-      topLevelTargetID,\n-      nativeEvent) {\n-\n-    var chars;\n-\n-    if (canUseTextInputEvent) {\n-      switch (topLevelType) {\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * If native `textInput` events are available, our goal is to make\n-           * use of them. However, there is a special case: the spacebar key.\n-           * In Webkit, preventing default on a spacebar `textInput` event\n-           * cancels character insertion, but it *also* causes the browser\n-           * to fall back to its default spacebar behavior of scrolling the\n-           * page.\n-           *\n-           * Tracking at:\n-           * https://code.google.com/p/chromium/issues/detail?id=355103\n-           *\n-           * To avoid this issue, use the keypress event as if no `textInput`\n-           * event is available.\n-           */\n-          var which = nativeEvent.which;\n-          if (which !== SPACEBAR_CODE) {\n-            return;\n-          }\n-\n-          hasSpaceKeypress = true;\n-          chars = SPACEBAR_CHAR;\n-          break;\n-\n-        case topLevelTypes.topTextInput:\n-          // Record the characters to be added to the DOM.\n-          chars = nativeEvent.data;\n-\n-          // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately. Android Chrome\n-          // doesn't give us keycodes, so we need to blacklist it.\n-          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n-            return;\n-          }\n-\n-          // Otherwise, carry on.\n-          break;\n-\n-        default:\n-          // For other native event types, do nothing.\n-          return;\n-      }\n-    } else {\n-      switch (topLevelType) {\n-        case topLevelTypes.topPaste:\n-          // If a paste event occurs after a keypress, throw out the input\n-          // chars. Paste events should not lead to BeforeInput events.\n-          fallbackChars = null;\n-          break;\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * As of v27, Firefox may fire keypress events even when no character\n-           * will be inserted. A few possibilities:\n-           *\n-           * - `which` is `0`. Arrow keys, Esc key, etc.\n-           *\n-           * - `which` is the pressed key code, but no char is available.\n-           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n-           *   this key combination and no character is inserted into the\n-           *   document, but FF fires the keypress for char code `100` anyway.\n-           *   No `input` event will occur.\n-           *\n-           * - `which` is the pressed key code, but a command combination is\n-           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n-           *   `input` event will occur.\n-           */\n-          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-            fallbackChars = String.fromCharCode(nativeEvent.which);\n-          }\n-          break;\n-        case topLevelTypes.topCompositionEnd:\n-          fallbackChars = nativeEvent.data;\n-          break;\n-      }\n-\n-      // If no changes have occurred to the fallback string, no relevant\n-      // event has fired and we're done.\n-      if (fallbackChars === null) {\n-        return;\n-      }\n-\n-      chars = fallbackChars;\n-    }\n-\n-    // If no characters are being inserted, no BeforeInput event should\n-    // be fired.\n-    if (!chars) {\n-      return;\n-    }\n-\n-    var event = SyntheticInputEvent.getPooled(\n-      eventTypes.beforeInput,\n-      topLevelTargetID,\n-      nativeEvent\n-    );\n-\n-    event.data = chars;\n-    fallbackChars = null;\n-    EventPropagators.accumulateTwoPhaseDispatches(event);\n-    return event;\n+    topLevelType,\n+    topLevelTarget,\n+    topLevelTargetID,\n+    nativeEvent\n+  ) {\n+    return [\n+      extractCompositionEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+      extractBeforeInputEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+    ];\n   }\n };\n ",
                "changeType": "modified"
            },
            {
                "commitId": "9ad0e1d846a4fe51f2397333d1df3e0b72d28067",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -34,14 +34,14 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n-// Webkit and Presto offer a very useful `textInput` event that can be used to\n+// Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n-  !isOldPresto()\n+  !isPresto()\n );\n \n // In IE9+, we have access to composition events, but the data supplied\n@@ -59,7 +59,7 @@ var useFallbackCompositionData = (\n  * Opera <= 12 includes TextEvent in window, but does not fire\n  * text input events. Rely on keypress instead.\n  */\n-function isOldPresto() {\n+function isPresto() {\n   var opera = window.opera;\n   return (\n     typeof opera === 'object' &&",
                "changeType": "modified"
            },
            {
                "commitId": "ddaf215b03cee506c907474578c950367b344062",
                "additions": 390,
                "deletions": 112,
                "patch": "@@ -15,21 +15,51 @@\n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n+var FallbackCompositionState = require('FallbackCompositionState');\n+var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+var START_KEYCODE = 229;\n+\n+var canUseCompositionEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'CompositionEvent' in window\n+);\n+\n+var documentMode = null;\n+if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+  documentMode = document.documentMode;\n+}\n+\n+// Webkit and Presto offer a very useful `textInput` event that can be used to\n+// directly represent `beforeInput`. The IE `textinput` event is not as\n+// useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document || isPresto())\n+  !documentMode &&\n+  !isOldPresto()\n+);\n+\n+// In IE9+, we have access to composition events, but the data supplied\n+// by the native compositionend event may be incorrect. Japanese ideographic\n+// spaces, for instance (\\u3000) are not recorded correctly.\n+var useFallbackCompositionData = (\n+  ExecutionEnvironment.canUseDOM &&\n+  (\n+    !canUseCompositionEvent ||\n+    (documentMode && documentMode > 8 && documentMode <= 11)\n+  )\n );\n \n /**\n  * Opera <= 12 includes TextEvent in window, but does not fire\n  * text input events. Rely on keypress instead.\n  */\n-function isPresto() {\n+function isOldPresto() {\n   var opera = window.opera;\n   return (\n     typeof opera === 'object' &&\n@@ -56,11 +86,53 @@ var eventTypes = {\n       topLevelTypes.topTextInput,\n       topLevelTypes.topPaste\n     ]\n+  },\n+  compositionEnd: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionEnd: null}),\n+      captured: keyOf({onCompositionEndCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionStart: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionStart: null}),\n+      captured: keyOf({onCompositionStartCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionStart,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionUpdate: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionUpdate: null}),\n+      captured: keyOf({onCompositionUpdateCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionUpdate,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n   }\n };\n \n // Track characters inserted via keypress and composition events.\n-var fallbackChars = null;\n+var fallbackBeforeInputChars = null;\n \n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n@@ -78,6 +150,298 @@ function isKeypressCommand(nativeEvent) {\n   );\n }\n \n+\n+/**\n+ * Translate native top level events into event types.\n+ *\n+ * @param {string} topLevelType\n+ * @return {object}\n+ */\n+function getCompositionEventType(topLevelType) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionStart:\n+      return eventTypes.compositionStart;\n+    case topLevelTypes.topCompositionEnd:\n+      return eventTypes.compositionEnd;\n+    case topLevelTypes.topCompositionUpdate:\n+      return eventTypes.compositionUpdate;\n+  }\n+}\n+\n+/**\n+ * Does our fallback best-guess model think this event signifies that\n+ * composition has begun?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionStart(topLevelType, nativeEvent) {\n+  return (\n+    topLevelType === topLevelTypes.topKeyDown &&\n+    nativeEvent.keyCode === START_KEYCODE\n+  );\n+}\n+\n+/**\n+ * Does our fallback mode think that this event is the end of composition?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topKeyUp:\n+      // Command keys insert or clear IME input.\n+      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n+    case topLevelTypes.topKeyDown:\n+      // Expect IME keyCode on each keydown. If we get any other\n+      // code we must have exited earlier.\n+      return (nativeEvent.keyCode !== START_KEYCODE);\n+    case topLevelTypes.topKeyPress:\n+    case topLevelTypes.topMouseDown:\n+    case topLevelTypes.topBlur:\n+      // Events are not possible without cancelling IME.\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * Google Input Tools provides composition data via a CustomEvent,\n+ * with the `data` property populated in the `detail` object. If this\n+ * is available on the event object, use it. If not, this is a plain\n+ * composition event and we have nothing special to extract.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {?string}\n+ */\n+function getDataFromCustomEvent(nativeEvent) {\n+  var detail = nativeEvent.detail;\n+  if (typeof detail === 'object' && 'data' in detail) {\n+    return detail.data;\n+  }\n+  return null;\n+}\n+\n+// Track the current IME composition fallback object, if any.\n+var currentComposition = null;\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticCompositionEvent.\n+ */\n+function extractCompositionEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var eventType;\n+  var fallbackData;\n+\n+  if (canUseCompositionEvent) {\n+    eventType = getCompositionEventType(topLevelType);\n+  } else if (!currentComposition) {\n+    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+      eventType = eventTypes.compositionStart;\n+    }\n+  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+    eventType = eventTypes.compositionEnd;\n+  }\n+\n+  if (!eventType) {\n+    return;\n+  }\n+\n+  if (useFallbackCompositionData) {\n+    // The current composition is stored statically and must not be\n+    // overwritten while composition continues.\n+    if (!currentComposition && eventType === eventTypes.compositionStart) {\n+      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+    } else if (eventType === eventTypes.compositionEnd) {\n+      if (currentComposition) {\n+        fallbackData = currentComposition.getData();\n+      }\n+    }\n+  }\n+\n+  var event = SyntheticCompositionEvent.getPooled(\n+    eventType,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  if (fallbackData) {\n+    // Inject data generated from fallback path into the synthetic event.\n+    // This matches the property of native CompositionEventInterface.\n+    event.data = fallbackData;\n+  } else {\n+    var customData = getDataFromCustomEvent(nativeEvent);\n+    if (customData !== null) {\n+      event.data = customData;\n+    }\n+  }\n+\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The string corresponding to this `beforeInput` event.\n+ */\n+function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionEnd:\n+      return getDataFromCustomEvent(nativeEvent);\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * If native `textInput` events are available, our goal is to make\n+       * use of them. However, there is a special case: the spacebar key.\n+       * In Webkit, preventing default on a spacebar `textInput` event\n+       * cancels character insertion, but it *also* causes the browser\n+       * to fall back to its default spacebar behavior of scrolling the\n+       * page.\n+       *\n+       * Tracking at:\n+       * https://code.google.com/p/chromium/issues/detail?id=355103\n+       *\n+       * To avoid this issue, use the keypress event as if no `textInput`\n+       * event is available.\n+       */\n+      var which = nativeEvent.which;\n+      if (which !== SPACEBAR_CODE) {\n+        return null;\n+      }\n+\n+      hasSpaceKeypress = true;\n+      return SPACEBAR_CHAR;\n+\n+    case topLevelTypes.topTextInput:\n+      // Record the characters to be added to the DOM.\n+      var chars = nativeEvent.data;\n+\n+      // If it's a spacebar character, assume that we have already handled\n+      // it at the keypress level and bail immediately. Android Chrome\n+      // doesn't give us keycodes, so we need to blacklist it.\n+      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n+        return null;\n+      }\n+\n+      return chars;\n+\n+    default:\n+      // For other native event types, do nothing.\n+      return null;\n+  }\n+}\n+\n+/**\n+ * For browsers that do not provide the `textInput` event, extract the\n+ * appropriate string to use for SyntheticInputEvent.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The fallback string for this `beforeInput` event.\n+ */\n+function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+  // If we are currently composing (IME) and using a fallback to do so,\n+  // try to extract the composed characters from the fallback object.\n+  if (currentComposition) {\n+    if (\n+      topLevelType === topLevelTypes.topCompositionEnd ||\n+      isFallbackCompositionEnd(topLevelType, nativeEvent)\n+    ) {\n+      var chars = currentComposition.getData();\n+      FallbackCompositionState.release(currentComposition);\n+      currentComposition = null;\n+      return chars;\n+    }\n+    return null;\n+  }\n+\n+  switch (topLevelType) {\n+    case topLevelTypes.topPaste:\n+      // If a paste event occurs after a keypress, throw out the input\n+      // chars. Paste events should not lead to BeforeInput events.\n+      return null;\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * As of v27, Firefox may fire keypress events even when no character\n+       * will be inserted. A few possibilities:\n+       *\n+       * - `which` is `0`. Arrow keys, Esc key, etc.\n+       *\n+       * - `which` is the pressed key code, but no char is available.\n+       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+       *   this key combination and no character is inserted into the\n+       *   document, but FF fires the keypress for char code `100` anyway.\n+       *   No `input` event will occur.\n+       *\n+       * - `which` is the pressed key code, but a command combination is\n+       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+       *   `input` event will occur.\n+       */\n+      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+        return String.fromCharCode(nativeEvent.which);\n+      }\n+      return null;\n+    case topLevelTypes.topCompositionEnd:\n+      return useFallbackCompositionData ? null : nativeEvent.data;\n+    default:\n+      return null;\n+  }\n+}\n+\n+/**\n+ * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n+ * `textInput` or fallback behavior.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticInputEvent.\n+ */\n+function extractBeforeInputEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var chars;\n+\n+  if (canUseTextInputEvent) {\n+    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+  } else {\n+    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+  }\n+\n+  // If no characters are being inserted, no BeforeInput event should\n+  // be fired.\n+  if (!chars) {\n+    return;\n+  }\n+\n+  var event = SyntheticInputEvent.getPooled(\n+    eventTypes.beforeInput,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  event.data = chars;\n+  fallbackBeforeInputChars = null;\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n /**\n  * Create an `onBeforeInput` event to match\n  * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n@@ -91,6 +455,10 @@ function isKeypressCommand(nativeEvent) {\n  * actually been added, contrary to the spec. Thus, `textInput` is the best\n  * available event to identify the characters that have actually been inserted\n  * into the target node.\n+ *\n+ * This plugin is also responsible for emitting `composition` events, thus\n+ * allowing us to share composition fallback code for both `beforeInput` and\n+ * `composition` event types.\n  */\n var BeforeInputEventPlugin = {\n \n@@ -105,115 +473,25 @@ var BeforeInputEventPlugin = {\n    * @see {EventPluginHub.extractEvents}\n    */\n   extractEvents: function(\n-      topLevelType,\n-      topLevelTarget,\n-      topLevelTargetID,\n-      nativeEvent) {\n-\n-    var chars;\n-\n-    if (canUseTextInputEvent) {\n-      switch (topLevelType) {\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * If native `textInput` events are available, our goal is to make\n-           * use of them. However, there is a special case: the spacebar key.\n-           * In Webkit, preventing default on a spacebar `textInput` event\n-           * cancels character insertion, but it *also* causes the browser\n-           * to fall back to its default spacebar behavior of scrolling the\n-           * page.\n-           *\n-           * Tracking at:\n-           * https://code.google.com/p/chromium/issues/detail?id=355103\n-           *\n-           * To avoid this issue, use the keypress event as if no `textInput`\n-           * event is available.\n-           */\n-          var which = nativeEvent.which;\n-          if (which !== SPACEBAR_CODE) {\n-            return;\n-          }\n-\n-          hasSpaceKeypress = true;\n-          chars = SPACEBAR_CHAR;\n-          break;\n-\n-        case topLevelTypes.topTextInput:\n-          // Record the characters to be added to the DOM.\n-          chars = nativeEvent.data;\n-\n-          // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately. Android Chrome\n-          // doesn't give us keycodes, so we need to blacklist it.\n-          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n-            return;\n-          }\n-\n-          // Otherwise, carry on.\n-          break;\n-\n-        default:\n-          // For other native event types, do nothing.\n-          return;\n-      }\n-    } else {\n-      switch (topLevelType) {\n-        case topLevelTypes.topPaste:\n-          // If a paste event occurs after a keypress, throw out the input\n-          // chars. Paste events should not lead to BeforeInput events.\n-          fallbackChars = null;\n-          break;\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * As of v27, Firefox may fire keypress events even when no character\n-           * will be inserted. A few possibilities:\n-           *\n-           * - `which` is `0`. Arrow keys, Esc key, etc.\n-           *\n-           * - `which` is the pressed key code, but no char is available.\n-           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n-           *   this key combination and no character is inserted into the\n-           *   document, but FF fires the keypress for char code `100` anyway.\n-           *   No `input` event will occur.\n-           *\n-           * - `which` is the pressed key code, but a command combination is\n-           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n-           *   `input` event will occur.\n-           */\n-          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-            fallbackChars = String.fromCharCode(nativeEvent.which);\n-          }\n-          break;\n-        case topLevelTypes.topCompositionEnd:\n-          fallbackChars = nativeEvent.data;\n-          break;\n-      }\n-\n-      // If no changes have occurred to the fallback string, no relevant\n-      // event has fired and we're done.\n-      if (fallbackChars === null) {\n-        return;\n-      }\n-\n-      chars = fallbackChars;\n-    }\n-\n-    // If no characters are being inserted, no BeforeInput event should\n-    // be fired.\n-    if (!chars) {\n-      return;\n-    }\n-\n-    var event = SyntheticInputEvent.getPooled(\n-      eventTypes.beforeInput,\n-      topLevelTargetID,\n-      nativeEvent\n-    );\n-\n-    event.data = chars;\n-    fallbackChars = null;\n-    EventPropagators.accumulateTwoPhaseDispatches(event);\n-    return event;\n+    topLevelType,\n+    topLevelTarget,\n+    topLevelTargetID,\n+    nativeEvent\n+  ) {\n+    return [\n+      extractCompositionEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+      extractBeforeInputEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+    ];\n   }\n };\n ",
                "changeType": "modified"
            },
            {
                "commitId": "b5bcaba77fbe53cafd7c5f6b76752b09791caadf",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only",
                "changeType": "modified"
            },
            {
                "commitId": "5d3b12bb3bd6a092cf00ede07b8255a8399c2e58",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only",
                "changeType": "modified"
            },
            {
                "commitId": "dcf415c2b91ce52fd5d4dd02b70875ba9d33290f",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only",
                "changeType": "modified"
            },
            {
                "commitId": "f71455fb319d1daf5a04cc03357fcd185d9f72ec",
                "additions": 8,
                "deletions": 3,
                "patch": "@@ -69,6 +69,9 @@ var eventTypes = {\n // Track characters inserted via keypress and composition events.\n var fallbackChars = null;\n \n+// Track whether we've ever handled a keypress on the space key.\n+var hasSpaceKeypress = false;\n+\n /**\n  * Return whether a native keypress event is assumed to be a command.\n  * This is required because Firefox fires `keypress` events for key commands\n@@ -138,16 +141,18 @@ var BeforeInputEventPlugin = {\n             return;\n           }\n \n-          chars = String.fromCharCode(which);\n+          hasSpaceKeypress = true;\n+          chars = SPACEBAR_CHAR;\n           break;\n \n         case topLevelTypes.topTextInput:\n           // Record the characters to be added to the DOM.\n           chars = nativeEvent.data;\n \n           // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately.\n-          if (chars === SPACEBAR_CHAR) {\n+          // it at the keypress level and bail immediately. Android Chrome\n+          // doesn't give us keycodes, so we need to blacklist it.\n+          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n             return;\n           }\n ",
                "changeType": "modified"
            },
            {
                "commitId": "468007612f4a6dabb228618d9a3274f067fc2c51",
                "additions": 14,
                "deletions": 1,
                "patch": "@@ -29,9 +29,22 @@ var keyOf = require('keyOf');\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document)\n+  !('documentMode' in document || isPresto())\n );\n \n+/**\n+ * Opera <= 12 includes TextEvent in window, but does not fire\n+ * text input events. Rely on keypress instead.\n+ */\n+function isPresto() {\n+  var opera = window.opera;\n+  return (\n+    typeof opera === 'object' &&\n+    typeof opera.version === 'function' &&\n+    parseInt(opera.version(), 10) <= 12\n+  );\n+}\n+\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n ",
                "changeType": "modified"
            },
            {
                "commitId": "807e3dc42375fbc15c41c847a38acfd518fba7a1",
                "additions": 14,
                "deletions": 1,
                "patch": "@@ -29,9 +29,22 @@ var keyOf = require('keyOf');\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document)\n+  !('documentMode' in document || isPresto())\n );\n \n+/**\n+ * Opera <= 12 includes TextEvent in window, but does not fire\n+ * text input events. Rely on keypress instead.\n+ */\n+function isPresto() {\n+  var opera = window.opera;\n+  return (\n+    typeof opera === 'object' &&\n+    typeof opera.version === 'function' &&\n+    parseInt(opera.version(), 10) <= 12\n+  );\n+}\n+\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n ",
                "changeType": "modified"
            },
            {
                "commitId": "5476f9168beadda74506d37fd779e7e4bca0bc1c",
                "additions": 45,
                "deletions": 7,
                "patch": "@@ -26,12 +26,15 @@ var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n-var useBeforeInputEvent = (\n+var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !('documentMode' in document)\n );\n \n+var SPACEBAR_CODE = 32;\n+var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n+\n var topLevelTypes = EventConstants.topLevelTypes;\n \n // Events and their corresponding property names.\n@@ -100,13 +103,48 @@ var BeforeInputEventPlugin = {\n \n     var chars;\n \n-    if (useBeforeInputEvent) {\n-      // For browsers that support `textInput` events natively, don't do\n-      // anything with keypress, composition, etc.\n-      if (topLevelType !== topLevelTypes.topTextInput) {\n-        return;\n+    if (canUseTextInputEvent) {\n+      switch (topLevelType) {\n+        case topLevelTypes.topKeyPress:\n+          /**\n+           * If native `textInput` events are available, our goal is to make\n+           * use of them. However, there is a special case: the spacebar key.\n+           * In Webkit, preventing default on a spacebar `textInput` event\n+           * cancels character insertion, but it *also* causes the browser\n+           * to fall back to its default spacebar behavior of scrolling the\n+           * page.\n+           *\n+           * Tracking at:\n+           * https://code.google.com/p/chromium/issues/detail?id=355103\n+           *\n+           * To avoid this issue, use the keypress event as if no `textInput`\n+           * event is available.\n+           */\n+          var which = nativeEvent.which;\n+          if (which !== SPACEBAR_CODE) {\n+            return;\n+          }\n+\n+          chars = String.fromCharCode(which);\n+          break;\n+\n+        case topLevelTypes.topTextInput:\n+          // Record the characters to be added to the DOM.\n+          chars = nativeEvent.data;\n+\n+          // If it's a spacebar character, assume that we have already handled\n+          // it at the keypress level and bail immediately.\n+          if (chars === SPACEBAR_CHAR) {\n+            return;\n+          }\n+\n+          // Otherwise, carry on.\n+          break;\n+\n+        default:\n+          // For other native event types, do nothing.\n+          return;\n       }\n-      chars = nativeEvent.data;\n     } else {\n       switch (topLevelType) {\n         case topLevelTypes.topPaste:",
                "changeType": "modified"
            },
            {
                "commitId": "116ee058ebd76071a8aefcd95254f772ec18605f",
                "additions": 171,
                "deletions": 0,
                "patch": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright 2013 Facebook, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * @providesModule BeforeInputEventPlugin\n+ * @typechecks static-only\n+ */\n+\n+\"use strict\";\n+\n+var EventConstants = require('EventConstants');\n+var EventPropagators = require('EventPropagators');\n+var ExecutionEnvironment = require('ExecutionEnvironment');\n+var SyntheticInputEvent = require('SyntheticInputEvent');\n+\n+var keyOf = require('keyOf');\n+\n+var useBeforeInputEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'TextEvent' in window &&\n+  !('documentMode' in document)\n+);\n+\n+var topLevelTypes = EventConstants.topLevelTypes;\n+\n+// Events and their corresponding property names.\n+var eventTypes = {\n+  beforeInput: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onBeforeInput: null}),\n+      captured: keyOf({onBeforeInputCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topTextInput,\n+      topLevelTypes.topPaste\n+    ]\n+  }\n+};\n+\n+// Track characters inserted via keypress and composition events.\n+var fallbackChars = null;\n+\n+/**\n+ * Return whether a native keypress event is assumed to be a command.\n+ * This is required because Firefox fires `keypress` events for key commands\n+ * (cut, copy, select-all, etc.) even though no character is inserted.\n+ */\n+function isKeypressCommand(nativeEvent) {\n+  return (\n+    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n+    // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n+    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n+  );\n+}\n+\n+/**\n+ * Create an `onBeforeInput` event to match\n+ * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n+ *\n+ * This event plugin is based on the native `textInput` event\n+ * available in Chrome, Safari, Opera, and IE. This event fires after\n+ * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n+ *\n+ * `beforeInput` is spec'd but not implemented in any browsers, and\n+ * the `input` event does not provide any useful information about what has\n+ * actually been added, contrary to the spec. Thus, `textInput` is the best\n+ * available event to identify the characters that have actually been inserted\n+ * into the target node.\n+ */\n+var BeforeInputEventPlugin = {\n+\n+  eventTypes: eventTypes,\n+\n+  /**\n+   * @param {string} topLevelType Record from `EventConstants`.\n+   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+   * @param {object} nativeEvent Native browser event.\n+   * @return {*} An accumulation of synthetic events.\n+   * @see {EventPluginHub.extractEvents}\n+   */\n+  extractEvents: function(\n+      topLevelType,\n+      topLevelTarget,\n+      topLevelTargetID,\n+      nativeEvent) {\n+\n+    var chars;\n+\n+    if (useBeforeInputEvent) {\n+      // For browsers that support `textInput` events natively, don't do\n+      // anything with keypress, composition, etc.\n+      if (topLevelType !== topLevelTypes.topTextInput) {\n+        return;\n+      }\n+      chars = nativeEvent.data;\n+    } else {\n+      switch (topLevelType) {\n+        case topLevelTypes.topPaste:\n+          // If a paste event occurs after a keypress, throw out the input\n+          // chars. Paste events should not lead to BeforeInput events.\n+          fallbackChars = null;\n+          break;\n+        case topLevelTypes.topKeyPress:\n+          /**\n+           * As of v27, Firefox may fire keypress events even when no character\n+           * will be inserted. A few possibilities:\n+           *\n+           * - `which` is `0`. Arrow keys, Esc key, etc.\n+           *\n+           * - `which` is the pressed key code, but no char is available.\n+           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+           *   this key combination and no character is inserted into the\n+           *   document, but FF fires the keypress for char code `100` anyway.\n+           *   No `input` event will occur.\n+           *\n+           * - `which` is the pressed key code, but a command combination is\n+           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+           *   `input` event will occur.\n+           */\n+          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+            fallbackChars = String.fromCharCode(nativeEvent.which);\n+          }\n+          break;\n+        case topLevelTypes.topCompositionEnd:\n+          fallbackChars = nativeEvent.data;\n+          break;\n+      }\n+\n+      // If no changes have occurred to the fallback string, no relevant\n+      // event has fired and we're done.\n+      if (fallbackChars === null) {\n+        return;\n+      }\n+\n+      chars = fallbackChars;\n+    }\n+\n+    // If no characters are being inserted, no BeforeInput event should\n+    // be fired.\n+    if (!chars) {\n+      return;\n+    }\n+\n+    var event = SyntheticInputEvent.getPooled(\n+      eventTypes.beforeInput,\n+      topLevelTargetID,\n+      nativeEvent\n+    );\n+\n+    event.data = chars;\n+    fallbackChars = null;\n+    EventPropagators.accumulateTwoPhaseDispatches(event);\n+    return event;\n+  }\n+};\n+\n+module.exports = BeforeInputEventPlugin;",
                "changeType": "added"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "give me all the commits for React.js file?",
        "number": 6,
        "category": 2,
        "response": "Here are the commits related to the `React.js` file:\n\n1. **Commit ID:** ce2bc58a9f6f3b0bfc8c738a0d8e2a5f3a332ff5  \n   **Message:** \"[activity] rename unstable_Offscreen to unstable_Activity (#27640)  \n   `Activity` is the current candidate name. This PR starts the rename work by renaming the exported unstable component name.  \n   NOTE: downstream consumers need to rename the import when updating to this commit.\"  \n   **Committed Date:** 2023-11-02T20:13:21Z\n\n2. **Commit ID:** bfefb228422f7264a29b3a6b98ec95e05925e80e  \n   **Message:** \"Upgrade Server Actions to canary (#27459)  \n   Upgrades the stability of Server Actions from experimental to canary.  \n   - Turns on enableAsyncActions and enableFormActions  \n   - Removes \"experimental_\" prefix from useOptimistic, useFormStatus, and useFormState\"  \n   **Committed Date:** 2023-10-04T18:51:36Z\n\n3. **Commit ID:** c7ba8c098889b6dc47fa9c807bbba3975a658584  \n   **Message:** \"Enforce that the \"react-server\" build of \"react\" is used (#27436)  \n   I do this by simply renaming the secret export name in the \"subset\" bundle and this renamed version is what the FlightServer uses.  \n   This requires us to be more diligent about always using the correct instance of \"react\" in our tests so there's a bunch of clean up for that.\"  \n   **Committed Date:** 2023-09-29T22:24:05Z\n\n4. **Commit ID:** ac1a16c67e268fcb2c52e91717cbc918c7c24446  \n   **Message:** \"Add Postpone API (#27238)  \n   This adds an experimental `unstable_postpone(reason)` API.  \n   Currently, we don't have a way to model effectively an Infinite Promise. I.e. something that suspends but never resolves. The reason this is useful is because you might have something else that unblocks it later. E.g. by updating in place later, or by client rendering.\"  \n   **Committed Date:** 2023-08-17T17:26:14Z\n\n5. **Commit ID:** eb2c2f7c2cf2652a168c2b433d2989131c69754b  \n   **Message:** \"rename SuspenseList export to unstable_SuspenseList (#27061)  \n   ## Summary  \n   as we began [discussing yesterday](https://github.com/facebook/react/pull/27056#discussion_r1253282784), `SuspenseList` is not actually stable yet, and should likely be exported with the `unstable_` prefix.  \n   the conversation yesterday began discussing this in the context of the fb-specific packages, but changing it there without updating everywhere else leads to test failures, so here the change is made across packages.\"  \n   **Committed Date:** 2023-07-06T18:09:53Z\n\n6. **Commit ID:** 80d9a40114bb43c07d021e8254790852f450bd2b  \n   **Message:** \"Remove useMutableSource (#27011)  \n   ## Summary  \n   This PR cleans up `useMutableSource`. This has been blocked by a remaining dependency internally at Meta, but that has now been deleted.\"  \n   **Committed Date:** 2023-06-27T16:45:46Z\n\n7. **Commit ID:** b7972822b5887d05ae772ef757a453265b4b7aec  \n   **Message:** \"useOptimisticState -> useOptimistic (#26772)  \n   Drop the \"state\". Just \"useOptimistic\". It's cleaner.  \n   This is still an experimental API. May not be the final name.\"  \n   **Committed Date:** 2023-05-03T18:26:00Z\n\n8. **Commit ID:** 491aec5d6113ce5bae7c10966bc38a4a8fc091a8  \n   **Message:** \"Implement experimental_useOptimisticState (#26740)  \n   This adds an experimental hook tentatively called useOptimisticState. (The actual name needs some bikeshedding.)  \n   The headline feature is that you can use it to implement optimistic updates. If you set some optimistic state during a transition/action, the state will be automatically reverted once the transition completes.\"  \n   **Committed Date:** 2023-05-01T17:19:20Z\n\n9. **Commit ID:** 84a0a171ea0ecd25e287bd3d3dd30e932beb4677  \n   **Message:** \"Rename experimental useEvent to useEffectEvent (#25881)  \n   We originally had grand plans for using this Event concept for more but now it's only meant to be used in combination with effects.  \n   It's an Event in the FRP terms, that is triggered from an Effect.\"  \n   **Committed Date:** 2022-12-14T20:08:29Z\n\n10. **Commit ID:** e7c5af45ceb8fa2b64d39ec68345254ce9abd65e  \n    **Message:** \"Update cache() and use() to the canary aka next channel (#25502)  \n    Testing what it would look like to move this to the `next` channel.\"  \n    **Committed Date:** 2022-10-24T03:20:52Z",
        "chain_of_thought": "To address the question, \"give me all the commits for React.js file,\" we need to identify the relevant nodes and relationships in the schema. The file in question is \"React.js,\" which corresponds to the File node. We are interested in finding all the commits that have modified this file. The relevant relationship between Commit and File is the changed relationship, which indicates that a commit has modified a file.\n\nHere's how we can construct the Cypher query:\n\n1. Identify the File node with the name \"React.js.\"\n2. Find all Commit nodes that have a changed relationship with this File node.\n\nThe query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'React.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\nORDER BY committedDate DESC\n```\n\nThis query will return all commits that have modified the \"React.js\" file, along with their commit IDs, messages, and committed dates, sorted by the committed date in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'React.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\nORDER BY committedDate DESC\n",
        "result": [
            {
                "commitId": "ce2bc58a9f6f3b0bfc8c738a0d8e2a5f3a332ff5",
                "commitMessage": "\"[activity] rename unstable_Offscreen to unstable_Activity (#27640)\n\n`Activity` is the current candidate name. This PR starts the rename work\r\nby renaming the exported unstable component name.\r\n\r\nNOTE: downstream consumers need to rename the import when updating to\r\nthis commit.\"",
                "committedDate": "2023-11-02T20:13:21Z"
            },
            {
                "commitId": "bfefb228422f7264a29b3a6b98ec95e05925e80e",
                "commitMessage": "\"Upgrade Server Actions to canary (#27459)\n\nUpgrades the stability of Server Actions from experimental to canary.\r\n\r\n- Turns on enableAsyncActions and enableFormActions\r\n- Removes \"experimental_\" prefix from useOptimistic, useFormStatus, and\r\nuseFormState\"",
                "committedDate": "2023-10-04T18:51:36Z"
            },
            {
                "commitId": "c7ba8c098889b6dc47fa9c807bbba3975a658584",
                "commitMessage": "\"Enforce that the \"react-server\" build of \"react\" is used (#27436)\n\nI do this by simply renaming the secret export name in the \"subset\"\r\nbundle and this renamed version is what the FlightServer uses.\r\n\r\nThis requires us to be more diligent about always using the correct\r\ninstance of \"react\" in our tests so theres a bunch of clean up for\r\nthat.\"",
                "committedDate": "2023-09-29T22:24:05Z"
            },
            {
                "commitId": "ac1a16c67e268fcb2c52e91717cbc918c7c24446",
                "commitMessage": "\"Add Postpone API (#27238)\n\nThis adds an experimental `unstable_postpone(reason)` API.\r\n\r\nCurrently we dont have a way to model effectively an Infinite Promise.\r\nI.e. something that suspends but never resolves. The reason this is\r\nuseful is because you might have something else that unblocks it later.\r\nE.g. by updating in place later, or by client rendering.\r\n\r\nOn the client this works to model as an Infinite Promise (in fact,\r\nthats what this implementation does). However, in Fizz and Flight that\r\ndoesnt work because the stream needs to end at some point. We dont\r\nhave any way of knowing that were suspended on infinite promises. Its\r\nnot enough to tag the promises because you could await those and thus\r\ncreating new promises. The only way we really have to signal this\r\nthrough a series of indirections like async functions, is by throwing.\r\nIts not 100% safe because these values can be caught but its the best\r\nwe can do.\r\n\r\nEffectively `postpone(reason)` behaves like a built-in [Catch\r\nBoundary](https://github.com/facebook/react/pull/26854). Its like\r\n`raise(Postpone, reason)` except its built-in so it needs to be able to\r\nbe encoded and caught by Suspense boundaries.\r\n\r\nIn Flight and Fizz these behave pretty much the same as errors. Flight\r\njust forwards it to retrigger on the client. In Fizz they just trigger\r\nclient rendering which itself might just postpone again or fill in the\r\nvalue. The difference is how they get logged.\r\n\r\nIn Flight and Fizz they log to `onPostpone(reason)` instead of\r\n`onError(error)`. This log is meant to help find deopts on the server\r\nlike finding places where you fall back to client rendering. The reason\r\nthat you pass in is for that purpose to help the reason for any deopts.\r\n\r\nI do track the stack trace in DEV but I dont currently expose it to\r\n`onPostpone`. This seems like a limitation. It might be better to expose\r\nthe Postpone object which is an Error object but thats more of an\r\nimplementation detail. I could also pass it as a second argument.\r\n\r\nOn the client after hydration they dont get passed to\r\n`onRecoverableError`. Theres no global `onPostpone` API to capture\r\npostponed things on the client just like theres no `onError`. At that\r\npoint its just assumed to be intentional. It doesnt have any `digest`\r\nor reason passed to the client since its not logged.\r\n\r\nThere are some hacky solutions that currently just tries to reuse as\r\nmuch of the existing code as possible but should be more properly\r\nimplemented.\r\n- Fiber is currently just converting it to a fake Promise object so that\r\nit behaves like an infinite Promise.\r\n- Fizz is encoding the magic digest string `\"POSTPONE\"` in the HTML so\r\nwe know to ignore it but it should probably just be something neater\r\nthat doesnt share namespace with digests.\r\n\r\nNext I plan on using this in the `/static` entry points for additional\r\nfeatures.\r\n\r\nWhy \"postpone\"? Its basically a synonym to \"defer\" but we plan on using\r\n\"defer\" for other purposes and its overloaded anyway.\"",
                "committedDate": "2023-08-17T17:26:14Z"
            },
            {
                "commitId": "eb2c2f7c2cf2652a168c2b433d2989131c69754b",
                "commitMessage": "\"rename SuspenseList export to unstable_SuspenseList (#27061)\n\n## Summary\r\n\r\nas we began [discussing\r\nyesterday](https://github.com/facebook/react/pull/27056#discussion_r1253282784),\r\n`SuspenseList` is not actually stable yet, and should likely be exported\r\nwith the `unstable_` prefix.\r\n\r\nthe conversation yesterday began discussing this in the context of the\r\nfb-specific packages, but changing it there without updating everywhere\r\nelse leads to test failures, so here the change is made across packages.\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn flow dom-browser\r\nyarn test\r\n```\"",
                "committedDate": "2023-07-06T18:09:53Z"
            },
            {
                "commitId": "80d9a40114bb43c07d021e8254790852f450bd2b",
                "commitMessage": "\"Remove useMutableSource (#27011)\n\n## Summary\r\n\r\nThis PR cleans up `useMutableSource`. This has been blocked by a\r\nremaining dependency internally at Meta, but that has now been deleted.\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn flow\r\nyarn lint\r\nyarn test --prod\r\n```\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\"",
                "committedDate": "2023-06-27T16:45:46Z"
            },
            {
                "commitId": "b7972822b5887d05ae772ef757a453265b4b7aec",
                "commitMessage": "\"useOptimisticState -> useOptimistic (#26772)\n\nDrop the \"state\". Just \"useOptimistic\". Its cleaner.\r\n\r\nThis is still an experimental API. May not be the final name.\"",
                "committedDate": "2023-05-03T18:26:00Z"
            },
            {
                "commitId": "491aec5d6113ce5bae7c10966bc38a4a8fc091a8",
                "commitMessage": "\"Implement experimental_useOptimisticState (#26740)\n\nThis adds an experimental hook tentatively called useOptimisticState.\r\n(The actual name needs some bikeshedding.)\r\n\r\nThe headline feature is that you can use it to implement optimistic\r\nupdates. If you set some optimistic state during a transition/action,\r\nthe state will be automatically reverted once the transition completes.\r\n\r\nAnother feature is that the optimistic updates will be continually\r\nrebased on top of the latest state.\r\n\r\nIts easiest to explain with examples; well publish documentation as\r\nthe API gets closer to stabilizing. See tests for now.\r\n\r\nTechnically the use cases for this hook are broader than just optimistic\r\nupdates; you could use it implement any sort of \"pending\" state, such as\r\nthe ones exposed by useTransition and useFormStatus. But we expect\r\npeople will most often reach for this hook to implement the optimistic\r\nupdate pattern; simpler cases are covered by those other hooks.\"",
                "committedDate": "2023-05-01T17:19:20Z"
            },
            {
                "commitId": "84a0a171ea0ecd25e287bd3d3dd30e932beb4677",
                "commitMessage": "\"Rename experimental useEvent to useEffectEvent (#25881)\n\nWe originally had grand plans for using this Event concept for more but\r\nnow its only meant to be used in combination with effects.\r\n\r\nIts an Event in the FRP terms, that is triggered from an Effect.\r\nTechnically it can also be from another function that itself is\r\ntriggered from an existing side-effect but thats kind of an advanced\r\ncase.\r\n\r\nThe canonical case is an effect that triggers an event:\r\n\r\n```js\r\nconst onHappened = useEffectEvent(() => ...);\r\nuseEffect(() => {\r\n  onHappened();\r\n}, []);\r\n```\"",
                "committedDate": "2022-12-14T20:08:29Z"
            },
            {
                "commitId": "e7c5af45ceb8fa2b64d39ec68345254ce9abd65e",
                "commitMessage": "\"Update cache() and use() to the canary aka next channel (#25502)\n\nTesting what it would look like to move this to the `next` channel.\"",
                "committedDate": "2022-10-24T03:20:52Z"
            },
            {
                "commitId": "caa84c8da0aed390ec25783e577d91711dfd6bcc",
                "commitMessage": "\"Revert fetch instrumentation to only RSC (#25540)\n\nRevert fetch instrumentation so that it only affects RSC by applying it\r\nonly in the react-server condition of \"react\".\r\n\r\nThis helps make the rollout a little smoother because these affects\r\nexisting libraries that fetch during client components, and then gets\r\nforever cached. We need to implement the GC first.\r\n\r\nI havent fully implemented the SSR part anyway.\r\n\r\nThe main problem that we discovered is that `\"react\"` and\r\n`\"react/react.shared-subset\"` have separate dispatchers in an\r\nenvironment that runs both Fizz and Flight. Thats intentional and\r\nsometimes a feature. However, in this case it means that we instrument\r\nfetch twice and when you run Flight inside Fizz, that fetch goes into\r\nboth caches when its supposed to only see the inner one. Im not sure\r\nhow to solve that atm.\"",
                "committedDate": "2022-10-23T02:58:30Z"
            },
            {
                "commitId": "65e32e58b6057db1fdfed95a942fad4fc96da191",
                "commitMessage": "\"Add fetch Instrumentation to Dedupe Fetches (#25516)\n\n* Add fetch instrumentation in cached contexts\r\n\r\n* Avoid unhandled rejection errors for Promises that we intentionally ignore\r\n\r\nIn the final passes, we ignore the newly generated Promises and use\r\nthe previous ones. This ensures that if those generate errors, that we\r\nintentionally ignore those.\r\n\r\n* Add extra fetch properties if there were any\"",
                "committedDate": "2022-10-19T22:37:00Z"
            },
            {
                "commitId": "8e2bde6f2751aa6335f3cef488c05c3ea08e074a",
                "commitMessage": "\"Add cache() API (#25506)\n\nLike memo() but longer lived.\"",
                "committedDate": "2022-10-18T20:55:06Z"
            },
            {
                "commitId": "0a3072278ee5fb46ddb58e6f5ba9e2b78f6f715a",
                "commitMessage": "\"Flow: complete types first migration (#25389)\n\nThis complete the \"types first\" migration and enables the config everywhere.\"",
                "committedDate": "2022-10-04T01:59:33Z"
            },
            {
                "commitId": "c91a1e03be54733a7dbfcb5663d7a9e8606ab1c1",
                "commitMessage": "\"experimental_useEvent (#25229)\n\nThis commit adds a new hook `useEvent` per the RFC [here](https://github.com/reactjs/rfcs/pull/220), gated as experimental. \r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>\r\nCo-authored-by: Lauren Tan <poteto@users.noreply.github.com>\"",
                "committedDate": "2022-09-14T18:39:06Z"
            },
            {
                "commitId": "b6978bc38f6788c7e73982b9fd2771aabdf36f15",
                "commitMessage": "\"experimental_use(promise) (#25084)\n\n* Internal `act`: Unwrapping resolved promises\r\n\r\nThis update our internal implementation of `act` to support Reacts new\r\nbehavior for unwrapping promises. Like we did with Scheduler, when \r\nsomething suspends, it will yield to the main thread so the microtasks\r\ncan run, then continue in a new task.\r\n\r\nI need to implement the same behavior in the public version of `act`,\r\nbut there are some additional considerations so Ill do that in a\r\nseparate commit.\r\n\r\n* Move throwException to after work loop resumes\r\n\r\nthrowException is the function that finds the nearest boundary and\r\nschedules it for a second render pass. We should only call it right \r\nbefore we unwind the stack \u2014 not if we receive an immediate ping and\r\nrender the fiber again.\r\n\r\nThis was an oversight in 8ef3a7c that I didnt notice because it happens\r\nto mostly work, anyway. What made me notice the mistake is that\r\nthrowException also marks the entire render phase as suspended\r\n(RootDidSuspend or RootDidSuspendWithDelay), which is only supposed to\r\nbe happen if we show a fallback. One consequence was that, in the \r\nRootDidSuspendWithDelay case, the entire commit phase was blocked,\r\nbecause thats the exit status we use to block a bad fallback\r\nfrom appearing.\r\n\r\n* Use expando to check whether promise has resolved\r\n\r\nAdd a `status` expando to a thrown thenable to track when its value has\r\nresolved.\r\n\r\nIn a later step, well also use `value` and `reason` expandos to track\r\nthe resolved value.\r\n\r\nThis is not part of the official JavaScript spec \u2014 think of\r\nit as an extension of the Promise API, or a custom interface that is a\r\nsuperset of Thenable. However, its inspired by the terminology used\r\nby `Promise.allSettled`.\r\n\r\nThe intent is that this will be a public API \u2014 Suspense implementations\r\ncan set these expandos to allow React to unwrap the value synchronously\r\nwithout waiting a microtask.\r\n\r\n* Scaffolding for `experimental_use` hook\r\n\r\nSets up a new experimental hook behind a feature flag, but does not\r\nimplement it yet.\r\n\r\n* use(promise)\r\n\r\nAdds experimental support to Fiber for unwrapping the value of a promise\r\ninside a component. It is not yet implemented for Server Components, \r\nbut that is planned.\r\n\r\nIf promise has already resolved, the value can be unwrapped\r\n\"immediately\" without showing a fallback. The trick we use to implement\r\nthis is to yield to the main thread (literally suspending the work\r\nloop), wait for the microtask queue to drain, then check if the promise\r\nresolved in the meantime. If so, we can resume the last attempted fiber\r\nwithout unwinding the stack. This functionality was implemented in \r\nprevious commits.\r\n\r\nAnother feature is that the promises do not need to be cached between\r\nattempts. Because we assume idempotent execution of components, React\r\nwill track the promises that were used during the previous attempt and\r\nreuse the result. You shouldnt rely on this property, but during\r\ninitial render it mostly just works. Updates are trickier, though,\r\nbecause if you used an uncached promise, we have no way of knowing \r\nwhether the underlying data has changed, so we have to unwrap the\r\npromise every time. It will still work, but its inefficient and can\r\nlead to unnecessary fallbacks if it happens during a discrete update.\r\n\r\nWhen we implement this for Server Components, this will be less of an\r\nissue because there are no updates in that environment. However, its\r\nstill better for performance to cache data requests, so the same\r\nprinciples largely apply.\r\n\r\nThe intention is that this will eventually be the only supported way to\r\nsuspend on arbitrary promises. Throwing a promise directly will\r\nbe deprecated.\"",
                "committedDate": "2022-08-25T18:12:07Z"
            },
            {
                "commitId": "9e67e7a31582079263665fac0391220b99d8bb86",
                "commitMessage": "\"Scaffolding for useMemoCache hook (#25123)\n\n* Scaffolding for useMemoCache hook\r\n* cleanup leftovers from copy/paste of use() diff\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "committedDate": "2022-08-23T08:36:02Z"
            },
            {
                "commitId": "d5f1b067c8bbb826b823d0354a28ba31078b70c0",
                "commitMessage": "\"[ServerContext] Flight support for ServerContext (#23244)\n\n* Flight side of server context\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* reinline\r\n\r\n* rebase\r\n\r\n* add back changes lost due to rebase being hard\r\n\r\n* emit chunk for provider\r\n\r\n* remove case for React provider type\r\n\r\n* update type for SomeChunk\r\n\r\n* enable flag with experimental\r\n\r\n* add missing types\r\n\r\n* fix flow type\r\n\r\n* missing type\r\n\r\n* t: any\r\n\r\n* revert extraneous type change\r\n\r\n* better type\r\n\r\n* better type\r\n\r\n* feedback\r\n\r\n* change import to type import\r\n\r\n* test?\r\n\r\n* test?\r\n\r\n* remove react-dom\r\n\r\n* remove react-native-renderer from react-server-native-relay/package.json\r\n\r\n* gate change in FiberNewContext, getComponentNameFromType, use switch statement in FlightServer\r\n\r\n* getComponentNameFromTpe: server context type gated and use displayName if available\r\n\r\n* fallthrough\r\n\r\n* lint....\r\n\r\n* POP\r\n\r\n* lint\"",
                "committedDate": "2022-03-08T12:55:32Z"
            },
            {
                "commitId": "a6987bee730052dccdddd4645e15b1ce458fd9a6",
                "commitMessage": "\"add <TracingMarker> component boilerplate (#23275)\n\n- Add Tracing Marker component type to React exports\r\n- Add reconciler work tag\r\n- Add devtools work tag\r\n- Add boilerplate for the cache to render children\r\n\r\nNo functionality yet\"",
                "committedDate": "2022-02-11T16:42:55Z"
            },
            {
                "commitId": "5cccacd131242bdea2c2fe4b33fac50d2e3132b4",
                "commitMessage": "\"Upgrade useId to alpha channel (#22674)\"",
                "committedDate": "2021-11-01T22:26:42Z"
            },
            {
                "commitId": "75f3ddebfa0d9885ce8df42571cf0c09ad6c0a3b",
                "commitMessage": "\"Remove experimental useOpaqueIdentifier API (#22672)\n\nuseId is the updated version of this API.\"",
                "committedDate": "2021-11-01T22:02:39Z"
            },
            {
                "commitId": "ebf9ae8579230e7b1ed0b1d243e1cf802f56938b",
                "commitMessage": "\"useId (#22644)\n\n* Add useId to dispatcher\r\n\r\n* Initial useId implementation\r\n\r\nIds are base 32 strings whose binary representation corresponds to the\r\nposition of a node in a tree.\r\n\r\nEvery time the tree forks into multiple children, we add additional bits\r\nto the left of the sequence that represent the position of the child\r\nwithin the current level of children.\r\n\r\n    00101       00010001011010101\r\n    \u2570\u2500\u252c\u2500\u256f       \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\r\n  Fork 5 of 20       Parent id\r\n\r\nThe leading 0s are important. In the above example, you only need 3 bits\r\nto represent slot 5. However, you need 5 bits to represent all the forks\r\nat the current level, so we must account for the empty bits at the end.\r\n\r\nFor this same reason, slots are 1-indexed instead of 0-indexed.\r\nOtherwise, the zeroth id at a level would be indistinguishable from\r\nits parent.\r\n\r\nIf a node has only one child, and does not materialize an id (i.e. does\r\nnot contain a useId hook), then we dont need to allocate any space in\r\nthe sequence. Its treated as a transparent indirection. For example,\r\nthese two trees produce the same ids:\r\n\r\n<>                          <>\r\n  <Indirection>               <A />\r\n    <A />                     <B />\r\n  </Indirection>            </>\r\n  <B />\r\n</>\r\n\r\nHowever, we cannot skip any materializes an id. Otherwise, a parent id\r\nthat does not fork would be indistinguishable from its child id. For\r\nexample, this tree does not fork, but the parent and child must have\r\ndifferent ids.\r\n\r\n<Parent>\r\n  <Child />\r\n</Parent>\r\n\r\nTo handle this scenario, every time we materialize an id, we allocate a\r\nnew level with a single slot. You can think of this as a fork with only\r\none prong, or an array of children with length 1.\r\n\r\nIts possible for the the size of the sequence to exceed 32 bits, the\r\nmax size for bitwise operations. When this happens, we make more room by\r\nconverting the right part of the id to a string and storing it in an\r\noverflow variable. We use a base 32 string representation, because 32 is\r\nthe largest power of 2 that is supported by toString(). We want the base\r\nto be large so that the resulting ids are compact, and we want the base\r\nto be a power of 2 because every log2(base) bits corresponds to a single\r\ncharacter, i.e. every log2(32) = 5 bits. That means we can lop bits off\r\nthe end 5 at a time without affecting the final result.\r\n\r\n* Incremental hydration\r\n\r\nStores the tree context on the dehydrated Suspense boundarys state\r\nobject so it resume where it left off.\r\n\r\n* Add useId to react-debug-tools\r\n\r\n* Add selective hydration test\r\n\r\nDemonstrates that selective hydration works and ids are preserved even\r\nafter subsequent client updates.\"",
                "committedDate": "2021-11-01T20:30:44Z"
            },
            {
                "commitId": "fa9bea0c41ccfef5b528ef9b5517607f9f94c52a",
                "commitMessage": "\"Initial implementation of cache cleanup (#22510)\n\nThis is an initial, partial implementation of a cleanup mechanism for the experimental Cache API. The idea is that consumers of the Cache API can register to be informed when a given Cache instance is no longer needed so that they can perform associated cleanup tasks to free resources stored in the cache. A canonical example would be cancelling pending network requests.\r\n\r\nAn overview of the high-level changes:\r\n\r\n* Changes the `Cache` type from a Map of cache instances to be an object with the original Map of instances, a reference count (to count roughly \"active references\" to the cache instances - more below), and an AbortController.\r\n* Adds a new public API, `unstable_getCacheSignal(): AbortSignal`, which is callable during render. It returns an AbortSignal tied to the lifetime of the cache - developers can listen for the abort event on the signal, which React now triggers when a given cache instance is no longer referenced. \r\n  * Note that `AbortSignal` is a web standard that is supported by other platform APIs; for example a signal can be passed to `fetch()` to trigger cancellation of an HTTP request.\r\n* Implements the above - triggering the abort event - by handling passive mount/unmount for HostRoot and CacheComponent fiber nodes.\r\n\r\nCases handled:\r\n* Aborted transitions: we clean up a new cache created for an aborted transition\r\n* Suspense: we retain a fresh cache instance until a suspended tree resolves\r\n\r\nFor follow-ups:\r\n* When a subsequent cache refresh is issued before a previous refresh completes, the refreshes are queued. Fresh cache instances for previous refreshes in the queue should be cleared, retaining only the most recent cache. I plan to address this in a follow-up PR.\r\n* If a refresh is cancelled, the fresh cache should be cleaned up.\"",
                "committedDate": "2021-10-21T21:11:42Z"
            },
            {
                "commitId": "02f411578a8e58af8ec28e385f6b0dcb768cdc41",
                "commitMessage": "\"Upgrade useInsertionEffect to stable (#22589)\n\n@huozhi tried this out and says its working as expected. I think we\r\ncan go ahead and move this into the stable channel, so that it is\r\navailable in the React 18 alpha releases.\"",
                "committedDate": "2021-10-19T21:32:54Z"
            },
            {
                "commitId": "82c8fa90be86fc0afcbff2dc39486579cff1ac9a",
                "commitMessage": "\"Add back useMutableSource temporarily (#22396)\n\nRecoil uses useMutableSource behind a flag. I thought this was fine\r\nbecause Recoil isnt used in any concurrent roots, so the behavior\r\nwould be the same, but it turns out that it is used by concurrent\r\nroots in a few places.\r\n\r\nIm not expecting it to be hard to migrate to useSyncExternalStore, but\r\nto de-risk the change Im going to roll it out gradually with a flag. In\r\nthe meantime, Ive added back the useMutableSource API.\"",
                "committedDate": "2021-09-22T03:38:24Z"
            },
            {
                "commitId": "8209de269531767b33d8db26eda41db38bfb6a27",
                "commitMessage": "\"Delete useMutableSource implementation (#22292)\n\nThis API was replaced by useSyncExternalStore\"",
                "committedDate": "2021-09-20T04:11:50Z"
            },
            {
                "commitId": "263cfa6ecb9879ecb629d4e04a8c26422b4c4ff9",
                "commitMessage": "\"[Experimental] Add useInsertionEffect (#21913)\"",
                "committedDate": "2021-09-14T14:27:09Z"
            },
            {
                "commitId": "77912d9a05d7a90287fabdec76486f25869b2981",
                "commitMessage": "\"Wire up the native API for useSyncExternalStore (#22237)\n\nAdds useSyncExternalStore to the internal dispatcher, and exports\r\nthe native API from the React package without yet implementing it.\"",
                "committedDate": "2021-09-07T17:20:24Z"
            },
            {
                "commitId": "06f7b4f43a93eae9111cfbd972ab1ae1148f6afb",
                "commitMessage": "\"`act` should work without mock Scheduler (#21714)\n\nCurrently, in a React 18 root, `act` only works if you mock the\r\nScheduler package. This was because we didnt want to add additional\r\nchecks at runtime.\r\n\r\nBut now that the `act` testing API is dev-only, we can simplify its\r\nimplementation.\r\n\r\nNow when an update is wrapped with `act`, React will bypass Scheduler\r\nentirely and push its tasks onto a special internal queue. Then, when\r\nthe outermost `act` scope exists, well flush that queue.\r\n\r\nI also removed the \"wrong act\" warning, because the plan is to move\r\n`act` to an isomorphic entry point, simlar to `startTransition`. Thats\r\nnot directly related to this PR, but I didnt want to bother\r\nre-implementing that warning only to immediately remove it.\r\n\r\nIll add the isomorphic API in a follow up.\r\n\r\nNote that the internal version of `act` that we use in our own tests\r\nstill depends on mocking the Scheduler package, because it needs to work\r\nin production. Im planning to move that implementation to a shared\r\n(internal) module, too.\"",
                "committedDate": "2021-06-22T21:25:07Z"
            },
            {
                "commitId": "e16d61c3000e2de6217d06b9afad162e883f73c4",
                "commitMessage": "\"[Offscreen] Mount/unmount layout effects (#21386)\n\n* [Offscreen] Mount/unmount layout effects\r\n\r\nExposes the Offscreen component type and implements basic support for\r\nmount/unmounting layout effects when the visibility is toggled.\r\n\r\nMostly it works the same way as hidden Suspense trees, which use the\r\nsame internal fiber type. I had to add an extra bailout, though, that\r\ndoesnt apply to the Suspense case but does apply to Offscreen\r\ncomponents: a hidden Offscreen tree will eventually render at low\r\npriority, and when we it does, its `subtreeTag` will have effects\r\nscheduled on it. So I added a check to the layout phase where, if the\r\nsubtree is hidden, we skip over the subtree entirely. An alternate\r\ndesign would be to clear the subtree flags in the render phase, but I\r\nprefer doing it this way since its harder to mess up.\r\n\r\nWe also need an API to enable the same thing for passive effects. This\r\nis not yet implemented.\r\n\r\n* Add test starting from hidden\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>\"",
                "committedDate": "2021-06-01T19:46:08Z"
            },
            {
                "commitId": "4ecf11977c46966d3deedcdc71f1280a34607d1d",
                "commitMessage": "\"Remove the Fundamental internals (#20745)\"",
                "committedDate": "2021-02-05T20:36:55Z"
            },
            {
                "commitId": "efc57e5cbbd618f3c98d941c48eec859026c2dcb",
                "commitMessage": "\"Add built-in Suspense cache with support for invalidation (refreshing) (#20456)\"",
                "committedDate": "2020-12-18T18:57:24Z"
            },
            {
                "commitId": "e23673b511a2eab6ddcb848a4150105c954f289a",
                "commitMessage": "\"[Flight] Add getCacheForType() to the dispatcher (#20315)\n\n* Remove react/unstable_cache\r\n\r\nWere probably going to make it available via the dispatcher. Lets remove this for now.\r\n\r\n* Add readContext() to the dispatcher\r\n\r\nOn the server, it will be per-request.\r\n\r\nOn the client, there will be some way to shadow it.\r\n\r\nFor now, I provide it on the server, and throw on the client.\r\n\r\n* Use readContext() from react-fetch\r\n\r\nThis makes it work on the server (but not on the client until we implement it there.)\r\n\r\nUpdated the test to use Server Components. Now it passes.\r\n\r\n* Fixture: Add fetch from a Server Component\r\n\r\n* readCache -> getCacheForType<T>\r\n\r\n* Add React.unstable_getCacheForType\r\n\r\n* Add a feature flag\r\n\r\n* Fix Flow\r\n\r\n* Add react-suspense-test-utils and port tests\r\n\r\n* Remove extra Map lookup\r\n\r\n* Unroll async/await because build system\r\n\r\n* Add some error coverage and retry\r\n\r\n* Add unstable_getCacheForType to Flight entry\"",
                "committedDate": "2020-12-03T03:44:56Z"
            },
            {
                "commitId": "56e9feead0f91075ba0a4f725c9e4e343bca1c67",
                "commitMessage": "\"Remove Blocks (#20138)\n\n* Remove Blocks\r\n\r\n* Remove Flight Server Runtime\r\n\r\nTheres no need for this now that the JSResource is part of the bundler\r\nprotocol. Might need something for Webpack plugin specifically later.\r\n\r\n* Devtools\"",
                "committedDate": "2020-10-31T06:03:45Z"
            },
            {
                "commitId": "1f38dcff67d12828be771403e183652f5e93909a",
                "commitMessage": "\"Remove withSuspenseConfig (#19724)\n\nRemoves `withSuspenseConfig` and migrates relevant tests to\r\n`startTransition` instead.\r\n\r\nWe only had one caller in www, which Ive removed.\"",
                "committedDate": "2020-08-31T16:16:49Z"
            },
            {
                "commitId": "5564f2c95bb61b446f93dc5c519740bdb39e1989",
                "commitMessage": "\"Add React.startTransition (#19696)\n\n* Add React.startTransition\r\n\r\n* Export startTransition from index.js as well\"",
                "committedDate": "2020-08-26T15:34:17Z"
            },
            {
                "commitId": "b61174fb7b09580c1ec2a8f55e73204b706d2935",
                "commitMessage": "\"Remove the deprecated React Flare event system (#19520)\"",
                "committedDate": "2020-08-05T14:13:29Z"
            },
            {
                "commitId": "9102719baacb64738e9235bc80d3d7d9918cc74c",
                "commitMessage": "\"Tidy up React Scope API (#19352)\"",
                "committedDate": "2020-07-16T15:21:21Z"
            },
            {
                "commitId": "8b9c4d1688333865e702fcd65ad2ab7d83b3c33c",
                "commitMessage": "\"Expose LegacyHidden type and disable <div hidden /> API in new fork (#18891)\n\n* Expose LegacyHidden type\r\n\r\nI will use this internally at Facebook to migrate away from\r\n<div hidden />. The end goal is to migrate to the Offscreen type, but\r\nthat has different semantics. This is an incremental step.\r\n\r\n* Disable <div hidden /> API in new fork\r\n\r\nMigrates to the unstable_LegacyHidden type instead. The old fork does\r\nnot support the new component type, so I updated the tests to use an\r\nindirection that picks the correct API. I will remove this once the\r\nLegacyHidden (and/or Offscreen) type has landed in both implementations.\r\n\r\n* Add gated warning for `<div hidden />` API\r\n\r\nOnly exists so we can detect callers in www and migrate them to the new\r\nAPI. Should not visible to anyone outside React Core team.\"",
                "committedDate": "2020-05-12T03:02:08Z"
            },
            {
                "commitId": "22dc2e42bdc00d87fc19c5e75fc7c0b3fdcdc572",
                "commitMessage": "\"Add experimental DebugTracing logger for internal use (#18531)\"",
                "committedDate": "2020-04-16T02:10:15Z"
            },
            {
                "commitId": "3278d242184a13add3f25f683b77ef9a6a2305f3",
                "commitMessage": "\"Add useOpaqueIdentifier Hook (#17322)\n\n* Add useOpaqueIdentifier Hook\r\n\r\nWe currently use unique IDs in a lot of places. Examples are:\r\n  * `<label for=\"ID\">`\r\n  * `aria-labelledby`\r\n\r\nThis can cause some issues:\r\n  1. If we server side render and then hydrate, this could cause an\r\n     hydration ID mismatch\r\n  2. If we server side render one part of the page and client side\r\n     render another part of the page, the ID for one part could be\r\n     different than the ID for another part even though they are\r\n     supposed to be the same\r\n  3. If we conditionally render something with an ID ,  this might also\r\n     cause an ID mismatch because the ID will be different on other\r\n     parts of the page\r\n\r\nThis PR creates a new hook `useUniqueId` that generates a different\r\nunique ID based on whether the hook was called on the server or client.\r\nIf the hook is called during hydration, it generates an opaque object\r\nthat will rerender the hook so that the IDs match.\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "committedDate": "2020-04-07T00:17:27Z"
            },
            {
                "commitId": "c5d2fc7127654e43de59fff865b74765a103c4a5",
                "commitMessage": "\"Move some files out of /shared and rename to upper case (#18363)\n\n* Rename lower case isomorphic default exports modules to upper case named exports\r\n\r\nWere somewhat inconsistent here between e.g. ReactLazy and memo.\r\n\r\nLets pick one.\r\n\r\nThis also moves the responder, fundamental, scope creators from shared\r\nsince theyre isomorphic and same as the other creators.\r\n\r\n* Move some files that are specific to the react-reconciler from shared\r\n\r\nIndividual renderers are allowed to deep require into the reconciler.\r\n\r\n* Move files specific to react-dom from shared\r\n\r\nreact-interactions is right now dom specific (it wasnt before) so we can\r\ntype check it together with other dom stuff. Avoids the need for\r\na shared ReactDOMTypes to be checked by RN for example.\r\n\r\n* Move ReactWorkTags to the reconciler\r\n\r\n* Move createPortal to export from reconciler\r\n\r\nOtherwise Noop cant access it since its not allowed deep requires.\"",
                "committedDate": "2020-03-21T22:22:01Z"
            },
            {
                "commitId": "90f8fe6f5509cab7d6d280b4ed17181697f394e9",
                "commitMessage": "\"add jsx-runtime and jsx-dev-runtime (#18299)\n\nThis PR adds the jsx-runtime and jsx-dev-runtime modules for the JSX Babel Plugin. WWW still relies on jsx/jsxs/jsxDEV from the \"react\" module, so once we refactor the code to point to the runtime modules we will remove jsx/jsxs/jsxDEV from the \"react\" module.\"",
                "committedDate": "2020-03-17T20:22:19Z"
            },
            {
                "commitId": "322cdcd3abfaca985a001a12247f02c5d31d311e",
                "commitMessage": "\"useMutableSource hook (#18000)\n\nuseMutableSource hook\r\n\r\nuseMutableSource() enables React components to safely and efficiently read from a mutable external source in Concurrent Mode. The API will detect mutations that occur during a render to avoid tearing and it will automatically schedule updates when the source is mutated.\r\n\r\nRFC: reactjs/rfcs#147\"",
                "committedDate": "2020-03-11T19:34:39Z"
            },
            {
                "commitId": "d2158d6ccbcbd998d1cd1c06ac6c6682cbeafd04",
                "commitMessage": "\"Fix flow types (#18204)\n\n* Added missing @flow pragma to React.js\r\n\r\n* Fixed useContext() return type definition\r\n\r\n* Fixed previously masked Flow errors in DevTools and react-interactions packages\r\n\r\n* Added displayName to internal Context Flow type\r\n\r\n* Removed Flow generic annotations for createResponder\r\n\r\nThis seems to cause a parsing error. (Not sure why.) The API is deprecated anyway so Im being lazy for now and just adding a .\"",
                "committedDate": "2020-03-03T20:46:24Z"
            },
            {
                "commitId": "60016c448bb7d19fc989acd05dda5aca2e124381",
                "commitMessage": "\"Export React as Named Exports instead of CommonJS (#18106)\n\n* Add options for forked entry points\r\n\r\nWe currently fork .fb.js entry points. This adds a few more options.\r\n\r\n.modern.fb.js - experimental FB builds\r\n.classic.fb.js - stable FB builds\r\n.fb.js - if no other FB build, use this for FB builds\r\n.experimental.js - experimental builds\r\n.stable.js - stable builds\r\n.js - used if no other override exists\r\n\r\nThis will be used to have different ES exports for different builds.\r\n\r\n* Switch React to named exports\r\n\r\n* Export named exports from the export point itself\r\n\r\nWe need to re-export the Flow exported types so we can use them in our code.\r\n\r\nWe dont want to use the Flow types from upstream since it doesnt have the non-public APIs that we have.\r\n\r\nThis should be able to use export * but I dont know why it doesnt work.\r\n\r\nThis actually enables Flow typing of React which was just \"any\" before.\r\nThis exposed some Flow errors that needs fixing.\r\n\r\n* Create forks for the react entrypoint\r\n\r\nNone of our builds expose all exports and they all differ in at least one\r\nway, so we need four forks.\r\n\r\n* Set esModule flag to false\r\n\r\nWe dont want to emit the esModule compatibility flag on our CommonJS\r\noutput. For now we treat our named exports as if theyre CommonJS.\r\n\r\nThis is a potentially breaking change for scheduler (but all those apis\r\nare unstable), react-is and use-subscription. However, it seems unlikely\r\nthat anyone would rely on this since these only have named exports.\r\n\r\n* Remove unused Feature Flags\r\n\r\n* Let jest observe the stable fork for stable tests\r\n\r\nThis lets it do the negative test by ensuring that the right tests fail.\r\n\r\nHowever, this in turn will make other tests that are not behind\r\n__EXPERIMENTAL__ fail. So I need to do that next.\r\n\r\n* Put all tests that depend on exports behind __EXPERIMENTAL__\r\n\r\nSince theres no way to override the exports using feature flags\r\nin .intern.js anymore we cant use these APIs in stable.\r\n\r\nThe tradeoff here is that we can either enable the negative tests on\r\n\"stable\" that means experimental are expected to fail, or we can disable\r\ntests on stable. This is unfortunate since some of these APIs now run on\r\na \"stable\" config at FB instead of the experimental.\r\n\r\n* Switch ReactDOM to named exports\r\n\r\nSame strategy as React.\r\n\r\nI moved the ReactDOMFB runtime injection to classic.fb.js\r\n\r\nSince we only fork the entrypoint, the `/testing` entrypoint needs to\r\nbe forked too to re-export the same things plus `act`. This is a bit\r\nunfortunate. If it becomes a pattern we can consider forking in the\r\nmodule resolution deeply.\r\n\r\nfix flow\r\n\r\n* Fix ReactDOM Flow Types\r\n\r\nNow that ReactDOM is Flow type checked we need to fix up its types.\r\n\r\n* Configure jest to use stable entry for ReactDOM in non-experimental\r\n\r\n* Remove additional FeatureFlags that are no longer needed\r\n\r\nThese are only flagging the exports and no implementation details so we\r\ncan control them fully through the export overrides.\"",
                "committedDate": "2020-02-25T21:54:27Z"
            },
            {
                "commitId": "65bbda7f169394005252b46a5992ece5a2ffadad",
                "commitMessage": "\"Rename Chunks API to Blocks (#18086)\n\nSounds like this is the name were going with. This also helps us\r\ndistinguish it from other \"chunking\" implementation details.\"",
                "committedDate": "2020-02-21T07:56:40Z"
            },
            {
                "commitId": "a209a97ed742ced488d7edf4fc2dcbf316ba13cb",
                "commitMessage": "\"Add feature flag around React.createFactory (#17873)\"",
                "committedDate": "2020-01-20T15:00:18Z"
            },
            {
                "commitId": "7dc9745427046d462506e9788878ba389e176b8a",
                "commitMessage": "\"[Flight] Chunks API (#17398)\n\n* Add feature flags\r\n\r\n* Add Chunk type and constructor\r\n\r\n* Wire up Chunk support in the reconciler\r\n\r\n* Update reconciler to reconcile Chunks against the render method\r\n\r\nThis allows the query and args to be updated.\r\n\r\n* Drop the ref. Chunks cannot have refs anyway.\r\n\r\n* Add Chunk checks in more missing cases\r\n\r\n* Rename secondArg\r\n\r\n* Add test and fix lazy chunks\r\n\r\nNot really a supported use case but for consistency I guess.\r\n\r\n* Fix fragment test\"",
                "committedDate": "2019-12-18T18:25:43Z"
            },
            {
                "commitId": "9fe1031244903e442de179821f1d383a9f2a59f2",
                "commitMessage": "\"[react-interactions] Rename Flare APIs to deprecated and remove from RN (#17644)\"",
                "committedDate": "2019-12-18T10:24:46Z"
            },
            {
                "commitId": "c47f59331ee94b1d04f974f075373d368a8c8ab3",
                "commitMessage": "\"Move SuspenseList to experimental package (#17130)\n\nAlso moves `withSuspenseConfig`\"",
                "committedDate": "2019-10-18T21:24:13Z"
            },
            {
                "commitId": "685ed561f22ea062281a4c570c7067e6020457c4",
                "commitMessage": "\"Migrate useDeferredValue and useTransition (#17058)\n\nMigrated useDeferredValue and useTransition from Facebooks www repo into ReactFiberHooks.\"",
                "committedDate": "2019-10-18T19:48:43Z"
            },
            {
                "commitId": "bd79be9b687156067416ffe5219e49a11bd0f1e7",
                "commitMessage": "\"[react-core] Add experimental React Scope component API (#16587)\"",
                "committedDate": "2019-08-29T11:06:51Z"
            },
            {
                "commitId": "42794557ca44a8c05c71aab698d44d1294236538",
                "commitMessage": "\"[Flare] Tweaks to Flare system design and API (#16264)\"",
                "committedDate": "2019-08-01T18:08:54Z"
            },
            {
                "commitId": "509889119360ed83ca6ef3f83bcf01e5aa7dcd81",
                "commitMessage": "\"[Flare] Redesign core event system (#16163)\"",
                "committedDate": "2019-07-23T22:46:44Z"
            },
            {
                "commitId": "2c4d61e1022ae383dd11fe237f6df8451e6f0310",
                "commitMessage": "\"Adds experimental fundamental interface (#16049)\"",
                "committedDate": "2019-07-19T21:20:28Z"
            },
            {
                "commitId": "8d413bf2c3679befe8c6b56733b7c6f6e467ec07",
                "commitMessage": "\"Remove React.error and React.warn (#16126)\n\n* Remove React.error/React.warn with React.getComponentStack\"",
                "committedDate": "2019-07-12T22:41:47Z"
            },
            {
                "commitId": "9b0bd43550206e04bfe9ca695e5981eff0e2d03f",
                "commitMessage": "\"[Flare] Re-label Flare flag (#16014)\"",
                "committedDate": "2019-06-28T00:11:11Z"
            },
            {
                "commitId": "4f92fbce5cc409436ec7625ac08d3a709a4d8f31",
                "commitMessage": "\"[Flare] Move createEvent back to React object (#15943)\"",
                "committedDate": "2019-06-21T09:12:56Z"
            },
            {
                "commitId": "720db4cbe675e80820ec81abab499492309b9252",
                "commitMessage": "\"[Flare] Add useEvent hook implementation (#15927)\n\n* [Flare] Add useEvent hook implementation\r\n\r\nValidate hooks have decendent event components\r\n\r\nFew fixes and displayName changes\r\n\r\nFix more responder bugs\r\n\r\nUpdate error codes\r\n\r\n* Add another test\r\n\r\n* Address feedback\"",
                "committedDate": "2019-06-21T02:12:40Z"
            },
            {
                "commitId": "76864f7ff729f8293e8e772da7ad8416d7def6b3",
                "commitMessage": "\"Add SuspenseList Component (#15902)\n\n* Add SuspenseList component type\r\n\r\n* Push SuspenseContext for SuspenseList\r\n\r\n* Force Suspense boundaries into their fallback state\r\n\r\nIn the \"together\" mode, we do a second render pass that forces the\r\nfallbacks to stay in place, if not all can unsuspend at once.\r\n\r\n* Add test\r\n\r\n* Transfer thennables to the SuspenseList\r\n\r\nThis way, we end up retrying the SuspenseList in case the nested boundary\r\nthat just suspended doesnt actually get mounted with this set of\r\nthennables. This happens when the second pass renders the fallback\r\ndirectly without first attempting to render the content.\r\n\r\n* Add warning for unsupported displayOrder\r\n\r\n* Add tests for nested sibling boundaries and nested lists\r\n\r\n* Fix nested SuspenseList forwarding thennables\r\n\r\n* Rename displayOrder to revealOrder\r\n\r\nDisplay order has some \"display list\" connotations making it sound like\r\na z-index thing.\r\n\r\nReveal indicates that this isnt really about when something gets rendered\r\nor is ready to be rendered. Its about when content that is already there\r\ngets to be revealed.\r\n\r\n* Add test for avoided boundaries\r\n\r\n* Make SuspenseList a noop in legacy mode\r\n\r\n* Use an explicit suspense list state object\r\n\r\nThis will be used for more things in the directional case.\"",
                "committedDate": "2019-06-20T02:34:28Z"
            },
            {
                "commitId": "689beef6f5d0adab166f5eb0aac59eba6100677a",
                "commitMessage": "\"[Flare] Move unstable_createEventComponent to ReactDOM (#15890)\"",
                "committedDate": "2019-06-18T22:41:00Z"
            },
            {
                "commitId": "9c6de716d028f17736d0892d8a3d8f3ac2cb62bd",
                "commitMessage": "\"Add withSuspenseConfig API (#15593)\n\n* Add suspendIfNeeded API and a global scope to track it\r\n\r\nAdds a \"current\" suspense config that gets applied to all updates scheduled\r\nduring the current scope.\r\n\r\nI suspect we might want to add other types of configurations to the \"batch\"\r\nso I called it the \"batch config\".\r\n\r\nThis works across renderers/roots but they wont actually necessarily go\r\ninto the same batch.\r\n\r\n* Add the suspenseConfig to all updates created during this scope\r\n\r\n* Compute expiration time based on the timeout of the suspense config\r\n\r\n* Track if there was a processed suspenseConfig this render pass\r\n\r\nWell use this info to suspend a commit for longer when necessary.\r\n\r\n* Mark suspended states that should be avoided as a separate flag\r\n\r\nThis lets us track which renders we want to suspend for a short time vs\r\na longer time if possible.\r\n\r\n* Suspend until the full expiration time if something asked to suspend\r\n\r\n* Reenable an old test that we can now repro again\r\n\r\n* Suspend the commit even if it is complete if there is a minimum delay\r\n\r\nThis can be used to implement spinners that dont flicker if the data\r\nand rendering is really fast.\r\n\r\n* Default timeoutMs to low pri expiration if not provided\r\n\r\nThis is a required argument in the type signature but people may not\r\nsupply it and this is a user facing object.\r\n\r\n* Rename to withSuspenseConfig and drop the default config\r\n\r\nThis allow opting out of suspending in some nested scope.\r\n\r\nA lot of time when you use this function youll use it with high level\r\nhelpers. Those helpers often want to accept some additional configuration\r\nfor suspense and if it should suspend at all. The easiest way is to just\r\nhave the api accept null or a suspense config and pass it through. However,\r\nthen you have to remember that calling suspendIfNeeded has a default.\r\n\r\nIt gets simpler by just saying tat you can pass the config. You can have\r\nyour own default in user space.\r\n\r\n* Track the largest suspense config expiration separately\r\n\r\nThis ensures that if weve scheduled lower pri work that doesnt have a\r\nsuspenseConfig, we dont consider its expiration as the timeout.\r\n\r\n* Add basic tests for functionality using each update mechanism\r\n\r\n* Fix issue when newly created avoided boundary doesnt suspend with delay\r\n\r\n* Add test for loading indicator with minLoadingDurationMs option\"",
                "committedDate": "2019-05-16T23:51:18Z"
            },
            {
                "commitId": "83fc258f2914c1a7c14c7b98ee362934576f266b",
                "commitMessage": "\"Remove <ConcurrentMode /> (#15532)\n\nUse createSyncRoot instead.\"",
                "committedDate": "2019-05-13T23:10:00Z"
            },
            {
                "commitId": "89d8d1435ffc61fd5201636a84c53806130ef4b8",
                "commitMessage": "\"Add React.unstable_createEventComponent (#15580)\n\nAPI for creating event components from event responders.\"",
                "committedDate": "2019-05-07T19:36:42Z"
            },
            {
                "commitId": "745baf2e061bdb7a07b511fa6fd8c1c5e8106313",
                "commitMessage": "\"Provide new jsx transform target for reactjs/rfcs#107 (#15141)\n\n* adding jsx function\r\n\r\n* add more feature flag defaults\r\n\r\n* flip ReactElement order back\"",
                "committedDate": "2019-04-07T19:02:34Z"
            },
            {
                "commitId": "f161ee2eb7e78d6cb3d3878fe1812ac1057fedc6",
                "commitMessage": "\"React.warn() and React.error() (#15170)\"",
                "committedDate": "2019-03-21T21:44:08Z"
            },
            {
                "commitId": "56035dac645af75c1a8aa8deba2bcf89b14a5aa4",
                "commitMessage": "\"unstable_Profiler -> Profiler (#15172)\"",
                "committedDate": "2019-03-21T16:18:34Z"
            },
            {
                "commitId": "6cb26774e27e03c7d5d6e4601bcee979a004fe91",
                "commitMessage": "\"Enable hooks! (#14679)\n\n* Turned enableHooks feature flag on everywhere\r\n* Removed useHooks feature flag from tests (now that its on by default)\r\n* Remove useHooks feature flag entirely\"",
                "committedDate": "2019-01-23T21:28:09Z"
            },
            {
                "commitId": "edb1f595649b013a59a18f43c03a57035ddea19e",
                "commitMessage": "\"Support configurable labels for custom hooks (#14559)\n\n* react-debug-tools accepts currentDispatcher ref as param\r\n\r\n* ReactDebugHooks injected dispatcher ref is optional\r\n\r\n* Support custom values for custom hooks\r\n\r\n* PR feedback:\r\n\r\n1. Renamed useDebugValueLabel hook to useDebugValue\r\n2. Wrapped useDebugValue internals in if-DEV so that it could be removed from production builds.\r\n\r\n* PR feedback:\r\n\r\n1. Fixed some minor typos\r\n2. Added inline comment explaining the purpose of  rollupDebugValues()\r\n3. Refactored rollupDebugValues() to use a for loop rather than filter()\r\n4. Improve check for useDebugValue hook to lessen the chance of a false positive\r\n5. Added optional formatter function param to useDebugValue\r\n\r\n* Nitpick renamed a method\"",
                "committedDate": "2019-01-14T22:53:22Z"
            },
            {
                "commitId": "b4ad8e947150a1a0b486a388e2d4762d3eee51ee",
                "commitMessage": "\"rename useImperativeMethods -> useImperativeHandle (#14565)\"",
                "committedDate": "2019-01-10T13:37:50Z"
            },
            {
                "commitId": "c2a2d8a539bf02e40c43d36adc2826e228f30955",
                "commitMessage": "\"Remove useMutationEffect (#14336)\n\nuseMutationEffect has problems (namely, refs arent attached at the time that it runs) and were not positive its necessary. useLayoutEffect runs at the same time as componentDidMount/Update so its sufficient for all existing use cases; it can be used in any case that useEffect happens too late. Until we figure out what we want to do, lets delete it.\"",
                "committedDate": "2018-11-27T21:05:13Z"
            },
            {
                "commitId": "7475120ce7bdeb7a5666d64c636efb1f4a951b9a",
                "commitMessage": "\"Prevent deopts from modifying exports object in stable builds (#14309)\"",
                "committedDate": "2018-11-23T14:10:57Z"
            },
            {
                "commitId": "5fc84efacce66272928815e8a6c83a341af9160e",
                "commitMessage": "\"Skip updating effect tag when skipping effect\n\nFor example, if you have `useEffect(..., [])`, theres no need to set .effectTag to `Update | Passive` on updates.\"",
                "committedDate": "2018-10-29T18:26:54Z"
            },
            {
                "commitId": "11d0781eea7dfa65e0ea9e54d18ff937122f9524",
                "commitMessage": "\"Defer useEffect until after paint\n\nEffects scheduled by useEffect should not fire until after the browser\nhas had a chance to paint. However, they should be fired before any\nsubsequent mutations.\n\nAlso adds useMutationEffect and useLayoutEffect. useMutationEffect fires\nduring the host update phase. useLayoutEffect fires during the post-\nupdate phase (the same phase as componentDidMount\nand componentDidUpdate).\"",
                "committedDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "105f2de545dc9e374ed4ac55b3628eeeb555f4a6",
                "commitMessage": "\"Put hooks behind feature flag\"",
                "committedDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "7bee9fbdd49aa5b9365a94b0ddf6db04bc1bf51c",
                "commitMessage": "\"Initial hooks implementation\n\nIncludes:\n- useState\n- useContext\n- useEffect\n- useRef\n- useReducer\n- useCallback\n- useMemo\n- useAPI\"",
                "committedDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "275e76e83bc2be5dc0be9185ff747f383969289a",
                "commitMessage": "\"Enable stable concurrent APIs flag for 16.7 alpha (#13928)\n\n* Add enableStableConcurrentModeAPIs feature flag\r\n\r\n* Conditionally name concurrent API based on enableStableConcurrentModeAPIs flag\"",
                "committedDate": "2018-10-24T20:45:07Z"
            },
            {
                "commitId": "d75c69e0cf2a842adc47edab87ca5103411e6949",
                "commitMessage": "\"Remove unstable_ prefix from Suspense (#13922)\n\nWe are using it with lazy and the combination Suspense + lazy seems pretty\r\nstable. maxDuration is not but thats only enabled when youre in\r\nConcurrentMode which is still unstable.\"",
                "committedDate": "2018-10-23T05:40:05Z"
            },
            {
                "commitId": "769b1f270e1251d9dbdce0fcbd9e92e502d059b8",
                "commitMessage": "\"pure -> memo (#13905)\"",
                "committedDate": "2018-10-20T16:46:23Z"
            },
            {
                "commitId": "8af6728c6f105d37f9c0006288a6d1ac3903dc71",
                "commitMessage": "\"Enable Suspense + rename Placeholder (#13799)\n\n* Enable Suspense\r\n\r\n* <unstable_Placeholder delayMs> => <unstable_Suspense maxDuration>\r\n\r\n* Update suspense fixture\"",
                "committedDate": "2018-10-10T16:02:04Z"
            },
            {
                "commitId": "a0733fe13d598303f45b9d27c84ce0ec40d09021",
                "commitMessage": "\"pure (#13748)\n\n* pure\r\n\r\nA higher-order component version of the `React.PureComponent` class.\r\nDuring an update, the previous props are compared to the new props. If\r\nthey are the same, React will skip rendering the component and\r\nits children.\r\n\r\nUnlike userspace implementations, `pure` will not add an additional\r\nfiber to the tree.\r\n\r\nThe first argument must be a functional component; it does not work\r\nwith classes.\r\n\r\n`pure` uses shallow comparison by default, like `React.PureComponent`.\r\nA custom comparison can be passed as the second argument.\r\n\r\nCo-authored-by: Andrew Clark <acdlite@fb.com>\r\nCo-authored-by: Sophie Alpert <sophiebits@fb.com>\r\n\r\n* Warn if first argument is not a functional component\"",
                "committedDate": "2018-09-27T22:25:38Z"
            },
            {
                "commitId": "0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74",
                "commitMessage": "\"Rename AsyncMode -> ConcurrentMode (#13732)\n\n* Rename AsyncMode -> ConcurrentMode\"",
                "committedDate": "2018-09-26T16:13:02Z"
            },
            {
                "commitId": "fe959eea731b4de0c970f753dfa9d0f6b010b63d",
                "commitMessage": "\"React.lazy (#13398)\n\nLazily starts loading a component the first time its rendered. The\r\nimplementation is fairly simple and could be left to userspace, but since\r\nthis is an important use case, theres value in standardization.\"",
                "committedDate": "2018-08-16T16:43:32Z"
            },
            {
                "commitId": "659a29cecf74301532354261369e9048aac6e20f",
                "commitMessage": "\"Reorganize how shared internals are accessed (#13201)\n\n* Reorganize how shared internals are accessed\r\n\r\n* Update forks.js\"",
                "committedDate": "2018-07-13T01:45:37Z"
            },
            {
                "commitId": "88d7ed8bfbccd860c3e309da39d356d0a3127aa7",
                "commitMessage": "\"React.Timeout -> React.Placeholder (#13105)\n\nChanged the API to match what weve been using in our latest discussions.\r\n\r\nOur tentative plans are for <Placeholder> to automatically hide the timed-out\r\nchildren, instead of removing them, so their state is not lost. This part is\r\nnot yet implemented. Well likely have a lower level API that does not include\r\nthe hiding behavior. This is also not yet implemented.\"",
                "committedDate": "2018-07-04T02:47:00Z"
            },
            {
                "commitId": "d6f304e88952b895a9e1c69483081d2d9ef56979",
                "commitMessage": "\"Remove Timeout export on React object unless enableSuspense flag (#12833)\"",
                "committedDate": "2018-05-16T21:02:34Z"
            },
            {
                "commitId": "6565795377d1d2c79a7708766f1af9e1a87517de",
                "commitMessage": "\"Suspense (#12279)\n\n* Timeout component\r\n\r\nAdds Timeout component. If a promise is thrown from inside a Timeout component,\r\nReact will suspend the in-progress render from committing. When the promise\r\nresolves, React will retry. If the render is suspended for longer than the\r\nmaximum threshold, the Timeout switches to a placeholder state.\r\n\r\nThe timeout threshold is defined as the minimum of:\r\n- The expiration time of the current render\r\n- The `ms` prop given to each Timeout component in the ancestor path of the\r\nthrown promise.\r\n\r\n* Add a test for nested fallbacks\r\n\r\nCo-authored-by: Andrew Clark <acdlite@fb.com>\r\n\r\n* Resume on promise rejection\r\n\r\nReact should resume rendering regardless of whether it resolves\r\nor rejects.\r\n\r\n* Wrap Suspense code in feature flag\r\n\r\n* Children of a Timeout must be strict mode compatible\r\n\r\nAsync is not required for Suspense, but strict mode is.\r\n\r\n* Simplify list of pending work\r\n\r\nSome of this was added with \"soft expiration\" in mind, but now with our revised\r\nmodel for how soft expiration will work, this isnt necessary.\r\n\r\nIt would be nice to remove more of this, but I think the list itself is inherent\r\nbecause we need a way to track the start times, for <Timeout ms={ms} />.\r\n\r\n* Only use the Timeout update queue to store promises, not for state\r\n\r\nIt already worked this way in practice.\r\n\r\n* Wrap more Suspense-only paths in the feature flag\r\n\r\n* Attach promise listener immediately on suspend\r\n\r\nInstead of waiting for commit phase.\r\n\r\n* Infer approximate start time using expiration time\r\n\r\n* Remove list of pending priority levels\r\n\r\nWe can replicate almost all the functionality by tracking just five\r\nseparate levels: the highest/lowest priority pending levels, the\r\nhighest/lowest priority suspended levels, and the lowest pinged level.\r\n\r\nWe lose a bit of granularity, in that if there are multiple levels of\r\npending updates, only the first and last ones are known. But in practice\r\nthis likely isnt a big deal.\r\n\r\nThese heuristics are almost entirely isolated to a single module and\r\ncan be adjusted later, without API changes, if necessary.\r\n\r\nNon-IO-bound work is not affected at all.\r\n\r\n* ReactFiberPendingWork -> ReactFiberPendingPriority\r\n\r\n* Renaming method names from \"pending work\" to \"pending priority\"\r\n\r\n* Get rid of SuspenseThenable module\r\n\r\nIdk why I thought this was neccessary\r\n\r\n* Nits based on Sebastians feedback\r\n\r\n* More naming nits + comments\r\n\r\n* Add test for hiding a suspended tree to unblock\r\n\r\n* Revert change to expiration time rounding\r\n\r\nThis means you have to account for the start time approximation\r\nheuristic when writing Suspense tests, but thats going to be\r\ntrue regardless.\r\n\r\nWhen updating the tests, I also made a fix related to offscreen\r\npriority. We should never timeout inside a hidden tree.\r\n\r\n* palceholder -> placeholder\"",
                "committedDate": "2018-05-11T01:09:10Z"
            },
            {
                "commitId": "fc3777b1fe295fd2661f1974f5587d214791f04b",
                "commitMessage": "\"Add Profiler component for collecting new render timing info (#12745)\n\nAdd a new component type, Profiler, that can be used to collect new render time metrics. Since this is a new, experimental API, it will be exported as React.unstable_Profiler initially.\r\n\r\nMost of the functionality for this component has been added behind a feature flag, enableProfileModeMetrics. When the feature flag is disabled, the component will just render its children with no additional behavior. When the flag is enabled, React will also collect timing information and pass it to the onRender function (as described below).\"",
                "committedDate": "2018-05-10T22:25:32Z"
            },
            {
                "commitId": "bc70441c8b3fa85338283af3eeb47b5d15e9dbfe",
                "commitMessage": "\"RFC #30: React.forwardRef implementation (#12346)\n\nAdded React.forwardRef support to react-reconciler based renders and the SSR partial renderer.\"",
                "committedDate": "2018-03-14T20:07:58Z"
            },
            {
                "commitId": "29e8924c70856bef9b11e0c74a450140bfcce773",
                "commitMessage": "\"Move ReactContext source to React package (#12205)\"",
                "committedDate": "2018-02-10T16:41:33Z"
            },
            {
                "commitId": "8dc8f88d5ae9fb96934ba43e3842b5dcf4074afd",
                "commitMessage": "\"Adds createRef() as per RFC (#12162)\n\n* Adds createRef() as per RFC\"",
                "committedDate": "2018-02-06T20:19:49Z"
            },
            {
                "commitId": "28aa084ad84a681be1c45def2f4b4c0dd8a43871",
                "commitMessage": "\"Switch to JSX API for context (#12123)\n\n* Switch to JSX API for context\r\n\r\n80% sure this will be the final API. Merging this now so we can get this\r\ninto the next www sync in preparation for 16.3.\r\n\r\n* Promote context to a stable API\"",
                "committedDate": "2018-01-30T21:06:12Z"
            },
            {
                "commitId": "9ea55516e674c2de63b9f7829e3c459f3cb3cf78",
                "commitMessage": "\"Replace unstable_AsyncComponent with unstable_AsyncMode (#12117)\n\n* Replace unstable_AsyncComponent with Unstable_AsyncMode\r\n\r\nMirrors the StrictMode API and uses the new Mode type of work.\r\n\r\n* internalContextTag -> mode\r\n\r\nChange this now that we have a better name\r\n\r\n* Unstable_ -> unstable_\"",
                "committedDate": "2018-01-30T03:11:59Z"
            },
            {
                "commitId": "87ae211ccd8d61796cfdef138d1e12fb7a74f85d",
                "commitMessage": "\"New context API (#11818)\n\n* New context API\r\n\r\nIntroduces a declarative context API that propagates updates even when\r\nshouldComponentUpdate returns false.\r\n\r\n* Fuzz tester for context\r\n\r\n* Use ReactElement for provider and consumer children\r\n\r\n* Unify more branches in createFiberFromElement\r\n\r\n* Compare context values using Object.is\r\n\r\nSame semantics as PureComponent/shallowEqual.\r\n\r\n* Add support for Provider and Consumer to server-side renderer\r\n\r\n* Store providers on global stack\r\n\r\nRather than using a linked list stored on the context type. The global\r\nstack can be reset in case of an interruption or error, whereas with the\r\nlinked list implementation, youd need to keep track of every\r\ncontext type.\r\n\r\n* Put new context API behind a feature flag\r\n\r\nWell enable this in www only for now.\r\n\r\n* Store nearest provider on context object\r\n\r\n* Handle reentrancy in server renderer\r\n\r\nContext stack should be per server renderer instance.\r\n\r\n* Bailout of consumer updates using bitmask\r\n\r\nThe context type defines an optional function that compares two context\r\nvalues, returning a bitfield. A consumer may specify the bits it needs\r\nfor rendering. If a providers context changes, and the consumers bits\r\ndo not intersect with the changed bits, we can skip the consumer.\r\n\r\nThis is similar to how selectors are used in Redux but fast enough to do\r\nwhile scanning the tree. The only user code involved is the function\r\nthat computes the changed bits. But thats only called once per provider\r\nupdate, not for every consumer.\r\n\r\n* Store current value and changed bits on context object\r\n\r\nThere are fewer providers than consumers, so better to do this work\r\nat the provider.\r\n\r\n* Use maximum of 31 bits for bitmask\r\n\r\nThis is the largest integer size in V8 on 32-bit systems. Warn in\r\ndevelopment if too large a number is used.\r\n\r\n* ProviderComponent -> ContextProvider, ConsumerComponent -> ContextConsumer\r\n\r\n* Inline Object.is\r\n\r\n* Warn if multiple renderers concurrently render the same context provider\r\n\r\nLets see if we can get away with not supporting this for now. If it\r\nturns out that its needed, we can fall back to backtracking the\r\nfiber return path.\r\n\r\n* Nits that came up during review\"",
                "committedDate": "2018-01-25T03:36:22Z"
            },
            {
                "commitId": "be51e6a41c096f33acf92a693026b80c98e7ddeb",
                "commitMessage": "\"Opt into unsafe lifecycle warnings without async tree (#12083)\n\nAdded new StrictMode component for enabling async warnings (without enabling async rendering). This component can be used in the future to help with other warnings (eg compilation, Fabric).\"",
                "committedDate": "2018-01-25T01:49:43Z"
            },
            {
                "commitId": "3c977dea6b96f6a9bb39f09886848da870748441",
                "commitMessage": "\"react: convert var to let/const (#11715)\"",
                "committedDate": "2017-11-30T12:08:58Z"
            },
            {
                "commitId": "f6894dc48be2e389ffae03cea736122a971e3f76",
                "commitMessage": "\"Set fragment export flags to true (#11672)\"",
                "committedDate": "2017-11-27T21:09:15Z"
            },
            {
                "commitId": "1cb6199d22af6f6ba2f55e4db18ed2f4216aaaf2",
                "commitMessage": "\" Consolidate all symbols in a single file (#11629)\n\n* Consolidate all symbols in a single file\r\n\r\nThis reduces the code duplication as we have quite a few now.\r\n\r\n* Record sizes\"",
                "committedDate": "2017-11-22T18:08:22Z"
            },
            {
                "commitId": "46f7b0d9451c2ac6f5ec5efd2c12ba77a4e054d9",
                "commitMessage": "\"Fix dead code elimination for feature flags (#11453)\n\n* Fix dead code elimination for feature flags\r\n\r\nTurning flags into named exports fixes dead code elimination.\r\n\r\nThis required some restructuring of how we verify that flag types match up. I used the Check<> trick combined with import typeof, as suggested by @calebmer.\r\n\r\nFor www, we can no longer re-export `require(ReactFeatureFlags)` directly, and instead destructure it. This means flags have to be known at init time. This is already the case so its not a problem. In fact it may be better since it removes extra property access in tight paths.\r\n\r\nFor things that we *want* to be dynamic on www (currently, only performance flag) we can export a function to toggle it, and then put it on the secret exports. In fact this is better than just letting everyone mutate the flag at arbitrary times since we can provide, e.g., a ref counting interface to it.\r\n\r\n* Record sizes\"",
                "committedDate": "2017-11-06T14:14:48Z"
            },
            {
                "commitId": "45c1ff348e1c7d03567f5bba6cb32cffa9222972",
                "commitMessage": "\"Remove unnecessary use strict in the source (#11433)\n\n* Remove use strict from ES modules\r\n\r\n* Delete unused file\r\n\r\nThis was unused since Stack.\"",
                "committedDate": "2017-11-02T20:32:48Z"
            },
            {
                "commitId": "21d0c115238b4f38837020cf83e0c657d8c01c9f",
                "commitMessage": "\"Convert the Source to ES Modules (#11389)\n\n* Update transforms to handle ES modules\r\n\r\n* Update Jest to handle ES modules\r\n\r\n* Convert react package to ES modules\r\n\r\n* Convert react-art package to ES Modules\r\n\r\n* Convert react-call-return package to ES Modules\r\n\r\n* Convert react-test-renderer package to ES Modules\r\n\r\n* Convert react-cs-renderer package to ES Modules\r\n\r\n* Convert react-rt-renderer package to ES Modules\r\n\r\n* Convert react-noop-renderer package to ES Modules\r\n\r\n* Convert react-dom/server to ES modules\r\n\r\n* Convert react-dom/{client,events,test-utils} to ES modules\r\n\r\n* Convert react-dom/shared to ES modules\r\n\r\n* Convert react-native-renderer to ES modules\r\n\r\n* Convert react-reconciler to ES modules\r\n\r\n* Convert events to ES modules\r\n\r\n* Convert shared to ES modules\r\n\r\n* Remove CommonJS support from transforms\r\n\r\n* Move ReactDOMFB entry point code into react-dom/src\r\n\r\nThis is clearer because we can use ES imports in it.\r\n\r\n* Fix Rollup shim configuration to work with ESM\r\n\r\n* Fix incorrect comment\r\n\r\n* Exclude external imports without side effects\r\n\r\n* Fix ReactDOM FB build\r\n\r\n* Remove TODOs I don\u2019t intend to fix yet\"",
                "committedDate": "2017-11-02T19:50:03Z"
            },
            {
                "commitId": "0e15ff5669271f5f5956e30a4fe1ae5963778e89",
                "commitMessage": "\"Put React.Fragment under a feature flag (#11421)\n\n* Put React.Fragment under a feature flag\r\n\r\n* Dont export undefined Fragment\"",
                "committedDate": "2017-11-01T00:43:55Z"
            },
            {
                "commitId": "4ce5da7aee90a373f2f36d1beb559097af30952e",
                "commitMessage": "\"Add Fragment as a named export to React (#10783)\n\n* Add Fragment as a named export to React\r\n\r\n* Remove extra tests for Fragment\r\n\r\n* Change React.Fragment export to be a string #fragment\r\n\r\n* Fix fragment special case to work with 1 child\r\n\r\n* Add single child test for fragment export\r\n\r\n* Move fragment definition to ReactEntry.js and render components for key warning tests\r\n\r\n* Inline createFiberFromElementType into createFiberFromElement\r\n\r\n* Update reconciliation to special case fragments\r\n\r\n* Use same semantics as implicit childsets for ReactFragment\r\n\r\n* Add more fragment state preservation tests\r\n\r\n* Export symbol instead of string for fragments\r\n\r\n* Fix rebase breakages\r\n\r\n* Re-apply prettier at 1.2.2\r\n\r\n* Merge branches in updateElement\r\n\r\n* Remove unnecessary check\r\n\r\n* Re-use createFiberFromFragment for fragment case\r\n\r\n* Simplyify branches by adding type field to fragment fiber\r\n\r\n* Move branching logic for fragments to broader methods when possible.\r\n\r\n* Add more tests for fragments\r\n\r\n* Address Dans feedback\r\n\r\n* Move REACT_FRAGMENT_TYPE into __DEV__ block for DCE\r\n\r\n* Change hex representation of REACT_FRAGMENT_TYPE to follow convention\r\n\r\n* Remove unnecessary branching and isArray checks\r\n\r\n* Update test for preserving children state when keys are same\r\n\r\n* Fix updateSlot bug and add more tests\r\n\r\n* Make fragment tests more robust by using ops pattern\r\n\r\n* Update jsx element validator to allow numbers and symbols\r\n\r\n* Remove type field from fragment fiber\r\n\r\n* Fork reconcileChildFibers instead of recursing\r\n\r\n* Use ternary if condition\r\n\r\n* Revamp fragment test suite:\r\n\r\n- Add more coverage to fragment tests\r\n- Use better names\r\n- Remove useless Fragment component inside tests\r\n- Remove useless tests so that tests are more concise\r\n\r\n* Check output of renderer in fragment tests to ensure no silly business despite states being preserved\r\n\r\n* Finish implementation of fragment reconciliation with desired behavior\r\n\r\n* Add reverse render direction for fragment tests\r\n\r\n* Remove unneeded fragment branch in updateElement\r\n\r\n* Add more test cases for ReactFragment\r\n\r\n* Handle childless fragment in reconciler\r\n\r\n* Support fragment flattening in SSR\r\n\r\n* Clean up ReactPartialRenderer\r\n\r\n* Warn when non-key and children props are passed to fragments\r\n\r\n* Add non-null key check back to updateSlots arrays case\r\n\r\n* Add test for positional reconciliation in fragments\r\n\r\n* Add warning for refs in fragments with stack trace\"",
                "committedDate": "2017-10-31T00:52:40Z"
            },
            {
                "commitId": "cc54b6f48a532bf2073e8f7d888c6a3fcf416b63",
                "commitMessage": "\"Add a shim for React 16.0.0 future compatibility (#11388)\"",
                "committedDate": "2017-10-27T16:38:59Z"
            },
            {
                "commitId": "087c48bb36b88ef0b5bbca2b9b70a52d8d413102",
                "commitMessage": "\"Reorder imports (#11359)\n\n* Reorder imports\r\n\r\n* Record sizes\"",
                "committedDate": "2017-10-25T18:07:54Z"
            },
            {
                "commitId": "1eed302d346bfb8f5db8d88b0e7096d8999d3548",
                "commitMessage": "\"Drop Haste (#11303)\n\n* Use relative paths in packages/react\r\n\r\n* Use relative paths in packages/react-art\r\n\r\n* Use relative paths in packages/react-cs\r\n\r\n* Use relative paths in other packages\r\n\r\n* Fix as many issues as I can\r\n\r\nThis uncovered an interesting problem where ./b from package/src/a would resolve to a different instantiation of package/src/b in Jest.\r\n\r\nEither this is a showstopper or we can solve it by completely fobbidding remaining /src/.\r\n\r\n* Fix all tests\r\n\r\nIt seems we cant use relative requires in tests anymore. Otherwise Jest becomes confused between real file and symlink.\r\nhttps://github.com/facebook/jest/issues/3830\r\n\r\nThis seems bad... Except that we already *dont* want people to create tests that import individual source files.\r\nAll existing cases of us doing so are actually TODOs waiting to be fixed.\r\n\r\nSo perhaps this requirement isnt too bad because it makes bad code looks bad.\r\n\r\nOf course, if we go with this, well have to lint against relative requires in tests.\r\nIt also makes moving things more painful.\r\n\r\n* Prettier\r\n\r\n* Remove @providesModule\r\n\r\n* Fix remaining Haste imports I missed earlier\r\n\r\n* Fix up paths to reflect new flat structure\r\n\r\n* Fix Flow\r\n\r\n* Fix CJS and UMD builds\r\n\r\n* Fix FB bundles\r\n\r\n* Fix RN bundles\r\n\r\n* Prettier\r\n\r\n* Fix lint\r\n\r\n* Fix warning printing and error codes\r\n\r\n* Fix buggy return\r\n\r\n* Fix lint and Flow\r\n\r\n* Use Yarn on CI\r\n\r\n* Unbreak Jest\r\n\r\n* Fix lint\r\n\r\n* Fix aliased originals getting included in DEV\r\n\r\nShouldnt affect correctness (they were ignored) but fixes DEV size regression.\r\n\r\n* Record sizes\r\n\r\n* Fix weird version in package.json\r\n\r\n* Tweak bundle labels\r\n\r\n* Get rid of output option by introducing react-dom/server.node\r\n\r\n* Reconciler should depend on prop-types\r\n\r\n* Update sizes last time\"",
                "committedDate": "2017-10-24T23:55:00Z"
            },
            {
                "commitId": "313611572b6567d229367ed20ff63d1bca8610bb",
                "commitMessage": "\"Reorganize code structure (#11288)\n\n* Move files and tests to more meaningful places\r\n\r\n* Fix the build\r\n\r\nNow that we import reconciler via react-reconciler, I needed to make a few tweaks.\r\n\r\n* Update sizes\r\n\r\n* Move @preventMunge directive to FB header\r\n\r\n* Revert unintentional change\r\n\r\n* Fix Flow coverage\r\n\r\nI forgot to @flow-ify those files. This uncovered some issues.\r\n\r\n* Prettier, I love you but youre bringing me down\r\nPrettier, I love you but youre bringing me down\r\n\r\nLike a rat in a cage\r\nPulling minimum wage\r\nPrettier, I love you but youre bringing me down\r\n\r\nPrettier, youre safer and youre wasting my time\r\nOur records all show you were filthy but fine\r\nBut they shuttered your stores\r\nWhen you opened the doors\r\nTo the cops who were bored once theyd run out of crime\r\n\r\nPrettier, youre perfect, oh, please dont change a thing\r\nYour mild billionaire mayors now convinced hes a king\r\nSo the boring collect\r\nI mean all disrespect\r\nIn the neighborhood bars Id once dreamt I would drink\r\n\r\nPrettier, I love you but youre freaking me out\r\nTheres a ton of the twist but were fresh out of shout\r\nLike a death in the hall\r\nThat you hear through your wall\r\nPrettier, I love you but youre freaking me out\r\n\r\nPrettier, I love you but youre bringing me down\r\nPrettier, I love you but youre bringing me down\r\nLike a death of the heart\r\nJesus, where do I start?\r\nBut youre still the one pool where Id happily drown\r\n\r\nAnd oh! Take me off your mailing list\r\nFor kids who think it still exists\r\nYes, for those who think it still exists\r\nMaybe Im wrong and maybe youre right\r\nMaybe Im wrong and maybe youre right\r\nMaybe youre right, maybe Im wrong\r\nAnd just maybe youre right\r\n\r\nAnd oh! Maybe mother told you true\r\nAnd therell always be somebody there for you\r\nAnd youll never be alone\r\nBut maybe shes wrong and maybe Im right\r\nAnd just maybe shes wrong\r\nMaybe shes wrong and maybe Im right\r\nAnd if so, heres this song!\"",
                "committedDate": "2017-10-19T18:50:24Z"
            },
            {
                "commitId": "fedb2ff8ecd96d11ff3f609fbffa76848203f255",
                "commitMessage": "\"Remove createClass, PropTypes, DOM factories, and createMixin from React object (#9788)\"",
                "committedDate": "2017-05-30T14:35:30Z"
            },
            {
                "commitId": "964c263d8fc6e7119f5773f7fa857c9985db40cf",
                "commitMessage": "\"Downgrade deprecation warnings from errors to warnings (#9650)\n\n* Initial regeneration of results.json\r\n\r\n**what is the change?:**\r\nWe ran `yarn build` and updated the perf. stats record.\r\n\r\n**why make this change?:**\r\nSome commits have landed without updating this. By getting an initial update, I can run the build script again after my changes and see any size regressions.\r\n\r\n* Downgrade deprecation warnings from errors to warnings\r\n\r\n**what is the change?:**\r\nSwapping out `warning` module for a fork that uses `console.warn`.\r\nIt looks like we were using the `warning` module for deprecation notices, *but* there is also a deprecated module designed specifically for deprecation notices.\r\n\r\nHowever, we could not find any place that it was currently used.\r\n\r\nSince Reacts build process is not 100% clear to me, I assume it could still be used somewhere by something and just updated it along with other deprecation notices.\r\n\r\nWe might consider a follow-up diff that does some clean up here;\r\n - remove deprecated module if its unused, OR\r\n - use deprecated module for all our current deprecation warnings\r\n\r\n**why make this change?:**\r\n- We have had complaints about noisy warnings, in particular after introducing new deprecations\r\n- They potentially cause CI failures\r\n- Deprecations are not really time-sensitive, can ship without breaking your app, etc.\r\n\r\nFor more context - https://github.com/facebook/react/issues/9395\r\n\r\n**test plan:**\r\n`npm run test`\r\nand unit tests for the new modules\r\nand manual testing (WIP)\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9395\r\n\r\n* Add lowPriorityWarning to ReactExternals\r\n\r\n**what is the change?:**\r\nWe wont bundle lowPriorityWarning with the rest of React when building for Facebook.\r\nNOTE: A parallel commit will introduce an internal implementation of lowPriorityWarning in Facebooks codebase, to compensate. Will post a comment with the diff number once that is up.\r\n\r\n**why make this change?:**\r\nSo that the sync between github and Facebook can go more smoothly!\r\n\r\n**test plan:**\r\nWe will see when I run the sync! But this is a reasonable first step imo.\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9398\r\n\r\n* Make state mutations an error, not low-pri warning\r\n\r\n**what is the change?:**\r\nEven though this is a \"deprecation\" warning, we still want to use console.error for it.\r\n\r\n**why make this change?:**\r\n- Its not likely to come up now, hopefully, because this warning has been present for some time\r\n- This will cause real issues in production if ignored\r\n\r\n**test plan:**\r\n`yarn test` - we did fix one test which failed bc of this change\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9398\r\n\r\n* Fix test of assigning to this.state that was only passing in fiber\r\n\r\n**what is the change?:**\r\nupdated a unit test for assigning directly to state; it once again raises an error and not a warning.\r\n\r\n**why make this change?:**\r\nSo that tests pass\r\n\r\n**test plan:**\r\n REACT_DOM_JEST_USE_FIBER=1 yarn run test\r\n\r\n**issue:**\r\n\r\n* Update results.json\"",
                "committedDate": "2017-05-23T16:35:42Z"
            },
            {
                "commitId": "e71b3087c81d95c3e7d3f015d0db60436c95fe6c",
                "commitMessage": "\"Added stack renderer to react-test-renderer bundle temporarily (#9514)\n\nAlso fixed an error in a temporary export property that had been added to the React object\"",
                "committedDate": "2017-04-25T01:45:43Z"
            },
            {
                "commitId": "86dd083f455f71369b4c1bf1e798dd2fd5a3c9c4",
                "commitMessage": "\"Move ReactDOMFactories into separate package (#8356)\n\n- Update examples to no longer use React.DOM\r\n- Add package and documentation entries for react-addons-dom-factories\r\n- Update dom-factories readme\r\n- Set up proxy to intercept React.DOM usage\r\n- Update ReactDOM children tests to use createElement\r\n- Add more specific warning assertion for React DOM factories\r\n- Do not use expectDev in ReactDOMFactories tests\"",
                "committedDate": "2017-04-24T15:08:17Z"
            },
            {
                "commitId": "66f2097f33a3084c79aa536e11d3ca09195bc320",
                "commitMessage": "\"Shallow renderer and test utils bundles (#9426)\n\nShallow renderer and test utils bundles\r\n\r\nAdds new bundles introduced with React 15.5 release to master (and 16 alpha)\r\n\r\nreact-dom/test-utils:\r\n\r\nThis new bundle contains what used to be react-addons-test-utils. This bundle shares things from react-dom rather than duplicates them.\r\n\r\nA temporary createRenderer method has been left behind as a way to access the new shallow renderer. This is for the ReactNative release cycle only and should be going away before the final release.\r\n\r\nreact-test-renderer/shallow:\r\n\r\nThis new shallow renderer is almost entirely stand-alone (in that it doesnt use the React reconciler or scheduler). The only touch points are ReactElement and prop/context validation. This renderer is stack and fiber compatible.\"",
                "committedDate": "2017-04-19T23:45:31Z"
            },
            {
                "commitId": "2beec2f308e27dbe902a8d68e1fc9f3d70ee9372",
                "commitMessage": "\"createClass + PropTypes + checkPropTypes warnings (#9399)\n\n(Temporarily) re-adds getters with deprecation warnings for React.PropTypes, React.checkPropTypes, and React.createClass.\r\n\r\n* 08bd020: Replace all references to React.PropTypes with prop-types to avoid triggering our own warning message.\r\n* ef5b5c6: Removed several references to React.createClass that appeared after rebasing this branch. (reviewed by @flarnie)\r\n* 524ce20: Added getters for createClass and PropTypes to the main React isomorphic object, behind one-time warning messages. (reviewed by @spicyj)\r\n* db48f54: Fixed Rollup bundles to inline prop-types and create-react-class for UMD builds only. (reviewed by @spicyj, @trueadm )\r\n* cf49cfd: Updated tests-passing.txt to remove tests that were deleted in this branch.\r\n* d34109a: Responses to PR feedback from @spicyj. (Added package.json dependencies to packages/react and packages/react-dom. Renamed a var. Expanded on an inline comment.)\r\n* 488c8d2: Added warning for moved package to React.checkPropTypes accessor too and updated build script.\r\n* 83bcb29: Wordsmithing for deprecation notices (added fb.me links).\r\n* afdc9d2: Tweaked legacy module inlining to remove order-of-deps constraint\r\n* d1348b9: Removed $FlowFixMe.\r\n* 7dbc3e7: More wordsmithing of deprecation notices based on Dans feedback.\"",
                "committedDate": "2017-04-11T21:28:03Z"
            },
            {
                "commitId": "957fbc92b123030c389bf8b4b874522bdf2db72c",
                "commitMessage": "\"react-create-class -> create-react-class\"",
                "committedDate": "2017-04-11T00:06:32Z"
            },
            {
                "commitId": "646e7863348a427e1ed9163a9a96fa759112f102",
                "commitMessage": "\"Warn once when attempting to access React.createClass\n\nShould still be undefined.\"",
                "committedDate": "2017-04-11T00:03:05Z"
            },
            {
                "commitId": "5cfaa7cf68564b8d96c94fa0d45e7feb6dc80895",
                "commitMessage": "\"Delete createClass\n\nRemove createClass from isomorphic package\"",
                "committedDate": "2017-04-11T00:03:05Z"
            },
            {
                "commitId": "72196da82915bee400edb1599d4223926aa2a8a0",
                "commitMessage": "\"Replace shims with explicit React access from the renderers for shared global state (#9366)\n\n* Remove non-existent /lib/ from souce files\r\n\r\n* Replace all shims with explicit access\r\n\r\nThis deletes shims and changes to access require(react).__DO_NOT_USE__ from renderers for global shared state.\r\n\r\nI cloned flattenChildren() and traverseAllChildren() because they relied on CurrentOwner but were used both from Stack and Isomorphic. The stack implementations will die, and the isomorphic ones can be changed to be optimized for Children specifically in the future.\r\n\r\nI also deleted UMD shims because they are now unnecessary. I moved the internals assignment to main modules since theyre now used in tests, and made them direct UMD entry points.\"",
                "committedDate": "2017-04-07T21:07:10Z"
            },
            {
                "commitId": "b1b4a2fb252f26fe10d29ba60d85ff89a85ff3ec",
                "commitMessage": "\"Merge pull request #9101 from sebmarkbage/prettier\n\nUse Prettier\"",
                "committedDate": "2017-03-14T22:33:27Z"
            },
            {
                "commitId": "1843f8716803d380df34a7362d80022352853931",
                "commitMessage": "\"Run prettier\"",
                "committedDate": "2017-03-14T00:05:18Z"
            },
            {
                "commitId": "8bc11649df767402c262b6c9b67c6dd811d42cd0",
                "commitMessage": "\"Merge branch master into remove-stack-dependencies-from-tests\"",
                "committedDate": "2017-03-01T12:32:36Z"
            },
            {
                "commitId": "e452e3374135c116ef687a8bb3a5d277e3cde8fb",
                "commitMessage": "\"providesModule -> explicit requires for cross-package dependencies (#9078)\n\n* Add forwarding modules\r\n\r\n* Codemod to use full package path outside of own package\r\n\r\nFiles that require modules from a different package than their own now\r\ndoes so by the npm path name instead of the providesModule.\r\n\r\n* Codemod fbjs module dependencies\r\n\r\n* Fix gulp module mapping config\r\n\r\nThis is a bit lame but because of our module rewrite we need to white\r\nlist all the paths that we dont *dont* want to rewrite.\"",
                "committedDate": "2017-03-01T02:42:52Z"
            },
            {
                "commitId": "f3c2d9f308eeee49d9c580c063ec7a109e9ad635",
                "commitMessage": "\"Merge pull request #9004 from acdlite/proptypescheck\n\nAPI for checking external objects against React prop types\"",
                "committedDate": "2017-02-23T22:37:19Z"
            },
            {
                "commitId": "03ed3437c988f294045770bf403839603ce00ae9",
                "commitMessage": "\"Fix build config\n\nReactDebugCurrentFrame is shared state.\n\ncheckPropTypes should be imported via the main React export,\nnot imported directly.\"",
                "committedDate": "2017-02-23T19:14:15Z"
            },
            {
                "commitId": "77c7792556e4697636d1eb5dc34042566185c26c",
                "commitMessage": "\"Remove React.__spread\"",
                "committedDate": "2017-02-10T20:27:02Z"
            },
            {
                "commitId": "7e8068b9840dd98813787736385919683ddf2002",
                "commitMessage": "\"Move component base classes into a single file (#8918)\"",
                "committedDate": "2017-02-02T20:24:39Z"
            },
            {
                "commitId": "2be0583ed37ffc22fefe61292a12daee083e6ed9",
                "commitMessage": "\"Update deprecation wording to be less aggressive\"",
                "committedDate": "2017-01-24T06:18:23Z"
            },
            {
                "commitId": "2b7814f713629d3f629ea9d74f349b77369fdae3",
                "commitMessage": "\"Deprecate React.createMixin\n\nThis API was never fully implemented. Since mixins are no longer considered part of the future React API, it will be removed.\"",
                "committedDate": "2017-01-24T06:18:23Z"
            },
            {
                "commitId": "c8fbdac22717e91d1f1638a932eed3ce4cc39ff7",
                "commitMessage": "\"Add React.PureComponent (#7195)\n\nThis provides an easy way to indicate that components should only rerender when given new props, like PureRenderMixin. If you rely on mutation in your React components, you can continue to use `React.Component`.\r\n\r\nInheriting from `React.PureComponent` indicates to React that your component doesnt need to rerender when the props are unchanged. Well compare the old and new props before each render and short-circuit if theyre unchanged. Its like an automatic shouldComponentUpdate.\"",
                "committedDate": "2016-07-06T20:24:44Z"
            },
            {
                "commitId": "d955ee9fae71e2037e9c876e2ab8cb537a8c7e43",
                "commitMessage": "\"Move ReactElementValidator to __DEV__ block (#6830)\n\nIt saves some more bytes in production mode.\"",
                "committedDate": "2016-05-22T09:01:21Z"
            },
            {
                "commitId": "6c885d28c51ea30af0d8a4031dedcea98ef4114c",
                "commitMessage": "\"Remove duplicates and move files out of native/vendor\n\nMoving the event plugins into their dedicated folder\n\nRemoving the ExecutionEnvironment override. I will just have to fix where needed. Probably related to the Chrome debugger?\"",
                "committedDate": "2016-04-20T02:35:30Z"
            },
            {
                "commitId": "f463b731ee5fce75ccf1df43d6174527016a0379",
                "commitMessage": "\"Copy files from the react-native repo\"",
                "committedDate": "2016-04-20T02:35:30Z"
            },
            {
                "commitId": "516c1d809ea56dbd109f54712efea6923ac76ee6",
                "commitMessage": "\"Merge pull request #6444 from zpao/re__spreadwarn\n\nAdd back React.__spread and make it warn\"",
                "committedDate": "2016-04-08T00:30:44Z"
            },
            {
                "commitId": "fc1cfb6225f5c3af6843515363db63ed3dcbb824",
                "commitMessage": "\"Make React.__spread warn\"",
                "committedDate": "2016-04-08T00:30:23Z"
            },
            {
                "commitId": "f02d87bdb55ebd84943c5da5d6de92e3488fa2bc",
                "commitMessage": "\"Revert \"Merge pull request #6431 from sebmarkbage/killspread\"\n\nThis reverts commit a37e4e94fcae9424094378349dc11bafe1e47973, reversing\nchanges made to 411951d5b8a4a467adc213d4533c87a7c3b06bf8.\"",
                "committedDate": "2016-04-07T23:16:37Z"
            },
            {
                "commitId": "a37e4e94fcae9424094378349dc11bafe1e47973",
                "commitMessage": "\"Merge pull request #6431 from sebmarkbage/killspread\n\nKill React.__spread\"",
                "committedDate": "2016-04-07T01:42:45Z"
            },
            {
                "commitId": "a142fd257803a218b5b9b2e76c327f0421b9b8b6",
                "commitMessage": "\"Kill React.__spread\n\nThis was only for a JSTransform related experiment that is now\ndead along with JSTransform.\"",
                "committedDate": "2016-04-07T00:08:50Z"
            },
            {
                "commitId": "80bff5397bf854750dbe7c286f61654ea58938c5",
                "commitMessage": "\"Merge pull request #6376 from zpao/object.assign\n\nUse object-assign instead of our own dated \"polyfill\"\"",
                "committedDate": "2016-04-04T17:21:39Z"
            },
            {
                "commitId": "1573baaee8ba1c9cd84145b01effcb5eb80503fb",
                "commitMessage": "\"Use Object.assign directly and inject object-assign at compile\"",
                "committedDate": "2016-04-04T16:53:25Z"
            },
            {
                "commitId": "6a8ebfc41842fb200c87a919478dcd3aa95be0d7",
                "commitMessage": "\"Merge pull request #6331 from zpao/isonpmorphic\n\nMake Browserify-specific modules to remove DOM dependencies from npm package\"",
                "committedDate": "2016-03-24T23:01:51Z"
            },
            {
                "commitId": "d17091ddebf317173eb30e3ab4a8e28e124c8f50",
                "commitMessage": "\"Make Browserify-specific modules to remove DOM dependencies from npm package\"",
                "committedDate": "2016-03-24T22:28:52Z"
            },
            {
                "commitId": "209b7522d99a8af36f8d9e06ce622c59b793e5a3",
                "commitMessage": "\"update zh-docs14.3 ,fixed confliction\"",
                "committedDate": "2016-01-14T10:38:07Z"
            },
            {
                "commitId": "fcc63e1fff7709d8cc749a6a54f788b0a5ab0983",
                "commitMessage": "\"Merge pull request #5832 from jimfb/cleanup-top-level-dom-api\n\nRemove DOM functions from top-level isomorphic API\"",
                "committedDate": "2016-01-13T23:41:03Z"
            },
            {
                "commitId": "2e1fb4b52972711199d5065625251642f7d75c29",
                "commitMessage": "\"Remove DOM functions from top-level isomorphic API\"",
                "committedDate": "2016-01-12T07:57:08Z"
            },
            {
                "commitId": "3b96650e39ddda5ba49245713ef16dbc52d25e9e",
                "commitMessage": "\"Merge pull request #5748 from rickbeerendonk/year-agnostic-copyright\n\nYear-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.\"",
                "committedDate": "2015-12-30T07:24:24Z"
            },
            {
                "commitId": "bef45b0b1a98ea9b472ba664d955a039cf2f8068",
                "commitMessage": "\"Year-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.\"",
                "committedDate": "2015-12-29T19:20:32Z"
            },
            {
                "commitId": "c07b304c76ac9cdc4bae875391e7902cf0e8e2f3",
                "commitMessage": "\"Merge pull request #5381 from kevinrobinson/react-dom-server-package\n\nAdd additional secret property to build artifact for react-dom-server\"",
                "committedDate": "2015-11-18T00:48:08Z"
            },
            {
                "commitId": "45c612ed7a56b91f4c1d056c824de54673a2c241",
                "commitMessage": "\"Add additional secret property and build for react-dom-server\n\nUpdate eslintrc, travis build and add task to Gruntfile\"",
                "committedDate": "2015-11-03T21:39:58Z"
            },
            {
                "commitId": "69ab7145bc36a500195ccf0e2937ded21520582f",
                "commitMessage": "\"Merge pull request #4814 from zpao/build-react-dom-browser-2\n\nBuild react dom browser 2\"",
                "committedDate": "2015-09-09T05:33:08Z"
            },
            {
                "commitId": "b2ca3349c27b57b1e9462944cbe4aaaf76783d2b",
                "commitMessage": "\"Actually build react-dom file with the build\"",
                "committedDate": "2015-09-09T05:18:44Z"
            },
            {
                "commitId": "c0270a167397f7083f77012d43180cc22bbae13e",
                "commitMessage": "\"Merge pull request #4798 from zpao/pull-out-version\n\nMove version to standalone module in preparation for reuse\"",
                "committedDate": "2015-09-08T23:30:05Z"
            },
            {
                "commitId": "58d62989bd4e8da32e58db35a96868ef2258c2c9",
                "commitMessage": "\"Move version to standalone module in preparation for reuse\"",
                "committedDate": "2015-09-08T17:18:41Z"
            },
            {
                "commitId": "4b9c349fd057b3c4b1a0fab5fbdf5bd0c625db8d",
                "commitMessage": "\"Merge pull request #4702 from spicyj/react-mod-depr\n\nAdd deprecation warnings to React module\"",
                "committedDate": "2015-09-01T21:40:48Z"
            },
            {
                "commitId": "c04d02e5e8de18436ac95037ab856ac5ba7d29b9",
                "commitMessage": "\"Add warnings to React module\"",
                "committedDate": "2015-09-01T21:36:41Z"
            },
            {
                "commitId": "3f6bca7b1638ee940bb01989377abc9864edb6fe",
                "commitMessage": "\"0.14.0-beta3\"",
                "committedDate": "2015-08-03T21:24:24Z"
            },
            {
                "commitId": "681bbb629fa80a67fa79ced11e5a4cad6c1878fe",
                "commitMessage": "\"0.14.0-beta2\"",
                "committedDate": "2015-07-31T04:29:09Z"
            },
            {
                "commitId": "d16481d0e7d23771c5d94e5a0eeaf64e02f07979",
                "commitMessage": "\"Merge pull request #4453 from spicyj/react-dom\n\nRename ReactDOMClient to ReactDOM\"",
                "committedDate": "2015-07-23T18:27:25Z"
            },
            {
                "commitId": "6c20271488d8abfa82dda14fd8d2a947549c21d7",
                "commitMessage": "\"Rename ReactDOMClient to ReactDOM\n\nThis closer matches the npm package name and (I assume) is what we want to call it internally.\"",
                "committedDate": "2015-07-22T02:30:09Z"
            },
            {
                "commitId": "b4e74e38e43ac53af8acd62c78c9213be0194245",
                "commitMessage": "\"Bump version to beta1\"",
                "committedDate": "2015-07-03T08:46:35Z"
            },
            {
                "commitId": "8471cc5f47bac0dbfd6b3123775fc28757db0ed3",
                "commitMessage": "\"0.14.0-alpha3\"",
                "committedDate": "2015-05-27T23:47:35Z"
            },
            {
                "commitId": "b687a229530dc304fbb74018027156968258c295",
                "commitMessage": "\"0.14.0-alpha2\"",
                "committedDate": "2015-05-20T20:37:42Z"
            },
            {
                "commitId": "52752446760dee0bc7232b4146f5a309ac57f065",
                "commitMessage": "\"Merge pull request #3866 from sebmarkbage/coreapi\n\nReorganize Src Directory for Isomorphic React Package\"",
                "committedDate": "2015-05-16T01:39:36Z"
            },
            {
                "commitId": "0b063f8a09dae4b6b1de400ff2d9aba9108647de",
                "commitMessage": "\"Reorganize Src Files for Isomorphic React Package\n\nThe new folder structure is organized around major packages that are expected to ship separately in some form.\n\n`/isomorphic`\n\nI moved classic/modern and children utils into a directory called \"isomorphic\" with the main export being ReactIsomorphic. This will eventually become the \"react\" package.\n\nThis includes all the dependencies that you might need to create a component without dependencies on the renderer/reconciler.\n\nThe rest moves into decoupled renderers.\n\n`/renderers/dom/client` - This is the main renderer for DOM.\n\n`/renderers/dom/server` - This is the server-side renderer for HTML strings.\n\n`/addons` and `/test` - Same as before for now.\n\nYoure not supposed to take on a dependency inside another package.\n\nShared code is organized into a \"shared\" directory which is intended to support all the packages in that subdirectory. Meaning that once we swap to CommonJS modules, the only time you should use `..` is to target `../shared/` or `../../shared`.\n\nE.g. `/shared/` is common utils that are used by everything.\n\n`/renderers/shared/` is code that is shared by all renderers, such as the main reconciliation algorithm.\n\nShared code will likely be copied into each package rather than referenced. This allow us to have separate state and allow inlining and deadcode elimination.\"",
                "committedDate": "2015-05-16T01:35:22Z"
            },
            {
                "commitId": "7839e072313db4a21c246bb1e35e1f510139bb12",
                "commitMessage": "\"0.14.0-alpha1\"",
                "committedDate": "2015-05-11T05:36:50Z"
            },
            {
                "commitId": "4f285b7ba07b3153a0b9b61c35fc05da37ebdd9e",
                "commitMessage": "\"Merge pull request #3676 from zpao/rm-withContext\n\nRemove withContext from top-level API\"",
                "committedDate": "2015-04-22T16:45:26Z"
            },
            {
                "commitId": "088d71c7c1eaef9a14ccccabe05b73a57c755703",
                "commitMessage": "\"Merge pull request #3693 from reedloden/swap-http-to-https\n\nSSL/TLSize all the things! (convert http:// to https:// where appropriate)\"",
                "committedDate": "2015-04-20T18:02:29Z"
            },
            {
                "commitId": "3e8951e8c7dcb44035c8524c0fd82967652d41dd",
                "commitMessage": "\"SSL/TLSize all the things! (convert http:// to https:// where appropriate)\n\nUpdate links to use https:// where it is supported. Theres probably a lot\nmore that could be fixed, but these are the core ones I found (especially\nthe download links in order to prevent MITM attacks). Note that there are\nsome fb.me links that will redirect to http:// even while accessed over\nhttps://, but this seemed like the best way to fix those for now.\n\nNOTE: Only non-third-party files were modified. There are references to\nhttp:// URLs in vendored/third-party files, but seems appropriate to fix\nupstream for those rather than editing the files.\n\nAlso, copy one image locally to the blog, as it was hotlinking to a site\nthat did not support https://.\n\nLast, use youtube-nocookie.com instead of youtube.com for video embeds,\nas the former doesnt try to set a cookie on load (privacy enhancement).\"",
                "committedDate": "2015-04-18T23:49:32Z"
            },
            {
                "commitId": "5297ff66cf8f9b6459d6cf73d4e3a54cc010b34d",
                "commitMessage": "\"Remove withContext from top-level API\"",
                "committedDate": "2015-04-16T22:58:27Z"
            },
            {
                "commitId": "88fb106c39545fdfea71e56f55418b8058e6b3e6",
                "commitMessage": "\"Merge pull request #3646 from facebook/revert-3580-2402-warn-multiple-copies-of-react-on-same-page\n\nRevert \"Warn when multiple instances of React are loaded on the same page\"\"",
                "committedDate": "2015-04-10T20:54:57Z"
            },
            {
                "commitId": "8fa15080b2eafa0ab998f0e3745971af40e13e69",
                "commitMessage": "\"Revert \"Warn when multiple instances of React are loaded on the same page\"\"",
                "committedDate": "2015-04-10T19:34:04Z"
            },
            {
                "commitId": "f1cd867323c420c577f82628ba498637a3d6e5f7",
                "commitMessage": "\"Merge pull request #3580 from robertknight/2402-warn-multiple-copies-of-react-on-same-page\n\nWarn when multiple instances of React are loaded on the same page\"",
                "committedDate": "2015-04-09T02:18:44Z"
            },
            {
                "commitId": "8ad58ae45a4fd3a5def5732fc377f1351950c4dd",
                "commitMessage": "\"Warn when multiple instances of React are loaded on the same page\n\nThis causes a variety of hard-to-debug issues.\nSee #2402 for examples.\n\nFixes #2402\"",
                "committedDate": "2015-04-03T10:46:58Z"
            },
            {
                "commitId": "7fe5a3aadd308961d5557ba1060eaca14a22f825",
                "commitMessage": "\"Merge pull request #3442 from spicyj/kill-initializeTouchEvents\n\nKill React.initializeTouchEvents for good\"",
                "committedDate": "2015-03-19T21:15:26Z"
            },
            {
                "commitId": "26664315a61af6a39441387be8bd5f45c0dbed2a",
                "commitMessage": "\"Merge pull request #3438 from spicyj/lint\n\nLint fixes\"",
                "committedDate": "2015-03-17T21:14:57Z"
            },
            {
                "commitId": "9c4c2f58ea103f84c055d2241c0f178c79d90fd9",
                "commitMessage": "\"Kill React.initializeTouchEvents for good\n\nNow that #1169 is fixed, the only thing this is used for is to determine whether `onTouchTap` causes touch listeners to be added. The only internal uses of TapEventPlugin are where touch events are already initialized (so this doesnt make a difference) and we dont support `onTouchTap` as part of the public API so this should be safe.\"",
                "committedDate": "2015-03-17T21:12:26Z"
            },
            {
                "commitId": "c34fa7f3d22d04a7089fc8930b06be9e73f4b0d5",
                "commitMessage": "\"Lint fixes\"",
                "committedDate": "2015-03-17T20:30:15Z"
            },
            {
                "commitId": "53f92bf8587b64e0803b66b8bf7f337add2e75a3",
                "commitMessage": "\"Fix comma splice and line length\"",
                "committedDate": "2015-03-10T22:36:27Z"
            },
            {
                "commitId": "645a6caaf5606af9d8479000426e9cb94aeada3b",
                "commitMessage": "\"Merge pull request #3323 from jonhester/ie8-compat-mode\n\nwarn if IE8 is in compatibility mode\"",
                "committedDate": "2015-03-10T22:35:09Z"
            },
            {
                "commitId": "e313616be7a6525924e8b822772fa0669e756472",
                "commitMessage": "\"Bump version so we can get back to work\"",
                "committedDate": "2015-03-10T22:06:35Z"
            },
            {
                "commitId": "65c4aeaa3a8fb80be4f6f9f3d978601aad678b9f",
                "commitMessage": "\"use warning module instead of console.debug\"",
                "committedDate": "2015-03-05T18:53:12Z"
            },
            {
                "commitId": "a999ac1ac30bd7ec9db152027fc480ea34652b5d",
                "commitMessage": "\"warn if IE8 is in compatibility mode\"",
                "committedDate": "2015-03-05T13:48:28Z"
            },
            {
                "commitId": "21b41480a531199ff48034c513288765950409d4",
                "commitMessage": "\"v0.13.0-rc2\"",
                "committedDate": "2015-03-03T19:46:01Z"
            },
            {
                "commitId": "ecc4ad569a5730748f00a5cceb118629fa01235b",
                "commitMessage": "\"Merge pull request #3266 from sebmarkbage/cloneelement\n\nAdd cloneElement Implementation\"",
                "committedDate": "2015-03-02T20:15:20Z"
            },
            {
                "commitId": "4adcee69a04058a4858837752e7e8f011bb652f9",
                "commitMessage": "\"Add cloneElement Implementation\n\nThis is a new version of cloneWithProps but this one is moving out of\nadd-ons. Unlike cloneWithProps, this one doesnt have special logic for\nstyle, className and children.\n\nThis one also preserves the original ref. This is critical when upgrading\nfrom a mutative pattern where a child might have a ref on it.\n\nIt also preserves context, which is similar to how context would work when\nit is parent based. It also ensures that were compatible with the old\nmutative pattern which makes updates easier.\"",
                "committedDate": "2015-02-26T09:17:05Z"
            },
            {
                "commitId": "06126ad3f4d063e89b3168abce79c9cd9961831c",
                "commitMessage": "\"v0.13.0-rc1\"",
                "committedDate": "2015-02-22T21:26:13Z"
            },
            {
                "commitId": "5126cee0f521e2e546e37560df2fe3967039a034",
                "commitMessage": "\"v0.13.0-beta.2\"",
                "committedDate": "2015-02-14T02:28:03Z"
            },
            {
                "commitId": "50c38bbc7598f1537c2928d370de78acce6a81c1",
                "commitMessage": "\"Merge pull request #3023 from sebmarkbage/devtoolsfix\n\nExpose ReactReconciler\"",
                "committedDate": "2015-02-03T06:07:28Z"
            },
            {
                "commitId": "e67ff7ee78620448badba2cf8ac3af6ee2893d6f",
                "commitMessage": "\"Expose ReactReconciler\n\nThis can be used by devtools to monkey patch the reconciler and therefore\nget notified whenever any internal instance is updated.\"",
                "committedDate": "2015-02-03T02:15:31Z"
            },
            {
                "commitId": "2aeb8a2a6beb00617a4217f7f8284924fa2ad819",
                "commitMessage": "\"Merge pull request #2995 from rickbeerendonk/copyright-2015\n\nUpdate copyright headers for 2015\"",
                "committedDate": "2015-02-02T19:15:30Z"
            },
            {
                "commitId": "3e0750a4ad2444c2df708b144ff0c8af7628881d",
                "commitMessage": "\"Update copyright headers for 2015\"",
                "committedDate": "2015-01-31T19:18:25Z"
            },
            {
                "commitId": "5bd078508a1beb500b801eb7de9488927a874376",
                "commitMessage": "\"v0.13.0-beta.1\"",
                "committedDate": "2015-01-28T05:13:35Z"
            },
            {
                "commitId": "61c4497d58690b179588d87defa7d9499e3a58f7",
                "commitMessage": "\"Merge pull request #2959 from sebmarkbage/createmixin\n\nWe dont currently have a way to trace the origin of a mixin\"",
                "committedDate": "2015-01-27T18:39:25Z"
            },
            {
                "commitId": "b3f96d97f954188049854ed4599cbd77158c3ae3",
                "commitMessage": "\"Merge pull request #2957 from sebmarkbage/renamecomponent\n\nRename ReactComponentBase -> ReactComponent\"",
                "committedDate": "2015-01-27T18:39:07Z"
            },
            {
                "commitId": "295ef0063b933e13b2ddd541c108b386b35b648b",
                "commitMessage": "\"We dont currently have a way to trace the origin of a mixin\n\nThis makes it more difficult to find bugs in mixins both dynamically\nand using a static type system.\n\nWe also dont have a way to find these to be upgraded to a new mixin\nsyntax if we needed to.\n\nThis hook is currently an optional noop but could be made required to\ncreate a mixin class.\"",
                "committedDate": "2015-01-27T17:36:14Z"
            },
            {
                "commitId": "c3c98084b94a359adbfcf84b88b3c901aade50b9",
                "commitMessage": "\"Rename ReactComponentBase -> ReactComponent\n\nWe freed up this internal name by removing the internal base class.\nWere now free to use this name as it was intended.\n\nReactDOMComponent and ReactCompositeComponent are still confusing as\ntheyre internal but well rename them later.\"",
                "committedDate": "2015-01-27T17:22:07Z"
            },
            {
                "commitId": "1c90efbf7cc982dcecaa2044f18d27df5ae876a1",
                "commitMessage": "\"Merge pull request #2923 from sebmarkbage/dropcomponentmixin\n\nReplace ReactComponentMixin with ReactReconciler\"",
                "committedDate": "2015-01-24T02:06:50Z"
            },
            {
                "commitId": "690409a91239e04a38f3f819f8c5b13a6c60b114",
                "commitMessage": "\"Replace ReactComponentMixin with ReactReconciler\n\nInstead of putting the shared code in a base class method, we use a wrapper\ncall around all invokations. That way theyre free to add code before AND\nafter the non-shared code.\n\nThat way we ensure that component extensions dont need to implement\nReactComponentMixin and do super() calls into it. This helps to create a\ntighter API for custom component extensions.\n\nThis provides the first step towards moving these methods to static\nmethods which allows to use a different dispatch mechanism instead of\nvirtual method calls. E.g. pattern matching.\"",
                "committedDate": "2015-01-24T01:27:42Z"
            },
            {
                "commitId": "8616a6f60e8eeaba9988a4ade56a59cb3c4ea73d",
                "commitMessage": "\"Merge pull request #2919 from sebmarkbage/removecreateref\n\nRemove React.createRef API\"",
                "committedDate": "2015-01-23T03:13:55Z"
            },
            {
                "commitId": "a3a464c8fcd2fc9d04a5765f41f56315c12de44a",
                "commitMessage": "\"Remove React.createRef API\n\nThis API was removed so this wont work.\"",
                "committedDate": "2015-01-23T03:11:11Z"
            },
            {
                "commitId": "deae575dae1295572b9f8694232eab68c2c6a84e",
                "commitMessage": "\"v0.13.0-alpha.2\"",
                "committedDate": "2015-01-16T18:33:42Z"
            },
            {
                "commitId": "54c82da15f6b4717425edbf68e23ae82583a50af",
                "commitMessage": "\"Merge pull request #2751 from zpao/eslint-fixup\n\nEslint fixup\"",
                "committedDate": "2015-01-13T23:27:54Z"
            },
            {
                "commitId": "df64a67b7f930f90423e194637af624cdc155526",
                "commitMessage": "\"codemod \"use strict\" to use strict for better linting\"",
                "committedDate": "2015-01-13T23:26:32Z"
            },
            {
                "commitId": "d138f9a35ba9b639d9ec0cb59b58146f6e657a68",
                "commitMessage": "\"Merge pull request #2805 from sebmarkbage/baseclass1\n\nIntroducing ReactComponentBase base class\"",
                "committedDate": "2015-01-13T19:00:56Z"
            },
            {
                "commitId": "ff032dc8576fec0bf6dbeeaf5d53325c2010d284",
                "commitMessage": "\"Introducing ReactComponentBase base class\n\nThis is the base class that will be used by ES6 classes.\n\nIm only moving setState and forceUpdate to this base class and the other\nfunctions are disabled for modern classes as were intending to deprecate\nthem. The base classes only have getters that warn if accessed. Its as if\nthey didnt exist.\n\nReactClass now extends ReactComponentBase but also adds the deprecated\nmethods. They are not yet fully deprecated on the ReactClass API.\n\nI added some extra tests to composite component which we werent testing\nto avoid regressions.\n\nI also added some test for ES6 classes. These are not testing the new\nstate initialization process. Thats coming in a follow up.\"",
                "committedDate": "2015-01-13T18:54:19Z"
            },
            {
                "commitId": "3fec78638deb5926b25063dc9f3fe8eef5140751",
                "commitMessage": "\"v0.13.0-alpha.1\n\nBumping version numbers so we can push to npm.\"",
                "committedDate": "2014-12-23T20:04:23Z"
            },
            {
                "commitId": "e0725341cf1046d54c186a66c74ee7f986d4f36a",
                "commitMessage": "\"Merge pull request #2646 from jsfb/getDOMNode-becomes-findDOMNode\n\nAdded findDOMNode, as we move toward deprecating getDOMNode\"",
                "committedDate": "2014-12-22T21:05:49Z"
            },
            {
                "commitId": "b46a6ce4bb8d6087ed424764f41fe4b8e248b3b4",
                "commitMessage": "\"Added findDOMNode, as we move toward deprecating getDOMNode\"",
                "committedDate": "2014-12-18T21:55:44Z"
            },
            {
                "commitId": "42ae61d0653fe2a7709c68c818bb0ef1f46b1552",
                "commitMessage": "\"Merge pull request #2655 from zpao/rm-deprecated\n\nRemove deprecated methods since 0.12 shipped\"",
                "committedDate": "2014-12-14T22:33:16Z"
            },
            {
                "commitId": "c46dadea55728a5c782861c15ed4989221c0674e",
                "commitMessage": "\"Remove deprecated methods since 0.12 shipped\"",
                "committedDate": "2014-12-14T22:19:44Z"
            },
            {
                "commitId": "ba95ce7b6f366c60afdefa7d2cc0f508a443d702",
                "commitMessage": "\"Merge pull request #2677 from zpao/lint-internal\n\nFix new lint errors\"",
                "committedDate": "2014-12-08T20:22:06Z"
            },
            {
                "commitId": "739baa90927d06e7e2267c65b1221931a20784a4",
                "commitMessage": "\"Fix new lint errors\n\nWell get to lint parity soon and then not need to do this.\"",
                "committedDate": "2014-12-08T20:18:41Z"
            },
            {
                "commitId": "230115da9210f389e60f7eb0e402de1a06b5f269",
                "commitMessage": "\"Make ReactTextComponent properly injectable\n\nReactTextComponents implementation is DOM-specific; instead of flattenChildren creating the ReactTextComponent instances, ReactNativeComponent now takes care of having ReactTextComponent injected and creating the component instance. I also renamed ReactTextComponent to ReactDOMTextComponent and moved it to browser/ui/ where it belongs. ReactDOMTextComponent no longer inherits directly from ReactComponent and instead implements construct and {mount,receive,unmount}Component directly.\n\nThis diff removes `ReactTestUtils.isTextComponent` which should have previously never returned true when using public APIs.\n\nTest Plan: jest, use ballmer-peak example.\"",
                "committedDate": "2014-11-15T20:30:42Z"
            },
            {
                "commitId": "9edc6260a7db25f888259fddedb4aa2250f6385f",
                "commitMessage": "\"Initial implementation of new-style refs\n\ncf. #1373\n\nThis implementation can be used in any situation that refs can currently be used (and can also be used without an owner, which is a plus).\"",
                "committedDate": "2014-11-06T03:28:12Z"
            },
            {
                "commitId": "b5bcaba77fbe53cafd7c5f6b76752b09791caadf",
                "commitMessage": "\"Merge branch master into docs-namespace-in-jsx\n\n* master: (113 commits)\n  Remove esprima-fb and use Syntax from jstransform\n  Update React.renderToString argument type in docs\n  [traverseAllChildren] fix out-of-scope var use.\n  Use double quote for transformed `displayName` and `data-*`\n  Remove unrelated comment\n  Fix typo in If/Else JSX doc.\n  Cleanup a couple unused variables\n  Use dump cache and remove factory from ReactElement-test\n  Update deprecated propTypes\n  Bring in jsfiddle integration script, add harmony\n  Extending period in which click events are ignored\n  React.renderComponent --> React.render\n  Followup fix for React.PropTypes.node\n  Add comma for readability in tutorial\n  Drop internal uses of .type on the class\n  Drop Legacy Factories Around Classes\n  Drop ReactDOM from internal DOM extensions\n  Added comma to increase readability.\n  Add 0.12 starter kit\n  Change the date and the link url to match the proper roundup\n  ...\n\nConflicts:\n\tdocs/docs/02.1-jsx-in-depth.md\"",
                "committedDate": "2014-11-05T14:30:37Z"
            },
            {
                "commitId": "a54ed49eb05200dcdc2f27ba9437d17e37571547",
                "commitMessage": "\"Merge pull request #2375 from sebmarkbage/droplegacyfactories\n\nDrop Legacy Factories\"",
                "committedDate": "2014-10-29T01:00:32Z"
            },
            {
                "commitId": "199a7d6903ed2e7c28fb32c6a28ed7f26148e13d",
                "commitMessage": "\"Drop Legacy Factories Around Classes\n\nClasses are now pure classes without a legacy factory around them.\n\nSince classes will become just any function that returns a valid instance,\nlets drop isValidClass.\n\nTheres some hacks in here for auto-mocking frameworks (jest) that mock the\nprototype of these classes. These hacks allow these classes to be mounted.\"",
                "committedDate": "2014-10-28T22:08:52Z"
            },
            {
                "commitId": "b7cd3e7d1de31108594a6698215bfa7bf8619b34",
                "commitMessage": "\"Merge pull request #2396 from sebmarkbage/classmodule\n\nMove Class Creation Concerns into a ReactClass Module\"",
                "committedDate": "2014-10-23T19:50:17Z"
            },
            {
                "commitId": "994fc7d8a727dc7b477322a5c3d4216f1215f639",
                "commitMessage": "\"Merge remote-tracking branch upstream/master into fix-gruntfile\"",
                "committedDate": "2014-10-23T07:55:43Z"
            },
            {
                "commitId": "c7bb936566bce79b35f55b558af5f09b88047a9a",
                "commitMessage": "\"Introduce React Class as an alias for Composite Component\n\nThis is in preparation for the separation of Composite Component internals\nfrom the Class abstraction.\"",
                "committedDate": "2014-10-23T01:35:10Z"
            },
            {
                "commitId": "b78fe39b6073bab20eb7785aa9ef508aabf03c3f",
                "commitMessage": "\"Bump version to 0.13.0-alpha\"",
                "committedDate": "2014-10-22T21:19:54Z"
            },
            {
                "commitId": "2bdad81955e160a5b11110b40c7222a1113cc1fb",
                "commitMessage": "\"Merge pull request #2384 from sebmarkbage/deprecateisvalidclass\n\nDeprecate isValidClass\"",
                "committedDate": "2014-10-21T00:17:56Z"
            },
            {
                "commitId": "ef971014bc22bf4cfecb31ce35de38c231c1c41d",
                "commitMessage": "\"Deprecate isValidClass\n\nFixes #2374\"",
                "committedDate": "2014-10-20T06:55:57Z"
            },
            {
                "commitId": "2b4e35870b7a0c4d681bc3c86641790dd828f0a0",
                "commitMessage": "\"v0.12.0-rc1\"",
                "committedDate": "2014-10-16T21:56:50Z"
            },
            {
                "commitId": "828efb798a94a631007efe966828fbc5b01613ea",
                "commitMessage": "\"Merge pull request #2350 from sebmarkbage/assign\n\nHide Object.assign polyfill behind a module\"",
                "committedDate": "2014-10-16T16:29:01Z"
            },
            {
                "commitId": "8210beeef4219d11b0a997f5a5abe7c348c01448",
                "commitMessage": "\"Hide Object.assign polyfill behind a module\n\nBecause the JS communitys polyfilling infrastructure sucks and well\nhave to fix it for them before we require this.\n\nJSX spread uses React.__spread\n(which might get special behavior for key/ref, not sure yet)\n\nThis never uses the native implementation and throws for prototype chains.\nOnce the native implementations are faster, well start using them.\"",
                "committedDate": "2014-10-16T16:21:10Z"
            },
            {
                "commitId": "3991d4de6be63ea0dac5d2b9ccd6a9c4069b439b",
                "commitMessage": "\"Merge pull request #2337 from sebmarkbage/devtoolshook\n\nInject the runtime to a global instead of exposing internals\"",
                "committedDate": "2014-10-13T19:30:15Z"
            },
            {
                "commitId": "ce19af9d304bb0b2c9b3fabf6b999c45be5b7b72",
                "commitMessage": "\"Inject the runtime to a global instead of exposing internals\n\nSee https://github.com/facebook/react-devtools/commit/673de20a4a0654ab849575307b9cf87fde53439e\"",
                "committedDate": "2014-10-13T18:59:23Z"
            },
            {
                "commitId": "5d3b12bb3bd6a092cf00ede07b8255a8399c2e58",
                "commitMessage": "\"Merge pull request #2312 from zpao/license-update\n\nUpdate Licenses\"",
                "committedDate": "2014-10-10T23:58:45Z"
            },
            {
                "commitId": "dcf415c2b91ce52fd5d4dd02b70875ba9d33290f",
                "commitMessage": "\"BSD + PATENTS\"",
                "committedDate": "2014-10-10T20:34:07Z"
            },
            {
                "commitId": "5d127eaa4935486a9fa15830b9224b806921f56d",
                "commitMessage": "\"Merge pull request #2316 from zpao/devtoolsmarker\n\nLook for devtools global hook\"",
                "committedDate": "2014-10-10T00:00:06Z"
            },
            {
                "commitId": "540731b7a8cbae5835edf69f26361993691d6c00",
                "commitMessage": "\"Merge pull request #2002 from zpao/rename-renderComponent\n\nReact.renderComponent -> React.render\"",
                "committedDate": "2014-10-09T23:41:37Z"
            },
            {
                "commitId": "9b1fa914fafca23b201d5bf4d7ca6ffa1dff6cc4",
                "commitMessage": "\"React.renderComponent -> React.render\n\nAlso rename all the associated render methods and adds deprecation\nnotices.\"",
                "committedDate": "2014-10-09T23:41:03Z"
            },
            {
                "commitId": "6ddf8de5aee5ea58a4f1b806c6c768d53cf5e2b4",
                "commitMessage": "\"Look for devtools global hook\n\nIt doesnt exist yet, but it could.\n\nThis also ensures we actually do our polyfill checks in *all* browsers,\nnot just Chrome.\"",
                "committedDate": "2014-10-09T18:24:48Z"
            },
            {
                "commitId": "f48954d8a39097109d599db365af28df417544cb",
                "commitMessage": "\"Merge pull request #2300 from sebmarkbage/descriptorstoelements\n\nRenamed Descriptor -> Element\"",
                "committedDate": "2014-10-07T20:44:44Z"
            },
            {
                "commitId": "8f1657bba618846b7a111a2caee855bf59145c5a",
                "commitMessage": "\"Renamed Descriptor -> Element\n\nWeve decided on a new naming convention for ReactDescriptor. Its now\ncalled ReactElement, which is a subset of the ReactNode union type.\"",
                "committedDate": "2014-10-07T20:41:51Z"
            },
            {
                "commitId": "7f9b1d18d197d102777f214e782ecc27685cf481",
                "commitMessage": "\"Start warning when React.DOM.x is passed into JSX\n\nReact.DOM is becoming helper factories to generate ReactElements. Theyre not\nclasses. It will be ok to call them directly as functions, but not to use them\nwhere a class is expected.\"",
                "committedDate": "2014-10-07T17:49:18Z"
            },
            {
                "commitId": "c901b1005e7c946584487bb8b0bf7b60a773645b",
                "commitMessage": "\"Make createDescriptor return a descriptor for components\n\nThis moves all logic around legacy descriptors to ReactLegacyDescriptor. This\nis responsible for the layer that knows that createClass exports a legacy\nfactory. When passed one of these classes, it unwraps it to be a real class.\n\nIf it is passed a non legacy factory, it is assumed to be a non-react component\nthat needs to be invoked as a plain function.\n\nThe semantic change is that a descriptor is now always returned if passed a\nlegacy factory. Even if that factory is a mock. A mock would previously return\nundefined.\n\nFor mocks, I treat the factory as the authoritative function. I call it to extract\nthe instance or fill it with an empty component placeholder.\n\nAdditionally, I make the classes take props as the first argument to the\nconstructor. This is what the new class system will do.\n\nWe currently need to set up some internals by calling the internal construct\nmethod. Instead of doing that automatically in the constructor, I now move that\nto a second pass so that mocks can get the plain props.\n\nThis means that we can assert that a mock has been called once its mounted\nwith its final props. Instead of the descriptor factory being called.\"",
                "committedDate": "2014-08-20T07:14:32Z"
            },
            {
                "commitId": "5b4e2be867ebf216e7acd0cfecda026d9dd3499d",
                "commitMessage": "\"Iterate over expectedFeatures correctly\n\nThis fails if Array.prototype is extended.\"",
                "committedDate": "2014-08-19T01:18:05Z"
            },
            {
                "commitId": "eb3ea3f2dfed33751ce95666370b30a7b9d8bc9f",
                "commitMessage": "\"Move batchedUpdated to React.addons\n\nThis is a followup to #1060, where I did not read closely enough before\nmerging.\"",
                "committedDate": "2014-08-13T22:40:40Z"
            },
            {
                "commitId": "938bcbecd5874d6d33f11e52e5c9a71dbcd44c8b",
                "commitMessage": "\"Merge pull request #1060 from spicyj/gh-906\n\nAdd React.batchedUpdates to public API\"",
                "committedDate": "2014-08-13T22:37:43Z"
            },
            {
                "commitId": "036d751397140e1eae01ea6ce6ebe86f0482f485",
                "commitMessage": "\"Add createElement alias for createDescriptor\"",
                "committedDate": "2014-08-06T23:41:47Z"
            },
            {
                "commitId": "2d250d44a5909d9e9d6a0e6fef541cf6fdf6e0ae",
                "commitMessage": "\"Merge pull request #1993 from spicyj/devtools-warning-2\n\nSlightly more considerate devtools warning\"",
                "committedDate": "2014-08-04T21:25:16Z"
            },
            {
                "commitId": "30452914174c7fda400746e8795b73f8ba4269bf",
                "commitMessage": "\"Slightly more considerate devtools warning\n\nSee #953.\"",
                "committedDate": "2014-08-04T18:16:51Z"
            },
            {
                "commitId": "c6b2687bbda0c9d828be51d3d4908adb89d52a09",
                "commitMessage": "\"Partially revert React.createDescriptor\n\nWe still have some issues to work out when the type argument is a mock.\"",
                "committedDate": "2014-07-25T23:48:10Z"
            },
            {
                "commitId": "04e341936cff902f399ca59bd6b855b2d994470e",
                "commitMessage": "\"Include Object.assign polyfill\n\nThis isnt a good final solution but it makes React actually usable on\nits own.\n\nThis also makes tests runnable, though only via jest\n(./node_modules/.bin/jest)\"",
                "committedDate": "2014-07-21T23:18:12Z"
            },
            {
                "commitId": "5aab0bddaa9dd2684049194a2488d57517d89cae",
                "commitMessage": "\"Move key/ref off props and prepare for new descriptor factories\n\nBreaking changes\n\n- key/ref are no longer accessible on props but they are accessible on the\n  descriptors. This means that parents/owners can access it but not the\n  component itself.\n\n- Descriptor factories are now plain functions and you cant rely on the\n  prototype or constructors of descriptors to identify the component type.\n\nExisting descriptor factories are now wrapped in a legacy factory. Currently it\ndoes nothing but it will give us a hook to track callers to factories that are\nnot using JSX but just invoking the function directly. It also proxies static\nmethods/properties to the underlying class. The newer factories dont have this\nfeature.\n\nReactTextComponent has its own little factory because its props is not an\nobject. This is a detail and will go away once ReactTextComponent no longer\nneeds descriptors.\"",
                "committedDate": "2014-07-19T05:01:36Z"
            },
            {
                "commitId": "5bfee601ce6709a56e025e84634fcc5da0b36a44",
                "commitMessage": "\"Bump version for 0.12.0-alpha\n\n[skip ci]\"",
                "committedDate": "2014-07-17T21:22:50Z"
            },
            {
                "commitId": "97dbada03d58bef9bce6941ca49207e28b6b75ac",
                "commitMessage": "\"Up-to-date React.Children\n\nMake sure we actually include `.count`\"",
                "committedDate": "2014-07-14T22:01:44Z"
            },
            {
                "commitId": "0f9cec2e78c09e81dc3dac764788589a07903411",
                "commitMessage": "\"0.11.0-rc1\"",
                "committedDate": "2014-07-13T02:50:45Z"
            },
            {
                "commitId": "2b0e51bdbaa0f0e589c8a24e358a7739e70f38dc",
                "commitMessage": "\"Add String.prototype.trim to polyfill check\n\nAlso shortens the URL so it fits on 1 line\"",
                "committedDate": "2014-07-11T17:36:38Z"
            },
            {
                "commitId": "ef6740627292136973a6b8053cc98dba98ebd18f",
                "commitMessage": "\"Add simple React.createDescriptor hook\n\nThis is the minimal runtime change we need to switch the JSX syntax to resolve\nto React.createDescriptor(...)\"",
                "committedDate": "2014-06-26T22:42:18Z"
            },
            {
                "commitId": "e4f80f301ddc56370c5c7dfb2be483431bfa7d20",
                "commitMessage": "\"Merge pull request #1516 from syranide/es5err\n\nPreemptively error when required ES5 shim/shams are not available\"",
                "committedDate": "2014-05-12T20:40:00Z"
            },
            {
                "commitId": "659b7981e14c7eb36cf2638a95a3a16f080b8cca",
                "commitMessage": "\"Preemptively error when required ES5 shim/shams are not available\"",
                "committedDate": "2014-05-11T19:20:07Z"
            },
            {
                "commitId": "7fb7e951082c40b3183cc2a6ab483a8b6b579690",
                "commitMessage": "\"Add React.batchedUpdates to public API\n\nFixes #906.\"",
                "committedDate": "2014-04-16T22:59:54Z"
            },
            {
                "commitId": "468007612f4a6dabb228618d9a3274f067fc2c51",
                "commitMessage": "\"Merge branch master of github.com:facebook/react\"",
                "committedDate": "2014-03-30T19:53:26Z"
            },
            {
                "commitId": "c40e06f7281622a7a6295f4a7d5540a75fedf7bb",
                "commitMessage": "\"First phase to true descriptors\n\nThis moves all convenience constructors to use frozen ReactDescriptors.\"",
                "committedDate": "2014-03-28T19:32:53Z"
            },
            {
                "commitId": "f0eae5086b0062bdf8f8e466803e061814486634",
                "commitMessage": "\"version bump for 0.11 development\"",
                "committedDate": "2014-03-21T21:58:52Z"
            },
            {
                "commitId": "7f24943e5af5ee4b14ec002d45df315af94adb75",
                "commitMessage": "\"update version for 0.10rc\"",
                "committedDate": "2014-03-19T05:09:32Z"
            },
            {
                "commitId": "a8fc3b940dbe20c0c7decd19b028215b236c50a6",
                "commitMessage": "\"Move UI-thread-only browser modules to browser/ui/\n\nThis also deletes an unused module.\"",
                "committedDate": "2014-03-03T23:07:11Z"
            },
            {
                "commitId": "99dab49f92fe0785c1643ede5b0e7a90cbe1e1e0",
                "commitMessage": "\"Refactor rendering to string without checksum & React ID\n\nFinalize API for rendering to static markup.\nInstead of passing a boolean option to `renderComponentToString`, just use another method.\"",
                "committedDate": "2014-03-03T23:06:27Z"
            },
            {
                "commitId": "95edc396dfd07ed064240b5e2e1a1d5528d2d747",
                "commitMessage": "\"version bump to 0.10.0-alpha\"",
                "committedDate": "2014-02-20T06:53:29Z"
            },
            {
                "commitId": "8a47813baabcb200f5e0a496dd959cb0ef3adcf3",
                "commitMessage": "\"Update copyrights for 2014.\n\ngrep -rl Copyright 2013 Facebook static_upstream | xargs perl -pi -w -e s/Copyright 2013 Facebook/Copyright 2013-2014 Facebook/g;\n\nNot going to check in a script to do this since it will just change every year.\nCloses #1006\"",
                "committedDate": "2014-02-19T01:06:43Z"
            },
            {
                "commitId": "9125f68194cf99e55e027b6cc7ed34325c9855e4",
                "commitMessage": "\"0.9.0-rc1\"",
                "committedDate": "2014-02-17T01:38:52Z"
            },
            {
                "commitId": "b9cd2f0d3d83ee9652b230fecc4bc2dfe8e110f8",
                "commitMessage": "\"Merge branch reorg\"",
                "committedDate": "2014-02-05T03:51:55Z"
            },
            {
                "commitId": "1a39c3143cf5831e4a7f4d2f1a7dc32b33b41299",
                "commitMessage": "\"The great reorg of February 2014\"",
                "committedDate": "2014-02-05T03:49:58Z"
            },
            {
                "commitId": "945f788a4127c3428a5e3cf65fb6d1014c2e98a1",
                "commitMessage": "\"React.Children helpers\n\nAdds React.Children and map(), forEach() and only().\"",
                "committedDate": "2014-02-04T22:37:44Z"
            },
            {
                "commitId": "2c335b0e570e360d52359e7f774e5311f74d863b",
                "commitMessage": "\"Quieter devtools upsell\n\nCheck that were not in a iframe before upselling.\"",
                "committedDate": "2014-01-11T05:11:33Z"
            },
            {
                "commitId": "d8a8f6a88109e1ccdee02236909cbab101222185",
                "commitMessage": "\"Upsell dev tools\n\nPeople probably dont know these exist. Add some information about React\ndev mode as well as a link to the developer tools when using Chrome.\"",
                "committedDate": "2014-01-11T05:10:54Z"
            },
            {
                "commitId": "80d7d2d0f8ec0f4f1f3c2dbe613f36bda572ce11",
                "commitMessage": "\"Listen to events on demand\n\nFixes #381\n\nThis is a squashed version of https://github.com/facebook/react/pull/462\"",
                "committedDate": "2014-01-04T07:09:59Z"
            },
            {
                "commitId": "3431e3f847b148bd1aa527f375337c86b1029c58",
                "commitMessage": "\"Add `createMarkupForID`\n\nThis is a follow-up the to previous commit and does two things:\n\n - Moves `ReactMount.ATTR_NAME` to `DOMProperty.ID_ATTRIBUTE_NAME`.\n - Adds `DOMPropertyOperations.createMarkupForID` and uses it.\"",
                "committedDate": "2013-12-21T02:12:48Z"
            },
            {
                "commitId": "153b75f186a78c876cc11678d1abbdf5e13a3b5b",
                "commitMessage": "\"Bump version to 0.9.0-alpha\n\nThis is trunk, which will be 0.9. Well have to cherry-pick this whole\nthing into a 0.8 branch.\"",
                "committedDate": "2013-12-06T23:11:25Z"
            },
            {
                "commitId": "ef339c9cc44522ae39cb04bf9a102ac9261ecb45",
                "commitMessage": "\"Version bump, make tests work\"",
                "committedDate": "2013-12-06T19:56:30Z"
            },
            {
                "commitId": "1b8bdbe177f2f03c66e9288149316695fc004b41",
                "commitMessage": "\"Remove deprecated React.unmountAndReleaseReactRootNode\"",
                "committedDate": "2013-12-05T04:27:15Z"
            },
            {
                "commitId": "b91396be8eac3dc57ab1dbd2d3bb27c791d88169",
                "commitMessage": "\"Contexts\n\nSummary:\nadds `this.context` which you can think of as implicit props, which are passed automatically down the //ownership// hierarchy.\n\nContexts should be used sparingly, since they essentially allow components to communicate with descendants (in the ownership sense, not parenthood sense), which is not usually a good idea. You probably would only use contexts in places where youd normally use a global, but contexts allow you to override them for certain view subtrees which you cant do with globals.\n\nThe context starts out `null`:\n\n  var RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n    }\n  });\n\nYou should **never** mutate the context directly, just like props and state.\n\nYou can change the context of your children (the ones you own, not `this.props.children` or via other props) using the new `withContext` method on `React`:\n\n  var RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n      var children = React.withContext({foo: a, bar: b}, () => (\n        // In ChildComponent#render, this.context === {foo: a, bar: b}\n        <ChildComponent />\n      ));\n      // this.context === null\n    }\n  });\n\nContexts are merged, so a component can override its owners context **for its children**:\n\n  var ChildComponent = React.createClass({\n    render: function() {\n      // this.context === {foo: a, bar: b} (for the caller above)\n      var children = React.withContext({foo: c},() => (\n        // In GrandchildComponent#render,\n        // this.context === {foo: c, bar: b}\n        <GrandchildComponent />\n      ));\n      // this.context === {foo: a, bar: b}\n    }\n  });\"",
                "committedDate": "2013-11-18T18:56:24Z"
            },
            {
                "commitId": "48281a17e4f460020fa7b9c6dc8169a1b867327c",
                "commitMessage": "\"bump version to 0.6.0-alpha\"",
                "committedDate": "2013-10-16T05:39:28Z"
            },
            {
                "commitId": "fdb10c067999c81516cf6ac65262adb5ab59d3cf",
                "commitMessage": "\"React.__internals\n\nWe need access to internal modules in order to provide a single way for some\nprojects to work internally with @providesModule and externally.\"",
                "committedDate": "2013-10-07T22:07:20Z"
            },
            {
                "commitId": "832d9de0374496a3a99a0df7cf100305f1a24158",
                "commitMessage": "\"Rename unmountAndReleaseReactRootNode() -> unmountComponentAtNode()\n\nThis is just a better name; we may revisit the name later.\"",
                "committedDate": "2013-09-19T21:46:49Z"
            },
            {
                "commitId": "5ab68d9a0ddbb6c6c96895b75207d6ad57dc55b4",
                "commitMessage": "\"Hard code version instead of doing constant replacement\n\nThis isnt really ideal, but it makes it so that people managing to\nbuild with @providesModule still get a consistent experience (since this\nis what gets packed client-side with react-page-middleware anyway).\"",
                "committedDate": "2013-09-11T16:51:43Z"
            },
            {
                "commitId": "d853bbcf77a0c81734300dafb77f2afeb25f0ed5",
                "commitMessage": "\"Merge pull request #205 from spicyj/version\n\nAdd React.version\"",
                "committedDate": "2013-09-11T01:35:12Z"
            },
            {
                "commitId": "5fd4467bf76b89b76df8bf909922f92e4fd07f7c",
                "commitMessage": "\"Add React.version\n\ngetConfig needs to be a function because grunt.config.data.pkg.version isnt available at the time that grunt/config/jsx/jsx.js is required.\n\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.\"",
                "committedDate": "2013-09-10T00:01:06Z"
            },
            {
                "commitId": "3cf14e8f9b14ac05bcd24634daa26ac6772bd31b",
                "commitMessage": "\"Remove ReactChildren methods from React object\n\nThese are not terribly useful on this object and the naming of\n`React.forEachChildren` sucked anyway.\"",
                "committedDate": "2013-09-06T01:35:59Z"
            },
            {
                "commitId": "a42fd30fc2795909324c497350d0877a969b0cc7",
                "commitMessage": "\"Remove React.autoBind for real\n\nThis has been deprecated for a long while now, we should actually remove it.\"",
                "committedDate": "2013-09-03T21:27:00Z"
            },
            {
                "commitId": "4d8f0449d9d08528cc1aaba0aa09d1d90e12d3dd",
                "commitMessage": "\"React.isValidClass\n\nSometimes you may need to detect if a value is a valid React class constructor. This enables that and prevents future consumers from getting caught in the trap of depending on an internal implementation detail we might change.\n\nCurrently this works for classes created with `React.createClass` as well as `React.DOM.*`.\"",
                "committedDate": "2013-08-30T20:20:51Z"
            },
            {
                "commitId": "fce57abeca1d8388baaaac8511540aed486177dc",
                "commitMessage": "\"Benchmarking tool for React application performance\n\nReactAppPerf wraps core methods and logs info from them; theres no real\nUI at this point\"",
                "committedDate": "2013-08-23T21:05:11Z"
            },
            {
                "commitId": "9ef4e74ba2b3a494757b39b41b1ef99280bc5f83",
                "commitMessage": "\"ReactChildren\n\nInstead of changing `traverseAllChildren`, keep that around for perf\nreasons (for the hot code path `flattenChildren`)\n\nIntroduce `ReactChildren.map` and `ReactChildren.forEach`\nwhich mirrors `Array.prototype.map` and `Array.prototype.forEach`. This\ninvolves a rename of `mapAllChildren`\"",
                "committedDate": "2013-08-06T21:17:33Z"
            },
            {
                "commitId": "c629a0c5ad1adc82e01a982e7116eae632fa8d65",
                "commitMessage": "\"Revert \"Merge pull request #200 from spicyj/version\"\n\nThis reverts commit d8893228275cacc65a8632c7416bb023ab4c946f, reversing\nchanges made to 156dffb961ab15f577e0a6aab1abc5efd68f9a9b.\"",
                "committedDate": "2013-07-17T15:26:59Z"
            },
            {
                "commitId": "d8893228275cacc65a8632c7416bb023ab4c946f",
                "commitMessage": "\"Merge pull request #200 from spicyj/version\n\nAdd React.version\"",
                "committedDate": "2013-07-17T13:13:49Z"
            },
            {
                "commitId": "7be14d81552e8097eee6ed21a048fa23d4fce596",
                "commitMessage": "\"Add React.version\n\ngetConfig needs to be a function because grunt.config.data.pkg.version isnt available at the time that grunt/config/jsx/jsx.js is required.\n\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.\"",
                "committedDate": "2013-07-17T03:38:40Z"
            },
            {
                "commitId": "d76262731237365198ddd84216d108da96820055",
                "commitMessage": "\"Rename `props` to `propTypes`\n\nThis does two things:\n\n - Rename `props` to `propTypes`.\n - Rename `ReactProps` to `ReactPropTypes` (and `React.Props` to `React.PropTypes`)\"",
                "committedDate": "2013-07-10T22:06:18Z"
            },
            {
                "commitId": "0e9ee239a9c7b085771429ba990ae63aacde64ca",
                "commitMessage": "\"Merge branch master into async-state\"",
                "committedDate": "2013-07-01T23:08:57Z"
            },
            {
                "commitId": "ee21a604f31020fbaa898a4d0d61dc487198ce82",
                "commitMessage": "\"Delete files that accidentally got merged in\n\n\u0ca0_\u0ca0\"",
                "committedDate": "2013-06-28T21:54:07Z"
            },
            {
                "commitId": "43358157cff16e8945da9b816fcb858a59da81af",
                "commitMessage": "\"Merge branch textarea-update-value of git://github.com/spicyj/react\n\nConflicts:\n\tsrc/core/ReactDefaultInjection.js\"",
                "committedDate": "2013-06-28T21:30:47Z"
            },
            {
                "commitId": "44d6b947520aa3c3b252cbba1c95aa25811665d7",
                "commitMessage": "\"Merge remote-tracking branch origin/master into textarea-update-value\"",
                "committedDate": "2013-06-19T06:31:08Z"
            },
            {
                "commitId": "c1576fcf9744882fa59c2876fb4fd44720140307",
                "commitMessage": "\"Remove trailing whitespace\"",
                "committedDate": "2013-06-17T19:48:43Z"
            },
            {
                "commitId": "80edd6ca8729512c384faa593fef6d62b6b8c087",
                "commitMessage": "\"Merge pull request #89 from vjeux/patch-4\n\nExposing ReactProps as React.Props\"",
                "committedDate": "2013-06-14T04:08:10Z"
            },
            {
                "commitId": "34173638d40dff2cd2dbac66f04623b3b1f0516f",
                "commitMessage": "\"Exposing ReactProps as React.Props\n\nRight now, even though ReactProps is committed, there is no way to use it as it is not exposed.\"",
                "committedDate": "2013-06-13T00:28:25Z"
            },
            {
                "commitId": "37cde3d864406f2af65dc03eae45a216ea969600",
                "commitMessage": "\"Stabilize minimal server rendering API\n\nThis is a pretty killer feature and the API is simple. I know its another API method on React, but I think its\nthe only way.\"",
                "committedDate": "2013-06-10T23:17:26Z"
            },
            {
                "commitId": "582359aeea9b7c437cfc12b8e4f3366aaacf11a1",
                "commitMessage": "\"Remove React.createComponentRenderer\n\nRemove ReactMount.createComponentRenderer because it does not function\ncorrectly.\n\n  var f = React.createComponentRenderer(<div />);\n\n  var container1 = document.createElement(div);\n  var container2 = document.createElement(div);\n  f(container1);\n  f(container2); // error because mounting same instance into new root\"",
                "committedDate": "2013-06-08T05:10:06Z"
            },
            {
                "commitId": "75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4",
                "commitMessage": "\"Initial public release\"",
                "committedDate": "2013-05-29T19:54:02Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "Determine the developers that had the most unfixed bugs?",
        "number": 7,
        "category": 2,
        "response": "The developer with the most unfixed bugs is 'bvaughn', who has 1 unfixed bug.",
        "chain_of_thought": "To determine the developers that had the most unfixed bugs, we need to interpret the question. The most probable interpretation is to find the developers who have authored commits that introduced issues (bugs) which have not been fixed yet. \n\nTo achieve this, we need to identify the relevant nodes and relationships. The User node represents developers, and the Commit node represents the commits they authored. The Issue node represents the bugs. The relevant relationships are:\n- `(:User)-[:author]->(:Commit)`: to find the commits authored by a user.\n- `(:Commit)-[:introduced]->(:Issue)`: to find the issues introduced by a commit.\n- We need to check the `state` property of the Issue node to determine if the issue is still open (unfixed).\n\nThe query should:\n1. Match users who authored commits that introduced issues.\n2. Filter issues that are still open (unfixed).\n3. Count the number of unfixed issues for each developer.\n4. Sort the developers by the number of unfixed issues in descending order.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n```\n\nThis query will return the developers with the most unfixed bugs, sorted in descending order.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n",
        "result": [
            {
                "developer": "bvaughn",
                "unfixed_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 3,
        "label": "partial"
    },
    {
        "question": "which developer has most number of bugs yet to be fixed?",
        "number": 8,
        "category": 2,
        "response": "The developer with the most number of bugs yet to be fixed is 'bvaughn', with 19 open issues.",
        "chain_of_thought": "To determine which developer has the most number of bugs yet to be fixed, we need to identify the issues that are still open and count how many of these issues each developer is associated with. The relevant nodes are the User and Issue nodes. The relationships that can help us determine this are the creates, assigned, and participates_in relationships between User and Issue. However, since the question is about bugs yet to be fixed, the most relevant relationship is likely the assigned relationship, as it indicates the developer responsible for fixing the issue.\n\nHere's how we can construct the query:\n\n1. Identify open issues. An open issue is one where the `state` property is not \"closed\".\n2. Find the developers assigned to these open issues.\n3. Count the number of open issues each developer is assigned to.\n4. Sort the results to find the developer with the most open issues.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (u:User)-[:assigned]->(i:Issue)\nWHERE i.state <> 'closed'\nRETURN u.login AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n```\n\nThis query will return the developer with the most open issues assigned to them, indicating the developer with the most bugs yet to be fixed.",
        "query": "cypher\nMATCH (u:User)-[:assigned]->(i:Issue)\nWHERE i.state <> 'closed'\nRETURN u.login AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "bvaughn",
                "open_issues": 19
            }
        ],
        "isAmbiguous": true,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "Determine the developers that fixed the most bugs in ReactDOMInput.js?",
        "number": 9,
        "category": 3,
        "response": "The developers who fixed the most bugs in ReactDOMInput.js are Sophie Alpert and Hemakshi Sachdev, each fixing one bug.",
        "chain_of_thought": "To determine the developers who fixed the most bugs in the file `ReactDOMInput.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We are interested in the `User`, `Commit`, `Issue`, and `File` nodes.\n   - The `User` node is connected to the `Commit` node via the `author` relationship.\n   - The `Commit` node is connected to the `Issue` node via the `fixed` relationship, indicating that the commit fixed a bug.\n   - The `Issue` node is connected to the `File` node via the `impacted` relationship, indicating that the file was impacted by the issue.\n\n2. **Filter for the specific file**: \n   - We need to filter the `File` node to find the file with the name `ReactDOMInput.js`.\n\n3. **Aggregate the number of bugs fixed by each developer**:\n   - Count the number of issues fixed by each developer for the specified file.\n\nThe Cypher query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'ReactDOMInput.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n```\n\nThis query will return a list of developers and the number of bugs they have fixed in the file `ReactDOMInput.js`, sorted in descending order by the number of bugs fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'ReactDOMInput.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n",
        "result": [
            {
                "developer": "Sophie Alpert",
                "bugs_fixed": 1
            },
            {
                "developer": "Hemakshi Sachdev",
                "bugs_fixed": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "who did most fixed bugs in TapEventPlugin.js?",
        "number": 10,
        "category": 3,
        "response": "The developer who fixed the most bugs in TapEventPlugin.js is Sophie Alpert, with 1 bug fixed.",
        "chain_of_thought": "To determine who fixed the most bugs in the file \"TapEventPlugin.js\", we need to follow these steps:\n\n1. Identify the relevant nodes and relationships. We are interested in the User, Commit, and File nodes. The relationships of interest are:\n   - `author` between User and Commit to find out who authored the commits.\n   - `changed` between Commit and File to identify the file modifications.\n   - `fixed` between Commit and Issue to determine which commits fixed bugs.\n\n2. Filter the File node to find the specific file \"TapEventPlugin.js\".\n\n3. Count the number of times each user has fixed bugs in this file.\n\nThe query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:changed]->(f:File {name: 'TapEventPlugin.js'})\nMATCH (c)-[:fixed]->(i:Issue)\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n```\n\nThis query will return the user who has fixed the most bugs in the file \"TapEventPlugin.js\".",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:changed]->(f:File {name: 'TapEventPlugin.js'})\nMATCH (c)-[:fixed]->(i:Issue)\nRETURN u.name AS developer, COUNT(i) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "Sophie Alpert",
                "fixed_bugs": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "Determine the files that introduce the most bugs?",
        "number": 11,
        "category": 2,
        "response": "The files that introduce the most bugs are \"package.json\" and \"ReactDOMInput-test.js\", each with 5 bugs.",
        "chain_of_thought": "To determine the files that introduce the most bugs, we need to identify the files that are associated with the most issues introduced by commits. The schema provides a way to trace this through the `Commit` and `Issue` nodes, using the `introduced` relationship to connect commits to issues and the `changed` relationship to connect commits to files. \n\nHere's the step-by-step breakdown of the query:\n\n1. **Identify the relevant nodes and relationships**:\n   - We need to find the `File` nodes that are linked to `Commit` nodes.\n   - The `Commit` nodes should be linked to `Issue` nodes through the `introduced` relationship, indicating that the commit introduced a bug.\n\n2. **Formulate the query**:\n   - Match the pattern where a `Commit` introduces an `Issue` and also changes a `File`.\n   - Count the number of times each file is associated with an introduced issue.\n\n3. **Sort and limit the results**:\n   - Sort the files by the number of introduced issues in descending order to find the files that introduce the most bugs.\n   - Optionally, limit the results to the top files if needed.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue), (c)-[:changed]->(f:File)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\n```\n\nThis query will return a list of files along with the count of bugs they have introduced, sorted by the number of bugs in descending order.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue), (c)-[:changed]->(f:File)\nRETURN f.name AS file, COUNT(i) AS bug_count\nORDER BY bug_count DESC\n",
        "result": [
            {
                "file": "package.json",
                "bug_count": 5
            },
            {
                "file": "ReactDOMInput-test.js",
                "bug_count": 5
            },
            {
                "file": "ReactUpdates-test.js",
                "bug_count": 3
            },
            {
                "file": "ReactDOMHooks-test.js",
                "bug_count": 3
            },
            {
                "file": "renderer.js",
                "bug_count": 3
            },
            {
                "file": "ReactDOMComponent-test.js",
                "bug_count": 3
            },
            {
                "file": "ReactServerRendering-test.js",
                "bug_count": 3
            },
            {
                "file": "ReactCompositeComponentState-test.js",
                "bug_count": 3
            },
            {
                "file": "ReactDOMSelect-test.js",
                "bug_count": 3
            },
            {
                "file": "EnterLeaveEventPlugin-test.js",
                "bug_count": 3
            },
            {
                "file": "ReactTestUtils.js",
                "bug_count": 3
            },
            {
                "file": "ChangeEventPlugin.js",
                "bug_count": 3
            },
            {
                "file": "ReactTestUtils-test.js",
                "bug_count": 3
            },
            {
                "file": "ReactFlightDOM-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactFlightDOMBrowser-test.js",
                "bug_count": 2
            },
            {
                "file": "index.js",
                "bug_count": 2
            },
            {
                "file": "inlinedHostConfigs.js",
                "bug_count": 2
            },
            {
                "file": "profilingCache-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactFresh-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMServerPartialHydration-test.internal.js",
                "bug_count": 2
            },
            {
                "file": "storeStressTestConcurrent-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactES6Class-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactServerRenderingHydration-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactScope-test.internal.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMServerSelectiveHydration-test.internal.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMLegacy.js",
                "bug_count": 2
            },
            {
                "file": "ReactTestUtilsAct-test.js",
                "bug_count": 2
            },
            {
                "file": "ChangeEventPlugin-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactFlightDOMRelay-test.internal.js",
                "bug_count": 2
            },
            {
                "file": "utils.js",
                "bug_count": 2
            },
            {
                "file": "constants.js",
                "bug_count": 2
            },
            {
                "file": "OwnersListContext.js",
                "bug_count": 2
            },
            {
                "file": ".eslintrc.js",
                "bug_count": 2
            },
            {
                "file": "ReactSuspense-test.internal.js",
                "bug_count": 2
            },
            {
                "file": "ReactProfiler-test.internal.js",
                "bug_count": 2
            },
            {
                "file": "ReactIncrementalErrorHandling-test.internal.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMOption-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMFiber-test.js",
                "bug_count": 2
            },
            {
                "file": "ExhaustiveDeps.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMComponentTree.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMSelect.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMTextComponent-test.js",
                "bug_count": 2
            },
            {
                "file": "SyntheticEvent-test.js",
                "bug_count": 2
            },
            {
                "file": "SyntheticKeyboardEvent-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactSuspenseWithNoopRenderer-test.internal.js",
                "bug_count": 2
            },
            {
                "file": "ReactUpdateQueue.js",
                "bug_count": 2
            },
            {
                "file": "SchedulerWithReactIntegration.js",
                "bug_count": 2
            },
            {
                "file": "ReactJSXElementValidator-test.js",
                "bug_count": 2
            },
            {
                "file": "DOMPropertyOperations-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactElementValidator-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactCompositeComponent-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactMultiChild-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactBrowserEventEmitter-test.js",
                "bug_count": 2
            },
            {
                "file": "SelectEventPlugin-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactCompositeComponentNestedState-test.js",
                "bug_count": 2
            },
            {
                "file": "FallbackCompositionState-test.js",
                "bug_count": 2
            },
            {
                "file": "ResponderEventPlugin-test.js",
                "bug_count": 2
            },
            {
                "file": "reactComponentExpect-test.js",
                "bug_count": 2
            },
            {
                "file": "ReactEventListener-test.js",
                "bug_count": 2
            },
            {
                "file": "BeforeInputEventPlugin.js",
                "bug_count": 2
            },
            {
                "file": "ReactDefaultInjection.js",
                "bug_count": 2
            },
            {
                "file": "ReactComponent.js",
                "bug_count": 2
            },
            {
                "file": "ReactDOMFizzServer-test.js",
                "bug_count": 1
            },
            {
                "file": "inspectedElement-test.js",
                "bug_count": 1
            },
            {
                "file": "store-test.js",
                "bug_count": 1
            },
            {
                "file": "README.md",
                "bug_count": 1
            },
            {
                "file": "yarn.lock",
                "bug_count": 1
            },
            {
                "file": "webpack.config.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMRoot-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMRoot.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMNativeEventHeuristic-test.js",
                "bug_count": 1
            },
            {
                "file": "console-test.js",
                "bug_count": 1
            },
            {
                "file": "preprocessor.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerSuspense-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMConsoleErrorReporting-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactCoffeeScriptClass-test.coffee",
                "bug_count": 1
            },
            {
                "file": "ReactStrictMode-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactTypeScriptClass-test.ts",
                "bug_count": 1
            },
            {
                "file": "ReactDOMFiberAsync-test.js",
                "bug_count": 1
            },
            {
                "file": "app.js",
                "bug_count": 1
            },
            {
                "file": "TimelineProfiler-test.js",
                "bug_count": 1
            },
            {
                "file": "preprocessData-test.js",
                "bug_count": 1
            },
            {
                "file": "webpack.standalone.js",
                "bug_count": 1
            },
            {
                "file": "standalone.js",
                "bug_count": 1
            },
            {
                "file": "useSyncExternalStoreShared-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMFizzShellHydration-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMImageLoad-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMNestedEvents-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMUseId-test.js",
                "bug_count": 1
            },
            {
                "file": "SimpleEventPlugin-test.js",
                "bug_count": 1
            },
            {
                "file": "devtools.js",
                "bug_count": 1
            },
            {
                "file": "client.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOM.js",
                "bug_count": 1
            },
            {
                "file": "useFocusWithin-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactUpdaters-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactSuspenseEffectsSemanticsDOM-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMSafariMicrotaskBug-test.js",
                "bug_count": 1
            },
            {
                "file": "profilingCommitTreeBuilder-test.js",
                "bug_count": 1
            },
            {
                "file": "profilingHostRoot-test.js",
                "bug_count": 1
            },
            {
                "file": "DOMPluginEventSystem-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "useMutableSourceHydration-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactStrictMode-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOM.d.ts",
                "bug_count": 1
            },
            {
                "file": "ReactFiberBeginWork.new.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberBeginWork.old.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberDevToolsHook.new.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberDevToolsHook.old.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMClient.d.ts",
                "bug_count": 1
            },
            {
                "file": "types.js",
                "bug_count": 1
            },
            {
                "file": "InspectedElementView.js",
                "bug_count": 1
            },
            {
                "file": "OwnersStack.js",
                "bug_count": 1
            },
            {
                "file": "Updaters.js",
                "bug_count": 1
            },
            {
                "file": "profilingUtils-test.js",
                "bug_count": 1
            },
            {
                "file": "SidebarCommitInfo.js",
                "bug_count": 1
            },
            {
                "file": "ownersListContext-test.js.snap",
                "bug_count": 1
            },
            {
                "file": "profilingCache-test.js.snap",
                "bug_count": 1
            },
            {
                "file": "SidebarCommitInfo.css",
                "bug_count": 1
            },
            {
                "file": "Updaters.css",
                "bug_count": 1
            },
            {
                "file": "ReactFlightClient.js",
                "bug_count": 1
            },
            {
                "file": "ReactFlightDOMServerNode.js",
                "bug_count": 1
            },
            {
                "file": "ReactFlightServer.js",
                "bug_count": 1
            },
            {
                "file": "ReactFlight-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactFizzServer.js",
                "bug_count": 1
            },
            {
                "file": "ReactNativeRenderer.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberHooks.js",
                "bug_count": 1
            },
            {
                "file": "ReactFreshIntegration-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactFabric-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "treeContext-test.js",
                "bug_count": 1
            },
            {
                "file": "agent.js",
                "bug_count": 1
            },
            {
                "file": "Overlay.js",
                "bug_count": 1
            },
            {
                "file": "console.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberCommitWork.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberCompleteWork.js",
                "bug_count": 1
            },
            {
                "file": "Tree.js",
                "bug_count": 1
            },
            {
                "file": "InspectedElementContext.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberBeginWork.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberHostContext.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberNewContext.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberHotReloading.js",
                "bug_count": 1
            },
            {
                "file": "ReactFreshRuntime.js",
                "bug_count": 1
            },
            {
                "file": "createReactNoop.js",
                "bug_count": 1
            },
            {
                "file": "TreeContext.js",
                "bug_count": 1
            },
            {
                "file": "ReactDebugHooks.js",
                "bug_count": 1
            },
            {
                "file": "ReactNoopFlightClient.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiber.js",
                "bug_count": 1
            },
            {
                "file": "ReactNoopFlightServer.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberThrow.js",
                "bug_count": 1
            },
            {
                "file": "ReactHooksInspectionIntegration-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactChildFiber.js",
                "bug_count": 1
            },
            {
                "file": "validateDOMNesting.js",
                "bug_count": 1
            },
            {
                "file": "ReactErrorBoundaries-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactLegacyErrorBoundaries-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberClassComponent.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerIntegrationLegacyContextDisabled-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMFizzServerNode-test.js",
                "bug_count": 1
            },
            {
                "file": "getListener.js",
                "bug_count": 1
            },
            {
                "file": "ReactChildren.js",
                "bug_count": 1
            },
            {
                "file": "enqueueTask.js",
                "bug_count": 1
            },
            {
                "file": "ReactLazy.js",
                "bug_count": 1
            },
            {
                "file": "ReactServerStreamConfigNode.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerIntegrationElements-test.js",
                "bug_count": 1
            },
            {
                "file": "hydration.js",
                "bug_count": 1
            },
            {
                "file": "ReactHooks-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberWorkLoop.js",
                "bug_count": 1
            },
            {
                "file": "store.js",
                "bug_count": 1
            },
            {
                "file": "trustedTypes-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactNativeFiberHostComponent.js",
                "bug_count": 1
            },
            {
                "file": "ReactNativeMount-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMFizzServerBrowser-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactTestUtilsActUnmockedScheduler-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactNoopServer.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMFizzServerNode.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberTreeReflection.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMEventListener.js",
                "bug_count": 1
            },
            {
                "file": "KeyValue.js",
                "bug_count": 1
            },
            {
                "file": "ProfilerStore.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMSuspensePlaceholder-test.js",
                "bug_count": 1
            },
            {
                "file": "RulesOfHooks.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerIntegrationNewContext-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactHooksInspection-test.js",
                "bug_count": 1
            },
            {
                "file": "JestReact.js",
                "bug_count": 1
            },
            {
                "file": "ReactSuspenseFuzz-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMEventListener-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMEventReplaying.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberHostContext-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberLazyComponent.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberHydrationContext.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerIntegrationTestUtils.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerIntegrationBasic-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactNativeError-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactErrorLoggingRecovery-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactTestRendererAct-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactLegacyContextDisabled-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactFreshBabelPlugin.js",
                "bug_count": 1
            },
            {
                "file": "ReactIncrementalErrorReplay-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactErrorUtils-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "invokeGuardedCallbackImpl.www.js",
                "bug_count": 1
            },
            {
                "file": "invokeGuardedCallbackImpl.js",
                "bug_count": 1
            },
            {
                "file": "DevTools.js",
                "bug_count": 1
            },
            {
                "file": "storeStressSync-test.js",
                "bug_count": 1
            },
            {
                "file": "Scheduler.js",
                "bug_count": 1
            },
            {
                "file": "checkPropTypes.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerIntegrationClassContextType-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerIntegrationFragment-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerIntegrationModes-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberContext.js",
                "bug_count": 1
            },
            {
                "file": "ReactServer-test.js",
                "bug_count": 1
            },
            {
                "file": "describeComponentFrame-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMSelection-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactTreeTraversal-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactFreshMultipleRenderer-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "createFlowConfigs.js",
                "bug_count": 1
            },
            {
                "file": "InitializeNativeFabricUIManager.js",
                "bug_count": 1
            },
            {
                "file": "UIManager.js",
                "bug_count": 1
            },
            {
                "file": "context.js",
                "bug_count": 1
            },
            {
                "file": "main.js",
                "bug_count": 1
            },
            {
                "file": "ReactMutableSource.js",
                "bug_count": 1
            },
            {
                "file": "ReactCache.js",
                "bug_count": 1
            },
            {
                "file": "ReactFlightClientStream.js",
                "bug_count": 1
            },
            {
                "file": "ReactFlightDOMRelayClient.js",
                "bug_count": 1
            },
            {
                "file": "ReactFlightDOMRelayServer.js",
                "bug_count": 1
            },
            {
                "file": "ReactFlightServerConfigStream.js",
                "bug_count": 1
            },
            {
                "file": "setupNativeStyleEditor.js",
                "bug_count": 1
            },
            {
                "file": "ReactFabricComponentTree.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberSuspenseComponent.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMHostConfig.js",
                "bug_count": 1
            },
            {
                "file": "ReactDisableSchedulerTimeoutBasedOnReactExpirationTime-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactFlightDOMRelayServerHostConfig.js",
                "bug_count": 1
            },
            {
                "file": "ReactFabricAndNative-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactARTHostConfig.js",
                "bug_count": 1
            },
            {
                "file": "setTextContent.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMSelection.js",
                "bug_count": 1
            },
            {
                "file": "ReactInputSelection.js",
                "bug_count": 1
            },
            {
                "file": "ReactFlightClientWebpackBundlerConfig.js",
                "bug_count": 1
            },
            {
                "file": "ReactNoopRendererAct-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactFlightDOMClient.js",
                "bug_count": 1
            },
            {
                "file": "editor.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerIntegrationUntrustedURL-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "CommitFlamegraphListItem.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberReconciler.old.js",
                "bug_count": 1
            },
            {
                "file": "ReactShallowRenderer-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactShallowRendererHooks-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactShallowRendererMemo-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactThreadIDAllocator.js",
                "bug_count": 1
            },
            {
                "file": "ReactPartialRenderer.js",
                "bug_count": 1
            },
            {
                "file": "ReactPartialRendererContext.js",
                "bug_count": 1
            },
            {
                "file": "ReactPartialRendererHooks.js",
                "bug_count": 1
            },
            {
                "file": "object-assign.inline-umd.js",
                "bug_count": 1
            },
            {
                "file": "ReactFreshBabelPlugin-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMTracing-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "getComponentName.js",
                "bug_count": 1
            },
            {
                "file": "SchedulerNoDOM-test.js",
                "bug_count": 1
            },
            {
                "file": "SchedulerHostConfig.default.js",
                "bug_count": 1
            },
            {
                "file": "ReactBlocks-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactFlightServerRuntime.js",
                "bug_count": 1
            },
            {
                "file": "ReactBlock.js",
                "bug_count": 1
            },
            {
                "file": "ReactTestUtilsAct.js",
                "bug_count": 1
            },
            {
                "file": "SchedulerBrowser-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactHooksInspection-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "DeprecatedDOMEventResponderSystem.js",
                "bug_count": 1
            },
            {
                "file": "DeprecatedDOMEventResponderSystem-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "PressLegacy.js",
                "bug_count": 1
            },
            {
                "file": "FocusWithin-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "PressLegacy-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "DOMModernPluginEventSystem.js",
                "bug_count": 1
            },
            {
                "file": "DOMModernPluginEventSystem-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactSuspenseCallback-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "describeComponentFrame.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerIntegrationHooks-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactHooksWithNoopRenderer-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactSuspenseList-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactTransition-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactCache-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMFiberAsync-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactExpiration-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactIncrementalReflection-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactNewContext-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "useSubscription-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "TransformJSXToReactBabelPlugin.js",
                "bug_count": 1
            },
            {
                "file": "panel.js",
                "bug_count": 1
            },
            {
                "file": "events.js",
                "bug_count": 1
            },
            {
                "file": "SimpleEventPlugin-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "flight-modules.js",
                "bug_count": 1
            },
            {
                "file": "ReactIncremental-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactIncrementalScheduling-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactIncrementalTriangle-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactIncrementalUpdates-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "profilerStore-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactFeatureFlags.js",
                "bug_count": 1
            },
            {
                "file": "ReactFeatureFlags.native-fb.js",
                "bug_count": 1
            },
            {
                "file": "ReactFeatureFlags.native-oss.js",
                "bug_count": 1
            },
            {
                "file": "ReactFeatureFlags.test-renderer.js",
                "bug_count": 1
            },
            {
                "file": "ReactFeatureFlags.test-renderer.www.js",
                "bug_count": 1
            },
            {
                "file": "ReactFeatureFlags.www.js",
                "bug_count": 1
            },
            {
                "file": "bundles.js",
                "bug_count": 1
            },
            {
                "file": "forks.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberRoot.js",
                "bug_count": 1
            },
            {
                "file": "ReactLazy-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactSuspensePlaceholder-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactSchedulerIntegration-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactIncrementalPerf-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactIncrementalPerf-test.internal.js.snap",
                "bug_count": 1
            },
            {
                "file": "ReactFeatureFlags.persistent.js",
                "bug_count": 1
            },
            {
                "file": "test_entry_point.sh",
                "bug_count": 1
            },
            {
                "file": "ReactFiberScheduler.js",
                "bug_count": 1
            },
            {
                "file": "unstable-new-scheduler.fb.js",
                "bug_count": 1
            },
            {
                "file": "unstable-new-scheduler.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberPendingPriority.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberScheduler.new.js",
                "bug_count": 1
            },
            {
                "file": "ReactFiberScheduler.old.js",
                "bug_count": 1
            },
            {
                "file": "ReactFeatureFlags.new-scheduler.js",
                "bug_count": 1
            },
            {
                "file": "ReactFeatureFlags.www-new-scheduler.js",
                "bug_count": 1
            },
            {
                "file": "config.source-new-scheduler.js",
                "bug_count": 1
            },
            {
                "file": "setupNewScheduler.js",
                "bug_count": 1
            },
            {
                "file": "ESLintRuleExhaustiveDeps-test.js",
                "bug_count": 1
            },
            {
                "file": "AttributeTableSnapshot.md",
                "bug_count": 1
            },
            {
                "file": "DOMProperty.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMFiberInput.js",
                "bug_count": 1
            },
            {
                "file": "setupTests.js",
                "bug_count": 1
            },
            {
                "file": "jest.d.ts",
                "bug_count": 1
            },
            {
                "file": "ReactBrowserEventEmitter-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "ReactIncrementalErrorLogging-test.internal.js",
                "bug_count": 1
            },
            {
                "file": "CSSPropertyOperations.js",
                "bug_count": 1
            },
            {
                "file": "dangerousStyleValue.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMFiberComponent.js",
                "bug_count": 1
            },
            {
                "file": "tests-passing.txt",
                "bug_count": 1
            },
            {
                "file": "ReactDOMServerIntegration-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactClassEquivalence-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactART-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactIncrementalSideEffects-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactIncremental-test.js",
                "bug_count": 1
            },
            {
                "file": "validateDOMNesting-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactContextValidator-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactComponent-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactMultiChildText-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactComponentLifeCycle-test.js",
                "bug_count": 1
            },
            {
                "file": "renderSubtreeIntoContainer-test.js",
                "bug_count": 1
            },
            {
                "file": "CSSPropertyOperations-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOM-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMComponentTree-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMTextarea-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactMountDestruction-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactRenderDocument-test.js",
                "bug_count": 1
            },
            {
                "file": "refs-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactChildren-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactElementClone-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactPureComponent-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactCompositeComponentDOMMinimalism-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactTestRenderer-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactChildReconciler-test.js",
                "bug_count": 1
            },
            {
                "file": "SyntheticWheelEvent-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactEmptyComponent-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactFragment-test.js",
                "bug_count": 1
            },
            {
                "file": "findDOMNode-test.js",
                "bug_count": 1
            },
            {
                "file": "refs-destruction-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactIdentity-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactEventIndependence-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactMultiChildReconcile-test.js",
                "bug_count": 1
            },
            {
                "file": "quoteAttributeValueForBrowser-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactJSXElement-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMIframe-test.js",
                "bug_count": 1
            },
            {
                "file": "SyntheticClipboardEvent-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactElement-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactMockedComponent-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMSVG-test.js",
                "bug_count": 1
            },
            {
                "file": "getEventKey-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactMount-test.js",
                "bug_count": 1
            },
            {
                "file": "getNodeForCharacterOffset-test.js",
                "bug_count": 1
            },
            {
                "file": "EventPluginHub-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactNativeAttributePayload-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactStatelessComponent-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactErrorBoundaries-test.js",
                "bug_count": 1
            },
            {
                "file": "onlyChild-test.js",
                "bug_count": 1
            },
            {
                "file": "getEventCharCode-test.js",
                "bug_count": 1
            },
            {
                "file": "inputValueTracking-test.js",
                "bug_count": 1
            },
            {
                "file": "escapeTextContentForBrowser-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMProduction-test.js",
                "bug_count": 1
            },
            {
                "file": "reactProdInvariant-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactNativeMount-test.js",
                "bug_count": 1
            },
            {
                "file": "EventPluginRegistry-test.js",
                "bug_count": 1
            },
            {
                "file": "setInnerHTML-test.js",
                "bug_count": 1
            },
            {
                "file": "accumulateInto-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactCoroutine-test.js",
                "bug_count": 1
            },
            {
                "file": "dev-expression-with-codes-test.js",
                "bug_count": 1
            },
            {
                "file": "adler32-test.js",
                "bug_count": 1
            },
            {
                "file": "PooledClass-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactPerf-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDebugTool-test.js",
                "bug_count": 1
            },
            {
                "file": "Transaction-test.js",
                "bug_count": 1
            },
            {
                "file": "CSSProperty-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactPropTypes-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactBind-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactBindOptout-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactClass-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactClassMixin-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactComponentWithPureRenderMixin-test.js",
                "bug_count": 1
            },
            {
                "file": "update-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactCSSTransitionGroup-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactTransitionChildMapping-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactTransitionGroup-test.js",
                "bug_count": 1
            },
            {
                "file": "sliceChildren-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactStateSetters-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMIDOperations-test.js",
                "bug_count": 1
            },
            {
                "file": "traverseAllChildren-test.js",
                "bug_count": 1
            },
            {
                "file": "LinkedStateMixin-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactLinkPropTypes-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMTreeTraversal-test.js",
                "bug_count": 1
            },
            {
                "file": "DisabledInputUtil-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMInput.js",
                "bug_count": 1
            },
            {
                "file": "SyntheticEvent.js",
                "bug_count": 1
            },
            {
                "file": "SelectEventPlugin.js",
                "bug_count": 1
            },
            {
                "file": "EventPluginUtils.js",
                "bug_count": 1
            },
            {
                "file": "ResponderEventPlugin.js",
                "bug_count": 1
            },
            {
                "file": "SimpleEventPlugin.js",
                "bug_count": 1
            },
            {
                "file": "EnterLeaveEventPlugin.js",
                "bug_count": 1
            },
            {
                "file": "EventPropagators.js",
                "bug_count": 1
            },
            {
                "file": "EventPluginHub.js",
                "bug_count": 1
            },
            {
                "file": "TapEventPlugin.js",
                "bug_count": 1
            },
            {
                "file": "ReactEventEmitterMixin.js",
                "bug_count": 1
            },
            {
                "file": "ReactEventListener.js",
                "bug_count": 1
            },
            {
                "file": "ReactDOMTreeTraversal.js",
                "bug_count": 1
            },
            {
                "file": "ReactInjection.js",
                "bug_count": 1
            },
            {
                "file": ".eslintignore",
                "bug_count": 1
            },
            {
                "file": "ReactPerf.js",
                "bug_count": 1
            },
            {
                "file": "reactComponentExpect.js",
                "bug_count": 1
            },
            {
                "file": "createHierarchyRenderer.js",
                "bug_count": 1
            },
            {
                "file": "MetaMatchers.js",
                "bug_count": 1
            },
            {
                "file": "MetaMatchers-test.js",
                "bug_count": 1
            },
            {
                "file": "ReactDefaultPerf.js",
                "bug_count": 1
            },
            {
                "file": "ReactDefaultPerfAnalysis.js",
                "bug_count": 1
            },
            {
                "file": "shouldUpdateReactComponent.js",
                "bug_count": 1
            },
            {
                "file": "ReactCompositeComponent.js",
                "bug_count": 1
            },
            {
                "file": "ref-05-events.zh-CN.md",
                "bug_count": 1
            },
            {
                "file": "FallbackCompositionState.js",
                "bug_count": 1
            },
            {
                "file": "DefaultEventPluginOrder.js",
                "bug_count": 1
            },
            {
                "file": "CompositionEventPlugin.js",
                "bug_count": 1
            },
            {
                "file": "browserify.js",
                "bug_count": 1
            },
            {
                "file": "DOMPropertyOperations.js",
                "bug_count": 1
            },
            {
                "file": "adler32.js",
                "bug_count": 1
            },
            {
                "file": "ReactMount.js",
                "bug_count": 1
            },
            {
                "file": "ReactMarkupChecksum.js",
                "bug_count": 1
            },
            {
                "file": "ReactServerRendering.js",
                "bug_count": 1
            },
            {
                "file": "getReactRootElementInContainer.js",
                "bug_count": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 3,
        "label": "partial"
    },
    {
        "question": "What are the most buggy files?",
        "number": 12,
        "category": 2,
        "response": "The most buggy files, based on the number of issues impacting them, are as follows: \n\n1. `ReactDOMInput-test.js` with 3 issues.\n2. `profilingCache-test.js.snap` with 2 issues.\n3. `ReactDOMComponent.js` with 2 issues.\n4. `ChangeEventPlugin.js` with 2 issues.\n5. `renderer.js` with 2 issues.\n6. `ExhaustiveDeps.js` with 2 issues.\n7. `package.json` with 2 issues.\n8. `ReactDOMInput.js` with 2 issues.\n\nThese files have been impacted by the highest number of issues.",
        "chain_of_thought": "To determine the most buggy files, we need to identify files that have been impacted by the most issues. In the given schema, the relevant nodes are the `File` and `Issue` nodes. The relationship that connects these nodes is the `impacted` relationship, which indicates that a file is associated with an issue.\n\nThe interpretation of \"most buggy files\" is the files that have been linked to the highest number of issues. Therefore, we need to count the number of issues impacting each file and sort them in descending order to find the files with the most issues.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n```\n\nThis query matches all `Issue` nodes that have an `impacted` relationship with `File` nodes, counts the number of issues for each file, and returns the top 10 files with the highest issue count.",
        "query": "cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "ReactDOMInput-test.js",
                "issue_count": 3
            },
            {
                "file": "profilingCache-test.js.snap",
                "issue_count": 2
            },
            {
                "file": "ReactDOMComponent.js",
                "issue_count": 2
            },
            {
                "file": "ChangeEventPlugin.js",
                "issue_count": 2
            },
            {
                "file": "renderer.js",
                "issue_count": 2
            },
            {
                "file": "ExhaustiveDeps.js",
                "issue_count": 2
            },
            {
                "file": "package.json",
                "issue_count": 2
            },
            {
                "file": "ReactDOMInput.js",
                "issue_count": 2
            },
            {
                "file": "03-interactivity-and-dynamic-uis.zh-CN.md",
                "issue_count": 1
            },
            {
                "file": "03-interactivity-and-dynamic-uis.md",
                "issue_count": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "what are the buggy commits that happened on March 1, 2022?",
        "number": 13,
        "category": 2,
        "response": "The buggy commit that happened on March 1, 2022, is identified by the commit ID '17806594cc28284fe195f918e8d77de3516848ec'. The commit message is: \"Move createRoot/hydrateRoot to react-dom/client (#23385)...\" with further details about the changes and the rationale behind them. The commit was made on March 1, 2022, at 05:13:28 UTC.",
        "chain_of_thought": "To determine the buggy commits that happened on March 1, 2022, we need to identify commits that introduced issues on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship. We also need to filter the commits based on the committedDate property to match March 1, 2022.\n\nHere's the step-by-step breakdown of the query:\n\n1. Match commits that introduced issues:\n   - Use the introduced relationship between Commit and Issue nodes.\n\n2. Filter commits by the committedDate to March 1, 2022:\n   - Use the committedDate property of the Commit node and format the date in ISO format.\n\n3. Return the commit IDs and any other relevant information.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-03-01T.*'\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS date\n```\n\nThis query will return the IDs and messages of commits that introduced issues on March 1, 2022.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-03-01T.*'\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS date\n",
        "result": [
            {
                "commitId": "17806594cc28284fe195f918e8d77de3516848ec",
                "commitMessage": "\"Move createRoot/hydrateRoot to react-dom/client (#23385)\n\n* Move createRoot/hydrateRoot to /client\r\n\r\nWe want these APIs ideally to be imported separately from things you\r\nmight use in arbitrary components (like flushSync). Those other methods\r\nare \"isomorphic\" to how the ReactDOM tree is rendered. Similar to hooks.\r\n\r\nE.g. importing flushSync into a component that only uses it on the client\r\nshould ideally not also pull in the entry client implementation on the\r\nserver.\r\n\r\nThis also creates a nicer parity with /server where the roots are in a\r\nseparate entry point.\r\n\r\nUnfortunately, I cant quite do this yet because we have some legacy APIs\r\nthat we plan on removing (like findDOMNode) and we also havent implemented\r\nflushSync using a flag like startTransition does yet.\r\n\r\nAnother problem is that we currently encourage these APIs to be aliased by\r\n/profiling (or unstable_testing). In the future you dont have to alias\r\nthem because you can just change your roots to just import those APIs and\r\ntheyll still work with the isomorphic forms. Although we might also just\r\nuse export conditions for them.\r\n\r\nFor that all to work, I went with a different strategy for now where the\r\nreal API is in / but it comes with a warning if you use it. If you instead\r\nimport /client it disables the warning in a wrapper. That means that if you\r\nalias / then import /client that will inturn import the alias and itll\r\njust work.\r\n\r\nIn a future breaking changes (likely when we switch to ESM) we can just\r\nremove createRoot/hydrateRoot from / and move away from the aliasing\r\nstrategy.\r\n\r\n* Update tests to import from react-dom/client\r\n\r\n* Fix fixtures\r\n\r\n* Update warnings\r\n\r\n* Add test for the warning\r\n\r\n* Update devtools\r\n\r\n* Change order of react-dom, react-dom/client alias\r\n\r\nI think the order matters here. The first one takes precedence.\r\n\r\n* Require react-dom through client so it can be aliased\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "date": "2022-03-01T05:13:28Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "what commits were buggy on April 9, 2021?",
        "number": 14,
        "category": 2,
        "response": "The commit with the ID 'bdc23c3dba86eaa03c7accecc16e8fd997e9185e' was identified as buggy on April 9, 2021. The commit message was \"DevTools shows which fibers scheduled the current update (#21171)\".",
        "chain_of_thought": "To determine which commits were buggy on April 9, 2021, we need to identify the relevant nodes and relationships. The Commit node represents commits, and the Issue node represents bugs. The relationship between Commit and Issue is the introduced relationship, which indicates that a commit introduced a bug.\n\nThe question specifies a date, April 9, 2021. We need to format this date in ISO format as \"2021-04-09\" and use a regex to match the committedDate property of the Commit node, which is a string.\n\nThe query should find commits that introduced issues and were committed on April 9, 2021. Therefore, the query is:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2021-04-09.*'\nRETURN c.id AS commit_id, c.message AS commit_message\n```\n\nThis query matches commits that introduced issues and filters them by the committed date using a regex pattern to match any time on April 9, 2021. It then returns the commit ID and message for each matching commit.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2021-04-09.*'\nRETURN c.id AS commit_id, c.message AS commit_message\n",
        "result": [
            {
                "commit_id": "bdc23c3dba86eaa03c7accecc16e8fd997e9185e",
                "commit_message": "\"DevTools shows which fibers scheduled the current update (#21171)\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "commit(s) that fixed the bug ticket 10217?",
        "number": 15,
        "category": 2,
        "response": "The commit that fixed the bug ticket 10217 is identified by the commit ID: 2e757790751ab8d165fc4df37e90a59d914c4527.",
        "chain_of_thought": "To find the commit(s) that fixed the bug ticket with the number 10217, we need to identify the relevant nodes and relationships. The bug ticket corresponds to an Issue node, and we are looking for Commit nodes that have a fixed relationship with this Issue node.\n\nFirst, we need to match the Issue node with the specific number 10217. Then, we need to find the Commit nodes that have a fixed relationship with this Issue node.\n\nThe query to find the commit(s) that fixed the bug ticket 10217 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 10217})\nRETURN c.id AS commit_id\n```\n\nThis query will return the IDs of the commits that fixed the specified bug ticket.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 10217})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "2e757790751ab8d165fc4df37e90a59d914c4527"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "which commit fixed the bug ticket 21442?",
        "number": 16,
        "category": 2,
        "response": "The commit with the ID `1e3383a41154cb32d8d6b78b2451ee4dabfcb973` fixed the bug ticket 21442.",
        "chain_of_thought": "To determine which commit fixed the bug associated with ticket 21442, we need to identify the relevant nodes and relationships. The ticket number corresponds to an Issue node, and we are interested in finding the Commit node that has a fixed relationship with this Issue node.\n\nHere's the step-by-step breakdown:\n\n1. **Identify the Issue Node**: We need to find the Issue node with the number 21442.\n2. **Find the Commit Node**: We need to find the Commit node that has a fixed relationship with the identified Issue node.\n\nThe relevant relationship between Commit and Issue for this question is the fixed relationship.\n\nTherefore, the query to find the commit that fixed the bug ticket 21442 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 21442})\nRETURN c.id AS commit_id\n```\n\nThis query will return the ID of the commit that fixed the bug associated with ticket number 21442.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 21442})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "1e3383a41154cb32d8d6b78b2451ee4dabfcb973"
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "Determine the bug(s) that were introduced because of commit hash f912186012f17858b9d25466c658a46e25093941?",
        "number": 17,
        "category": 2,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To determine the bug(s) introduced by a specific commit, we need to identify the relevant nodes and relationships. The commit in question is identified by its hash, which corresponds to the `Commit` node. We are interested in finding the `Issue` nodes that were introduced by this commit. The relevant relationship between `Commit` and `Issue` for this question is the `introduced` relationship.\n\nTherefore, the query to find the bug(s) introduced by the commit with hash `f912186012f17858b9d25466c658a46e25093941` is:\n\n```cypher\nMATCH (c:Commit {id: 'f912186012f17858b9d25466c658a46e25093941'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query matches the commit with the specified hash and finds all issues that were introduced by this commit, returning the issue ID, title, and URL for each issue.",
        "query": "cypher\nMATCH (c:Commit {id: 'f912186012f17858b9d25466c658a46e25093941'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "what are the bugs caused by commit 2e757790751ab8d165fc4df37e90a59d914c4527?",
        "number": 18,
        "category": 2,
        "response": "I'm sorry, but I don't have any information about the bugs caused by commit 2e757790751ab8d165fc4df37e90a59d914c4527. Can I help with anything else?",
        "chain_of_thought": "To determine the bugs caused by a specific commit, we need to identify the issues that were introduced by that commit. In the schema, the relevant nodes are the Commit and Issue nodes. The relationship that connects a commit to an issue it introduced is the introduced relationship.\n\nHere's how we can construct the query:\n\n1. Identify the specific commit using its ID.\n2. Use the introduced relationship to find the issues that were introduced by this commit.\n\nThe query to find the bugs (issues) caused by commit `2e757790751ab8d165fc4df37e90a59d914c4527` is:\n\n```cypher\nMATCH (c:Commit {id: '2e757790751ab8d165fc4df37e90a59d914c4527'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query will return the ID, title, and URL of the issues that were introduced by the specified commit.",
        "query": "cypher\nMATCH (c:Commit {id: '2e757790751ab8d165fc4df37e90a59d914c4527'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "Determine the percentage of the fixing commits that introduced bugs on Nov. 2013?",
        "number": 19,
        "category": 3,
        "response": "In November 2013, 20% of the fixing commits also introduced bugs.",
        "chain_of_thought": "To determine the percentage of fixing commits that introduced bugs in November 2013, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We are dealing with `Commit` nodes and `Issue` nodes.\n   - The relationships of interest are `introduced` (a commit introduced a bug) and `fixed` (a commit fixed a bug).\n\n2. **Filter commits by date**: \n   - We need to filter commits that occurred in November 2013. The `committedDate` property of the `Commit` node will be used for this purpose.\n\n3. **Calculate the total number of fixing commits**:\n   - Find all commits that have a `fixed` relationship with an `Issue`.\n\n4. **Calculate the number of fixing commits that also introduced bugs**:\n   - Find all commits that have both `fixed` and `introduced` relationships with `Issue` nodes.\n\n5. **Calculate the percentage**:\n   - Use the counts from steps 3 and 4 to calculate the percentage.\n\nHere is the Cypher query to achieve this:\n\n```cypher\n// Find the total number of fixing commits in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nWITH COUNT(c) AS totalFixingCommits\n\n// Find the number of fixing commits that also introduced bugs in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n```\n\nThis query first calculates the total number of fixing commits in November 2013, then calculates how many of those also introduced bugs, and finally computes the percentage of such commits.",
        "query": "cypher\n// Find the total number of fixing commits in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nWITH COUNT(c) AS totalFixingCommits\n\n// Find the number of fixing commits that also introduced bugs in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n",
        "result": [
            {
                "percentage": 20.0
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "How many fixing commits caused bugs on Nov. 2013?",
        "number": 20,
        "category": 3,
        "response": "In November 2013, there were 2 fixing commits that caused bugs.",
        "chain_of_thought": "To address the question, we need to determine the number of commits that both fixed an issue and introduced a bug in November 2013. The schema provides us with the necessary relationships and properties to construct the query.\n\n1. **Identify the relevant nodes and relationships:**\n   - We need to consider the `Commit` node, as we are interested in commits.\n   - The `fixed` relationship indicates that a commit fixed an issue.\n   - The `introduced` relationship indicates that a commit introduced a bug.\n\n2. **Filter by date:**\n   - We need to filter commits by the `committedDate` property to only include those from November 2013. The date format should be in ISO format, and since the time is not specified, we will use a regex to match any time on the specified dates.\n\n3. **Construct the query:**\n   - We will match commits that have both `fixed` and `introduced` relationships.\n   - We will filter these commits by the `committedDate` to include only those from November 2013.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n```\n\nThis query matches commits that have both fixed and introduced relationships to issues, filters them by the committed date in November 2013, and returns the count of such commits.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n",
        "result": [
            {
                "fixing_commits_causing_bugs": 2
            }
        ],
        "isAmbiguous": false,
        "iteration": 3,
        "label": "correct"
    },
    {
        "question": "how many commits happened in last month?",
        "number": 1,
        "category": 1,
        "response": "There were 166 commits that happened last month.",
        "chain_of_thought": "To determine how many commits happened in the last month, we need to consider the current date, which is 2024-08-26T00:00:00Z. The last month would be from 2024-07-26T00:00:00Z to 2024-08-25T23:59:59Z.\n\nThe relevant nodes for this query are the Commit nodes, and we need to filter these nodes based on the `committedDate` property. The `committedDate` should be in the range of the last month.\n\nHere's the Cypher query to find the number of commits that happened in the last month:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n```\n\nThis query matches all commits and filters them based on the `committedDate` property to ensure they fall within the specified date range. It then returns the count of these commits.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2024-07-26T00:00:00Z\" AND c.committedDate <= \"2024-08-25T23:59:59Z\"\nRETURN COUNT(c) AS numberOfCommits\n",
        "result": [
            {
                "numberOfCommits": 166
            }
        ],
        "isAmbiguous": true,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "what is the latest commit?",
        "number": 2,
        "category": 1,
        "response": "The latest commit has the ID `a960b92cb93e7d006e5e8de850f9b8b51f655c90`. It was committed on August 20, 2024, at 02:34:20 UTC. The commit message is:\n\n\"[Flight] model halting as never delivered chunks (#30740)\n\nstacked on: #30731\n\nWe've refined the model of halting a prerender. Now when you abort during a prerender we simply omit the rows that would complete the flight render. This is analogous to prerendering in Fizz where you must resume the prerender to actually result in errors propagating in the postponed holes. We don't have a resume yet for flight and its not entirely clear how that will work however the key insight here is that deciding whether the never resolving rows are an error or not should really be done on the consuming side rather than in the producer.\n\nThis PR also reintroduces the logs for the abort error/postpone when prerendering which will give you some indication that something wasn't finished when the prerender was aborted.\"\n\nThe commit includes 253 additions and 283 deletions, affecting 13 files. No comments are associated with this commit.",
        "chain_of_thought": "To determine the latest commit, we need to identify the most recent commit based on the `committedDate` property of the `Commit` node. The task is to find the commit with the most recent date.\n\nFirst, we need to match all `Commit` nodes:\n```cypher\nMATCH (c:Commit)\n```\n\nNext, we need to return the commit with the latest `committedDate`. We can achieve this by ordering the commits by `committedDate` in descending order and limiting the result to the top one:\n```cypher\nRETURN c\nORDER BY c.committedDate DESC\nLIMIT 1\n```\n\nTherefore, the complete query to find the latest commit is:\n```cypher\nMATCH (c:Commit)\nRETURN c\nORDER BY c.committedDate DESC\nLIMIT 1\n```",
        "query": "cypher\nMATCH (c:Commit)\nRETURN c\nORDER BY c.committedDate DESC\nLIMIT 1\n",
        "result": [
            {
                "c": {
                    "additions": 253,
                    "deletions": 283,
                    "committedDate": "2024-08-20T02:34:20Z",
                    "changedFiles": 13,
                    "commentsCount": 0,
                    "id": "a960b92cb93e7d006e5e8de850f9b8b51f655c90",
                    "type": "Commit",
                    "message": "\"[Flight] model halting as never delivered chunks (#30740)\n\nstacked on: #30731\r\n\r\nWeve refined the model of halting a prerender. Now when you abort\r\nduring a prerender we simply omit the rows that would complete the\r\nflight render. This is analagous to prerendering in Fizz where you must\r\nresume the prerender to actually result in errors propagating in the\r\npostponed holes. We dont have a resume yet for flight and its not\r\nentirely clear how that will work however the key insight here is that\r\ndeciding whether the never resolving rows are an error or not should\r\nreally be done on the consuming side rather than in the producer.\r\n\r\nThis PR also reintroduces the logs for the abort error/postpone when\r\nprerendering which will give you some indication that something wasnt\r\nfinished when the prerender was aborted.\""
                }
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "can you tell me the details of the commits between May 27th 2018 and May 31st 2018?",
        "number": 3,
        "category": 1,
        "response": "Here are the details of the commits made between May 27th, 2018, and May 31st, 2018:\n\n1. **Commit ID:** a32f857ac78ad1b33c61e6fbd47ccd57f21155c2\n   - **Message:** \"Use --frozen-lockfile for Yarn in CI build (#12914)...\"\n   - **Additions:** 1\n   - **Deletions:** 1\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-28T18:52:42Z\n\n2. **Commit ID:** aa85b0fd5ffc92de38720c29833a54c67285abfb\n   - **Message:** \"Upgrade to Jest 23 (#12894)...\"\n   - **Additions:** 602\n   - **Deletions:** 1004\n   - **Changed Files:** 28\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-28T22:03:15Z\n\n3. **Commit ID:** 8aeea5afa2d688968545b1cc5a30a48ddc0fa503\n   - **Message:** \"Do not assign node.value on input creation if no change will occur (#12925)...\"\n   - **Additions:** 30\n   - **Deletions:** 7\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T13:48:58Z\n\n4. **Commit ID:** 4f1f909b5b5ffe28675eed3fdb645dfaf975c1ef\n   - **Message:** \"Disable Flow on AppVeyor again...\"\n   - **Additions:** 1\n   - **Deletions:** 1\n   - **Changed Files:** 1\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T14:47:14Z\n\n5. **Commit ID:** 83f76e4db9a060911774f497b5715bd4d4f42a9c\n   - **Message:** \"ForwardRefs supports propTypes (#12911)...\"\n   - **Additions:** 194\n   - **Deletions:** 103\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T16:50:49Z\n\n6. **Commit ID:** 001f9ef4717a0928b4875cbad3421a17f49f95a5\n   - **Message:** \"Release script prompts for NPM 2FA code (#12908)...\"\n   - **Additions:** 48\n   - **Deletions:** 3\n   - **Changed Files:** 6\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T19:50:04Z\n\n7. **Commit ID:** ff724d3c286a1753723ea71e8c046498ed1aac98\n   - **Message:** \"[scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)...\"\n   - **Additions:** 64\n   - **Deletions:** 5\n   - **Changed Files:** 8\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-29T20:30:04Z\n\n8. **Commit ID:** 79a740c6e32ca300d4e7ff55ab06de172d4237fd\n   - **Message:** \"Rename variables to remove references to global global (#12931)...\"\n   - **Additions:** 10\n   - **Deletions:** 10\n   - **Changed Files:** 2\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-30T00:54:38Z\n\n9. **Commit ID:** e0a03c1b4d84453122c4e9d1a5e0cec52bef9066\n   - **Message:** \"Extend input type check in selection capabilities (#12062) (#12135)...\"\n   - **Additions:** 71\n   - **Deletions:** 2\n   - **Changed Files:** 3\n   - **Comments Count:** 0\n   - **Committed Date:** 2018-05-30T11:08:21Z\n\n10. **Commit ID:** ae57b125c798418fb6846094cfa911530206e074\n    - **Message:** \"[simple-cache-provider] Use LRU cache eviction (#12851)...\"\n    - **Additions:** 153\n    - **Deletions:** 31\n    - **Changed Files:** 2\n    - **Comments Count:** 0\n    - **Committed Date:** 2018-05-30T20:12:29Z\n\nThese commits were made during the specified time period, detailing various changes and updates in the repository.",
        "chain_of_thought": "To address the question, we need to find the details of commits made between May 27th, 2018, and May 31st, 2018. The relevant node for this query is the Commit node, and we will use the `committedDate` property to filter the commits within the specified date range.\n\nFirst, we need to format the dates in ISO format. The start date is \"2018-05-27T00:00:00Z\" and the end date is \"2018-05-31T23:59:59Z\" to include the entire day of May 31st.\n\nThe query will match all commits and filter them based on the `committedDate` property to fall within the specified range. We will then return the details of these commits.\n\nThe complete query is:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2018-05-27T00:00:00Z\" AND c.committedDate <= \"2018-05-31T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n```\n\nThis query will return the details of the commits, including their ID, message, number of additions, deletions, changed files, comments count, and the committed date, all sorted by the committed date.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate >= \"2018-05-27T00:00:00Z\" AND c.committedDate <= \"2018-05-31T23:59:59Z\"\nRETURN c.id AS commitId, c.message AS message, c.additions AS additions, c.deletions AS deletions, c.changedFiles AS changedFiles, c.commentsCount AS commentsCount, c.committedDate AS committedDate\nORDER BY c.committedDate\n",
        "result": [
            {
                "commitId": "a32f857ac78ad1b33c61e6fbd47ccd57f21155c2",
                "message": "\"Use --frozen-lockfile for Yarn in CI build (#12914)\n\nCI builds should always use the `--frozen-lockfile` option. It will fail the build if the lockfile is out-of-date:\r\n\r\n> If you need reproducible dependencies, which is usually the case with the continuous integration systems, you should pass --frozen-lockfile flag.\r\n\r\n(https://yarnpkg.com/en/docs/cli/install/)\"",
                "additions": 1,
                "deletions": 1,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-28T18:52:42Z"
            },
            {
                "commitId": "aa85b0fd5ffc92de38720c29833a54c67285abfb",
                "message": "\"Upgrade to Jest 23 (#12894)\n\n* Upgrade to Jest 23 beta\r\n\r\n* prefer `.toHaveBeenCalledTimes`\r\n\r\n* 23 stable\"",
                "additions": 602,
                "deletions": 1004,
                "changedFiles": 28,
                "commentsCount": 0,
                "committedDate": "2018-05-28T22:03:15Z"
            },
            {
                "commitId": "8aeea5afa2d688968545b1cc5a30a48ddc0fa503",
                "message": "\"Do not assign node.value on input creation if no change will occur (#12925)\n\nThis commit fixes an issue where assigning an empty string to required\r\ntext inputs triggers the invalid state in Firefox (~60.0.1).\r\n\r\nIt does this by first comparing the initial state value to the current\r\nvalue property on the text element. This:\r\n\r\n1. Prevents the validation issue\r\n2. Avoids an extra DOM Mutation in some cases\"",
                "additions": 30,
                "deletions": 7,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-29T13:48:58Z"
            },
            {
                "commitId": "4f1f909b5b5ffe28675eed3fdb645dfaf975c1ef",
                "message": "\"Disable Flow on AppVeyor again\n\nIt runs out of memory.\"",
                "additions": 1,
                "deletions": 1,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-29T14:47:14Z"
            },
            {
                "commitId": "83f76e4db9a060911774f497b5715bd4d4f42a9c",
                "message": "\"ForwardRefs supports propTypes (#12911)\n\n* Moved some internal forwardRef tests to not be internal\r\n* ForwardRef supports propTypes\"",
                "additions": 194,
                "deletions": 103,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-29T16:50:49Z"
            },
            {
                "commitId": "001f9ef4717a0928b4875cbad3421a17f49f95a5",
                "message": "\"Release script prompts for NPM 2FA code (#12908)\n\n* Release script prompts for NPM 2fa code\"",
                "additions": 48,
                "deletions": 3,
                "changedFiles": 6,
                "commentsCount": 0,
                "committedDate": "2018-05-29T19:50:04Z"
            },
            {
                "commitId": "ff724d3c286a1753723ea71e8c046498ed1aac98",
                "message": "\"[scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)\n\n* Use local references to global things inside scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nWe want to avoid initially calling one version of an API and then later\r\naccessing a polyfilled version.\r\n\r\n**test plan:**\r\nRun existing tests.\r\n\r\n* Shim ReactScheduler for www\r\n\r\n**what is the change?:**\r\nIn www we want to reference the separate build of ReactScheduler,\r\nwhich allows treating it as a separate module internally.\r\n\r\n**why make this change?:**\r\nWe need to require the ReactScheduler before our rAF polyfill activates,\r\nin order to customize which custom behaviors we want.\r\n\r\nThis is also a step towards being able to experiment with using it\r\noutside of React.\r\n\r\n**test plan:**\r\nRan tests, ran the build, and ran `test-build`.\r\n\r\n* Generate a bundle for fb-www\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nSplitting out the schedule module allows us to load it before\r\npolyfills kick in for rAF and other APIs.\r\n\r\nAnd long term we want to split this into a separate module anyway, this\r\nis a step towards that.\r\n\r\n**test plan:**\r\nIll run the sync next week and verify that this all works. :)\r\n\r\n* ran prettier\r\n\r\n* fix rebase issues\r\n\r\n* Change names of variables used for holding globals\"",
                "additions": 64,
                "deletions": 5,
                "changedFiles": 8,
                "commentsCount": 0,
                "committedDate": "2018-05-29T20:30:04Z"
            },
            {
                "commitId": "79a740c6e32ca300d4e7ff55ab06de172d4237fd",
                "message": "\"Rename variables to remove references to global global (#12931)\n\n**what is the change?:**\r\nIn a recent PR we were referencing some global variables and storing\r\nlocal references to them.\r\n\r\nTo make things more natural, we co-opted the original name of the global\r\nfor our local reference. To make this work with Flow, we get the\r\noriginal reference from window.requestAnimationFrame and assign it to\r\nconst requestAnimationFrame.\r\n\r\nSometimes React is used in an environment where window is not defined\r\n- in that case we need to use something else, or hide the window\r\nreference somewhere.\r\n\r\nWe opted to use global thinking that Babel transforms would fill that\r\nin with the proper thing.\r\n\r\nBut for some of our fixtures we are not doing that transform on the\r\nbundle.\r\n\r\n**why make this change?:**\r\nI want to unbreak this on master and then investigate more about what we\r\nshould do to fix this.\r\n\r\n**test plan:**\r\nrun `yarn build` and open the fixtures.\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12930\"",
                "additions": 10,
                "deletions": 10,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-30T00:54:38Z"
            },
            {
                "commitId": "e0a03c1b4d84453122c4e9d1a5e0cec52bef9066",
                "message": "\"Extend input type check in selection capabilities (#12062) (#12135)\n\n* Do not set selection when prior selection is undefined (#12062)\r\n\r\n`restoreSelection` did not account for input elements that have changed\r\ntype after the commit phase. The new `text` input supported selection\r\nbut the old `email` did not and `setSelection` was incorrectly trying to\r\nrestore `null` selection state.\r\n\r\nWe also extend input type check in selection capabilities to cover cases\r\nwhere input type is `search`, `tel`, `url`, or `password`.\r\n\r\n* Add link to HTML spec for element types and selection\r\n\r\n* Add reset button to ReplaceEmailInput\r\n\r\nThis commit adds a button to restore the original state of the\r\nReplaceEmailInput fixture so that it can be run multiple times without\r\nrefreshing the page.\"",
                "additions": 71,
                "deletions": 2,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-30T11:08:21Z"
            },
            {
                "commitId": "ae57b125c798418fb6846094cfa911530206e074",
                "message": "\"[simple-cache-provider] Use LRU cache eviction (#12851)\n\n* [simple-cache-provider] Use LRU cache eviction\r\n\r\nMax size is hard-coded to 500. In the future, we should make this\r\nconfigurable per resource.\r\n\r\n* Evict PAGE_SIZE records from cache when max limit is reached\"",
                "additions": 153,
                "deletions": 31,
                "changedFiles": 2,
                "commentsCount": 0,
                "committedDate": "2018-05-30T20:12:29Z"
            },
            {
                "commitId": "524a74331399fd7102037c878f327afbd5e14f53",
                "message": "\"Fix for Flow issues in SimpleCacheProvider (#12942)\n\n* Fix for Flow issues in SimpleCacheProvider\r\n\r\n**what is the change?:**\r\n- Fixed some flow errors which were somehow swallowed when CI\r\noriginally\r\n- Loosen flow types to avoid issue with recursive loop in Flow; https://github.com/facebook/flow/issues/5870\r\n\r\n**why make this change?:**\r\nTo unbreak master and unblock other changes we want to make.\r\n\r\n**test plan:**\r\nFlow passes!\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12941\r\n\r\n* Fix lints\"",
                "additions": 42,
                "deletions": 21,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:31:41Z"
            },
            {
                "commitId": "3118ed9d640ad28af306de308301f4fcd029ffca",
                "message": "\"Expose unstable_interactiveUpdates on ReactDOM (#12943)\"",
                "additions": 2,
                "deletions": 0,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:31:59Z"
            },
            {
                "commitId": "15767a8f8f798f0d80df4ddbc7cfaebdc29996a8",
                "message": "\"[scheduler] 5/n Error handling in scheduler (#12920)\n\n* Initial failing unit test for error handling in schedule\r\n\r\n**what is the change?:**\r\nsee title\r\n\r\n**why make this change?:**\r\nAdding tests for the error handling behavior we are about to add. This\r\ntest is failing, which gives us the chance to make it pass.\r\n\r\nWrote skeletons of some other tests to add.\r\n\r\nUnit testing this way is really hacky, and Im also adding to the\r\nfixture to test this in the real browser environment.\r\n\r\n**test plan:**\r\nRan new test, saw it fail!\r\n\r\n* Add fixture for testing error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded a fixture which does the following -\r\nlogs in the console to show what happens when you use\r\n`requestAnimationFrame` to schedule a series of callbacks and some of\r\nthem throw errors.\r\n\r\nThen does the same actions with the `scheduler` and verifies that it\r\nbehaves in a similar way.\r\n\r\nHard to really verify the errors get thrown at the proper time without\r\nlooking at the console.\r\n\r\n**why make this change?:**\r\nWe want the most authentic, accurate test of how errors are handled in\r\nthe scheduler. Thats what this fixture should be.\r\n\r\n**test plan:**\r\nManually verified that this test does what I expect - right now its\r\nfailing but follow up commits will fix that.\r\n\r\n* Handle errors in scheduler\r\n\r\n**what is the change?:**\r\nWe set a flag before calling any callback, and then use a try/finally\r\nblock to wrap it. Note that we *do not* catch the error, if one is\r\nthrown. But, we only unset the flag after the callback successfully\r\nfinishes.\r\n\r\nIf we reach the finally block and the flag was not unset, then it\r\nmeans an error was thrown.\r\n\r\nIn that case we start a new postMessage callback, to finish calling any\r\nother pending callbacks if there is time.\r\n\r\n**why make this change?:**\r\nWe need to make sure that an error thrown from one callback doesnt stop\r\nother callbacks from firing, but we also dont want to catch or swallow\r\nthe error because we want engineers to still be able to log and debug\r\nerrors.\r\n\r\n**test plan:**\r\nNew tests added are passing, and we verified that they fail without this\r\nchange.\r\n\r\n* Add more tests for error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded tests for more situations where error handling may come up.\r\n\r\n**why make this change?:**\r\nTo get additional protection against this being broken in the future.\r\n\r\n**test plan:**\r\nRan new tests and verified that they fail when error handling fails.\r\n\r\n* callSafely -> callUnsafely\r\n\r\n* Fix bugs with error handling in schedule\r\n\r\n**what is the change?:**\r\n- ensure that we properly remove the callback from the linked list, even\r\nif it throws an error and is timed out.\r\n- ensure that you can call cancelScheduledWork more than once and it\r\nis idempotent.\r\n\r\n**why make this change?:**\r\nTo fix bugs :)\r\n\r\n**test plan:**\r\nExisting tests pass, and well add more tests in a follow up commit.\r\n\r\n* Unit tests for error handling with timed out callbacks\r\n\r\n**what is the change?:**\r\nMore unit tests, to cover behavior which we missed; error handling of\r\ntimed out callbacks.\r\n\r\n**why make this change?:**\r\nTo protect the future!~\r\n\r\n**test plan:**\r\nRun the new tests.\r\n\r\n* Adds fixture to test timed out callbacks with scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\nIn the other error handling fixture we compare scheduleWork error\r\nhandling to requestAnimationFrame and try to get as close as possible.\r\nThere is no timing out feature with requestAnimationFrame but\r\neffectively the timing out feature changes the order in which things\r\nare called. So we just changed the order in the requestAnimationFrame\r\nversion and that works well for illustrating the behavior we expect in\r\nthe scheduleWork test.\r\n\r\n**why make this change?:**\r\nWe need more test coverage of timed out callbacks.\r\n\r\n**test plan:**\r\nExecuted the fixture manually in Firefox and Chrome. Results looked\r\ngood.\r\n\r\n* fix rebase problems\r\n\r\n* make fixture compensate for chrome JS speed\r\n\r\n* ran prettier\r\n\r\n* Remove cancelled flag on callbackConfig in scheduler, add test\r\n\r\n**what is the change?:**\r\n- Instead of using a cancelled flag on the callbackConfig, its easier\r\nto just check the state of the callbackConfig inside\r\ncancelScheduledWork to determine if its already been cancelled. That\r\nway we dont have to remember to set the cancelled flag every time we\r\ncall a callback or cancel it. One less thing to remember.\r\n- We added a test for calling cancelScheduledWork more than once,\r\nwhich would have failed before.\r\n\r\nThanks @acdlite for suggesting this in code review. :)\r\n\r\n**why make this change?:**\r\nTo increase stability of the schedule module, increase test coverage.\r\n\r\n**test plan:**\r\nExisting tests pass and we added a new test to cover this behavior.\r\n\r\n* fix typo\"",
                "additions": 624,
                "deletions": 30,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-30T22:38:48Z"
            },
            {
                "commitId": "65ab53694f6edf4437034d5644a602dea162e249",
                "message": "\"Update token (#12956)\"",
                "additions": 2,
                "deletions": 2,
                "changedFiles": 1,
                "commentsCount": 0,
                "committedDate": "2018-05-31T20:36:55Z"
            },
            {
                "commitId": "36546b5137e9012ebdc62fc9ec11e3518c9e0aab",
                "message": "\"Set the correct initial value on input range (#12939)\n\n* Set the correct initial value on input range\r\n\r\n* Add description and update value diff check for input range\r\n\r\n* add isHydrating argument and tests\r\n\r\n* update node value according to isHydrating\"",
                "additions": 36,
                "deletions": 6,
                "changedFiles": 3,
                "commentsCount": 0,
                "committedDate": "2018-05-31T21:23:26Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "return a commit message on July 31?",
        "number": 4,
        "category": 1,
        "response": "The commit message on July 31 is: \"[compiler] More complete validation against locals being reassigned after render\n\nSummary:\nThis diff extends the existing work on validating against locals being reassigned after render, by propagating the reassignment \"effect\" into the lvalues of instructions when the rvalue operands include values known to cause reassignments. In particular, this \"closes the loop\" for function definitions and function calls: a function that returns a function that reassigns will be considered to also perform reassignments, but previous to this we didnt consider the result of a `Call` of a function that reassigns to itself be a value that reassigns.\n\nThis causes a number of new bailouts in test cases, all of which appear to me to be legit.\n\nghstack-source-id: 770bf02d079ea2480be243a49caa6f69573d8092\nPull Request resolved: https://github.com/facebook/react/pull/30540\"",
        "chain_of_thought": "To address the question \"return a commit message on July 31,\" we need to interpret the query in the context of the provided schema. The question is asking for commit messages from a specific date, July 31. However, the year is not specified, so we will assume it refers to the most recent July 31, which would be July 31, 2024, given the current date is August 26, 2024.\n\nThe relevant nodes and properties for this query are the `Commit` node and its `committedDate` and `message` properties. We need to filter commits based on the `committedDate` property to match July 31, 2024.\n\nThe `committedDate` should be in the ISO format, so we will use a regex to match any time on July 31, 2024.\n\nHere's the Cypher query to achieve this:\n\n```cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commit_message\n```\n\nThis query matches all commits made on July 31, 2024, and returns their commit messages.",
        "query": "cypher\nMATCH (c:Commit)\nWHERE c.committedDate =~ '2024-07-31T.*'\nRETURN c.message AS commit_message\n",
        "result": [
            {
                "commit_message": "\"[compiler] More complete validation against locals being reassigned after render\n\nSummary:\nThis diff extends the existing work on validating against locals being reassigned after render, by propagating the reassignment \"effect\" into the lvalues of instructions when the rvalue operands include values known to cause reassignments. In particular, this \"closes the loop\" for function definitions and function calls: a function that returns a function that reassigns will be considered to also perform reassignments, but previous to this we didnt consider the result of a `Call` of a function that reassigns to itself be a value that reassigns.\n\nThis causes a number of new bailouts in test cases, all of which appear to me to be legit.\n\nghstack-source-id: 770bf02d079ea2480be243a49caa6f69573d8092\nPull Request resolved: https://github.com/facebook/react/pull/30540\""
            },
            {
                "commit_message": "\"[Fizz] Update postpone abort semantics when prerendering (#30541)\n\nWhen aborting with a postpone value in Fizz if any tasks are still\r\npending in the root while prerendering the prerender will fatally error.\r\nThis is different from postponing imperatively in a root task and really\r\nthe semantics should be the same. This change updates React to treat an\r\nabort with a postpone value as a postponed root rather than a fatal\r\nerror.\""
            },
            {
                "commit_message": "\"[DevTools] Track the parent DevToolsInstance while mounting a tree (#30542)\n\nThis just tracks the `.parent` field properly and uses DevToolsInstances\r\nin more places that used to use IDs or Fibers.\r\n\r\nI also use this new parent path when looking up a DevToolsInstance from\r\na DOM node. This should ideally be simple because the `.parent` field\r\nrepresents only the unfiltered parents and include any virtual parents.\r\nSo we should be able to just get one from nearest Fiber that has one.\r\n\r\nHowever, because we dont currently always clean up the map of\r\nDevToolsInstances (e.g. updateComponentFilters doesnt recursively clean\r\nout everything) it can leave matches hanging that shouldnt be there. So\r\nwe need to run the shouldFilterFiber filter to ignore those.\r\n\r\nAnother interesting implication is that without a FiberInstance we dont\r\nhave a way to get to a VirtualInstance from a HostComponent. Which means\r\nthat even filtered Fibers need to have a FiberInstance if they have a\r\nVirtualInstance parent. Even if we dont actually mount them into the\r\nfront-end.\""
            },
            {
                "commit_message": "\"Build all bundles required by flight fixture with `build-for-flight-dev` (#30534)\""
            },
            {
                "commit_message": "\"[Flight] Enable owner stacks on the client when replaying logs (#30473)\n\nTheres a special case that happens when we replay logs on the client\r\nbecause this doesnt happen within the context of any particular\r\nrendered component. So we need to reimplement things that would normally\r\nbe handled by a full client like Fiber.\r\n\r\nThe implementation of `getOwnerStackByComponentInfoInDev` is the\r\nsimplest version since it doesnt have any client components in it so I\r\nmove it to `shared/`. Its only used by Flight but both `react-server/`\r\nand `react-client/` packages. The ReactComponentInfo type is also more\r\ngeneric than just Flight anyway.\r\n\r\nIn a follow up I still need to implement this in React DevTools when\r\nnative tasks are not available so that it appends it to the console.\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "show me the changes for BeforeInputEventPlugin.js file?",
        "number": 5,
        "category": 2,
        "response": "The file \"BeforeInputEventPlugin.js\" underwent several changes across different commits. Here are the notable changes:\n\n1. The plugin was initially added with a commit that included 171 lines of new code. This code introduced the \"BeforeInputEventPlugin\" with its associated dependencies and event handling logic.\n\n2. Several modifications were made to the conditionals and logic related to handling text input events, including changes to how certain browsers, like Opera, handle these events.\n\n3. The handling of spacebar keypress events was adjusted, with specific conditions added for browsers like Android Chrome.\n\n4. The licensing information in the file header was updated multiple times, transitioning from Apache License to BSD-style, and finally to the MIT license.\n\n5. The file saw changes related to the composition events, with improvements in fallback mechanisms for input methods and composition events.\n\n6. The imports were updated to reflect changes in the module system, including switching to using `import type` syntax for certain elements.\n\n7. The event dependencies were modified, and the use of certain helper functions, like `keyOf`, was replaced with direct string usage for event types.\n\n8. Several refactoring efforts improved the code structure, readability, and the handling of specific edge cases, such as emoji input on Windows touch keyboards.\n\nThese changes collectively contributed to the evolution of the \"BeforeInputEventPlugin.js\" file, improving its compatibility and performance across different environments and use cases.",
        "chain_of_thought": "To address the question, \"show me the changes for BeforeInputEventPlugin.js file,\" we need to identify the changes made to a specific file named \"BeforeInputEventPlugin.js.\" The relevant nodes are the File and Commit nodes, and the relationship that connects them is the changed relationship. This relationship contains properties such as additions, deletions, label, relation, patch, changes, and change_type, which can provide detailed information about the changes made to the file.\n\nHere's how we can construct the Cypher query:\n\n1. Identify the File node with the name \"BeforeInputEventPlugin.js.\"\n2. Find the Commit nodes that have a changed relationship with this File node.\n3. Retrieve the details of the changes from the changed relationship.\n\nThe complete query is:\n\n```cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'BeforeInputEventPlugin.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch, ch.change_type AS changeType\nORDER BY c.committedDate\n```\n\nThis query will return the commit ID, the number of additions and deletions, the patch details, and the type of change for each commit that modified the \"BeforeInputEventPlugin.js\" file, ordered by the commit date.",
        "query": "cypher\nMATCH (c:Commit)-[ch:changed]->(f:File {name: 'BeforeInputEventPlugin.js'})\nRETURN c.id AS commitId, ch.additions AS additions, ch.deletions AS deletions, ch.patch AS patch, ch.change_type AS changeType\nORDER BY c.committedDate\n",
        "result": [
            {
                "commitId": "5476f9168beadda74506d37fd779e7e4bca0bc1c",
                "additions": 45,
                "deletions": 7,
                "patch": "@@ -26,12 +26,15 @@ var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n-var useBeforeInputEvent = (\n+var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !('documentMode' in document)\n );\n \n+var SPACEBAR_CODE = 32;\n+var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n+\n var topLevelTypes = EventConstants.topLevelTypes;\n \n // Events and their corresponding property names.\n@@ -100,13 +103,48 @@ var BeforeInputEventPlugin = {\n \n     var chars;\n \n-    if (useBeforeInputEvent) {\n-      // For browsers that support `textInput` events natively, don't do\n-      // anything with keypress, composition, etc.\n-      if (topLevelType !== topLevelTypes.topTextInput) {\n-        return;\n+    if (canUseTextInputEvent) {\n+      switch (topLevelType) {\n+        case topLevelTypes.topKeyPress:\n+          /**\n+           * If native `textInput` events are available, our goal is to make\n+           * use of them. However, there is a special case: the spacebar key.\n+           * In Webkit, preventing default on a spacebar `textInput` event\n+           * cancels character insertion, but it *also* causes the browser\n+           * to fall back to its default spacebar behavior of scrolling the\n+           * page.\n+           *\n+           * Tracking at:\n+           * https://code.google.com/p/chromium/issues/detail?id=355103\n+           *\n+           * To avoid this issue, use the keypress event as if no `textInput`\n+           * event is available.\n+           */\n+          var which = nativeEvent.which;\n+          if (which !== SPACEBAR_CODE) {\n+            return;\n+          }\n+\n+          chars = String.fromCharCode(which);\n+          break;\n+\n+        case topLevelTypes.topTextInput:\n+          // Record the characters to be added to the DOM.\n+          chars = nativeEvent.data;\n+\n+          // If it's a spacebar character, assume that we have already handled\n+          // it at the keypress level and bail immediately.\n+          if (chars === SPACEBAR_CHAR) {\n+            return;\n+          }\n+\n+          // Otherwise, carry on.\n+          break;\n+\n+        default:\n+          // For other native event types, do nothing.\n+          return;\n       }\n-      chars = nativeEvent.data;\n     } else {\n       switch (topLevelType) {\n         case topLevelTypes.topPaste:",
                "changeType": "modified"
            },
            {
                "commitId": "116ee058ebd76071a8aefcd95254f772ec18605f",
                "additions": 171,
                "deletions": 0,
                "patch": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright 2013 Facebook, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * @providesModule BeforeInputEventPlugin\n+ * @typechecks static-only\n+ */\n+\n+\"use strict\";\n+\n+var EventConstants = require('EventConstants');\n+var EventPropagators = require('EventPropagators');\n+var ExecutionEnvironment = require('ExecutionEnvironment');\n+var SyntheticInputEvent = require('SyntheticInputEvent');\n+\n+var keyOf = require('keyOf');\n+\n+var useBeforeInputEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'TextEvent' in window &&\n+  !('documentMode' in document)\n+);\n+\n+var topLevelTypes = EventConstants.topLevelTypes;\n+\n+// Events and their corresponding property names.\n+var eventTypes = {\n+  beforeInput: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onBeforeInput: null}),\n+      captured: keyOf({onBeforeInputCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topTextInput,\n+      topLevelTypes.topPaste\n+    ]\n+  }\n+};\n+\n+// Track characters inserted via keypress and composition events.\n+var fallbackChars = null;\n+\n+/**\n+ * Return whether a native keypress event is assumed to be a command.\n+ * This is required because Firefox fires `keypress` events for key commands\n+ * (cut, copy, select-all, etc.) even though no character is inserted.\n+ */\n+function isKeypressCommand(nativeEvent) {\n+  return (\n+    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n+    // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n+    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n+  );\n+}\n+\n+/**\n+ * Create an `onBeforeInput` event to match\n+ * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n+ *\n+ * This event plugin is based on the native `textInput` event\n+ * available in Chrome, Safari, Opera, and IE. This event fires after\n+ * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n+ *\n+ * `beforeInput` is spec'd but not implemented in any browsers, and\n+ * the `input` event does not provide any useful information about what has\n+ * actually been added, contrary to the spec. Thus, `textInput` is the best\n+ * available event to identify the characters that have actually been inserted\n+ * into the target node.\n+ */\n+var BeforeInputEventPlugin = {\n+\n+  eventTypes: eventTypes,\n+\n+  /**\n+   * @param {string} topLevelType Record from `EventConstants`.\n+   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+   * @param {object} nativeEvent Native browser event.\n+   * @return {*} An accumulation of synthetic events.\n+   * @see {EventPluginHub.extractEvents}\n+   */\n+  extractEvents: function(\n+      topLevelType,\n+      topLevelTarget,\n+      topLevelTargetID,\n+      nativeEvent) {\n+\n+    var chars;\n+\n+    if (useBeforeInputEvent) {\n+      // For browsers that support `textInput` events natively, don't do\n+      // anything with keypress, composition, etc.\n+      if (topLevelType !== topLevelTypes.topTextInput) {\n+        return;\n+      }\n+      chars = nativeEvent.data;\n+    } else {\n+      switch (topLevelType) {\n+        case topLevelTypes.topPaste:\n+          // If a paste event occurs after a keypress, throw out the input\n+          // chars. Paste events should not lead to BeforeInput events.\n+          fallbackChars = null;\n+          break;\n+        case topLevelTypes.topKeyPress:\n+          /**\n+           * As of v27, Firefox may fire keypress events even when no character\n+           * will be inserted. A few possibilities:\n+           *\n+           * - `which` is `0`. Arrow keys, Esc key, etc.\n+           *\n+           * - `which` is the pressed key code, but no char is available.\n+           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+           *   this key combination and no character is inserted into the\n+           *   document, but FF fires the keypress for char code `100` anyway.\n+           *   No `input` event will occur.\n+           *\n+           * - `which` is the pressed key code, but a command combination is\n+           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+           *   `input` event will occur.\n+           */\n+          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+            fallbackChars = String.fromCharCode(nativeEvent.which);\n+          }\n+          break;\n+        case topLevelTypes.topCompositionEnd:\n+          fallbackChars = nativeEvent.data;\n+          break;\n+      }\n+\n+      // If no changes have occurred to the fallback string, no relevant\n+      // event has fired and we're done.\n+      if (fallbackChars === null) {\n+        return;\n+      }\n+\n+      chars = fallbackChars;\n+    }\n+\n+    // If no characters are being inserted, no BeforeInput event should\n+    // be fired.\n+    if (!chars) {\n+      return;\n+    }\n+\n+    var event = SyntheticInputEvent.getPooled(\n+      eventTypes.beforeInput,\n+      topLevelTargetID,\n+      nativeEvent\n+    );\n+\n+    event.data = chars;\n+    fallbackChars = null;\n+    EventPropagators.accumulateTwoPhaseDispatches(event);\n+    return event;\n+  }\n+};\n+\n+module.exports = BeforeInputEventPlugin;",
                "changeType": "added"
            },
            {
                "commitId": "807e3dc42375fbc15c41c847a38acfd518fba7a1",
                "additions": 14,
                "deletions": 1,
                "patch": "@@ -29,9 +29,22 @@ var keyOf = require('keyOf');\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document)\n+  !('documentMode' in document || isPresto())\n );\n \n+/**\n+ * Opera <= 12 includes TextEvent in window, but does not fire\n+ * text input events. Rely on keypress instead.\n+ */\n+function isPresto() {\n+  var opera = window.opera;\n+  return (\n+    typeof opera === 'object' &&\n+    typeof opera.version === 'function' &&\n+    parseInt(opera.version(), 10) <= 12\n+  );\n+}\n+\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n ",
                "changeType": "modified"
            },
            {
                "commitId": "468007612f4a6dabb228618d9a3274f067fc2c51",
                "additions": 14,
                "deletions": 1,
                "patch": "@@ -29,9 +29,22 @@ var keyOf = require('keyOf');\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document)\n+  !('documentMode' in document || isPresto())\n );\n \n+/**\n+ * Opera <= 12 includes TextEvent in window, but does not fire\n+ * text input events. Rely on keypress instead.\n+ */\n+function isPresto() {\n+  var opera = window.opera;\n+  return (\n+    typeof opera === 'object' &&\n+    typeof opera.version === 'function' &&\n+    parseInt(opera.version(), 10) <= 12\n+  );\n+}\n+\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n ",
                "changeType": "modified"
            },
            {
                "commitId": "f71455fb319d1daf5a04cc03357fcd185d9f72ec",
                "additions": 8,
                "deletions": 3,
                "patch": "@@ -69,6 +69,9 @@ var eventTypes = {\n // Track characters inserted via keypress and composition events.\n var fallbackChars = null;\n \n+// Track whether we've ever handled a keypress on the space key.\n+var hasSpaceKeypress = false;\n+\n /**\n  * Return whether a native keypress event is assumed to be a command.\n  * This is required because Firefox fires `keypress` events for key commands\n@@ -138,16 +141,18 @@ var BeforeInputEventPlugin = {\n             return;\n           }\n \n-          chars = String.fromCharCode(which);\n+          hasSpaceKeypress = true;\n+          chars = SPACEBAR_CHAR;\n           break;\n \n         case topLevelTypes.topTextInput:\n           // Record the characters to be added to the DOM.\n           chars = nativeEvent.data;\n \n           // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately.\n-          if (chars === SPACEBAR_CHAR) {\n+          // it at the keypress level and bail immediately. Android Chrome\n+          // doesn't give us keycodes, so we need to blacklist it.\n+          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n             return;\n           }\n ",
                "changeType": "modified"
            },
            {
                "commitId": "dcf415c2b91ce52fd5d4dd02b70875ba9d33290f",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only",
                "changeType": "modified"
            },
            {
                "commitId": "5d3b12bb3bd6a092cf00ede07b8255a8399c2e58",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only",
                "changeType": "modified"
            },
            {
                "commitId": "b5bcaba77fbe53cafd7c5f6b76752b09791caadf",
                "additions": 4,
                "deletions": 11,
                "patch": "@@ -1,17 +1,10 @@\n /**\n  * Copyright 2013 Facebook, Inc.\n+ * All rights reserved.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n  * @typechecks static-only",
                "changeType": "modified"
            },
            {
                "commitId": "ddaf215b03cee506c907474578c950367b344062",
                "additions": 390,
                "deletions": 112,
                "patch": "@@ -15,21 +15,51 @@\n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n+var FallbackCompositionState = require('FallbackCompositionState');\n+var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+var START_KEYCODE = 229;\n+\n+var canUseCompositionEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'CompositionEvent' in window\n+);\n+\n+var documentMode = null;\n+if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+  documentMode = document.documentMode;\n+}\n+\n+// Webkit and Presto offer a very useful `textInput` event that can be used to\n+// directly represent `beforeInput`. The IE `textinput` event is not as\n+// useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document || isPresto())\n+  !documentMode &&\n+  !isOldPresto()\n+);\n+\n+// In IE9+, we have access to composition events, but the data supplied\n+// by the native compositionend event may be incorrect. Japanese ideographic\n+// spaces, for instance (\\u3000) are not recorded correctly.\n+var useFallbackCompositionData = (\n+  ExecutionEnvironment.canUseDOM &&\n+  (\n+    !canUseCompositionEvent ||\n+    (documentMode && documentMode > 8 && documentMode <= 11)\n+  )\n );\n \n /**\n  * Opera <= 12 includes TextEvent in window, but does not fire\n  * text input events. Rely on keypress instead.\n  */\n-function isPresto() {\n+function isOldPresto() {\n   var opera = window.opera;\n   return (\n     typeof opera === 'object' &&\n@@ -56,11 +86,53 @@ var eventTypes = {\n       topLevelTypes.topTextInput,\n       topLevelTypes.topPaste\n     ]\n+  },\n+  compositionEnd: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionEnd: null}),\n+      captured: keyOf({onCompositionEndCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionStart: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionStart: null}),\n+      captured: keyOf({onCompositionStartCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionStart,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionUpdate: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionUpdate: null}),\n+      captured: keyOf({onCompositionUpdateCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionUpdate,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n   }\n };\n \n // Track characters inserted via keypress and composition events.\n-var fallbackChars = null;\n+var fallbackBeforeInputChars = null;\n \n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n@@ -78,6 +150,298 @@ function isKeypressCommand(nativeEvent) {\n   );\n }\n \n+\n+/**\n+ * Translate native top level events into event types.\n+ *\n+ * @param {string} topLevelType\n+ * @return {object}\n+ */\n+function getCompositionEventType(topLevelType) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionStart:\n+      return eventTypes.compositionStart;\n+    case topLevelTypes.topCompositionEnd:\n+      return eventTypes.compositionEnd;\n+    case topLevelTypes.topCompositionUpdate:\n+      return eventTypes.compositionUpdate;\n+  }\n+}\n+\n+/**\n+ * Does our fallback best-guess model think this event signifies that\n+ * composition has begun?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionStart(topLevelType, nativeEvent) {\n+  return (\n+    topLevelType === topLevelTypes.topKeyDown &&\n+    nativeEvent.keyCode === START_KEYCODE\n+  );\n+}\n+\n+/**\n+ * Does our fallback mode think that this event is the end of composition?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topKeyUp:\n+      // Command keys insert or clear IME input.\n+      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n+    case topLevelTypes.topKeyDown:\n+      // Expect IME keyCode on each keydown. If we get any other\n+      // code we must have exited earlier.\n+      return (nativeEvent.keyCode !== START_KEYCODE);\n+    case topLevelTypes.topKeyPress:\n+    case topLevelTypes.topMouseDown:\n+    case topLevelTypes.topBlur:\n+      // Events are not possible without cancelling IME.\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * Google Input Tools provides composition data via a CustomEvent,\n+ * with the `data` property populated in the `detail` object. If this\n+ * is available on the event object, use it. If not, this is a plain\n+ * composition event and we have nothing special to extract.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {?string}\n+ */\n+function getDataFromCustomEvent(nativeEvent) {\n+  var detail = nativeEvent.detail;\n+  if (typeof detail === 'object' && 'data' in detail) {\n+    return detail.data;\n+  }\n+  return null;\n+}\n+\n+// Track the current IME composition fallback object, if any.\n+var currentComposition = null;\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticCompositionEvent.\n+ */\n+function extractCompositionEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var eventType;\n+  var fallbackData;\n+\n+  if (canUseCompositionEvent) {\n+    eventType = getCompositionEventType(topLevelType);\n+  } else if (!currentComposition) {\n+    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+      eventType = eventTypes.compositionStart;\n+    }\n+  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+    eventType = eventTypes.compositionEnd;\n+  }\n+\n+  if (!eventType) {\n+    return;\n+  }\n+\n+  if (useFallbackCompositionData) {\n+    // The current composition is stored statically and must not be\n+    // overwritten while composition continues.\n+    if (!currentComposition && eventType === eventTypes.compositionStart) {\n+      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+    } else if (eventType === eventTypes.compositionEnd) {\n+      if (currentComposition) {\n+        fallbackData = currentComposition.getData();\n+      }\n+    }\n+  }\n+\n+  var event = SyntheticCompositionEvent.getPooled(\n+    eventType,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  if (fallbackData) {\n+    // Inject data generated from fallback path into the synthetic event.\n+    // This matches the property of native CompositionEventInterface.\n+    event.data = fallbackData;\n+  } else {\n+    var customData = getDataFromCustomEvent(nativeEvent);\n+    if (customData !== null) {\n+      event.data = customData;\n+    }\n+  }\n+\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The string corresponding to this `beforeInput` event.\n+ */\n+function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionEnd:\n+      return getDataFromCustomEvent(nativeEvent);\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * If native `textInput` events are available, our goal is to make\n+       * use of them. However, there is a special case: the spacebar key.\n+       * In Webkit, preventing default on a spacebar `textInput` event\n+       * cancels character insertion, but it *also* causes the browser\n+       * to fall back to its default spacebar behavior of scrolling the\n+       * page.\n+       *\n+       * Tracking at:\n+       * https://code.google.com/p/chromium/issues/detail?id=355103\n+       *\n+       * To avoid this issue, use the keypress event as if no `textInput`\n+       * event is available.\n+       */\n+      var which = nativeEvent.which;\n+      if (which !== SPACEBAR_CODE) {\n+        return null;\n+      }\n+\n+      hasSpaceKeypress = true;\n+      return SPACEBAR_CHAR;\n+\n+    case topLevelTypes.topTextInput:\n+      // Record the characters to be added to the DOM.\n+      var chars = nativeEvent.data;\n+\n+      // If it's a spacebar character, assume that we have already handled\n+      // it at the keypress level and bail immediately. Android Chrome\n+      // doesn't give us keycodes, so we need to blacklist it.\n+      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n+        return null;\n+      }\n+\n+      return chars;\n+\n+    default:\n+      // For other native event types, do nothing.\n+      return null;\n+  }\n+}\n+\n+/**\n+ * For browsers that do not provide the `textInput` event, extract the\n+ * appropriate string to use for SyntheticInputEvent.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The fallback string for this `beforeInput` event.\n+ */\n+function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+  // If we are currently composing (IME) and using a fallback to do so,\n+  // try to extract the composed characters from the fallback object.\n+  if (currentComposition) {\n+    if (\n+      topLevelType === topLevelTypes.topCompositionEnd ||\n+      isFallbackCompositionEnd(topLevelType, nativeEvent)\n+    ) {\n+      var chars = currentComposition.getData();\n+      FallbackCompositionState.release(currentComposition);\n+      currentComposition = null;\n+      return chars;\n+    }\n+    return null;\n+  }\n+\n+  switch (topLevelType) {\n+    case topLevelTypes.topPaste:\n+      // If a paste event occurs after a keypress, throw out the input\n+      // chars. Paste events should not lead to BeforeInput events.\n+      return null;\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * As of v27, Firefox may fire keypress events even when no character\n+       * will be inserted. A few possibilities:\n+       *\n+       * - `which` is `0`. Arrow keys, Esc key, etc.\n+       *\n+       * - `which` is the pressed key code, but no char is available.\n+       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+       *   this key combination and no character is inserted into the\n+       *   document, but FF fires the keypress for char code `100` anyway.\n+       *   No `input` event will occur.\n+       *\n+       * - `which` is the pressed key code, but a command combination is\n+       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+       *   `input` event will occur.\n+       */\n+      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+        return String.fromCharCode(nativeEvent.which);\n+      }\n+      return null;\n+    case topLevelTypes.topCompositionEnd:\n+      return useFallbackCompositionData ? null : nativeEvent.data;\n+    default:\n+      return null;\n+  }\n+}\n+\n+/**\n+ * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n+ * `textInput` or fallback behavior.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticInputEvent.\n+ */\n+function extractBeforeInputEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var chars;\n+\n+  if (canUseTextInputEvent) {\n+    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+  } else {\n+    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+  }\n+\n+  // If no characters are being inserted, no BeforeInput event should\n+  // be fired.\n+  if (!chars) {\n+    return;\n+  }\n+\n+  var event = SyntheticInputEvent.getPooled(\n+    eventTypes.beforeInput,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  event.data = chars;\n+  fallbackBeforeInputChars = null;\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n /**\n  * Create an `onBeforeInput` event to match\n  * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n@@ -91,6 +455,10 @@ function isKeypressCommand(nativeEvent) {\n  * actually been added, contrary to the spec. Thus, `textInput` is the best\n  * available event to identify the characters that have actually been inserted\n  * into the target node.\n+ *\n+ * This plugin is also responsible for emitting `composition` events, thus\n+ * allowing us to share composition fallback code for both `beforeInput` and\n+ * `composition` event types.\n  */\n var BeforeInputEventPlugin = {\n \n@@ -105,115 +473,25 @@ var BeforeInputEventPlugin = {\n    * @see {EventPluginHub.extractEvents}\n    */\n   extractEvents: function(\n-      topLevelType,\n-      topLevelTarget,\n-      topLevelTargetID,\n-      nativeEvent) {\n-\n-    var chars;\n-\n-    if (canUseTextInputEvent) {\n-      switch (topLevelType) {\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * If native `textInput` events are available, our goal is to make\n-           * use of them. However, there is a special case: the spacebar key.\n-           * In Webkit, preventing default on a spacebar `textInput` event\n-           * cancels character insertion, but it *also* causes the browser\n-           * to fall back to its default spacebar behavior of scrolling the\n-           * page.\n-           *\n-           * Tracking at:\n-           * https://code.google.com/p/chromium/issues/detail?id=355103\n-           *\n-           * To avoid this issue, use the keypress event as if no `textInput`\n-           * event is available.\n-           */\n-          var which = nativeEvent.which;\n-          if (which !== SPACEBAR_CODE) {\n-            return;\n-          }\n-\n-          hasSpaceKeypress = true;\n-          chars = SPACEBAR_CHAR;\n-          break;\n-\n-        case topLevelTypes.topTextInput:\n-          // Record the characters to be added to the DOM.\n-          chars = nativeEvent.data;\n-\n-          // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately. Android Chrome\n-          // doesn't give us keycodes, so we need to blacklist it.\n-          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n-            return;\n-          }\n-\n-          // Otherwise, carry on.\n-          break;\n-\n-        default:\n-          // For other native event types, do nothing.\n-          return;\n-      }\n-    } else {\n-      switch (topLevelType) {\n-        case topLevelTypes.topPaste:\n-          // If a paste event occurs after a keypress, throw out the input\n-          // chars. Paste events should not lead to BeforeInput events.\n-          fallbackChars = null;\n-          break;\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * As of v27, Firefox may fire keypress events even when no character\n-           * will be inserted. A few possibilities:\n-           *\n-           * - `which` is `0`. Arrow keys, Esc key, etc.\n-           *\n-           * - `which` is the pressed key code, but no char is available.\n-           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n-           *   this key combination and no character is inserted into the\n-           *   document, but FF fires the keypress for char code `100` anyway.\n-           *   No `input` event will occur.\n-           *\n-           * - `which` is the pressed key code, but a command combination is\n-           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n-           *   `input` event will occur.\n-           */\n-          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-            fallbackChars = String.fromCharCode(nativeEvent.which);\n-          }\n-          break;\n-        case topLevelTypes.topCompositionEnd:\n-          fallbackChars = nativeEvent.data;\n-          break;\n-      }\n-\n-      // If no changes have occurred to the fallback string, no relevant\n-      // event has fired and we're done.\n-      if (fallbackChars === null) {\n-        return;\n-      }\n-\n-      chars = fallbackChars;\n-    }\n-\n-    // If no characters are being inserted, no BeforeInput event should\n-    // be fired.\n-    if (!chars) {\n-      return;\n-    }\n-\n-    var event = SyntheticInputEvent.getPooled(\n-      eventTypes.beforeInput,\n-      topLevelTargetID,\n-      nativeEvent\n-    );\n-\n-    event.data = chars;\n-    fallbackChars = null;\n-    EventPropagators.accumulateTwoPhaseDispatches(event);\n-    return event;\n+    topLevelType,\n+    topLevelTarget,\n+    topLevelTargetID,\n+    nativeEvent\n+  ) {\n+    return [\n+      extractCompositionEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+      extractBeforeInputEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+    ];\n   }\n };\n ",
                "changeType": "modified"
            },
            {
                "commitId": "9ad0e1d846a4fe51f2397333d1df3e0b72d28067",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -34,14 +34,14 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n-// Webkit and Presto offer a very useful `textInput` event that can be used to\n+// Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n-  !isOldPresto()\n+  !isPresto()\n );\n \n // In IE9+, we have access to composition events, but the data supplied\n@@ -59,7 +59,7 @@ var useFallbackCompositionData = (\n  * Opera <= 12 includes TextEvent in window, but does not fire\n  * text input events. Rely on keypress instead.\n  */\n-function isOldPresto() {\n+function isPresto() {\n   var opera = window.opera;\n   return (\n     typeof opera === 'object' &&",
                "changeType": "modified"
            },
            {
                "commitId": "80ed4d870a628af57dfc6e45bf6d513084f677d7",
                "additions": 389,
                "deletions": 111,
                "patch": "@@ -15,14 +15,44 @@\n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n+var FallbackCompositionState = require('FallbackCompositionState');\n+var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+var START_KEYCODE = 229;\n+\n+var canUseCompositionEvent = (\n+  ExecutionEnvironment.canUseDOM &&\n+  'CompositionEvent' in window\n+);\n+\n+var documentMode = null;\n+if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+  documentMode = document.documentMode;\n+}\n+\n+// Webkit offers a very useful `textInput` event that can be used to\n+// directly represent `beforeInput`. The IE `textinput` event is not as\n+// useful, so we don't use it.\n var canUseTextInputEvent = (\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n-  !('documentMode' in document || isPresto())\n+  !documentMode &&\n+  !isPresto()\n+);\n+\n+// In IE9+, we have access to composition events, but the data supplied\n+// by the native compositionend event may be incorrect. Japanese ideographic\n+// spaces, for instance (\\u3000) are not recorded correctly.\n+var useFallbackCompositionData = (\n+  ExecutionEnvironment.canUseDOM &&\n+  (\n+    !canUseCompositionEvent ||\n+    (documentMode && documentMode > 8 && documentMode <= 11)\n+  )\n );\n \n /**\n@@ -56,11 +86,53 @@ var eventTypes = {\n       topLevelTypes.topTextInput,\n       topLevelTypes.topPaste\n     ]\n+  },\n+  compositionEnd: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionEnd: null}),\n+      captured: keyOf({onCompositionEndCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionEnd,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionStart: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionStart: null}),\n+      captured: keyOf({onCompositionStartCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionStart,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n+  },\n+  compositionUpdate: {\n+    phasedRegistrationNames: {\n+      bubbled: keyOf({onCompositionUpdate: null}),\n+      captured: keyOf({onCompositionUpdateCapture: null})\n+    },\n+    dependencies: [\n+      topLevelTypes.topBlur,\n+      topLevelTypes.topCompositionUpdate,\n+      topLevelTypes.topKeyDown,\n+      topLevelTypes.topKeyPress,\n+      topLevelTypes.topKeyUp,\n+      topLevelTypes.topMouseDown\n+    ]\n   }\n };\n \n // Track characters inserted via keypress and composition events.\n-var fallbackChars = null;\n+var fallbackBeforeInputChars = null;\n \n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n@@ -78,6 +150,298 @@ function isKeypressCommand(nativeEvent) {\n   );\n }\n \n+\n+/**\n+ * Translate native top level events into event types.\n+ *\n+ * @param {string} topLevelType\n+ * @return {object}\n+ */\n+function getCompositionEventType(topLevelType) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionStart:\n+      return eventTypes.compositionStart;\n+    case topLevelTypes.topCompositionEnd:\n+      return eventTypes.compositionEnd;\n+    case topLevelTypes.topCompositionUpdate:\n+      return eventTypes.compositionUpdate;\n+  }\n+}\n+\n+/**\n+ * Does our fallback best-guess model think this event signifies that\n+ * composition has begun?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionStart(topLevelType, nativeEvent) {\n+  return (\n+    topLevelType === topLevelTypes.topKeyDown &&\n+    nativeEvent.keyCode === START_KEYCODE\n+  );\n+}\n+\n+/**\n+ * Does our fallback mode think that this event is the end of composition?\n+ *\n+ * @param {string} topLevelType\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topKeyUp:\n+      // Command keys insert or clear IME input.\n+      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n+    case topLevelTypes.topKeyDown:\n+      // Expect IME keyCode on each keydown. If we get any other\n+      // code we must have exited earlier.\n+      return (nativeEvent.keyCode !== START_KEYCODE);\n+    case topLevelTypes.topKeyPress:\n+    case topLevelTypes.topMouseDown:\n+    case topLevelTypes.topBlur:\n+      // Events are not possible without cancelling IME.\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * Google Input Tools provides composition data via a CustomEvent,\n+ * with the `data` property populated in the `detail` object. If this\n+ * is available on the event object, use it. If not, this is a plain\n+ * composition event and we have nothing special to extract.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {?string}\n+ */\n+function getDataFromCustomEvent(nativeEvent) {\n+  var detail = nativeEvent.detail;\n+  if (typeof detail === 'object' && 'data' in detail) {\n+    return detail.data;\n+  }\n+  return null;\n+}\n+\n+// Track the current IME composition fallback object, if any.\n+var currentComposition = null;\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticCompositionEvent.\n+ */\n+function extractCompositionEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var eventType;\n+  var fallbackData;\n+\n+  if (canUseCompositionEvent) {\n+    eventType = getCompositionEventType(topLevelType);\n+  } else if (!currentComposition) {\n+    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+      eventType = eventTypes.compositionStart;\n+    }\n+  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+    eventType = eventTypes.compositionEnd;\n+  }\n+\n+  if (!eventType) {\n+    return;\n+  }\n+\n+  if (useFallbackCompositionData) {\n+    // The current composition is stored statically and must not be\n+    // overwritten while composition continues.\n+    if (!currentComposition && eventType === eventTypes.compositionStart) {\n+      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+    } else if (eventType === eventTypes.compositionEnd) {\n+      if (currentComposition) {\n+        fallbackData = currentComposition.getData();\n+      }\n+    }\n+  }\n+\n+  var event = SyntheticCompositionEvent.getPooled(\n+    eventType,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  if (fallbackData) {\n+    // Inject data generated from fallback path into the synthetic event.\n+    // This matches the property of native CompositionEventInterface.\n+    event.data = fallbackData;\n+  } else {\n+    var customData = getDataFromCustomEvent(nativeEvent);\n+    if (customData !== null) {\n+      event.data = customData;\n+    }\n+  }\n+\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n+/**\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The string corresponding to this `beforeInput` event.\n+ */\n+function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+  switch (topLevelType) {\n+    case topLevelTypes.topCompositionEnd:\n+      return getDataFromCustomEvent(nativeEvent);\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * If native `textInput` events are available, our goal is to make\n+       * use of them. However, there is a special case: the spacebar key.\n+       * In Webkit, preventing default on a spacebar `textInput` event\n+       * cancels character insertion, but it *also* causes the browser\n+       * to fall back to its default spacebar behavior of scrolling the\n+       * page.\n+       *\n+       * Tracking at:\n+       * https://code.google.com/p/chromium/issues/detail?id=355103\n+       *\n+       * To avoid this issue, use the keypress event as if no `textInput`\n+       * event is available.\n+       */\n+      var which = nativeEvent.which;\n+      if (which !== SPACEBAR_CODE) {\n+        return null;\n+      }\n+\n+      hasSpaceKeypress = true;\n+      return SPACEBAR_CHAR;\n+\n+    case topLevelTypes.topTextInput:\n+      // Record the characters to be added to the DOM.\n+      var chars = nativeEvent.data;\n+\n+      // If it's a spacebar character, assume that we have already handled\n+      // it at the keypress level and bail immediately. Android Chrome\n+      // doesn't give us keycodes, so we need to blacklist it.\n+      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n+        return null;\n+      }\n+\n+      return chars;\n+\n+    default:\n+      // For other native event types, do nothing.\n+      return null;\n+  }\n+}\n+\n+/**\n+ * For browsers that do not provide the `textInput` event, extract the\n+ * appropriate string to use for SyntheticInputEvent.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?string} The fallback string for this `beforeInput` event.\n+ */\n+function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+  // If we are currently composing (IME) and using a fallback to do so,\n+  // try to extract the composed characters from the fallback object.\n+  if (currentComposition) {\n+    if (\n+      topLevelType === topLevelTypes.topCompositionEnd ||\n+      isFallbackCompositionEnd(topLevelType, nativeEvent)\n+    ) {\n+      var chars = currentComposition.getData();\n+      FallbackCompositionState.release(currentComposition);\n+      currentComposition = null;\n+      return chars;\n+    }\n+    return null;\n+  }\n+\n+  switch (topLevelType) {\n+    case topLevelTypes.topPaste:\n+      // If a paste event occurs after a keypress, throw out the input\n+      // chars. Paste events should not lead to BeforeInput events.\n+      return null;\n+    case topLevelTypes.topKeyPress:\n+      /**\n+       * As of v27, Firefox may fire keypress events even when no character\n+       * will be inserted. A few possibilities:\n+       *\n+       * - `which` is `0`. Arrow keys, Esc key, etc.\n+       *\n+       * - `which` is the pressed key code, but no char is available.\n+       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n+       *   this key combination and no character is inserted into the\n+       *   document, but FF fires the keypress for char code `100` anyway.\n+       *   No `input` event will occur.\n+       *\n+       * - `which` is the pressed key code, but a command combination is\n+       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n+       *   `input` event will occur.\n+       */\n+      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n+        return String.fromCharCode(nativeEvent.which);\n+      }\n+      return null;\n+    case topLevelTypes.topCompositionEnd:\n+      return useFallbackCompositionData ? null : nativeEvent.data;\n+    default:\n+      return null;\n+  }\n+}\n+\n+/**\n+ * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n+ * `textInput` or fallback behavior.\n+ *\n+ * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {DOMEventTarget} topLevelTarget The listening component root node.\n+ * @param {string} topLevelTargetID ID of `topLevelTarget`.\n+ * @param {object} nativeEvent Native browser event.\n+ * @return {?object} A SyntheticInputEvent.\n+ */\n+function extractBeforeInputEvent(\n+  topLevelType,\n+  topLevelTarget,\n+  topLevelTargetID,\n+  nativeEvent\n+) {\n+  var chars;\n+\n+  if (canUseTextInputEvent) {\n+    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+  } else {\n+    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+  }\n+\n+  // If no characters are being inserted, no BeforeInput event should\n+  // be fired.\n+  if (!chars) {\n+    return;\n+  }\n+\n+  var event = SyntheticInputEvent.getPooled(\n+    eventTypes.beforeInput,\n+    topLevelTargetID,\n+    nativeEvent\n+  );\n+\n+  event.data = chars;\n+  fallbackBeforeInputChars = null;\n+  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  return event;\n+}\n+\n /**\n  * Create an `onBeforeInput` event to match\n  * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n@@ -91,6 +455,10 @@ function isKeypressCommand(nativeEvent) {\n  * actually been added, contrary to the spec. Thus, `textInput` is the best\n  * available event to identify the characters that have actually been inserted\n  * into the target node.\n+ *\n+ * This plugin is also responsible for emitting `composition` events, thus\n+ * allowing us to share composition fallback code for both `beforeInput` and\n+ * `composition` event types.\n  */\n var BeforeInputEventPlugin = {\n \n@@ -105,115 +473,25 @@ var BeforeInputEventPlugin = {\n    * @see {EventPluginHub.extractEvents}\n    */\n   extractEvents: function(\n-      topLevelType,\n-      topLevelTarget,\n-      topLevelTargetID,\n-      nativeEvent) {\n-\n-    var chars;\n-\n-    if (canUseTextInputEvent) {\n-      switch (topLevelType) {\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * If native `textInput` events are available, our goal is to make\n-           * use of them. However, there is a special case: the spacebar key.\n-           * In Webkit, preventing default on a spacebar `textInput` event\n-           * cancels character insertion, but it *also* causes the browser\n-           * to fall back to its default spacebar behavior of scrolling the\n-           * page.\n-           *\n-           * Tracking at:\n-           * https://code.google.com/p/chromium/issues/detail?id=355103\n-           *\n-           * To avoid this issue, use the keypress event as if no `textInput`\n-           * event is available.\n-           */\n-          var which = nativeEvent.which;\n-          if (which !== SPACEBAR_CODE) {\n-            return;\n-          }\n-\n-          hasSpaceKeypress = true;\n-          chars = SPACEBAR_CHAR;\n-          break;\n-\n-        case topLevelTypes.topTextInput:\n-          // Record the characters to be added to the DOM.\n-          chars = nativeEvent.data;\n-\n-          // If it's a spacebar character, assume that we have already handled\n-          // it at the keypress level and bail immediately. Android Chrome\n-          // doesn't give us keycodes, so we need to blacklist it.\n-          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n-            return;\n-          }\n-\n-          // Otherwise, carry on.\n-          break;\n-\n-        default:\n-          // For other native event types, do nothing.\n-          return;\n-      }\n-    } else {\n-      switch (topLevelType) {\n-        case topLevelTypes.topPaste:\n-          // If a paste event occurs after a keypress, throw out the input\n-          // chars. Paste events should not lead to BeforeInput events.\n-          fallbackChars = null;\n-          break;\n-        case topLevelTypes.topKeyPress:\n-          /**\n-           * As of v27, Firefox may fire keypress events even when no character\n-           * will be inserted. A few possibilities:\n-           *\n-           * - `which` is `0`. Arrow keys, Esc key, etc.\n-           *\n-           * - `which` is the pressed key code, but no char is available.\n-           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n-           *   this key combination and no character is inserted into the\n-           *   document, but FF fires the keypress for char code `100` anyway.\n-           *   No `input` event will occur.\n-           *\n-           * - `which` is the pressed key code, but a command combination is\n-           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n-           *   `input` event will occur.\n-           */\n-          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-            fallbackChars = String.fromCharCode(nativeEvent.which);\n-          }\n-          break;\n-        case topLevelTypes.topCompositionEnd:\n-          fallbackChars = nativeEvent.data;\n-          break;\n-      }\n-\n-      // If no changes have occurred to the fallback string, no relevant\n-      // event has fired and we're done.\n-      if (fallbackChars === null) {\n-        return;\n-      }\n-\n-      chars = fallbackChars;\n-    }\n-\n-    // If no characters are being inserted, no BeforeInput event should\n-    // be fired.\n-    if (!chars) {\n-      return;\n-    }\n-\n-    var event = SyntheticInputEvent.getPooled(\n-      eventTypes.beforeInput,\n-      topLevelTargetID,\n-      nativeEvent\n-    );\n-\n-    event.data = chars;\n-    fallbackChars = null;\n-    EventPropagators.accumulateTwoPhaseDispatches(event);\n-    return event;\n+    topLevelType,\n+    topLevelTarget,\n+    topLevelTargetID,\n+    nativeEvent\n+  ) {\n+    return [\n+      extractCompositionEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+      extractBeforeInputEvent(\n+        topLevelType,\n+        topLevelTarget,\n+        topLevelTargetID,\n+        nativeEvent\n+      ),\n+    ];\n   }\n };\n ",
                "changeType": "modified"
            },
            {
                "commitId": "df64a67b7f930f90423e194637af624cdc155526",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -10,7 +10,7 @@\n  * @typechecks static-only\n  */\n \n-\"use strict\";\n+'use strict';\n \n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');",
                "changeType": "modified"
            },
            {
                "commitId": "47ee780cafa650a61bd62c4a6c13ac5554efd05c",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -256,7 +256,7 @@ function extractCompositionEvent(\n   }\n \n   if (!eventType) {\n-    return;\n+    return null;\n   }\n \n   if (useFallbackCompositionData) {\n@@ -427,7 +427,7 @@ function extractBeforeInputEvent(\n   // If no characters are being inserted, no BeforeInput event should\n   // be fired.\n   if (!chars) {\n-    return;\n+    return null;\n   }\n \n   var event = SyntheticInputEvent.getPooled(",
                "changeType": "modified"
            },
            {
                "commitId": "e27da9973193a06a138d7098c58723a7f10ed2e5",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -490,7 +490,7 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      ),\n+      )\n     ];\n   }\n };",
                "changeType": "modified"
            },
            {
                "commitId": "54c82da15f6b4717425edbf68e23ae82583a50af",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -10,7 +10,7 @@\n  * @typechecks static-only\n  */\n \n-\"use strict\";\n+'use strict';\n \n var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n@@ -256,7 +256,7 @@ function extractCompositionEvent(\n   }\n \n   if (!eventType) {\n-    return;\n+    return null;\n   }\n \n   if (useFallbackCompositionData) {\n@@ -427,7 +427,7 @@ function extractBeforeInputEvent(\n   // If no characters are being inserted, no BeforeInput event should\n   // be fired.\n   if (!chars) {\n-    return;\n+    return null;\n   }\n \n   var event = SyntheticInputEvent.getPooled(\n@@ -490,7 +490,7 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      ),\n+      )\n     ];\n   }\n };",
                "changeType": "modified"
            },
            {
                "commitId": "3e0750a4ad2444c2df708b144ff0c8af7628881d",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013 Facebook, Inc.\n+ * Copyright 2013-2015 Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "changeType": "modified"
            },
            {
                "commitId": "2aeb8a2a6beb00617a4217f7f8284924fa2ad819",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013 Facebook, Inc.\n+ * Copyright 2013-2015 Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "changeType": "modified"
            },
            {
                "commitId": "dae1dc629272593f342fe22c6c795cb8fdf33d11",
                "additions": 0,
                "deletions": 4,
                "patch": "@@ -131,9 +131,6 @@ var eventTypes = {\n   }\n };\n \n-// Track characters inserted via keypress and composition events.\n-var fallbackBeforeInputChars = null;\n-\n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n \n@@ -437,7 +434,6 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  fallbackBeforeInputChars = null;\n   EventPropagators.accumulateTwoPhaseDispatches(event);\n   return event;\n }",
                "changeType": "modified"
            },
            {
                "commitId": "d59a039ebdebebf5c98ab96026529f66063979bf",
                "additions": 0,
                "deletions": 4,
                "patch": "@@ -131,9 +131,6 @@ var eventTypes = {\n   }\n };\n \n-// Track characters inserted via keypress and composition events.\n-var fallbackBeforeInputChars = null;\n-\n // Track whether we've ever handled a keypress on the space key.\n var hasSpaceKeypress = false;\n \n@@ -437,7 +434,6 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  fallbackBeforeInputChars = null;\n   EventPropagators.accumulateTwoPhaseDispatches(event);\n   return event;\n }",
                "changeType": "modified"
            },
            {
                "commitId": "0b063f8a09dae4b6b1de400ff2d9aba9108647de",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "52752446760dee0bc7232b4146f5a309ac57f065",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "c089eece509012a444dc770afb5b348b47c62d3a",
                "additions": 15,
                "deletions": 15,
                "patch": "@@ -78,57 +78,57 @@ var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null})\n+      captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste\n-    ]\n+      topLevelTypes.topPaste,\n+    ],\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null})\n+      captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null})\n+      captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionStart,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null})\n+      captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionUpdate,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n-  }\n+      topLevelTypes.topMouseDown,\n+    ],\n+  },\n };\n \n // Track whether we've ever handled a keypress on the space key.\n@@ -486,9 +486,9 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      )\n+      ),\n     ];\n-  }\n+  },\n };\n \n module.exports = BeforeInputEventPlugin;",
                "changeType": "modified"
            },
            {
                "commitId": "4c3e9650ba6c9ea90956a08542d9fa9b5d72ee88",
                "additions": 15,
                "deletions": 15,
                "patch": "@@ -78,57 +78,57 @@ var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null})\n+      captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste\n-    ]\n+      topLevelTypes.topPaste,\n+    ],\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null})\n+      captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionEnd,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null})\n+      captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionStart,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n+      topLevelTypes.topMouseDown,\n+    ],\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n       bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null})\n+      captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n       topLevelTypes.topBlur,\n       topLevelTypes.topCompositionUpdate,\n       topLevelTypes.topKeyDown,\n       topLevelTypes.topKeyPress,\n       topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown\n-    ]\n-  }\n+      topLevelTypes.topMouseDown,\n+    ],\n+  },\n };\n \n // Track whether we've ever handled a keypress on the space key.\n@@ -486,9 +486,9 @@ var BeforeInputEventPlugin = {\n         topLevelTarget,\n         topLevelTargetID,\n         nativeEvent\n-      )\n+      ),\n     ];\n-  }\n+  },\n };\n \n module.exports = BeforeInputEventPlugin;",
                "changeType": "modified"
            },
            {
                "commitId": "4b804e485db51b49716736ce2dfcf23d020b6eb2",
                "additions": 14,
                "deletions": 7,
                "patch": "@@ -237,7 +237,8 @@ function extractCompositionEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var eventType;\n   var fallbackData;\n@@ -271,7 +272,8 @@ function extractCompositionEvent(\n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   if (fallbackData) {\n@@ -411,7 +413,8 @@ function extractBeforeInputEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var chars;\n \n@@ -430,7 +433,8 @@ function extractBeforeInputEvent(\n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   event.data = chars;\n@@ -472,20 +476,23 @@ var BeforeInputEventPlugin = {\n     topLevelType,\n     topLevelTarget,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n     ];\n   },",
                "changeType": "modified"
            },
            {
                "commitId": "7b1f03f4f8e6ac110565e62035a042cb9a5ca612",
                "additions": 14,
                "deletions": 7,
                "patch": "@@ -237,7 +237,8 @@ function extractCompositionEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var eventType;\n   var fallbackData;\n@@ -271,7 +272,8 @@ function extractCompositionEvent(\n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   if (fallbackData) {\n@@ -411,7 +413,8 @@ function extractBeforeInputEvent(\n   topLevelType,\n   topLevelTarget,\n   topLevelTargetID,\n-  nativeEvent\n+  nativeEvent,\n+  nativeEventTarget\n ) {\n   var chars;\n \n@@ -430,7 +433,8 @@ function extractBeforeInputEvent(\n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   );\n \n   event.data = chars;\n@@ -472,20 +476,23 @@ var BeforeInputEventPlugin = {\n     topLevelType,\n     topLevelTarget,\n     topLevelTargetID,\n-    nativeEvent\n+    nativeEvent,\n+    nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n         topLevelTarget,\n         topLevelTargetID,\n-        nativeEvent\n+        nativeEvent,\n+        nativeEventTarget\n       ),\n     ];\n   },",
                "changeType": "modified"
            },
            {
                "commitId": "f470cb88f88b4667419f170fcc7971dad4298494",
                "additions": 9,
                "deletions": 29,
                "patch": "@@ -227,16 +227,11 @@ function getDataFromCustomEvent(nativeEvent) {\n var currentComposition = null;\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -261,7 +256,8 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+      currentComposition =\n+        FallbackCompositionState.getPooled(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (currentComposition) {\n         fallbackData = currentComposition.getData();\n@@ -271,7 +267,7 @@ function extractCompositionEvent(\n \n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -403,16 +399,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n  * `textInput` or fallback behavior.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -432,7 +423,7 @@ function extractBeforeInputEvent(\n \n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -464,33 +455,22 @@ var BeforeInputEventPlugin = {\n \n   eventTypes: eventTypes,\n \n-  /**\n-   * @param {string} topLevelType Record from `EventConstants`.\n-   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n-   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n-   * @param {object} nativeEvent Native browser event.\n-   * @return {*} An accumulation of synthetic events.\n-   * @see {EventPluginHub.extractEvents}\n-   */\n   extractEvents: function(\n     topLevelType,\n-    topLevelTarget,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),",
                "changeType": "modified"
            },
            {
                "commitId": "35962a00084382b49d1f9e3bd36612925f360e5b",
                "additions": 9,
                "deletions": 29,
                "patch": "@@ -227,16 +227,11 @@ function getDataFromCustomEvent(nativeEvent) {\n var currentComposition = null;\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -261,7 +256,8 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n+      currentComposition =\n+        FallbackCompositionState.getPooled(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (currentComposition) {\n         fallbackData = currentComposition.getData();\n@@ -271,7 +267,7 @@ function extractCompositionEvent(\n \n   var event = SyntheticCompositionEvent.getPooled(\n     eventType,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -403,16 +399,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n  * `textInput` or fallback behavior.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n- * @param {DOMEventTarget} topLevelTarget The listening component root node.\n- * @param {string} topLevelTargetID ID of `topLevelTarget`.\n- * @param {object} nativeEvent Native browser event.\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n   topLevelType,\n-  topLevelTarget,\n-  topLevelTargetID,\n+  targetInst,\n   nativeEvent,\n   nativeEventTarget\n ) {\n@@ -432,7 +423,7 @@ function extractBeforeInputEvent(\n \n   var event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   );\n@@ -464,33 +455,22 @@ var BeforeInputEventPlugin = {\n \n   eventTypes: eventTypes,\n \n-  /**\n-   * @param {string} topLevelType Record from `EventConstants`.\n-   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n-   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n-   * @param {object} nativeEvent Native browser event.\n-   * @return {*} An accumulation of synthetic events.\n-   * @see {EventPluginHub.extractEvents}\n-   */\n   extractEvents: function(\n     topLevelType,\n-    topLevelTarget,\n-    topLevelTargetID,\n+    targetInst,\n     nativeEvent,\n     nativeEventTarget\n   ) {\n     return [\n       extractCompositionEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),\n       extractBeforeInputEvent(\n         topLevelType,\n-        topLevelTarget,\n-        topLevelTargetID,\n+        targetInst,\n         nativeEvent,\n         nativeEventTarget\n       ),",
                "changeType": "modified"
            },
            {
                "commitId": "46f5251c66dcb0895743db02265c07320d0a6089",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -7,7 +7,6 @@\n  * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n- * @typechecks static-only\n  */\n \n 'use strict';",
                "changeType": "modified"
            },
            {
                "commitId": "4f7a2766e4c29c2f25c0807ac21318c3963e6aec",
                "additions": 0,
                "deletions": 1,
                "patch": "@@ -7,7 +7,6 @@\n  * of patent rights can be found in the PATENTS file in the same directory.\n  *\n  * @providesModule BeforeInputEventPlugin\n- * @typechecks static-only\n  */\n \n 'use strict';",
                "changeType": "modified"
            },
            {
                "commitId": "bef45b0b1a98ea9b472ba664d955a039cf2f8068",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "changeType": "modified"
            },
            {
                "commitId": "3b96650e39ddda5ba49245713ef16dbc52d25e9e",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "changeType": "modified"
            },
            {
                "commitId": "209b7522d99a8af36f8d9e06ce622c59b793e5a3",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2013-2015 Facebook, Inc.\n+ * Copyright 2013-present Facebook, Inc.\n  * All rights reserved.\n  *\n  * This source code is licensed under the BSD-style license found in the",
                "changeType": "modified"
            },
            {
                "commitId": "2f9a9dc4c56c1caee250626c54c587c5f233fcab",
                "additions": 42,
                "deletions": 43,
                "patch": "@@ -11,7 +11,6 @@\n \n 'use strict';\n \n-var EventConstants = require('EventConstants');\n var EventPropagators = require('EventPropagators');\n var ExecutionEnvironment = require('ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n@@ -20,6 +19,8 @@ var SyntheticInputEvent = require('SyntheticInputEvent');\n \n var keyOf = require('keyOf');\n \n+import type { TopLevelTypes } from 'EventConstants';\n+\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n \n@@ -70,8 +71,6 @@ function isPresto() {\n var SPACEBAR_CODE = 32;\n var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n-var topLevelTypes = EventConstants.topLevelTypes;\n-\n // Events and their corresponding property names.\n var eventTypes = {\n   beforeInput: {\n@@ -80,10 +79,10 @@ var eventTypes = {\n       captured: keyOf({onBeforeInputCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topCompositionEnd,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topTextInput,\n-      topLevelTypes.topPaste,\n+      'topCompositionEnd',\n+      'topKeyPress',\n+      'topTextInput',\n+      'topPaste',\n     ],\n   },\n   compositionEnd: {\n@@ -92,12 +91,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionEndCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionEnd,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionEnd',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n   compositionStart: {\n@@ -106,12 +105,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionStartCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionStart,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionStart',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n   compositionUpdate: {\n@@ -120,12 +119,12 @@ var eventTypes = {\n       captured: keyOf({onCompositionUpdateCapture: null}),\n     },\n     dependencies: [\n-      topLevelTypes.topBlur,\n-      topLevelTypes.topCompositionUpdate,\n-      topLevelTypes.topKeyDown,\n-      topLevelTypes.topKeyPress,\n-      topLevelTypes.topKeyUp,\n-      topLevelTypes.topMouseDown,\n+      'topBlur',\n+      'topCompositionUpdate',\n+      'topKeyDown',\n+      'topKeyPress',\n+      'topKeyUp',\n+      'topMouseDown',\n     ],\n   },\n };\n@@ -155,11 +154,11 @@ function isKeypressCommand(nativeEvent) {\n  */\n function getCompositionEventType(topLevelType) {\n   switch (topLevelType) {\n-    case topLevelTypes.topCompositionStart:\n+    case 'topCompositionStart':\n       return eventTypes.compositionStart;\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return eventTypes.compositionEnd;\n-    case topLevelTypes.topCompositionUpdate:\n+    case 'topCompositionUpdate':\n       return eventTypes.compositionUpdate;\n   }\n }\n@@ -174,7 +173,7 @@ function getCompositionEventType(topLevelType) {\n  */\n function isFallbackCompositionStart(topLevelType, nativeEvent) {\n   return (\n-    topLevelType === topLevelTypes.topKeyDown &&\n+    topLevelType === 'topKeyDown' &&\n     nativeEvent.keyCode === START_KEYCODE\n   );\n }\n@@ -188,16 +187,16 @@ function isFallbackCompositionStart(topLevelType, nativeEvent) {\n  */\n function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case topLevelTypes.topKeyUp:\n+    case 'topKeyUp':\n       // Command keys insert or clear IME input.\n       return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n-    case topLevelTypes.topKeyDown:\n+    case 'topKeyDown':\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return (nativeEvent.keyCode !== START_KEYCODE);\n-    case topLevelTypes.topKeyPress:\n-    case topLevelTypes.topMouseDown:\n-    case topLevelTypes.topBlur:\n+    case 'topKeyPress':\n+    case 'topMouseDown':\n+    case 'topBlur':\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -291,11 +290,11 @@ function extractCompositionEvent(\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n-function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n+function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   switch (topLevelType) {\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return getDataFromCustomEvent(nativeEvent);\n-    case topLevelTypes.topKeyPress:\n+    case 'topKeyPress':\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -318,7 +317,7 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case topLevelTypes.topTextInput:\n+    case 'topTextInput':\n       // Record the characters to be added to the DOM.\n       var chars = nativeEvent.data;\n \n@@ -345,12 +344,12 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n+function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   if (currentComposition) {\n     if (\n-      topLevelType === topLevelTypes.topCompositionEnd ||\n+      topLevelType === 'topCompositionEnd' ||\n       isFallbackCompositionEnd(topLevelType, nativeEvent)\n     ) {\n       var chars = currentComposition.getData();\n@@ -362,11 +361,11 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n   }\n \n   switch (topLevelType) {\n-    case topLevelTypes.topPaste:\n+    case 'topPaste':\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case topLevelTypes.topKeyPress:\n+    case 'topKeyPress':\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -387,7 +386,7 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n         return String.fromCharCode(nativeEvent.which);\n       }\n       return null;\n-    case topLevelTypes.topCompositionEnd:\n+    case 'topCompositionEnd':\n       return useFallbackCompositionData ? null : nativeEvent.data;\n     default:\n       return null;",
                "changeType": "modified"
            },
            {
                "commitId": "f7076b7759c57b95da21ffca892ddbdcf3ffed02",
                "additions": 8,
                "deletions": 10,
                "patch": "@@ -17,8 +17,6 @@ var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n-var keyOf = require('keyOf');\n-\n import type { TopLevelTypes } from 'EventConstants';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n@@ -75,8 +73,8 @@ var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n var eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onBeforeInput: null}),\n-      captured: keyOf({onBeforeInputCapture: null}),\n+      bubbled: 'onBeforeInput',\n+      captured: 'onBeforeInputCapture',\n     },\n     dependencies: [\n       'topCompositionEnd',\n@@ -87,8 +85,8 @@ var eventTypes = {\n   },\n   compositionEnd: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionEnd: null}),\n-      captured: keyOf({onCompositionEndCapture: null}),\n+      bubbled: 'onCompositionEnd',\n+      captured: 'onCompositionEndCapture',\n     },\n     dependencies: [\n       'topBlur',\n@@ -101,8 +99,8 @@ var eventTypes = {\n   },\n   compositionStart: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionStart: null}),\n-      captured: keyOf({onCompositionStartCapture: null}),\n+      bubbled: 'onCompositionStart',\n+      captured: 'onCompositionStartCapture',\n     },\n     dependencies: [\n       'topBlur',\n@@ -115,8 +113,8 @@ var eventTypes = {\n   },\n   compositionUpdate: {\n     phasedRegistrationNames: {\n-      bubbled: keyOf({onCompositionUpdate: null}),\n-      captured: keyOf({onCompositionUpdateCapture: null}),\n+      bubbled: 'onCompositionUpdate',\n+      captured: 'onCompositionUpdateCapture',\n     },\n     dependencies: [\n       'topBlur',",
                "changeType": "modified"
            },
            {
                "commitId": "a64ca9b697d0808a2966465fea2e658e4f310080",
                "additions": 5,
                "deletions": 4,
                "patch": "@@ -345,11 +345,12 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n+  // If composition event is available, we extract a string only at\n+  // compositionevent, otherwise extract it at fallback events.\n   if (currentComposition) {\n-    if (\n-      topLevelType === 'topCompositionEnd' ||\n-      isFallbackCompositionEnd(topLevelType, nativeEvent)\n-    ) {\n+    if (topLevelType === 'topCompositionEnd'\n+        || (!canUseCompositionEvent\n+            && isFallbackCompositionEnd(topLevelType, nativeEvent))) {\n       var chars = currentComposition.getData();\n       FallbackCompositionState.release(currentComposition);\n       currentComposition = null;",
                "changeType": "modified"
            },
            {
                "commitId": "a3fb0310ca6f7cad0707b5a9fd004c19e004186f",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "e3131c1d55d6695c2f0966379535f88b813f912b",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "e452e3374135c116ef687a8bb3a5d277e3cde8fb",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -12,7 +12,7 @@\n 'use strict';\n \n var EventPropagators = require('EventPropagators');\n-var ExecutionEnvironment = require('ExecutionEnvironment');\n+var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');",
                "changeType": "modified"
            },
            {
                "commitId": "8bc11649df767402c262b6c9b67c6dd811d42cd0",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -12,7 +12,7 @@\n 'use strict';\n \n var EventPropagators = require('EventPropagators');\n-var ExecutionEnvironment = require('ExecutionEnvironment');\n+var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');",
                "changeType": "modified"
            },
            {
                "commitId": "1843f8716803d380df34a7362d80022352853931",
                "additions": 30,
                "deletions": 44,
                "patch": null,
                "changeType": "modified"
            },
            {
                "commitId": "b1b4a2fb252f26fe10d29ba60d85ff89a85ff3ec",
                "additions": 30,
                "deletions": 44,
                "patch": null,
                "changeType": "modified"
            },
            {
                "commitId": "b1768b5a48d1f82e4ef4150e0036c5f846d3758a",
                "additions": 14,
                "deletions": 8,
                "patch": "@@ -22,8 +22,8 @@ import type {TopLevelTypes} from 'EventConstants';\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n \n-var canUseCompositionEvent = ExecutionEnvironment.canUseDOM &&\n-  'CompositionEvent' in window;\n+var canUseCompositionEvent =\n+  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n \n var documentMode = null;\n if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n@@ -33,15 +33,17 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n-var canUseTextInputEvent = ExecutionEnvironment.canUseDOM &&\n+var canUseTextInputEvent =\n+  ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n   !isPresto();\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n-var useFallbackCompositionData = ExecutionEnvironment.canUseDOM &&\n+var useFallbackCompositionData =\n+  ExecutionEnvironment.canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n \n@@ -51,9 +53,11 @@ var useFallbackCompositionData = ExecutionEnvironment.canUseDOM &&\n  */\n function isPresto() {\n   var opera = window.opera;\n-  return typeof opera === 'object' &&\n+  return (\n+    typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n-    parseInt(opera.version(), 10) <= 12;\n+    parseInt(opera.version(), 10) <= 12\n+  );\n }\n \n var SPACEBAR_CODE = 32;\n@@ -126,9 +130,11 @@ var hasSpaceKeypress = false;\n  * (cut, copy, select-all, etc.) even though no character is inserted.\n  */\n function isKeypressCommand(nativeEvent) {\n-  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n+  return (\n+    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n     // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n-    !(nativeEvent.ctrlKey && nativeEvent.altKey);\n+    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n+  );\n }\n \n /**",
                "changeType": "modified"
            },
            {
                "commitId": "a9d0deb8e13e9f0b1ee7d2f28a6eec0e7ad2e41d",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -17,7 +17,7 @@ var FallbackCompositionState = require('FallbackCompositionState');\n var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n var SyntheticInputEvent = require('SyntheticInputEvent');\n \n-import type {TopLevelTypes} from 'EventConstants';\n+import type {TopLevelTypes} from 'BrowserEventConstants';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n@@ -275,7 +275,7 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {string} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n@@ -329,7 +329,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n  *\n- * @param {string} topLevelType Record from `EventConstants`.\n+ * @param {string} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */",
                "changeType": "modified"
            },
            {
                "commitId": "00ba97a354e841701b4b83983c3a3904895e7b87",
                "additions": 12,
                "deletions": 2,
                "patch": "@@ -374,8 +374,18 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n        *   being used. Ex: `Cmd+C`. No character is inserted, and no\n        *   `input` event will occur.\n        */\n-      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n-        return String.fromCharCode(nativeEvent.which);\n+      if (!isKeypressCommand(nativeEvent)) {\n+        // IE fires the `keypress` event when a user types an emoji via\n+        // Touch keyboard of Windows.  In such a case, the `char` property\n+        // holds an emoji character like `\\uD83D\\uDE0A`.  Because its length\n+        // is 2, the property `which` does not represent an emoji correctly.\n+        // In such a case, we directly return the `char` property instead of\n+        // using `which`.\n+        if (nativeEvent.char && nativeEvent.char.length > 1) {\n+          return nativeEvent.char;\n+        } else if (nativeEvent.which) {\n+          return String.fromCharCode(nativeEvent.which);\n+        }\n       }\n       return null;\n     case 'topCompositionEnd':",
                "changeType": "modified"
            },
            {
                "commitId": "755724a24c4743b5507590e512cdf2f24d9b8435",
                "additions": 11,
                "deletions": 13,
                "patch": "@@ -209,8 +209,8 @@ function getDataFromCustomEvent(nativeEvent) {\n   return null;\n }\n \n-// Track the current IME composition fallback object, if any.\n-var currentComposition = null;\n+// Track the current IME composition status, if any.\n+var isComposing = false;\n \n /**\n  * @return {?object} A SyntheticCompositionEvent.\n@@ -226,7 +226,7 @@ function extractCompositionEvent(\n \n   if (canUseCompositionEvent) {\n     eventType = getCompositionEventType(topLevelType);\n-  } else if (!currentComposition) {\n+  } else if (!isComposing) {\n     if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n       eventType = eventTypes.compositionStart;\n     }\n@@ -241,13 +241,11 @@ function extractCompositionEvent(\n   if (useFallbackCompositionData) {\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n-    if (!currentComposition && eventType === eventTypes.compositionStart) {\n-      currentComposition = FallbackCompositionState.getPooled(\n-        nativeEventTarget,\n-      );\n+    if (!isComposing && eventType === eventTypes.compositionStart) {\n+      isComposing = FallbackCompositionState.initialize(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n-      if (currentComposition) {\n-        fallbackData = currentComposition.getData();\n+      if (isComposing) {\n+        fallbackData = FallbackCompositionState.getData();\n       }\n     }\n   }\n@@ -338,15 +336,15 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n-  if (currentComposition) {\n+  if (isComposing) {\n     if (\n       topLevelType === 'topCompositionEnd' ||\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      var chars = currentComposition.getData();\n-      FallbackCompositionState.release(currentComposition);\n-      currentComposition = null;\n+      var chars = FallbackCompositionState.getData();\n+      FallbackCompositionState.reset();\n+      isComposing = false;\n       return chars;\n     }\n     return null;",
                "changeType": "modified"
            },
            {
                "commitId": "0e556fef24e9db468d00b05ef8ddfa0b06b08f0c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -273,7 +273,7 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {string} topLevelType Record from `BrowserEventConstants`.\n+ * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */",
                "changeType": "modified"
            },
            {
                "commitId": "d63249d03488fec1ea92a81ba29f0e87a82feeae",
                "additions": 3,
                "deletions": 5,
                "patch": "@@ -1,10 +1,8 @@\n /**\n- * Copyright 2013-present Facebook, Inc.\n- * All rights reserved.\n+ * Copyright (c) 2013-present, Facebook, Inc.\n  *\n- * This source code is licensed under the BSD-style license found in the\n- * LICENSE file in the root directory of this source tree. An additional grant\n- * of patent rights can be found in the PATENTS file in the same directory.\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n  *\n  * @providesModule BeforeInputEventPlugin\n  */",
                "changeType": "modified"
            },
            {
                "commitId": "d9c1dbd61772f8f8ab0cdf389e70463d704c480b",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "313611572b6567d229367ed20ff63d1bca8610bb",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "ab853e6f3ef69a56f042f5aa5c07da881fdb68a0",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "1eed302d346bfb8f5db8d88b0e7096d8999d3548",
                "additions": 4,
                "deletions": 6,
                "patch": "@@ -3,17 +3,15 @@\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.\n- *\n- * @providesModule BeforeInputEventPlugin\n  */\n \n 'use strict';\n \n-var EventPropagators = require('EventPropagators');\n+var EventPropagators = require('events/EventPropagators');\n var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n-var FallbackCompositionState = require('FallbackCompositionState');\n-var SyntheticCompositionEvent = require('SyntheticCompositionEvent');\n-var SyntheticInputEvent = require('SyntheticInputEvent');\n+var FallbackCompositionState = require('./FallbackCompositionState');\n+var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n+var SyntheticInputEvent = require('./SyntheticInputEvent');\n \n import type {TopLevelTypes} from 'BrowserEventConstants';\n ",
                "changeType": "modified"
            },
            {
                "commitId": "087c48bb36b88ef0b5bbca2b9b70a52d8d413102",
                "additions": 3,
                "deletions": 2,
                "patch": "@@ -7,14 +7,15 @@\n \n 'use strict';\n \n+import type {TopLevelTypes} from './BrowserEventConstants';\n+\n var EventPropagators = require('events/EventPropagators');\n var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n+\n var FallbackCompositionState = require('./FallbackCompositionState');\n var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n var SyntheticInputEvent = require('./SyntheticInputEvent');\n \n-import type {TopLevelTypes} from 'BrowserEventConstants';\n-\n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n ",
                "changeType": "modified"
            },
            {
                "commitId": "21d0c115238b4f38837020cf83e0c657d8c01c9f",
                "additions": 6,
                "deletions": 6,
                "patch": "@@ -9,12 +9,12 @@\n \n import type {TopLevelTypes} from './BrowserEventConstants';\n \n-var EventPropagators = require('events/EventPropagators');\n-var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n+import EventPropagators from 'events/EventPropagators';\n+import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n-var FallbackCompositionState = require('./FallbackCompositionState');\n-var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n-var SyntheticInputEvent = require('./SyntheticInputEvent');\n+import FallbackCompositionState from './FallbackCompositionState';\n+import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n+import SyntheticInputEvent from './SyntheticInputEvent';\n \n var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n var START_KEYCODE = 229;\n@@ -472,4 +472,4 @@ var BeforeInputEventPlugin = {\n   },\n };\n \n-module.exports = BeforeInputEventPlugin;\n+export default BeforeInputEventPlugin;",
                "changeType": "modified"
            },
            {
                "commitId": "45c1ff348e1c7d03567f5bba6cb32cffa9222972",
                "additions": 0,
                "deletions": 2,
                "patch": "@@ -5,8 +5,6 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-'use strict';\n-\n import type {TopLevelTypes} from './BrowserEventConstants';\n \n import EventPropagators from 'events/EventPropagators';",
                "changeType": "modified"
            },
            {
                "commitId": "92b7b172cce9958b846844f0b46fd7bbd8c5140d",
                "additions": 4,
                "deletions": 4,
                "patch": "@@ -7,10 +7,10 @@\n \n import type {TopLevelTypes} from './BrowserEventConstants';\n \n-import EventPropagators from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n-import FallbackCompositionState from './FallbackCompositionState';\n+import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n@@ -263,7 +263,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatches(event);\n   return event;\n }\n \n@@ -422,7 +422,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  EventPropagators.accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatches(event);\n   return event;\n }\n ",
                "changeType": "modified"
            },
            {
                "commitId": "5bd2321ae3dd7d68ac02dee3c3f271e9d0ee8784",
                "additions": 23,
                "deletions": 23,
                "patch": "@@ -14,21 +14,21 @@ import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n-var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n-var START_KEYCODE = 229;\n+const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n+const START_KEYCODE = 229;\n \n-var canUseCompositionEvent =\n+const canUseCompositionEvent =\n   ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n \n-var documentMode = null;\n+let documentMode = null;\n if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n-var canUseTextInputEvent =\n+const canUseTextInputEvent =\n   ExecutionEnvironment.canUseDOM &&\n   'TextEvent' in window &&\n   !documentMode &&\n@@ -37,7 +37,7 @@ var canUseTextInputEvent =\n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n-var useFallbackCompositionData =\n+const useFallbackCompositionData =\n   ExecutionEnvironment.canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n@@ -47,19 +47,19 @@ var useFallbackCompositionData =\n  * text input events. Rely on keypress instead.\n  */\n function isPresto() {\n-  var opera = window.opera;\n+  const opera = window.opera;\n   return (\n     typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n     parseInt(opera.version(), 10) <= 12\n   );\n }\n \n-var SPACEBAR_CODE = 32;\n-var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n+const SPACEBAR_CODE = 32;\n+const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n // Events and their corresponding property names.\n-var eventTypes = {\n+const eventTypes = {\n   beforeInput: {\n     phasedRegistrationNames: {\n       bubbled: 'onBeforeInput',\n@@ -117,7 +117,7 @@ var eventTypes = {\n };\n \n // Track whether we've ever handled a keypress on the space key.\n-var hasSpaceKeypress = false;\n+let hasSpaceKeypress = false;\n \n /**\n  * Return whether a native keypress event is assumed to be a command.\n@@ -197,15 +197,15 @@ function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  * @return {?string}\n  */\n function getDataFromCustomEvent(nativeEvent) {\n-  var detail = nativeEvent.detail;\n+  const detail = nativeEvent.detail;\n   if (typeof detail === 'object' && 'data' in detail) {\n     return detail.data;\n   }\n   return null;\n }\n \n // Track the current IME composition status, if any.\n-var isComposing = false;\n+let isComposing = false;\n \n /**\n  * @return {?object} A SyntheticCompositionEvent.\n@@ -216,8 +216,8 @@ function extractCompositionEvent(\n   nativeEvent,\n   nativeEventTarget,\n ) {\n-  var eventType;\n-  var fallbackData;\n+  let eventType;\n+  let fallbackData;\n \n   if (canUseCompositionEvent) {\n     eventType = getCompositionEventType(topLevelType);\n@@ -245,7 +245,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  var event = SyntheticCompositionEvent.getPooled(\n+  const event = SyntheticCompositionEvent.getPooled(\n     eventType,\n     targetInst,\n     nativeEvent,\n@@ -257,7 +257,7 @@ function extractCompositionEvent(\n     // This matches the property of native CompositionEventInterface.\n     event.data = fallbackData;\n   } else {\n-    var customData = getDataFromCustomEvent(nativeEvent);\n+    const customData = getDataFromCustomEvent(nativeEvent);\n     if (customData !== null) {\n       event.data = customData;\n     }\n@@ -291,7 +291,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n        * To avoid this issue, use the keypress event as if no `textInput`\n        * event is available.\n        */\n-      var which = nativeEvent.which;\n+      const which = nativeEvent.which;\n       if (which !== SPACEBAR_CODE) {\n         return null;\n       }\n@@ -301,7 +301,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n \n     case 'topTextInput':\n       // Record the characters to be added to the DOM.\n-      var chars = nativeEvent.data;\n+      const chars = nativeEvent.data;\n \n       // If it's a spacebar character, assume that we have already handled\n       // it at the keypress level and bail immediately. Android Chrome\n@@ -337,7 +337,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      var chars = FallbackCompositionState.getData();\n+      const chars = FallbackCompositionState.getData();\n       FallbackCompositionState.reset();\n       isComposing = false;\n       return chars;\n@@ -400,7 +400,7 @@ function extractBeforeInputEvent(\n   nativeEvent,\n   nativeEventTarget,\n ) {\n-  var chars;\n+  let chars;\n \n   if (canUseTextInputEvent) {\n     chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n@@ -414,7 +414,7 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  var event = SyntheticInputEvent.getPooled(\n+  const event = SyntheticInputEvent.getPooled(\n     eventTypes.beforeInput,\n     targetInst,\n     nativeEvent,\n@@ -444,7 +444,7 @@ function extractBeforeInputEvent(\n  * allowing us to share composition fallback code for both `beforeInput` and\n  * `composition` event types.\n  */\n-var BeforeInputEventPlugin = {\n+const BeforeInputEventPlugin = {\n   eventTypes: eventTypes,\n \n   extractEvents: function(",
                "changeType": "modified"
            },
            {
                "commitId": "cc52e06b490e0dc2482b345aa5d0d65fae931095",
                "additions": 23,
                "deletions": 14,
                "patch": "@@ -453,20 +453,29 @@ const BeforeInputEventPlugin = {\n     nativeEvent,\n     nativeEventTarget,\n   ) {\n-    return [\n-      extractCompositionEvent(\n-        topLevelType,\n-        targetInst,\n-        nativeEvent,\n-        nativeEventTarget,\n-      ),\n-      extractBeforeInputEvent(\n-        topLevelType,\n-        targetInst,\n-        nativeEvent,\n-        nativeEventTarget,\n-      ),\n-    ];\n+    const composition = extractCompositionEvent(\n+      topLevelType,\n+      targetInst,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+\n+    const beforeInput = extractBeforeInputEvent(\n+      topLevelType,\n+      targetInst,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+\n+    if (composition === null) {\n+      return beforeInput;\n+    }\n+\n+    if (beforeInput === null) {\n+      return composition;\n+    }\n+\n+    return [composition, beforeInput];\n   },\n };\n ",
                "changeType": "modified"
            },
            {
                "commitId": "faa4218632ca21f3af731fb6c14849fc054fca15",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -49,6 +49,7 @@ const useFallbackCompositionData =\n function isPresto() {\n   const opera = window.opera;\n   return (\n+    opera !== null &&\n     typeof opera === 'object' &&\n     typeof opera.version === 'function' &&\n     parseInt(opera.version(), 10) <= 12",
                "changeType": "modified"
            },
            {
                "commitId": "4d37040cbf914c9d3c282e8edd67fa97a3c31178",
                "additions": 1,
                "deletions": 18,
                "patch": "@@ -29,10 +29,7 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n const canUseTextInputEvent =\n-  ExecutionEnvironment.canUseDOM &&\n-  'TextEvent' in window &&\n-  !documentMode &&\n-  !isPresto();\n+  ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n@@ -42,20 +39,6 @@ const useFallbackCompositionData =\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n \n-/**\n- * Opera <= 12 includes TextEvent in window, but does not fire\n- * text input events. Rely on keypress instead.\n- */\n-function isPresto() {\n-  const opera = window.opera;\n-  return (\n-    opera !== null &&\n-    typeof opera === 'object' &&\n-    typeof opera.version === 'function' &&\n-    parseInt(opera.version(), 10) <= 12\n-  );\n-}\n-\n const SPACEBAR_CODE = 32;\n const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n ",
                "changeType": "modified"
            },
            {
                "commitId": "e96dc140599363029bd05565d58bcd4a432db370",
                "additions": 55,
                "deletions": 43,
                "patch": "@@ -5,11 +5,23 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelTypes} from './BrowserEventConstants';\n+import type {TopLevelType} from 'events/TopLevelEventTypes';\n \n import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n \n+import {\n+  TOP_BLUR,\n+  TOP_COMPOSITION_START,\n+  TOP_COMPOSITION_END,\n+  TOP_COMPOSITION_UPDATE,\n+  TOP_KEY_DOWN,\n+  TOP_KEY_PRESS,\n+  TOP_KEY_UP,\n+  TOP_MOUSE_DOWN,\n+  TOP_TEXT_INPUT,\n+  TOP_PASTE,\n+} from './DOMTopLevelEventTypes';\n import * as FallbackCompositionState from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n@@ -50,10 +62,10 @@ const eventTypes = {\n       captured: 'onBeforeInputCapture',\n     },\n     dependencies: [\n-      'topCompositionEnd',\n-      'topKeyPress',\n-      'topTextInput',\n-      'topPaste',\n+      TOP_COMPOSITION_END,\n+      TOP_KEY_PRESS,\n+      TOP_TEXT_INPUT,\n+      TOP_PASTE,\n     ],\n   },\n   compositionEnd: {\n@@ -62,12 +74,12 @@ const eventTypes = {\n       captured: 'onCompositionEndCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionEnd',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_END,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n   compositionStart: {\n@@ -76,12 +88,12 @@ const eventTypes = {\n       captured: 'onCompositionStartCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionStart',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_START,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n   compositionUpdate: {\n@@ -90,12 +102,12 @@ const eventTypes = {\n       captured: 'onCompositionUpdateCapture',\n     },\n     dependencies: [\n-      'topBlur',\n-      'topCompositionUpdate',\n-      'topKeyDown',\n-      'topKeyPress',\n-      'topKeyUp',\n-      'topMouseDown',\n+      TOP_BLUR,\n+      TOP_COMPOSITION_UPDATE,\n+      TOP_KEY_DOWN,\n+      TOP_KEY_PRESS,\n+      TOP_KEY_UP,\n+      TOP_MOUSE_DOWN,\n     ],\n   },\n };\n@@ -124,11 +136,11 @@ function isKeypressCommand(nativeEvent) {\n  */\n function getCompositionEventType(topLevelType) {\n   switch (topLevelType) {\n-    case 'topCompositionStart':\n+    case TOP_COMPOSITION_START:\n       return eventTypes.compositionStart;\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return eventTypes.compositionEnd;\n-    case 'topCompositionUpdate':\n+    case TOP_COMPOSITION_UPDATE:\n       return eventTypes.compositionUpdate;\n   }\n }\n@@ -142,7 +154,7 @@ function getCompositionEventType(topLevelType) {\n  * @return {boolean}\n  */\n function isFallbackCompositionStart(topLevelType, nativeEvent) {\n-  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;\n+  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;\n }\n \n /**\n@@ -154,16 +166,16 @@ function isFallbackCompositionStart(topLevelType, nativeEvent) {\n  */\n function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case 'topKeyUp':\n+    case TOP_KEY_UP:\n       // Command keys insert or clear IME input.\n       return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n-    case 'topKeyDown':\n+    case TOP_KEY_DOWN:\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return nativeEvent.keyCode !== START_KEYCODE;\n-    case 'topKeyPress':\n-    case 'topMouseDown':\n-    case 'topBlur':\n+    case TOP_KEY_PRESS:\n+    case TOP_MOUSE_DOWN:\n+    case TOP_BLUR:\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -252,15 +264,15 @@ function extractCompositionEvent(\n }\n \n /**\n- * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n+ * @param {TopLevelType} topLevelType Number from `TopLevelType`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The string corresponding to this `beforeInput` event.\n  */\n-function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n+function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n   switch (topLevelType) {\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return getDataFromCustomEvent(nativeEvent);\n-    case 'topKeyPress':\n+    case TOP_KEY_PRESS:\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -283,7 +295,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case 'topTextInput':\n+    case TOP_TEXT_INPUT:\n       // Record the characters to be added to the DOM.\n       const chars = nativeEvent.data;\n \n@@ -306,18 +318,18 @@ function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n  *\n- * @param {string} topLevelType Record from `BrowserEventConstants`.\n+ * @param {number} topLevelType Number from `TopLevelEventTypes`.\n  * @param {object} nativeEvent Native browser event.\n  * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n+function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n   if (isComposing) {\n     if (\n-      topLevelType === 'topCompositionEnd' ||\n+      topLevelType === TOP_COMPOSITION_END ||\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n@@ -330,11 +342,11 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n   }\n \n   switch (topLevelType) {\n-    case 'topPaste':\n+    case TOP_PASTE:\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case 'topKeyPress':\n+    case TOP_KEY_PRESS:\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -365,7 +377,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {\n         }\n       }\n       return null;\n-    case 'topCompositionEnd':\n+    case TOP_COMPOSITION_END:\n       return useFallbackCompositionData ? null : nativeEvent.data;\n     default:\n       return null;",
                "changeType": "modified"
            },
            {
                "commitId": "2e757790751ab8d165fc4df37e90a59d914c4527",
                "additions": 18,
                "deletions": 2,
                "patch": "@@ -200,6 +200,20 @@ function getDataFromCustomEvent(nativeEvent) {\n   return null;\n }\n \n+/**\n+ * Check if a composition event was triggered by Korean IME.\n+ * Our fallback mode does not work well with IE's Korean IME,\n+ * so just use native composition events when Korean IME is used.\n+ * Although CompositionEvent.locale property is deprecated,\n+ * it is available in IE, where our fallback mode is enabled.\n+ *\n+ * @param {object} nativeEvent\n+ * @return {boolean}\n+ */\n+function isUsingKoreanIME(nativeEvent) {\n+  return nativeEvent.locale === 'ko';\n+}\n+\n // Track the current IME composition status, if any.\n let isComposing = false;\n \n@@ -229,7 +243,7 @@ function extractCompositionEvent(\n     return null;\n   }\n \n-  if (useFallbackCompositionData) {\n+  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!isComposing && eventType === eventTypes.compositionStart) {\n@@ -378,7 +392,9 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       }\n       return null;\n     case TOP_COMPOSITION_END:\n-      return useFallbackCompositionData ? null : nativeEvent.data;\n+      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)\n+        ? null\n+        : nativeEvent.data;\n     default:\n       return null;\n   }",
                "changeType": "modified"
            },
            {
                "commitId": "72434a7686035b4af766ee7d06c070d7f5d6a5f2",
                "additions": 5,
                "deletions": 6,
                "patch": "@@ -8,7 +8,7 @@\n import type {TopLevelType} from 'events/TopLevelEventTypes';\n \n import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n-import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\n+import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n   TOP_BLUR,\n@@ -29,25 +29,24 @@ import SyntheticInputEvent from './SyntheticInputEvent';\n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;\n \n-const canUseCompositionEvent =\n-  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n+const canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;\n \n let documentMode = null;\n-if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n+if (canUseDOM && 'documentMode' in document) {\n   documentMode = document.documentMode;\n }\n \n // Webkit offers a very useful `textInput` event that can be used to\n // directly represent `beforeInput`. The IE `textinput` event is not as\n // useful, so we don't use it.\n const canUseTextInputEvent =\n-  ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;\n+  canUseDOM && 'TextEvent' in window && !documentMode;\n \n // In IE9+, we have access to composition events, but the data supplied\n // by the native compositionend event may be incorrect. Japanese ideographic\n // spaces, for instance (\\u3000) are not recorded correctly.\n const useFallbackCompositionData =\n-  ExecutionEnvironment.canUseDOM &&\n+  canUseDOM &&\n   (!canUseCompositionEvent ||\n     (documentMode && documentMode > 8 && documentMode <= 11));\n ",
                "changeType": "modified"
            },
            {
                "commitId": "b87aabdfe1b7461e7331abb3601d9e6bb27544bc",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2013-present, Facebook, Inc.\n+ * Copyright (c) Facebook, Inc. and its affiliates.\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.",
                "changeType": "modified"
            },
            {
                "commitId": "8a8d973d3cc5623676a84f87af66ef9259c3937c",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -314,7 +314,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n \n       // If it's a spacebar character, assume that we have already handled\n       // it at the keypress level and bail immediately. Android Chrome\n-      // doesn't give us keycodes, so we need to blacklist it.\n+      // doesn't give us keycodes, so we need to ignore it.\n       if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n         return null;\n       }",
                "changeType": "modified"
            },
            {
                "commitId": "c954efa70f44a44be9c33c60c57f87bea6f40a10",
                "additions": 9,
                "deletions": 5,
                "patch": "@@ -22,7 +22,11 @@ import {\n   TOP_TEXT_INPUT,\n   TOP_PASTE,\n } from './DOMTopLevelEventTypes';\n-import * as FallbackCompositionState from './FallbackCompositionState';\n+import {\n+  getData as FallbackCompositionStateGetData,\n+  initialize as FallbackCompositionStateInitialize,\n+  reset as FallbackCompositionStateReset,\n+} from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n \n@@ -246,10 +250,10 @@ function extractCompositionEvent(\n     // The current composition is stored statically and must not be\n     // overwritten while composition continues.\n     if (!isComposing && eventType === eventTypes.compositionStart) {\n-      isComposing = FallbackCompositionState.initialize(nativeEventTarget);\n+      isComposing = FallbackCompositionStateInitialize(nativeEventTarget);\n     } else if (eventType === eventTypes.compositionEnd) {\n       if (isComposing) {\n-        fallbackData = FallbackCompositionState.getData();\n+        fallbackData = FallbackCompositionStateGetData();\n       }\n     }\n   }\n@@ -346,8 +350,8 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       (!canUseCompositionEvent &&\n         isFallbackCompositionEnd(topLevelType, nativeEvent))\n     ) {\n-      const chars = FallbackCompositionState.getData();\n-      FallbackCompositionState.reset();\n+      const chars = FallbackCompositionStateGetData();\n+      FallbackCompositionStateReset();\n       isComposing = false;\n       return chars;\n     }",
                "changeType": "modified"
            },
            {
                "commitId": "b1a03dfdc8e42d075422556553ffe59868150e95",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,9 +5,9 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelType} from 'events/TopLevelEventTypes';\n+import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {",
                "changeType": "modified"
            },
            {
                "commitId": "44e410900da8ef7b5e7daf18e7a0bf61b6612247",
                "additions": 2,
                "deletions": 2,
                "patch": "@@ -5,9 +5,9 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {TopLevelType} from 'events/TopLevelEventTypes';\n+import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'events/EventPropagators';\n+import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {",
                "changeType": "modified"
            },
            {
                "commitId": "0a527707cd8befd21a741ca9646a8551842190b0",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -464,6 +464,7 @@ const BeforeInputEventPlugin = {\n \n   extractEvents: function(\n     topLevelType,\n+    eventSystemFlags,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,",
                "changeType": "modified"
            },
            {
                "commitId": "ab1a4f249e61045d523ddbbfb840e868afbbf785",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -464,10 +464,10 @@ const BeforeInputEventPlugin = {\n \n   extractEvents: function(\n     topLevelType,\n-    eventSystemFlags,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,\n+    eventSystemFlags,\n   ) {\n     const composition = extractCompositionEvent(\n       topLevelType,",
                "changeType": "modified"
            },
            {
                "commitId": "2fe0fbb05ef2c56db760122e995b923528e6ce8f",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -7,7 +7,7 @@\n \n import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatches} from 'legacy-events/EventPropagators';\n+import {accumulateTwoPhaseDispatchesSingle} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n@@ -276,7 +276,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatchesSingle(event);\n   return event;\n }\n \n@@ -437,7 +437,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  accumulateTwoPhaseDispatches(event);\n+  accumulateTwoPhaseDispatchesSingle(event);\n   return event;\n }\n ",
                "changeType": "modified"
            },
            {
                "commitId": "30a998debf79f8c8efb3fa9b6ff5458fb319d7a1",
                "additions": 3,
                "deletions": 3,
                "patch": "@@ -7,7 +7,6 @@\n \n import type {TopLevelType} from 'legacy-events/TopLevelEventTypes';\n \n-import {accumulateTwoPhaseDispatchesSingle} from 'legacy-events/EventPropagators';\n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {\n@@ -29,6 +28,7 @@ import {\n } from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n+import {accumulateTwoPhaseListeners} from './DOMModernPluginEventSystem';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;\n@@ -276,7 +276,7 @@ function extractCompositionEvent(\n     }\n   }\n \n-  accumulateTwoPhaseDispatchesSingle(event);\n+  accumulateTwoPhaseListeners(event);\n   return event;\n }\n \n@@ -437,7 +437,7 @@ function extractBeforeInputEvent(\n   );\n \n   event.data = chars;\n-  accumulateTwoPhaseDispatchesSingle(event);\n+  accumulateTwoPhaseListeners(event);\n   return event;\n }\n ",
                "changeType": "modified"
            },
            {
                "commitId": "d3ec42020d220777bf589bec36c9cd8300ec9742",
                "additions": 1,
                "deletions": 1,
                "patch": "@@ -28,7 +28,7 @@ import {\n } from './FallbackCompositionState';\n import SyntheticCompositionEvent from './SyntheticCompositionEvent';\n import SyntheticInputEvent from './SyntheticInputEvent';\n-import {accumulateTwoPhaseListeners} from './DOMModernPluginEventSystem';\n+import accumulateTwoPhaseListeners from './accumulateTwoPhaseListeners';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;",
                "changeType": "modified"
            },
            {
                "commitId": "125d1a19a211c51d5ee52ec0c1cc1f538eb44d5c",
                "additions": 5,
                "deletions": 3,
                "patch": "@@ -27,9 +27,11 @@ import {\n   initialize as FallbackCompositionStateInitialize,\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n-import SyntheticCompositionEvent from '../SyntheticCompositionEvent';\n-import SyntheticInputEvent from '../SyntheticInputEvent';\n-import {accumulateTwoPhaseListeners} from '../DOMModernPluginEventSystem';\n+import {\n+  SyntheticCompositionEvent,\n+  SyntheticInputEvent,\n+} from '../SyntheticEvent';\n+import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n const START_KEYCODE = 229;",
                "changeType": "renamed"
            },
            {
                "commitId": "76ce685d0fc7821a6c8be486d7cbb2c3d22f6fb7",
                "additions": 7,
                "deletions": 4,
                "patch": "@@ -28,8 +28,9 @@ import {\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n import {\n-  SyntheticCompositionEvent,\n-  SyntheticInputEvent,\n+  CompositionEventInterface,\n+  InputEventInterface,\n+  SyntheticEvent,\n } from '../SyntheticEvent';\n import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n@@ -237,11 +238,12 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticCompositionEvent(\n+  const event = new SyntheticEvent(\n     eventType,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n+    CompositionEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n \n@@ -407,11 +409,12 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticInputEvent(\n+  const event = new SyntheticEvent(\n     'onBeforeInput',\n     null,\n     nativeEvent,\n     nativeEventTarget,\n+    InputEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n   event.data = chars;",
                "changeType": "modified"
            },
            {
                "commitId": "22d16cc15df8e570b79c2825fb495c2b98b40bf5",
                "additions": 87,
                "deletions": 101,
                "patch": "@@ -3,25 +3,19 @@\n  *\n  * This source code is licensed under the MIT license found in the\n  * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n  */\n \n-import type {TopLevelType} from '../../events/TopLevelEventTypes';\n+import type {DOMEventName} from '../../events/DOMEventNames';\n+import type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n+import type {AnyNativeEvent} from '../../events/PluginModuleType';\n+import type {DispatchQueue} from '../DOMPluginEventSystem';\n+import type {EventSystemFlags} from '../EventSystemFlags';\n \n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n import {registerTwoPhaseEvent} from '../EventRegistry';\n-import {\n-  TOP_FOCUS_OUT,\n-  TOP_COMPOSITION_START,\n-  TOP_COMPOSITION_END,\n-  TOP_COMPOSITION_UPDATE,\n-  TOP_KEY_DOWN,\n-  TOP_KEY_PRESS,\n-  TOP_KEY_UP,\n-  TOP_MOUSE_DOWN,\n-  TOP_TEXT_INPUT,\n-  TOP_PASTE,\n-} from '../DOMTopLevelEventTypes';\n import {\n   getData as FallbackCompositionStateGetData,\n   initialize as FallbackCompositionStateInitialize,\n@@ -63,34 +57,34 @@ const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n \n function registerEvents() {\n   registerTwoPhaseEvent('onBeforeInput', [\n-    TOP_COMPOSITION_END,\n-    TOP_KEY_PRESS,\n-    TOP_TEXT_INPUT,\n-    TOP_PASTE,\n+    'compositionend',\n+    'keypress',\n+    'textInput',\n+    'paste',\n   ]);\n   registerTwoPhaseEvent('onCompositionEnd', [\n-    TOP_COMPOSITION_END,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionend',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n   registerTwoPhaseEvent('onCompositionStart', [\n-    TOP_COMPOSITION_START,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionstart',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n   registerTwoPhaseEvent('onCompositionUpdate', [\n-    TOP_COMPOSITION_UPDATE,\n-    TOP_FOCUS_OUT,\n-    TOP_KEY_DOWN,\n-    TOP_KEY_PRESS,\n-    TOP_KEY_UP,\n-    TOP_MOUSE_DOWN,\n+    'compositionupdate',\n+    'focusout',\n+    'keydown',\n+    'keypress',\n+    'keyup',\n+    'mousedown',\n   ]);\n }\n \n@@ -102,7 +96,7 @@ let hasSpaceKeypress = false;\n  * This is required because Firefox fires `keypress` events for key commands\n  * (cut, copy, select-all, etc.) even though no character is inserted.\n  */\n-function isKeypressCommand(nativeEvent) {\n+function isKeypressCommand(nativeEvent: any) {\n   return (\n     (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n     // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n@@ -112,52 +106,47 @@ function isKeypressCommand(nativeEvent) {\n \n /**\n  * Translate native top level events into event types.\n- *\n- * @param {string} topLevelType\n- * @return {object}\n  */\n-function getCompositionEventType(topLevelType) {\n-  switch (topLevelType) {\n-    case TOP_COMPOSITION_START:\n+function getCompositionEventType(domEventName: DOMEventName) {\n+  switch (domEventName) {\n+    case 'compositionstart':\n       return 'onCompositionStart';\n-    case TOP_COMPOSITION_END:\n+    case 'compositionend':\n       return 'onCompositionEnd';\n-    case TOP_COMPOSITION_UPDATE:\n+    case 'compositionupdate':\n       return 'onCompositionUpdate';\n   }\n }\n \n /**\n  * Does our fallback best-guess model think this event signifies that\n  * composition has begun?\n- *\n- * @param {string} topLevelType\n- * @param {object} nativeEvent\n- * @return {boolean}\n  */\n-function isFallbackCompositionStart(topLevelType, nativeEvent) {\n-  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;\n+function isFallbackCompositionStart(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): boolean {\n+  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;\n }\n \n /**\n  * Does our fallback mode think that this event is the end of composition?\n- *\n- * @param {string} topLevelType\n- * @param {object} nativeEvent\n- * @return {boolean}\n  */\n-function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n-  switch (topLevelType) {\n-    case TOP_KEY_UP:\n+function isFallbackCompositionEnd(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): boolean {\n+  switch (domEventName) {\n+    case 'keyup':\n       // Command keys insert or clear IME input.\n       return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n-    case TOP_KEY_DOWN:\n+    case 'keydown':\n       // Expect IME keyCode on each keydown. If we get any other\n       // code we must have exited earlier.\n       return nativeEvent.keyCode !== START_KEYCODE;\n-    case TOP_KEY_PRESS:\n-    case TOP_MOUSE_DOWN:\n-    case TOP_FOCUS_OUT:\n+    case 'keypress':\n+    case 'mousedown':\n+    case 'focusout':\n       // Events are not possible without cancelling IME.\n       return true;\n     default:\n@@ -174,7 +163,7 @@ function isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  * @param {object} nativeEvent\n  * @return {?string}\n  */\n-function getDataFromCustomEvent(nativeEvent) {\n+function getDataFromCustomEvent(nativeEvent: any) {\n   const detail = nativeEvent.detail;\n   if (typeof detail === 'object' && 'data' in detail) {\n     return detail.data;\n@@ -192,7 +181,7 @@ function getDataFromCustomEvent(nativeEvent) {\n  * @param {object} nativeEvent\n  * @return {boolean}\n  */\n-function isUsingKoreanIME(nativeEvent) {\n+function isUsingKoreanIME(nativeEvent: any) {\n   return nativeEvent.locale === 'ko';\n }\n \n@@ -204,7 +193,7 @@ let isComposing = false;\n  */\n function extractCompositionEvent(\n   dispatchQueue,\n-  topLevelType,\n+  domEventName,\n   targetInst,\n   nativeEvent,\n   nativeEventTarget,\n@@ -213,12 +202,12 @@ function extractCompositionEvent(\n   let fallbackData;\n \n   if (canUseCompositionEvent) {\n-    eventType = getCompositionEventType(topLevelType);\n+    eventType = getCompositionEventType(domEventName);\n   } else if (!isComposing) {\n-    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n+    if (isFallbackCompositionStart(domEventName, nativeEvent)) {\n       eventType = 'onCompositionStart';\n     }\n-  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n+  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {\n     eventType = 'onCompositionEnd';\n   }\n \n@@ -259,16 +248,14 @@ function extractCompositionEvent(\n   }\n }\n \n-/**\n- * @param {TopLevelType} topLevelType Number from `TopLevelType`.\n- * @param {object} nativeEvent Native browser event.\n- * @return {?string} The string corresponding to this `beforeInput` event.\n- */\n-function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n-  switch (topLevelType) {\n-    case TOP_COMPOSITION_END:\n+function getNativeBeforeInputChars(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): ?string {\n+  switch (domEventName) {\n+    case 'compositionend':\n       return getDataFromCustomEvent(nativeEvent);\n-    case TOP_KEY_PRESS:\n+    case 'keypress':\n       /**\n        * If native `textInput` events are available, our goal is to make\n        * use of them. However, there is a special case: the spacebar key.\n@@ -291,7 +278,7 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n       hasSpaceKeypress = true;\n       return SPACEBAR_CHAR;\n \n-    case TOP_TEXT_INPUT:\n+    case 'textInput':\n       // Record the characters to be added to the DOM.\n       const chars = nativeEvent.data;\n \n@@ -313,21 +300,20 @@ function getNativeBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n /**\n  * For browsers that do not provide the `textInput` event, extract the\n  * appropriate string to use for SyntheticInputEvent.\n- *\n- * @param {number} topLevelType Number from `TopLevelEventTypes`.\n- * @param {object} nativeEvent Native browser event.\n- * @return {?string} The fallback string for this `beforeInput` event.\n  */\n-function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n+function getFallbackBeforeInputChars(\n+  domEventName: DOMEventName,\n+  nativeEvent: any,\n+): ?string {\n   // If we are currently composing (IME) and using a fallback to do so,\n   // try to extract the composed characters from the fallback object.\n   // If composition event is available, we extract a string only at\n   // compositionevent, otherwise extract it at fallback events.\n   if (isComposing) {\n     if (\n-      topLevelType === TOP_COMPOSITION_END ||\n+      domEventName === 'compositionend' ||\n       (!canUseCompositionEvent &&\n-        isFallbackCompositionEnd(topLevelType, nativeEvent))\n+        isFallbackCompositionEnd(domEventName, nativeEvent))\n     ) {\n       const chars = FallbackCompositionStateGetData();\n       FallbackCompositionStateReset();\n@@ -337,12 +323,12 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n     return null;\n   }\n \n-  switch (topLevelType) {\n-    case TOP_PASTE:\n+  switch (domEventName) {\n+    case 'paste':\n       // If a paste event occurs after a keypress, throw out the input\n       // chars. Paste events should not lead to BeforeInput events.\n       return null;\n-    case TOP_KEY_PRESS:\n+    case 'keypress':\n       /**\n        * As of v27, Firefox may fire keypress events even when no character\n        * will be inserted. A few possibilities:\n@@ -373,7 +359,7 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n         }\n       }\n       return null;\n-    case TOP_COMPOSITION_END:\n+    case 'compositionend':\n       return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)\n         ? null\n         : nativeEvent.data;\n@@ -390,17 +376,17 @@ function getFallbackBeforeInputChars(topLevelType: TopLevelType, nativeEvent) {\n  */\n function extractBeforeInputEvent(\n   dispatchQueue,\n-  topLevelType,\n+  domEventName,\n   targetInst,\n   nativeEvent,\n   nativeEventTarget,\n ) {\n   let chars;\n \n   if (canUseTextInputEvent) {\n-    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n+    chars = getNativeBeforeInputChars(domEventName, nativeEvent);\n   } else {\n-    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n+    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);\n   }\n \n   // If no characters are being inserted, no BeforeInput event should\n@@ -439,24 +425,24 @@ function extractBeforeInputEvent(\n  * `composition` event types.\n  */\n function extractEvents(\n-  dispatchQueue,\n-  topLevelType,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n-  eventSystemFlags,\n-  targetContainer,\n-) {\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n+  eventSystemFlags: EventSystemFlags,\n+  targetContainer: EventTarget,\n+): void {\n   extractCompositionEvent(\n     dispatchQueue,\n-    topLevelType,\n+    domEventName,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,\n   );\n   extractBeforeInputEvent(\n     dispatchQueue,\n-    topLevelType,\n+    domEventName,\n     targetInst,\n     nativeEvent,\n     nativeEventTarget,",
                "changeType": "modified"
            },
            {
                "commitId": "7f696bd99c39348a631c20378d2a8704634bab04",
                "additions": 2,
                "deletions": 0,
                "patch": "@@ -229,6 +229,7 @@ function extractCompositionEvent(\n \n   const event = new SyntheticEvent(\n     eventType,\n+    domEventName,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n@@ -397,6 +398,7 @@ function extractBeforeInputEvent(\n \n   const event = new SyntheticEvent(\n     'onBeforeInput',\n+    'beforeinput',\n     null,\n     nativeEvent,\n     nativeEventTarget,",
                "changeType": "modified"
            },
            {
                "commitId": "1890159a5d362e76ee949dfcace1ccb9677abc45",
                "additions": 4,
                "deletions": 7,
                "patch": "@@ -22,9 +22,8 @@ import {\n   reset as FallbackCompositionStateReset,\n } from '../FallbackCompositionState';\n import {\n-  CompositionEventInterface,\n-  InputEventInterface,\n-  SyntheticEvent,\n+  SyntheticCompositionEvent,\n+  SyntheticInputEvent,\n } from '../SyntheticEvent';\n import {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n \n@@ -227,13 +226,12 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticEvent(\n+  const event = new SyntheticCompositionEvent(\n     eventType,\n     domEventName,\n     null,\n     nativeEvent,\n     nativeEventTarget,\n-    CompositionEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n \n@@ -396,13 +394,12 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticEvent(\n+  const event = new SyntheticInputEvent(\n     'onBeforeInput',\n     'beforeinput',\n     null,\n     nativeEvent,\n     nativeEventTarget,\n-    InputEventInterface,\n   );\n   accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n   event.data = chars;",
                "changeType": "modified"
            },
            {
                "commitId": "480626a9e920d5e04194c793a828318102ea4ff4",
                "additions": 31,
                "deletions": 26,
                "patch": "@@ -226,23 +226,25 @@ function extractCompositionEvent(\n     }\n   }\n \n-  const event = new SyntheticCompositionEvent(\n-    eventType,\n-    domEventName,\n-    null,\n-    nativeEvent,\n-    nativeEventTarget,\n-  );\n-  accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n-\n-  if (fallbackData) {\n-    // Inject data generated from fallback path into the synthetic event.\n-    // This matches the property of native CompositionEventInterface.\n-    event.data = fallbackData;\n-  } else {\n-    const customData = getDataFromCustomEvent(nativeEvent);\n-    if (customData !== null) {\n-      event.data = customData;\n+  const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n+  if (listeners.length > 0) {\n+    const event = new SyntheticCompositionEvent(\n+      eventType,\n+      domEventName,\n+      null,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+    dispatchQueue.push({event, listeners});\n+    if (fallbackData) {\n+      // Inject data generated from fallback path into the synthetic event.\n+      // This matches the property of native CompositionEventInterface.\n+      event.data = fallbackData;\n+    } else {\n+      const customData = getDataFromCustomEvent(nativeEvent);\n+      if (customData !== null) {\n+        event.data = customData;\n+      }\n     }\n   }\n }\n@@ -394,15 +396,18 @@ function extractBeforeInputEvent(\n     return null;\n   }\n \n-  const event = new SyntheticInputEvent(\n-    'onBeforeInput',\n-    'beforeinput',\n-    null,\n-    nativeEvent,\n-    nativeEventTarget,\n-  );\n-  accumulateTwoPhaseListeners(targetInst, dispatchQueue, event);\n-  event.data = chars;\n+  const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n+  if (listeners.length > 0) {\n+    const event = new SyntheticInputEvent(\n+      'onBeforeInput',\n+      'beforeinput',\n+      null,\n+      nativeEvent,\n+      nativeEventTarget,\n+    );\n+    dispatchQueue.push({event, listeners});\n+    event.data = chars;\n+  }\n }\n \n /**",
                "changeType": "modified"
            },
            {
                "commitId": "9328988c024800de05dfab70e55cfd0999445d8a",
                "additions": 8,
                "deletions": 2,
                "patch": "@@ -12,6 +12,7 @@ import type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n import type {AnyNativeEvent} from '../../events/PluginModuleType';\n import type {DispatchQueue} from '../DOMPluginEventSystem';\n import type {EventSystemFlags} from '../EventSystemFlags';\n+import type {ReactSyntheticEvent} from '../ReactSyntheticEventType';\n \n import {canUseDOM} from 'shared/ExecutionEnvironment';\n \n@@ -228,7 +229,8 @@ function extractCompositionEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n-    const event = new SyntheticCompositionEvent(\n+    // $FlowFixMe[incompatible-type]\n+    const event: ReactSyntheticEvent = new SyntheticCompositionEvent(\n       eventType,\n       domEventName,\n       null,\n@@ -239,10 +241,12 @@ function extractCompositionEvent(\n     if (fallbackData) {\n       // Inject data generated from fallback path into the synthetic event.\n       // This matches the property of native CompositionEventInterface.\n+      // $FlowFixMe[incompatible-use]\n       event.data = fallbackData;\n     } else {\n       const customData = getDataFromCustomEvent(nativeEvent);\n       if (customData !== null) {\n+        // $FlowFixMe[incompatible-use]\n         event.data = customData;\n       }\n     }\n@@ -398,14 +402,16 @@ function extractBeforeInputEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n   if (listeners.length > 0) {\n-    const event = new SyntheticInputEvent(\n+    // $FlowFixMe[incompatible-type]\n+    const event: ReactSyntheticEvent = new SyntheticInputEvent(\n       'onBeforeInput',\n       'beforeinput',\n       null,\n       nativeEvent,\n       nativeEventTarget,\n     );\n     dispatchQueue.push({event, listeners});\n+    // $FlowFixMe[incompatible-use]\n     event.data = chars;\n   }\n }",
                "changeType": "modified"
            },
            {
                "commitId": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
                "additions": 0,
                "deletions": 0,
                "patch": null,
                "changeType": "renamed"
            },
            {
                "commitId": "64fe791be84ad04a4a1d005376ba5cf5701db9b7",
                "additions": 1,
                "deletions": 0,
                "patch": "@@ -227,6 +227,7 @@ function extractCompositionEvent(\n     }\n   }\n \n+  // $FlowFixMe[incompatible-call] found when upgrading Flow\n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n     // $FlowFixMe[incompatible-type]",
                "changeType": "modified"
            },
            {
                "commitId": "ea04a486a7c27771f7eea896565c0980927ed3b4",
                "additions": 0,
                "deletions": 3,
                "patch": "@@ -227,10 +227,8 @@ function extractCompositionEvent(\n     }\n   }\n \n-  // $FlowFixMe[incompatible-call] found when upgrading Flow\n   const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n   if (listeners.length > 0) {\n-    // $FlowFixMe[incompatible-type]\n     const event: ReactSyntheticEvent = new SyntheticCompositionEvent(\n       eventType,\n       domEventName,\n@@ -403,7 +401,6 @@ function extractBeforeInputEvent(\n \n   const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n   if (listeners.length > 0) {\n-    // $FlowFixMe[incompatible-type]\n     const event: ReactSyntheticEvent = new SyntheticInputEvent(\n       'onBeforeInput',\n       'beforeinput',",
                "changeType": "modified"
            },
            {
                "commitId": "0b4f443020af386f2b48c47c074cb504ed672dc8",
                "additions": 10,
                "deletions": 10,
                "patch": "@@ -192,11 +192,11 @@ let isComposing = false;\n  * @return {?object} A SyntheticCompositionEvent.\n  */\n function extractCompositionEvent(\n-  dispatchQueue,\n-  domEventName,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n ) {\n   let eventType;\n   let fallbackData;\n@@ -379,11 +379,11 @@ function getFallbackBeforeInputChars(\n  * @return {?object} A SyntheticInputEvent.\n  */\n function extractBeforeInputEvent(\n-  dispatchQueue,\n-  domEventName,\n-  targetInst,\n-  nativeEvent,\n-  nativeEventTarget,\n+  dispatchQueue: DispatchQueue,\n+  domEventName: DOMEventName,\n+  targetInst: null | Fiber,\n+  nativeEvent: AnyNativeEvent,\n+  nativeEventTarget: null | EventTarget,\n ) {\n   let chars;\n ",
                "changeType": "modified"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "give me all the commits for React.js file?",
        "number": 6,
        "category": 2,
        "response": "Here are all the commits for the React.js file:\n\n1. Commit ID: ce2bc58a9f6f3b0bfc8c738a0d8e2a5f3a332ff5\n   - Message: \"[activity] rename unstable_Offscreen to unstable_Activity (#27640)\n     `Activity` is the current candidate name. This PR starts the rename work by renaming the exported unstable component name.\n     NOTE: downstream consumers need to rename the import when updating to this commit.\"\n   - Date: 2023-11-02T20:13:21Z\n\n2. Commit ID: bfefb228422f7264a29b3a6b98ec95e05925e80e\n   - Message: \"Upgrade Server Actions to canary (#27459)\n     Upgrades the stability of Server Actions from experimental to canary.\n     - Turns on enableAsyncActions and enableFormActions\n     - Removes 'experimental_' prefix from useOptimistic, useFormStatus, and useFormState\"\n   - Date: 2023-10-04T18:51:36Z\n\n3. Commit ID: c7ba8c098889b6dc47fa9c807bbba3975a658584\n   - Message: \"Enforce that the 'react-server' build of 'react' is used (#27436)\n     I do this by simply renaming the secret export name in the 'subset' bundle and this renamed version is what the FlightServer uses.\n     This requires us to be more diligent about always using the correct instance of 'react' in our tests so there's a bunch of clean up for that.\"\n   - Date: 2023-09-29T22:24:05Z\n\n4. Commit ID: ac1a16c67e268fcb2c52e91717cbc918c7c24446\n   - Message: \"Add Postpone API (#27238)\n     This adds an experimental 'unstable_postpone(reason)' API.\n     Currently, we don't have a way to model effectively an Infinite Promise.\n     On the client, this works to model as an Infinite Promise (in fact, that's what this implementation does).\"\n   - Date: 2023-08-17T17:26:14Z\n\n5. Commit ID: eb2c2f7c2cf2652a168c2b433d2989131c69754b\n   - Message: \"rename SuspenseList export to unstable_SuspenseList (#27061)\n     As we began discussing yesterday, 'SuspenseList' is not actually stable yet, and should likely be exported with the 'unstable_' prefix.\"\n   - Date: 2023-07-06T18:09:53Z\n\n6. Commit ID: 80d9a40114bb43c07d021e8254790852f450bd2b\n   - Message: \"Remove useMutableSource (#27011)\n     This PR cleans up 'useMutableSource'. This has been blocked by a remaining dependency internally at Meta, but that has now been deleted.\"\n   - Date: 2023-06-27T16:45:46Z\n\n7. Commit ID: b7972822b5887d05ae772ef757a453265b4b7aec\n   - Message: \"useOptimisticState -> useOptimistic (#26772)\n     Drop the 'state'. Just 'useOptimistic'. Its cleaner. This is still an experimental API. May not be the final name.\"\n   - Date: 2023-05-03T18:26:00Z\n\n8. Commit ID: 491aec5d6113ce5bae7c10966bc38a4a8fc091a8\n   - Message: \"Implement experimental_useOptimisticState (#26740)\n     This adds an experimental hook tentatively called useOptimisticState. The headline feature is that you can use it to implement optimistic updates.\"\n   - Date: 2023-05-01T17:19:20Z",
        "chain_of_thought": "To address the question, we need to find all commits associated with a file named \"React.js\". The schema indicates that the relevant nodes are the Commit and File nodes, and the relationship between them is the changed relationship. We need to identify the file by its name and then find all commits that have modified this file.\n\nHere's the step-by-step breakdown of the query:\n\n1. Identify the File node with the name \"React.js\".\n2. Use the changed relationship to find all Commit nodes that have modified this file.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'React.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\n```\n\nThis query will return the commit ID, message, and committed date for each commit that has modified the \"React.js\" file.",
        "query": "cypher\nMATCH (c:Commit)-[:changed]->(f:File {name: 'React.js'})\nRETURN c.id AS commitId, c.message AS commitMessage, c.committedDate AS committedDate\n",
        "result": [
            {
                "commitId": "ce2bc58a9f6f3b0bfc8c738a0d8e2a5f3a332ff5",
                "commitMessage": "\"[activity] rename unstable_Offscreen to unstable_Activity (#27640)\n\n`Activity` is the current candidate name. This PR starts the rename work\r\nby renaming the exported unstable component name.\r\n\r\nNOTE: downstream consumers need to rename the import when updating to\r\nthis commit.\"",
                "committedDate": "2023-11-02T20:13:21Z"
            },
            {
                "commitId": "bfefb228422f7264a29b3a6b98ec95e05925e80e",
                "commitMessage": "\"Upgrade Server Actions to canary (#27459)\n\nUpgrades the stability of Server Actions from experimental to canary.\r\n\r\n- Turns on enableAsyncActions and enableFormActions\r\n- Removes \"experimental_\" prefix from useOptimistic, useFormStatus, and\r\nuseFormState\"",
                "committedDate": "2023-10-04T18:51:36Z"
            },
            {
                "commitId": "c7ba8c098889b6dc47fa9c807bbba3975a658584",
                "commitMessage": "\"Enforce that the \"react-server\" build of \"react\" is used (#27436)\n\nI do this by simply renaming the secret export name in the \"subset\"\r\nbundle and this renamed version is what the FlightServer uses.\r\n\r\nThis requires us to be more diligent about always using the correct\r\ninstance of \"react\" in our tests so theres a bunch of clean up for\r\nthat.\"",
                "committedDate": "2023-09-29T22:24:05Z"
            },
            {
                "commitId": "ac1a16c67e268fcb2c52e91717cbc918c7c24446",
                "commitMessage": "\"Add Postpone API (#27238)\n\nThis adds an experimental `unstable_postpone(reason)` API.\r\n\r\nCurrently we dont have a way to model effectively an Infinite Promise.\r\nI.e. something that suspends but never resolves. The reason this is\r\nuseful is because you might have something else that unblocks it later.\r\nE.g. by updating in place later, or by client rendering.\r\n\r\nOn the client this works to model as an Infinite Promise (in fact,\r\nthats what this implementation does). However, in Fizz and Flight that\r\ndoesnt work because the stream needs to end at some point. We dont\r\nhave any way of knowing that were suspended on infinite promises. Its\r\nnot enough to tag the promises because you could await those and thus\r\ncreating new promises. The only way we really have to signal this\r\nthrough a series of indirections like async functions, is by throwing.\r\nIts not 100% safe because these values can be caught but its the best\r\nwe can do.\r\n\r\nEffectively `postpone(reason)` behaves like a built-in [Catch\r\nBoundary](https://github.com/facebook/react/pull/26854). Its like\r\n`raise(Postpone, reason)` except its built-in so it needs to be able to\r\nbe encoded and caught by Suspense boundaries.\r\n\r\nIn Flight and Fizz these behave pretty much the same as errors. Flight\r\njust forwards it to retrigger on the client. In Fizz they just trigger\r\nclient rendering which itself might just postpone again or fill in the\r\nvalue. The difference is how they get logged.\r\n\r\nIn Flight and Fizz they log to `onPostpone(reason)` instead of\r\n`onError(error)`. This log is meant to help find deopts on the server\r\nlike finding places where you fall back to client rendering. The reason\r\nthat you pass in is for that purpose to help the reason for any deopts.\r\n\r\nI do track the stack trace in DEV but I dont currently expose it to\r\n`onPostpone`. This seems like a limitation. It might be better to expose\r\nthe Postpone object which is an Error object but thats more of an\r\nimplementation detail. I could also pass it as a second argument.\r\n\r\nOn the client after hydration they dont get passed to\r\n`onRecoverableError`. Theres no global `onPostpone` API to capture\r\npostponed things on the client just like theres no `onError`. At that\r\npoint its just assumed to be intentional. It doesnt have any `digest`\r\nor reason passed to the client since its not logged.\r\n\r\nThere are some hacky solutions that currently just tries to reuse as\r\nmuch of the existing code as possible but should be more properly\r\nimplemented.\r\n- Fiber is currently just converting it to a fake Promise object so that\r\nit behaves like an infinite Promise.\r\n- Fizz is encoding the magic digest string `\"POSTPONE\"` in the HTML so\r\nwe know to ignore it but it should probably just be something neater\r\nthat doesnt share namespace with digests.\r\n\r\nNext I plan on using this in the `/static` entry points for additional\r\nfeatures.\r\n\r\nWhy \"postpone\"? Its basically a synonym to \"defer\" but we plan on using\r\n\"defer\" for other purposes and its overloaded anyway.\"",
                "committedDate": "2023-08-17T17:26:14Z"
            },
            {
                "commitId": "eb2c2f7c2cf2652a168c2b433d2989131c69754b",
                "commitMessage": "\"rename SuspenseList export to unstable_SuspenseList (#27061)\n\n## Summary\r\n\r\nas we began [discussing\r\nyesterday](https://github.com/facebook/react/pull/27056#discussion_r1253282784),\r\n`SuspenseList` is not actually stable yet, and should likely be exported\r\nwith the `unstable_` prefix.\r\n\r\nthe conversation yesterday began discussing this in the context of the\r\nfb-specific packages, but changing it there without updating everywhere\r\nelse leads to test failures, so here the change is made across packages.\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn flow dom-browser\r\nyarn test\r\n```\"",
                "committedDate": "2023-07-06T18:09:53Z"
            },
            {
                "commitId": "80d9a40114bb43c07d021e8254790852f450bd2b",
                "commitMessage": "\"Remove useMutableSource (#27011)\n\n## Summary\r\n\r\nThis PR cleans up `useMutableSource`. This has been blocked by a\r\nremaining dependency internally at Meta, but that has now been deleted.\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn flow\r\nyarn lint\r\nyarn test --prod\r\n```\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\"",
                "committedDate": "2023-06-27T16:45:46Z"
            },
            {
                "commitId": "b7972822b5887d05ae772ef757a453265b4b7aec",
                "commitMessage": "\"useOptimisticState -> useOptimistic (#26772)\n\nDrop the \"state\". Just \"useOptimistic\". Its cleaner.\r\n\r\nThis is still an experimental API. May not be the final name.\"",
                "committedDate": "2023-05-03T18:26:00Z"
            },
            {
                "commitId": "491aec5d6113ce5bae7c10966bc38a4a8fc091a8",
                "commitMessage": "\"Implement experimental_useOptimisticState (#26740)\n\nThis adds an experimental hook tentatively called useOptimisticState.\r\n(The actual name needs some bikeshedding.)\r\n\r\nThe headline feature is that you can use it to implement optimistic\r\nupdates. If you set some optimistic state during a transition/action,\r\nthe state will be automatically reverted once the transition completes.\r\n\r\nAnother feature is that the optimistic updates will be continually\r\nrebased on top of the latest state.\r\n\r\nIts easiest to explain with examples; well publish documentation as\r\nthe API gets closer to stabilizing. See tests for now.\r\n\r\nTechnically the use cases for this hook are broader than just optimistic\r\nupdates; you could use it implement any sort of \"pending\" state, such as\r\nthe ones exposed by useTransition and useFormStatus. But we expect\r\npeople will most often reach for this hook to implement the optimistic\r\nupdate pattern; simpler cases are covered by those other hooks.\"",
                "committedDate": "2023-05-01T17:19:20Z"
            },
            {
                "commitId": "84a0a171ea0ecd25e287bd3d3dd30e932beb4677",
                "commitMessage": "\"Rename experimental useEvent to useEffectEvent (#25881)\n\nWe originally had grand plans for using this Event concept for more but\r\nnow its only meant to be used in combination with effects.\r\n\r\nIts an Event in the FRP terms, that is triggered from an Effect.\r\nTechnically it can also be from another function that itself is\r\ntriggered from an existing side-effect but thats kind of an advanced\r\ncase.\r\n\r\nThe canonical case is an effect that triggers an event:\r\n\r\n```js\r\nconst onHappened = useEffectEvent(() => ...);\r\nuseEffect(() => {\r\n  onHappened();\r\n}, []);\r\n```\"",
                "committedDate": "2022-12-14T20:08:29Z"
            },
            {
                "commitId": "e7c5af45ceb8fa2b64d39ec68345254ce9abd65e",
                "commitMessage": "\"Update cache() and use() to the canary aka next channel (#25502)\n\nTesting what it would look like to move this to the `next` channel.\"",
                "committedDate": "2022-10-24T03:20:52Z"
            },
            {
                "commitId": "caa84c8da0aed390ec25783e577d91711dfd6bcc",
                "commitMessage": "\"Revert fetch instrumentation to only RSC (#25540)\n\nRevert fetch instrumentation so that it only affects RSC by applying it\r\nonly in the react-server condition of \"react\".\r\n\r\nThis helps make the rollout a little smoother because these affects\r\nexisting libraries that fetch during client components, and then gets\r\nforever cached. We need to implement the GC first.\r\n\r\nI havent fully implemented the SSR part anyway.\r\n\r\nThe main problem that we discovered is that `\"react\"` and\r\n`\"react/react.shared-subset\"` have separate dispatchers in an\r\nenvironment that runs both Fizz and Flight. Thats intentional and\r\nsometimes a feature. However, in this case it means that we instrument\r\nfetch twice and when you run Flight inside Fizz, that fetch goes into\r\nboth caches when its supposed to only see the inner one. Im not sure\r\nhow to solve that atm.\"",
                "committedDate": "2022-10-23T02:58:30Z"
            },
            {
                "commitId": "65e32e58b6057db1fdfed95a942fad4fc96da191",
                "commitMessage": "\"Add fetch Instrumentation to Dedupe Fetches (#25516)\n\n* Add fetch instrumentation in cached contexts\r\n\r\n* Avoid unhandled rejection errors for Promises that we intentionally ignore\r\n\r\nIn the final passes, we ignore the newly generated Promises and use\r\nthe previous ones. This ensures that if those generate errors, that we\r\nintentionally ignore those.\r\n\r\n* Add extra fetch properties if there were any\"",
                "committedDate": "2022-10-19T22:37:00Z"
            },
            {
                "commitId": "8e2bde6f2751aa6335f3cef488c05c3ea08e074a",
                "commitMessage": "\"Add cache() API (#25506)\n\nLike memo() but longer lived.\"",
                "committedDate": "2022-10-18T20:55:06Z"
            },
            {
                "commitId": "0a3072278ee5fb46ddb58e6f5ba9e2b78f6f715a",
                "commitMessage": "\"Flow: complete types first migration (#25389)\n\nThis complete the \"types first\" migration and enables the config everywhere.\"",
                "committedDate": "2022-10-04T01:59:33Z"
            },
            {
                "commitId": "c91a1e03be54733a7dbfcb5663d7a9e8606ab1c1",
                "commitMessage": "\"experimental_useEvent (#25229)\n\nThis commit adds a new hook `useEvent` per the RFC [here](https://github.com/reactjs/rfcs/pull/220), gated as experimental. \r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>\r\nCo-authored-by: Lauren Tan <poteto@users.noreply.github.com>\"",
                "committedDate": "2022-09-14T18:39:06Z"
            },
            {
                "commitId": "b6978bc38f6788c7e73982b9fd2771aabdf36f15",
                "commitMessage": "\"experimental_use(promise) (#25084)\n\n* Internal `act`: Unwrapping resolved promises\r\n\r\nThis update our internal implementation of `act` to support Reacts new\r\nbehavior for unwrapping promises. Like we did with Scheduler, when \r\nsomething suspends, it will yield to the main thread so the microtasks\r\ncan run, then continue in a new task.\r\n\r\nI need to implement the same behavior in the public version of `act`,\r\nbut there are some additional considerations so Ill do that in a\r\nseparate commit.\r\n\r\n* Move throwException to after work loop resumes\r\n\r\nthrowException is the function that finds the nearest boundary and\r\nschedules it for a second render pass. We should only call it right \r\nbefore we unwind the stack \u2014 not if we receive an immediate ping and\r\nrender the fiber again.\r\n\r\nThis was an oversight in 8ef3a7c that I didnt notice because it happens\r\nto mostly work, anyway. What made me notice the mistake is that\r\nthrowException also marks the entire render phase as suspended\r\n(RootDidSuspend or RootDidSuspendWithDelay), which is only supposed to\r\nbe happen if we show a fallback. One consequence was that, in the \r\nRootDidSuspendWithDelay case, the entire commit phase was blocked,\r\nbecause thats the exit status we use to block a bad fallback\r\nfrom appearing.\r\n\r\n* Use expando to check whether promise has resolved\r\n\r\nAdd a `status` expando to a thrown thenable to track when its value has\r\nresolved.\r\n\r\nIn a later step, well also use `value` and `reason` expandos to track\r\nthe resolved value.\r\n\r\nThis is not part of the official JavaScript spec \u2014 think of\r\nit as an extension of the Promise API, or a custom interface that is a\r\nsuperset of Thenable. However, its inspired by the terminology used\r\nby `Promise.allSettled`.\r\n\r\nThe intent is that this will be a public API \u2014 Suspense implementations\r\ncan set these expandos to allow React to unwrap the value synchronously\r\nwithout waiting a microtask.\r\n\r\n* Scaffolding for `experimental_use` hook\r\n\r\nSets up a new experimental hook behind a feature flag, but does not\r\nimplement it yet.\r\n\r\n* use(promise)\r\n\r\nAdds experimental support to Fiber for unwrapping the value of a promise\r\ninside a component. It is not yet implemented for Server Components, \r\nbut that is planned.\r\n\r\nIf promise has already resolved, the value can be unwrapped\r\n\"immediately\" without showing a fallback. The trick we use to implement\r\nthis is to yield to the main thread (literally suspending the work\r\nloop), wait for the microtask queue to drain, then check if the promise\r\nresolved in the meantime. If so, we can resume the last attempted fiber\r\nwithout unwinding the stack. This functionality was implemented in \r\nprevious commits.\r\n\r\nAnother feature is that the promises do not need to be cached between\r\nattempts. Because we assume idempotent execution of components, React\r\nwill track the promises that were used during the previous attempt and\r\nreuse the result. You shouldnt rely on this property, but during\r\ninitial render it mostly just works. Updates are trickier, though,\r\nbecause if you used an uncached promise, we have no way of knowing \r\nwhether the underlying data has changed, so we have to unwrap the\r\npromise every time. It will still work, but its inefficient and can\r\nlead to unnecessary fallbacks if it happens during a discrete update.\r\n\r\nWhen we implement this for Server Components, this will be less of an\r\nissue because there are no updates in that environment. However, its\r\nstill better for performance to cache data requests, so the same\r\nprinciples largely apply.\r\n\r\nThe intention is that this will eventually be the only supported way to\r\nsuspend on arbitrary promises. Throwing a promise directly will\r\nbe deprecated.\"",
                "committedDate": "2022-08-25T18:12:07Z"
            },
            {
                "commitId": "9e67e7a31582079263665fac0391220b99d8bb86",
                "commitMessage": "\"Scaffolding for useMemoCache hook (#25123)\n\n* Scaffolding for useMemoCache hook\r\n* cleanup leftovers from copy/paste of use() diff\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "committedDate": "2022-08-23T08:36:02Z"
            },
            {
                "commitId": "d5f1b067c8bbb826b823d0354a28ba31078b70c0",
                "commitMessage": "\"[ServerContext] Flight support for ServerContext (#23244)\n\n* Flight side of server context\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* reinline\r\n\r\n* rebase\r\n\r\n* add back changes lost due to rebase being hard\r\n\r\n* emit chunk for provider\r\n\r\n* remove case for React provider type\r\n\r\n* update type for SomeChunk\r\n\r\n* enable flag with experimental\r\n\r\n* add missing types\r\n\r\n* fix flow type\r\n\r\n* missing type\r\n\r\n* t: any\r\n\r\n* revert extraneous type change\r\n\r\n* better type\r\n\r\n* better type\r\n\r\n* feedback\r\n\r\n* change import to type import\r\n\r\n* test?\r\n\r\n* test?\r\n\r\n* remove react-dom\r\n\r\n* remove react-native-renderer from react-server-native-relay/package.json\r\n\r\n* gate change in FiberNewContext, getComponentNameFromType, use switch statement in FlightServer\r\n\r\n* getComponentNameFromTpe: server context type gated and use displayName if available\r\n\r\n* fallthrough\r\n\r\n* lint....\r\n\r\n* POP\r\n\r\n* lint\"",
                "committedDate": "2022-03-08T12:55:32Z"
            },
            {
                "commitId": "a6987bee730052dccdddd4645e15b1ce458fd9a6",
                "commitMessage": "\"add <TracingMarker> component boilerplate (#23275)\n\n- Add Tracing Marker component type to React exports\r\n- Add reconciler work tag\r\n- Add devtools work tag\r\n- Add boilerplate for the cache to render children\r\n\r\nNo functionality yet\"",
                "committedDate": "2022-02-11T16:42:55Z"
            },
            {
                "commitId": "5cccacd131242bdea2c2fe4b33fac50d2e3132b4",
                "commitMessage": "\"Upgrade useId to alpha channel (#22674)\"",
                "committedDate": "2021-11-01T22:26:42Z"
            },
            {
                "commitId": "75f3ddebfa0d9885ce8df42571cf0c09ad6c0a3b",
                "commitMessage": "\"Remove experimental useOpaqueIdentifier API (#22672)\n\nuseId is the updated version of this API.\"",
                "committedDate": "2021-11-01T22:02:39Z"
            },
            {
                "commitId": "ebf9ae8579230e7b1ed0b1d243e1cf802f56938b",
                "commitMessage": "\"useId (#22644)\n\n* Add useId to dispatcher\r\n\r\n* Initial useId implementation\r\n\r\nIds are base 32 strings whose binary representation corresponds to the\r\nposition of a node in a tree.\r\n\r\nEvery time the tree forks into multiple children, we add additional bits\r\nto the left of the sequence that represent the position of the child\r\nwithin the current level of children.\r\n\r\n    00101       00010001011010101\r\n    \u2570\u2500\u252c\u2500\u256f       \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\r\n  Fork 5 of 20       Parent id\r\n\r\nThe leading 0s are important. In the above example, you only need 3 bits\r\nto represent slot 5. However, you need 5 bits to represent all the forks\r\nat the current level, so we must account for the empty bits at the end.\r\n\r\nFor this same reason, slots are 1-indexed instead of 0-indexed.\r\nOtherwise, the zeroth id at a level would be indistinguishable from\r\nits parent.\r\n\r\nIf a node has only one child, and does not materialize an id (i.e. does\r\nnot contain a useId hook), then we dont need to allocate any space in\r\nthe sequence. Its treated as a transparent indirection. For example,\r\nthese two trees produce the same ids:\r\n\r\n<>                          <>\r\n  <Indirection>               <A />\r\n    <A />                     <B />\r\n  </Indirection>            </>\r\n  <B />\r\n</>\r\n\r\nHowever, we cannot skip any materializes an id. Otherwise, a parent id\r\nthat does not fork would be indistinguishable from its child id. For\r\nexample, this tree does not fork, but the parent and child must have\r\ndifferent ids.\r\n\r\n<Parent>\r\n  <Child />\r\n</Parent>\r\n\r\nTo handle this scenario, every time we materialize an id, we allocate a\r\nnew level with a single slot. You can think of this as a fork with only\r\none prong, or an array of children with length 1.\r\n\r\nIts possible for the the size of the sequence to exceed 32 bits, the\r\nmax size for bitwise operations. When this happens, we make more room by\r\nconverting the right part of the id to a string and storing it in an\r\noverflow variable. We use a base 32 string representation, because 32 is\r\nthe largest power of 2 that is supported by toString(). We want the base\r\nto be large so that the resulting ids are compact, and we want the base\r\nto be a power of 2 because every log2(base) bits corresponds to a single\r\ncharacter, i.e. every log2(32) = 5 bits. That means we can lop bits off\r\nthe end 5 at a time without affecting the final result.\r\n\r\n* Incremental hydration\r\n\r\nStores the tree context on the dehydrated Suspense boundarys state\r\nobject so it resume where it left off.\r\n\r\n* Add useId to react-debug-tools\r\n\r\n* Add selective hydration test\r\n\r\nDemonstrates that selective hydration works and ids are preserved even\r\nafter subsequent client updates.\"",
                "committedDate": "2021-11-01T20:30:44Z"
            },
            {
                "commitId": "fa9bea0c41ccfef5b528ef9b5517607f9f94c52a",
                "commitMessage": "\"Initial implementation of cache cleanup (#22510)\n\nThis is an initial, partial implementation of a cleanup mechanism for the experimental Cache API. The idea is that consumers of the Cache API can register to be informed when a given Cache instance is no longer needed so that they can perform associated cleanup tasks to free resources stored in the cache. A canonical example would be cancelling pending network requests.\r\n\r\nAn overview of the high-level changes:\r\n\r\n* Changes the `Cache` type from a Map of cache instances to be an object with the original Map of instances, a reference count (to count roughly \"active references\" to the cache instances - more below), and an AbortController.\r\n* Adds a new public API, `unstable_getCacheSignal(): AbortSignal`, which is callable during render. It returns an AbortSignal tied to the lifetime of the cache - developers can listen for the abort event on the signal, which React now triggers when a given cache instance is no longer referenced. \r\n  * Note that `AbortSignal` is a web standard that is supported by other platform APIs; for example a signal can be passed to `fetch()` to trigger cancellation of an HTTP request.\r\n* Implements the above - triggering the abort event - by handling passive mount/unmount for HostRoot and CacheComponent fiber nodes.\r\n\r\nCases handled:\r\n* Aborted transitions: we clean up a new cache created for an aborted transition\r\n* Suspense: we retain a fresh cache instance until a suspended tree resolves\r\n\r\nFor follow-ups:\r\n* When a subsequent cache refresh is issued before a previous refresh completes, the refreshes are queued. Fresh cache instances for previous refreshes in the queue should be cleared, retaining only the most recent cache. I plan to address this in a follow-up PR.\r\n* If a refresh is cancelled, the fresh cache should be cleaned up.\"",
                "committedDate": "2021-10-21T21:11:42Z"
            },
            {
                "commitId": "02f411578a8e58af8ec28e385f6b0dcb768cdc41",
                "commitMessage": "\"Upgrade useInsertionEffect to stable (#22589)\n\n@huozhi tried this out and says its working as expected. I think we\r\ncan go ahead and move this into the stable channel, so that it is\r\navailable in the React 18 alpha releases.\"",
                "committedDate": "2021-10-19T21:32:54Z"
            },
            {
                "commitId": "82c8fa90be86fc0afcbff2dc39486579cff1ac9a",
                "commitMessage": "\"Add back useMutableSource temporarily (#22396)\n\nRecoil uses useMutableSource behind a flag. I thought this was fine\r\nbecause Recoil isnt used in any concurrent roots, so the behavior\r\nwould be the same, but it turns out that it is used by concurrent\r\nroots in a few places.\r\n\r\nIm not expecting it to be hard to migrate to useSyncExternalStore, but\r\nto de-risk the change Im going to roll it out gradually with a flag. In\r\nthe meantime, Ive added back the useMutableSource API.\"",
                "committedDate": "2021-09-22T03:38:24Z"
            },
            {
                "commitId": "8209de269531767b33d8db26eda41db38bfb6a27",
                "commitMessage": "\"Delete useMutableSource implementation (#22292)\n\nThis API was replaced by useSyncExternalStore\"",
                "committedDate": "2021-09-20T04:11:50Z"
            },
            {
                "commitId": "263cfa6ecb9879ecb629d4e04a8c26422b4c4ff9",
                "commitMessage": "\"[Experimental] Add useInsertionEffect (#21913)\"",
                "committedDate": "2021-09-14T14:27:09Z"
            },
            {
                "commitId": "77912d9a05d7a90287fabdec76486f25869b2981",
                "commitMessage": "\"Wire up the native API for useSyncExternalStore (#22237)\n\nAdds useSyncExternalStore to the internal dispatcher, and exports\r\nthe native API from the React package without yet implementing it.\"",
                "committedDate": "2021-09-07T17:20:24Z"
            },
            {
                "commitId": "06f7b4f43a93eae9111cfbd972ab1ae1148f6afb",
                "commitMessage": "\"`act` should work without mock Scheduler (#21714)\n\nCurrently, in a React 18 root, `act` only works if you mock the\r\nScheduler package. This was because we didnt want to add additional\r\nchecks at runtime.\r\n\r\nBut now that the `act` testing API is dev-only, we can simplify its\r\nimplementation.\r\n\r\nNow when an update is wrapped with `act`, React will bypass Scheduler\r\nentirely and push its tasks onto a special internal queue. Then, when\r\nthe outermost `act` scope exists, well flush that queue.\r\n\r\nI also removed the \"wrong act\" warning, because the plan is to move\r\n`act` to an isomorphic entry point, simlar to `startTransition`. Thats\r\nnot directly related to this PR, but I didnt want to bother\r\nre-implementing that warning only to immediately remove it.\r\n\r\nIll add the isomorphic API in a follow up.\r\n\r\nNote that the internal version of `act` that we use in our own tests\r\nstill depends on mocking the Scheduler package, because it needs to work\r\nin production. Im planning to move that implementation to a shared\r\n(internal) module, too.\"",
                "committedDate": "2021-06-22T21:25:07Z"
            },
            {
                "commitId": "e16d61c3000e2de6217d06b9afad162e883f73c4",
                "commitMessage": "\"[Offscreen] Mount/unmount layout effects (#21386)\n\n* [Offscreen] Mount/unmount layout effects\r\n\r\nExposes the Offscreen component type and implements basic support for\r\nmount/unmounting layout effects when the visibility is toggled.\r\n\r\nMostly it works the same way as hidden Suspense trees, which use the\r\nsame internal fiber type. I had to add an extra bailout, though, that\r\ndoesnt apply to the Suspense case but does apply to Offscreen\r\ncomponents: a hidden Offscreen tree will eventually render at low\r\npriority, and when we it does, its `subtreeTag` will have effects\r\nscheduled on it. So I added a check to the layout phase where, if the\r\nsubtree is hidden, we skip over the subtree entirely. An alternate\r\ndesign would be to clear the subtree flags in the render phase, but I\r\nprefer doing it this way since its harder to mess up.\r\n\r\nWe also need an API to enable the same thing for passive effects. This\r\nis not yet implemented.\r\n\r\n* Add test starting from hidden\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>\"",
                "committedDate": "2021-06-01T19:46:08Z"
            },
            {
                "commitId": "4ecf11977c46966d3deedcdc71f1280a34607d1d",
                "commitMessage": "\"Remove the Fundamental internals (#20745)\"",
                "committedDate": "2021-02-05T20:36:55Z"
            },
            {
                "commitId": "efc57e5cbbd618f3c98d941c48eec859026c2dcb",
                "commitMessage": "\"Add built-in Suspense cache with support for invalidation (refreshing) (#20456)\"",
                "committedDate": "2020-12-18T18:57:24Z"
            },
            {
                "commitId": "e23673b511a2eab6ddcb848a4150105c954f289a",
                "commitMessage": "\"[Flight] Add getCacheForType() to the dispatcher (#20315)\n\n* Remove react/unstable_cache\r\n\r\nWere probably going to make it available via the dispatcher. Lets remove this for now.\r\n\r\n* Add readContext() to the dispatcher\r\n\r\nOn the server, it will be per-request.\r\n\r\nOn the client, there will be some way to shadow it.\r\n\r\nFor now, I provide it on the server, and throw on the client.\r\n\r\n* Use readContext() from react-fetch\r\n\r\nThis makes it work on the server (but not on the client until we implement it there.)\r\n\r\nUpdated the test to use Server Components. Now it passes.\r\n\r\n* Fixture: Add fetch from a Server Component\r\n\r\n* readCache -> getCacheForType<T>\r\n\r\n* Add React.unstable_getCacheForType\r\n\r\n* Add a feature flag\r\n\r\n* Fix Flow\r\n\r\n* Add react-suspense-test-utils and port tests\r\n\r\n* Remove extra Map lookup\r\n\r\n* Unroll async/await because build system\r\n\r\n* Add some error coverage and retry\r\n\r\n* Add unstable_getCacheForType to Flight entry\"",
                "committedDate": "2020-12-03T03:44:56Z"
            },
            {
                "commitId": "56e9feead0f91075ba0a4f725c9e4e343bca1c67",
                "commitMessage": "\"Remove Blocks (#20138)\n\n* Remove Blocks\r\n\r\n* Remove Flight Server Runtime\r\n\r\nTheres no need for this now that the JSResource is part of the bundler\r\nprotocol. Might need something for Webpack plugin specifically later.\r\n\r\n* Devtools\"",
                "committedDate": "2020-10-31T06:03:45Z"
            },
            {
                "commitId": "1f38dcff67d12828be771403e183652f5e93909a",
                "commitMessage": "\"Remove withSuspenseConfig (#19724)\n\nRemoves `withSuspenseConfig` and migrates relevant tests to\r\n`startTransition` instead.\r\n\r\nWe only had one caller in www, which Ive removed.\"",
                "committedDate": "2020-08-31T16:16:49Z"
            },
            {
                "commitId": "5564f2c95bb61b446f93dc5c519740bdb39e1989",
                "commitMessage": "\"Add React.startTransition (#19696)\n\n* Add React.startTransition\r\n\r\n* Export startTransition from index.js as well\"",
                "committedDate": "2020-08-26T15:34:17Z"
            },
            {
                "commitId": "b61174fb7b09580c1ec2a8f55e73204b706d2935",
                "commitMessage": "\"Remove the deprecated React Flare event system (#19520)\"",
                "committedDate": "2020-08-05T14:13:29Z"
            },
            {
                "commitId": "9102719baacb64738e9235bc80d3d7d9918cc74c",
                "commitMessage": "\"Tidy up React Scope API (#19352)\"",
                "committedDate": "2020-07-16T15:21:21Z"
            },
            {
                "commitId": "8b9c4d1688333865e702fcd65ad2ab7d83b3c33c",
                "commitMessage": "\"Expose LegacyHidden type and disable <div hidden /> API in new fork (#18891)\n\n* Expose LegacyHidden type\r\n\r\nI will use this internally at Facebook to migrate away from\r\n<div hidden />. The end goal is to migrate to the Offscreen type, but\r\nthat has different semantics. This is an incremental step.\r\n\r\n* Disable <div hidden /> API in new fork\r\n\r\nMigrates to the unstable_LegacyHidden type instead. The old fork does\r\nnot support the new component type, so I updated the tests to use an\r\nindirection that picks the correct API. I will remove this once the\r\nLegacyHidden (and/or Offscreen) type has landed in both implementations.\r\n\r\n* Add gated warning for `<div hidden />` API\r\n\r\nOnly exists so we can detect callers in www and migrate them to the new\r\nAPI. Should not visible to anyone outside React Core team.\"",
                "committedDate": "2020-05-12T03:02:08Z"
            },
            {
                "commitId": "22dc2e42bdc00d87fc19c5e75fc7c0b3fdcdc572",
                "commitMessage": "\"Add experimental DebugTracing logger for internal use (#18531)\"",
                "committedDate": "2020-04-16T02:10:15Z"
            },
            {
                "commitId": "3278d242184a13add3f25f683b77ef9a6a2305f3",
                "commitMessage": "\"Add useOpaqueIdentifier Hook (#17322)\n\n* Add useOpaqueIdentifier Hook\r\n\r\nWe currently use unique IDs in a lot of places. Examples are:\r\n  * `<label for=\"ID\">`\r\n  * `aria-labelledby`\r\n\r\nThis can cause some issues:\r\n  1. If we server side render and then hydrate, this could cause an\r\n     hydration ID mismatch\r\n  2. If we server side render one part of the page and client side\r\n     render another part of the page, the ID for one part could be\r\n     different than the ID for another part even though they are\r\n     supposed to be the same\r\n  3. If we conditionally render something with an ID ,  this might also\r\n     cause an ID mismatch because the ID will be different on other\r\n     parts of the page\r\n\r\nThis PR creates a new hook `useUniqueId` that generates a different\r\nunique ID based on whether the hook was called on the server or client.\r\nIf the hook is called during hydration, it generates an opaque object\r\nthat will rerender the hook so that the IDs match.\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
                "committedDate": "2020-04-07T00:17:27Z"
            },
            {
                "commitId": "c5d2fc7127654e43de59fff865b74765a103c4a5",
                "commitMessage": "\"Move some files out of /shared and rename to upper case (#18363)\n\n* Rename lower case isomorphic default exports modules to upper case named exports\r\n\r\nWere somewhat inconsistent here between e.g. ReactLazy and memo.\r\n\r\nLets pick one.\r\n\r\nThis also moves the responder, fundamental, scope creators from shared\r\nsince theyre isomorphic and same as the other creators.\r\n\r\n* Move some files that are specific to the react-reconciler from shared\r\n\r\nIndividual renderers are allowed to deep require into the reconciler.\r\n\r\n* Move files specific to react-dom from shared\r\n\r\nreact-interactions is right now dom specific (it wasnt before) so we can\r\ntype check it together with other dom stuff. Avoids the need for\r\na shared ReactDOMTypes to be checked by RN for example.\r\n\r\n* Move ReactWorkTags to the reconciler\r\n\r\n* Move createPortal to export from reconciler\r\n\r\nOtherwise Noop cant access it since its not allowed deep requires.\"",
                "committedDate": "2020-03-21T22:22:01Z"
            },
            {
                "commitId": "90f8fe6f5509cab7d6d280b4ed17181697f394e9",
                "commitMessage": "\"add jsx-runtime and jsx-dev-runtime (#18299)\n\nThis PR adds the jsx-runtime and jsx-dev-runtime modules for the JSX Babel Plugin. WWW still relies on jsx/jsxs/jsxDEV from the \"react\" module, so once we refactor the code to point to the runtime modules we will remove jsx/jsxs/jsxDEV from the \"react\" module.\"",
                "committedDate": "2020-03-17T20:22:19Z"
            },
            {
                "commitId": "322cdcd3abfaca985a001a12247f02c5d31d311e",
                "commitMessage": "\"useMutableSource hook (#18000)\n\nuseMutableSource hook\r\n\r\nuseMutableSource() enables React components to safely and efficiently read from a mutable external source in Concurrent Mode. The API will detect mutations that occur during a render to avoid tearing and it will automatically schedule updates when the source is mutated.\r\n\r\nRFC: reactjs/rfcs#147\"",
                "committedDate": "2020-03-11T19:34:39Z"
            },
            {
                "commitId": "d2158d6ccbcbd998d1cd1c06ac6c6682cbeafd04",
                "commitMessage": "\"Fix flow types (#18204)\n\n* Added missing @flow pragma to React.js\r\n\r\n* Fixed useContext() return type definition\r\n\r\n* Fixed previously masked Flow errors in DevTools and react-interactions packages\r\n\r\n* Added displayName to internal Context Flow type\r\n\r\n* Removed Flow generic annotations for createResponder\r\n\r\nThis seems to cause a parsing error. (Not sure why.) The API is deprecated anyway so Im being lazy for now and just adding a .\"",
                "committedDate": "2020-03-03T20:46:24Z"
            },
            {
                "commitId": "60016c448bb7d19fc989acd05dda5aca2e124381",
                "commitMessage": "\"Export React as Named Exports instead of CommonJS (#18106)\n\n* Add options for forked entry points\r\n\r\nWe currently fork .fb.js entry points. This adds a few more options.\r\n\r\n.modern.fb.js - experimental FB builds\r\n.classic.fb.js - stable FB builds\r\n.fb.js - if no other FB build, use this for FB builds\r\n.experimental.js - experimental builds\r\n.stable.js - stable builds\r\n.js - used if no other override exists\r\n\r\nThis will be used to have different ES exports for different builds.\r\n\r\n* Switch React to named exports\r\n\r\n* Export named exports from the export point itself\r\n\r\nWe need to re-export the Flow exported types so we can use them in our code.\r\n\r\nWe dont want to use the Flow types from upstream since it doesnt have the non-public APIs that we have.\r\n\r\nThis should be able to use export * but I dont know why it doesnt work.\r\n\r\nThis actually enables Flow typing of React which was just \"any\" before.\r\nThis exposed some Flow errors that needs fixing.\r\n\r\n* Create forks for the react entrypoint\r\n\r\nNone of our builds expose all exports and they all differ in at least one\r\nway, so we need four forks.\r\n\r\n* Set esModule flag to false\r\n\r\nWe dont want to emit the esModule compatibility flag on our CommonJS\r\noutput. For now we treat our named exports as if theyre CommonJS.\r\n\r\nThis is a potentially breaking change for scheduler (but all those apis\r\nare unstable), react-is and use-subscription. However, it seems unlikely\r\nthat anyone would rely on this since these only have named exports.\r\n\r\n* Remove unused Feature Flags\r\n\r\n* Let jest observe the stable fork for stable tests\r\n\r\nThis lets it do the negative test by ensuring that the right tests fail.\r\n\r\nHowever, this in turn will make other tests that are not behind\r\n__EXPERIMENTAL__ fail. So I need to do that next.\r\n\r\n* Put all tests that depend on exports behind __EXPERIMENTAL__\r\n\r\nSince theres no way to override the exports using feature flags\r\nin .intern.js anymore we cant use these APIs in stable.\r\n\r\nThe tradeoff here is that we can either enable the negative tests on\r\n\"stable\" that means experimental are expected to fail, or we can disable\r\ntests on stable. This is unfortunate since some of these APIs now run on\r\na \"stable\" config at FB instead of the experimental.\r\n\r\n* Switch ReactDOM to named exports\r\n\r\nSame strategy as React.\r\n\r\nI moved the ReactDOMFB runtime injection to classic.fb.js\r\n\r\nSince we only fork the entrypoint, the `/testing` entrypoint needs to\r\nbe forked too to re-export the same things plus `act`. This is a bit\r\nunfortunate. If it becomes a pattern we can consider forking in the\r\nmodule resolution deeply.\r\n\r\nfix flow\r\n\r\n* Fix ReactDOM Flow Types\r\n\r\nNow that ReactDOM is Flow type checked we need to fix up its types.\r\n\r\n* Configure jest to use stable entry for ReactDOM in non-experimental\r\n\r\n* Remove additional FeatureFlags that are no longer needed\r\n\r\nThese are only flagging the exports and no implementation details so we\r\ncan control them fully through the export overrides.\"",
                "committedDate": "2020-02-25T21:54:27Z"
            },
            {
                "commitId": "65bbda7f169394005252b46a5992ece5a2ffadad",
                "commitMessage": "\"Rename Chunks API to Blocks (#18086)\n\nSounds like this is the name were going with. This also helps us\r\ndistinguish it from other \"chunking\" implementation details.\"",
                "committedDate": "2020-02-21T07:56:40Z"
            },
            {
                "commitId": "a209a97ed742ced488d7edf4fc2dcbf316ba13cb",
                "commitMessage": "\"Add feature flag around React.createFactory (#17873)\"",
                "committedDate": "2020-01-20T15:00:18Z"
            },
            {
                "commitId": "7dc9745427046d462506e9788878ba389e176b8a",
                "commitMessage": "\"[Flight] Chunks API (#17398)\n\n* Add feature flags\r\n\r\n* Add Chunk type and constructor\r\n\r\n* Wire up Chunk support in the reconciler\r\n\r\n* Update reconciler to reconcile Chunks against the render method\r\n\r\nThis allows the query and args to be updated.\r\n\r\n* Drop the ref. Chunks cannot have refs anyway.\r\n\r\n* Add Chunk checks in more missing cases\r\n\r\n* Rename secondArg\r\n\r\n* Add test and fix lazy chunks\r\n\r\nNot really a supported use case but for consistency I guess.\r\n\r\n* Fix fragment test\"",
                "committedDate": "2019-12-18T18:25:43Z"
            },
            {
                "commitId": "9fe1031244903e442de179821f1d383a9f2a59f2",
                "commitMessage": "\"[react-interactions] Rename Flare APIs to deprecated and remove from RN (#17644)\"",
                "committedDate": "2019-12-18T10:24:46Z"
            },
            {
                "commitId": "c47f59331ee94b1d04f974f075373d368a8c8ab3",
                "commitMessage": "\"Move SuspenseList to experimental package (#17130)\n\nAlso moves `withSuspenseConfig`\"",
                "committedDate": "2019-10-18T21:24:13Z"
            },
            {
                "commitId": "685ed561f22ea062281a4c570c7067e6020457c4",
                "commitMessage": "\"Migrate useDeferredValue and useTransition (#17058)\n\nMigrated useDeferredValue and useTransition from Facebooks www repo into ReactFiberHooks.\"",
                "committedDate": "2019-10-18T19:48:43Z"
            },
            {
                "commitId": "bd79be9b687156067416ffe5219e49a11bd0f1e7",
                "commitMessage": "\"[react-core] Add experimental React Scope component API (#16587)\"",
                "committedDate": "2019-08-29T11:06:51Z"
            },
            {
                "commitId": "42794557ca44a8c05c71aab698d44d1294236538",
                "commitMessage": "\"[Flare] Tweaks to Flare system design and API (#16264)\"",
                "committedDate": "2019-08-01T18:08:54Z"
            },
            {
                "commitId": "509889119360ed83ca6ef3f83bcf01e5aa7dcd81",
                "commitMessage": "\"[Flare] Redesign core event system (#16163)\"",
                "committedDate": "2019-07-23T22:46:44Z"
            },
            {
                "commitId": "2c4d61e1022ae383dd11fe237f6df8451e6f0310",
                "commitMessage": "\"Adds experimental fundamental interface (#16049)\"",
                "committedDate": "2019-07-19T21:20:28Z"
            },
            {
                "commitId": "8d413bf2c3679befe8c6b56733b7c6f6e467ec07",
                "commitMessage": "\"Remove React.error and React.warn (#16126)\n\n* Remove React.error/React.warn with React.getComponentStack\"",
                "committedDate": "2019-07-12T22:41:47Z"
            },
            {
                "commitId": "9b0bd43550206e04bfe9ca695e5981eff0e2d03f",
                "commitMessage": "\"[Flare] Re-label Flare flag (#16014)\"",
                "committedDate": "2019-06-28T00:11:11Z"
            },
            {
                "commitId": "4f92fbce5cc409436ec7625ac08d3a709a4d8f31",
                "commitMessage": "\"[Flare] Move createEvent back to React object (#15943)\"",
                "committedDate": "2019-06-21T09:12:56Z"
            },
            {
                "commitId": "720db4cbe675e80820ec81abab499492309b9252",
                "commitMessage": "\"[Flare] Add useEvent hook implementation (#15927)\n\n* [Flare] Add useEvent hook implementation\r\n\r\nValidate hooks have decendent event components\r\n\r\nFew fixes and displayName changes\r\n\r\nFix more responder bugs\r\n\r\nUpdate error codes\r\n\r\n* Add another test\r\n\r\n* Address feedback\"",
                "committedDate": "2019-06-21T02:12:40Z"
            },
            {
                "commitId": "76864f7ff729f8293e8e772da7ad8416d7def6b3",
                "commitMessage": "\"Add SuspenseList Component (#15902)\n\n* Add SuspenseList component type\r\n\r\n* Push SuspenseContext for SuspenseList\r\n\r\n* Force Suspense boundaries into their fallback state\r\n\r\nIn the \"together\" mode, we do a second render pass that forces the\r\nfallbacks to stay in place, if not all can unsuspend at once.\r\n\r\n* Add test\r\n\r\n* Transfer thennables to the SuspenseList\r\n\r\nThis way, we end up retrying the SuspenseList in case the nested boundary\r\nthat just suspended doesnt actually get mounted with this set of\r\nthennables. This happens when the second pass renders the fallback\r\ndirectly without first attempting to render the content.\r\n\r\n* Add warning for unsupported displayOrder\r\n\r\n* Add tests for nested sibling boundaries and nested lists\r\n\r\n* Fix nested SuspenseList forwarding thennables\r\n\r\n* Rename displayOrder to revealOrder\r\n\r\nDisplay order has some \"display list\" connotations making it sound like\r\na z-index thing.\r\n\r\nReveal indicates that this isnt really about when something gets rendered\r\nor is ready to be rendered. Its about when content that is already there\r\ngets to be revealed.\r\n\r\n* Add test for avoided boundaries\r\n\r\n* Make SuspenseList a noop in legacy mode\r\n\r\n* Use an explicit suspense list state object\r\n\r\nThis will be used for more things in the directional case.\"",
                "committedDate": "2019-06-20T02:34:28Z"
            },
            {
                "commitId": "689beef6f5d0adab166f5eb0aac59eba6100677a",
                "commitMessage": "\"[Flare] Move unstable_createEventComponent to ReactDOM (#15890)\"",
                "committedDate": "2019-06-18T22:41:00Z"
            },
            {
                "commitId": "9c6de716d028f17736d0892d8a3d8f3ac2cb62bd",
                "commitMessage": "\"Add withSuspenseConfig API (#15593)\n\n* Add suspendIfNeeded API and a global scope to track it\r\n\r\nAdds a \"current\" suspense config that gets applied to all updates scheduled\r\nduring the current scope.\r\n\r\nI suspect we might want to add other types of configurations to the \"batch\"\r\nso I called it the \"batch config\".\r\n\r\nThis works across renderers/roots but they wont actually necessarily go\r\ninto the same batch.\r\n\r\n* Add the suspenseConfig to all updates created during this scope\r\n\r\n* Compute expiration time based on the timeout of the suspense config\r\n\r\n* Track if there was a processed suspenseConfig this render pass\r\n\r\nWell use this info to suspend a commit for longer when necessary.\r\n\r\n* Mark suspended states that should be avoided as a separate flag\r\n\r\nThis lets us track which renders we want to suspend for a short time vs\r\na longer time if possible.\r\n\r\n* Suspend until the full expiration time if something asked to suspend\r\n\r\n* Reenable an old test that we can now repro again\r\n\r\n* Suspend the commit even if it is complete if there is a minimum delay\r\n\r\nThis can be used to implement spinners that dont flicker if the data\r\nand rendering is really fast.\r\n\r\n* Default timeoutMs to low pri expiration if not provided\r\n\r\nThis is a required argument in the type signature but people may not\r\nsupply it and this is a user facing object.\r\n\r\n* Rename to withSuspenseConfig and drop the default config\r\n\r\nThis allow opting out of suspending in some nested scope.\r\n\r\nA lot of time when you use this function youll use it with high level\r\nhelpers. Those helpers often want to accept some additional configuration\r\nfor suspense and if it should suspend at all. The easiest way is to just\r\nhave the api accept null or a suspense config and pass it through. However,\r\nthen you have to remember that calling suspendIfNeeded has a default.\r\n\r\nIt gets simpler by just saying tat you can pass the config. You can have\r\nyour own default in user space.\r\n\r\n* Track the largest suspense config expiration separately\r\n\r\nThis ensures that if weve scheduled lower pri work that doesnt have a\r\nsuspenseConfig, we dont consider its expiration as the timeout.\r\n\r\n* Add basic tests for functionality using each update mechanism\r\n\r\n* Fix issue when newly created avoided boundary doesnt suspend with delay\r\n\r\n* Add test for loading indicator with minLoadingDurationMs option\"",
                "committedDate": "2019-05-16T23:51:18Z"
            },
            {
                "commitId": "83fc258f2914c1a7c14c7b98ee362934576f266b",
                "commitMessage": "\"Remove <ConcurrentMode /> (#15532)\n\nUse createSyncRoot instead.\"",
                "committedDate": "2019-05-13T23:10:00Z"
            },
            {
                "commitId": "89d8d1435ffc61fd5201636a84c53806130ef4b8",
                "commitMessage": "\"Add React.unstable_createEventComponent (#15580)\n\nAPI for creating event components from event responders.\"",
                "committedDate": "2019-05-07T19:36:42Z"
            },
            {
                "commitId": "745baf2e061bdb7a07b511fa6fd8c1c5e8106313",
                "commitMessage": "\"Provide new jsx transform target for reactjs/rfcs#107 (#15141)\n\n* adding jsx function\r\n\r\n* add more feature flag defaults\r\n\r\n* flip ReactElement order back\"",
                "committedDate": "2019-04-07T19:02:34Z"
            },
            {
                "commitId": "f161ee2eb7e78d6cb3d3878fe1812ac1057fedc6",
                "commitMessage": "\"React.warn() and React.error() (#15170)\"",
                "committedDate": "2019-03-21T21:44:08Z"
            },
            {
                "commitId": "56035dac645af75c1a8aa8deba2bcf89b14a5aa4",
                "commitMessage": "\"unstable_Profiler -> Profiler (#15172)\"",
                "committedDate": "2019-03-21T16:18:34Z"
            },
            {
                "commitId": "6cb26774e27e03c7d5d6e4601bcee979a004fe91",
                "commitMessage": "\"Enable hooks! (#14679)\n\n* Turned enableHooks feature flag on everywhere\r\n* Removed useHooks feature flag from tests (now that its on by default)\r\n* Remove useHooks feature flag entirely\"",
                "committedDate": "2019-01-23T21:28:09Z"
            },
            {
                "commitId": "edb1f595649b013a59a18f43c03a57035ddea19e",
                "commitMessage": "\"Support configurable labels for custom hooks (#14559)\n\n* react-debug-tools accepts currentDispatcher ref as param\r\n\r\n* ReactDebugHooks injected dispatcher ref is optional\r\n\r\n* Support custom values for custom hooks\r\n\r\n* PR feedback:\r\n\r\n1. Renamed useDebugValueLabel hook to useDebugValue\r\n2. Wrapped useDebugValue internals in if-DEV so that it could be removed from production builds.\r\n\r\n* PR feedback:\r\n\r\n1. Fixed some minor typos\r\n2. Added inline comment explaining the purpose of  rollupDebugValues()\r\n3. Refactored rollupDebugValues() to use a for loop rather than filter()\r\n4. Improve check for useDebugValue hook to lessen the chance of a false positive\r\n5. Added optional formatter function param to useDebugValue\r\n\r\n* Nitpick renamed a method\"",
                "committedDate": "2019-01-14T22:53:22Z"
            },
            {
                "commitId": "b4ad8e947150a1a0b486a388e2d4762d3eee51ee",
                "commitMessage": "\"rename useImperativeMethods -> useImperativeHandle (#14565)\"",
                "committedDate": "2019-01-10T13:37:50Z"
            },
            {
                "commitId": "c2a2d8a539bf02e40c43d36adc2826e228f30955",
                "commitMessage": "\"Remove useMutationEffect (#14336)\n\nuseMutationEffect has problems (namely, refs arent attached at the time that it runs) and were not positive its necessary. useLayoutEffect runs at the same time as componentDidMount/Update so its sufficient for all existing use cases; it can be used in any case that useEffect happens too late. Until we figure out what we want to do, lets delete it.\"",
                "committedDate": "2018-11-27T21:05:13Z"
            },
            {
                "commitId": "7475120ce7bdeb7a5666d64c636efb1f4a951b9a",
                "commitMessage": "\"Prevent deopts from modifying exports object in stable builds (#14309)\"",
                "committedDate": "2018-11-23T14:10:57Z"
            },
            {
                "commitId": "5fc84efacce66272928815e8a6c83a341af9160e",
                "commitMessage": "\"Skip updating effect tag when skipping effect\n\nFor example, if you have `useEffect(..., [])`, theres no need to set .effectTag to `Update | Passive` on updates.\"",
                "committedDate": "2018-10-29T18:26:54Z"
            },
            {
                "commitId": "11d0781eea7dfa65e0ea9e54d18ff937122f9524",
                "commitMessage": "\"Defer useEffect until after paint\n\nEffects scheduled by useEffect should not fire until after the browser\nhas had a chance to paint. However, they should be fired before any\nsubsequent mutations.\n\nAlso adds useMutationEffect and useLayoutEffect. useMutationEffect fires\nduring the host update phase. useLayoutEffect fires during the post-\nupdate phase (the same phase as componentDidMount\nand componentDidUpdate).\"",
                "committedDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "105f2de545dc9e374ed4ac55b3628eeeb555f4a6",
                "commitMessage": "\"Put hooks behind feature flag\"",
                "committedDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "7bee9fbdd49aa5b9365a94b0ddf6db04bc1bf51c",
                "commitMessage": "\"Initial hooks implementation\n\nIncludes:\n- useState\n- useContext\n- useEffect\n- useRef\n- useReducer\n- useCallback\n- useMemo\n- useAPI\"",
                "committedDate": "2018-10-29T18:26:53Z"
            },
            {
                "commitId": "275e76e83bc2be5dc0be9185ff747f383969289a",
                "commitMessage": "\"Enable stable concurrent APIs flag for 16.7 alpha (#13928)\n\n* Add enableStableConcurrentModeAPIs feature flag\r\n\r\n* Conditionally name concurrent API based on enableStableConcurrentModeAPIs flag\"",
                "committedDate": "2018-10-24T20:45:07Z"
            },
            {
                "commitId": "d75c69e0cf2a842adc47edab87ca5103411e6949",
                "commitMessage": "\"Remove unstable_ prefix from Suspense (#13922)\n\nWe are using it with lazy and the combination Suspense + lazy seems pretty\r\nstable. maxDuration is not but thats only enabled when youre in\r\nConcurrentMode which is still unstable.\"",
                "committedDate": "2018-10-23T05:40:05Z"
            },
            {
                "commitId": "769b1f270e1251d9dbdce0fcbd9e92e502d059b8",
                "commitMessage": "\"pure -> memo (#13905)\"",
                "committedDate": "2018-10-20T16:46:23Z"
            },
            {
                "commitId": "8af6728c6f105d37f9c0006288a6d1ac3903dc71",
                "commitMessage": "\"Enable Suspense + rename Placeholder (#13799)\n\n* Enable Suspense\r\n\r\n* <unstable_Placeholder delayMs> => <unstable_Suspense maxDuration>\r\n\r\n* Update suspense fixture\"",
                "committedDate": "2018-10-10T16:02:04Z"
            },
            {
                "commitId": "a0733fe13d598303f45b9d27c84ce0ec40d09021",
                "commitMessage": "\"pure (#13748)\n\n* pure\r\n\r\nA higher-order component version of the `React.PureComponent` class.\r\nDuring an update, the previous props are compared to the new props. If\r\nthey are the same, React will skip rendering the component and\r\nits children.\r\n\r\nUnlike userspace implementations, `pure` will not add an additional\r\nfiber to the tree.\r\n\r\nThe first argument must be a functional component; it does not work\r\nwith classes.\r\n\r\n`pure` uses shallow comparison by default, like `React.PureComponent`.\r\nA custom comparison can be passed as the second argument.\r\n\r\nCo-authored-by: Andrew Clark <acdlite@fb.com>\r\nCo-authored-by: Sophie Alpert <sophiebits@fb.com>\r\n\r\n* Warn if first argument is not a functional component\"",
                "committedDate": "2018-09-27T22:25:38Z"
            },
            {
                "commitId": "0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74",
                "commitMessage": "\"Rename AsyncMode -> ConcurrentMode (#13732)\n\n* Rename AsyncMode -> ConcurrentMode\"",
                "committedDate": "2018-09-26T16:13:02Z"
            },
            {
                "commitId": "fe959eea731b4de0c970f753dfa9d0f6b010b63d",
                "commitMessage": "\"React.lazy (#13398)\n\nLazily starts loading a component the first time its rendered. The\r\nimplementation is fairly simple and could be left to userspace, but since\r\nthis is an important use case, theres value in standardization.\"",
                "committedDate": "2018-08-16T16:43:32Z"
            },
            {
                "commitId": "659a29cecf74301532354261369e9048aac6e20f",
                "commitMessage": "\"Reorganize how shared internals are accessed (#13201)\n\n* Reorganize how shared internals are accessed\r\n\r\n* Update forks.js\"",
                "committedDate": "2018-07-13T01:45:37Z"
            },
            {
                "commitId": "88d7ed8bfbccd860c3e309da39d356d0a3127aa7",
                "commitMessage": "\"React.Timeout -> React.Placeholder (#13105)\n\nChanged the API to match what weve been using in our latest discussions.\r\n\r\nOur tentative plans are for <Placeholder> to automatically hide the timed-out\r\nchildren, instead of removing them, so their state is not lost. This part is\r\nnot yet implemented. Well likely have a lower level API that does not include\r\nthe hiding behavior. This is also not yet implemented.\"",
                "committedDate": "2018-07-04T02:47:00Z"
            },
            {
                "commitId": "d6f304e88952b895a9e1c69483081d2d9ef56979",
                "commitMessage": "\"Remove Timeout export on React object unless enableSuspense flag (#12833)\"",
                "committedDate": "2018-05-16T21:02:34Z"
            },
            {
                "commitId": "6565795377d1d2c79a7708766f1af9e1a87517de",
                "commitMessage": "\"Suspense (#12279)\n\n* Timeout component\r\n\r\nAdds Timeout component. If a promise is thrown from inside a Timeout component,\r\nReact will suspend the in-progress render from committing. When the promise\r\nresolves, React will retry. If the render is suspended for longer than the\r\nmaximum threshold, the Timeout switches to a placeholder state.\r\n\r\nThe timeout threshold is defined as the minimum of:\r\n- The expiration time of the current render\r\n- The `ms` prop given to each Timeout component in the ancestor path of the\r\nthrown promise.\r\n\r\n* Add a test for nested fallbacks\r\n\r\nCo-authored-by: Andrew Clark <acdlite@fb.com>\r\n\r\n* Resume on promise rejection\r\n\r\nReact should resume rendering regardless of whether it resolves\r\nor rejects.\r\n\r\n* Wrap Suspense code in feature flag\r\n\r\n* Children of a Timeout must be strict mode compatible\r\n\r\nAsync is not required for Suspense, but strict mode is.\r\n\r\n* Simplify list of pending work\r\n\r\nSome of this was added with \"soft expiration\" in mind, but now with our revised\r\nmodel for how soft expiration will work, this isnt necessary.\r\n\r\nIt would be nice to remove more of this, but I think the list itself is inherent\r\nbecause we need a way to track the start times, for <Timeout ms={ms} />.\r\n\r\n* Only use the Timeout update queue to store promises, not for state\r\n\r\nIt already worked this way in practice.\r\n\r\n* Wrap more Suspense-only paths in the feature flag\r\n\r\n* Attach promise listener immediately on suspend\r\n\r\nInstead of waiting for commit phase.\r\n\r\n* Infer approximate start time using expiration time\r\n\r\n* Remove list of pending priority levels\r\n\r\nWe can replicate almost all the functionality by tracking just five\r\nseparate levels: the highest/lowest priority pending levels, the\r\nhighest/lowest priority suspended levels, and the lowest pinged level.\r\n\r\nWe lose a bit of granularity, in that if there are multiple levels of\r\npending updates, only the first and last ones are known. But in practice\r\nthis likely isnt a big deal.\r\n\r\nThese heuristics are almost entirely isolated to a single module and\r\ncan be adjusted later, without API changes, if necessary.\r\n\r\nNon-IO-bound work is not affected at all.\r\n\r\n* ReactFiberPendingWork -> ReactFiberPendingPriority\r\n\r\n* Renaming method names from \"pending work\" to \"pending priority\"\r\n\r\n* Get rid of SuspenseThenable module\r\n\r\nIdk why I thought this was neccessary\r\n\r\n* Nits based on Sebastians feedback\r\n\r\n* More naming nits + comments\r\n\r\n* Add test for hiding a suspended tree to unblock\r\n\r\n* Revert change to expiration time rounding\r\n\r\nThis means you have to account for the start time approximation\r\nheuristic when writing Suspense tests, but thats going to be\r\ntrue regardless.\r\n\r\nWhen updating the tests, I also made a fix related to offscreen\r\npriority. We should never timeout inside a hidden tree.\r\n\r\n* palceholder -> placeholder\"",
                "committedDate": "2018-05-11T01:09:10Z"
            },
            {
                "commitId": "fc3777b1fe295fd2661f1974f5587d214791f04b",
                "commitMessage": "\"Add Profiler component for collecting new render timing info (#12745)\n\nAdd a new component type, Profiler, that can be used to collect new render time metrics. Since this is a new, experimental API, it will be exported as React.unstable_Profiler initially.\r\n\r\nMost of the functionality for this component has been added behind a feature flag, enableProfileModeMetrics. When the feature flag is disabled, the component will just render its children with no additional behavior. When the flag is enabled, React will also collect timing information and pass it to the onRender function (as described below).\"",
                "committedDate": "2018-05-10T22:25:32Z"
            },
            {
                "commitId": "bc70441c8b3fa85338283af3eeb47b5d15e9dbfe",
                "commitMessage": "\"RFC #30: React.forwardRef implementation (#12346)\n\nAdded React.forwardRef support to react-reconciler based renders and the SSR partial renderer.\"",
                "committedDate": "2018-03-14T20:07:58Z"
            },
            {
                "commitId": "29e8924c70856bef9b11e0c74a450140bfcce773",
                "commitMessage": "\"Move ReactContext source to React package (#12205)\"",
                "committedDate": "2018-02-10T16:41:33Z"
            },
            {
                "commitId": "8dc8f88d5ae9fb96934ba43e3842b5dcf4074afd",
                "commitMessage": "\"Adds createRef() as per RFC (#12162)\n\n* Adds createRef() as per RFC\"",
                "committedDate": "2018-02-06T20:19:49Z"
            },
            {
                "commitId": "28aa084ad84a681be1c45def2f4b4c0dd8a43871",
                "commitMessage": "\"Switch to JSX API for context (#12123)\n\n* Switch to JSX API for context\r\n\r\n80% sure this will be the final API. Merging this now so we can get this\r\ninto the next www sync in preparation for 16.3.\r\n\r\n* Promote context to a stable API\"",
                "committedDate": "2018-01-30T21:06:12Z"
            },
            {
                "commitId": "9ea55516e674c2de63b9f7829e3c459f3cb3cf78",
                "commitMessage": "\"Replace unstable_AsyncComponent with unstable_AsyncMode (#12117)\n\n* Replace unstable_AsyncComponent with Unstable_AsyncMode\r\n\r\nMirrors the StrictMode API and uses the new Mode type of work.\r\n\r\n* internalContextTag -> mode\r\n\r\nChange this now that we have a better name\r\n\r\n* Unstable_ -> unstable_\"",
                "committedDate": "2018-01-30T03:11:59Z"
            },
            {
                "commitId": "87ae211ccd8d61796cfdef138d1e12fb7a74f85d",
                "commitMessage": "\"New context API (#11818)\n\n* New context API\r\n\r\nIntroduces a declarative context API that propagates updates even when\r\nshouldComponentUpdate returns false.\r\n\r\n* Fuzz tester for context\r\n\r\n* Use ReactElement for provider and consumer children\r\n\r\n* Unify more branches in createFiberFromElement\r\n\r\n* Compare context values using Object.is\r\n\r\nSame semantics as PureComponent/shallowEqual.\r\n\r\n* Add support for Provider and Consumer to server-side renderer\r\n\r\n* Store providers on global stack\r\n\r\nRather than using a linked list stored on the context type. The global\r\nstack can be reset in case of an interruption or error, whereas with the\r\nlinked list implementation, youd need to keep track of every\r\ncontext type.\r\n\r\n* Put new context API behind a feature flag\r\n\r\nWell enable this in www only for now.\r\n\r\n* Store nearest provider on context object\r\n\r\n* Handle reentrancy in server renderer\r\n\r\nContext stack should be per server renderer instance.\r\n\r\n* Bailout of consumer updates using bitmask\r\n\r\nThe context type defines an optional function that compares two context\r\nvalues, returning a bitfield. A consumer may specify the bits it needs\r\nfor rendering. If a providers context changes, and the consumers bits\r\ndo not intersect with the changed bits, we can skip the consumer.\r\n\r\nThis is similar to how selectors are used in Redux but fast enough to do\r\nwhile scanning the tree. The only user code involved is the function\r\nthat computes the changed bits. But thats only called once per provider\r\nupdate, not for every consumer.\r\n\r\n* Store current value and changed bits on context object\r\n\r\nThere are fewer providers than consumers, so better to do this work\r\nat the provider.\r\n\r\n* Use maximum of 31 bits for bitmask\r\n\r\nThis is the largest integer size in V8 on 32-bit systems. Warn in\r\ndevelopment if too large a number is used.\r\n\r\n* ProviderComponent -> ContextProvider, ConsumerComponent -> ContextConsumer\r\n\r\n* Inline Object.is\r\n\r\n* Warn if multiple renderers concurrently render the same context provider\r\n\r\nLets see if we can get away with not supporting this for now. If it\r\nturns out that its needed, we can fall back to backtracking the\r\nfiber return path.\r\n\r\n* Nits that came up during review\"",
                "committedDate": "2018-01-25T03:36:22Z"
            },
            {
                "commitId": "be51e6a41c096f33acf92a693026b80c98e7ddeb",
                "commitMessage": "\"Opt into unsafe lifecycle warnings without async tree (#12083)\n\nAdded new StrictMode component for enabling async warnings (without enabling async rendering). This component can be used in the future to help with other warnings (eg compilation, Fabric).\"",
                "committedDate": "2018-01-25T01:49:43Z"
            },
            {
                "commitId": "3c977dea6b96f6a9bb39f09886848da870748441",
                "commitMessage": "\"react: convert var to let/const (#11715)\"",
                "committedDate": "2017-11-30T12:08:58Z"
            },
            {
                "commitId": "f6894dc48be2e389ffae03cea736122a971e3f76",
                "commitMessage": "\"Set fragment export flags to true (#11672)\"",
                "committedDate": "2017-11-27T21:09:15Z"
            },
            {
                "commitId": "1cb6199d22af6f6ba2f55e4db18ed2f4216aaaf2",
                "commitMessage": "\" Consolidate all symbols in a single file (#11629)\n\n* Consolidate all symbols in a single file\r\n\r\nThis reduces the code duplication as we have quite a few now.\r\n\r\n* Record sizes\"",
                "committedDate": "2017-11-22T18:08:22Z"
            },
            {
                "commitId": "46f7b0d9451c2ac6f5ec5efd2c12ba77a4e054d9",
                "commitMessage": "\"Fix dead code elimination for feature flags (#11453)\n\n* Fix dead code elimination for feature flags\r\n\r\nTurning flags into named exports fixes dead code elimination.\r\n\r\nThis required some restructuring of how we verify that flag types match up. I used the Check<> trick combined with import typeof, as suggested by @calebmer.\r\n\r\nFor www, we can no longer re-export `require(ReactFeatureFlags)` directly, and instead destructure it. This means flags have to be known at init time. This is already the case so its not a problem. In fact it may be better since it removes extra property access in tight paths.\r\n\r\nFor things that we *want* to be dynamic on www (currently, only performance flag) we can export a function to toggle it, and then put it on the secret exports. In fact this is better than just letting everyone mutate the flag at arbitrary times since we can provide, e.g., a ref counting interface to it.\r\n\r\n* Record sizes\"",
                "committedDate": "2017-11-06T14:14:48Z"
            },
            {
                "commitId": "45c1ff348e1c7d03567f5bba6cb32cffa9222972",
                "commitMessage": "\"Remove unnecessary use strict in the source (#11433)\n\n* Remove use strict from ES modules\r\n\r\n* Delete unused file\r\n\r\nThis was unused since Stack.\"",
                "committedDate": "2017-11-02T20:32:48Z"
            },
            {
                "commitId": "21d0c115238b4f38837020cf83e0c657d8c01c9f",
                "commitMessage": "\"Convert the Source to ES Modules (#11389)\n\n* Update transforms to handle ES modules\r\n\r\n* Update Jest to handle ES modules\r\n\r\n* Convert react package to ES modules\r\n\r\n* Convert react-art package to ES Modules\r\n\r\n* Convert react-call-return package to ES Modules\r\n\r\n* Convert react-test-renderer package to ES Modules\r\n\r\n* Convert react-cs-renderer package to ES Modules\r\n\r\n* Convert react-rt-renderer package to ES Modules\r\n\r\n* Convert react-noop-renderer package to ES Modules\r\n\r\n* Convert react-dom/server to ES modules\r\n\r\n* Convert react-dom/{client,events,test-utils} to ES modules\r\n\r\n* Convert react-dom/shared to ES modules\r\n\r\n* Convert react-native-renderer to ES modules\r\n\r\n* Convert react-reconciler to ES modules\r\n\r\n* Convert events to ES modules\r\n\r\n* Convert shared to ES modules\r\n\r\n* Remove CommonJS support from transforms\r\n\r\n* Move ReactDOMFB entry point code into react-dom/src\r\n\r\nThis is clearer because we can use ES imports in it.\r\n\r\n* Fix Rollup shim configuration to work with ESM\r\n\r\n* Fix incorrect comment\r\n\r\n* Exclude external imports without side effects\r\n\r\n* Fix ReactDOM FB build\r\n\r\n* Remove TODOs I don\u2019t intend to fix yet\"",
                "committedDate": "2017-11-02T19:50:03Z"
            },
            {
                "commitId": "0e15ff5669271f5f5956e30a4fe1ae5963778e89",
                "commitMessage": "\"Put React.Fragment under a feature flag (#11421)\n\n* Put React.Fragment under a feature flag\r\n\r\n* Dont export undefined Fragment\"",
                "committedDate": "2017-11-01T00:43:55Z"
            },
            {
                "commitId": "4ce5da7aee90a373f2f36d1beb559097af30952e",
                "commitMessage": "\"Add Fragment as a named export to React (#10783)\n\n* Add Fragment as a named export to React\r\n\r\n* Remove extra tests for Fragment\r\n\r\n* Change React.Fragment export to be a string #fragment\r\n\r\n* Fix fragment special case to work with 1 child\r\n\r\n* Add single child test for fragment export\r\n\r\n* Move fragment definition to ReactEntry.js and render components for key warning tests\r\n\r\n* Inline createFiberFromElementType into createFiberFromElement\r\n\r\n* Update reconciliation to special case fragments\r\n\r\n* Use same semantics as implicit childsets for ReactFragment\r\n\r\n* Add more fragment state preservation tests\r\n\r\n* Export symbol instead of string for fragments\r\n\r\n* Fix rebase breakages\r\n\r\n* Re-apply prettier at 1.2.2\r\n\r\n* Merge branches in updateElement\r\n\r\n* Remove unnecessary check\r\n\r\n* Re-use createFiberFromFragment for fragment case\r\n\r\n* Simplyify branches by adding type field to fragment fiber\r\n\r\n* Move branching logic for fragments to broader methods when possible.\r\n\r\n* Add more tests for fragments\r\n\r\n* Address Dans feedback\r\n\r\n* Move REACT_FRAGMENT_TYPE into __DEV__ block for DCE\r\n\r\n* Change hex representation of REACT_FRAGMENT_TYPE to follow convention\r\n\r\n* Remove unnecessary branching and isArray checks\r\n\r\n* Update test for preserving children state when keys are same\r\n\r\n* Fix updateSlot bug and add more tests\r\n\r\n* Make fragment tests more robust by using ops pattern\r\n\r\n* Update jsx element validator to allow numbers and symbols\r\n\r\n* Remove type field from fragment fiber\r\n\r\n* Fork reconcileChildFibers instead of recursing\r\n\r\n* Use ternary if condition\r\n\r\n* Revamp fragment test suite:\r\n\r\n- Add more coverage to fragment tests\r\n- Use better names\r\n- Remove useless Fragment component inside tests\r\n- Remove useless tests so that tests are more concise\r\n\r\n* Check output of renderer in fragment tests to ensure no silly business despite states being preserved\r\n\r\n* Finish implementation of fragment reconciliation with desired behavior\r\n\r\n* Add reverse render direction for fragment tests\r\n\r\n* Remove unneeded fragment branch in updateElement\r\n\r\n* Add more test cases for ReactFragment\r\n\r\n* Handle childless fragment in reconciler\r\n\r\n* Support fragment flattening in SSR\r\n\r\n* Clean up ReactPartialRenderer\r\n\r\n* Warn when non-key and children props are passed to fragments\r\n\r\n* Add non-null key check back to updateSlots arrays case\r\n\r\n* Add test for positional reconciliation in fragments\r\n\r\n* Add warning for refs in fragments with stack trace\"",
                "committedDate": "2017-10-31T00:52:40Z"
            },
            {
                "commitId": "cc54b6f48a532bf2073e8f7d888c6a3fcf416b63",
                "commitMessage": "\"Add a shim for React 16.0.0 future compatibility (#11388)\"",
                "committedDate": "2017-10-27T16:38:59Z"
            },
            {
                "commitId": "087c48bb36b88ef0b5bbca2b9b70a52d8d413102",
                "commitMessage": "\"Reorder imports (#11359)\n\n* Reorder imports\r\n\r\n* Record sizes\"",
                "committedDate": "2017-10-25T18:07:54Z"
            },
            {
                "commitId": "1eed302d346bfb8f5db8d88b0e7096d8999d3548",
                "commitMessage": "\"Drop Haste (#11303)\n\n* Use relative paths in packages/react\r\n\r\n* Use relative paths in packages/react-art\r\n\r\n* Use relative paths in packages/react-cs\r\n\r\n* Use relative paths in other packages\r\n\r\n* Fix as many issues as I can\r\n\r\nThis uncovered an interesting problem where ./b from package/src/a would resolve to a different instantiation of package/src/b in Jest.\r\n\r\nEither this is a showstopper or we can solve it by completely fobbidding remaining /src/.\r\n\r\n* Fix all tests\r\n\r\nIt seems we cant use relative requires in tests anymore. Otherwise Jest becomes confused between real file and symlink.\r\nhttps://github.com/facebook/jest/issues/3830\r\n\r\nThis seems bad... Except that we already *dont* want people to create tests that import individual source files.\r\nAll existing cases of us doing so are actually TODOs waiting to be fixed.\r\n\r\nSo perhaps this requirement isnt too bad because it makes bad code looks bad.\r\n\r\nOf course, if we go with this, well have to lint against relative requires in tests.\r\nIt also makes moving things more painful.\r\n\r\n* Prettier\r\n\r\n* Remove @providesModule\r\n\r\n* Fix remaining Haste imports I missed earlier\r\n\r\n* Fix up paths to reflect new flat structure\r\n\r\n* Fix Flow\r\n\r\n* Fix CJS and UMD builds\r\n\r\n* Fix FB bundles\r\n\r\n* Fix RN bundles\r\n\r\n* Prettier\r\n\r\n* Fix lint\r\n\r\n* Fix warning printing and error codes\r\n\r\n* Fix buggy return\r\n\r\n* Fix lint and Flow\r\n\r\n* Use Yarn on CI\r\n\r\n* Unbreak Jest\r\n\r\n* Fix lint\r\n\r\n* Fix aliased originals getting included in DEV\r\n\r\nShouldnt affect correctness (they were ignored) but fixes DEV size regression.\r\n\r\n* Record sizes\r\n\r\n* Fix weird version in package.json\r\n\r\n* Tweak bundle labels\r\n\r\n* Get rid of output option by introducing react-dom/server.node\r\n\r\n* Reconciler should depend on prop-types\r\n\r\n* Update sizes last time\"",
                "committedDate": "2017-10-24T23:55:00Z"
            },
            {
                "commitId": "313611572b6567d229367ed20ff63d1bca8610bb",
                "commitMessage": "\"Reorganize code structure (#11288)\n\n* Move files and tests to more meaningful places\r\n\r\n* Fix the build\r\n\r\nNow that we import reconciler via react-reconciler, I needed to make a few tweaks.\r\n\r\n* Update sizes\r\n\r\n* Move @preventMunge directive to FB header\r\n\r\n* Revert unintentional change\r\n\r\n* Fix Flow coverage\r\n\r\nI forgot to @flow-ify those files. This uncovered some issues.\r\n\r\n* Prettier, I love you but youre bringing me down\r\nPrettier, I love you but youre bringing me down\r\n\r\nLike a rat in a cage\r\nPulling minimum wage\r\nPrettier, I love you but youre bringing me down\r\n\r\nPrettier, youre safer and youre wasting my time\r\nOur records all show you were filthy but fine\r\nBut they shuttered your stores\r\nWhen you opened the doors\r\nTo the cops who were bored once theyd run out of crime\r\n\r\nPrettier, youre perfect, oh, please dont change a thing\r\nYour mild billionaire mayors now convinced hes a king\r\nSo the boring collect\r\nI mean all disrespect\r\nIn the neighborhood bars Id once dreamt I would drink\r\n\r\nPrettier, I love you but youre freaking me out\r\nTheres a ton of the twist but were fresh out of shout\r\nLike a death in the hall\r\nThat you hear through your wall\r\nPrettier, I love you but youre freaking me out\r\n\r\nPrettier, I love you but youre bringing me down\r\nPrettier, I love you but youre bringing me down\r\nLike a death of the heart\r\nJesus, where do I start?\r\nBut youre still the one pool where Id happily drown\r\n\r\nAnd oh! Take me off your mailing list\r\nFor kids who think it still exists\r\nYes, for those who think it still exists\r\nMaybe Im wrong and maybe youre right\r\nMaybe Im wrong and maybe youre right\r\nMaybe youre right, maybe Im wrong\r\nAnd just maybe youre right\r\n\r\nAnd oh! Maybe mother told you true\r\nAnd therell always be somebody there for you\r\nAnd youll never be alone\r\nBut maybe shes wrong and maybe Im right\r\nAnd just maybe shes wrong\r\nMaybe shes wrong and maybe Im right\r\nAnd if so, heres this song!\"",
                "committedDate": "2017-10-19T18:50:24Z"
            },
            {
                "commitId": "fedb2ff8ecd96d11ff3f609fbffa76848203f255",
                "commitMessage": "\"Remove createClass, PropTypes, DOM factories, and createMixin from React object (#9788)\"",
                "committedDate": "2017-05-30T14:35:30Z"
            },
            {
                "commitId": "964c263d8fc6e7119f5773f7fa857c9985db40cf",
                "commitMessage": "\"Downgrade deprecation warnings from errors to warnings (#9650)\n\n* Initial regeneration of results.json\r\n\r\n**what is the change?:**\r\nWe ran `yarn build` and updated the perf. stats record.\r\n\r\n**why make this change?:**\r\nSome commits have landed without updating this. By getting an initial update, I can run the build script again after my changes and see any size regressions.\r\n\r\n* Downgrade deprecation warnings from errors to warnings\r\n\r\n**what is the change?:**\r\nSwapping out `warning` module for a fork that uses `console.warn`.\r\nIt looks like we were using the `warning` module for deprecation notices, *but* there is also a deprecated module designed specifically for deprecation notices.\r\n\r\nHowever, we could not find any place that it was currently used.\r\n\r\nSince Reacts build process is not 100% clear to me, I assume it could still be used somewhere by something and just updated it along with other deprecation notices.\r\n\r\nWe might consider a follow-up diff that does some clean up here;\r\n - remove deprecated module if its unused, OR\r\n - use deprecated module for all our current deprecation warnings\r\n\r\n**why make this change?:**\r\n- We have had complaints about noisy warnings, in particular after introducing new deprecations\r\n- They potentially cause CI failures\r\n- Deprecations are not really time-sensitive, can ship without breaking your app, etc.\r\n\r\nFor more context - https://github.com/facebook/react/issues/9395\r\n\r\n**test plan:**\r\n`npm run test`\r\nand unit tests for the new modules\r\nand manual testing (WIP)\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9395\r\n\r\n* Add lowPriorityWarning to ReactExternals\r\n\r\n**what is the change?:**\r\nWe wont bundle lowPriorityWarning with the rest of React when building for Facebook.\r\nNOTE: A parallel commit will introduce an internal implementation of lowPriorityWarning in Facebooks codebase, to compensate. Will post a comment with the diff number once that is up.\r\n\r\n**why make this change?:**\r\nSo that the sync between github and Facebook can go more smoothly!\r\n\r\n**test plan:**\r\nWe will see when I run the sync! But this is a reasonable first step imo.\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9398\r\n\r\n* Make state mutations an error, not low-pri warning\r\n\r\n**what is the change?:**\r\nEven though this is a \"deprecation\" warning, we still want to use console.error for it.\r\n\r\n**why make this change?:**\r\n- Its not likely to come up now, hopefully, because this warning has been present for some time\r\n- This will cause real issues in production if ignored\r\n\r\n**test plan:**\r\n`yarn test` - we did fix one test which failed bc of this change\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/9398\r\n\r\n* Fix test of assigning to this.state that was only passing in fiber\r\n\r\n**what is the change?:**\r\nupdated a unit test for assigning directly to state; it once again raises an error and not a warning.\r\n\r\n**why make this change?:**\r\nSo that tests pass\r\n\r\n**test plan:**\r\n REACT_DOM_JEST_USE_FIBER=1 yarn run test\r\n\r\n**issue:**\r\n\r\n* Update results.json\"",
                "committedDate": "2017-05-23T16:35:42Z"
            },
            {
                "commitId": "e71b3087c81d95c3e7d3f015d0db60436c95fe6c",
                "commitMessage": "\"Added stack renderer to react-test-renderer bundle temporarily (#9514)\n\nAlso fixed an error in a temporary export property that had been added to the React object\"",
                "committedDate": "2017-04-25T01:45:43Z"
            },
            {
                "commitId": "86dd083f455f71369b4c1bf1e798dd2fd5a3c9c4",
                "commitMessage": "\"Move ReactDOMFactories into separate package (#8356)\n\n- Update examples to no longer use React.DOM\r\n- Add package and documentation entries for react-addons-dom-factories\r\n- Update dom-factories readme\r\n- Set up proxy to intercept React.DOM usage\r\n- Update ReactDOM children tests to use createElement\r\n- Add more specific warning assertion for React DOM factories\r\n- Do not use expectDev in ReactDOMFactories tests\"",
                "committedDate": "2017-04-24T15:08:17Z"
            },
            {
                "commitId": "66f2097f33a3084c79aa536e11d3ca09195bc320",
                "commitMessage": "\"Shallow renderer and test utils bundles (#9426)\n\nShallow renderer and test utils bundles\r\n\r\nAdds new bundles introduced with React 15.5 release to master (and 16 alpha)\r\n\r\nreact-dom/test-utils:\r\n\r\nThis new bundle contains what used to be react-addons-test-utils. This bundle shares things from react-dom rather than duplicates them.\r\n\r\nA temporary createRenderer method has been left behind as a way to access the new shallow renderer. This is for the ReactNative release cycle only and should be going away before the final release.\r\n\r\nreact-test-renderer/shallow:\r\n\r\nThis new shallow renderer is almost entirely stand-alone (in that it doesnt use the React reconciler or scheduler). The only touch points are ReactElement and prop/context validation. This renderer is stack and fiber compatible.\"",
                "committedDate": "2017-04-19T23:45:31Z"
            },
            {
                "commitId": "2beec2f308e27dbe902a8d68e1fc9f3d70ee9372",
                "commitMessage": "\"createClass + PropTypes + checkPropTypes warnings (#9399)\n\n(Temporarily) re-adds getters with deprecation warnings for React.PropTypes, React.checkPropTypes, and React.createClass.\r\n\r\n* 08bd020: Replace all references to React.PropTypes with prop-types to avoid triggering our own warning message.\r\n* ef5b5c6: Removed several references to React.createClass that appeared after rebasing this branch. (reviewed by @flarnie)\r\n* 524ce20: Added getters for createClass and PropTypes to the main React isomorphic object, behind one-time warning messages. (reviewed by @spicyj)\r\n* db48f54: Fixed Rollup bundles to inline prop-types and create-react-class for UMD builds only. (reviewed by @spicyj, @trueadm )\r\n* cf49cfd: Updated tests-passing.txt to remove tests that were deleted in this branch.\r\n* d34109a: Responses to PR feedback from @spicyj. (Added package.json dependencies to packages/react and packages/react-dom. Renamed a var. Expanded on an inline comment.)\r\n* 488c8d2: Added warning for moved package to React.checkPropTypes accessor too and updated build script.\r\n* 83bcb29: Wordsmithing for deprecation notices (added fb.me links).\r\n* afdc9d2: Tweaked legacy module inlining to remove order-of-deps constraint\r\n* d1348b9: Removed $FlowFixMe.\r\n* 7dbc3e7: More wordsmithing of deprecation notices based on Dans feedback.\"",
                "committedDate": "2017-04-11T21:28:03Z"
            },
            {
                "commitId": "957fbc92b123030c389bf8b4b874522bdf2db72c",
                "commitMessage": "\"react-create-class -> create-react-class\"",
                "committedDate": "2017-04-11T00:06:32Z"
            },
            {
                "commitId": "646e7863348a427e1ed9163a9a96fa759112f102",
                "commitMessage": "\"Warn once when attempting to access React.createClass\n\nShould still be undefined.\"",
                "committedDate": "2017-04-11T00:03:05Z"
            },
            {
                "commitId": "5cfaa7cf68564b8d96c94fa0d45e7feb6dc80895",
                "commitMessage": "\"Delete createClass\n\nRemove createClass from isomorphic package\"",
                "committedDate": "2017-04-11T00:03:05Z"
            },
            {
                "commitId": "72196da82915bee400edb1599d4223926aa2a8a0",
                "commitMessage": "\"Replace shims with explicit React access from the renderers for shared global state (#9366)\n\n* Remove non-existent /lib/ from souce files\r\n\r\n* Replace all shims with explicit access\r\n\r\nThis deletes shims and changes to access require(react).__DO_NOT_USE__ from renderers for global shared state.\r\n\r\nI cloned flattenChildren() and traverseAllChildren() because they relied on CurrentOwner but were used both from Stack and Isomorphic. The stack implementations will die, and the isomorphic ones can be changed to be optimized for Children specifically in the future.\r\n\r\nI also deleted UMD shims because they are now unnecessary. I moved the internals assignment to main modules since theyre now used in tests, and made them direct UMD entry points.\"",
                "committedDate": "2017-04-07T21:07:10Z"
            },
            {
                "commitId": "b1b4a2fb252f26fe10d29ba60d85ff89a85ff3ec",
                "commitMessage": "\"Merge pull request #9101 from sebmarkbage/prettier\n\nUse Prettier\"",
                "committedDate": "2017-03-14T22:33:27Z"
            },
            {
                "commitId": "1843f8716803d380df34a7362d80022352853931",
                "commitMessage": "\"Run prettier\"",
                "committedDate": "2017-03-14T00:05:18Z"
            },
            {
                "commitId": "8bc11649df767402c262b6c9b67c6dd811d42cd0",
                "commitMessage": "\"Merge branch master into remove-stack-dependencies-from-tests\"",
                "committedDate": "2017-03-01T12:32:36Z"
            },
            {
                "commitId": "e452e3374135c116ef687a8bb3a5d277e3cde8fb",
                "commitMessage": "\"providesModule -> explicit requires for cross-package dependencies (#9078)\n\n* Add forwarding modules\r\n\r\n* Codemod to use full package path outside of own package\r\n\r\nFiles that require modules from a different package than their own now\r\ndoes so by the npm path name instead of the providesModule.\r\n\r\n* Codemod fbjs module dependencies\r\n\r\n* Fix gulp module mapping config\r\n\r\nThis is a bit lame but because of our module rewrite we need to white\r\nlist all the paths that we dont *dont* want to rewrite.\"",
                "committedDate": "2017-03-01T02:42:52Z"
            },
            {
                "commitId": "f3c2d9f308eeee49d9c580c063ec7a109e9ad635",
                "commitMessage": "\"Merge pull request #9004 from acdlite/proptypescheck\n\nAPI for checking external objects against React prop types\"",
                "committedDate": "2017-02-23T22:37:19Z"
            },
            {
                "commitId": "03ed3437c988f294045770bf403839603ce00ae9",
                "commitMessage": "\"Fix build config\n\nReactDebugCurrentFrame is shared state.\n\ncheckPropTypes should be imported via the main React export,\nnot imported directly.\"",
                "committedDate": "2017-02-23T19:14:15Z"
            },
            {
                "commitId": "77c7792556e4697636d1eb5dc34042566185c26c",
                "commitMessage": "\"Remove React.__spread\"",
                "committedDate": "2017-02-10T20:27:02Z"
            },
            {
                "commitId": "7e8068b9840dd98813787736385919683ddf2002",
                "commitMessage": "\"Move component base classes into a single file (#8918)\"",
                "committedDate": "2017-02-02T20:24:39Z"
            },
            {
                "commitId": "2be0583ed37ffc22fefe61292a12daee083e6ed9",
                "commitMessage": "\"Update deprecation wording to be less aggressive\"",
                "committedDate": "2017-01-24T06:18:23Z"
            },
            {
                "commitId": "2b7814f713629d3f629ea9d74f349b77369fdae3",
                "commitMessage": "\"Deprecate React.createMixin\n\nThis API was never fully implemented. Since mixins are no longer considered part of the future React API, it will be removed.\"",
                "committedDate": "2017-01-24T06:18:23Z"
            },
            {
                "commitId": "c8fbdac22717e91d1f1638a932eed3ce4cc39ff7",
                "commitMessage": "\"Add React.PureComponent (#7195)\n\nThis provides an easy way to indicate that components should only rerender when given new props, like PureRenderMixin. If you rely on mutation in your React components, you can continue to use `React.Component`.\r\n\r\nInheriting from `React.PureComponent` indicates to React that your component doesnt need to rerender when the props are unchanged. Well compare the old and new props before each render and short-circuit if theyre unchanged. Its like an automatic shouldComponentUpdate.\"",
                "committedDate": "2016-07-06T20:24:44Z"
            },
            {
                "commitId": "d955ee9fae71e2037e9c876e2ab8cb537a8c7e43",
                "commitMessage": "\"Move ReactElementValidator to __DEV__ block (#6830)\n\nIt saves some more bytes in production mode.\"",
                "committedDate": "2016-05-22T09:01:21Z"
            },
            {
                "commitId": "6c885d28c51ea30af0d8a4031dedcea98ef4114c",
                "commitMessage": "\"Remove duplicates and move files out of native/vendor\n\nMoving the event plugins into their dedicated folder\n\nRemoving the ExecutionEnvironment override. I will just have to fix where needed. Probably related to the Chrome debugger?\"",
                "committedDate": "2016-04-20T02:35:30Z"
            },
            {
                "commitId": "f463b731ee5fce75ccf1df43d6174527016a0379",
                "commitMessage": "\"Copy files from the react-native repo\"",
                "committedDate": "2016-04-20T02:35:30Z"
            },
            {
                "commitId": "516c1d809ea56dbd109f54712efea6923ac76ee6",
                "commitMessage": "\"Merge pull request #6444 from zpao/re__spreadwarn\n\nAdd back React.__spread and make it warn\"",
                "committedDate": "2016-04-08T00:30:44Z"
            },
            {
                "commitId": "fc1cfb6225f5c3af6843515363db63ed3dcbb824",
                "commitMessage": "\"Make React.__spread warn\"",
                "committedDate": "2016-04-08T00:30:23Z"
            },
            {
                "commitId": "f02d87bdb55ebd84943c5da5d6de92e3488fa2bc",
                "commitMessage": "\"Revert \"Merge pull request #6431 from sebmarkbage/killspread\"\n\nThis reverts commit a37e4e94fcae9424094378349dc11bafe1e47973, reversing\nchanges made to 411951d5b8a4a467adc213d4533c87a7c3b06bf8.\"",
                "committedDate": "2016-04-07T23:16:37Z"
            },
            {
                "commitId": "a37e4e94fcae9424094378349dc11bafe1e47973",
                "commitMessage": "\"Merge pull request #6431 from sebmarkbage/killspread\n\nKill React.__spread\"",
                "committedDate": "2016-04-07T01:42:45Z"
            },
            {
                "commitId": "a142fd257803a218b5b9b2e76c327f0421b9b8b6",
                "commitMessage": "\"Kill React.__spread\n\nThis was only for a JSTransform related experiment that is now\ndead along with JSTransform.\"",
                "committedDate": "2016-04-07T00:08:50Z"
            },
            {
                "commitId": "80bff5397bf854750dbe7c286f61654ea58938c5",
                "commitMessage": "\"Merge pull request #6376 from zpao/object.assign\n\nUse object-assign instead of our own dated \"polyfill\"\"",
                "committedDate": "2016-04-04T17:21:39Z"
            },
            {
                "commitId": "1573baaee8ba1c9cd84145b01effcb5eb80503fb",
                "commitMessage": "\"Use Object.assign directly and inject object-assign at compile\"",
                "committedDate": "2016-04-04T16:53:25Z"
            },
            {
                "commitId": "6a8ebfc41842fb200c87a919478dcd3aa95be0d7",
                "commitMessage": "\"Merge pull request #6331 from zpao/isonpmorphic\n\nMake Browserify-specific modules to remove DOM dependencies from npm package\"",
                "committedDate": "2016-03-24T23:01:51Z"
            },
            {
                "commitId": "d17091ddebf317173eb30e3ab4a8e28e124c8f50",
                "commitMessage": "\"Make Browserify-specific modules to remove DOM dependencies from npm package\"",
                "committedDate": "2016-03-24T22:28:52Z"
            },
            {
                "commitId": "209b7522d99a8af36f8d9e06ce622c59b793e5a3",
                "commitMessage": "\"update zh-docs14.3 ,fixed confliction\"",
                "committedDate": "2016-01-14T10:38:07Z"
            },
            {
                "commitId": "fcc63e1fff7709d8cc749a6a54f788b0a5ab0983",
                "commitMessage": "\"Merge pull request #5832 from jimfb/cleanup-top-level-dom-api\n\nRemove DOM functions from top-level isomorphic API\"",
                "committedDate": "2016-01-13T23:41:03Z"
            },
            {
                "commitId": "2e1fb4b52972711199d5065625251642f7d75c29",
                "commitMessage": "\"Remove DOM functions from top-level isomorphic API\"",
                "committedDate": "2016-01-12T07:57:08Z"
            },
            {
                "commitId": "3b96650e39ddda5ba49245713ef16dbc52d25e9e",
                "commitMessage": "\"Merge pull request #5748 from rickbeerendonk/year-agnostic-copyright\n\nYear-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.\"",
                "committedDate": "2015-12-30T07:24:24Z"
            },
            {
                "commitId": "bef45b0b1a98ea9b472ba664d955a039cf2f8068",
                "commitMessage": "\"Year-agnostic copyright message, like React Native uses, to prevent the need for yearly changes.\"",
                "committedDate": "2015-12-29T19:20:32Z"
            },
            {
                "commitId": "c07b304c76ac9cdc4bae875391e7902cf0e8e2f3",
                "commitMessage": "\"Merge pull request #5381 from kevinrobinson/react-dom-server-package\n\nAdd additional secret property to build artifact for react-dom-server\"",
                "committedDate": "2015-11-18T00:48:08Z"
            },
            {
                "commitId": "45c612ed7a56b91f4c1d056c824de54673a2c241",
                "commitMessage": "\"Add additional secret property and build for react-dom-server\n\nUpdate eslintrc, travis build and add task to Gruntfile\"",
                "committedDate": "2015-11-03T21:39:58Z"
            },
            {
                "commitId": "69ab7145bc36a500195ccf0e2937ded21520582f",
                "commitMessage": "\"Merge pull request #4814 from zpao/build-react-dom-browser-2\n\nBuild react dom browser 2\"",
                "committedDate": "2015-09-09T05:33:08Z"
            },
            {
                "commitId": "c0270a167397f7083f77012d43180cc22bbae13e",
                "commitMessage": "\"Merge pull request #4798 from zpao/pull-out-version\n\nMove version to standalone module in preparation for reuse\"",
                "committedDate": "2015-09-08T23:30:05Z"
            },
            {
                "commitId": "b2ca3349c27b57b1e9462944cbe4aaaf76783d2b",
                "commitMessage": "\"Actually build react-dom file with the build\"",
                "committedDate": "2015-09-09T05:18:44Z"
            },
            {
                "commitId": "58d62989bd4e8da32e58db35a96868ef2258c2c9",
                "commitMessage": "\"Move version to standalone module in preparation for reuse\"",
                "committedDate": "2015-09-08T17:18:41Z"
            },
            {
                "commitId": "4b9c349fd057b3c4b1a0fab5fbdf5bd0c625db8d",
                "commitMessage": "\"Merge pull request #4702 from spicyj/react-mod-depr\n\nAdd deprecation warnings to React module\"",
                "committedDate": "2015-09-01T21:40:48Z"
            },
            {
                "commitId": "c04d02e5e8de18436ac95037ab856ac5ba7d29b9",
                "commitMessage": "\"Add warnings to React module\"",
                "committedDate": "2015-09-01T21:36:41Z"
            },
            {
                "commitId": "3f6bca7b1638ee940bb01989377abc9864edb6fe",
                "commitMessage": "\"0.14.0-beta3\"",
                "committedDate": "2015-08-03T21:24:24Z"
            },
            {
                "commitId": "681bbb629fa80a67fa79ced11e5a4cad6c1878fe",
                "commitMessage": "\"0.14.0-beta2\"",
                "committedDate": "2015-07-31T04:29:09Z"
            },
            {
                "commitId": "d16481d0e7d23771c5d94e5a0eeaf64e02f07979",
                "commitMessage": "\"Merge pull request #4453 from spicyj/react-dom\n\nRename ReactDOMClient to ReactDOM\"",
                "committedDate": "2015-07-23T18:27:25Z"
            },
            {
                "commitId": "6c20271488d8abfa82dda14fd8d2a947549c21d7",
                "commitMessage": "\"Rename ReactDOMClient to ReactDOM\n\nThis closer matches the npm package name and (I assume) is what we want to call it internally.\"",
                "committedDate": "2015-07-22T02:30:09Z"
            },
            {
                "commitId": "b4e74e38e43ac53af8acd62c78c9213be0194245",
                "commitMessage": "\"Bump version to beta1\"",
                "committedDate": "2015-07-03T08:46:35Z"
            },
            {
                "commitId": "8471cc5f47bac0dbfd6b3123775fc28757db0ed3",
                "commitMessage": "\"0.14.0-alpha3\"",
                "committedDate": "2015-05-27T23:47:35Z"
            },
            {
                "commitId": "b687a229530dc304fbb74018027156968258c295",
                "commitMessage": "\"0.14.0-alpha2\"",
                "committedDate": "2015-05-20T20:37:42Z"
            },
            {
                "commitId": "52752446760dee0bc7232b4146f5a309ac57f065",
                "commitMessage": "\"Merge pull request #3866 from sebmarkbage/coreapi\n\nReorganize Src Directory for Isomorphic React Package\"",
                "committedDate": "2015-05-16T01:39:36Z"
            },
            {
                "commitId": "0b063f8a09dae4b6b1de400ff2d9aba9108647de",
                "commitMessage": "\"Reorganize Src Files for Isomorphic React Package\n\nThe new folder structure is organized around major packages that are expected to ship separately in some form.\n\n`/isomorphic`\n\nI moved classic/modern and children utils into a directory called \"isomorphic\" with the main export being ReactIsomorphic. This will eventually become the \"react\" package.\n\nThis includes all the dependencies that you might need to create a component without dependencies on the renderer/reconciler.\n\nThe rest moves into decoupled renderers.\n\n`/renderers/dom/client` - This is the main renderer for DOM.\n\n`/renderers/dom/server` - This is the server-side renderer for HTML strings.\n\n`/addons` and `/test` - Same as before for now.\n\nYoure not supposed to take on a dependency inside another package.\n\nShared code is organized into a \"shared\" directory which is intended to support all the packages in that subdirectory. Meaning that once we swap to CommonJS modules, the only time you should use `..` is to target `../shared/` or `../../shared`.\n\nE.g. `/shared/` is common utils that are used by everything.\n\n`/renderers/shared/` is code that is shared by all renderers, such as the main reconciliation algorithm.\n\nShared code will likely be copied into each package rather than referenced. This allow us to have separate state and allow inlining and deadcode elimination.\"",
                "committedDate": "2015-05-16T01:35:22Z"
            },
            {
                "commitId": "7839e072313db4a21c246bb1e35e1f510139bb12",
                "commitMessage": "\"0.14.0-alpha1\"",
                "committedDate": "2015-05-11T05:36:50Z"
            },
            {
                "commitId": "4f285b7ba07b3153a0b9b61c35fc05da37ebdd9e",
                "commitMessage": "\"Merge pull request #3676 from zpao/rm-withContext\n\nRemove withContext from top-level API\"",
                "committedDate": "2015-04-22T16:45:26Z"
            },
            {
                "commitId": "5297ff66cf8f9b6459d6cf73d4e3a54cc010b34d",
                "commitMessage": "\"Remove withContext from top-level API\"",
                "committedDate": "2015-04-16T22:58:27Z"
            },
            {
                "commitId": "088d71c7c1eaef9a14ccccabe05b73a57c755703",
                "commitMessage": "\"Merge pull request #3693 from reedloden/swap-http-to-https\n\nSSL/TLSize all the things! (convert http:// to https:// where appropriate)\"",
                "committedDate": "2015-04-20T18:02:29Z"
            },
            {
                "commitId": "3e8951e8c7dcb44035c8524c0fd82967652d41dd",
                "commitMessage": "\"SSL/TLSize all the things! (convert http:// to https:// where appropriate)\n\nUpdate links to use https:// where it is supported. Theres probably a lot\nmore that could be fixed, but these are the core ones I found (especially\nthe download links in order to prevent MITM attacks). Note that there are\nsome fb.me links that will redirect to http:// even while accessed over\nhttps://, but this seemed like the best way to fix those for now.\n\nNOTE: Only non-third-party files were modified. There are references to\nhttp:// URLs in vendored/third-party files, but seems appropriate to fix\nupstream for those rather than editing the files.\n\nAlso, copy one image locally to the blog, as it was hotlinking to a site\nthat did not support https://.\n\nLast, use youtube-nocookie.com instead of youtube.com for video embeds,\nas the former doesnt try to set a cookie on load (privacy enhancement).\"",
                "committedDate": "2015-04-18T23:49:32Z"
            },
            {
                "commitId": "88fb106c39545fdfea71e56f55418b8058e6b3e6",
                "commitMessage": "\"Merge pull request #3646 from facebook/revert-3580-2402-warn-multiple-copies-of-react-on-same-page\n\nRevert \"Warn when multiple instances of React are loaded on the same page\"\"",
                "committedDate": "2015-04-10T20:54:57Z"
            },
            {
                "commitId": "8fa15080b2eafa0ab998f0e3745971af40e13e69",
                "commitMessage": "\"Revert \"Warn when multiple instances of React are loaded on the same page\"\"",
                "committedDate": "2015-04-10T19:34:04Z"
            },
            {
                "commitId": "f1cd867323c420c577f82628ba498637a3d6e5f7",
                "commitMessage": "\"Merge pull request #3580 from robertknight/2402-warn-multiple-copies-of-react-on-same-page\n\nWarn when multiple instances of React are loaded on the same page\"",
                "committedDate": "2015-04-09T02:18:44Z"
            },
            {
                "commitId": "8ad58ae45a4fd3a5def5732fc377f1351950c4dd",
                "commitMessage": "\"Warn when multiple instances of React are loaded on the same page\n\nThis causes a variety of hard-to-debug issues.\nSee #2402 for examples.\n\nFixes #2402\"",
                "committedDate": "2015-04-03T10:46:58Z"
            },
            {
                "commitId": "7fe5a3aadd308961d5557ba1060eaca14a22f825",
                "commitMessage": "\"Merge pull request #3442 from spicyj/kill-initializeTouchEvents\n\nKill React.initializeTouchEvents for good\"",
                "committedDate": "2015-03-19T21:15:26Z"
            },
            {
                "commitId": "9c4c2f58ea103f84c055d2241c0f178c79d90fd9",
                "commitMessage": "\"Kill React.initializeTouchEvents for good\n\nNow that #1169 is fixed, the only thing this is used for is to determine whether `onTouchTap` causes touch listeners to be added. The only internal uses of TapEventPlugin are where touch events are already initialized (so this doesnt make a difference) and we dont support `onTouchTap` as part of the public API so this should be safe.\"",
                "committedDate": "2015-03-17T21:12:26Z"
            },
            {
                "commitId": "26664315a61af6a39441387be8bd5f45c0dbed2a",
                "commitMessage": "\"Merge pull request #3438 from spicyj/lint\n\nLint fixes\"",
                "committedDate": "2015-03-17T21:14:57Z"
            },
            {
                "commitId": "c34fa7f3d22d04a7089fc8930b06be9e73f4b0d5",
                "commitMessage": "\"Lint fixes\"",
                "committedDate": "2015-03-17T20:30:15Z"
            },
            {
                "commitId": "53f92bf8587b64e0803b66b8bf7f337add2e75a3",
                "commitMessage": "\"Fix comma splice and line length\"",
                "committedDate": "2015-03-10T22:36:27Z"
            },
            {
                "commitId": "645a6caaf5606af9d8479000426e9cb94aeada3b",
                "commitMessage": "\"Merge pull request #3323 from jonhester/ie8-compat-mode\n\nwarn if IE8 is in compatibility mode\"",
                "committedDate": "2015-03-10T22:35:09Z"
            },
            {
                "commitId": "65c4aeaa3a8fb80be4f6f9f3d978601aad678b9f",
                "commitMessage": "\"use warning module instead of console.debug\"",
                "committedDate": "2015-03-05T18:53:12Z"
            },
            {
                "commitId": "e313616be7a6525924e8b822772fa0669e756472",
                "commitMessage": "\"Bump version so we can get back to work\"",
                "committedDate": "2015-03-10T22:06:35Z"
            },
            {
                "commitId": "a999ac1ac30bd7ec9db152027fc480ea34652b5d",
                "commitMessage": "\"warn if IE8 is in compatibility mode\"",
                "committedDate": "2015-03-05T13:48:28Z"
            },
            {
                "commitId": "21b41480a531199ff48034c513288765950409d4",
                "commitMessage": "\"v0.13.0-rc2\"",
                "committedDate": "2015-03-03T19:46:01Z"
            },
            {
                "commitId": "ecc4ad569a5730748f00a5cceb118629fa01235b",
                "commitMessage": "\"Merge pull request #3266 from sebmarkbage/cloneelement\n\nAdd cloneElement Implementation\"",
                "committedDate": "2015-03-02T20:15:20Z"
            },
            {
                "commitId": "4adcee69a04058a4858837752e7e8f011bb652f9",
                "commitMessage": "\"Add cloneElement Implementation\n\nThis is a new version of cloneWithProps but this one is moving out of\nadd-ons. Unlike cloneWithProps, this one doesnt have special logic for\nstyle, className and children.\n\nThis one also preserves the original ref. This is critical when upgrading\nfrom a mutative pattern where a child might have a ref on it.\n\nIt also preserves context, which is similar to how context would work when\nit is parent based. It also ensures that were compatible with the old\nmutative pattern which makes updates easier.\"",
                "committedDate": "2015-02-26T09:17:05Z"
            },
            {
                "commitId": "06126ad3f4d063e89b3168abce79c9cd9961831c",
                "commitMessage": "\"v0.13.0-rc1\"",
                "committedDate": "2015-02-22T21:26:13Z"
            },
            {
                "commitId": "5126cee0f521e2e546e37560df2fe3967039a034",
                "commitMessage": "\"v0.13.0-beta.2\"",
                "committedDate": "2015-02-14T02:28:03Z"
            },
            {
                "commitId": "50c38bbc7598f1537c2928d370de78acce6a81c1",
                "commitMessage": "\"Merge pull request #3023 from sebmarkbage/devtoolsfix\n\nExpose ReactReconciler\"",
                "committedDate": "2015-02-03T06:07:28Z"
            },
            {
                "commitId": "e67ff7ee78620448badba2cf8ac3af6ee2893d6f",
                "commitMessage": "\"Expose ReactReconciler\n\nThis can be used by devtools to monkey patch the reconciler and therefore\nget notified whenever any internal instance is updated.\"",
                "committedDate": "2015-02-03T02:15:31Z"
            },
            {
                "commitId": "2aeb8a2a6beb00617a4217f7f8284924fa2ad819",
                "commitMessage": "\"Merge pull request #2995 from rickbeerendonk/copyright-2015\n\nUpdate copyright headers for 2015\"",
                "committedDate": "2015-02-02T19:15:30Z"
            },
            {
                "commitId": "3e0750a4ad2444c2df708b144ff0c8af7628881d",
                "commitMessage": "\"Update copyright headers for 2015\"",
                "committedDate": "2015-01-31T19:18:25Z"
            },
            {
                "commitId": "5bd078508a1beb500b801eb7de9488927a874376",
                "commitMessage": "\"v0.13.0-beta.1\"",
                "committedDate": "2015-01-28T05:13:35Z"
            },
            {
                "commitId": "61c4497d58690b179588d87defa7d9499e3a58f7",
                "commitMessage": "\"Merge pull request #2959 from sebmarkbage/createmixin\n\nWe dont currently have a way to trace the origin of a mixin\"",
                "committedDate": "2015-01-27T18:39:25Z"
            },
            {
                "commitId": "b3f96d97f954188049854ed4599cbd77158c3ae3",
                "commitMessage": "\"Merge pull request #2957 from sebmarkbage/renamecomponent\n\nRename ReactComponentBase -> ReactComponent\"",
                "committedDate": "2015-01-27T18:39:07Z"
            },
            {
                "commitId": "295ef0063b933e13b2ddd541c108b386b35b648b",
                "commitMessage": "\"We dont currently have a way to trace the origin of a mixin\n\nThis makes it more difficult to find bugs in mixins both dynamically\nand using a static type system.\n\nWe also dont have a way to find these to be upgraded to a new mixin\nsyntax if we needed to.\n\nThis hook is currently an optional noop but could be made required to\ncreate a mixin class.\"",
                "committedDate": "2015-01-27T17:36:14Z"
            },
            {
                "commitId": "c3c98084b94a359adbfcf84b88b3c901aade50b9",
                "commitMessage": "\"Rename ReactComponentBase -> ReactComponent\n\nWe freed up this internal name by removing the internal base class.\nWere now free to use this name as it was intended.\n\nReactDOMComponent and ReactCompositeComponent are still confusing as\ntheyre internal but well rename them later.\"",
                "committedDate": "2015-01-27T17:22:07Z"
            },
            {
                "commitId": "1c90efbf7cc982dcecaa2044f18d27df5ae876a1",
                "commitMessage": "\"Merge pull request #2923 from sebmarkbage/dropcomponentmixin\n\nReplace ReactComponentMixin with ReactReconciler\"",
                "committedDate": "2015-01-24T02:06:50Z"
            },
            {
                "commitId": "690409a91239e04a38f3f819f8c5b13a6c60b114",
                "commitMessage": "\"Replace ReactComponentMixin with ReactReconciler\n\nInstead of putting the shared code in a base class method, we use a wrapper\ncall around all invokations. That way theyre free to add code before AND\nafter the non-shared code.\n\nThat way we ensure that component extensions dont need to implement\nReactComponentMixin and do super() calls into it. This helps to create a\ntighter API for custom component extensions.\n\nThis provides the first step towards moving these methods to static\nmethods which allows to use a different dispatch mechanism instead of\nvirtual method calls. E.g. pattern matching.\"",
                "committedDate": "2015-01-24T01:27:42Z"
            },
            {
                "commitId": "8616a6f60e8eeaba9988a4ade56a59cb3c4ea73d",
                "commitMessage": "\"Merge pull request #2919 from sebmarkbage/removecreateref\n\nRemove React.createRef API\"",
                "committedDate": "2015-01-23T03:13:55Z"
            },
            {
                "commitId": "a3a464c8fcd2fc9d04a5765f41f56315c12de44a",
                "commitMessage": "\"Remove React.createRef API\n\nThis API was removed so this wont work.\"",
                "committedDate": "2015-01-23T03:11:11Z"
            },
            {
                "commitId": "deae575dae1295572b9f8694232eab68c2c6a84e",
                "commitMessage": "\"v0.13.0-alpha.2\"",
                "committedDate": "2015-01-16T18:33:42Z"
            },
            {
                "commitId": "54c82da15f6b4717425edbf68e23ae82583a50af",
                "commitMessage": "\"Merge pull request #2751 from zpao/eslint-fixup\n\nEslint fixup\"",
                "committedDate": "2015-01-13T23:27:54Z"
            },
            {
                "commitId": "df64a67b7f930f90423e194637af624cdc155526",
                "commitMessage": "\"codemod \"use strict\" to use strict for better linting\"",
                "committedDate": "2015-01-13T23:26:32Z"
            },
            {
                "commitId": "d138f9a35ba9b639d9ec0cb59b58146f6e657a68",
                "commitMessage": "\"Merge pull request #2805 from sebmarkbage/baseclass1\n\nIntroducing ReactComponentBase base class\"",
                "committedDate": "2015-01-13T19:00:56Z"
            },
            {
                "commitId": "ff032dc8576fec0bf6dbeeaf5d53325c2010d284",
                "commitMessage": "\"Introducing ReactComponentBase base class\n\nThis is the base class that will be used by ES6 classes.\n\nIm only moving setState and forceUpdate to this base class and the other\nfunctions are disabled for modern classes as were intending to deprecate\nthem. The base classes only have getters that warn if accessed. Its as if\nthey didnt exist.\n\nReactClass now extends ReactComponentBase but also adds the deprecated\nmethods. They are not yet fully deprecated on the ReactClass API.\n\nI added some extra tests to composite component which we werent testing\nto avoid regressions.\n\nI also added some test for ES6 classes. These are not testing the new\nstate initialization process. Thats coming in a follow up.\"",
                "committedDate": "2015-01-13T18:54:19Z"
            },
            {
                "commitId": "3fec78638deb5926b25063dc9f3fe8eef5140751",
                "commitMessage": "\"v0.13.0-alpha.1\n\nBumping version numbers so we can push to npm.\"",
                "committedDate": "2014-12-23T20:04:23Z"
            },
            {
                "commitId": "e0725341cf1046d54c186a66c74ee7f986d4f36a",
                "commitMessage": "\"Merge pull request #2646 from jsfb/getDOMNode-becomes-findDOMNode\n\nAdded findDOMNode, as we move toward deprecating getDOMNode\"",
                "committedDate": "2014-12-22T21:05:49Z"
            },
            {
                "commitId": "b46a6ce4bb8d6087ed424764f41fe4b8e248b3b4",
                "commitMessage": "\"Added findDOMNode, as we move toward deprecating getDOMNode\"",
                "committedDate": "2014-12-18T21:55:44Z"
            },
            {
                "commitId": "42ae61d0653fe2a7709c68c818bb0ef1f46b1552",
                "commitMessage": "\"Merge pull request #2655 from zpao/rm-deprecated\n\nRemove deprecated methods since 0.12 shipped\"",
                "committedDate": "2014-12-14T22:33:16Z"
            },
            {
                "commitId": "c46dadea55728a5c782861c15ed4989221c0674e",
                "commitMessage": "\"Remove deprecated methods since 0.12 shipped\"",
                "committedDate": "2014-12-14T22:19:44Z"
            },
            {
                "commitId": "ba95ce7b6f366c60afdefa7d2cc0f508a443d702",
                "commitMessage": "\"Merge pull request #2677 from zpao/lint-internal\n\nFix new lint errors\"",
                "committedDate": "2014-12-08T20:22:06Z"
            },
            {
                "commitId": "739baa90927d06e7e2267c65b1221931a20784a4",
                "commitMessage": "\"Fix new lint errors\n\nWell get to lint parity soon and then not need to do this.\"",
                "committedDate": "2014-12-08T20:18:41Z"
            },
            {
                "commitId": "230115da9210f389e60f7eb0e402de1a06b5f269",
                "commitMessage": "\"Make ReactTextComponent properly injectable\n\nReactTextComponents implementation is DOM-specific; instead of flattenChildren creating the ReactTextComponent instances, ReactNativeComponent now takes care of having ReactTextComponent injected and creating the component instance. I also renamed ReactTextComponent to ReactDOMTextComponent and moved it to browser/ui/ where it belongs. ReactDOMTextComponent no longer inherits directly from ReactComponent and instead implements construct and {mount,receive,unmount}Component directly.\n\nThis diff removes `ReactTestUtils.isTextComponent` which should have previously never returned true when using public APIs.\n\nTest Plan: jest, use ballmer-peak example.\"",
                "committedDate": "2014-11-15T20:30:42Z"
            },
            {
                "commitId": "9edc6260a7db25f888259fddedb4aa2250f6385f",
                "commitMessage": "\"Initial implementation of new-style refs\n\ncf. #1373\n\nThis implementation can be used in any situation that refs can currently be used (and can also be used without an owner, which is a plus).\"",
                "committedDate": "2014-11-06T03:28:12Z"
            },
            {
                "commitId": "b5bcaba77fbe53cafd7c5f6b76752b09791caadf",
                "commitMessage": "\"Merge branch master into docs-namespace-in-jsx\n\n* master: (113 commits)\n  Remove esprima-fb and use Syntax from jstransform\n  Update React.renderToString argument type in docs\n  [traverseAllChildren] fix out-of-scope var use.\n  Use double quote for transformed `displayName` and `data-*`\n  Remove unrelated comment\n  Fix typo in If/Else JSX doc.\n  Cleanup a couple unused variables\n  Use dump cache and remove factory from ReactElement-test\n  Update deprecated propTypes\n  Bring in jsfiddle integration script, add harmony\n  Extending period in which click events are ignored\n  React.renderComponent --> React.render\n  Followup fix for React.PropTypes.node\n  Add comma for readability in tutorial\n  Drop internal uses of .type on the class\n  Drop Legacy Factories Around Classes\n  Drop ReactDOM from internal DOM extensions\n  Added comma to increase readability.\n  Add 0.12 starter kit\n  Change the date and the link url to match the proper roundup\n  ...\n\nConflicts:\n\tdocs/docs/02.1-jsx-in-depth.md\"",
                "committedDate": "2014-11-05T14:30:37Z"
            },
            {
                "commitId": "a54ed49eb05200dcdc2f27ba9437d17e37571547",
                "commitMessage": "\"Merge pull request #2375 from sebmarkbage/droplegacyfactories\n\nDrop Legacy Factories\"",
                "committedDate": "2014-10-29T01:00:32Z"
            },
            {
                "commitId": "199a7d6903ed2e7c28fb32c6a28ed7f26148e13d",
                "commitMessage": "\"Drop Legacy Factories Around Classes\n\nClasses are now pure classes without a legacy factory around them.\n\nSince classes will become just any function that returns a valid instance,\nlets drop isValidClass.\n\nTheres some hacks in here for auto-mocking frameworks (jest) that mock the\nprototype of these classes. These hacks allow these classes to be mounted.\"",
                "committedDate": "2014-10-28T22:08:52Z"
            },
            {
                "commitId": "b7cd3e7d1de31108594a6698215bfa7bf8619b34",
                "commitMessage": "\"Merge pull request #2396 from sebmarkbage/classmodule\n\nMove Class Creation Concerns into a ReactClass Module\"",
                "committedDate": "2014-10-23T19:50:17Z"
            },
            {
                "commitId": "994fc7d8a727dc7b477322a5c3d4216f1215f639",
                "commitMessage": "\"Merge remote-tracking branch upstream/master into fix-gruntfile\"",
                "committedDate": "2014-10-23T07:55:43Z"
            },
            {
                "commitId": "c7bb936566bce79b35f55b558af5f09b88047a9a",
                "commitMessage": "\"Introduce React Class as an alias for Composite Component\n\nThis is in preparation for the separation of Composite Component internals\nfrom the Class abstraction.\"",
                "committedDate": "2014-10-23T01:35:10Z"
            },
            {
                "commitId": "b78fe39b6073bab20eb7785aa9ef508aabf03c3f",
                "commitMessage": "\"Bump version to 0.13.0-alpha\"",
                "committedDate": "2014-10-22T21:19:54Z"
            },
            {
                "commitId": "2bdad81955e160a5b11110b40c7222a1113cc1fb",
                "commitMessage": "\"Merge pull request #2384 from sebmarkbage/deprecateisvalidclass\n\nDeprecate isValidClass\"",
                "committedDate": "2014-10-21T00:17:56Z"
            },
            {
                "commitId": "ef971014bc22bf4cfecb31ce35de38c231c1c41d",
                "commitMessage": "\"Deprecate isValidClass\n\nFixes #2374\"",
                "committedDate": "2014-10-20T06:55:57Z"
            },
            {
                "commitId": "2b4e35870b7a0c4d681bc3c86641790dd828f0a0",
                "commitMessage": "\"v0.12.0-rc1\"",
                "committedDate": "2014-10-16T21:56:50Z"
            },
            {
                "commitId": "828efb798a94a631007efe966828fbc5b01613ea",
                "commitMessage": "\"Merge pull request #2350 from sebmarkbage/assign\n\nHide Object.assign polyfill behind a module\"",
                "committedDate": "2014-10-16T16:29:01Z"
            },
            {
                "commitId": "8210beeef4219d11b0a997f5a5abe7c348c01448",
                "commitMessage": "\"Hide Object.assign polyfill behind a module\n\nBecause the JS communitys polyfilling infrastructure sucks and well\nhave to fix it for them before we require this.\n\nJSX spread uses React.__spread\n(which might get special behavior for key/ref, not sure yet)\n\nThis never uses the native implementation and throws for prototype chains.\nOnce the native implementations are faster, well start using them.\"",
                "committedDate": "2014-10-16T16:21:10Z"
            },
            {
                "commitId": "5d3b12bb3bd6a092cf00ede07b8255a8399c2e58",
                "commitMessage": "\"Merge pull request #2312 from zpao/license-update\n\nUpdate Licenses\"",
                "committedDate": "2014-10-10T23:58:45Z"
            },
            {
                "commitId": "3991d4de6be63ea0dac5d2b9ccd6a9c4069b439b",
                "commitMessage": "\"Merge pull request #2337 from sebmarkbage/devtoolshook\n\nInject the runtime to a global instead of exposing internals\"",
                "committedDate": "2014-10-13T19:30:15Z"
            },
            {
                "commitId": "ce19af9d304bb0b2c9b3fabf6b999c45be5b7b72",
                "commitMessage": "\"Inject the runtime to a global instead of exposing internals\n\nSee https://github.com/facebook/react-devtools/commit/673de20a4a0654ab849575307b9cf87fde53439e\"",
                "committedDate": "2014-10-13T18:59:23Z"
            },
            {
                "commitId": "dcf415c2b91ce52fd5d4dd02b70875ba9d33290f",
                "commitMessage": "\"BSD + PATENTS\"",
                "committedDate": "2014-10-10T20:34:07Z"
            },
            {
                "commitId": "5d127eaa4935486a9fa15830b9224b806921f56d",
                "commitMessage": "\"Merge pull request #2316 from zpao/devtoolsmarker\n\nLook for devtools global hook\"",
                "committedDate": "2014-10-10T00:00:06Z"
            },
            {
                "commitId": "540731b7a8cbae5835edf69f26361993691d6c00",
                "commitMessage": "\"Merge pull request #2002 from zpao/rename-renderComponent\n\nReact.renderComponent -> React.render\"",
                "committedDate": "2014-10-09T23:41:37Z"
            },
            {
                "commitId": "6ddf8de5aee5ea58a4f1b806c6c768d53cf5e2b4",
                "commitMessage": "\"Look for devtools global hook\n\nIt doesnt exist yet, but it could.\n\nThis also ensures we actually do our polyfill checks in *all* browsers,\nnot just Chrome.\"",
                "committedDate": "2014-10-09T18:24:48Z"
            },
            {
                "commitId": "9b1fa914fafca23b201d5bf4d7ca6ffa1dff6cc4",
                "commitMessage": "\"React.renderComponent -> React.render\n\nAlso rename all the associated render methods and adds deprecation\nnotices.\"",
                "committedDate": "2014-10-09T23:41:03Z"
            },
            {
                "commitId": "f48954d8a39097109d599db365af28df417544cb",
                "commitMessage": "\"Merge pull request #2300 from sebmarkbage/descriptorstoelements\n\nRenamed Descriptor -> Element\"",
                "committedDate": "2014-10-07T20:44:44Z"
            },
            {
                "commitId": "7f9b1d18d197d102777f214e782ecc27685cf481",
                "commitMessage": "\"Start warning when React.DOM.x is passed into JSX\n\nReact.DOM is becoming helper factories to generate ReactElements. Theyre not\nclasses. It will be ok to call them directly as functions, but not to use them\nwhere a class is expected.\"",
                "committedDate": "2014-10-07T17:49:18Z"
            },
            {
                "commitId": "8f1657bba618846b7a111a2caee855bf59145c5a",
                "commitMessage": "\"Renamed Descriptor -> Element\n\nWeve decided on a new naming convention for ReactDescriptor. Its now\ncalled ReactElement, which is a subset of the ReactNode union type.\"",
                "committedDate": "2014-10-07T20:41:51Z"
            },
            {
                "commitId": "c901b1005e7c946584487bb8b0bf7b60a773645b",
                "commitMessage": "\"Make createDescriptor return a descriptor for components\n\nThis moves all logic around legacy descriptors to ReactLegacyDescriptor. This\nis responsible for the layer that knows that createClass exports a legacy\nfactory. When passed one of these classes, it unwraps it to be a real class.\n\nIf it is passed a non legacy factory, it is assumed to be a non-react component\nthat needs to be invoked as a plain function.\n\nThe semantic change is that a descriptor is now always returned if passed a\nlegacy factory. Even if that factory is a mock. A mock would previously return\nundefined.\n\nFor mocks, I treat the factory as the authoritative function. I call it to extract\nthe instance or fill it with an empty component placeholder.\n\nAdditionally, I make the classes take props as the first argument to the\nconstructor. This is what the new class system will do.\n\nWe currently need to set up some internals by calling the internal construct\nmethod. Instead of doing that automatically in the constructor, I now move that\nto a second pass so that mocks can get the plain props.\n\nThis means that we can assert that a mock has been called once its mounted\nwith its final props. Instead of the descriptor factory being called.\"",
                "committedDate": "2014-08-20T07:14:32Z"
            },
            {
                "commitId": "5b4e2be867ebf216e7acd0cfecda026d9dd3499d",
                "commitMessage": "\"Iterate over expectedFeatures correctly\n\nThis fails if Array.prototype is extended.\"",
                "committedDate": "2014-08-19T01:18:05Z"
            },
            {
                "commitId": "eb3ea3f2dfed33751ce95666370b30a7b9d8bc9f",
                "commitMessage": "\"Move batchedUpdated to React.addons\n\nThis is a followup to #1060, where I did not read closely enough before\nmerging.\"",
                "committedDate": "2014-08-13T22:40:40Z"
            },
            {
                "commitId": "938bcbecd5874d6d33f11e52e5c9a71dbcd44c8b",
                "commitMessage": "\"Merge pull request #1060 from spicyj/gh-906\n\nAdd React.batchedUpdates to public API\"",
                "committedDate": "2014-08-13T22:37:43Z"
            },
            {
                "commitId": "7fb7e951082c40b3183cc2a6ab483a8b6b579690",
                "commitMessage": "\"Add React.batchedUpdates to public API\n\nFixes #906.\"",
                "committedDate": "2014-04-16T22:59:54Z"
            },
            {
                "commitId": "036d751397140e1eae01ea6ce6ebe86f0482f485",
                "commitMessage": "\"Add createElement alias for createDescriptor\"",
                "committedDate": "2014-08-06T23:41:47Z"
            },
            {
                "commitId": "2d250d44a5909d9e9d6a0e6fef541cf6fdf6e0ae",
                "commitMessage": "\"Merge pull request #1993 from spicyj/devtools-warning-2\n\nSlightly more considerate devtools warning\"",
                "committedDate": "2014-08-04T21:25:16Z"
            },
            {
                "commitId": "30452914174c7fda400746e8795b73f8ba4269bf",
                "commitMessage": "\"Slightly more considerate devtools warning\n\nSee #953.\"",
                "committedDate": "2014-08-04T18:16:51Z"
            },
            {
                "commitId": "c6b2687bbda0c9d828be51d3d4908adb89d52a09",
                "commitMessage": "\"Partially revert React.createDescriptor\n\nWe still have some issues to work out when the type argument is a mock.\"",
                "committedDate": "2014-07-25T23:48:10Z"
            },
            {
                "commitId": "04e341936cff902f399ca59bd6b855b2d994470e",
                "commitMessage": "\"Include Object.assign polyfill\n\nThis isnt a good final solution but it makes React actually usable on\nits own.\n\nThis also makes tests runnable, though only via jest\n(./node_modules/.bin/jest)\"",
                "committedDate": "2014-07-21T23:18:12Z"
            },
            {
                "commitId": "0f9cec2e78c09e81dc3dac764788589a07903411",
                "commitMessage": "\"0.11.0-rc1\"",
                "committedDate": "2014-07-13T02:50:45Z"
            },
            {
                "commitId": "5aab0bddaa9dd2684049194a2488d57517d89cae",
                "commitMessage": "\"Move key/ref off props and prepare for new descriptor factories\n\nBreaking changes\n\n- key/ref are no longer accessible on props but they are accessible on the\n  descriptors. This means that parents/owners can access it but not the\n  component itself.\n\n- Descriptor factories are now plain functions and you cant rely on the\n  prototype or constructors of descriptors to identify the component type.\n\nExisting descriptor factories are now wrapped in a legacy factory. Currently it\ndoes nothing but it will give us a hook to track callers to factories that are\nnot using JSX but just invoking the function directly. It also proxies static\nmethods/properties to the underlying class. The newer factories dont have this\nfeature.\n\nReactTextComponent has its own little factory because its props is not an\nobject. This is a detail and will go away once ReactTextComponent no longer\nneeds descriptors.\"",
                "committedDate": "2014-07-19T05:01:36Z"
            },
            {
                "commitId": "5bfee601ce6709a56e025e84634fcc5da0b36a44",
                "commitMessage": "\"Bump version for 0.12.0-alpha\n\n[skip ci]\"",
                "committedDate": "2014-07-17T21:22:50Z"
            },
            {
                "commitId": "97dbada03d58bef9bce6941ca49207e28b6b75ac",
                "commitMessage": "\"Up-to-date React.Children\n\nMake sure we actually include `.count`\"",
                "committedDate": "2014-07-14T22:01:44Z"
            },
            {
                "commitId": "2b0e51bdbaa0f0e589c8a24e358a7739e70f38dc",
                "commitMessage": "\"Add String.prototype.trim to polyfill check\n\nAlso shortens the URL so it fits on 1 line\"",
                "committedDate": "2014-07-11T17:36:38Z"
            },
            {
                "commitId": "ef6740627292136973a6b8053cc98dba98ebd18f",
                "commitMessage": "\"Add simple React.createDescriptor hook\n\nThis is the minimal runtime change we need to switch the JSX syntax to resolve\nto React.createDescriptor(...)\"",
                "committedDate": "2014-06-26T22:42:18Z"
            },
            {
                "commitId": "e4f80f301ddc56370c5c7dfb2be483431bfa7d20",
                "commitMessage": "\"Merge pull request #1516 from syranide/es5err\n\nPreemptively error when required ES5 shim/shams are not available\"",
                "committedDate": "2014-05-12T20:40:00Z"
            },
            {
                "commitId": "659b7981e14c7eb36cf2638a95a3a16f080b8cca",
                "commitMessage": "\"Preemptively error when required ES5 shim/shams are not available\"",
                "committedDate": "2014-05-11T19:20:07Z"
            },
            {
                "commitId": "468007612f4a6dabb228618d9a3274f067fc2c51",
                "commitMessage": "\"Merge branch master of github.com:facebook/react\"",
                "committedDate": "2014-03-30T19:53:26Z"
            },
            {
                "commitId": "c40e06f7281622a7a6295f4a7d5540a75fedf7bb",
                "commitMessage": "\"First phase to true descriptors\n\nThis moves all convenience constructors to use frozen ReactDescriptors.\"",
                "committedDate": "2014-03-28T19:32:53Z"
            },
            {
                "commitId": "f0eae5086b0062bdf8f8e466803e061814486634",
                "commitMessage": "\"version bump for 0.11 development\"",
                "committedDate": "2014-03-21T21:58:52Z"
            },
            {
                "commitId": "7f24943e5af5ee4b14ec002d45df315af94adb75",
                "commitMessage": "\"update version for 0.10rc\"",
                "committedDate": "2014-03-19T05:09:32Z"
            },
            {
                "commitId": "a8fc3b940dbe20c0c7decd19b028215b236c50a6",
                "commitMessage": "\"Move UI-thread-only browser modules to browser/ui/\n\nThis also deletes an unused module.\"",
                "committedDate": "2014-03-03T23:07:11Z"
            },
            {
                "commitId": "99dab49f92fe0785c1643ede5b0e7a90cbe1e1e0",
                "commitMessage": "\"Refactor rendering to string without checksum & React ID\n\nFinalize API for rendering to static markup.\nInstead of passing a boolean option to `renderComponentToString`, just use another method.\"",
                "committedDate": "2014-03-03T23:06:27Z"
            },
            {
                "commitId": "95edc396dfd07ed064240b5e2e1a1d5528d2d747",
                "commitMessage": "\"version bump to 0.10.0-alpha\"",
                "committedDate": "2014-02-20T06:53:29Z"
            },
            {
                "commitId": "8a47813baabcb200f5e0a496dd959cb0ef3adcf3",
                "commitMessage": "\"Update copyrights for 2014.\n\ngrep -rl Copyright 2013 Facebook static_upstream | xargs perl -pi -w -e s/Copyright 2013 Facebook/Copyright 2013-2014 Facebook/g;\n\nNot going to check in a script to do this since it will just change every year.\nCloses #1006\"",
                "committedDate": "2014-02-19T01:06:43Z"
            },
            {
                "commitId": "9125f68194cf99e55e027b6cc7ed34325c9855e4",
                "commitMessage": "\"0.9.0-rc1\"",
                "committedDate": "2014-02-17T01:38:52Z"
            },
            {
                "commitId": "b9cd2f0d3d83ee9652b230fecc4bc2dfe8e110f8",
                "commitMessage": "\"Merge branch reorg\"",
                "committedDate": "2014-02-05T03:51:55Z"
            },
            {
                "commitId": "1a39c3143cf5831e4a7f4d2f1a7dc32b33b41299",
                "commitMessage": "\"The great reorg of February 2014\"",
                "committedDate": "2014-02-05T03:49:58Z"
            },
            {
                "commitId": "945f788a4127c3428a5e3cf65fb6d1014c2e98a1",
                "commitMessage": "\"React.Children helpers\n\nAdds React.Children and map(), forEach() and only().\"",
                "committedDate": "2014-02-04T22:37:44Z"
            },
            {
                "commitId": "2c335b0e570e360d52359e7f774e5311f74d863b",
                "commitMessage": "\"Quieter devtools upsell\n\nCheck that were not in a iframe before upselling.\"",
                "committedDate": "2014-01-11T05:11:33Z"
            },
            {
                "commitId": "d8a8f6a88109e1ccdee02236909cbab101222185",
                "commitMessage": "\"Upsell dev tools\n\nPeople probably dont know these exist. Add some information about React\ndev mode as well as a link to the developer tools when using Chrome.\"",
                "committedDate": "2014-01-11T05:10:54Z"
            },
            {
                "commitId": "80d7d2d0f8ec0f4f1f3c2dbe613f36bda572ce11",
                "commitMessage": "\"Listen to events on demand\n\nFixes #381\n\nThis is a squashed version of https://github.com/facebook/react/pull/462\"",
                "committedDate": "2014-01-04T07:09:59Z"
            },
            {
                "commitId": "3431e3f847b148bd1aa527f375337c86b1029c58",
                "commitMessage": "\"Add `createMarkupForID`\n\nThis is a follow-up the to previous commit and does two things:\n\n - Moves `ReactMount.ATTR_NAME` to `DOMProperty.ID_ATTRIBUTE_NAME`.\n - Adds `DOMPropertyOperations.createMarkupForID` and uses it.\"",
                "committedDate": "2013-12-21T02:12:48Z"
            },
            {
                "commitId": "153b75f186a78c876cc11678d1abbdf5e13a3b5b",
                "commitMessage": "\"Bump version to 0.9.0-alpha\n\nThis is trunk, which will be 0.9. Well have to cherry-pick this whole\nthing into a 0.8 branch.\"",
                "committedDate": "2013-12-06T23:11:25Z"
            },
            {
                "commitId": "ef339c9cc44522ae39cb04bf9a102ac9261ecb45",
                "commitMessage": "\"Version bump, make tests work\"",
                "committedDate": "2013-12-06T19:56:30Z"
            },
            {
                "commitId": "1b8bdbe177f2f03c66e9288149316695fc004b41",
                "commitMessage": "\"Remove deprecated React.unmountAndReleaseReactRootNode\"",
                "committedDate": "2013-12-05T04:27:15Z"
            },
            {
                "commitId": "b91396be8eac3dc57ab1dbd2d3bb27c791d88169",
                "commitMessage": "\"Contexts\n\nSummary:\nadds `this.context` which you can think of as implicit props, which are passed automatically down the //ownership// hierarchy.\n\nContexts should be used sparingly, since they essentially allow components to communicate with descendants (in the ownership sense, not parenthood sense), which is not usually a good idea. You probably would only use contexts in places where youd normally use a global, but contexts allow you to override them for certain view subtrees which you cant do with globals.\n\nThe context starts out `null`:\n\n  var RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n    }\n  });\n\nYou should **never** mutate the context directly, just like props and state.\n\nYou can change the context of your children (the ones you own, not `this.props.children` or via other props) using the new `withContext` method on `React`:\n\n  var RootComponent = React.createClass({\n    render: function() {\n      // this.context === null\n      var children = React.withContext({foo: a, bar: b}, () => (\n        // In ChildComponent#render, this.context === {foo: a, bar: b}\n        <ChildComponent />\n      ));\n      // this.context === null\n    }\n  });\n\nContexts are merged, so a component can override its owners context **for its children**:\n\n  var ChildComponent = React.createClass({\n    render: function() {\n      // this.context === {foo: a, bar: b} (for the caller above)\n      var children = React.withContext({foo: c},() => (\n        // In GrandchildComponent#render,\n        // this.context === {foo: c, bar: b}\n        <GrandchildComponent />\n      ));\n      // this.context === {foo: a, bar: b}\n    }\n  });\"",
                "committedDate": "2013-11-18T18:56:24Z"
            },
            {
                "commitId": "48281a17e4f460020fa7b9c6dc8169a1b867327c",
                "commitMessage": "\"bump version to 0.6.0-alpha\"",
                "committedDate": "2013-10-16T05:39:28Z"
            },
            {
                "commitId": "fdb10c067999c81516cf6ac65262adb5ab59d3cf",
                "commitMessage": "\"React.__internals\n\nWe need access to internal modules in order to provide a single way for some\nprojects to work internally with @providesModule and externally.\"",
                "committedDate": "2013-10-07T22:07:20Z"
            },
            {
                "commitId": "832d9de0374496a3a99a0df7cf100305f1a24158",
                "commitMessage": "\"Rename unmountAndReleaseReactRootNode() -> unmountComponentAtNode()\n\nThis is just a better name; we may revisit the name later.\"",
                "committedDate": "2013-09-19T21:46:49Z"
            },
            {
                "commitId": "5ab68d9a0ddbb6c6c96895b75207d6ad57dc55b4",
                "commitMessage": "\"Hard code version instead of doing constant replacement\n\nThis isnt really ideal, but it makes it so that people managing to\nbuild with @providesModule still get a consistent experience (since this\nis what gets packed client-side with react-page-middleware anyway).\"",
                "committedDate": "2013-09-11T16:51:43Z"
            },
            {
                "commitId": "d853bbcf77a0c81734300dafb77f2afeb25f0ed5",
                "commitMessage": "\"Merge pull request #205 from spicyj/version\n\nAdd React.version\"",
                "committedDate": "2013-09-11T01:35:12Z"
            },
            {
                "commitId": "5fd4467bf76b89b76df8bf909922f92e4fd07f7c",
                "commitMessage": "\"Add React.version\n\ngetConfig needs to be a function because grunt.config.data.pkg.version isnt available at the time that grunt/config/jsx/jsx.js is required.\n\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.\"",
                "committedDate": "2013-09-10T00:01:06Z"
            },
            {
                "commitId": "3cf14e8f9b14ac05bcd24634daa26ac6772bd31b",
                "commitMessage": "\"Remove ReactChildren methods from React object\n\nThese are not terribly useful on this object and the naming of\n`React.forEachChildren` sucked anyway.\"",
                "committedDate": "2013-09-06T01:35:59Z"
            },
            {
                "commitId": "a42fd30fc2795909324c497350d0877a969b0cc7",
                "commitMessage": "\"Remove React.autoBind for real\n\nThis has been deprecated for a long while now, we should actually remove it.\"",
                "committedDate": "2013-09-03T21:27:00Z"
            },
            {
                "commitId": "4d8f0449d9d08528cc1aaba0aa09d1d90e12d3dd",
                "commitMessage": "\"React.isValidClass\n\nSometimes you may need to detect if a value is a valid React class constructor. This enables that and prevents future consumers from getting caught in the trap of depending on an internal implementation detail we might change.\n\nCurrently this works for classes created with `React.createClass` as well as `React.DOM.*`.\"",
                "committedDate": "2013-08-30T20:20:51Z"
            },
            {
                "commitId": "fce57abeca1d8388baaaac8511540aed486177dc",
                "commitMessage": "\"Benchmarking tool for React application performance\n\nReactAppPerf wraps core methods and logs info from them; theres no real\nUI at this point\"",
                "committedDate": "2013-08-23T21:05:11Z"
            },
            {
                "commitId": "9ef4e74ba2b3a494757b39b41b1ef99280bc5f83",
                "commitMessage": "\"ReactChildren\n\nInstead of changing `traverseAllChildren`, keep that around for perf\nreasons (for the hot code path `flattenChildren`)\n\nIntroduce `ReactChildren.map` and `ReactChildren.forEach`\nwhich mirrors `Array.prototype.map` and `Array.prototype.forEach`. This\ninvolves a rename of `mapAllChildren`\"",
                "committedDate": "2013-08-06T21:17:33Z"
            },
            {
                "commitId": "c629a0c5ad1adc82e01a982e7116eae632fa8d65",
                "commitMessage": "\"Revert \"Merge pull request #200 from spicyj/version\"\n\nThis reverts commit d8893228275cacc65a8632c7416bb023ab4c946f, reversing\nchanges made to 156dffb961ab15f577e0a6aab1abc5efd68f9a9b.\"",
                "committedDate": "2013-07-17T15:26:59Z"
            },
            {
                "commitId": "d8893228275cacc65a8632c7416bb023ab4c946f",
                "commitMessage": "\"Merge pull request #200 from spicyj/version\n\nAdd React.version\"",
                "committedDate": "2013-07-17T13:13:49Z"
            },
            {
                "commitId": "7be14d81552e8097eee6ed21a048fa23d4fce596",
                "commitMessage": "\"Add React.version\n\ngetConfig needs to be a function because grunt.config.data.pkg.version isnt available at the time that grunt/config/jsx/jsx.js is required.\n\nTest Plan:\ngrunt build, grunt lint, grunt test all work. After building, both react.js and react.min.js contain the version number.\"",
                "committedDate": "2013-07-17T03:38:40Z"
            },
            {
                "commitId": "d76262731237365198ddd84216d108da96820055",
                "commitMessage": "\"Rename `props` to `propTypes`\n\nThis does two things:\n\n - Rename `props` to `propTypes`.\n - Rename `ReactProps` to `ReactPropTypes` (and `React.Props` to `React.PropTypes`)\"",
                "committedDate": "2013-07-10T22:06:18Z"
            },
            {
                "commitId": "0e9ee239a9c7b085771429ba990ae63aacde64ca",
                "commitMessage": "\"Merge branch master into async-state\"",
                "committedDate": "2013-07-01T23:08:57Z"
            },
            {
                "commitId": "ee21a604f31020fbaa898a4d0d61dc487198ce82",
                "commitMessage": "\"Delete files that accidentally got merged in\n\n\u0ca0_\u0ca0\"",
                "committedDate": "2013-06-28T21:54:07Z"
            },
            {
                "commitId": "43358157cff16e8945da9b816fcb858a59da81af",
                "commitMessage": "\"Merge branch textarea-update-value of git://github.com/spicyj/react\n\nConflicts:\n\tsrc/core/ReactDefaultInjection.js\"",
                "committedDate": "2013-06-28T21:30:47Z"
            },
            {
                "commitId": "44d6b947520aa3c3b252cbba1c95aa25811665d7",
                "commitMessage": "\"Merge remote-tracking branch origin/master into textarea-update-value\"",
                "committedDate": "2013-06-19T06:31:08Z"
            },
            {
                "commitId": "c1576fcf9744882fa59c2876fb4fd44720140307",
                "commitMessage": "\"Remove trailing whitespace\"",
                "committedDate": "2013-06-17T19:48:43Z"
            },
            {
                "commitId": "80edd6ca8729512c384faa593fef6d62b6b8c087",
                "commitMessage": "\"Merge pull request #89 from vjeux/patch-4\n\nExposing ReactProps as React.Props\"",
                "committedDate": "2013-06-14T04:08:10Z"
            },
            {
                "commitId": "34173638d40dff2cd2dbac66f04623b3b1f0516f",
                "commitMessage": "\"Exposing ReactProps as React.Props\n\nRight now, even though ReactProps is committed, there is no way to use it as it is not exposed.\"",
                "committedDate": "2013-06-13T00:28:25Z"
            },
            {
                "commitId": "37cde3d864406f2af65dc03eae45a216ea969600",
                "commitMessage": "\"Stabilize minimal server rendering API\n\nThis is a pretty killer feature and the API is simple. I know its another API method on React, but I think its\nthe only way.\"",
                "committedDate": "2013-06-10T23:17:26Z"
            },
            {
                "commitId": "582359aeea9b7c437cfc12b8e4f3366aaacf11a1",
                "commitMessage": "\"Remove React.createComponentRenderer\n\nRemove ReactMount.createComponentRenderer because it does not function\ncorrectly.\n\n  var f = React.createComponentRenderer(<div />);\n\n  var container1 = document.createElement(div);\n  var container2 = document.createElement(div);\n  f(container1);\n  f(container2); // error because mounting same instance into new root\"",
                "committedDate": "2013-06-08T05:10:06Z"
            },
            {
                "commitId": "75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4",
                "commitMessage": "\"Initial public release\"",
                "committedDate": "2013-05-29T19:54:02Z"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "Determine the developers that had the most unfixed bugs?",
        "number": 7,
        "category": 2,
        "response": "The developer with the most unfixed bugs is 'bvaughn', with a total of 1 unfixed bug.",
        "chain_of_thought": "To determine the developers that had the most unfixed bugs, we need to interpret the question in the context of the provided schema. An unfixed bug can be interpreted as an issue that has been introduced by a commit but not yet fixed by another commit. Therefore, we need to find users who have authored commits that introduced issues which are still open.\n\nHere's how we can construct the query:\n\n1. Identify the relevant nodes and relationships:\n   - We need the `User` node to identify developers.\n   - The `Commit` node is needed to find commits authored by users.\n   - The `Issue` node is needed to find issues introduced by commits.\n   - The relevant relationships are `author` (between `User` and `Commit`) and `introduced` (between `Commit` and `Issue`).\n\n2. Filter for issues that are still open:\n   - We need to check the `state` property of the `Issue` node to ensure it is not \"closed\".\n\n3. Aggregate the number of unfixed issues introduced by each developer.\n\nThe query to find the developers with the most unfixed bugs is:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state <> 'closed'\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n```\n\nThis query matches users who have authored commits that introduced issues, filters for issues that are still open, and then counts the number of such issues for each developer. The results are ordered by the number of unfixed bugs in descending order to find the developers with the most unfixed bugs.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:introduced]->(i:Issue)\nWHERE i.state <> 'closed'\nRETURN u.login AS developer, COUNT(i) AS unfixed_bugs\nORDER BY unfixed_bugs DESC\n",
        "result": [
            {
                "developer": "bvaughn",
                "unfixed_bugs": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 4,
        "label": "partial"
    },
    {
        "question": "which developer has most number of bugs yet to be fixed?",
        "number": 8,
        "category": 2,
        "response": "The developer with the most number of bugs yet to be fixed is 'bvaughn', with 19 open issues.",
        "chain_of_thought": "To determine which developer has the most number of bugs yet to be fixed, we need to consider the following:\n\n1. **Identify the relevant nodes and relationships**:\n   - We have `User` nodes representing developers.\n   - `Issue` nodes represent bugs, and they have a `state` property that can indicate whether a bug is open or closed.\n   - The `creates` relationship connects a `User` to an `Issue`, indicating the user who created the issue.\n   - The `assigned` relationship connects a `User` to an `Issue`, indicating the user assigned to solve the issue.\n\n2. **Determine the most appropriate interpretation**:\n   - The question could be interpreted as finding the developer who has created the most open issues or the developer who is assigned to the most open issues.\n   - The more relevant interpretation is to find the developer who is assigned to the most open issues, as this directly relates to the responsibility of fixing bugs.\n\n3. **Construct the query**:\n   - We need to find issues that are still open (`state = 'open'`).\n   - We then count the number of open issues each developer is assigned to.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (u:User)-[:assigned]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.login AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n```\n\nThis query matches users assigned to issues, filters for issues that are still open, counts the number of such issues per user, and orders the results to find the developer with the most open issues.",
        "query": "cypher\nMATCH (u:User)-[:assigned]->(i:Issue)\nWHERE i.state = 'open'\nRETURN u.login AS developer, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nLIMIT 1\n",
        "result": [
            {
                "developer": "bvaughn",
                "open_issues": 19
            }
        ],
        "isAmbiguous": true,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "Determine the developers that fixed the most bugs in ReactDOMInput.js?",
        "number": 9,
        "category": 3,
        "response": "The developers who fixed the most bugs in ReactDOMInput.js are Sophie Alpert and Hemakshi Sachdev, each having fixed 1 bug.",
        "chain_of_thought": "To determine the developers who fixed the most bugs in the file `ReactDOMInput.js`, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: \n   - We are interested in the `User`, `Commit`, `Issue`, and `File` nodes.\n   - The `User` node is connected to the `Commit` node via the `author` relationship.\n   - The `Commit` node is connected to the `Issue` node via the `fixed` relationship, indicating that the commit fixed a bug.\n   - The `Issue` node is connected to the `File` node via the `impacted` relationship, indicating that the file was impacted by the issue.\n\n2. **Filter for the specific file**: \n   - We need to filter the `File` node to find the file with the name `ReactDOMInput.js`.\n\n3. **Aggregate the number of bugs fixed by each developer**:\n   - We need to count the number of issues fixed by each developer for the specified file.\n\nThe Cypher query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'ReactDOMInput.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n```\n\nThis query will return a list of developers and the number of bugs they have fixed in the file `ReactDOMInput.js`, sorted in descending order by the number of bugs fixed.",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(i:Issue)-[:impacted]->(f:File {name: 'ReactDOMInput.js'})\nRETURN u.name AS developer, COUNT(i) AS bugs_fixed\nORDER BY bugs_fixed DESC\n",
        "result": [
            {
                "developer": "Sophie Alpert",
                "bugs_fixed": 1
            },
            {
                "developer": "Hemakshi Sachdev",
                "bugs_fixed": 1
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "who did most fixed bugs in TapEventPlugin.js?",
        "number": 10,
        "category": 3,
        "response": "I don't know. Can I help with anything else?",
        "chain_of_thought": "To determine who fixed the most bugs in the file \"TapEventPlugin.js\", we need to follow these steps:\n\n1. Identify the relevant nodes and relationships. We are interested in the User, Commit, and File nodes. The relationships involved are:\n   - `author` between User and Commit to find out who authored the commits.\n   - `changed` between Commit and File to identify the file modifications.\n   - `fixed` between Commit and Issue to determine which commits fixed bugs.\n\n2. Filter the File node to find the specific file \"TapEventPlugin.js\".\n\n3. Count the number of times each user has fixed bugs in this file.\n\nThe query to achieve this is as follows:\n\n```cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(:Issue)<-[:impacted]-(f:File {name: 'TapEventPlugin.js'})\nRETURN u.name AS developer, COUNT(c) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n```\n\nThis query will return the user who has fixed the most bugs in the file \"TapEventPlugin.js\".",
        "query": "cypher\nMATCH (u:User)-[:author]->(c:Commit)-[:fixed]->(:Issue)<-[:impacted]-(f:File {name: 'TapEventPlugin.js'})\nRETURN u.name AS developer, COUNT(c) AS fixed_bugs\nORDER BY fixed_bugs DESC\nLIMIT 1\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "incorrect"
    },
    {
        "question": "Determine the files that introduce the most bugs?",
        "number": 11,
        "category": 2,
        "response": "The files that have introduced the most bugs are `package.json` and `ReactDOMInput-test.js`, each with 5 bugs introduced.",
        "chain_of_thought": "To determine the files that introduce the most bugs, we need to identify the files that are associated with issues introduced by commits. The schema provides a way to trace this through the `Commit` and `Issue` nodes, using the `introduced` relationship between `Commit` and `Issue`, and the `changed` relationship between `Commit` and `File`.\n\nHere's the step-by-step breakdown of the query:\n\n1. **Identify the relevant nodes and relationships**:\n   - We need to find `Commit` nodes that have introduced issues, which is represented by the `introduced` relationship to `Issue` nodes.\n   - We also need to find the `File` nodes that were changed in these commits, which is represented by the `changed` relationship.\n\n2. **Aggregate the number of bugs introduced by each file**:\n   - We will count the number of issues introduced by each file.\n\n3. **Sort the files by the number of bugs introduced**:\n   - We will order the results in descending order to find the files that introduce the most bugs.\n\n4. **Limit the results if necessary**:\n   - We can limit the results to the top files if needed.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue), (c)-[:changed]->(f:File)\nRETURN f.name AS file, COUNT(i) AS bugs_introduced\nORDER BY bugs_introduced DESC\n```\n\nThis query will return the files along with the count of bugs they have introduced, sorted in descending order by the number of bugs.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue), (c)-[:changed]->(f:File)\nRETURN f.name AS file, COUNT(i) AS bugs_introduced\nORDER BY bugs_introduced DESC\n",
        "result": [
            {
                "file": "package.json",
                "bugs_introduced": 5
            },
            {
                "file": "ReactDOMInput-test.js",
                "bugs_introduced": 5
            },
            {
                "file": "ReactUpdates-test.js",
                "bugs_introduced": 3
            },
            {
                "file": "ReactDOMHooks-test.js",
                "bugs_introduced": 3
            },
            {
                "file": "renderer.js",
                "bugs_introduced": 3
            },
            {
                "file": "ReactDOMComponent-test.js",
                "bugs_introduced": 3
            },
            {
                "file": "ReactServerRendering-test.js",
                "bugs_introduced": 3
            },
            {
                "file": "ReactCompositeComponentState-test.js",
                "bugs_introduced": 3
            },
            {
                "file": "ReactDOMSelect-test.js",
                "bugs_introduced": 3
            },
            {
                "file": "EnterLeaveEventPlugin-test.js",
                "bugs_introduced": 3
            },
            {
                "file": "ReactTestUtils.js",
                "bugs_introduced": 3
            },
            {
                "file": "ChangeEventPlugin.js",
                "bugs_introduced": 3
            },
            {
                "file": "ReactTestUtils-test.js",
                "bugs_introduced": 3
            },
            {
                "file": "ReactFlightDOM-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactFlightDOMBrowser-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "index.js",
                "bugs_introduced": 2
            },
            {
                "file": "inlinedHostConfigs.js",
                "bugs_introduced": 2
            },
            {
                "file": "profilingCache-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactFresh-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactDOMServerPartialHydration-test.internal.js",
                "bugs_introduced": 2
            },
            {
                "file": "storeStressTestConcurrent-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactES6Class-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactServerRenderingHydration-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactScope-test.internal.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactDOMServerSelectiveHydration-test.internal.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactDOMLegacy.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactTestUtilsAct-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ChangeEventPlugin-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactFlightDOMRelay-test.internal.js",
                "bugs_introduced": 2
            },
            {
                "file": "utils.js",
                "bugs_introduced": 2
            },
            {
                "file": "constants.js",
                "bugs_introduced": 2
            },
            {
                "file": "OwnersListContext.js",
                "bugs_introduced": 2
            },
            {
                "file": ".eslintrc.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactSuspense-test.internal.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactProfiler-test.internal.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactIncrementalErrorHandling-test.internal.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactDOMOption-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactDOMFiber-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ExhaustiveDeps.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactDOMComponentTree.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactDOMSelect.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactDOMTextComponent-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "SyntheticEvent-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "SyntheticKeyboardEvent-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactSuspenseWithNoopRenderer-test.internal.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactUpdateQueue.js",
                "bugs_introduced": 2
            },
            {
                "file": "SchedulerWithReactIntegration.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactJSXElementValidator-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "DOMPropertyOperations-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactElementValidator-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactCompositeComponent-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactMultiChild-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactBrowserEventEmitter-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "SelectEventPlugin-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactCompositeComponentNestedState-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "FallbackCompositionState-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ResponderEventPlugin-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "reactComponentExpect-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactEventListener-test.js",
                "bugs_introduced": 2
            },
            {
                "file": "BeforeInputEventPlugin.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactDefaultInjection.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactComponent.js",
                "bugs_introduced": 2
            },
            {
                "file": "ReactDOMFizzServer-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "inspectedElement-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "store-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "README.md",
                "bugs_introduced": 1
            },
            {
                "file": "yarn.lock",
                "bugs_introduced": 1
            },
            {
                "file": "webpack.config.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMRoot-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMRoot.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMNativeEventHeuristic-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "console-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "preprocessor.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerSuspense-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMConsoleErrorReporting-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactCoffeeScriptClass-test.coffee",
                "bugs_introduced": 1
            },
            {
                "file": "ReactStrictMode-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactTypeScriptClass-test.ts",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMFiberAsync-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "app.js",
                "bugs_introduced": 1
            },
            {
                "file": "TimelineProfiler-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "preprocessData-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "webpack.standalone.js",
                "bugs_introduced": 1
            },
            {
                "file": "standalone.js",
                "bugs_introduced": 1
            },
            {
                "file": "useSyncExternalStoreShared-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMFizzShellHydration-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMImageLoad-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMNestedEvents-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMUseId-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "SimpleEventPlugin-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "devtools.js",
                "bugs_introduced": 1
            },
            {
                "file": "client.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOM.js",
                "bugs_introduced": 1
            },
            {
                "file": "useFocusWithin-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactUpdaters-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactSuspenseEffectsSemanticsDOM-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMSafariMicrotaskBug-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "profilingCommitTreeBuilder-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "profilingHostRoot-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "DOMPluginEventSystem-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "useMutableSourceHydration-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactStrictMode-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOM.d.ts",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberBeginWork.new.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberBeginWork.old.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberDevToolsHook.new.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberDevToolsHook.old.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMClient.d.ts",
                "bugs_introduced": 1
            },
            {
                "file": "types.js",
                "bugs_introduced": 1
            },
            {
                "file": "InspectedElementView.js",
                "bugs_introduced": 1
            },
            {
                "file": "OwnersStack.js",
                "bugs_introduced": 1
            },
            {
                "file": "Updaters.js",
                "bugs_introduced": 1
            },
            {
                "file": "profilingUtils-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "SidebarCommitInfo.js",
                "bugs_introduced": 1
            },
            {
                "file": "ownersListContext-test.js.snap",
                "bugs_introduced": 1
            },
            {
                "file": "profilingCache-test.js.snap",
                "bugs_introduced": 1
            },
            {
                "file": "SidebarCommitInfo.css",
                "bugs_introduced": 1
            },
            {
                "file": "Updaters.css",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlightClient.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlightDOMServerNode.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlightServer.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlight-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFizzServer.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactNativeRenderer.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberHooks.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFreshIntegration-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFabric-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "treeContext-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "agent.js",
                "bugs_introduced": 1
            },
            {
                "file": "Overlay.js",
                "bugs_introduced": 1
            },
            {
                "file": "console.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberCommitWork.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberCompleteWork.js",
                "bugs_introduced": 1
            },
            {
                "file": "Tree.js",
                "bugs_introduced": 1
            },
            {
                "file": "InspectedElementContext.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberBeginWork.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberHostContext.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberNewContext.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberHotReloading.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFreshRuntime.js",
                "bugs_introduced": 1
            },
            {
                "file": "createReactNoop.js",
                "bugs_introduced": 1
            },
            {
                "file": "TreeContext.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDebugHooks.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactNoopFlightClient.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiber.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactNoopFlightServer.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberThrow.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactHooksInspectionIntegration-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactChildFiber.js",
                "bugs_introduced": 1
            },
            {
                "file": "validateDOMNesting.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactErrorBoundaries-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactLegacyErrorBoundaries-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberClassComponent.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerIntegrationLegacyContextDisabled-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMFizzServerNode-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "getListener.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactChildren.js",
                "bugs_introduced": 1
            },
            {
                "file": "enqueueTask.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactLazy.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactServerStreamConfigNode.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerIntegrationElements-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "hydration.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactHooks-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberWorkLoop.js",
                "bugs_introduced": 1
            },
            {
                "file": "store.js",
                "bugs_introduced": 1
            },
            {
                "file": "trustedTypes-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactNativeFiberHostComponent.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactNativeMount-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMFizzServerBrowser-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactTestUtilsActUnmockedScheduler-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactNoopServer.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMFizzServerNode.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberTreeReflection.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMEventListener.js",
                "bugs_introduced": 1
            },
            {
                "file": "KeyValue.js",
                "bugs_introduced": 1
            },
            {
                "file": "ProfilerStore.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMSuspensePlaceholder-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "RulesOfHooks.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerIntegrationNewContext-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactHooksInspection-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "JestReact.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactSuspenseFuzz-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMEventListener-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMEventReplaying.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberHostContext-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberLazyComponent.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberHydrationContext.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerIntegrationTestUtils.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerIntegrationBasic-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactNativeError-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactErrorLoggingRecovery-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactTestRendererAct-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactLegacyContextDisabled-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFreshBabelPlugin.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIncrementalErrorReplay-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactErrorUtils-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "invokeGuardedCallbackImpl.www.js",
                "bugs_introduced": 1
            },
            {
                "file": "invokeGuardedCallbackImpl.js",
                "bugs_introduced": 1
            },
            {
                "file": "DevTools.js",
                "bugs_introduced": 1
            },
            {
                "file": "storeStressSync-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "Scheduler.js",
                "bugs_introduced": 1
            },
            {
                "file": "checkPropTypes.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerIntegrationClassContextType-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerIntegrationFragment-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerIntegrationModes-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberContext.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactServer-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "describeComponentFrame-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMSelection-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactTreeTraversal-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFreshMultipleRenderer-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "createFlowConfigs.js",
                "bugs_introduced": 1
            },
            {
                "file": "InitializeNativeFabricUIManager.js",
                "bugs_introduced": 1
            },
            {
                "file": "UIManager.js",
                "bugs_introduced": 1
            },
            {
                "file": "context.js",
                "bugs_introduced": 1
            },
            {
                "file": "main.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactMutableSource.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactCache.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlightClientStream.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlightDOMRelayClient.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlightDOMRelayServer.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlightServerConfigStream.js",
                "bugs_introduced": 1
            },
            {
                "file": "setupNativeStyleEditor.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFabricComponentTree.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberSuspenseComponent.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMHostConfig.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDisableSchedulerTimeoutBasedOnReactExpirationTime-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlightDOMRelayServerHostConfig.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFabricAndNative-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactARTHostConfig.js",
                "bugs_introduced": 1
            },
            {
                "file": "setTextContent.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMSelection.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactInputSelection.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlightClientWebpackBundlerConfig.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactNoopRendererAct-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlightDOMClient.js",
                "bugs_introduced": 1
            },
            {
                "file": "editor.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerIntegrationUntrustedURL-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "CommitFlamegraphListItem.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberReconciler.old.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactShallowRenderer-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactShallowRendererHooks-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactShallowRendererMemo-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactThreadIDAllocator.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactPartialRenderer.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactPartialRendererContext.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactPartialRendererHooks.js",
                "bugs_introduced": 1
            },
            {
                "file": "object-assign.inline-umd.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFreshBabelPlugin-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMTracing-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "getComponentName.js",
                "bugs_introduced": 1
            },
            {
                "file": "SchedulerNoDOM-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "SchedulerHostConfig.default.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactBlocks-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFlightServerRuntime.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactBlock.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactTestUtilsAct.js",
                "bugs_introduced": 1
            },
            {
                "file": "SchedulerBrowser-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactHooksInspection-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "DeprecatedDOMEventResponderSystem.js",
                "bugs_introduced": 1
            },
            {
                "file": "DeprecatedDOMEventResponderSystem-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "PressLegacy.js",
                "bugs_introduced": 1
            },
            {
                "file": "FocusWithin-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "PressLegacy-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "DOMModernPluginEventSystem.js",
                "bugs_introduced": 1
            },
            {
                "file": "DOMModernPluginEventSystem-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactSuspenseCallback-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "describeComponentFrame.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerIntegrationHooks-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactHooksWithNoopRenderer-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactSuspenseList-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactTransition-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactCache-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMFiberAsync-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactExpiration-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIncrementalReflection-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactNewContext-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "useSubscription-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "TransformJSXToReactBabelPlugin.js",
                "bugs_introduced": 1
            },
            {
                "file": "panel.js",
                "bugs_introduced": 1
            },
            {
                "file": "events.js",
                "bugs_introduced": 1
            },
            {
                "file": "SimpleEventPlugin-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "flight-modules.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIncremental-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIncrementalScheduling-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIncrementalTriangle-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIncrementalUpdates-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "profilerStore-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFeatureFlags.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFeatureFlags.native-fb.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFeatureFlags.native-oss.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFeatureFlags.test-renderer.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFeatureFlags.test-renderer.www.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFeatureFlags.www.js",
                "bugs_introduced": 1
            },
            {
                "file": "bundles.js",
                "bugs_introduced": 1
            },
            {
                "file": "forks.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberRoot.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactLazy-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactSuspensePlaceholder-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactSchedulerIntegration-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIncrementalPerf-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIncrementalPerf-test.internal.js.snap",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFeatureFlags.persistent.js",
                "bugs_introduced": 1
            },
            {
                "file": "test_entry_point.sh",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberScheduler.js",
                "bugs_introduced": 1
            },
            {
                "file": "unstable-new-scheduler.fb.js",
                "bugs_introduced": 1
            },
            {
                "file": "unstable-new-scheduler.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberPendingPriority.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberScheduler.new.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFiberScheduler.old.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFeatureFlags.new-scheduler.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFeatureFlags.www-new-scheduler.js",
                "bugs_introduced": 1
            },
            {
                "file": "config.source-new-scheduler.js",
                "bugs_introduced": 1
            },
            {
                "file": "setupNewScheduler.js",
                "bugs_introduced": 1
            },
            {
                "file": "ESLintRuleExhaustiveDeps-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "AttributeTableSnapshot.md",
                "bugs_introduced": 1
            },
            {
                "file": "DOMProperty.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMFiberInput.js",
                "bugs_introduced": 1
            },
            {
                "file": "setupTests.js",
                "bugs_introduced": 1
            },
            {
                "file": "jest.d.ts",
                "bugs_introduced": 1
            },
            {
                "file": "ReactBrowserEventEmitter-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIncrementalErrorLogging-test.internal.js",
                "bugs_introduced": 1
            },
            {
                "file": "CSSPropertyOperations.js",
                "bugs_introduced": 1
            },
            {
                "file": "dangerousStyleValue.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMFiberComponent.js",
                "bugs_introduced": 1
            },
            {
                "file": "tests-passing.txt",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMServerIntegration-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactClassEquivalence-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactART-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIncrementalSideEffects-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIncremental-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "validateDOMNesting-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactContextValidator-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactComponent-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactMultiChildText-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactComponentLifeCycle-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "renderSubtreeIntoContainer-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "CSSPropertyOperations-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOM-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMComponentTree-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMTextarea-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactMountDestruction-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactRenderDocument-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "refs-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactChildren-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactElementClone-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactPureComponent-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactCompositeComponentDOMMinimalism-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactTestRenderer-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactChildReconciler-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "SyntheticWheelEvent-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactEmptyComponent-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactFragment-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "findDOMNode-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "refs-destruction-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactIdentity-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactEventIndependence-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactMultiChildReconcile-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "quoteAttributeValueForBrowser-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactJSXElement-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMIframe-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "SyntheticClipboardEvent-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactElement-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactMockedComponent-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMSVG-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "getEventKey-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactMount-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "getNodeForCharacterOffset-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "EventPluginHub-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactNativeAttributePayload-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactStatelessComponent-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactErrorBoundaries-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "onlyChild-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "getEventCharCode-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "inputValueTracking-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "escapeTextContentForBrowser-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMProduction-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "reactProdInvariant-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactNativeMount-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "EventPluginRegistry-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "setInnerHTML-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "accumulateInto-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactCoroutine-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "dev-expression-with-codes-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "adler32-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "PooledClass-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactPerf-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDebugTool-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "Transaction-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "CSSProperty-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactPropTypes-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactBind-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactBindOptout-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactClass-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactClassMixin-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactComponentWithPureRenderMixin-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "update-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactCSSTransitionGroup-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactTransitionChildMapping-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactTransitionGroup-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "sliceChildren-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactStateSetters-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMIDOperations-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "traverseAllChildren-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "LinkedStateMixin-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactLinkPropTypes-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMTreeTraversal-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "DisabledInputUtil-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMInput.js",
                "bugs_introduced": 1
            },
            {
                "file": "SyntheticEvent.js",
                "bugs_introduced": 1
            },
            {
                "file": "SelectEventPlugin.js",
                "bugs_introduced": 1
            },
            {
                "file": "EventPluginUtils.js",
                "bugs_introduced": 1
            },
            {
                "file": "ResponderEventPlugin.js",
                "bugs_introduced": 1
            },
            {
                "file": "SimpleEventPlugin.js",
                "bugs_introduced": 1
            },
            {
                "file": "EnterLeaveEventPlugin.js",
                "bugs_introduced": 1
            },
            {
                "file": "EventPropagators.js",
                "bugs_introduced": 1
            },
            {
                "file": "EventPluginHub.js",
                "bugs_introduced": 1
            },
            {
                "file": "TapEventPlugin.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactEventEmitterMixin.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactEventListener.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDOMTreeTraversal.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactInjection.js",
                "bugs_introduced": 1
            },
            {
                "file": ".eslintignore",
                "bugs_introduced": 1
            },
            {
                "file": "ReactPerf.js",
                "bugs_introduced": 1
            },
            {
                "file": "reactComponentExpect.js",
                "bugs_introduced": 1
            },
            {
                "file": "createHierarchyRenderer.js",
                "bugs_introduced": 1
            },
            {
                "file": "MetaMatchers.js",
                "bugs_introduced": 1
            },
            {
                "file": "MetaMatchers-test.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDefaultPerf.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactDefaultPerfAnalysis.js",
                "bugs_introduced": 1
            },
            {
                "file": "shouldUpdateReactComponent.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactCompositeComponent.js",
                "bugs_introduced": 1
            },
            {
                "file": "ref-05-events.zh-CN.md",
                "bugs_introduced": 1
            },
            {
                "file": "FallbackCompositionState.js",
                "bugs_introduced": 1
            },
            {
                "file": "DefaultEventPluginOrder.js",
                "bugs_introduced": 1
            },
            {
                "file": "CompositionEventPlugin.js",
                "bugs_introduced": 1
            },
            {
                "file": "browserify.js",
                "bugs_introduced": 1
            },
            {
                "file": "DOMPropertyOperations.js",
                "bugs_introduced": 1
            },
            {
                "file": "adler32.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactMount.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactMarkupChecksum.js",
                "bugs_introduced": 1
            },
            {
                "file": "ReactServerRendering.js",
                "bugs_introduced": 1
            },
            {
                "file": "getReactRootElementInContainer.js",
                "bugs_introduced": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 4,
        "label": "partial"
    },
    {
        "question": "What are the most buggy files?",
        "number": 12,
        "category": 2,
        "response": "The most buggy file is 'ReactDOMInput-test.js', which is associated with 3 issues. Other files with multiple issues include 'profilingCache-test.js.snap', 'ReactDOMComponent.js', 'ChangeEventPlugin.js', 'renderer.js', 'ExhaustiveDeps.js', 'package.json', and 'ReactDOMInput.js', each associated with 2 issues.",
        "chain_of_thought": "To determine the most buggy files, we need to identify files that have been impacted by the most issues. In the given schema, the relevant nodes are the File and Issue nodes. The relationship that connects these nodes is the impacted relationship, which indicates that a file is associated with an issue.\n\nThe interpretation of \"most buggy files\" is the files that have been associated with the highest number of issues. Therefore, we need to count the number of issues impacting each file and sort them in descending order to find the files with the most issues.\n\nHere's the step-by-step breakdown of the query:\n\n1. Match the File nodes that are impacted by Issue nodes using the impacted relationship.\n2. Aggregate the number of issues impacting each file.\n3. Sort the files by the number of issues in descending order.\n4. Limit the results to the top 10 to get the most buggy files.\n\nThe complete Cypher query is:\n\n```cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n```\n\nThis query will return the names of the files and the count of issues impacting them, sorted by the number of issues in descending order, showing the top 10 most buggy files.",
        "query": "cypher\nMATCH (i:Issue)-[:impacted]->(f:File)\nRETURN f.name AS file, COUNT(i) AS issue_count\nORDER BY issue_count DESC\nLIMIT 10\n",
        "result": [
            {
                "file": "ReactDOMInput-test.js",
                "issue_count": 3
            },
            {
                "file": "profilingCache-test.js.snap",
                "issue_count": 2
            },
            {
                "file": "ReactDOMComponent.js",
                "issue_count": 2
            },
            {
                "file": "ChangeEventPlugin.js",
                "issue_count": 2
            },
            {
                "file": "renderer.js",
                "issue_count": 2
            },
            {
                "file": "ExhaustiveDeps.js",
                "issue_count": 2
            },
            {
                "file": "package.json",
                "issue_count": 2
            },
            {
                "file": "ReactDOMInput.js",
                "issue_count": 2
            },
            {
                "file": "03-interactivity-and-dynamic-uis.zh-CN.md",
                "issue_count": 1
            },
            {
                "file": "03-interactivity-and-dynamic-uis.md",
                "issue_count": 1
            }
        ],
        "isAmbiguous": true,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "what are the buggy commits that happened on March 1, 2022?",
        "number": 13,
        "category": 2,
        "response": "The buggy commit that occurred on March 1, 2022, is identified by the commit ID \"17806594cc28284fe195f918e8d77de3516848ec\". The commit message is as follows:\n\n\"Move createRoot/hydrateRoot to react-dom/client (#23385)\n\n* Move createRoot/hydrateRoot to /client\n\nWe want these APIs ideally to be imported separately from things you\nmight use in arbitrary components (like flushSync). Those other methods\nare \"isomorphic\" to how the ReactDOM tree is rendered. Similar to hooks.\n\nE.g. importing flushSync into a component that only uses it on the client\nshould ideally not also pull in the entry client implementation on the\nserver.\n\nThis also creates a nicer parity with /server where the roots are in a\nseparate entry point.\n\nUnfortunately, I cant quite do this yet because we have some legacy APIs\nthat we plan on removing (like findDOMNode) and we also havent implemented\nflushSync using a flag like startTransition does yet.\n\nAnother problem is that we currently encourage these APIs to be aliased by\n/profiling (or unstable_testing). In the future you dont have to alias\nthem because you can just change your roots to just import those APIs and\ntheyll still work with the isomorphic forms. Although we might also just\nuse export conditions for them.\n\nFor that all to work, I went with a different strategy for now where the\nreal API is in / but it comes with a warning if you use it. If you instead\nimport /client it disables the warning in a wrapper. That means that if you\nalias / then import /client that will inturn import the alias and itll\njust work.\n\nIn a future breaking changes (likely when we switch to ESM) we can just\nremove createRoot/hydrateRoot from / and move away from the aliasing\nstrategy.\n\n* Update tests to import from react-dom/client\n\n* Fix fixtures\n\n* Update warnings\n\n* Add test for the warning\n\n* Update devtools\n\n* Change order of react-dom, react-dom/client alias\n\nI think the order matters here. The first one takes precedence.\n\n* Require react-dom through client so it can be aliased\n\nCo-authored-by: Andrew Clark <git@andrewclark.io>\"",
        "chain_of_thought": "To determine the buggy commits that happened on March 1, 2022, we need to identify commits that introduced bugs on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that indicates a commit introduced a bug is the introduced relationship between Commit and Issue. We also need to filter the commits based on the committedDate property to match March 1, 2022.\n\nFirst, we need to match the commits that introduced issues:\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\n```\n\nNext, we filter these commits to only include those that happened on March 1, 2022. The committedDate property should be in the format \"2022-03-01\" with a regex to account for any time of the day:\n```cypher\nWHERE c.committedDate =~ '2022-03-01.*'\n```\n\nFinally, we return the commit IDs and their messages to identify the buggy commits:\n```cypher\nRETURN c.id AS commitId, c.message AS commitMessage\n```\n\nTherefore, the complete query is:\n```cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-03-01.*'\nRETURN c.id AS commitId, c.message AS commitMessage\n```",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2022-03-01.*'\nRETURN c.id AS commitId, c.message AS commitMessage\n",
        "result": [
            {
                "commitId": "17806594cc28284fe195f918e8d77de3516848ec",
                "commitMessage": "\"Move createRoot/hydrateRoot to react-dom/client (#23385)\n\n* Move createRoot/hydrateRoot to /client\r\n\r\nWe want these APIs ideally to be imported separately from things you\r\nmight use in arbitrary components (like flushSync). Those other methods\r\nare \"isomorphic\" to how the ReactDOM tree is rendered. Similar to hooks.\r\n\r\nE.g. importing flushSync into a component that only uses it on the client\r\nshould ideally not also pull in the entry client implementation on the\r\nserver.\r\n\r\nThis also creates a nicer parity with /server where the roots are in a\r\nseparate entry point.\r\n\r\nUnfortunately, I cant quite do this yet because we have some legacy APIs\r\nthat we plan on removing (like findDOMNode) and we also havent implemented\r\nflushSync using a flag like startTransition does yet.\r\n\r\nAnother problem is that we currently encourage these APIs to be aliased by\r\n/profiling (or unstable_testing). In the future you dont have to alias\r\nthem because you can just change your roots to just import those APIs and\r\ntheyll still work with the isomorphic forms. Although we might also just\r\nuse export conditions for them.\r\n\r\nFor that all to work, I went with a different strategy for now where the\r\nreal API is in / but it comes with a warning if you use it. If you instead\r\nimport /client it disables the warning in a wrapper. That means that if you\r\nalias / then import /client that will inturn import the alias and itll\r\njust work.\r\n\r\nIn a future breaking changes (likely when we switch to ESM) we can just\r\nremove createRoot/hydrateRoot from / and move away from the aliasing\r\nstrategy.\r\n\r\n* Update tests to import from react-dom/client\r\n\r\n* Fix fixtures\r\n\r\n* Update warnings\r\n\r\n* Add test for the warning\r\n\r\n* Update devtools\r\n\r\n* Change order of react-dom, react-dom/client alias\r\n\r\nI think the order matters here. The first one takes precedence.\r\n\r\n* Require react-dom through client so it can be aliased\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "what commits were buggy on April 9, 2021?",
        "number": 14,
        "category": 2,
        "response": "I don't know, can I help with anything else?",
        "chain_of_thought": "To determine which commits were buggy on April 9, 2021, we need to identify the commits that introduced issues on that specific date. The relevant nodes are the Commit and Issue nodes. The relationship that connects these nodes is the introduced relationship, which indicates that a commit introduced a bug.\n\nFirst, we need to filter the issues that were created on April 9, 2021. The created_at property of the Issue node will be used for this purpose. We will format the date in ISO format as \"2021-04-09T.*\" to match any time on that day using a regular expression.\n\nNext, we will find the commits that introduced these issues.\n\nThe query to find the buggy commits on April 9, 2021, is as follows:\n\n```cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2021-04-09T.*'\nRETURN c.id AS commit_id, i.id AS issue_id, i.created_at AS issue_created_at\n```\n\nThis query matches commits that introduced issues created on April 9, 2021, and returns the commit ID, issue ID, and the creation date of the issue.",
        "query": "cypher\nMATCH (c:Commit)-[:introduced]->(i:Issue)\nWHERE i.created_at =~ '2021-04-09T.*'\nRETURN c.id AS commit_id, i.id AS issue_id, i.created_at AS issue_created_at\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "incorrect"
    },
    {
        "question": "commit(s) that fixed the bug ticket 10217?",
        "number": 15,
        "category": 2,
        "response": "The commit that fixed the bug ticket 10217 is identified by the commit ID '2e757790751ab8d165fc4df37e90a59d914c4527'. The commit message is: \"Fix incorrect data in compositionend event with Korean IME on IE11 (#10217) (#12563)\\n\\n* Add isUsingKoreanIME function to check if a composition event was triggered by Korean IME\\r\\n\\r\\n* Add Korean IME check alongside useFallbackCompositionData and disable fallback mode with Korean IME\".",
        "chain_of_thought": "To address the question, we need to find the commit(s) that fixed a specific bug ticket, identified by the number 10217. In the schema, the relevant nodes are the Commit and Issue nodes. The relationship that connects a commit to an issue it fixed is the fixed relationship.\n\nHere's how we can construct the query:\n\n1. Identify the Issue node with the number 10217.\n2. Find the Commit node(s) that have a fixed relationship with this Issue node.\n\nThe Cypher query to achieve this is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 10217})\nRETURN c.id AS commit_id, c.message AS commit_message\n```\n\nThis query will return the ID and message of the commit(s) that fixed the bug ticket with the number 10217.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 10217})\nRETURN c.id AS commit_id, c.message AS commit_message\n",
        "result": [
            {
                "commit_id": "2e757790751ab8d165fc4df37e90a59d914c4527",
                "commit_message": "\"Fix incorrect data in compositionend event with Korean IME on IE11 (#10217) (#12563)\n\n* Add isUsingKoreanIME function to check if a composition event was triggered by Korean IME\r\n\r\n* Add Korean IME check alongside useFallbackCompositionData and disable fallback mode with Korean IME\""
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "which commit fixed the bug ticket 21442?",
        "number": 16,
        "category": 2,
        "response": "The commit that fixed the bug ticket 21442 is identified by the commit ID '1e3383a41154cb32d8d6b78b2451ee4dabfcb973'.",
        "chain_of_thought": "To determine which commit fixed the bug associated with ticket 21442, we need to identify the relevant nodes and relationships. The ticket number corresponds to an Issue node, and we are interested in finding the Commit node that has a fixed relationship with this Issue node.\n\nHere's the step-by-step breakdown:\n\n1. Identify the Issue node with the specific ticket number 21442.\n2. Find the Commit node that has a fixed relationship with this Issue node.\n\nThe relevant nodes are the Commit and Issue nodes. The relevant relationship is the fixed relationship between Commit and Issue.\n\nTherefore, the query to find the commit that fixed the bug ticket 21442 is:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 21442})\nRETURN c.id AS commit_id\n```\n\nThis query will return the ID of the commit that fixed the bug associated with ticket 21442.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(i:Issue {number: 21442})\nRETURN c.id AS commit_id\n",
        "result": [
            {
                "commit_id": "1e3383a41154cb32d8d6b78b2451ee4dabfcb973"
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "Determine the bug(s) that were introduced because of commit hash f912186012f17858b9d25466c658a46e25093941?",
        "number": 17,
        "category": 2,
        "response": "I'm sorry, but I cannot determine the bug(s) introduced by the commit with hash f912186012f17858b9d25466c658a46e25093941, as there is no information available in the provided context. Can I help with anything else?",
        "chain_of_thought": "To determine the bug(s) introduced by a specific commit, we need to identify the relevant nodes and relationships. The commit in question is identified by its hash, which corresponds to the `Commit` node. We are interested in finding the `Issue` nodes that were introduced by this commit. The relevant relationship between `Commit` and `Issue` for this question is the `introduced` relationship.\n\nTherefore, the query to find the bug(s) introduced by the commit with hash `f912186012f17858b9d25466c658a46e25093941` is:\n\n```cypher\nMATCH (c:Commit {id: 'f912186012f17858b9d25466c658a46e25093941'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query matches the specific commit by its ID and finds all issues that were introduced by this commit, returning the issue ID, title, and URL for each issue.",
        "query": "cypher\nMATCH (c:Commit {id: 'f912186012f17858b9d25466c658a46e25093941'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "what are the bugs caused by commit 2e757790751ab8d165fc4df37e90a59d914c4527?",
        "number": 18,
        "category": 2,
        "response": "I don't know. Can I help with anything else?",
        "chain_of_thought": "To determine the bugs caused by a specific commit, we need to identify the issues that were introduced by that commit. In the schema, the relevant nodes are the Commit and Issue nodes. The relationship that connects a commit to an issue it introduced is the introduced relationship.\n\nHere's how we can construct the query:\n\n1. Identify the specific commit using its ID.\n2. Use the introduced relationship to find the issues that were introduced by this commit.\n\nThe query to find the bugs (issues) caused by commit `2e757790751ab8d165fc4df37e90a59d914c4527` is:\n\n```cypher\nMATCH (c:Commit {id: '2e757790751ab8d165fc4df37e90a59d914c4527'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n```\n\nThis query will return the ID, title, and URL of the issues that were introduced by the specified commit.",
        "query": "cypher\nMATCH (c:Commit {id: '2e757790751ab8d165fc4df37e90a59d914c4527'})-[:introduced]->(i:Issue)\nRETURN i.id AS issue_id, i.title AS issue_title, i.url AS issue_url\n",
        "result": [],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "Determine the percentage of the fixing commits that introduced bugs on Nov. 2013?",
        "number": 19,
        "category": 3,
        "response": "The percentage of fixing commits that introduced bugs in November 2013 is 20.0%.",
        "chain_of_thought": "To determine the percentage of fixing commits that introduced bugs in November 2013, we need to follow these steps:\n\n1. **Identify the relevant nodes and relationships**: We are dealing with Commit nodes and Issue nodes. The relevant relationships are `introduced` (for commits that introduced bugs) and `fixed` (for commits that fixed bugs).\n\n2. **Filter commits by date**: We need to filter commits that occurred in November 2013. The `committedDate` property of the Commit node will be used for this purpose. We will use a regex to match dates in November 2013.\n\n3. **Calculate the number of fixing commits**: We need to count the number of commits that fixed bugs in November 2013.\n\n4. **Calculate the number of fixing commits that also introduced bugs**: We need to find commits that both fixed and introduced bugs in November 2013.\n\n5. **Calculate the percentage**: Finally, we calculate the percentage of fixing commits that also introduced bugs.\n\nHere is the Cypher query to achieve this:\n\n```cypher\n// Step 1: Find all fixing commits in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\n\n// Step 2: Count the total number of fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Step 3: Find fixing commits that also introduced bugs\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\n\n// Step 4: Count the number of fixing commits that introduced bugs\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Step 5: Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n```\n\nThis query first finds all commits that fixed issues in November 2013, counts them, and then finds those that also introduced issues. Finally, it calculates the percentage of such commits relative to all fixing commits in that month.",
        "query": "cypher\n// Step 1: Find all fixing commits in November 2013\nMATCH (c:Commit)-[:fixed]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\n\n// Step 2: Count the total number of fixing commits\nWITH COUNT(c) AS totalFixingCommits\n\n// Step 3: Find fixing commits that also introduced bugs\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\n\n// Step 4: Count the number of fixing commits that introduced bugs\nWITH totalFixingCommits, COUNT(c) AS fixingAndIntroducingCommits\n\n// Step 5: Calculate the percentage\nRETURN (fixingAndIntroducingCommits * 100.0 / totalFixingCommits) AS percentage\n",
        "result": [
            {
                "percentage": 20.0
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    },
    {
        "question": "How many fixing commits caused bugs on Nov. 2013?",
        "number": 20,
        "category": 3,
        "response": "In November 2013, there were 2 fixing commits that caused bugs.",
        "chain_of_thought": "To address the question, we need to determine the number of commits that both fixed an issue and introduced a bug in November 2013. The schema provides us with the necessary relationships and properties to achieve this.\n\n1. **Identify the relevant nodes and relationships:**\n   - We need to consider the `Commit` node, as we are interested in commits.\n   - The `fixed` relationship indicates that a commit fixed an issue.\n   - The `introduced` relationship indicates that a commit introduced a bug.\n\n2. **Filter by date:**\n   - We need to filter commits by the `committedDate` property to only include those from November 2013. The date format should be in ISO format, and since the time is not specified, we will use a regex to match the date.\n\n3. **Construct the query:**\n   - We will match commits that have both `fixed` and `introduced` relationships.\n   - We will filter these commits by the `committedDate` to ensure they fall within November 2013.\n\nHere is the complete Cypher query:\n\n```cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n```\n\nThis query matches commits that have both fixed and introduced relationships to issues and filters them by the committed date to count those that occurred in November 2013.",
        "query": "cypher\nMATCH (c:Commit)-[:fixed]->(:Issue), (c)-[:introduced]->(:Issue)\nWHERE c.committedDate =~ '2013-11-.*'\nRETURN COUNT(c) AS fixing_commits_causing_bugs\n",
        "result": [
            {
                "fixing_commits_causing_bugs": 2
            }
        ],
        "isAmbiguous": false,
        "iteration": 4,
        "label": "correct"
    }
]