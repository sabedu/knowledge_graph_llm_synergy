[
    {
        "question": "how many commits happened in last month?",
        "response": "",
        "query": "MATCH (c:Commit)-[:belongs_to]->(:Repository)\nWHERE c.committedDate >= date(\"2024-07-28T00:00:00Z\") AND c.committedDate < date(\"2024-08-28T00:00:00Z\")\nRETURN COUNT(c) AS commits_count",
        "result": [
            {
                "COUNT(c)": 156
            }
        ],
        "iteration": 0
    },
    {
        "question": "what is the latest commit?",
        "response": "",
        "query": "MATCH (c:Commit)-[:belongs_to]->(:Repository) WHERE c.committedDate = apoc.date.greatest(c.committedDate) RETURN c.id AS id, c.message AS message;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "can you tell me the details of the commits between May 27th 2018 and May 31st 2018?",
        "response": "",
        "query": "MATCH (c:Commit)-[:belongsto]->(:Repository) \nWHERE c.committedDate >= \"2018-05-27T00:00:00Z\" AND c.committedDate <= \"2018-05-31T23:59:59Z\"\nRETURN c.id, c.message, c.additions, c.deletions, c.changedFiles, c.commentsCount",
        "result": [
            {
                "c.id": "36546b5137e9012ebdc62fc9ec11e3518c9e0aab",
                "c.type": "Commit",
                "c.additions": 36,
                "c.deletions": 6,
                "c.committedDate": "2018-05-31T21:23:26Z",
                "c.changedFiles": 3,
                "c.commentsCount": 0,
                "c.message": "\"Set the correct initial value on input range (#12939)\n\n* Set the correct initial value on input range\r\n\r\n* Add description and update value diff check for input range\r\n\r\n* add isHydrating argument and tests\r\n\r\n* update node value according to isHydrating\""
            },
            {
                "c.id": "65ab53694f6edf4437034d5644a602dea162e249",
                "c.type": "Commit",
                "c.additions": 2,
                "c.deletions": 2,
                "c.committedDate": "2018-05-31T20:36:55Z",
                "c.changedFiles": 1,
                "c.commentsCount": 0,
                "c.message": "\"Update token (#12956)\""
            },
            {
                "c.id": "15767a8f8f798f0d80df4ddbc7cfaebdc29996a8",
                "c.type": "Commit",
                "c.additions": 624,
                "c.deletions": 30,
                "c.committedDate": "2018-05-30T22:38:48Z",
                "c.changedFiles": 3,
                "c.commentsCount": 0,
                "c.message": "\"[scheduler] 5/n Error handling in scheduler (#12920)\n\n* Initial failing unit test for error handling in schedule\r\n\r\n**what is the change?:**\r\nsee title\r\n\r\n**why make this change?:**\r\nAdding tests for the error handling behavior we are about to add. This\r\ntest is failing, which gives us the chance to make it pass.\r\n\r\nWrote skeletons of some other tests to add.\r\n\r\nUnit testing this way is really hacky, and Im also adding to the\r\nfixture to test this in the real browser environment.\r\n\r\n**test plan:**\r\nRan new test, saw it fail!\r\n\r\n* Add fixture for testing error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded a fixture which does the following -\r\nlogs in the console to show what happens when you use\r\n`requestAnimationFrame` to schedule a series of callbacks and some of\r\nthem throw errors.\r\n\r\nThen does the same actions with the `scheduler` and verifies that it\r\nbehaves in a similar way.\r\n\r\nHard to really verify the errors get thrown at the proper time without\r\nlooking at the console.\r\n\r\n**why make this change?:**\r\nWe want the most authentic, accurate test of how errors are handled in\r\nthe scheduler. Thats what this fixture should be.\r\n\r\n**test plan:**\r\nManually verified that this test does what I expect - right now its\r\nfailing but follow up commits will fix that.\r\n\r\n* Handle errors in scheduler\r\n\r\n**what is the change?:**\r\nWe set a flag before calling any callback, and then use a try/finally\r\nblock to wrap it. Note that we *do not* catch the error, if one is\r\nthrown. But, we only unset the flag after the callback successfully\r\nfinishes.\r\n\r\nIf we reach the finally block and the flag was not unset, then it\r\nmeans an error was thrown.\r\n\r\nIn that case we start a new postMessage callback, to finish calling any\r\nother pending callbacks if there is time.\r\n\r\n**why make this change?:**\r\nWe need to make sure that an error thrown from one callback doesnt stop\r\nother callbacks from firing, but we also dont want to catch or swallow\r\nthe error because we want engineers to still be able to log and debug\r\nerrors.\r\n\r\n**test plan:**\r\nNew tests added are passing, and we verified that they fail without this\r\nchange.\r\n\r\n* Add more tests for error handling in scheduler\r\n\r\n**what is the change?:**\r\nAdded tests for more situations where error handling may come up.\r\n\r\n**why make this change?:**\r\nTo get additional protection against this being broken in the future.\r\n\r\n**test plan:**\r\nRan new tests and verified that they fail when error handling fails.\r\n\r\n* callSafely -> callUnsafely\r\n\r\n* Fix bugs with error handling in schedule\r\n\r\n**what is the change?:**\r\n- ensure that we properly remove the callback from the linked list, even\r\nif it throws an error and is timed out.\r\n- ensure that you can call cancelScheduledWork more than once and it\r\nis idempotent.\r\n\r\n**why make this change?:**\r\nTo fix bugs :)\r\n\r\n**test plan:**\r\nExisting tests pass, and well add more tests in a follow up commit.\r\n\r\n* Unit tests for error handling with timed out callbacks\r\n\r\n**what is the change?:**\r\nMore unit tests, to cover behavior which we missed; error handling of\r\ntimed out callbacks.\r\n\r\n**why make this change?:**\r\nTo protect the future!~\r\n\r\n**test plan:**\r\nRun the new tests.\r\n\r\n* Adds fixture to test timed out callbacks with scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\nIn the other error handling fixture we compare scheduleWork error\r\nhandling to requestAnimationFrame and try to get as close as possible.\r\nThere is no timing out feature with requestAnimationFrame but\r\neffectively the timing out feature changes the order in which things\r\nare called. So we just changed the order in the requestAnimationFrame\r\nversion and that works well for illustrating the behavior we expect in\r\nthe scheduleWork test.\r\n\r\n**why make this change?:**\r\nWe need more test coverage of timed out callbacks.\r\n\r\n**test plan:**\r\nExecuted the fixture manually in Firefox and Chrome. Results looked\r\ngood.\r\n\r\n* fix rebase problems\r\n\r\n* make fixture compensate for chrome JS speed\r\n\r\n* ran prettier\r\n\r\n* Remove cancelled flag on callbackConfig in scheduler, add test\r\n\r\n**what is the change?:**\r\n- Instead of using a cancelled flag on the callbackConfig, its easier\r\nto just check the state of the callbackConfig inside\r\ncancelScheduledWork to determine if its already been cancelled. That\r\nway we dont have to remember to set the cancelled flag every time we\r\ncall a callback or cancel it. One less thing to remember.\r\n- We added a test for calling cancelScheduledWork more than once,\r\nwhich would have failed before.\r\n\r\nThanks @acdlite for suggesting this in code review. :)\r\n\r\n**why make this change?:**\r\nTo increase stability of the schedule module, increase test coverage.\r\n\r\n**test plan:**\r\nExisting tests pass and we added a new test to cover this behavior.\r\n\r\n* fix typo\""
            },
            {
                "c.id": "3118ed9d640ad28af306de308301f4fcd029ffca",
                "c.type": "Commit",
                "c.additions": 2,
                "c.deletions": 0,
                "c.committedDate": "2018-05-30T22:31:59Z",
                "c.changedFiles": 1,
                "c.commentsCount": 0,
                "c.message": "\"Expose unstable_interactiveUpdates on ReactDOM (#12943)\""
            },
            {
                "c.id": "524a74331399fd7102037c878f327afbd5e14f53",
                "c.type": "Commit",
                "c.additions": 42,
                "c.deletions": 21,
                "c.committedDate": "2018-05-30T22:31:41Z",
                "c.changedFiles": 1,
                "c.commentsCount": 0,
                "c.message": "\"Fix for Flow issues in SimpleCacheProvider (#12942)\n\n* Fix for Flow issues in SimpleCacheProvider\r\n\r\n**what is the change?:**\r\n- Fixed some flow errors which were somehow swallowed when CI\r\noriginally\r\n- Loosen flow types to avoid issue with recursive loop in Flow; https://github.com/facebook/flow/issues/5870\r\n\r\n**why make this change?:**\r\nTo unbreak master and unblock other changes we want to make.\r\n\r\n**test plan:**\r\nFlow passes!\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12941\r\n\r\n* Fix lints\""
            },
            {
                "c.id": "ae57b125c798418fb6846094cfa911530206e074",
                "c.type": "Commit",
                "c.additions": 153,
                "c.deletions": 31,
                "c.committedDate": "2018-05-30T20:12:29Z",
                "c.changedFiles": 2,
                "c.commentsCount": 0,
                "c.message": "\"[simple-cache-provider] Use LRU cache eviction (#12851)\n\n* [simple-cache-provider] Use LRU cache eviction\r\n\r\nMax size is hard-coded to 500. In the future, we should make this\r\nconfigurable per resource.\r\n\r\n* Evict PAGE_SIZE records from cache when max limit is reached\""
            },
            {
                "c.id": "e0a03c1b4d84453122c4e9d1a5e0cec52bef9066",
                "c.type": "Commit",
                "c.additions": 71,
                "c.deletions": 2,
                "c.committedDate": "2018-05-30T11:08:21Z",
                "c.changedFiles": 3,
                "c.commentsCount": 0,
                "c.message": "\"Extend input type check in selection capabilities (#12062) (#12135)\n\n* Do not set selection when prior selection is undefined (#12062)\r\n\r\n`restoreSelection` did not account for input elements that have changed\r\ntype after the commit phase. The new `text` input supported selection\r\nbut the old `email` did not and `setSelection` was incorrectly trying to\r\nrestore `null` selection state.\r\n\r\nWe also extend input type check in selection capabilities to cover cases\r\nwhere input type is `search`, `tel`, `url`, or `password`.\r\n\r\n* Add link to HTML spec for element types and selection\r\n\r\n* Add reset button to ReplaceEmailInput\r\n\r\nThis commit adds a button to restore the original state of the\r\nReplaceEmailInput fixture so that it can be run multiple times without\r\nrefreshing the page.\""
            },
            {
                "c.id": "79a740c6e32ca300d4e7ff55ab06de172d4237fd",
                "c.type": "Commit",
                "c.additions": 10,
                "c.deletions": 10,
                "c.committedDate": "2018-05-30T00:54:38Z",
                "c.changedFiles": 2,
                "c.commentsCount": 0,
                "c.message": "\"Rename variables to remove references to global global (#12931)\n\n**what is the change?:**\r\nIn a recent PR we were referencing some global variables and storing\r\nlocal references to them.\r\n\r\nTo make things more natural, we co-opted the original name of the global\r\nfor our local reference. To make this work with Flow, we get the\r\noriginal reference from window.requestAnimationFrame and assign it to\r\nconst requestAnimationFrame.\r\n\r\nSometimes React is used in an environment where window is not defined\r\n- in that case we need to use something else, or hide the window\r\nreference somewhere.\r\n\r\nWe opted to use global thinking that Babel transforms would fill that\r\nin with the proper thing.\r\n\r\nBut for some of our fixtures we are not doing that transform on the\r\nbundle.\r\n\r\n**why make this change?:**\r\nI want to unbreak this on master and then investigate more about what we\r\nshould do to fix this.\r\n\r\n**test plan:**\r\nrun `yarn build` and open the fixtures.\r\n\r\n**issue:**\r\nhttps://github.com/facebook/react/issues/12930\""
            },
            {
                "c.id": "ff724d3c286a1753723ea71e8c046498ed1aac98",
                "c.type": "Commit",
                "c.additions": 64,
                "c.deletions": 5,
                "c.committedDate": "2018-05-29T20:30:04Z",
                "c.changedFiles": 8,
                "c.commentsCount": 0,
                "c.message": "\"[scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)\n\n* Use local references to global things inside scheduler\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nWe want to avoid initially calling one version of an API and then later\r\naccessing a polyfilled version.\r\n\r\n**test plan:**\r\nRun existing tests.\r\n\r\n* Shim ReactScheduler for www\r\n\r\n**what is the change?:**\r\nIn www we want to reference the separate build of ReactScheduler,\r\nwhich allows treating it as a separate module internally.\r\n\r\n**why make this change?:**\r\nWe need to require the ReactScheduler before our rAF polyfill activates,\r\nin order to customize which custom behaviors we want.\r\n\r\nThis is also a step towards being able to experiment with using it\r\noutside of React.\r\n\r\n**test plan:**\r\nRan tests, ran the build, and ran `test-build`.\r\n\r\n* Generate a bundle for fb-www\r\n\r\n**what is the change?:**\r\nSee title\r\n\r\n**why make this change?:**\r\nSplitting out the schedule module allows us to load it before\r\npolyfills kick in for rAF and other APIs.\r\n\r\nAnd long term we want to split this into a separate module anyway, this\r\nis a step towards that.\r\n\r\n**test plan:**\r\nIll run the sync next week and verify that this all works. :)\r\n\r\n* ran prettier\r\n\r\n* fix rebase issues\r\n\r\n* Change names of variables used for holding globals\""
            },
            {
                "c.id": "001f9ef4717a0928b4875cbad3421a17f49f95a5",
                "c.type": "Commit",
                "c.additions": 48,
                "c.deletions": 3,
                "c.committedDate": "2018-05-29T19:50:04Z",
                "c.changedFiles": 6,
                "c.commentsCount": 0,
                "c.message": "\"Release script prompts for NPM 2FA code (#12908)\n\n* Release script prompts for NPM 2fa code\""
            }
        ],
        "iteration": 0
    },
    {
        "question": "return a commit message on July 31?",
        "response": "",
        "query": "MATCH (c:Commit)-[:changed]->(f:File)\nWHERE c.committedDate =~ \"2024-07-31T.*Z\"\nRETURN f.message AS commitMessage",
        "result": [
            {
                "commitMessage": null
            },
            {
                "commitMessage": null
            },
            {
                "commitMessage": null
            },
            {
                "commitMessage": null
            },
            {
                "commitMessage": null
            },
            {
                "commitMessage": null
            },
            {
                "commitMessage": null
            },
            {
                "commitMessage": null
            },
            {
                "commitMessage": null
            },
            {
                "commitMessage": null
            }
        ],
        "iteration": 0
    },
    {
        "question": "show me the changes for BeforeInputEventPlugin.js file?",
        "response": "",
        "query": "MATCH p=(file:File {name:\"BeforeInputEventPlugin.js\"})-[:changed]->(commit:Commit) \nRETURN commit.message, commit.additions, commit.deletions;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "give me all the commits for React.js file?",
        "response": "",
        "query": "MATCH p=(file:File {name:\"React.js\"})-[:belongs_to]->(repository:Repository)-[:contains]->(commit:Commit) RETURN commit;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "Determine the developers that had the most unfixed bugs?",
        "response": "",
        "query": "MATCH (u:User)-[:participates_in]->(i:Issue)<-[:impacted]-(f:File) \nWHERE i.state = 'opened' AND NOT exists((i)-[:fixed]->()) \nRETURN u.name AS developer, count(*) AS unfixed_bugs ORDER BY unfixed_bugs DESC LIMIT 1;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "Determine the developers that fixed the most bugs in ReactDOMInput.js?",
        "response": "",
        "query": "MATCH (user:User)-[:contributes_to]->(repo:Repository)-[:contains]->(file:File)<-[:changed]-(commit:Commit)-[:fixed]->(issue:Issue)\nWHERE file.name = 'ReactDOMInput.js'\nWITH user, COUNT(*) AS bugFixCount\nORDER BY bugFixCount DESC\nRETURN DISTINCT user.name, bugFixCount",
        "result": [],
        "iteration": 0
    },
    {
        "question": "who did most fixed bugs in TapEventPlugin.js?",
        "response": "",
        "query": "MATCH (u:User)-[:fixed]->(i:Issue)<-[:belongs_to]-(r:Repository {name: \"TapEventPlugin.js\"}) \nWITH u, count(*) as fixesCount \nORDER BY fixesCount DESC \nLIMIT 1 \nRETURN u.name AS user, fixesCount AS fixesCount",
        "result": [],
        "iteration": 0
    },
    {
        "question": "Determine the files that introduce the most bugs?",
        "response": "",
        "query": "MATCH (n:Node)-[:introduced]->(i:Issue)<-[:impacted]-(f:File) \nRETURN f.name AS file, COUNT(*) AS bugCount \nORDER BY bugCount DESC;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "What are the most buggy files?",
        "response": "",
        "query": "MATCH (f:File)-[:belongs_to]->(r:Repository)<-[:changed]-(c:Commit)\nWHERE c.committedDate <= datetime(\"2024-08-28T19:28:45+00:00Z\")\nRETURN f.name AS file, COUNT(c) AS commitCount ORDER BY commitCount DESC LIMIT 10;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "what are the buggy commits that happened on March 1, 2022?",
        "response": "",
        "query": "MATCH (c:Commit)-[:changed]->(f:File) \nWHERE c.committedDate =~ \"2022-03-01T00:00:00Z\" \nRETURN c.id AS commitId, f.name AS fileName;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "what commits were buggy on April 9, 2021?",
        "response": "",
        "query": "MATCH (c:Commit)-[:changed]->(f:File) WHERE c.committedDate =~ \"2021-04-09T00:00:00Z\" RETURN c.id AS commit_id;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "commit(s) that fixed the bug ticket 10217?",
        "response": "",
        "query": "MATCH (n:Issue)-[:fixed]->(c:Commit)<-[:belongs_to]-(r:Repository) \nWHERE n.id = '10217' \nRETURN c;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "which commit fixed the bug ticket 21442?",
        "response": "",
        "query": "MATCH (c:Commit)-[:fixed]->(i:Issue)<-[:impacted]-(f:File)\nWHERE i.number = 21442\nRETURN c.id AS commitId, f.name AS fileName;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "Determine the bug(s) that were introduced because of commit hash f912186012f17858b9d25466c658a46e25093941?",
        "response": "",
        "query": "MATCH (c:Commit {hash: \"0e6edd9f01edbbdc1dafad64d982e7074ae299b9\"})-[:introduced]->(i:Issue)<-[:impacted]-(f:File) WHERE c.hash = \"f912186012f17858b9d25466c658a46e25093941\" RETURN i;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "what are the bugs caused by commit 2e757790751ab8d165fc4df37e90a59d914c4527?",
        "response": "",
        "query": "MATCH p=(commit:Commit {id:\"2e757790751ab8d165fc4df37e90a59d914c4527\"})-[:changed]->(file:File)-[:belongs_to]->(repository:Repository)\nWHERE EXISTS ((issue:Issue)<-[:impacted]-(file))\nRETURN DISTINCT issue.title AS BugTitle, issue.body AS BugDescription",
        "result": [],
        "iteration": 0
    },
    {
        "question": "Determine the percentage of the fixing commits that introduced bugs on Nov. 2013?",
        "response": "",
        "query": "MATCH (c:Commit)-[:fixed]->(i:Issue)<-[:impacted]-(f:File) \nWHERE c.committedDate =~ \"2013-11\" AND exists((c)-[:changed]->()) \nRETURN count(c) AS fixingCommits, COUNT(DISTINCT f) AS impactedFiles \nWITH fixingCommits, impactedFiles \nRETURN 100 * COUNT(CASE WHEN EXISTS ((c)-[:introduced]->(i)) THEN 1 ELSE NULL END) / fixingCommits AS percentageIntroducedBugs",
        "result": [],
        "iteration": 0
    },
    {
        "question": "which developer has most number of bugs yet to be fixed?",
        "response": "",
        "query": "MATCH (u:User)-[:contributes_to]->(r:Repository)<-[:fixed]-(i:Issue)\nWHERE i.state = 'open'\nWITH u, COUNT(i) AS open_issues\nORDER BY open_issues DESC\nRETURN u.name, open_issues AS total_open_issues;",
        "result": [],
        "iteration": 0
    },
    {
        "question": "How many fixing commits caused bugs on Nov. 2013?",
        "response": "",
        "query": "MATCH (c:Commit)-[:fixed]->(i:Issue)<-[:impacted]-(f:File|Node) \nWHERE c.committedDate =~ \"2013-11-[0-9]{1,2}T00:00:00Z\" AND i.state = \"closed\"\nRETURN COUNT(c) AS fixingCommitsCausedBugs",
        "result": [
            {
                "fixingCommitsCausedBugs": 0
            }
        ],
        "iteration": 0
    }
]